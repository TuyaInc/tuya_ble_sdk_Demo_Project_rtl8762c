
========================================================================

** ELF Header Information

    File Name: D:\work\BLE\tuya_ble_sdk\tuya_ble_app_demo\realtek_rtl8762c\BEE2-SDK-v1.1.0\board\evb\tuya_ble_sdk_Demo_Project_rtl8762c\Objects\app.axf

    Machine class: ELFCLASS32 (32-bit)
    Data encoding: ELFDATA2LSB (Little endian)
    Header version: EV_CURRENT (Current version)
    Operating System ABI: none
    ABI Version: 0
    File Type: ET_EXEC (Executable) (2)
    Machine: EM_ARM (ARM)

    Image Entry point: 0x0080e409
    Flags: EF_ARM_HASENTRY + EF_ARM_ABI_FLOAT_HARD (0x05000402)

    ARM ELF revision: 5 (ABI version 2)

    Conforms to Hard float procedure-call standard

    Built with
    Component: ARM Compiler 5.06 update 6 (build 750) Tool: armasm [4d35ec]
    Component: ARM Compiler 5.06 update 6 (build 750) Tool: armlink [4d35ed]

    Header size: 52 bytes (0x34)
    Program header entry size: 32 bytes (0x20)
    Section header entry size: 40 bytes (0x28)

    Program header entries: 2
    Section header entries: 22

    Program header offset: 773636 (0x000bce04)
    Section header offset: 773700 (0x000bce44)

    Section header string table index: 21

========================================================================

** Program header #0 (PT_LOAD) [PF_X + PF_W + PF_R + PF_ARM_ENTRY]
    Size : 72924 bytes (65960 bytes in file)
    Virtual address: 0x0080e000 (Alignment 4)


====================================

** Program header #1 (PT_LOAD) [PF_R]
    Size : 17760 bytes
    Virtual address: 0x08800000 (Alignment 4)


========================================================================

** Section #1 'app.bin' (SHT_PROGBITS) [SHF_ALLOC]
    Size   : 1024 bytes (alignment 4)
    Address: 0x0080e000

    0x80e000:   05 00 01 01 93 27 00 00 00 01 00 00 6d 67 de f1    .....'......mg..
    0x80e010:   3e 33 e8 11 b1 02 4d 2d f4 0c de 01 00 e4 80 00    >3....M-........
    0x80e020:   00 e4 80 00 00 00 00 00 00 e0 80 00 00 00 00 00    ................
    0x80e030:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e040:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e050:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e060:   01 40 00 00 a2 9c 00 ec 75 6e 6b 6e 6f 77 6e 23    .@......unknown#
    0x80e070:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e080:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e090:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0a0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0b0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0c0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0d0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0e0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0f0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e100:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e110:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e120:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e130:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e140:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e150:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e160:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e170:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e180:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e190:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1a0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1b0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1c0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1d0:   00 00 00 00 00 00 00 00 01 d1 85 0e 08 c0 81 00    ................
    0x80e1e0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1f0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e200:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e210:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e220:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e230:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e240:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e250:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e260:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e270:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e280:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e290:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2a0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2b0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2c0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2d0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2e0:   ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
    0x80e2f0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e300:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e310:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e320:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e330:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e340:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e350:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e360:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e370:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e380:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e390:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3a0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3b0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3c0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3d0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3e0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3f0:   ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................


** Section #2 'FLASH_START_ADDR' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 8 bytes (alignment 4)
    Address: 0x0080e400

    $t
    RESET
    $v0
    Reset_Handler
;;; ..\\..\\..\\src\\mcu\\rtl876x\\arm\\startup_rtl8762c.s
;;;96                     IMPORT SystemInit
;;;96                     LDR    R0, =SystemInit
        0x0080e400:    4800        .H      LDR      r0,[pc,#0] ; [0x80e404] = 0x80e59f
;;;97                     BX     R0
        0x0080e402:    4700        .G      BX       r0
    $d
        0x0080e404:    0080e59f    ....    DCD    8447391

** Section #3 'FLASH_TEXT' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 63144 bytes (alignment 4)
    Address: 0x0080e408

    $t
    !!!main
    __main
        0x0080e408:    f3af8000    ....    NOP.W    
        0x0080e40c:    f000f817    ....    BL       __rt_entry ; 0x80e43e
    .ARM.Collect$$_printf_percent$$00000009
    .ARM.Collect$$_printf_percent$$00000000
    _printf_d
    _printf_percent
        0x0080e410:    2964        d)      CMP      r1,#0x64
        0x0080e412:    f00c8701    ....    BEQ.W    _printf_int_dec ; 0x81b218
    .ARM.Collect$$_printf_percent$$00000014
    _printf_s
        0x0080e416:    2973        s)      CMP      r1,#0x73
        0x0080e418:    f00c87f3    ....    BEQ.W    _printf_string ; 0x81b402
    .ARM.Collect$$_printf_percent$$00000017
    _printf_percent_end
        0x0080e41c:    2000        .       MOVS     r0,#0
        0x0080e41e:    4770        pG      BX       lr
    .ARM.Collect$$libinit$$00000000
    __rt_lib_init
        0x0080e420:    b51f        ..      PUSH     {r0-r4,lr}
    .ARM.Collect$$libinit$$00000001
    __rt_lib_init_fp_1
        0x0080e422:    f00dfdeb    ....    BL       _fp_init ; 0x81bffc
    .ARM.Collect$$libinit$$00000004
    .ARM.Collect$$libinit$$0000000A
    .ARM.Collect$$libinit$$0000000C
    .ARM.Collect$$libinit$$0000000D
    __rt_lib_init_heap_1
    __rt_lib_init_preinit_1
    __rt_lib_init_rand_2
    __rt_lib_init_user_alloc_1
        0x0080e426:    f00cff56    ..V.    BL       _rand_init ; 0x81b2d6
    .ARM.Collect$$libinit$$0000000E
    .ARM.Collect$$libinit$$0000000F
    __rt_lib_init_lc_common
    __rt_lib_init_rand_1
        0x0080e42a:    f00df8a1    ....    BL       __rt_locale ; 0x81b570
        0x0080e42e:    0004        ..      MOVS     r4,r0
    .ARM.Collect$$libinit$$00000011
    .ARM.Collect$$libinit$$00000012
    __rt_lib_init_lc_collate_1
    __rt_lib_init_lc_ctype_2
        0x0080e430:    2000        .       MOVS     r0,#0
        0x0080e432:    2100        .!      MOVS     r1,#0
        0x0080e434:    f00dfdcc    ....    BL       _get_lc_ctype ; 0x81bfd0
        0x0080e438:    1c40        @.      ADDS     r0,r0,#1
        0x0080e43a:    6060        ``      STR      r0,[r4,#4]
    .ARM.Collect$$libinit$$00000013
    .ARM.Collect$$libinit$$00000015
    .ARM.Collect$$libinit$$00000017
    .ARM.Collect$$libinit$$00000019
    .ARM.Collect$$libinit$$0000001B
    .ARM.Collect$$libinit$$0000001D
    .ARM.Collect$$libinit$$0000001F
    .ARM.Collect$$libinit$$00000021
    .ARM.Collect$$libinit$$00000023
    .ARM.Collect$$libinit$$00000025
    .ARM.Collect$$libinit$$0000002C
    .ARM.Collect$$libinit$$0000002E
    .ARM.Collect$$libinit$$00000030
    .ARM.Collect$$libinit$$00000032
    .ARM.Collect$$libinit$$00000033
    __rt_lib_init_alloca_1
    __rt_lib_init_argv_1
    __rt_lib_init_atexit_1
    __rt_lib_init_clock_1
    __rt_lib_init_cpp_1
    __rt_lib_init_exceptions_1
    __rt_lib_init_fp_trap_1
    __rt_lib_init_getenv_1
    __rt_lib_init_lc_ctype_1
    __rt_lib_init_lc_monetary_1
    __rt_lib_init_lc_numeric_1
    __rt_lib_init_lc_time_1
    __rt_lib_init_return
    __rt_lib_init_signal_1
    __rt_lib_init_stdio_1
        0x0080e43c:    bd1f        ..      POP      {r0-r4,pc}
    .ARM.Collect$$rtentry$$00000000
    .ARM.Collect$$rtentry$$00000002
    .ARM.Collect$$rtentry$$00000004
    __rt_entry
    __rt_entry_presh_1
    __rt_entry_sh
        0x0080e43e:    f000f969    ..i.    BL       __user_setup_stackheap ; 0x80e714
        0x0080e442:    4611        .F      MOV      r1,r2
    .ARM.Collect$$rtentry$$00000009
    .ARM.Collect$$rtentry$$0000000A
    __rt_entry_li
    __rt_entry_postsh_1
        0x0080e444:    f7ffffec    ....    BL       __rt_lib_init ; 0x80e420
    .ARM.Collect$$rtentry$$0000000C
    .ARM.Collect$$rtentry$$0000000D
    __rt_entry_main
    __rt_entry_postli_1
        0x0080e448:    f001f8b2    ....    BL       main ; 0x80f5b0
        0x0080e44c:    f44cf4ea    L...    BL       exit ; 0x5ae24
    .app.flash.text
    ram_init
;;;369    {
        0x0080e450:    b510        ..      PUSH     {r4,lr}
;;;370        //copy data on ro
;;;371        extern char Image$$RAM_DATA_ON$$RO$$Base[];
;;;372        extern char Load$$RAM_DATA_ON$$RO$$Base[];
;;;373        extern unsigned int Image$$RAM_DATA_ON$$RO$$Length;
;;;374    
;;;375        memcpy(Image$$RAM_DATA_ON$$RO$$Base,
        0x0080e452:    4a7a        zJ      LDR      r2,[pc,#488] ; [0x80e63c] = 0x4bc
        0x0080e454:    497a        zI      LDR      r1,[pc,#488] ; [0x80e640] = 0x81dba4
        0x0080e456:    487b        {H      LDR      r0,[pc,#492] ; [0x80e644] = 0x207c00
        0x0080e458:    f44bf51f    K...    BL       __aeabi_memcpy ; 0x59e9a
;;;376               Load$$RAM_DATA_ON$$RO$$Base,
;;;377               (unsigned int)&Image$$RAM_DATA_ON$$RO$$Length);
;;;378    
;;;379        //copy data on rw
;;;380        extern char Image$$RAM_DATA_ON$$RW$$Base[];
;;;381        extern char Load$$RAM_DATA_ON$$RW$$Base[];
;;;382        extern unsigned int Image$$RAM_DATA_ON$$RW$$Length;
;;;383    
;;;384        memcpy(Image$$RAM_DATA_ON$$RW$$Base,
        0x0080e45c:    4a7a        zJ      LDR      r2,[pc,#488] ; [0x80e648] = 0x88
        0x0080e45e:    497b        {I      LDR      r1,[pc,#492] ; [0x80e64c] = 0x81e060
        0x0080e460:    487b        {H      LDR      r0,[pc,#492] ; [0x80e650] = 0x2080bc
        0x0080e462:    f44bf51a    K...    BL       __aeabi_memcpy ; 0x59e9a
;;;385               Load$$RAM_DATA_ON$$RW$$Base,
;;;386               (unsigned int)&Image$$RAM_DATA_ON$$RW$$Length);
;;;387    
;;;388        //clear data on zi
;;;389        extern char Image$$RAM_DATA_ON$$ZI$$Base[];
;;;390        extern unsigned int Image$$RAM_DATA_ON$$ZI$$Length;
;;;391    
;;;392        memset(Image$$RAM_DATA_ON$$ZI$$Base,
        0x0080e466:    497b        {I      LDR      r1,[pc,#492] ; [0x80e654] = 0x1b34
        0x0080e468:    487b        {H      LDR      r0,[pc,#492] ; [0x80e658] = 0x208144
        0x0080e46a:    f44bf5d7    K...    BL       __aeabi_memclr ; 0x5a01c
;;;393               0,
;;;394               (unsigned int)&Image$$RAM_DATA_ON$$ZI$$Length);
;;;395    
;;;396        //copy cache ro
;;;397        extern char Image$$CACHE_DATA_ON$$RO$$Base[];
;;;398        extern char Load$$CACHE_DATA_ON$$RO$$Base[];
;;;399        extern unsigned int Image$$CACHE_DATA_ON$$RO$$Length;
;;;400    
;;;401        memcpy(Image$$CACHE_DATA_ON$$RO$$Base,
        0x0080e46e:    4a7b        {J      LDR      r2,[pc,#492] ; [0x80e65c] = 0
        0x0080e470:    497b        {I      LDR      r1,[pc,#492] ; [0x80e660] = 0x81e1a8
        0x0080e472:    487c        |H      LDR      r0,[pc,#496] ; [0x80e664] = 0x21c000
        0x0080e474:    f44bf511    K...    BL       __aeabi_memcpy ; 0x59e9a
;;;402               Load$$CACHE_DATA_ON$$RO$$Base,
;;;403               (unsigned int)&Image$$CACHE_DATA_ON$$RO$$Length);
;;;404    
;;;405        //copy share cache ram rw
;;;406        extern char Image$$CACHE_DATA_ON$$RW$$Base[];
;;;407        extern char Load$$CACHE_DATA_ON$$RW$$Base[];
;;;408        extern unsigned int Image$$CACHE_DATA_ON$$RW$$Length;
;;;409    
;;;410        memcpy(Image$$CACHE_DATA_ON$$RW$$Base,
        0x0080e478:    4a7b        {J      LDR      r2,[pc,#492] ; [0x80e668] = 0
        0x0080e47a:    497c        |I      LDR      r1,[pc,#496] ; [0x80e66c] = 0x81e1a8
        0x0080e47c:    487c        |H      LDR      r0,[pc,#496] ; [0x80e670] = 0x21c000
        0x0080e47e:    f44bf50c    K...    BL       __aeabi_memcpy ; 0x59e9a
;;;411               Load$$CACHE_DATA_ON$$RW$$Base,
;;;412               (unsigned int)&Image$$CACHE_DATA_ON$$RW$$Length);
;;;413    
;;;414        //clear share cache ram zi
;;;415        extern char Image$$CACHE_DATA_ON$$ZI$$Base[];
;;;416        extern unsigned int Image$$CACHE_DATA_ON$$ZI$$Length;
;;;417    
;;;418        memset(Image$$CACHE_DATA_ON$$ZI$$Base,
        0x0080e482:    e8bd4010    ...@    POP      {r4,lr}
        0x0080e486:    497b        {I      LDR      r1,[pc,#492] ; [0x80e674] = 0
        0x0080e488:    487b        {H      LDR      r0,[pc,#492] ; [0x80e678] = 0x21c000
        0x0080e48a:    f44bb5c7    K...    B        __aeabi_memclr ; 0x5a01c
    random_seed_init
;;;419               0,
;;;420               (unsigned int)&Image$$CACHE_DATA_ON$$ZI$$Length);
;;;421    }
;;;422    
;;;423    uint32_t random_seed_value;
;;;424    
;;;425    APP_FLASH_TEXT_SECTION
;;;426    void random_seed_init(void)
;;;427    {
        0x0080e48e:    b57f        ..      PUSH     {r0-r6,lr}
;;;428        uint16_t crc16;
;;;429        uint8_t buf[DATA_SIZE_FOR_RANDOM_SEED];
;;;430        uint8_t *sour_addr = (uint8_t *)(OTP->appDataAddr + OTP->appDataSize + OTP->heapDataONSize);
        0x0080e490:    f44f1000    O...    MOV      r0,#0x200000
        0x0080e494:    e9f012e0    ....    LDRD     r1,r2,[r0,#0x380]!
        0x0080e498:    4411        .D      ADD      r1,r1,r2
        0x0080e49a:    6880        .h      LDR      r0,[r0,#8]
        0x0080e49c:    2210        ."      MOVS     r2,#0x10
        0x0080e49e:    180d        ..      ADDS     r5,r1,r0
;;;431    
;;;432        memcpy(buf, sour_addr, DATA_SIZE_FOR_RANDOM_SEED);
        0x0080e4a0:    4629        )F      MOV      r1,r5
        0x0080e4a2:    4668        hF      MOV      r0,sp
        0x0080e4a4:    f44bf4f9    K...    BL       __aeabi_memcpy ; 0x59e9a
;;;433        crc16 = btxfcs(0, buf, DATA_SIZE_FOR_RANDOM_SEED);
        0x0080e4a8:    2210        ."      MOVS     r2,#0x10
        0x0080e4aa:    4669        iF      MOV      r1,sp
        0x0080e4ac:    2000        .       MOVS     r0,#0
        0x0080e4ae:    f7f8df91    ....    BL       btxfcs ; 0x73d4
;;;434    
;;;435        random_seed_value = (crc16 << 16) | (*(volatile uint32_t *)(0x4005817C) & 0xFFFF);
        0x0080e4b2:    4972        rI      LDR      r1,[pc,#456] ; [0x80e67c] = 0x40058000
        0x0080e4b4:    f8d1117c    ..|.    LDR      r1,[r1,#0x17c]
        0x0080e4b8:    4e71        qN      LDR      r6,[pc,#452] ; [0x80e680] = 0x208144
        0x0080e4ba:    f360411f    `..A    BFI      r1,r0,#16,#16
;;;436    
;;;437        random_seed_value *= platform_random(0xFFFFFFFF);
        0x0080e4be:    f04f30ff    O..0    MOV      r0,#0xffffffff
        0x0080e4c2:    60f1        .`      STR      r1,[r6,#0xc]
        0x0080e4c4:    f7f9d975    ..u.    BL       platform_random ; 0x77b2
        0x0080e4c8:    68f1        .h      LDR      r1,[r6,#0xc]
        0x0080e4ca:    4348        HC      MULS     r0,r1,r0
;;;438    
;;;439        srand(random_seed_value);
        0x0080e4cc:    60f0        .`      STR      r0,[r6,#0xc]
        0x0080e4ce:    f00cfeed    ....    BL       srand ; 0x81b2ac
;;;440    
;;;441        for (int i = 0; i < (DATA_SIZE_FOR_RANDOM_SEED / 4); ++i)
        0x0080e4d2:    2400        .$      MOVS     r4,#0
        0x0080e4d4:    f000f8fc    ....    BL       rand ; 0x80e6d0
        0x0080e4d8:    f8450024    E.$.    STR      r0,[r5,r4,LSL #2]
        0x0080e4dc:    1c64        d.      ADDS     r4,r4,#1
        0x0080e4de:    2c04        .,      CMP      r4,#4
        0x0080e4e0:    dbf8        ..      BLT      0x80e4d4 ; random_seed_init + 70
;;;442        {
;;;443            *(uint32_t *)(sour_addr + i * 4) = rand();
;;;444        }
;;;445    
;;;446        random_seed_value = rand();
        0x0080e4e2:    f000f8f5    ....    BL       rand ; 0x80e6d0
        0x0080e4e6:    60f0        .`      STR      r0,[r6,#0xc]
;;;447    }
        0x0080e4e8:    bd7f        ..      POP      {r0-r6,pc}
    print_reset_reason
;;;448    
;;;449    APP_FLASH_TEXT_SECTION
;;;450    void SystemInit(void)
;;;451    {
;;;452        //hci mode check and bypass app
;;;453        if (check_hci_mode_flag())
;;;454        {
;;;455            return;
;;;456        }
;;;457    
;;;458        //init pre_main and main functions
;;;459        extern void pre_main(void);
;;;460        app_pre_main = (APP_MAIN_FUNC)pre_main;
;;;461        app_main = (APP_MAIN_FUNC)common_main;
;;;462    
;;;463        /******** update otp here**********/
;;;464        //ram config
;;;465        OTP->appDataSize = APP_GLOBAL_SIZE;
;;;466        OTP->heapDataONSize = HEAP_DATA_ON_SIZE - DATA_SIZE_FOR_RANDOM_SEED;
;;;467    
;;;468        /* not share: SHARE_CACHE_RAM_0K; 8K: SHARE_CACHE_RAM_8K; 16K: SHARE_CACHE_RAM_16K */
;;;469    #if ((16 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;470        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_16K;
;;;471    #elif ((8 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;472        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_8K;
;;;473    #else
;;;474        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_0K;
;;;475    #endif
;;;476    
;;;477        //sw timer config
;;;478    #ifdef TIMER_MAX_NUMBER
;;;479        //define TIMER_MAX_NUMBER in otp_config.h
;;;480        OTP->timerMaxNumber = TIMER_MAX_NUMBER;
;;;481    #endif
;;;482    
;;;483        //flash config
;;;484        /*config enable flash block proect depending on flash layout and flash id*/
;;;485    #if (FLASH_BLOCK_PROTECT_ENABLE == 1)
;;;486        OTP->bp_enable = 1;
;;;487    #else
;;;488        OTP->bp_enable = 0;
;;;489    #endif
;;;490        OTP->delay_10us_after_toggle_cs = AFTER_TOGGLE_CS_DELAY;
;;;491    
;;;492    
;;;493        //os config
;;;494        /*config enable check task stack overflow*/
;;;495    #if (CHECK_STACK_OVERFLOW_ENABLE == 1)
;;;496        OTP->checkForStackOverflow = 1;
;;;497    #else
;;;498        OTP->checkForStackOverflow = 0;
;;;499    #endif
;;;500    
;;;501    
;;;502        //platform config
;;;503        /*config enable platform assert*/
;;;504    #if (PLATFORM_ASSERT_ENABLE == 1)
;;;505        OTP->enableASSERT = 1;
;;;506    #else
;;;507        OTP->enableASSERT = 0;
;;;508    #endif
;;;509    
;;;510        /*Print all log in log buffer before entering DLPS */
;;;511    #if (CHECK_LOG_BUFFER_BEFORE_DLPS_ENABLE == 1)
;;;512        OTP->printAllLogBeforeEnterDLPS = 1;
;;;513    #else
;;;514        OTP->printAllLogBeforeEnterDLPS = 0;
;;;515    #endif
;;;516    
;;;517        /*config enable log or not*/
;;;518    #if (CONFIG_LOG_FUNCTION_ENABLE == 1)
;;;519        OTP->logDisable = 0;
;;;520    #else
;;;521        OTP->logDisable = 1;
;;;522    #endif
;;;523    
;;;524        /*config enable swd pinmux*/
;;;525    #if (SWD_PINMUX_ENABLE == 1)
;;;526        OTP->SWD_ENABLE = 1;
;;;527    #else
;;;528        OTP->SWD_ENABLE = 0;
;;;529    #endif
;;;530    
;;;531        /*config enable watch dog in rom*/
;;;532    #if (ROM_WATCH_DOG_ENABLE == 1)
;;;533        OTP->wdgEnableInRom = 1;
;;;534    #else
;;;535        OTP->wdgEnableInRom = 0;
;;;536    #endif
;;;537    
;;;538        /*config watch dog mode in rom, defualt reset all*/
;;;539        OTP->wdgMode = ROM_WATCH_DOG_MODE;
;;;540    
;;;541        /*use os tick as log timestamp instead of TIM7*/
;;;542        OTP->log_timestamp_src = LOG_TIMESTAMP_OS;
;;;543    
;;;544    
;;;545        //app config
;;;546        OTP->ota_timeout_total = OTA_TIMEOUT_TOTAL;
;;;547        OTP->ota_timeout_wait4_conn = OTA_TIMEOUT_WAIT4_CONN;
;;;548        OTP->ota_timeout_wait4_image_transfer = OTA_TIMEOUT_WAIT4_IMAGE_TRANS;
;;;549        OTP->ota_timeout_ctittv = OTA_TIMEOUT_CTITTV;
;;;550    
;;;551    #if ROM_OTA_LINKLOSS_RST
;;;552        OTP->ota_link_loss_reset = 1;
;;;553    #endif
;;;554        /*config bt stack parameters in rom*/
;;;555    #ifdef BT_STACK_CONFIG_ENABLE
;;;556        bt_stack_config_init();
;;;557    #endif
;;;558    
;;;559    //add more otp config here
;;;560    }
;;;561    
;;;562    //Note: call print_reset_reason() before ram_init();
;;;563    APP_FLASH_TEXT_SECTION
;;;564    void print_reset_reason(void)
;;;565    {
        0x0080e4ea:    b570        p.      PUSH     {r4-r6,lr}
;;;566        if (check_reset_ram.check_reset_ram_pattern != RESET_RAM_PATTERN)
        0x0080e4ec:    4d65        eM      LDR      r5,[pc,#404] ; [0x80e684] = 0x2080bc
        0x0080e4ee:    4966        fI      LDR      r1,[pc,#408] ; [0x80e688] = 0x72657400
        0x0080e4f0:    4c66        fL      LDR      r4,[pc,#408] ; [0x80e68c] = 0x21100302
        0x0080e4f2:    6828        (h      LDR      r0,[r5,#0]
;;; ..\..\..\inc\peripheral\rtl876x_wdg.h
;;;135        return (T_SW_RESET_REASON)flash_ioctl(flash_ioctl_get_aon_record_reset_reason, 0, 0);
        0x0080e4f4:    f04f0200    O...    MOV      r2,#0
        0x0080e4f8:    ebb12f00    .../    CMP      r1,r0,LSL #8
        0x0080e4fc:    d005        ..      BEQ      0x80e50a ; print_reset_reason + 32
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c
;;;568            BOOT_PRINT_INFO0("RESET Reason: HW or OTA");
        0x0080e4fe:    4620         F      MOV      r0,r4
        0x0080e500:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0080e504:    4962        bI      LDR      r1,[pc,#392] ; [0x80e690] = 0x8800000
        0x0080e506:    f7f99aaa    ....    B        log_buffer ; 0x7a5e
;;; ..\..\..\inc\peripheral\rtl876x_wdg.h
;;;135        return (T_SW_RESET_REASON)flash_ioctl(flash_ioctl_get_aon_record_reset_reason, 0, 0);
        0x0080e50a:    2100        .!      MOVS     r1,#0
        0x0080e50c:    f2450006    E...    MOV      r0,#0x5006
        0x0080e510:    f7fdddaf    ....    BL       flash_ioctl ; 0xc072
        0x0080e514:    f01003ff    ....    ANDS     r3,r0,#0xff
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c
;;;574            if (sw_reset_type != (T_SW_RESET_REASON)0)
        0x0080e518:    d003        ..      BEQ      0x80e522 ; print_reset_reason + 56
;;;575            {
;;;576                BOOT_PRINT_INFO1("RESET Reason: SW(reset except aon), TYPE 0x%x", sw_reset_type);
        0x0080e51a:    495d        ]I      LDR      r1,[pc,#372] ; [0x80e690] = 0x8800000
        0x0080e51c:    2201        ."      MOVS     r2,#1
        0x0080e51e:    311c        .1      ADDS     r1,r1,#0x1c
        0x0080e520:    e004        ..      B        0x80e52c ; print_reset_reason + 66
;;;577            }
;;;578            else //reset all will clear aon register
;;;579            {
;;;580                BOOT_PRINT_INFO1("RESET Reason: SW(reset all), TYPE 0x%x", check_reset_ram.check_reset_ram_type);
        0x0080e522:    6828        (h      LDR      r0,[r5,#0]
        0x0080e524:    495a        ZI      LDR      r1,[pc,#360] ; [0x80e690] = 0x8800000
        0x0080e526:    0e03        ..      LSRS     r3,r0,#24
        0x0080e528:    2201        ."      MOVS     r2,#1
        0x0080e52a:    3150        P1      ADDS     r1,r1,#0x50
        0x0080e52c:    4620         F      MOV      r0,r4
        0x0080e52e:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0080e532:    f7f99a94    ....    B        log_buffer ; 0x7a5e
    pre_main
;;;581            }
;;;582        }
;;;583    }
;;;584    
;;;585    APP_FLASH_TEXT_SECTION
;;;586    void pre_main(void)
;;;587    {
        0x0080e536:    b538        8.      PUSH     {r3-r5,lr}
;;;588        __disable_irq();
        0x0080e538:    b672        r.      CPSID    i
;;;589    
;;;590        print_reset_reason();  //Note: call this function before ram_init();
        0x0080e53a:    f7ffffd6    ....    BL       print_reset_reason ; 0x80e4ea
;;;591    
;;;592        ram_init();
        0x0080e53e:    f7ffff87    ....    BL       ram_init ; 0x80e450
;;;593    
;;;594        random_seed_init();
        0x0080e542:    f7ffffa4    ....    BL       random_seed_init ; 0x80e48e
;;;595    
;;;596        load_overlay(OVERLAY_SCENARIO_BOOT_ONCE);
        0x0080e546:    2000        .       MOVS     r0,#0
        0x0080e548:    f001fb04    ....    BL       load_overlay ; 0x80fb54
;;;597    
;;;598        //reset NVIC of DMA channel used in image decryption
;;;599        NVIC_DisableIRQ(GDMA0_Channel2_IRQn);
        0x0080e54c:    2016        .       MOVS     r0,#0x16
        0x0080e54e:    f000f971    ..q.    BL       NVIC_DisableIRQ ; 0x80e834
;;;600        NVIC_DisableIRQ(GDMA0_Channel3_IRQn);
        0x0080e552:    2017        .       MOVS     r0,#0x17
        0x0080e554:    f000f96e    ..n.    BL       NVIC_DisableIRQ ; 0x80e834
;;;601    
;;;602        setlocale(LC_ALL, "C");
        0x0080e558:    a14e        N.      ADR      r1,{pc}+0x13c ; 0x80e694
        0x0080e55a:    201f        .       MOVS     r0,#0x1f
        0x0080e55c:    f44bf44a    K.J.    BL       setlocale ; 0x59df4
;;;603    
;;;604        BOOT_PRINT_ERROR2("SDK Ver: %s, Build Time: %s",
        0x0080e560:    f04f5505    O..U    MOV      r5,#0x21400000
        0x0080e564:    a14c        L.      ADR      r1,{pc}+0x134 ; 0x80e698
        0x0080e566:    4628        (F      MOV      r0,r5
        0x0080e568:    f7f9dc7f    ....    BL       trace_string ; 0x7e6a
        0x0080e56c:    4604        .F      MOV      r4,r0
        0x0080e56e:    a151        Q.      ADR      r1,{pc}+0x146 ; 0x80e6b4
        0x0080e570:    4628        (F      MOV      r0,r5
        0x0080e572:    f7f9dc7a    ..z.    BL       trace_string ; 0x7e6a
        0x0080e576:    4603        .F      MOV      r3,r0
        0x0080e578:    4945        EI      LDR      r1,[pc,#276] ; [0x80e690] = 0x8800000
        0x0080e57a:    4844        DH      LDR      r0,[pc,#272] ; [0x80e68c] = 0x21100302
        0x0080e57c:    2202        ."      MOVS     r2,#2
        0x0080e57e:    317c        |1      ADDS     r1,r1,#0x7c
        0x0080e580:    1e80        ..      SUBS     r0,r0,#2
        0x0080e582:    9400        ..      STR      r4,[sp,#0]
        0x0080e584:    f7f9da6b    ..k.    BL       log_buffer ; 0x7a5e
;;;605                          TRACE_STRING(VERSION_BUILD_STR),
;;;606                          TRACE_STRING(BUILDING_TIME));
;;;607    
;;;608        AppUpdateVectorTable();
        0x0080e588:    f5fbf376    ..v.    BL       AppUpdateVectorTable ; 0x209c78
;;;609    
;;;610    #if (DEBUG_WATCHPOINT_ENABLE == 1)
;;;611        debug_monitor_enable();
;;;612    #endif
;;;613    
;;;614        if (app_pre_main_cb)
        0x0080e58c:    484b        KH      LDR      r0,[pc,#300] ; [0x80e6bc] = 0x20814c
        0x0080e58e:    6800        .h      LDR      r0,[r0,#0]
        0x0080e590:    2800        .(      CMP      r0,#0
        0x0080e592:    d003        ..      BEQ      0x80e59c ; pre_main + 102
;;;615        {
;;;616            app_pre_main_cb();
        0x0080e594:    b001        ..      ADD      sp,sp,#4
        0x0080e596:    e8bd4030    ..0@    POP      {r4,r5,lr}
        0x0080e59a:    4700        .G      BX       r0
;;;617        }
;;;618    
;;;619        return;
;;;620    }
        0x0080e59c:    bd38        8.      POP      {r3-r5,pc}
    SystemInit
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (451)
        0x0080e59e:    b510        ..      PUSH     {r4,lr}
;;;452        //hci mode check and bypass app
;;;453        if (check_hci_mode_flag())
        0x0080e5a0:    f7fed8de    ....    BL       check_hci_mode_flag ; 0xc760
        0x0080e5a4:    2800        .(      CMP      r0,#0
        0x0080e5a6:    d148        H.      BNE      0x80e63a ; SystemInit + 156
;;;454        {
;;;455            return;
;;;456        }
;;;457    
;;;458        //init pre_main and main functions
;;;459        extern void pre_main(void);
;;;460        app_pre_main = (APP_MAIN_FUNC)pre_main;
        0x0080e5a8:    f2af0075    ..u.    ADR      r0,{pc}-0x71 ; 0x80e537
        0x0080e5ac:    4944        DI      LDR      r1,[pc,#272] ; [0x80e6c0] = 0x200c38
;;;461        app_main = (APP_MAIN_FUNC)common_main;
        0x0080e5ae:    6008        .`      STR      r0,[r1,#0]
        0x0080e5b0:    4945        EI      LDR      r1,[pc,#276] ; [0x80e6c8] = 0x200c3c
        0x0080e5b2:    4844        DH      LDR      r0,[pc,#272] ; [0x80e6c4] = 0x80e755
;;;462    
;;;463        /******** update otp here**********/
;;;464        //ram config
;;;465        OTP->appDataSize = APP_GLOBAL_SIZE;
        0x0080e5b4:    6008        .`      STR      r0,[r1,#0]
        0x0080e5b6:    f44f1000    O...    MOV      r0,#0x200000
        0x0080e5ba:    f44f4120    O. A    MOV      r1,#0xa000
;;;466        OTP->heapDataONSize = HEAP_DATA_ON_SIZE - DATA_SIZE_FOR_RANDOM_SEED;
        0x0080e5be:    f8c01384    ....    STR      r1,[r0,#0x384]
        0x0080e5c2:    f24631f0    F..1    MOV      r1,#0x63f0
;;;467    
;;;468        /* not share: SHARE_CACHE_RAM_0K; 8K: SHARE_CACHE_RAM_8K; 16K: SHARE_CACHE_RAM_16K */
;;;469    #if ((16 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;470        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_16K;
;;;471    #elif ((8 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;472        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_8K;
;;;473    #else
;;;474        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_0K;
        0x0080e5c6:    f8c01388    ....    STR      r1,[r0,#0x388]
        0x0080e5ca:    4940        @I      LDR      r1,[pc,#256] ; [0x80e6cc] = 0x82f70000
;;;475    #endif
;;;476    
;;;477        //sw timer config
;;;478    #ifdef TIMER_MAX_NUMBER
;;;479        //define TIMER_MAX_NUMBER in otp_config.h
;;;480        OTP->timerMaxNumber = TIMER_MAX_NUMBER;
;;;481    #endif
;;;482    
;;;483        //flash config
;;;484        /*config enable flash block proect depending on flash layout and flash id*/
;;;485    #if (FLASH_BLOCK_PROTECT_ENABLE == 1)
;;;486        OTP->bp_enable = 1;
        0x0080e5cc:    f8c013cc    ....    STR      r1,[r0,#0x3cc]
        0x0080e5d0:    f890134d    ..M.    LDRB     r1,[r0,#0x34d]
        0x0080e5d4:    f0410108    A...    ORR      r1,r1,#8
        0x0080e5d8:    f880134d    ..M.    STRB     r1,[r0,#0x34d]
;;;487    #else
;;;488        OTP->bp_enable = 0;
;;;489    #endif
;;;490        OTP->delay_10us_after_toggle_cs = AFTER_TOGGLE_CS_DELAY;
        0x0080e5dc:    2106        .!      MOVS     r1,#6
        0x0080e5de:    f880134f    ..O.    STRB     r1,[r0,#0x34f]
;;;491    
;;;492    
;;;493        //os config
;;;494        /*config enable check task stack overflow*/
;;;495    #if (CHECK_STACK_OVERFLOW_ENABLE == 1)
;;;496        OTP->checkForStackOverflow = 1;
        0x0080e5e2:    f8901378    ..x.    LDRB     r1,[r0,#0x378]
;;;497    #else
;;;498        OTP->checkForStackOverflow = 0;
;;;499    #endif
;;;500    
;;;501    
;;;502        //platform config
;;;503        /*config enable platform assert*/
;;;504    #if (PLATFORM_ASSERT_ENABLE == 1)
;;;505        OTP->enableASSERT = 1;
;;;506    #else
;;;507        OTP->enableASSERT = 0;
;;;508    #endif
;;;509    
;;;510        /*Print all log in log buffer before entering DLPS */
;;;511    #if (CHECK_LOG_BUFFER_BEFORE_DLPS_ENABLE == 1)
;;;512        OTP->printAllLogBeforeEnterDLPS = 1;
        0x0080e5e6:    f0410126    A.&.    ORR      r1,r1,#0x26
        0x0080e5ea:    f8801378    ..x.    STRB     r1,[r0,#0x378]
;;;513    #else
;;;514        OTP->printAllLogBeforeEnterDLPS = 0;
;;;515    #endif
;;;516    
;;;517        /*config enable log or not*/
;;;518    #if (CONFIG_LOG_FUNCTION_ENABLE == 1)
;;;519        OTP->logDisable = 0;
        0x0080e5ee:    f890139a    ....    LDRB     r1,[r0,#0x39a]
        0x0080e5f2:    f0210101    !...    BIC      r1,r1,#1
        0x0080e5f6:    f880139a    ....    STRB     r1,[r0,#0x39a]
;;;520    #else
;;;521        OTP->logDisable = 1;
;;;522    #endif
;;;523    
;;;524        /*config enable swd pinmux*/
;;;525    #if (SWD_PINMUX_ENABLE == 1)
;;;526        OTP->SWD_ENABLE = 1;
        0x0080e5fa:    f8901334    ..4.    LDRB     r1,[r0,#0x334]
        0x0080e5fe:    f0410101    A...    ORR      r1,r1,#1
        0x0080e602:    f8801334    ..4.    STRB     r1,[r0,#0x334]
;;;527    #else
;;;528        OTP->SWD_ENABLE = 0;
;;;529    #endif
;;;530    
;;;531        /*config enable watch dog in rom*/
;;;532    #if (ROM_WATCH_DOG_ENABLE == 1)
;;;533        OTP->wdgEnableInRom = 1;
;;;534    #else
;;;535        OTP->wdgEnableInRom = 0;
        0x0080e606:    f890137a    ..z.    LDRB     r1,[r0,#0x37a]
        0x0080e60a:    f0210110    !...    BIC      r1,r1,#0x10
;;;536    #endif
;;;537    
;;;538        /*config watch dog mode in rom, defualt reset all*/
;;;539        OTP->wdgMode = ROM_WATCH_DOG_MODE;
        0x0080e60e:    f04101c0    A...    ORR      r1,r1,#0xc0
        0x0080e612:    f880137a    ..z.    STRB     r1,[r0,#0x37a]
;;;540    
;;;541        /*use os tick as log timestamp instead of TIM7*/
;;;542        OTP->log_timestamp_src = LOG_TIMESTAMP_OS;
        0x0080e616:    f89013c3    ....    LDRB     r1,[r0,#0x3c3]
        0x0080e61a:    f02101c0    !...    BIC      r1,r1,#0xc0
        0x0080e61e:    f88013c3    ....    STRB     r1,[r0,#0x3c3]
;;;543    
;;;544    
;;;545        //app config
;;;546        OTP->ota_timeout_total = OTA_TIMEOUT_TOTAL;
        0x0080e622:    21f0        .!      MOVS     r1,#0xf0
        0x0080e624:    f8801320    .. .    STRB     r1,[r0,#0x320]
;;;547        OTP->ota_timeout_wait4_conn = OTA_TIMEOUT_WAIT4_CONN;
        0x0080e628:    213c        <!      MOVS     r1,#0x3c
        0x0080e62a:    f8801321    ..!.    STRB     r1,[r0,#0x321]
;;;548        OTP->ota_timeout_wait4_image_transfer = OTA_TIMEOUT_WAIT4_IMAGE_TRANS;
        0x0080e62e:    21c8        .!      MOVS     r1,#0xc8
        0x0080e630:    f8801322    ..".    STRB     r1,[r0,#0x322]
;;;549        OTP->ota_timeout_ctittv = OTA_TIMEOUT_CTITTV;
        0x0080e634:    21ff        .!      MOVS     r1,#0xff
        0x0080e636:    f8801323    ..#.    STRB     r1,[r0,#0x323]
;;;550    
;;;551    #if ROM_OTA_LINKLOSS_RST
;;;552        OTP->ota_link_loss_reset = 1;
;;;553    #endif
;;;554        /*config bt stack parameters in rom*/
;;;555    #ifdef BT_STACK_CONFIG_ENABLE
;;;556        bt_stack_config_init();
;;;557    #endif
;;;558    
;;;559    //add more otp config here
;;;560    }
        0x0080e63a:    bd10        ..      POP      {r4,pc}
    $d
        0x0080e63c:    000004bc    ....    DCD    1212
        0x0080e640:    0081dba4    ....    DCD    8510372
        0x0080e644:    00207c00    .| .    DCD    2128896
        0x0080e648:    00000088    ....    DCD    136
        0x0080e64c:    0081e060    `...    DCD    8511584
        0x0080e650:    002080bc    .. .    DCD    2130108
        0x0080e654:    00001b34    4...    DCD    6964
        0x0080e658:    00208144    D. .    DCD    2130244
        0x0080e65c:    00000000    ....    DCD    0
        0x0080e660:    0081e1a8    ....    DCD    8511912
        0x0080e664:    0021c000    ..!.    DCD    2211840
        0x0080e668:    00000000    ....    DCD    0
        0x0080e66c:    0081e1a8    ....    DCD    8511912
        0x0080e670:    0021c000    ..!.    DCD    2211840
        0x0080e674:    00000000    ....    DCD    0
        0x0080e678:    0021c000    ..!.    DCD    2211840
        0x0080e67c:    40058000    ...@    DCD    1074102272
        0x0080e680:    00208144    D. .    DCD    2130244
        0x0080e684:    002080bc    .. .    DCD    2130108
        0x0080e688:    72657400    .ter    DCD    1919251456
        0x0080e68c:    21100302    ...!    DCD    554697474
        0x0080e690:    08800000    ....    DCD    142606336
        0x0080e694:    00000043    C...    DCD    67
        0x0080e698:    20646557    Wed     DCD    543450455
        0x0080e69c:    20626546    Feb     DCD    543319366
        0x0080e6a0:    30203032    20 0    DCD    807415858
        0x0080e6a4:    38313a39    9:18    DCD    942750265
        0x0080e6a8:    2036303a    :06     DCD    540422202
        0x0080e6ac:    39313032    2019    DCD    959524914
        0x0080e6b0:    00000000    ....    DCD    0
        0x0080e6b4:    2e302e31    1.0.    DCD    774909489
        0x0080e6b8:    00302e34    4.0.    DCD    3157556
        0x0080e6bc:    0020814c    L. .    DCD    2130252
        0x0080e6c0:    00200c38    8. .    DCD    2100280
        0x0080e6c4:    0080e755    U...    DCD    8447829
        0x0080e6c8:    00200c3c    <. .    DCD    2100284
        0x0080e6cc:    82f70000    ....    DCD    2197225472
    $t
    .emb_text
    rand
        0x0080e6d0:    490b        .I      LDR      r1,[pc,#44] ; [0x80e700] = 0x209c58
        0x0080e6d2:    f8d1c000    ....    LDR      r12,[r1,#0]
        0x0080e6d6:    684a        Jh      LDR      r2,[r1,#4]
        0x0080e6d8:    f85c3b04    \..;    LDR      r3,[r12],#4
        0x0080e6dc:    6810        .h      LDR      r0,[r2,#0]
        0x0080e6de:    4418        .D      ADD      r0,r0,r3
        0x0080e6e0:    f8420b04    B...    STR      r0,[r2],#4
        0x0080e6e4:    458c        .E      CMP      r12,r1
        0x0080e6e6:    bf28        (.      IT       CS
        0x0080e6e8:    f1a10cdc    ....    SUBCS    r12,r1,#0xdc
        0x0080e6ec:    428a        .B      CMP      r2,r1
        0x0080e6ee:    bf28        (.      IT       CS
        0x0080e6f0:    f1a102dc    ....    SUBCS    r2,r1,#0xdc
        0x0080e6f4:    f8c1c000    ....    STR      r12,[r1,#0]
        0x0080e6f8:    604a        J`      STR      r2,[r1,#4]
        0x0080e6fa:    f0204000     ..@    BIC      r0,r0,#0x80000000
        0x0080e6fe:    4770        pG      BX       lr
    $d
        0x0080e700:    00209c58    X. .    DCD    2137176
    $t
    .text
    $v0
    ADC_Handler
    BTMAC_Handler
    BusFault_Handler
    DebugMon_Handler
    Default_Handler
    GDMA0_Channel0_Handler
    GDMA0_Channel1_Handler
    GDMA0_Channel2_Handler
    GDMA0_Channel3_Handler
    GDMA0_Channel4_Handler
    GDMA0_Channel5_Handler
    GPIO0_Handler
    GPIO10_Handler
    GPIO11_Handler
    GPIO12_Handler
    GPIO13_Handler
    GPIO14_Handler
    GPIO15_Handler
    GPIO16_Handler
    GPIO17_Handler
    GPIO18_Handler
    GPIO19_Handler
    GPIO1_Handler
    GPIO20_Handler
    GPIO21_Handler
    GPIO22_Handler
    GPIO23_Handler
    GPIO24_Handler
    GPIO25_Handler
    GPIO26_Handler
    GPIO27_Handler
    GPIO28_Handler
    GPIO29_Handler
    GPIO2_Handler
    GPIO30_Handler
    GPIO31_Handler
    GPIO3_Handler
    GPIO4_Handler
    GPIO5_Handler
    GPIO6_Handler
    GPIO7_Handler
    GPIO8_Handler
    GPIO9_Handler
    HardFault_Handler
    I2C0_Handler
    I2C1_Handler
    I2S0_RX_Handler
    I2S0_TX_Handler
    I2S1_RX_Handler
    I2S1_TX_Handler
    IR_Handler
    Keyscan_Handler
    LCD_Handler
    LPCOMP_Handler
    MemManage_Handler
    NMI_Handler
    PTA_Mailbox_Handler
    PendSV_Handler
    Peripheral_Handler
    Qdecode_Handler
    RTC_Handler
    SPI0_Handler
    SPI1_Handler
    SPI2W_Handler
    SPI_Flash_Handler
    SVC_Handler
    SysTick_Handler
    Timer2_Handler
    Timer3_Handler
    Timer4_7_Handler
    Timer4_Handler
    Timer5_Handler
    Timer6_Handler
    Timer7_Handler
    UART1_Handler
    UART2_Handler
    UsageFault_Handler
    WDG_Handler
;;; ..\\..\\..\\src\\mcu\\rtl876x\\arm\\startup_rtl8762c.s
;;;276                    LDR    R0, =0x20000000
        0x0080e704:    f04f5000    O..P    MOV      r0,#0x20000000
;;;277                    LDR    R1, =DEFAULT_HANDLER_TXT
        0x0080e708:    4910        .I      LDR      r1,[pc,#64] ; [0x80e74c] = 0x80e716
;;;278                    MRS    R2, IPSR
        0x0080e70a:    f3ef8205    ....    MRS      r2,IPSR
;;;279                    LDR    R3, =log_direct
        0x0080e70e:    4b10        .K      LDR      r3,[pc,#64] ; [0x80e750] = 0x79b1
;;;280                    BLX    R3
        0x0080e710:    4798        .G      BLX      r3
;;;281                    B      .
        0x0080e712:    e7fe        ..      B        0x80e712 ; ADC_Handler + 14
    __user_setup_stackheap
;;;282    
;;;283                    ENDP
;;;284    
;;;285    
;;;286    ; User Initial Stack
;;;287                    EXPORT  __user_setup_stackheap
;;;288    __user_setup_stackheap PROC
;;;289                    BX      LR
        0x0080e714:    4770        pG      BX       lr
    $d
    DEFAULT_HANDLER_TXT
        0x0080e716:    7245        Er      DCW    29253
        0x0080e718:    21726f72    ror!    DCD    561147762
        0x0080e71c:    656c5020     Ple    DCD    1701597216
        0x0080e720:    20657361    ase     DCD    543519585
        0x0080e724:    6c706d69    impl    DCD    1819307369
        0x0080e728:    6e656d65    emen    DCD    1852140901
        0x0080e72c:    6f792074    t yo    DCD    1870209140
        0x0080e730:    49207275    ur I    DCD    1226863221
        0x0080e734:    48205253    SR H    DCD    1210077779
        0x0080e738:    6c646e61    andl    DCD    1818521185
        0x0080e73c:    66207265    er f    DCD    1713402469
        0x0080e740:    4920726f    or I    DCD    1226863215
        0x0080e744:    25205152    RQ %    DCD    622874962
        0x0080e748:    000a2164    d!..    DCD    663908
        0x0080e74c:    0080e716    ....    DCD    8447766
        0x0080e750:    000079b1    .y..    DCD    31153
    $t
    .text
    common_main
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c
;;;304    {
        0x0080e754:    b510        ..      PUSH     {r4,lr}
;;;305    //add common system code here before enter user defined main function
;;;306        OTP->run_in_app = 1;
        0x0080e756:    f44f1400    O...    MOV      r4,#0x200000
        0x0080e75a:    f894039b    ....    LDRB     r0,[r4,#0x39b]
        0x0080e75e:    f0400080    @...    ORR      r0,r0,#0x80
        0x0080e762:    f884039b    ....    STRB     r0,[r4,#0x39b]
;;;307    
;;;308    #if (RUN_APP_IN_HCIMODE_ENABLE == 0)
;;;309        if (OTP->stack_en)
        0x0080e766:    f89402dc    ....    LDRB     r0,[r4,#0x2dc]
        0x0080e76a:    07c1        ..      LSLS     r1,r0,#31
;;;310        {
;;;311            DBG_DIRECT("In SoC Mode");
        0x0080e76c:    f04f5004    O..P    MOV      r0,#0x21000000
        0x0080e770:    d003        ..      BEQ      0x80e77a ; common_main + 38
        0x0080e772:    a136        6.      ADR      r1,{pc}+0xda ; 0x80e84c
        0x0080e774:    f7f9d91c    ....    BL       log_direct ; 0x79b0
        0x0080e778:    e006        ..      B        0x80e788 ; common_main + 52
;;;312        }
;;;313        else
;;;314        {
;;;315            DBG_DIRECT("WARNING: In HCI Mode, will not run APP Task");
        0x0080e77a:    a137        7.      ADR      r1,{pc}+0xde ; 0x80e858
        0x0080e77c:    f7f9d918    ....    BL       log_direct ; 0x79b0
;;;316            WDG_Disable();
        0x0080e780:    f403f0df    ....    BL       WDG_Disable ; 0x11942
;;;317            os_sched_start();
        0x0080e784:    f418f01d    ....    BL       os_sched_start ; 0x267c2
;;;318        }
;;;319    #endif
;;;320    
;;;321        //fix system hang if app call log_module_trace_set after enable RELEASE_VERSION
;;;322        if (OTP->logDisable == 1)
        0x0080e788:    f894039a    ....    LDRB     r0,[r4,#0x39a]
        0x0080e78c:    07c0        ..      LSLS     r0,r0,#31
        0x0080e78e:    d002        ..      BEQ      0x80e796 ; common_main + 66
;;;323        {
;;;324            log_module_trace_init(NULL);
        0x0080e790:    2000        .       MOVS     r0,#0
        0x0080e792:    f7f9dd1f    ....    BL       log_module_trace_init ; 0x81d4
;;;325        }
;;;326    
;;;327    #if (SYSTEM_TRACE_ENABLE == 1)
;;;328        extern void system_trace_init(void);
;;;329        system_trace_init();
;;;330    #endif
;;;331    
;;;332        extern int __main(void);
;;;333        __main();
        0x0080e796:    e8bd4010    ...@    POP      {r4,lr}
        0x0080e79a:    f7ffbe35    ..5.    B.W      __main ; 0x80e408
    WDG_SystemReset
;;;334    }
;;;335    
;;;336    #if (DEBUG_WATCHPOINT_ENABLE == 1)
;;;337    /**
;;;338     * @brief  Enable Debug Monitor Function (include NVIC Enable and DWT configuration)
;;;339     * @param  none
;;;340     * @return none
;;;341     */
;;;342    
;;;343    DATA_RAM_FUNCTION
;;;344    void debug_monitor_enable(void)
;;;345    {
;;;346        //DBG_DIRECT("debug_monitor_enable");
;;;347    
;;;348        //set debug monitor priority
;;;349        NVIC_SetPriority(DebugMonitor_IRQn, 3);
;;;350    
;;;351        //enable exception and monitor control register
;;;352        CoreDebug->DEMCR |= CoreDebug_DEMCR_MON_EN_Msk | CoreDebug_DEMCR_TRCENA_Msk;
;;;353    
;;;354        //set DWT compare registers (max 4 comparators)
;;;355        //watch_point_0_setting(0x1000180C, DWT_DATAVSIZE_WORD, DWT_FUNCTION_WRITE);
;;;356        //watch_point_1_setting(0x10000004, DWT_DATAVSIZE_WORD, DWT_FUNCTION_READ_OR_WRITE);
;;;357        //watch_point_2_setting(0x10000008, DWT_DATAVSIZE_WORD, DWT_FUNCTION_READ_OR_WRITE);
;;;358        //watch_point_3_setting(0x1000000C, DWT_DATAVSIZE_WORD, DWT_FUNCTION_READ_OR_WRITE);
;;;359    
;;;360        //enable DWT control register
;;;361        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
;;;362    
;;;363        return;
;;;364    }
;;;365    #endif
;;;366    
;;;367    APP_FLASH_TEXT_SECTION
;;;368    void ram_init(void)
;;;369    {
;;;370        //copy data on ro
;;;371        extern char Image$$RAM_DATA_ON$$RO$$Base[];
;;;372        extern char Load$$RAM_DATA_ON$$RO$$Base[];
;;;373        extern unsigned int Image$$RAM_DATA_ON$$RO$$Length;
;;;374    
;;;375        memcpy(Image$$RAM_DATA_ON$$RO$$Base,
;;;376               Load$$RAM_DATA_ON$$RO$$Base,
;;;377               (unsigned int)&Image$$RAM_DATA_ON$$RO$$Length);
;;;378    
;;;379        //copy data on rw
;;;380        extern char Image$$RAM_DATA_ON$$RW$$Base[];
;;;381        extern char Load$$RAM_DATA_ON$$RW$$Base[];
;;;382        extern unsigned int Image$$RAM_DATA_ON$$RW$$Length;
;;;383    
;;;384        memcpy(Image$$RAM_DATA_ON$$RW$$Base,
;;;385               Load$$RAM_DATA_ON$$RW$$Base,
;;;386               (unsigned int)&Image$$RAM_DATA_ON$$RW$$Length);
;;;387    
;;;388        //clear data on zi
;;;389        extern char Image$$RAM_DATA_ON$$ZI$$Base[];
;;;390        extern unsigned int Image$$RAM_DATA_ON$$ZI$$Length;
;;;391    
;;;392        memset(Image$$RAM_DATA_ON$$ZI$$Base,
;;;393               0,
;;;394               (unsigned int)&Image$$RAM_DATA_ON$$ZI$$Length);
;;;395    
;;;396        //copy cache ro
;;;397        extern char Image$$CACHE_DATA_ON$$RO$$Base[];
;;;398        extern char Load$$CACHE_DATA_ON$$RO$$Base[];
;;;399        extern unsigned int Image$$CACHE_DATA_ON$$RO$$Length;
;;;400    
;;;401        memcpy(Image$$CACHE_DATA_ON$$RO$$Base,
;;;402               Load$$CACHE_DATA_ON$$RO$$Base,
;;;403               (unsigned int)&Image$$CACHE_DATA_ON$$RO$$Length);
;;;404    
;;;405        //copy share cache ram rw
;;;406        extern char Image$$CACHE_DATA_ON$$RW$$Base[];
;;;407        extern char Load$$CACHE_DATA_ON$$RW$$Base[];
;;;408        extern unsigned int Image$$CACHE_DATA_ON$$RW$$Length;
;;;409    
;;;410        memcpy(Image$$CACHE_DATA_ON$$RW$$Base,
;;;411               Load$$CACHE_DATA_ON$$RW$$Base,
;;;412               (unsigned int)&Image$$CACHE_DATA_ON$$RW$$Length);
;;;413    
;;;414        //clear share cache ram zi
;;;415        extern char Image$$CACHE_DATA_ON$$ZI$$Base[];
;;;416        extern unsigned int Image$$CACHE_DATA_ON$$ZI$$Length;
;;;417    
;;;418        memset(Image$$CACHE_DATA_ON$$ZI$$Base,
;;;419               0,
;;;420               (unsigned int)&Image$$CACHE_DATA_ON$$ZI$$Length);
;;;421    }
;;;422    
;;;423    uint32_t random_seed_value;
;;;424    
;;;425    APP_FLASH_TEXT_SECTION
;;;426    void random_seed_init(void)
;;;427    {
;;;428        uint16_t crc16;
;;;429        uint8_t buf[DATA_SIZE_FOR_RANDOM_SEED];
;;;430        uint8_t *sour_addr = (uint8_t *)(OTP->appDataAddr + OTP->appDataSize + OTP->heapDataONSize);
;;;431    
;;;432        memcpy(buf, sour_addr, DATA_SIZE_FOR_RANDOM_SEED);
;;;433        crc16 = btxfcs(0, buf, DATA_SIZE_FOR_RANDOM_SEED);
;;;434    
;;;435        random_seed_value = (crc16 << 16) | (*(volatile uint32_t *)(0x4005817C) & 0xFFFF);
;;;436    
;;;437        random_seed_value *= platform_random(0xFFFFFFFF);
;;;438    
;;;439        srand(random_seed_value);
;;;440    
;;;441        for (int i = 0; i < (DATA_SIZE_FOR_RANDOM_SEED / 4); ++i)
;;;442        {
;;;443            *(uint32_t *)(sour_addr + i * 4) = rand();
;;;444        }
;;;445    
;;;446        random_seed_value = rand();
;;;447    }
;;;448    
;;;449    APP_FLASH_TEXT_SECTION
;;;450    void SystemInit(void)
;;;451    {
;;;452        //hci mode check and bypass app
;;;453        if (check_hci_mode_flag())
;;;454        {
;;;455            return;
;;;456        }
;;;457    
;;;458        //init pre_main and main functions
;;;459        extern void pre_main(void);
;;;460        app_pre_main = (APP_MAIN_FUNC)pre_main;
;;;461        app_main = (APP_MAIN_FUNC)common_main;
;;;462    
;;;463        /******** update otp here**********/
;;;464        //ram config
;;;465        OTP->appDataSize = APP_GLOBAL_SIZE;
;;;466        OTP->heapDataONSize = HEAP_DATA_ON_SIZE - DATA_SIZE_FOR_RANDOM_SEED;
;;;467    
;;;468        /* not share: SHARE_CACHE_RAM_0K; 8K: SHARE_CACHE_RAM_8K; 16K: SHARE_CACHE_RAM_16K */
;;;469    #if ((16 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;470        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_16K;
;;;471    #elif ((8 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;472        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_8K;
;;;473    #else
;;;474        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_0K;
;;;475    #endif
;;;476    
;;;477        //sw timer config
;;;478    #ifdef TIMER_MAX_NUMBER
;;;479        //define TIMER_MAX_NUMBER in otp_config.h
;;;480        OTP->timerMaxNumber = TIMER_MAX_NUMBER;
;;;481    #endif
;;;482    
;;;483        //flash config
;;;484        /*config enable flash block proect depending on flash layout and flash id*/
;;;485    #if (FLASH_BLOCK_PROTECT_ENABLE == 1)
;;;486        OTP->bp_enable = 1;
;;;487    #else
;;;488        OTP->bp_enable = 0;
;;;489    #endif
;;;490        OTP->delay_10us_after_toggle_cs = AFTER_TOGGLE_CS_DELAY;
;;;491    
;;;492    
;;;493        //os config
;;;494        /*config enable check task stack overflow*/
;;;495    #if (CHECK_STACK_OVERFLOW_ENABLE == 1)
;;;496        OTP->checkForStackOverflow = 1;
;;;497    #else
;;;498        OTP->checkForStackOverflow = 0;
;;;499    #endif
;;;500    
;;;501    
;;;502        //platform config
;;;503        /*config enable platform assert*/
;;;504    #if (PLATFORM_ASSERT_ENABLE == 1)
;;;505        OTP->enableASSERT = 1;
;;;506    #else
;;;507        OTP->enableASSERT = 0;
;;;508    #endif
;;;509    
;;;510        /*Print all log in log buffer before entering DLPS */
;;;511    #if (CHECK_LOG_BUFFER_BEFORE_DLPS_ENABLE == 1)
;;;512        OTP->printAllLogBeforeEnterDLPS = 1;
;;;513    #else
;;;514        OTP->printAllLogBeforeEnterDLPS = 0;
;;;515    #endif
;;;516    
;;;517        /*config enable log or not*/
;;;518    #if (CONFIG_LOG_FUNCTION_ENABLE == 1)
;;;519        OTP->logDisable = 0;
;;;520    #else
;;;521        OTP->logDisable = 1;
;;;522    #endif
;;;523    
;;;524        /*config enable swd pinmux*/
;;;525    #if (SWD_PINMUX_ENABLE == 1)
;;;526        OTP->SWD_ENABLE = 1;
;;;527    #else
;;;528        OTP->SWD_ENABLE = 0;
;;;529    #endif
;;;530    
;;;531        /*config enable watch dog in rom*/
;;;532    #if (ROM_WATCH_DOG_ENABLE == 1)
;;;533        OTP->wdgEnableInRom = 1;
;;;534    #else
;;;535        OTP->wdgEnableInRom = 0;
;;;536    #endif
;;;537    
;;;538        /*config watch dog mode in rom, defualt reset all*/
;;;539        OTP->wdgMode = ROM_WATCH_DOG_MODE;
;;;540    
;;;541        /*use os tick as log timestamp instead of TIM7*/
;;;542        OTP->log_timestamp_src = LOG_TIMESTAMP_OS;
;;;543    
;;;544    
;;;545        //app config
;;;546        OTP->ota_timeout_total = OTA_TIMEOUT_TOTAL;
;;;547        OTP->ota_timeout_wait4_conn = OTA_TIMEOUT_WAIT4_CONN;
;;;548        OTP->ota_timeout_wait4_image_transfer = OTA_TIMEOUT_WAIT4_IMAGE_TRANS;
;;;549        OTP->ota_timeout_ctittv = OTA_TIMEOUT_CTITTV;
;;;550    
;;;551    #if ROM_OTA_LINKLOSS_RST
;;;552        OTP->ota_link_loss_reset = 1;
;;;553    #endif
;;;554        /*config bt stack parameters in rom*/
;;;555    #ifdef BT_STACK_CONFIG_ENABLE
;;;556        bt_stack_config_init();
;;;557    #endif
;;;558    
;;;559    //add more otp config here
;;;560    }
;;;561    
;;;562    //Note: call print_reset_reason() before ram_init();
;;;563    APP_FLASH_TEXT_SECTION
;;;564    void print_reset_reason(void)
;;;565    {
;;;566        if (check_reset_ram.check_reset_ram_pattern != RESET_RAM_PATTERN)
;;;567        {
;;;568            BOOT_PRINT_INFO0("RESET Reason: HW or OTA");
;;;569        }
;;;570        else
;;;571        {
;;;572            T_SW_RESET_REASON sw_reset_type = get_aon_record_reset_reason();
;;;573    
;;;574            if (sw_reset_type != (T_SW_RESET_REASON)0)
;;;575            {
;;;576                BOOT_PRINT_INFO1("RESET Reason: SW(reset except aon), TYPE 0x%x", sw_reset_type);
;;;577            }
;;;578            else //reset all will clear aon register
;;;579            {
;;;580                BOOT_PRINT_INFO1("RESET Reason: SW(reset all), TYPE 0x%x", check_reset_ram.check_reset_ram_type);
;;;581            }
;;;582        }
;;;583    }
;;;584    
;;;585    APP_FLASH_TEXT_SECTION
;;;586    void pre_main(void)
;;;587    {
;;;588        __disable_irq();
;;;589    
;;;590        print_reset_reason();  //Note: call this function before ram_init();
;;;591    
;;;592        ram_init();
;;;593    
;;;594        random_seed_init();
;;;595    
;;;596        load_overlay(OVERLAY_SCENARIO_BOOT_ONCE);
;;;597    
;;;598        //reset NVIC of DMA channel used in image decryption
;;;599        NVIC_DisableIRQ(GDMA0_Channel2_IRQn);
;;;600        NVIC_DisableIRQ(GDMA0_Channel3_IRQn);
;;;601    
;;;602        setlocale(LC_ALL, "C");
;;;603    
;;;604        BOOT_PRINT_ERROR2("SDK Ver: %s, Build Time: %s",
;;;605                          TRACE_STRING(VERSION_BUILD_STR),
;;;606                          TRACE_STRING(BUILDING_TIME));
;;;607    
;;;608        AppUpdateVectorTable();
;;;609    
;;;610    #if (DEBUG_WATCHPOINT_ENABLE == 1)
;;;611        debug_monitor_enable();
;;;612    #endif
;;;613    
;;;614        if (app_pre_main_cb)
;;;615        {
;;;616            app_pre_main_cb();
;;;617        }
;;;618    
;;;619        return;
;;;620    }
;;;621    /**
;;;622     * @brief  update vector table in app
;;;623     * @param  none
;;;624     * @return none
;;;625      */
;;;626    OVERLAY_SECTION_BOOT_ONCE
;;;627    static void AppUpdateVectorTable(void)
;;;628    {
;;;629        extern uint32_t Load$$RAM_VECTOR_TABLE$$RO$$Base;
;;;630        extern uint32_t Image$$RAM_VECTOR_TABLE$$RO$$Length;
;;;631        extern void Default_Handler(void);
;;;632        const char *SysException[] =
;;;633        {
;;;634            "InitialSP", "Reset", "NMI", "HardFault", "MemManage", "BusFault", "UsageFault", "Rsvd",
;;;635            "Rsvd", "Rsvd", "Rsvd", "SVC", "DebugMon", "Rsvd", "PendSV", "SysTick"
;;;636        };
;;;637        const char *ExtIrq[] =
;;;638        {
;;;639            "System", "WDG", "BTMAC", "TIM3", "TIM2", "Platform", "I2S0_TX", "I2S0_RX", "Timer4-7",
;;;640            "GPIO4", "GPIO5", "UART1", "UART0", "RTC", "SPI0", "SPI1", "I2C0", "I2C1", "ADC",
;;;641            "Peripheral", "GDMA0 Channel0", "GDMA0 Channel1", "GDMA0 Channel2", "GDMA0 Channel3",
;;;642            "GDMA0 Channel4", "GDMA0 Channel5", "GPIO_Group3", "GPIO_Group2", "IR", "GPIO_Group1",
;;;643            "GPIO_Group0", "UART2", "TIM4", "TIM5", "TIM6", "TIM7", "SPI_Flash", "Qdecode",
;;;644            "Keyscan", "SPI2W", "LPCOMP", "PTA_Mailbox", "SPORT1 TX", "SPORT1 RX", "LCD"
;;;645        };
;;;646    
;;;647        IRQ_Fun *pRamVector    = (IRQ_Fun *)VTOR_RAM_ADDR;
;;;648        IRQ_Fun *pAppVector    = (IRQ_Fun *)&Load$$RAM_VECTOR_TABLE$$RO$$Base;
;;;649        uint32_t AppVectorSize = (uint32_t)&Image$$RAM_VECTOR_TABLE$$RO$$Length;
;;;650        uint32_t i             = 0;
;;;651    
;;;652        if (SCB->VTOR != VTOR_RAM_ADDR)
;;;653        {
;;;654            RamVectorTableInit(VTOR_RAM_ADDR);
;;;655        }
;;;656    
;;;657        /* Update APP defined handlers */
;;;658        for (i = 0; i < AppVectorSize / 4; ++i)
;;;659        {
;;;660            if (i == 1) //skip reset_handler remap
;;;661            {
;;;662                continue;
;;;663            }
;;;664    
;;;665            if ((pAppVector[i] != Default_Handler) && (pAppVector[i] != 0))
;;;666            {
;;;667                if (i < System_VECTORn)
;;;668                {
;;;669                    OS_PRINT_WARN1("Warning! %s is updated by APP!", TRACE_STRING(SysException[i]));
;;;670                }
;;;671                else
;;;672                {
;;;673                    OS_PRINT_WARN1("Warning! ISR %s is updated by APP!",
;;;674                                   TRACE_STRING(ExtIrq[i - System_VECTORn]));
;;;675                }
;;;676    
;;;677                pRamVector[i] = pAppVector[i];
;;;678            }
;;;679        }
;;;680    
;;;681        __DMB();
;;;682        __DSB();
;;;683    }
;;;684    /**
;;;685     * @brief  GPIO Group3 Handler
;;;686     * @param  none
;;;687     * @return none
;;;688      */
;;;689    DATA_RAM_FUNCTION void GPIO_Group3_Handler(void)
;;;690    {
;;;691        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;692    
;;;693        //Check exact IRQ function
;;;694        if (GPIOIrqStatus & BIT3)
;;;695        {
;;;696            GPIO3_Handler();
;;;697        }
;;;698        if (GPIOIrqStatus & BIT7)
;;;699        {
;;;700            GPIO7_Handler();
;;;701        }
;;;702        if (GPIOIrqStatus & BIT11)
;;;703        {
;;;704            GPIO11_Handler();
;;;705        }
;;;706        if (GPIOIrqStatus & BIT15)
;;;707        {
;;;708            GPIO15_Handler();
;;;709        }
;;;710        if (GPIOIrqStatus & BIT19)
;;;711        {
;;;712            GPIO19_Handler();
;;;713        }
;;;714        if (GPIOIrqStatus & BIT23)
;;;715        {
;;;716            GPIO23_Handler();
;;;717        }
;;;718        if (GPIOIrqStatus & BIT27)
;;;719        {
;;;720            GPIO27_Handler();
;;;721        }
;;;722        if (GPIOIrqStatus & BIT31)
;;;723        {
;;;724            GPIO31_Handler();
;;;725        }
;;;726    }
;;;727    /**
;;;728     * @brief  GPIO Group2 Handler
;;;729     * @param  none
;;;730     * @return none
;;;731      */
;;;732    DATA_RAM_FUNCTION void GPIO_Group2_Handler(void)
;;;733    {
;;;734        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;735    
;;;736        //Check exact IRQ function
;;;737        if (GPIOIrqStatus & BIT2)
;;;738        {
;;;739            GPIO2_Handler();
;;;740        }
;;;741        if (GPIOIrqStatus & BIT6)
;;;742        {
;;;743            GPIO6_Handler();
;;;744        }
;;;745        if (GPIOIrqStatus & BIT10)
;;;746        {
;;;747            GPIO10_Handler();
;;;748        }
;;;749        if (GPIOIrqStatus & BIT14)
;;;750        {
;;;751            GPIO14_Handler();
;;;752        }
;;;753        if (GPIOIrqStatus & BIT18)
;;;754        {
;;;755            GPIO18_Handler();
;;;756        }
;;;757        if (GPIOIrqStatus & BIT22)
;;;758        {
;;;759            GPIO22_Handler();
;;;760        }
;;;761        if (GPIOIrqStatus & BIT26)
;;;762        {
;;;763            GPIO26_Handler();
;;;764        }
;;;765        if (GPIOIrqStatus & BIT30)
;;;766        {
;;;767            GPIO30_Handler();
;;;768        }
;;;769    }
;;;770    /**
;;;771     * @brief  GPIO Group1 Handler
;;;772     * @param  none
;;;773     * @return none
;;;774      */
;;;775    DATA_RAM_FUNCTION void GPIO_Group1_Handler(void)
;;;776    {
;;;777        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;778    
;;;779        //Check exact IRQ function
;;;780        if (GPIOIrqStatus & BIT1)
;;;781        {
;;;782            GPIO1_Handler();
;;;783        }
;;;784        if (GPIOIrqStatus & BIT9)
;;;785        {
;;;786            GPIO9_Handler();
;;;787        }
;;;788        if (GPIOIrqStatus & BIT13)
;;;789        {
;;;790            GPIO13_Handler();
;;;791        }
;;;792        if (GPIOIrqStatus & BIT17)
;;;793        {
;;;794            GPIO17_Handler();
;;;795        }
;;;796        if (GPIOIrqStatus & BIT21)
;;;797        {
;;;798            GPIO21_Handler();
;;;799        }
;;;800        if (GPIOIrqStatus & BIT25)
;;;801        {
;;;802            GPIO25_Handler();
;;;803        }
;;;804        if (GPIOIrqStatus & BIT29)
;;;805        {
;;;806            GPIO29_Handler();
;;;807        }
;;;808    }
;;;809    /**
;;;810     * @brief  GPIO Group0 Handler
;;;811     * @param  none
;;;812     * @return none
;;;813      */
;;;814    DATA_RAM_FUNCTION void GPIO_Group0_Handler(void)
;;;815    {
;;;816        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;817    
;;;818        //Check exact IRQ function
;;;819        if (GPIOIrqStatus & BIT0)
;;;820        {
;;;821            GPIO0_Handler();
;;;822        }
;;;823        if (GPIOIrqStatus & BIT8)
;;;824        {
;;;825            GPIO8_Handler();
;;;826        }
;;;827        if (GPIOIrqStatus & BIT12)
;;;828        {
;;;829            GPIO12_Handler();
;;;830        }
;;;831        if (GPIOIrqStatus & BIT16)
;;;832        {
;;;833            GPIO16_Handler();
;;;834        }
;;;835        if (GPIOIrqStatus & BIT20)
;;;836        {
;;;837            GPIO20_Handler();
;;;838        }
;;;839        if (GPIOIrqStatus & BIT24)
;;;840        {
;;;841            GPIO24_Handler();
;;;842        }
;;;843        if (GPIOIrqStatus & BIT28)
;;;844        {
;;;845            GPIO28_Handler();
;;;846        }
;;;847    }
;;;848    
;;;849    void WDG_SystemReset(T_WDG_MODE wdg_mode, T_SW_RESET_REASON reset_reason)
;;;850    {
;;;851        uint32_t parm = wdg_mode | (reset_reason << 8);
        0x0080e79e:    ea402101    @..!    ORR      r1,r0,r1,LSL #8
;;;852        SystemCall(SYSTEM_CALL_WDG_RESET, parm);
        0x0080e7a2:    2001        .       MOVS     r0,#1
        0x0080e7a4:    f7f89d7c    ..|.    B        SystemCall ; 0x72a0
    flash_try_high_speed
;;;853    }
;;;854    
;;;855    /**
;;;856     * @brief  flash try to switch to high speed bit mode
;;;857     * @note  switch back to 1 bit mode, if flash switch to high speed bit mode fail
;;;858     * @param  bit_mode config bit mode @ref T_FLASH_MODE
;;;859     * @retval 0 fail
;;;860     * @retval 1 success
;;;861      */
;;;862    uint32_t flash_try_high_speed(T_FLASH_MODE bit_mode)
;;;863    {
        0x0080e7a8:    b510        ..      PUSH     {r4,lr}
;;;864        uint32_t result = 0;
;;;865        OTP->bit_mode = bit_mode;
        0x0080e7aa:    f44f1400    O...    MOV      r4,#0x200000
        0x0080e7ae:    2200        ."      MOVS     r2,#0
        0x0080e7b0:    f894134c    ..L.    LDRB     r1,[r4,#0x34c]
        0x0080e7b4:    f3600101    `...    BFI      r1,r0,#0,#2
        0x0080e7b8:    f884134c    ..L.    STRB     r1,[r4,#0x34c]
;;;866        result = flash_ioctl(flash_ioctrl_try_high_speed, 0, 0);
        0x0080e7bc:    4611        .F      MOV      r1,r2
        0x0080e7be:    f2450002    E...    MOV      r0,#0x5002
        0x0080e7c2:    f7fddc56    ..V.    BL       flash_ioctl ; 0xc072
;;;867        //if try fail, set back OTP->bit_mode to one bit mode
;;;868        if (!result)
        0x0080e7c6:    2800        .(      CMP      r0,#0
        0x0080e7c8:    d105        ..      BNE      0x80e7d6 ; flash_try_high_speed + 46
;;;869        {
;;;870            OTP->bit_mode = FLASH_MODE_1BIT;
        0x0080e7ca:    f894134c    ..L.    LDRB     r1,[r4,#0x34c]
        0x0080e7ce:    f0210103    !...    BIC      r1,r1,#3
        0x0080e7d2:    f884134c    ..L.    STRB     r1,[r4,#0x34c]
;;;871        }
;;;872        return result;
;;;873    }
        0x0080e7d6:    bd10        ..      POP      {r4,pc}
    malloc
;;;874    
;;;875    void *malloc(size_t size)
;;;876    {
;;;877        return os_mem_alloc(RAM_TYPE_DATA_ON, size);
        0x0080e7d8:    4601        .F      MOV      r1,r0
        0x0080e7da:    f240336d    @.m3    MOV      r3,#0x36d
        0x0080e7de:    4a29        )J      LDR      r2,[pc,#164] ; [0x80e884] = 0x81c028
        0x0080e7e0:    2000        .       MOVS     r0,#0
        0x0080e7e2:    f417b2bd    ....    B        os_mem_alloc_intern ; 0x25d60
    calloc
;;;878    }
;;;879    
;;;880    void *calloc(size_t n, size_t size)
;;;881    {
;;;882        return os_mem_zalloc(RAM_TYPE_DATA_ON, n * size);
        0x0080e7e6:    4a27        'J      LDR      r2,[pc,#156] ; [0x80e884] = 0x81c028
        0x0080e7e8:    4341        AC      MULS     r1,r0,r1
        0x0080e7ea:    1dd2        ..      ADDS     r2,r2,#7
        0x0080e7ec:    f2403372    @.r3    MOV      r3,#0x372
        0x0080e7f0:    2000        .       MOVS     r0,#0
        0x0080e7f2:    f417b2e1    ....    B        os_mem_zalloc_intern ; 0x25db8
    realloc
;;;883    }
;;;884    
;;;885    void *realloc(void *ptr, size_t size)
;;;886    {
        0x0080e7f6:    b510        ..      PUSH     {r4,lr}
        0x0080e7f8:    460c        .F      MOV      r4,r1
        0x0080e7fa:    b108        ..      CBZ      r0,0x80e800 ; realloc + 10
;;;887        if (ptr)
;;;888        {
;;;889            os_mem_free(ptr);
        0x0080e7fc:    f417f33b    ..;.    BL       os_mem_free ; 0x25e76
;;;890        }
;;;891    
;;;892        return os_mem_alloc(RAM_TYPE_DATA_ON, size);
        0x0080e800:    4a20         J      LDR      r2,[pc,#128] ; [0x80e884] = 0x81c028
        0x0080e802:    4621        !F      MOV      r1,r4
        0x0080e804:    320e        .2      ADDS     r2,r2,#0xe
        0x0080e806:    e8bd4010    ...@    POP      {r4,lr}
        0x0080e80a:    f44f735f    O._s    MOV      r3,#0x37c
        0x0080e80e:    2000        .       MOVS     r0,#0
        0x0080e810:    f417b2a6    ....    B        os_mem_alloc_intern ; 0x25d60
    free
;;;893    }
;;;894    
;;;895    void free(void *ptr)
;;;896    {
;;;897        os_mem_free(ptr);
        0x0080e814:    f417b32f    ../.    B        os_mem_free ; 0x25e76
    app_cb0_wdg_reset
;;;898    }
;;;899    
;;;900    void app_cb0_wdg_reset(T_WDG_MODE wdg_mode, T_SW_RESET_REASON reset_reason)
;;;901    {
;;;902        check_reset_ram.check_reset_ram_type = reset_reason;
        0x0080e818:    4a1b        .J      LDR      r2,[pc,#108] ; [0x80e888] = 0x2080bc
        0x0080e81a:    70d1        .p      STRB     r1,[r2,#3]
        0x0080e81c:    4a1b        .J      LDR      r2,[pc,#108] ; [0x80e88c] = 0x208144
        0x0080e81e:    6812        .h      LDR      r2,[r2,#0]
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (901)
        0x0080e820:    2a00        .*      CMP      r2,#0
        0x0080e822:    d000        ..      BEQ      0x80e826 ; app_cb0_wdg_reset + 14
;;;902        check_reset_ram.check_reset_ram_type = reset_reason;
;;;903    
;;;904        if (user_wdg_cb)
;;;905        {
;;;906            if (user_wdg_cb(wdg_mode, reset_reason))
        0x0080e824:    4710        .G      BX       r2
;;;907            {
;;;908                return;
;;;909            }
;;;910        }
;;;911    
;;;912        //do something necessary before watch dog reset
;;;913    }
        0x0080e826:    4770        pG      BX       lr
    app_cb5_dfu_status
;;;914    
;;;915    void app_cb5_dfu_status(DFU_PROGRESS_STATUS status, uint32_t length)
;;;916    {
;;;917    //    uint32_t value = 0;
;;;918    //    switch(status)
;;;919    //    {
;;;920    //        case DFU_START:
;;;921    //            value = *((uint32_t *)0x180e000);
;;;922    //            DBG_DIRECT("DFU start, total length = %d, value = 0x%x", length, value);
;;;923    //            break;
;;;924    //        case DFU_DOING:
;;;925    //            value = *((uint32_t *)0x180e000);
;;;926    //            DBG_DIRECT("DFU doing, paccket length = %d, value = 0x%x", length, value);
;;;927    //            break;
;;;928    //        case DFU_END:
;;;929    //            value = *((uint32_t *)0x180e000);
;;;930    //            DBG_DIRECT("DFU end, check result = %d, value = 0x%x", length, value);
;;;931    //            break;
;;;932    //        default:
;;;933    //            DBG_DIRECT("wrong status input");
;;;934    //    }
;;;935        if (user_dfu_status_cb)
        0x0080e828:    4a19        .J      LDR      r2,[pc,#100] ; [0x80e890] = 0x208148
        0x0080e82a:    6812        .h      LDR      r2,[r2,#0]
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (916)
        0x0080e82c:    2a00        .*      CMP      r2,#0
        0x0080e82e:    d000        ..      BEQ      0x80e832 ; app_cb5_dfu_status + 10
;;;917    //    uint32_t value = 0;
;;;918    //    switch(status)
;;;919    //    {
;;;920    //        case DFU_START:
;;;921    //            value = *((uint32_t *)0x180e000);
;;;922    //            DBG_DIRECT("DFU start, total length = %d, value = 0x%x", length, value);
;;;923    //            break;
;;;924    //        case DFU_DOING:
;;;925    //            value = *((uint32_t *)0x180e000);
;;;926    //            DBG_DIRECT("DFU doing, paccket length = %d, value = 0x%x", length, value);
;;;927    //            break;
;;;928    //        case DFU_END:
;;;929    //            value = *((uint32_t *)0x180e000);
;;;930    //            DBG_DIRECT("DFU end, check result = %d, value = 0x%x", length, value);
;;;931    //            break;
;;;932    //        default:
;;;933    //            DBG_DIRECT("wrong status input");
;;;934    //    }
;;;935        if (user_dfu_status_cb)
;;;936        {
;;;937            if (user_dfu_status_cb(status, length))
        0x0080e830:    4710        .G      BX       r2
;;;938            {
;;;939                return;
;;;940            }
;;;941        }
;;;942    }
        0x0080e832:    4770        pG      BX       lr
    NVIC_DisableIRQ
;;; ..\..\..\inc\platform\cmsis\core_cm4.h
;;;1659       NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
        0x0080e834:    f000021f    ....    AND      r2,r0,#0x1f
        0x0080e838:    2101        .!      MOVS     r1,#1
        0x0080e83a:    4091        .@      LSLS     r1,r1,r2
        0x0080e83c:    0940        @.      LSRS     r0,r0,#5
        0x0080e83e:    0080        ..      LSLS     r0,r0,#2
        0x0080e840:    f10020e0    ...     ADD      r0,r0,#0xe000e000
        0x0080e844:    f8c01180    ....    STR      r1,[r0,#0x180]
;;;1660   }
        0x0080e848:    4770        pG      BX       lr
    $d
        0x0080e84a:    0000        ..      DCW    0
        0x0080e84c:    53206e49    In S    DCD    1394634313
        0x0080e850:    4d20436f    oC M    DCD    1293960047
        0x0080e854:    0065646f    ode.    DCD    6644847
        0x0080e858:    4e524157    WARN    DCD    1314013527
        0x0080e85c:    3a474e49    ING:    DCD    977751625
        0x0080e860:    206e4920     In     DCD    544098592
        0x0080e864:    20494348    HCI     DCD    541672264
        0x0080e868:    65646f4d    Mode    DCD    1701080909
        0x0080e86c:    6977202c    , wi    DCD    1769414700
        0x0080e870:    6e206c6c    ll n    DCD    1847618668
        0x0080e874:    7220746f    ot r    DCD    1914729583
        0x0080e878:    41206e75    un A    DCD    1092644469
        0x0080e87c:    54205050    PP T    DCD    1411403856
        0x0080e880:    006b7361    ask.    DCD    7041889
        0x0080e884:    0081c028    (...    DCD    8503336
        0x0080e888:    002080bc    .. .    DCD    2130108
        0x0080e88c:    00208144    D. .    DCD    2130244
        0x0080e890:    00208148    H. .    DCD    2130248
    $t
    .text
    DLPS_IORegister
;;; .\..\..\..\src\mcu\peripheral\rtl876x_io_dlps.c
;;;1894   {
        0x0080e894:    b510        ..      PUSH     {r4,lr}
;;;1895       dlps_hw_control_cb_reg(DLPS_IO_EnterDlpsCb, DLPS_ENTER);
        0x0080e896:    2100        .!      MOVS     r1,#0
        0x0080e898:    4804        .H      LDR      r0,[pc,#16] ; [0x80e8ac] = 0x207d25
        0x0080e89a:    f7f9df28    ..(.    BL       dlps_hw_control_cb_reg ; 0x86ee
;;;1896       dlps_hw_control_cb_reg(DLPS_IO_ExitDlpsCb, DLPS_EXIT4_BT_READY);
        0x0080e89e:    e8bd4010    ...@    POP      {r4,lr}
        0x0080e8a2:    2104        .!      MOVS     r1,#4
        0x0080e8a4:    4802        .H      LDR      r0,[pc,#8] ; [0x80e8b0] = 0x207dd3
        0x0080e8a6:    f7f99f22    ..".    B        dlps_hw_control_cb_reg ; 0x86ee
    $d
        0x0080e8aa:    0000        ..      DCW    0
        0x0080e8ac:    00207d25    %} .    DCD    2129189
        0x0080e8b0:    00207dd3    .} .    DCD    2129363
    $t
    .text
    RCC_PeriphClockCmd
;;; .\..\..\..\src\mcu\peripheral\rtl876x_rcc.c
;;;66     {
        0x0080e8b4:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0080e8b6:    f44f7790    O..w    MOV      r7,#0x120
        0x0080e8ba:    067b        {.      LSLS     r3,r7,#25
;;;67         /* Check the parameters */
;;;68         assert_param(IS_APB_PERIPH(APBPeriph));
;;;69         assert_param(IS_APB_PERIPH_CLOCK(APBPeriph_Clock));
;;;70         assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;71     
;;;72         uint32_t apbRegOff = ((APBPeriph & (0x03 << 26)) >> 26);
        0x0080e8bc:    f3c06681    ...f    UBFX     r6,r0,#26,#2
;;;73         uint32_t clkRegOff = ((APBPeriph_Clock & (0x03 << 29)) >> 29);
        0x0080e8c0:    f3c17541    ..Au    UBFX     r5,r1,#29,#2
        0x0080e8c4:    f44f7ea0    O..~    MOV      lr,#0x140
        0x0080e8c8:    ea400401    @...    ORR      r4,r0,r1
;;;74     
;;;75         /*Open clock gating first*/
;;;76         if (NewState == ENABLE)
        0x0080e8cc:    2a01        .*      CMP      r2,#1
        0x0080e8ce:    d006        ..      BEQ      0x80e8de ; RCC_PeriphClockCmd + 42
        0x0080e8d0:    42b9        .B      CMP      r1,r7
        0x0080e8d2:    d06f        o.      BEQ      0x80e9b4 ; RCC_PeriphClockCmd + 256
        0x0080e8d4:    4571        qE      CMP      r1,lr
        0x0080e8d6:    d06d        m.      BEQ      0x80e9b4 ; RCC_PeriphClockCmd + 256
        0x0080e8d8:    2910        .)      CMP      r1,#0x10
        0x0080e8da:    d06b        k.      BEQ      0x80e9b4 ; RCC_PeriphClockCmd + 256
        0x0080e8dc:    e04b        K.      B        0x80e976 ; RCC_PeriphClockCmd + 194
;;;77         {
;;;78             if (APBPeriph_Clock == APBPeriph_KEYSCAN_CLOCK)
        0x0080e8de:    f1a14cc0    ...L    SUB      r12,r1,#0x60000000
        0x0080e8e2:    f1bc0c40    ..@.    SUBS     r12,r12,#0x40
        0x0080e8e6:    d018        ..      BEQ      0x80e91a ; RCC_PeriphClockCmd + 102
        0x0080e8e8:    f1b14fc2    ...O    CMP      r1,#0x61000000
        0x0080e8ec:    d020         .      BEQ      0x80e930 ; RCC_PeriphClockCmd + 124
        0x0080e8ee:    f1a14cc0    ...L    SUB      r12,r1,#0x60000000
        0x0080e8f2:    f1bc0c10    ....    SUBS     r12,r12,#0x10
        0x0080e8f6:    d003        ..      BEQ      0x80e900 ; RCC_PeriphClockCmd + 76
        0x0080e8f8:    f8dfc2f0    ....    LDR      r12,[pc,#752] ; [0x80ebec] = 0x60010000
        0x0080e8fc:    4561        aE      CMP      r1,r12
        0x0080e8fe:    d124        $.      BNE      0x80e94a ; RCC_PeriphClockCmd + 150
        0x0080e900:    f8d3c20c    ....    LDR      r12,[r3,#0x20c]
        0x0080e904:    f04c6c80    L..l    ORR      r12,r12,#0x4000000
        0x0080e908:    f8c3c20c    ....    STR      r12,[r3,#0x20c]
        0x0080e90c:    f8d3c20c    ....    LDR      r12,[r3,#0x20c]
        0x0080e910:    f04c6c00    L..l    ORR      r12,r12,#0x8000000
        0x0080e914:    f8c3c20c    ....    STR      r12,[r3,#0x20c]
        0x0080e918:    e027        '.      B        0x80e96a ; RCC_PeriphClockCmd + 182
;;;79             {
;;;80                 /*Open 5M clock source*/
;;;81                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
        0x0080e91a:    f8d3c20c    ....    LDR      r12,[r3,#0x20c]
        0x0080e91e:    f04c6c80    L..l    ORR      r12,r12,#0x4000000
        0x0080e922:    f8c3c20c    ....    STR      r12,[r3,#0x20c]
;;;82                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT29;
        0x0080e926:    f8d3c20c    ....    LDR      r12,[r3,#0x20c]
        0x0080e92a:    f04c5c00    L..\    ORR      r12,r12,#0x20000000
        0x0080e92e:    e7f1        ..      B        0x80e914 ; RCC_PeriphClockCmd + 96
;;;83             }
;;;84             else if (APBPeriph_Clock == APBPeriph_ADC_CLOCK)
;;;85             {
;;;86                 /*Open 10M clock source*/
;;;87                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
        0x0080e930:    f8d3420c    ...B    LDR      r4,[r3,#0x20c]
        0x0080e934:    f0446480    D..d    ORR      r4,r4,#0x4000000
        0x0080e938:    f8c3420c    ...B    STR      r4,[r3,#0x20c]
;;;88                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT28;
        0x0080e93c:    f8d3420c    ...B    LDR      r4,[r3,#0x20c]
        0x0080e940:    f0445480    D..T    ORR      r4,r4,#0x10000000
        0x0080e944:    f8c3420c    ...B    STR      r4,[r3,#0x20c]
        0x0080e948:    e015        ..      B        0x80e976 ; RCC_PeriphClockCmd + 194
;;;89             }
;;;90             else if ((APBPeriph_Clock == APBPeriph_QDEC_CLOCK) || (APBPeriph_Clock == APBPeriph_SPI2W_CLOCK))
;;;91             {
;;;92                 /*Open 20M clock source*/
;;;93                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;94                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;95             }
;;;96             else if (APBPeriph_Clock == APBPeriph_TIMER_CLOCK)
        0x0080e94a:    f8dfc2a4    ....    LDR      r12,[pc,#676] ; [0x80ebf0] = 0x20004000
        0x0080e94e:    4561        aE      CMP      r1,r12
        0x0080e950:    d10b        ..      BNE      0x80e96a ; RCC_PeriphClockCmd + 182
;;;97             {
;;;98                 /* Enable TIM0~1 fixed 40M */
;;;99                 CLK_SOURCE_REG_2 |= BIT9;
        0x0080e952:    f8d3c360    ..`.    LDR      r12,[r3,#0x360]
        0x0080e956:    f44c7c00    L..|    ORR      r12,r12,#0x200
        0x0080e95a:    f8c3c360    ..`.    STR      r12,[r3,#0x360]
;;;100                /* enable TIM2~7 ICG*/
;;;101                CLK_SOURCE_REG_0 |= BIT4;
        0x0080e95e:    f8d3c348    ..H.    LDR      r12,[r3,#0x348]
        0x0080e962:    f04c0c10    L...    ORR      r12,r12,#0x10
        0x0080e966:    f8c3c348    ..H.    STR      r12,[r3,#0x348]
;;;102            }
;;;103        }
;;;104    
;;;105        /* Special register handle */
;;;106        if (NewState == ENABLE)
;;;107        {
;;;108            if ((APBPeriph_Clock == APBPeriph_I2S0_CLOCK) || ((APBPeriph_Clock == APBPeriph_I2S1_CLOCK)) ||
        0x0080e96a:    42b9        .B      CMP      r1,r7
        0x0080e96c:    d01d        ..      BEQ      0x80e9aa ; RCC_PeriphClockCmd + 246
        0x0080e96e:    4571        qE      CMP      r1,lr
        0x0080e970:    d01b        ..      BEQ      0x80e9aa ; RCC_PeriphClockCmd + 246
;;;109                (APBPeriph_Clock == APBPeriph_CODEC_CLOCK))
        0x0080e972:    2910        .)      CMP      r1,#0x10
        0x0080e974:    d019        ..      BEQ      0x80e9aa ; RCC_PeriphClockCmd + 246
;;;110            {
;;;111                SYSBLKCTRL->u_220 |= APBPeriph | APBPeriph_Clock;
;;;112                return;
;;;113            }
;;;114        }
;;;115        else
;;;116        {
;;;117            if ((APBPeriph_Clock == APBPeriph_I2S0_CLOCK) || ((APBPeriph_Clock == APBPeriph_I2S1_CLOCK)) ||
;;;118                (APBPeriph_Clock == APBPeriph_CODEC_CLOCK))
;;;119            {
;;;120                SYSBLKCTRL->u_220 &= ~(APBPeriph | APBPeriph_Clock);
;;;121                return;
;;;122            }
;;;123        }
;;;124    
;;;125        /* clear flag */
;;;126        APBPeriph &= (~(0x03 << 26));
        0x0080e976:    f0206340     .@c    BIC      r3,r0,#0xc000000
;;;127        APBPeriph_Clock &= (~(0x03 << 29));
        0x0080e97a:    f02140c0    !..@    BIC      r0,r1,#0x60000000
        0x0080e97e:    ea4f0186    O...    LSL      r1,r6,#2
        0x0080e982:    f1014180    ...A    ADD      r1,r1,#0x40000000
;;;128    
;;;129        if (NewState == ENABLE)
        0x0080e986:    2a01        .*      CMP      r2,#1
        0x0080e988:    f8d12210    ..."    LDR      r2,[r1,#0x210]
        0x0080e98c:    d018        ..      BEQ      0x80e9c0 ; RCC_PeriphClockCmd + 268
;;;130        {
;;;131            //enable peripheral
;;;132            *((uint32_t *)(&(SYSBLKCTRL->u_210.SOC_FUNC_EN)) + apbRegOff) |= APBPeriph;
;;;133            //enable peripheral clock
;;;134            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) |= APBPeriph_Clock;
;;;135            //enable peripheral clock in sleep mode
;;;136            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) |= (APBPeriph_Clock << 1);
;;;137        }
;;;138        else
;;;139        {
;;;140            //disable peripheral
;;;141            *((uint32_t *)(&(SYSBLKCTRL->u_210.SOC_FUNC_EN)) + apbRegOff) &= (~APBPeriph);
        0x0080e98e:    439a        .C      BICS     r2,r2,r3
;;;142            //disable peripheral clock
;;;143            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) &= (~APBPeriph_Clock);
        0x0080e990:    f8c12210    ..."    STR      r2,[r1,#0x210]
        0x0080e994:    00a9        ..      LSLS     r1,r5,#2
        0x0080e996:    f1014180    ...A    ADD      r1,r1,#0x40000000
        0x0080e99a:    f8d1222c    ..,"    LDR      r2,[r1,#0x22c]
        0x0080e99e:    4382        .C      BICS     r2,r2,r0
;;;144            //disable peripheral clock in sleep mode
;;;145            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) &= (~(APBPeriph_Clock << 1));
        0x0080e9a0:    ea220040    ".@.    BIC      r0,r2,r0,LSL #1
        0x0080e9a4:    f8c1022c    ..,.    STR      r0,[r1,#0x22c]
;;;146        }
;;;147    
;;;148        return;
;;;149    }
        0x0080e9a8:    bdf0        ..      POP      {r4-r7,pc}
        0x0080e9aa:    f8d30220    .. .    LDR      r0,[r3,#0x220]
        0x0080e9ae:    4320         C      ORRS     r0,r0,r4
        0x0080e9b0:    e003        ..      B        0x80e9ba ; RCC_PeriphClockCmd + 262
        0x0080e9b2:    e7ff        ..      B        0x80e9b4 ; RCC_PeriphClockCmd + 256
        0x0080e9b4:    f8d30220    .. .    LDR      r0,[r3,#0x220]
        0x0080e9b8:    43a0        .C      BICS     r0,r0,r4
        0x0080e9ba:    f8c30220    .. .    STR      r0,[r3,#0x220]
        0x0080e9be:    bdf0        ..      POP      {r4-r7,pc}
        0x0080e9c0:    431a        .C      ORRS     r2,r2,r3
        0x0080e9c2:    f8c12210    ..."    STR      r2,[r1,#0x210]
        0x0080e9c6:    00a9        ..      LSLS     r1,r5,#2
        0x0080e9c8:    f1014180    ...A    ADD      r1,r1,#0x40000000
        0x0080e9cc:    f8d1222c    ..,"    LDR      r2,[r1,#0x22c]
        0x0080e9d0:    4302        .C      ORRS     r2,r2,r0
        0x0080e9d2:    ea420040    B.@.    ORR      r0,r2,r0,LSL #1
        0x0080e9d6:    e7e5        ..      B        0x80e9a4 ; RCC_PeriphClockCmd + 240
    RCC_SPIClkDivConfig
;;;150    
;;;151    /**
;;;152      * @brief  SPI clock divider config.
;;;153      * @param  SPIx: where x can be 0 or 1 to select the SPI peripheral.
;;;154      * @param  ClockDiv: specifies the APB peripheral to gates its clock.
;;;155      *      this parameter can be one of the following values:
;;;156      *     @arg SPI_CLOCK_DIV_1
;;;157      *     @arg SPI_CLOCK_DIV_2
;;;158      *     @arg SPI_CLOCK_DIV_4
;;;159      *     @arg SPI_CLOCK_DIV_8
;;;160      * @retval None
;;;161      */
;;;162    void RCC_SPIClkDivConfig(SPI_TypeDef *SPIx, uint16_t ClockDiv)
;;;163    {
;;;164        assert_param(IS_SPI_DIV(ClockDiv));
;;;165    
;;;166        /* Config I2C clock divider */
;;;167        if (SPIx == SPI0)
        0x0080e9d8:    4b86        .K      LDR      r3,[pc,#536] ; [0x80ebf4] = 0x40013000
        0x0080e9da:    f04f4280    O..B    MOV      r2,#0x40000000
        0x0080e9de:    4298        .B      CMP      r0,r3
;;; .\..\..\..\src\mcu\peripheral\rtl876x_rcc.c (163)
        0x0080e9e0:    d116        ..      BNE      0x80ea10 ; RCC_SPIClkDivConfig + 56
;;;164        assert_param(IS_SPI_DIV(ClockDiv));
;;;165    
;;;166        /* Config I2C clock divider */
;;;167        if (SPIx == SPI0)
;;;168        {
;;;169            /* disable clock first */
;;;170            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 &= ~SYSBLK_ACTCK_SPI0_EN_Msk;
        0x0080e9e2:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x0080e9e6:    f4203080     ..0    BIC      r0,r0,#0x10000
        0x0080e9ea:    f8c20234    ..4.    STR      r0,[r2,#0x234]
;;;171            //platform_delay_us(1);
;;;172    
;;;173            CLK_SOURCE_REG_1 &= ~(0x03 << 19);
        0x0080e9ee:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0080e9f2:    f42010c0     ...    BIC      r0,r0,#0x180000
        0x0080e9f6:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;174            CLK_SOURCE_REG_1 |= (ClockDiv << 19);
        0x0080e9fa:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0080e9fe:    ea4040c1    @..@    ORR      r0,r0,r1,LSL #19
        0x0080ea02:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;175    
;;;176            //platform_delay_us(1);
;;;177            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= SYSBLK_ACTCK_SPI0_EN_Msk;
        0x0080ea06:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x0080ea0a:    f4403080    @..0    ORR      r0,r0,#0x10000
        0x0080ea0e:    e018        ..      B        0x80ea42 ; RCC_SPIClkDivConfig + 106
;;;178        }
;;;179        else if (SPIx == SPI1)
        0x0080ea10:    4b79        yK      LDR      r3,[pc,#484] ; [0x80ebf8] = 0x40013400
        0x0080ea12:    4298        .B      CMP      r0,r3
        0x0080ea14:    d117        ..      BNE      0x80ea46 ; RCC_SPIClkDivConfig + 110
;;;180        {
;;;181            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 &= ~SYSBLK_ACTCK_SPI1_EN_Msk;
        0x0080ea16:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x0080ea1a:    f4202080     ..     BIC      r0,r0,#0x40000
        0x0080ea1e:    f8c20234    ..4.    STR      r0,[r2,#0x234]
;;;182            //platform_delay_us(1);
;;;183    
;;;184            CLK_SOURCE_REG_1 &= ~(0x03 << 21);
        0x0080ea22:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0080ea26:    f42000c0     ...    BIC      r0,r0,#0x600000
        0x0080ea2a:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;185            CLK_SOURCE_REG_1 |= (ClockDiv << 21);
        0x0080ea2e:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0080ea32:    ea405041    @.AP    ORR      r0,r0,r1,LSL #21
        0x0080ea36:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;186    
;;;187            //platform_delay_us(1);
;;;188            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= SYSBLK_ACTCK_SPI1_EN_Msk;
        0x0080ea3a:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x0080ea3e:    f4402080    @..     ORR      r0,r0,#0x40000
        0x0080ea42:    f8c20234    ..4.    STR      r0,[r2,#0x234]
;;;189        }
;;;190        return;
;;;191    }
        0x0080ea46:    4770        pG      BX       lr
    RCC_I2CClkDivConfig
;;;192    
;;;193    /**
;;;194      * @brief  I2C clock divider config.
;;;195      * @param  I2Cx: where x can be 0 or 1 to select the I2C peripheral.
;;;196      * @param  ClockDiv: specifies the APB peripheral to gates its clock.
;;;197      *      this parameter can be one of the following values:
;;;198      *     @arg I2C_CLOCK_DIV_1
;;;199      *     @arg I2C_CLOCK_DIV_2
;;;200      *     @arg I2C_CLOCK_DIV_4
;;;201      *     @arg I2C_CLOCK_DIV_8
;;;202      * @retval None
;;;203      */
;;;204    void RCC_I2CClkDivConfig(I2C_TypeDef *I2Cx, uint16_t ClockDiv)
;;;205    {
;;;206        assert_param(IS_I2C_DIV(ClockDiv));
;;;207    
;;;208        /* Config I2C clock divider */
;;;209        if (I2Cx == I2C0)
        0x0080ea48:    4b6c        lK      LDR      r3,[pc,#432] ; [0x80ebfc] = 0x40015000
        0x0080ea4a:    049a        ..      LSLS     r2,r3,#18
        0x0080ea4c:    4298        .B      CMP      r0,r3
;;; .\..\..\..\src\mcu\peripheral\rtl876x_rcc.c (205)
        0x0080ea4e:    d116        ..      BNE      0x80ea7e ; RCC_I2CClkDivConfig + 54
;;;206        assert_param(IS_I2C_DIV(ClockDiv));
;;;207    
;;;208        /* Config I2C clock divider */
;;;209        if (I2Cx == I2C0)
;;;210        {
;;;211            /* disable clock first */
;;;212            SYSBLKCTRL->u_238.PERI_CLK_CTRL1 &= ~SYSBLK_ACTCK_I2C0_EN_Msk;
        0x0080ea50:    f8d20238    ..8.    LDR      r0,[r2,#0x238]
        0x0080ea54:    f0200001     ...    BIC      r0,r0,#1
        0x0080ea58:    f8c20238    ..8.    STR      r0,[r2,#0x238]
;;;213            //platform_delay_us(1);
;;;214    
;;;215            CLK_SOURCE_REG_1 &= ~(0x03 << 15);
        0x0080ea5c:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0080ea60:    f42030c0     ..0    BIC      r0,r0,#0x18000
        0x0080ea64:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;216            CLK_SOURCE_REG_1 |= (ClockDiv << 15);
        0x0080ea68:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0080ea6c:    ea4030c1    @..0    ORR      r0,r0,r1,LSL #15
        0x0080ea70:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;217    
;;;218            //platform_delay_us(1);
;;;219            SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= SYSBLK_ACTCK_I2C0_EN_Msk;
        0x0080ea74:    f8d20238    ..8.    LDR      r0,[r2,#0x238]
        0x0080ea78:    f0400001    @...    ORR      r0,r0,#1
        0x0080ea7c:    e018        ..      B        0x80eab0 ; RCC_I2CClkDivConfig + 104
;;;220        }
;;;221        else if (I2Cx == I2C1)
        0x0080ea7e:    4b60        `K      LDR      r3,[pc,#384] ; [0x80ec00] = 0x40015400
        0x0080ea80:    4298        .B      CMP      r0,r3
        0x0080ea82:    d117        ..      BNE      0x80eab4 ; RCC_I2CClkDivConfig + 108
;;;222        {
;;;223            SYSBLKCTRL->u_238.PERI_CLK_CTRL1 &= ~SYSBLK_ACTCK_I2C1_EN_Msk;
        0x0080ea84:    f8d20238    ..8.    LDR      r0,[r2,#0x238]
        0x0080ea88:    f0200004     ...    BIC      r0,r0,#4
        0x0080ea8c:    f8c20238    ..8.    STR      r0,[r2,#0x238]
;;;224            //platform_delay_us(1);
;;;225    
;;;226            CLK_SOURCE_REG_1 &= ~(0x03 << 17);
        0x0080ea90:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0080ea94:    f42020c0     ..     BIC      r0,r0,#0x60000
        0x0080ea98:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;227            CLK_SOURCE_REG_1 |= (ClockDiv << 17);
        0x0080ea9c:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0080eaa0:    ea404041    @.A@    ORR      r0,r0,r1,LSL #17
        0x0080eaa4:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;228    
;;;229            //platform_delay_us(1);
;;;230            SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= SYSBLK_ACTCK_I2C1_EN_Msk;
        0x0080eaa8:    f8d20238    ..8.    LDR      r0,[r2,#0x238]
        0x0080eaac:    f0400004    @...    ORR      r0,r0,#4
        0x0080eab0:    f8c20238    ..8.    STR      r0,[r2,#0x238]
;;;231        }
;;;232    
;;;233        return;
;;;234    }
        0x0080eab4:    4770        pG      BX       lr
    RCC_UARTClkDivConfig
        0x0080eab6:    4b53        SK      LDR      r3,[pc,#332] ; [0x80ec04] = 0x40012000
        0x0080eab8:    045a        Z.      LSLS     r2,r3,#17
        0x0080eaba:    4298        .B      CMP      r0,r3
;;;235    
;;;236    /**
;;;237      * @brief  UART clock divider config.
;;;238      * @param  UARTx: selected UART peripheral.
;;;239      * @param  ClockDiv: specifies the APB peripheral to gates its clock.
;;;240      *      this parameter can be one of the following values:
;;;241      *     @arg UART_CLOCK_DIV_1
;;;242      *     @arg UART_CLOCK_DIV_2
;;;243      *     @arg UART_CLOCK_DIV_4
;;;244      *     @arg UART_CLOCK_DIV_16
;;;245      * @retval None
;;;246      */
;;;247    void RCC_UARTClkDivConfig(UART_TypeDef *UARTx, uint16_t ClockDiv)
;;;248    {
        0x0080eabc:    d118        ..      BNE      0x80eaf0 ; RCC_UARTClkDivConfig + 58
;;;249        assert_param(IS_UART_DIV(ClockDiv));
;;;250    
;;;251        /* Config UART clock divider */
;;;252        if (UARTx == UART)
;;;253        {
;;;254            /* disable clock first */
;;;255            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 &= ~SYSBLK_ACTCK_UART0DATA_EN_Msk;
        0x0080eabe:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x0080eac2:    f0200001     ...    BIC      r0,r0,#1
        0x0080eac6:    f8c20234    ..4.    STR      r0,[r2,#0x234]
;;;256            //platform_delay_us(1);
;;;257    
;;;258            CLK_SOURCE_REG_1 &= ~(0x03 << 9);
        0x0080eaca:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0080eace:    f42060c0     ..`    BIC      r0,r0,#0x600
        0x0080ead2:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;259            CLK_SOURCE_REG_1 |= (ClockDiv << 9);
        0x0080ead6:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0080eada:    ea402041    @.A     ORR      r0,r0,r1,LSL #9
        0x0080eade:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;260    
;;;261            //platform_delay_us(1);
;;;262            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= SYSBLK_ACTCK_UART0DATA_EN_Msk;
        0x0080eae2:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x0080eae6:    f0400001    @...    ORR      r0,r0,#1
        0x0080eaea:    f8c20234    ..4.    STR      r0,[r2,#0x234]
        0x0080eaee:    4770        pG      BX       lr
;;;263        }
;;;264        else if (UARTx == UART1)
        0x0080eaf0:    4b45        EK      LDR      r3,[pc,#276] ; [0x80ec08] = 0x40011000
        0x0080eaf2:    4298        .B      CMP      r0,r3
        0x0080eaf4:    d1fb        ..      BNE      0x80eaee ; RCC_UARTClkDivConfig + 56
;;;265        {
;;;266            SYSBLKCTRL->u_230.CLK_CTRL &= ~SYSBLK_ACTCK_LOGUART_EN_Msk;
        0x0080eaf6:    f8d20230    ..0.    LDR      r0,[r2,#0x230]
        0x0080eafa:    f4205080     ..P    BIC      r0,r0,#0x1000
        0x0080eafe:    f8c20230    ..0.    STR      r0,[r2,#0x230]
;;;267            //platform_delay_us(1);
;;;268    
;;;269            CLK_SOURCE_REG_1 &= ~(0x03 << 11);
        0x0080eb02:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0080eb06:    f42050c0     ..P    BIC      r0,r0,#0x1800
        0x0080eb0a:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;270            CLK_SOURCE_REG_1 |= (ClockDiv << 11);
        0x0080eb0e:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0080eb12:    ea4020c1    @..     ORR      r0,r0,r1,LSL #11
        0x0080eb16:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;271    
;;;272            //platform_delay_us(1);
;;;273            SYSBLKCTRL->u_230.CLK_CTRL |= SYSBLK_ACTCK_LOGUART_EN_Msk;
        0x0080eb1a:    f8d20230    ..0.    LDR      r0,[r2,#0x230]
        0x0080eb1e:    f4405080    @..P    ORR      r0,r0,#0x1000
        0x0080eb22:    f8c20230    ..0.    STR      r0,[r2,#0x230]
;;;274        }
;;;275    
;;;276        return;
;;;277    }
        0x0080eb26:    4770        pG      BX       lr
    RCC_PeriClockConfig
;;;278    
;;;279    /**
;;;280      * @brief  Enables or disables the APB peripheral clock.
;;;281      * @param  APBPeriph_Clock: specifies the APB peripheral clock config.
;;;282      *      this parameter can be one of the following values(must be the same with APBPeriph):
;;;283      *     @arg APBPeriph_TIMER_CLOCK
;;;284      *     @arg APBPeriph_GDMA_CLOCK
;;;285      *     @arg APBPeriph_SPI2W_CLOCK
;;;286      *     @arg APBPeriph_KEYSCAN_CLOCK
;;;287      *     @arg APBPeriph_QDEC_CLOCK
;;;288      *     @arg APBPeriph_I2C1_CLOCK
;;;289      *     @arg APBPeriph_I2C0_CLOCK
;;;290      *     @arg APBPeriph_IR_CLOCK
;;;291      *     @arg APBPeriph_SPI1_CLOCK
;;;292      *     @arg APBPeriph_SPI0_CLOCK
;;;293      *     @arg APBPeriph_UART0_CLOCK
;;;294      *     @arg APBPeriph_UART1_CLOCK
;;;295      *     @arg APBPeriph_UART2_CLOCK
;;;296      *     @arg APBPeriph_GPIO_CLOCK
;;;297      *     @arg APBPeriph_ADC_CLOCK
;;;298      *     @arg APBPeriph_I2S0_CLOCK
;;;299      *     @arg APBPeriph_I2S1_CLOCK
;;;300      *     @arg APBPeriph_CODEC_CLOCK
;;;301      * @param  NewState: new state of the specified peripheral clock.
;;;302      *   This parameter can be: ENABLE or DISABLE.
;;;303      * @retval None
;;;304      */
;;;305    void RCC_PeriClockConfig(uint32_t APBPeriph_Clock, FunctionalState NewState)
;;;306    {
        0x0080eb28:    b530        0.      PUSH     {r4,r5,lr}
        0x0080eb2a:    f44f74a0    O..t    MOV      r4,#0x140
        0x0080eb2e:    0623        #.      LSLS     r3,r4,#24
        0x0080eb30:    f3c07241    ..Ar    UBFX     r2,r0,#29,#2
        0x0080eb34:    f44f7590    O..u    MOV      r5,#0x120
        0x0080eb38:    2901        .)      CMP      r1,#1
;;; .\..\..\..\src\mcu\peripheral\rtl876x_rcc.c (306)
        0x0080eb3a:    d006        ..      BEQ      0x80eb4a ; RCC_PeriClockConfig + 34
        0x0080eb3c:    42a8        .B      CMP      r0,r5
        0x0080eb3e:    d01e        ..      BEQ      0x80eb7e ; RCC_PeriClockConfig + 86
        0x0080eb40:    42a0        .B      CMP      r0,r4
        0x0080eb42:    d01c        ..      BEQ      0x80eb7e ; RCC_PeriClockConfig + 86
        0x0080eb44:    2810        .(      CMP      r0,#0x10
        0x0080eb46:    d01a        ..      BEQ      0x80eb7e ; RCC_PeriClockConfig + 86
        0x0080eb48:    e005        ..      B        0x80eb56 ; RCC_PeriClockConfig + 46
;;;307        /* Check the parameters */
;;;308        assert_param(IS_APB_PERIPH_CLOCK(APBPeriph_Clock));
;;;309        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;310    
;;;311        uint32_t clkRegOff = ((APBPeriph_Clock & (0x03 << 29)) >> 29);
;;;312    
;;;313        /* Special register handle */
;;;314        if (NewState == ENABLE)
;;;315        {
;;;316            if ((APBPeriph_Clock == APBPeriph_I2S0_CLOCK) || ((APBPeriph_Clock == APBPeriph_I2S1_CLOCK)) ||
        0x0080eb4a:    42a8        .B      CMP      r0,r5
        0x0080eb4c:    d013        ..      BEQ      0x80eb76 ; RCC_PeriClockConfig + 78
        0x0080eb4e:    42a0        .B      CMP      r0,r4
        0x0080eb50:    d011        ..      BEQ      0x80eb76 ; RCC_PeriClockConfig + 78
;;;317                (APBPeriph_Clock == APBPeriph_CODEC_CLOCK))
        0x0080eb52:    2810        .(      CMP      r0,#0x10
        0x0080eb54:    d00f        ..      BEQ      0x80eb76 ; RCC_PeriClockConfig + 78
        0x0080eb56:    2901        .)      CMP      r1,#1
        0x0080eb58:    ea4f0182    O...    LSL      r1,r2,#2
        0x0080eb5c:    f1014180    ...A    ADD      r1,r1,#0x40000000
        0x0080eb60:    f02040c0     ..@    BIC      r0,r0,#0x60000000
        0x0080eb64:    f8d1222c    ..,"    LDR      r2,[r1,#0x22c]
        0x0080eb68:    d00f        ..      BEQ      0x80eb8a ; RCC_PeriClockConfig + 98
        0x0080eb6a:    4382        .C      BICS     r2,r2,r0
        0x0080eb6c:    ea220040    ".@.    BIC      r0,r2,r0,LSL #1
        0x0080eb70:    f8c1022c    ..,.    STR      r0,[r1,#0x22c]
        0x0080eb74:    bd30        0.      POP      {r4,r5,pc}
;;;318            {
;;;319                SYSBLKCTRL->u_220 |= APBPeriph_Clock;
        0x0080eb76:    f8d31220    .. .    LDR      r1,[r3,#0x220]
        0x0080eb7a:    4301        .C      ORRS     r1,r1,r0
;;;320                return;
        0x0080eb7c:    e002        ..      B        0x80eb84 ; RCC_PeriClockConfig + 92
;;;321            }
;;;322        }
;;;323        else
;;;324        {
;;;325            if ((APBPeriph_Clock == APBPeriph_I2S0_CLOCK) || ((APBPeriph_Clock == APBPeriph_I2S1_CLOCK)) ||
;;;326                (APBPeriph_Clock == APBPeriph_CODEC_CLOCK))
;;;327            {
;;;328                SYSBLKCTRL->u_220 &= ~(APBPeriph_Clock);
        0x0080eb7e:    f8d31220    .. .    LDR      r1,[r3,#0x220]
        0x0080eb82:    4381        .C      BICS     r1,r1,r0
        0x0080eb84:    f8c31220    .. .    STR      r1,[r3,#0x220]
        0x0080eb88:    bd30        0.      POP      {r4,r5,pc}
;;;329                return;
;;;330            }
;;;331        }
;;;332    
;;;333        APBPeriph_Clock &= (~(0x03 << 29));
;;;334    
;;;335        if (NewState == ENABLE)
;;;336        {
;;;337            //enable peripheral clock
;;;338            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) |= APBPeriph_Clock;
        0x0080eb8a:    4302        .C      ORRS     r2,r2,r0
;;;339            //enable peripheral clock in sleep mode
;;;340            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) |= (APBPeriph_Clock << 1);
        0x0080eb8c:    ea420040    B.@.    ORR      r0,r2,r0,LSL #1
        0x0080eb90:    e7ee        ..      B        0x80eb70 ; RCC_PeriClockConfig + 72
    RCC_PeriFunctionConfig
        0x0080eb92:    f3c06281    ...b    UBFX     r2,r0,#26,#2
        0x0080eb96:    f04f4380    O..C    MOV      r3,#0x40000000
        0x0080eb9a:    2901        .)      CMP      r1,#1
;;;341        }
;;;342        else
;;;343        {
;;;344            //disable peripheral clock
;;;345            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) &= (~APBPeriph_Clock);
;;;346            //disable peripheral clock in sleep mode
;;;347            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) &= (~(APBPeriph_Clock << 1));
;;;348        }
;;;349    
;;;350        return;
;;;351    }
;;;352    
;;;353    /**
;;;354      * @brief  Enables or disables the APB peripheral clock.
;;;355      * @param  APBPeriph: specifies the APB peripheral to gates its clock.
;;;356      *      this parameter can be one of the following values:
;;;357      *     @arg APBPeriph_TIMER
;;;358      *     @arg APBPeriph_GDMA
;;;359      *     @arg APBPeriph_LCD
;;;360      *     @arg APBPeriph_SPI2W
;;;361      *     @arg APBPeriph_KEYSCAN
;;;362      *     @arg APBPeriph_QDEC
;;;363      *     @arg APBPeriph_I2C1
;;;364      *     @arg APBPeriph_I2C0
;;;365      *     @arg APBPeriph_IR
;;;366      *     @arg APBPeriph_SPI1
;;;367      *     @arg APBPeriph_SPI0
;;;368      *     @arg APBPeriph_UART0
;;;369      *     @arg APBPeriph_UART1
;;;370      *     @arg APBPeriph_UART2
;;;371      *     @arg APBPeriph_GPIO
;;;372      *     @arg APBPeriph_ADC
;;;373      *     @arg APBPeriph_I2S0
;;;374      *     @arg APBPeriph_I2S1
;;;375      *     @arg APBPeriph_CODEC
;;;376      * @param  NewState: new state of the specified peripheral clock.
;;;377      *   This parameter can be: ENABLE or DISABLE.
;;;378      * @retval None
;;;379      */
;;;380    void RCC_PeriFunctionConfig(uint32_t APBPeriph, FunctionalState NewState)
;;;381    {
        0x0080eb9c:    d006        ..      BEQ      0x80ebac ; RCC_PeriFunctionConfig + 26
        0x0080eb9e:    2802        .(      CMP      r0,#2
        0x0080eba0:    d01c        ..      BEQ      0x80ebdc ; RCC_PeriFunctionConfig + 74
        0x0080eba2:    2804        .(      CMP      r0,#4
        0x0080eba4:    d01a        ..      BEQ      0x80ebdc ; RCC_PeriFunctionConfig + 74
        0x0080eba6:    2801        .(      CMP      r0,#1
        0x0080eba8:    d018        ..      BEQ      0x80ebdc ; RCC_PeriFunctionConfig + 74
        0x0080ebaa:    e005        ..      B        0x80ebb8 ; RCC_PeriFunctionConfig + 38
;;;382        /* Check the parameters */
;;;383        assert_param(IS_APB_PERIPH(APBPeriph));
;;;384        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;385    
;;;386        uint32_t apbRegOff = ((APBPeriph & (0x03 << 26)) >> 26);
;;;387    
;;;388        /* Special register handle */
;;;389        if (NewState == ENABLE)
;;;390        {
;;;391            if ((APBPeriph == APBPeriph_I2S0) || ((APBPeriph == APBPeriph_I2S1)) ||
        0x0080ebac:    2802        .(      CMP      r0,#2
        0x0080ebae:    d011        ..      BEQ      0x80ebd4 ; RCC_PeriFunctionConfig + 66
        0x0080ebb0:    2804        .(      CMP      r0,#4
        0x0080ebb2:    d00f        ..      BEQ      0x80ebd4 ; RCC_PeriFunctionConfig + 66
;;;392                (APBPeriph == APBPeriph_CODEC))
        0x0080ebb4:    2801        .(      CMP      r0,#1
        0x0080ebb6:    d00d        ..      BEQ      0x80ebd4 ; RCC_PeriFunctionConfig + 66
        0x0080ebb8:    2901        .)      CMP      r1,#1
        0x0080ebba:    ea4f0182    O...    LSL      r1,r2,#2
        0x0080ebbe:    f1014180    ...A    ADD      r1,r1,#0x40000000
        0x0080ebc2:    f0206040     .@`    BIC      r0,r0,#0xc000000
        0x0080ebc6:    f8d12210    ..."    LDR      r2,[r1,#0x210]
        0x0080ebca:    d00d        ..      BEQ      0x80ebe8 ; RCC_PeriFunctionConfig + 86
        0x0080ebcc:    4382        .C      BICS     r2,r2,r0
        0x0080ebce:    f8c12210    ..."    STR      r2,[r1,#0x210]
        0x0080ebd2:    4770        pG      BX       lr
;;;393            {
;;;394                SYSBLKCTRL->u_220 |= APBPeriph;
        0x0080ebd4:    f8d31220    .. .    LDR      r1,[r3,#0x220]
        0x0080ebd8:    4301        .C      ORRS     r1,r1,r0
;;;395                return;
        0x0080ebda:    e002        ..      B        0x80ebe2 ; RCC_PeriFunctionConfig + 80
;;;396            }
;;;397        }
;;;398        else
;;;399        {
;;;400            if ((APBPeriph == APBPeriph_I2S0) || ((APBPeriph == APBPeriph_I2S1)) ||
;;;401                (APBPeriph == APBPeriph_CODEC))
;;;402            {
;;;403                SYSBLKCTRL->u_220 &= ~(APBPeriph);
        0x0080ebdc:    f8d31220    .. .    LDR      r1,[r3,#0x220]
        0x0080ebe0:    4381        .C      BICS     r1,r1,r0
        0x0080ebe2:    f8c31220    .. .    STR      r1,[r3,#0x220]
        0x0080ebe6:    4770        pG      BX       lr
;;;404                return;
;;;405            }
;;;406        }
;;;407    
;;;408        /* clear flag */
;;;409        APBPeriph &= (~(0x03 << 26));
;;;410    
;;;411        if (NewState == ENABLE)
;;;412        {
;;;413            //enable peripheral
;;;414            *((uint32_t *)(&(SYSBLKCTRL->u_210.SOC_FUNC_EN)) + apbRegOff) |= APBPeriph;
        0x0080ebe8:    4302        .C      ORRS     r2,r2,r0
        0x0080ebea:    e7f0        ..      B        0x80ebce ; RCC_PeriFunctionConfig + 60
    $d
        0x0080ebec:    60010000    ...`    DCD    1610678272
        0x0080ebf0:    20004000    .@.     DCD    536887296
        0x0080ebf4:    40013000    .0.@    DCD    1073819648
        0x0080ebf8:    40013400    .4.@    DCD    1073820672
        0x0080ebfc:    40015000    .P.@    DCD    1073827840
        0x0080ec00:    40015400    .T.@    DCD    1073828864
        0x0080ec04:    40012000    . .@    DCD    1073815552
        0x0080ec08:    40011000    ...@    DCD    1073811456
    $t
    .text
    UART_Init
;;; .\..\..\..\src\mcu\peripheral\rtl876x_uart.c
;;;30     {
        0x0080ec0c:    b510        ..      PUSH     {r4,lr}
;;;31         assert_param(IS_UART_PERIPH(UARTx));
;;;32         assert_param(IS_UART_WORD_LENGTH(UART_InitStruct->wordLen));
;;;33         assert_param(IS_UART_PARITY(UART_InitStruct->parity));
;;;34         assert_param(IS_UART_STOPBITS(UART_InitStruct->stopBits));
;;;35         assert_param(IS_UART_AUTO_FLOW_CTRL(UART_InitStruct->autoFlowCtrl));
;;;36         assert_param(IS_UART_DMA_CFG(UART_InitStruct->dmaEn));
;;;37         assert_param(IS_UART_RX_FIFO_TRIGGER_LEVEL(UART_InitStruct->rxTriggerLevel));
;;;38         assert_param(IS_UART_IDLE_TIME(UART_InitStruct->idle_time));
;;;39     
;;;40         //clear DLAB bit
;;;41         UARTx->LCR &= LCR_DLAB_Reset;
        0x0080ec0e:    68c2        .h      LDR      r2,[r0,#0xc]
        0x0080ec10:    f0220280    "...    BIC      r2,r2,#0x80
        0x0080ec14:    60c2        .`      STR      r2,[r0,#0xc]
;;;42         //disable all interrupt
;;;43         UARTx->DLH_INTCR = 0x00;
        0x0080ec16:    2200        ."      MOVS     r2,#0
        0x0080ec18:    6042        B`      STR      r2,[r0,#4]
;;;44     
;;;45         //read to clear Line Status Reg
;;;46         UARTx->LSR;
        0x0080ec1a:    6942        Bi      LDR      r2,[r0,#0x14]
;;;47         //clear FIFO
;;;48         UARTx->INTID_FCR |= (FCR_CLEAR_RX_FIFO_Set | FCR_CLEAR_TX_FIFO_Set);
        0x0080ec1c:    6882        .h      LDR      r2,[r0,#8]
        0x0080ec1e:    f0420206    B...    ORR      r2,r2,#6
        0x0080ec22:    6082        .`      STR      r2,[r0,#8]
;;;49     
;;;50         //set baudrate, firstly set DLAB bit
;;;51         UARTx->LCR |= LCR_DLAB_Set;
        0x0080ec24:    68c2        .h      LDR      r2,[r0,#0xc]
        0x0080ec26:    f0420280    B...    ORR      r2,r2,#0x80
        0x0080ec2a:    60c2        .`      STR      r2,[r0,#0xc]
;;;52         //set calibration parameters(OVSR)
;;;53         UARTx->STSR &= ~0xF0;
        0x0080ec2c:    6a02        .j      LDR      r2,[r0,#0x20]
        0x0080ec2e:    f02202f0    "...    BIC      r2,r2,#0xf0
        0x0080ec32:    6202        .b      STR      r2,[r0,#0x20]
;;;54         UARTx->STSR |= (UART_InitStruct->ovsr << 4);
        0x0080ec34:    6a02        .j      LDR      r2,[r0,#0x20]
        0x0080ec36:    888b        ..      LDRH     r3,[r1,#4]
        0x0080ec38:    ea421203    B...    ORR      r2,r2,r3,LSL #4
        0x0080ec3c:    6202        .b      STR      r2,[r0,#0x20]
;;;55         //set calibration parameters(OVSR_adj)
;;;56         UARTx->SPR &= (~(0x7ff << 16));
        0x0080ec3e:    69c2        .i      LDR      r2,[r0,#0x1c]
        0x0080ec40:    4b64        dK      LDR      r3,[pc,#400] ; [0x80edd4] = 0xf800ffff
        0x0080ec42:    401a        .@      ANDS     r2,r2,r3
        0x0080ec44:    61c2        .a      STR      r2,[r0,#0x1c]
;;;57         UARTx->SPR |= (UART_InitStruct->ovsr_adj << 16);
        0x0080ec46:    69c2        .i      LDR      r2,[r0,#0x1c]
        0x0080ec48:    880b        ..      LDRH     r3,[r1,#0]
        0x0080ec4a:    ea424203    B..B    ORR      r2,r2,r3,LSL #16
        0x0080ec4e:    61c2        .a      STR      r2,[r0,#0x1c]
;;;58         //set DLL and DLH
;;;59         UARTx->DLL = (UART_InitStruct->div & 0x00FF);
        0x0080ec50:    788a        .x      LDRB     r2,[r1,#2]
        0x0080ec52:    6002        .`      STR      r2,[r0,#0]
;;;60         UARTx->DLH_INTCR = ((UART_InitStruct->div & 0xFF00) >> 8);
        0x0080ec54:    884a        J.      LDRH     r2,[r1,#2]
        0x0080ec56:    0a12        ..      LSRS     r2,r2,#8
        0x0080ec58:    6042        B`      STR      r2,[r0,#4]
;;;61         //after set baudrate, clear DLAB bit
;;;62         UARTx->LCR &= LCR_DLAB_Reset;
        0x0080ec5a:    68c2        .h      LDR      r2,[r0,#0xc]
        0x0080ec5c:    f0220280    "...    BIC      r2,r2,#0x80
        0x0080ec60:    60c2        .`      STR      r2,[r0,#0xc]
;;;63     
;;;64         //set LCR reg
;;;65         UARTx->LCR = (UART_InitStruct->parity | UART_InitStruct->stopBits | UART_InitStruct->wordLen);
        0x0080ec62:    890a        ..      LDRH     r2,[r1,#8]
        0x0080ec64:    894b        K.      LDRH     r3,[r1,#0xa]
        0x0080ec66:    431a        .C      ORRS     r2,r2,r3
        0x0080ec68:    88cb        ..      LDRH     r3,[r1,#6]
        0x0080ec6a:    431a        .C      ORRS     r2,r2,r3
        0x0080ec6c:    60c2        .`      STR      r2,[r0,#0xc]
;;;66         //set FCR reg, FIFO must enable
;;;67         UARTx->INTID_FCR = ((1 << 0) | UART_InitStruct->rxTriggerLevel << 8 | UART_InitStruct->dmaEn);
        0x0080ec6e:    89ca        ..      LDRH     r2,[r1,#0xe]
        0x0080ec70:    2301        .#      MOVS     r3,#1
        0x0080ec72:    eb032202    ..."    ADD      r2,r3,r2,LSL #8
        0x0080ec76:    8a0b        ..      LDRH     r3,[r1,#0x10]
        0x0080ec78:    431a        .C      ORRS     r2,r2,r3
        0x0080ec7a:    6082        .`      STR      r2,[r0,#8]
;;;68     
;;;69         /* auto flow control */
;;;70         UARTx->MCR &= (~((1 << 5) | (1 << 1)));
        0x0080ec7c:    6902        .i      LDR      r2,[r0,#0x10]
        0x0080ec7e:    f0220222    ".".    BIC      r2,r2,#0x22
        0x0080ec82:    6102        .a      STR      r2,[r0,#0x10]
;;;71         UARTx->MCR |= UART_InitStruct->autoFlowCtrl;
        0x0080ec84:    6902        .i      LDR      r2,[r0,#0x10]
        0x0080ec86:    898b        ..      LDRH     r3,[r1,#0xc]
        0x0080ec88:    431a        .C      ORRS     r2,r2,r3
        0x0080ec8a:    6102        .a      STR      r2,[r0,#0x10]
;;;72     
;;;73         /* set rx idle time */
;;;74         UARTx->RX_IDLE_INTTCR = (UART_InitStruct->idle_time);
        0x0080ec8c:    8a4a        J.      LDRH     r2,[r1,#0x12]
        0x0080ec8e:    6402        .d      STR      r2,[r0,#0x40]
;;;75     
;;;76         if (UART_InitStruct->dmaEn == UART_DMA_ENABLE)
        0x0080ec90:    8a0a        ..      LDRH     r2,[r1,#0x10]
        0x0080ec92:    2a08        .*      CMP      r2,#8
        0x0080ec94:    d11a        ..      BNE      0x80eccc ; UART_Init + 192
;;;77         {
;;;78             /* Config UART Tx dma parameter */
;;;79             if (UART_InitStruct->TxDmaEn != DISABLE)
        0x0080ec96:    8aca        ..      LDRH     r2,[r1,#0x16]
        0x0080ec98:    b152        R.      CBZ      r2,0x80ecb0 ; UART_Init + 164
;;;80             {
;;;81                 /* Mask uart TX threshold value */
;;;82                 UARTx->MISCR &= ~(0x1f << 3);
        0x0080ec9a:    6a82        .j      LDR      r2,[r0,#0x28]
        0x0080ec9c:    f02202f8    "...    BIC      r2,r2,#0xf8
        0x0080eca0:    6282        .b      STR      r2,[r0,#0x28]
;;;83                 UARTx->MISCR |= ((UART_InitStruct->TxWaterlevel) << 3) | BIT(1);
        0x0080eca2:    6a82        .j      LDR      r2,[r0,#0x28]
        0x0080eca4:    7d0b        .}      LDRB     r3,[r1,#0x14]
        0x0080eca6:    2402        .$      MOVS     r4,#2
        0x0080eca8:    ea4403c3    D...    ORR      r3,r4,r3,LSL #3
        0x0080ecac:    431a        .C      ORRS     r2,r2,r3
        0x0080ecae:    6282        .b      STR      r2,[r0,#0x28]
;;;84             }
;;;85             /* Config UART Rx dma parameter */
;;;86             if (UART_InitStruct->RxDmaEn != DISABLE)
        0x0080ecb0:    8b0a        ..      LDRH     r2,[r1,#0x18]
        0x0080ecb2:    2a00        .*      CMP      r2,#0
        0x0080ecb4:    d00a        ..      BEQ      0x80eccc ; UART_Init + 192
;;;87             {
;;;88                 /* Mask uart RX threshold value */
;;;89                 UARTx->MISCR &= ~(0x3f << 8);
        0x0080ecb6:    6a82        .j      LDR      r2,[r0,#0x28]
        0x0080ecb8:    f422527c    ".|R    BIC      r2,r2,#0x3f00
        0x0080ecbc:    6282        .b      STR      r2,[r0,#0x28]
;;;90                 UARTx->MISCR |= (UART_InitStruct->RxWaterlevel << 8) | BIT(2);
        0x0080ecbe:    6a82        .j      LDR      r2,[r0,#0x28]
        0x0080ecc0:    7d49        I}      LDRB     r1,[r1,#0x15]
        0x0080ecc2:    2304        .#      MOVS     r3,#4
        0x0080ecc4:    ea432101    C..!    ORR      r1,r3,r1,LSL #8
        0x0080ecc8:    430a        .C      ORRS     r2,r2,r1
        0x0080ecca:    6282        .b      STR      r2,[r0,#0x28]
;;;91             }
;;;92         }
;;;93     
;;;94         return;
;;;95     }
        0x0080eccc:    bd10        ..      POP      {r4,pc}
    UART_DeInit
        0x0080ecce:    4942        BI      LDR      r1,[pc,#264] ; [0x80edd8] = 0x40012000
        0x0080ecd0:    4288        .B      CMP      r0,r1
;;;96     
;;;97     /**
;;;98       * @brief  Deinitializes the UART peripheral registers to their default reset values(turn off UART clock).
;;;99       * @param  UARTx: selected UART peripheral.
;;;100      * @retval None
;;;101      */
;;;102    void UART_DeInit(UART_TypeDef *UARTx)
;;;103    {
        0x0080ecd2:    d103        ..      BNE      0x80ecdc ; UART_DeInit + 14
;;;104        assert_param(IS_UART_PERIPH(UARTx));
;;;105    
;;;106        if (UARTx == UART)
;;;107        {
;;;108            RCC_PeriphClockCmd(APBPeriph_UART0, APBPeriph_UART0_CLOCK, DISABLE);
        0x0080ecd4:    2200        ."      MOVS     r2,#0
        0x0080ecd6:    4941        AI      LDR      r1,[pc,#260] ; [0x80eddc] = 0x40000001
        0x0080ecd8:    4841        AH      LDR      r0,[pc,#260] ; [0x80ede0] = 0x8000001
        0x0080ecda:    e00d        ..      B        0x80ecf8 ; UART_DeInit + 42
;;;109        }
;;;110        else if (UARTx == UART1)
        0x0080ecdc:    4941        AI      LDR      r1,[pc,#260] ; [0x80ede4] = 0x40011000
        0x0080ecde:    4288        .B      CMP      r0,r1
        0x0080ece0:    d103        ..      BNE      0x80ecea ; UART_DeInit + 28
;;;111        {
;;;112            RCC_PeriphClockCmd(APBPeriph_UART1, APBPeriph_UART1_CLOCK, DISABLE);
        0x0080ece2:    2200        ."      MOVS     r2,#0
        0x0080ece4:    4940        @I      LDR      r1,[pc,#256] ; [0x80ede8] = 0x20001000
        0x0080ece6:    1480        ..      ASRS     r0,r0,#18
        0x0080ece8:    e006        ..      B        0x80ecf8 ; UART_DeInit + 42
;;;113        }
;;;114        else if (UARTx == UART2)
        0x0080ecea:    4940        @I      LDR      r1,[pc,#256] ; [0x80edec] = 0x40024000
        0x0080ecec:    4288        .B      CMP      r0,r1
        0x0080ecee:    d105        ..      BNE      0x80ecfc ; UART_DeInit + 46
;;;115        {
;;;116            RCC_PeriphClockCmd(APBPeriph_UART2, APBPeriph_UART2_CLOCK, DISABLE);
        0x0080ecf0:    483b        ;H      LDR      r0,[pc,#236] ; [0x80ede0] = 0x8000001
        0x0080ecf2:    2200        ."      MOVS     r2,#0
        0x0080ecf4:    493e        >I      LDR      r1,[pc,#248] ; [0x80edf0] = 0x20000400
        0x0080ecf6:    1c40        @.      ADDS     r0,r0,#1
        0x0080ecf8:    f7ffbddc    ....    B.W      RCC_PeriphClockCmd ; 0x80e8b4
;;;117        }
;;;118        return;
;;;119    }
        0x0080ecfc:    4770        pG      BX       lr
    UART_StructInit
;;;120    
;;;121    /**
;;;122      * @brief  Fills each UART_InitStruct member with its default value.
;;;123      * @param  UART_InitStruct: pointer to an UART_InitTypeDef structure which will be initialized.
;;;124      * @retval None
;;;125      */
;;;126    void UART_StructInit(UART_InitTypeDef *UART_InitStruct)
;;;127    {
;;;128        //115200 default
;;;129        UART_InitStruct->div            = 20;
        0x0080ecfe:    2114        .!      MOVS     r1,#0x14
        0x0080ed00:    8041        A.      STRH     r1,[r0,#2]
;;;130        UART_InitStruct->ovsr           = 12;
        0x0080ed02:    210c        .!      MOVS     r1,#0xc
        0x0080ed04:    8081        ..      STRH     r1,[r0,#4]
;;;131        UART_InitStruct->ovsr_adj       = 0x252;
        0x0080ed06:    f2402152    @.R!    MOV      r1,#0x252
        0x0080ed0a:    8001        ..      STRH     r1,[r0,#0]
;;;132    
;;;133        UART_InitStruct->parity         = UART_PARITY_NO_PARTY;
        0x0080ed0c:    2100        .!      MOVS     r1,#0
        0x0080ed0e:    8101        ..      STRH     r1,[r0,#8]
;;;134        UART_InitStruct->stopBits       = UART_STOP_BITS_1;
        0x0080ed10:    8141        A.      STRH     r1,[r0,#0xa]
;;;135        UART_InitStruct->wordLen        = UART_WROD_LENGTH_8BIT;
        0x0080ed12:    2201        ."      MOVS     r2,#1
        0x0080ed14:    80c2        ..      STRH     r2,[r0,#6]
;;;136        UART_InitStruct->dmaEn          = UART_DMA_DISABLE;
        0x0080ed16:    8201        ..      STRH     r1,[r0,#0x10]
;;;137        UART_InitStruct->autoFlowCtrl   = UART_AUTO_FLOW_CTRL_DIS;
        0x0080ed18:    8181        ..      STRH     r1,[r0,#0xc]
;;;138        UART_InitStruct->rxTriggerLevel = 16;                       //1~29
        0x0080ed1a:    2310        .#      MOVS     r3,#0x10
        0x0080ed1c:    81c3        ..      STRH     r3,[r0,#0xe]
;;;139        UART_InitStruct->idle_time      = UART_RX_IDLE_2BYTE;      //idle interrupt wait time
        0x0080ed1e:    8242        B.      STRH     r2,[r0,#0x12]
;;;140        UART_InitStruct->TxWaterlevel   = 15;     //Better to equal TX_FIFO_SIZE(16)- GDMA_MSize
        0x0080ed20:    230f        .#      MOVS     r3,#0xf
        0x0080ed22:    7503        .u      STRB     r3,[r0,#0x14]
;;;141        UART_InitStruct->RxWaterlevel   = 1;      //Better to equal GDMA_MSize
        0x0080ed24:    7542        Bu      STRB     r2,[r0,#0x15]
;;;142        UART_InitStruct->TxDmaEn   = DISABLE;
        0x0080ed26:    82c1        ..      STRH     r1,[r0,#0x16]
;;;143        UART_InitStruct->RxDmaEn   = DISABLE;
        0x0080ed28:    8301        ..      STRH     r1,[r0,#0x18]
;;;144        return;
;;;145    }
        0x0080ed2a:    4770        pG      BX       lr
    UART_ReceiveData
;;;146    
;;;147    /**
;;;148      * @brief  Receive data from rx FIFO.
;;;149      * @param  UARTx: selected UART peripheral.
;;;150      * @param[out]  outBuf: buffer to save data read from UART FIFO.
;;;151      * @param  count: number of data to be read.
;;;152      * @retval None
;;;153      */
;;;154    void UART_ReceiveData(UART_TypeDef *UARTx, uint8_t *outBuf, uint16_t count)
;;;155    {
;;;156        /* Check the parameters */
;;;157        assert_param(IS_UART_PERIPH(UARTx));
;;;158    
;;;159        while (count--)
;;;160        {
;;;161            *outBuf++ = (uint8_t)UARTx->RB_THR;
        0x0080ed2c:    e002        ..      B        0x80ed34 ; UART_ReceiveData + 8
        0x0080ed2e:    6a43        Cj      LDR      r3,[r0,#0x24]
        0x0080ed30:    f8013b01    ...;    STRB     r3,[r1],#1
;;; .\..\..\..\src\mcu\peripheral\rtl876x_uart.c (159)
        0x0080ed34:    1e52        R.      SUBS     r2,r2,#1
        0x0080ed36:    b292        ..      UXTH     r2,r2
        0x0080ed38:    d2f9        ..      BCS      0x80ed2e ; UART_ReceiveData + 2
;;;160        {
;;;161            *outBuf++ = (uint8_t)UARTx->RB_THR;
;;;162        }
;;;163    
;;;164        return;
;;;165    }
        0x0080ed3a:    4770        pG      BX       lr
    UART_SendData
;;;166    
;;;167    /**
;;;168      * @brief  Send data to tx FIFO.
;;;169      * @param  UARTx: selected UART peripheral.
;;;170      * @param  inBuf: buffer to be written to Tx FIFO.
;;;171      * @param  count: number of data to be written.
;;;172      * @retval None
;;;173      */
;;;174    void UART_SendData(UART_TypeDef *UARTx, const uint8_t *inBuf, uint16_t count)
;;;175    {
;;;176        /* Check the parameters */
;;;177        assert_param(IS_UART_PERIPH(UARTx));
;;;178    
;;;179        while (count--)
;;;180        {
;;;181            UARTx->RB_THR = *inBuf++;
        0x0080ed3c:    e002        ..      B        0x80ed44 ; UART_SendData + 8
        0x0080ed3e:    f8113b01    ...;    LDRB     r3,[r1],#1
        0x0080ed42:    6243        Cb      STR      r3,[r0,#0x24]
;;; .\..\..\..\src\mcu\peripheral\rtl876x_uart.c (179)
        0x0080ed44:    1e52        R.      SUBS     r2,r2,#1
        0x0080ed46:    b292        ..      UXTH     r2,r2
        0x0080ed48:    d2f9        ..      BCS      0x80ed3e ; UART_SendData + 2
;;;180        {
;;;181            UARTx->RB_THR = *inBuf++;
;;;182        }
;;;183    
;;;184        return;
;;;185    }
        0x0080ed4a:    4770        pG      BX       lr
    UART_INTConfig
;;;186    
;;;187    /**
;;;188      * @brief  Enables or disables the specified UART interrupts.
;;;189      * @param  UARTx: selected UARTx peripheral.
;;;190      * @param  UART_IT: specifies the UART interrupts sources to be enabled or disabled.
;;;191      *   This parameter can be any combination of the following values:
;;;192      *     @arg UART_INT_RD_AVA: enable Rx data avaliable interrupt.
;;;193      *     @arg UART_INT_FIFO_EMPTY: enable FIFO empty interrupt.
;;;194      *     @arg UART_INT_LINE_STS: enable line status interrupt.
;;;195      *     @arg UART_INT_MODEM_STS: enable modem status interrupt.
;;;196      * @param  NewState: new state of the specified UART interrupts.
;;;197      *   This parameter can be: ENABLE or DISABLE.
;;;198      * @retval None
;;;199      */
;;;200    void UART_INTConfig(UART_TypeDef *UARTx, uint32_t UART_IT, FunctionalState newState)
;;;201    {
;;;202        /* Check the parameters */
;;;203        assert_param(IS_UART_PERIPH(UARTx));
;;;204        assert_param(IS_FUNCTIONAL_STATE(newState));
;;;205        assert_param(IS_UART_IT(UART_IT));
;;;206    
;;;207        if (UART_IT & UART_INT_IDLE)
        0x0080ed4c:    060b        ..      LSLS     r3,r1,#24
;;; .\..\..\..\src\mcu\peripheral\rtl876x_uart.c (201)
        0x0080ed4e:    d50d        ..      BPL      0x80ed6c ; UART_INTConfig + 32
;;;202        /* Check the parameters */
;;;203        assert_param(IS_UART_PERIPH(UARTx));
;;;204        assert_param(IS_FUNCTIONAL_STATE(newState));
;;;205        assert_param(IS_UART_IT(UART_IT));
;;;206    
;;;207        if (UART_IT & UART_INT_IDLE)
;;;208        {
;;;209            if (newState == ENABLE)
        0x0080ed50:    2a01        .*      CMP      r2,#1
        0x0080ed52:    d013        ..      BEQ      0x80ed7c ; UART_INTConfig + 48
;;;210            {
;;;211                UARTx->STSR  |= BIT3;
;;;212                UARTx->STSR  &= (~BIT3);
;;;213                UARTx->RXIDLE_INTCR |= BIT0;
;;;214                UARTx->RX_IDLE_INTTCR |= BIT31;
;;;215            }
;;;216            else
;;;217            {
;;;218                UARTx->RX_IDLE_INTTCR &= (~BIT31);
        0x0080ed54:    6c03        .l      LDR      r3,[r0,#0x40]
        0x0080ed56:    f0234300    #..C    BIC      r3,r3,#0x80000000
        0x0080ed5a:    6403        .d      STR      r3,[r0,#0x40]
;;;219                UARTx->RX_IDLE_SR |= BIT0;
        0x0080ed5c:    6c43        Cl      LDR      r3,[r0,#0x44]
        0x0080ed5e:    f0430301    C...    ORR      r3,r3,#1
        0x0080ed62:    6443        Cd      STR      r3,[r0,#0x44]
;;;220                UARTx->RXIDLE_INTCR &= (~BIT0);
        0x0080ed64:    6c83        .l      LDR      r3,[r0,#0x48]
        0x0080ed66:    f0230301    #...    BIC      r3,r3,#1
        0x0080ed6a:    6483        .d      STR      r3,[r0,#0x48]
;;;221            }
;;;222        }
;;;223        if (UART_IT & 0xf)
        0x0080ed6c:    070b        ..      LSLS     r3,r1,#28
        0x0080ed6e:    d004        ..      BEQ      0x80ed7a ; UART_INTConfig + 46
;;;224        {
;;;225            if (newState == ENABLE)
        0x0080ed70:    2a01        .*      CMP      r2,#1
        0x0080ed72:    6842        Bh      LDR      r2,[r0,#4]
        0x0080ed74:    d013        ..      BEQ      0x80ed9e ; UART_INTConfig + 82
;;;226            {
;;;227                /* Enable the selected UARTx interrupts */
;;;228                UARTx->DLH_INTCR |= UART_IT;
;;;229            }
;;;230            else
;;;231            {
;;;232                /* Disable the selected UARTx interrupts */
;;;233                UARTx->DLH_INTCR &= (uint32_t)~UART_IT;
        0x0080ed76:    438a        .C      BICS     r2,r2,r1
        0x0080ed78:    6042        B`      STR      r2,[r0,#4]
;;;234            }
;;;235        }
;;;236        return;
;;;237    }
        0x0080ed7a:    4770        pG      BX       lr
        0x0080ed7c:    6a03        .j      LDR      r3,[r0,#0x20]
        0x0080ed7e:    f0430308    C...    ORR      r3,r3,#8
        0x0080ed82:    6203        .b      STR      r3,[r0,#0x20]
        0x0080ed84:    6a03        .j      LDR      r3,[r0,#0x20]
        0x0080ed86:    f0230308    #...    BIC      r3,r3,#8
        0x0080ed8a:    6203        .b      STR      r3,[r0,#0x20]
        0x0080ed8c:    6c83        .l      LDR      r3,[r0,#0x48]
        0x0080ed8e:    f0430301    C...    ORR      r3,r3,#1
        0x0080ed92:    6483        .d      STR      r3,[r0,#0x48]
        0x0080ed94:    6c03        .l      LDR      r3,[r0,#0x40]
        0x0080ed96:    f0434300    C..C    ORR      r3,r3,#0x80000000
        0x0080ed9a:    6403        .d      STR      r3,[r0,#0x40]
        0x0080ed9c:    e7e6        ..      B        0x80ed6c ; UART_INTConfig + 32
        0x0080ed9e:    430a        .C      ORRS     r2,r2,r1
        0x0080eda0:    e7ea        ..      B        0x80ed78 ; UART_INTConfig + 44
    UART_GetFlagState
;;;238    
;;;239    /**
;;;240      * @brief  Checks whether the specified UART flag is set or not.
;;;241      * @param  UARTx: selected UART peripheral.
;;;242      * @param  UART_FLAG: specifies the flag to check.
;;;243      *   This parameter can be one of the following values:
;;;244      *     @arg UART_FLAG_RX_DATA_RDY: rx data is avaliable.
;;;245      *     @arg UART_FLAG_RX_OVERRUN: rx overrun.
;;;246      *     @arg UART_FLAG_PARTY_ERR: parity error.
;;;247      *     @arg UART_FLAG_FRAME_ERR: UARTx frame error.
;;;248      *     @arg UART_FLAG_BREAK_ERR: UARTx break error.
;;;249      *     @arg UART_FLAG_THR_EMPTY: tx FIFO is empty.
;;;250      *     @arg UART_FLAG_THR_TSR_EMPTY: tx FIFO and tx shift reg are both empty.
;;;251      *     @arg UART_FLAG_RX_FIFO_ERR: rx FIFO error.
;;;252      *     @arg UART_FLAG_RX_IDLE.
;;;253      * @retval The new state of UART_FLAG (SET or RESET).
;;;254      */
;;;255    FlagStatus UART_GetFlagState(UART_TypeDef *UARTx, uint32_t UART_FLAG)
;;;256    {
        0x0080eda2:    4602        .F      MOV      r2,r0
        0x0080eda4:    2000        .       MOVS     r0,#0
        0x0080eda6:    f5b17f80    ....    CMP      r1,#0x100
        0x0080edaa:    d004        ..      BEQ      0x80edb6 ; UART_GetFlagState + 20
;;;257        FlagStatus bitstatus = RESET;
;;;258    
;;;259        /* Check the parameters */
;;;260        assert_param(IS_UART_PERIPH(UARTx));
;;;261        assert_param(IS_UART_GET_FLAG(UART_FLAG));
;;;262    
;;;263        if (UART_FLAG != UART_FLAG_RX_IDLE)
;;;264        {
;;;265            if (UARTx->LSR & UART_FLAG)
        0x0080edac:    6952        Ri      LDR      r2,[r2,#0x14]
        0x0080edae:    420a        .B      TST      r2,r1
        0x0080edb0:    d000        ..      BEQ      0x80edb4 ; UART_GetFlagState + 18
;;;266            {
;;;267                bitstatus = SET;
        0x0080edb2:    2001        .       MOVS     r0,#1
        0x0080edb4:    4770        pG      BX       lr
;;;268            }
;;;269        }
;;;270        else
;;;271        {
;;;272            if (UARTx->RX_IDLE_SR & BIT(0))
        0x0080edb6:    6c51        Ql      LDR      r1,[r2,#0x44]
        0x0080edb8:    07c9        ..      LSLS     r1,r1,#31
        0x0080edba:    d1fa        ..      BNE      0x80edb2 ; UART_GetFlagState + 16
;;;273            {
;;;274                bitstatus = SET;
;;;275            }
;;;276        }
;;;277        return bitstatus;
;;;278    
;;;279    }
        0x0080edbc:    4770        pG      BX       lr
    UART_LoopBackCmd
        0x0080edbe:    2901        .)      CMP      r1,#1
        0x0080edc0:    6901        .i      LDR      r1,[r0,#0x10]
;;;280    
;;;281    /**
;;;282      *@brief  UART loop back mode config.
;;;283      *@param  UARTx: selected UART peripheral.
;;;284      *@param  NewState: new state of the DMA Channelx.
;;;285      *   This parameter can be: ENABLE or DISABLE.
;;;286      *@retval None.
;;;287      */
;;;288    void UART_LoopBackCmd(UART_TypeDef *UARTx, FunctionalState NewState)
;;;289    {
        0x0080edc2:    d003        ..      BEQ      0x80edcc ; UART_LoopBackCmd + 14
        0x0080edc4:    f0210110    !...    BIC      r1,r1,#0x10
;;;290        assert_param(IS_UART_PERIPH(UARTx));
;;;291    
;;;292        if (NewState == ENABLE)
;;;293        {
;;;294            UARTx->MCR |= BIT4;
        0x0080edc8:    6101        .a      STR      r1,[r0,#0x10]
        0x0080edca:    4770        pG      BX       lr
        0x0080edcc:    f0410110    A...    ORR      r1,r1,#0x10
        0x0080edd0:    e7fa        ..      B        0x80edc8 ; UART_LoopBackCmd + 10
    $d
        0x0080edd2:    0000        ..      DCW    0
        0x0080edd4:    f800ffff    ....    DCD    4160815103
        0x0080edd8:    40012000    . .@    DCD    1073815552
        0x0080eddc:    40000001    ...@    DCD    1073741825
        0x0080ede0:    08000001    ....    DCD    134217729
        0x0080ede4:    40011000    ...@    DCD    1073811456
        0x0080ede8:    20001000    ...     DCD    536875008
        0x0080edec:    40024000    .@.@    DCD    1073889280
        0x0080edf0:    20000400    ...     DCD    536871936
    $t
    .text
    aes128_ecb_encrypt_buffer
;;; .\..\..\..\src\hw_aes\hw_aes.c
;;;45     {
        0x0080edf4:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0080edf8:    4688        .F      MOV      r8,r1
        0x0080edfa:    461f        .F      MOV      r7,r3
        0x0080edfc:    4615        .F      MOV      r5,r2
        0x0080edfe:    4606        .F      MOV      r6,r0
        0x0080ee00:    0799        ..      LSLS     r1,r3,#30
;;; .\..\..\..\src\hw_aes\hw_aes.c (45)
        0x0080ee02:    d002        ..      BEQ      0x80ee0a ; aes128_ecb_encrypt_buffer + 22
;;;46         bool ret;
;;;47         uint8_t *in = plaintext;
;;;48         uint8_t *out = encrypted;
;;;49     
;;;50         if (data_word_len % 4) { return false; }
        0x0080ee04:    2000        .       MOVS     r0,#0
        0x0080ee06:    e8bd81f0    ....    POP      {r4-r8,pc}
;;;51     
;;;52         for (int i = 0; i < data_word_len; i += 4)
        0x0080ee0a:    2400        .$      MOVS     r4,#0
        0x0080ee0c:    e009        ..      B        0x80ee22 ; aes128_ecb_encrypt_buffer + 46
        0x0080ee0e:    462a        *F      MOV      r2,r5
        0x0080ee10:    4641        AF      MOV      r1,r8
        0x0080ee12:    4630        0F      MOV      r0,r6
        0x0080ee14:    f7f9def7    ....    BL       aes128_ecb_encrypt ; 0x8c06
        0x0080ee18:    3510        .5      ADDS     r5,r5,#0x10
        0x0080ee1a:    3610        .6      ADDS     r6,r6,#0x10
        0x0080ee1c:    2800        .(      CMP      r0,#0
        0x0080ee1e:    d0f2        ..      BEQ      0x80ee06 ; aes128_ecb_encrypt_buffer + 18
        0x0080ee20:    1d24        $.      ADDS     r4,r4,#4
        0x0080ee22:    42bc        .B      CMP      r4,r7
        0x0080ee24:    d3f3        ..      BCC      0x80ee0e ; aes128_ecb_encrypt_buffer + 26
;;;53         {
;;;54             ret = aes128_ecb_encrypt(in, key, out);
;;;55     
;;;56             in += 16;
;;;57             out += 16;
;;;58     
;;;59             if (!ret) { break; }
;;;60         }
;;;61     
;;;62         return ret;
;;;63     }
        0x0080ee26:    e7ee        ..      B        0x80ee06 ; aes128_ecb_encrypt_buffer + 18
    aes128_ecb_decrypt_buffer
;;;64     
;;;65     bool aes128_ecb_decrypt_buffer(uint8_t *input, const uint8_t key[16], uint8_t *output,
;;;66                                    uint32_t data_word_len)
;;;67     {
        0x0080ee28:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0080ee2c:    4688        .F      MOV      r8,r1
        0x0080ee2e:    461f        .F      MOV      r7,r3
        0x0080ee30:    4615        .F      MOV      r5,r2
        0x0080ee32:    4606        .F      MOV      r6,r0
        0x0080ee34:    0799        ..      LSLS     r1,r3,#30
;;; .\..\..\..\src\hw_aes\hw_aes.c (67)
        0x0080ee36:    d001        ..      BEQ      0x80ee3c ; aes128_ecb_decrypt_buffer + 20
;;;68         bool ret;
;;;69         uint8_t *in = input;
;;;70         uint8_t *out = output;
;;;71     
;;;72         if (data_word_len % 4) { return false; }
        0x0080ee38:    2000        .       MOVS     r0,#0
        0x0080ee3a:    e7e4        ..      B        0x80ee06 ; aes128_ecb_encrypt_buffer + 18
;;;73     
;;;74         for (int i = 0; i < data_word_len; i += 4)
        0x0080ee3c:    2400        .$      MOVS     r4,#0
        0x0080ee3e:    e009        ..      B        0x80ee54 ; aes128_ecb_decrypt_buffer + 44
        0x0080ee40:    462a        *F      MOV      r2,r5
        0x0080ee42:    4641        AF      MOV      r1,r8
        0x0080ee44:    4630        0F      MOV      r0,r6
        0x0080ee46:    f7f9df0c    ....    BL       aes128_ecb_decrypt ; 0x8c62
        0x0080ee4a:    3510        .5      ADDS     r5,r5,#0x10
        0x0080ee4c:    3610        .6      ADDS     r6,r6,#0x10
        0x0080ee4e:    2800        .(      CMP      r0,#0
        0x0080ee50:    d0d9        ..      BEQ      0x80ee06 ; aes128_ecb_encrypt_buffer + 18
        0x0080ee52:    1d24        $.      ADDS     r4,r4,#4
        0x0080ee54:    42bc        .B      CMP      r4,r7
        0x0080ee56:    d3f3        ..      BCC      0x80ee40 ; aes128_ecb_decrypt_buffer + 24
;;;75         {
;;;76             ret = aes128_ecb_decrypt(in, key, out);
;;;77     
;;;78             in += 16;
;;;79             out += 16;
;;;80     
;;;81             if (!ret) { break; }
;;;82         }
;;;83     
;;;84         return ret;
;;;85     }
        0x0080ee58:    e7d5        ..      B        0x80ee06 ; aes128_ecb_encrypt_buffer + 18
    aes128_ecb_encrypt_msb2lsb_buffer
;;;86     
;;;87     bool aes128_ecb_encrypt_msb2lsb_buffer(uint8_t *plaintext, const uint8_t key[16],
;;;88                                            uint8_t *encrypted, uint32_t data_word_len)
;;;89     {
        0x0080ee5a:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0080ee5e:    4688        .F      MOV      r8,r1
        0x0080ee60:    461f        .F      MOV      r7,r3
        0x0080ee62:    4615        .F      MOV      r5,r2
        0x0080ee64:    4606        .F      MOV      r6,r0
        0x0080ee66:    0799        ..      LSLS     r1,r3,#30
        0x0080ee68:    d001        ..      BEQ      0x80ee6e ; aes128_ecb_encrypt_msb2lsb_buffer + 20
;;;90         bool ret;
;;;91         uint8_t *in = plaintext;
;;;92         uint8_t *out = encrypted;
;;;93     
;;;94         if (data_word_len % 4) { return false; }
        0x0080ee6a:    2000        .       MOVS     r0,#0
        0x0080ee6c:    e7cb        ..      B        0x80ee06 ; aes128_ecb_encrypt_buffer + 18
;;;95     
;;;96         for (int i = 0; i < data_word_len; i += 4)
        0x0080ee6e:    2400        .$      MOVS     r4,#0
        0x0080ee70:    e009        ..      B        0x80ee86 ; aes128_ecb_encrypt_msb2lsb_buffer + 44
        0x0080ee72:    462a        *F      MOV      r2,r5
        0x0080ee74:    4641        AF      MOV      r1,r8
        0x0080ee76:    4630        0F      MOV      r0,r6
        0x0080ee78:    f7f9df20    .. .    BL       aes128_ecb_encrypt_msb2lsb ; 0x8cbc
        0x0080ee7c:    3510        .5      ADDS     r5,r5,#0x10
        0x0080ee7e:    3610        .6      ADDS     r6,r6,#0x10
        0x0080ee80:    2800        .(      CMP      r0,#0
        0x0080ee82:    d0c0        ..      BEQ      0x80ee06 ; aes128_ecb_encrypt_buffer + 18
        0x0080ee84:    1d24        $.      ADDS     r4,r4,#4
        0x0080ee86:    42bc        .B      CMP      r4,r7
        0x0080ee88:    d3f3        ..      BCC      0x80ee72 ; aes128_ecb_encrypt_msb2lsb_buffer + 24
;;;97         {
;;;98             ret = aes128_ecb_encrypt_msb2lsb(in, key, out);
;;;99     
;;;100            in += 16;
;;;101            out += 16;
;;;102    
;;;103            if (!ret) { break; }
;;;104        }
;;;105    
;;;106        return ret;
;;;107    }
        0x0080ee8a:    e7bc        ..      B        0x80ee06 ; aes128_ecb_encrypt_buffer + 18
    aes128_ecb_decrypt_msb2lsb_buffer
;;;108    
;;;109    bool aes128_ecb_decrypt_msb2lsb_buffer(uint8_t *input, const uint8_t key[16], uint8_t *output,
;;;110                                           uint32_t data_word_len)
;;;111    {
        0x0080ee8c:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0080ee90:    4688        .F      MOV      r8,r1
        0x0080ee92:    461f        .F      MOV      r7,r3
        0x0080ee94:    4615        .F      MOV      r5,r2
        0x0080ee96:    4606        .F      MOV      r6,r0
        0x0080ee98:    0799        ..      LSLS     r1,r3,#30
;;; .\..\..\..\src\hw_aes\hw_aes.c (111)
        0x0080ee9a:    d001        ..      BEQ      0x80eea0 ; aes128_ecb_decrypt_msb2lsb_buffer + 20
;;;112        bool ret;
;;;113        uint8_t *in = input;
;;;114        uint8_t *out = output;
;;;115    
;;;116        if (data_word_len % 4) { return false; }
        0x0080ee9c:    2000        .       MOVS     r0,#0
        0x0080ee9e:    e7b2        ..      B        0x80ee06 ; aes128_ecb_encrypt_buffer + 18
;;;117    
;;;118        for (int i = 0; i < data_word_len; i += 4)
        0x0080eea0:    2400        .$      MOVS     r4,#0
        0x0080eea2:    e009        ..      B        0x80eeb8 ; aes128_ecb_decrypt_msb2lsb_buffer + 44
        0x0080eea4:    462a        *F      MOV      r2,r5
        0x0080eea6:    4641        AF      MOV      r1,r8
        0x0080eea8:    4630        0F      MOV      r0,r6
        0x0080eeaa:    f7f9df13    ....    BL       aes128_ecb_decrypt_msb2lsb ; 0x8cd4
        0x0080eeae:    3510        .5      ADDS     r5,r5,#0x10
        0x0080eeb0:    3610        .6      ADDS     r6,r6,#0x10
        0x0080eeb2:    2800        .(      CMP      r0,#0
        0x0080eeb4:    d0a7        ..      BEQ      0x80ee06 ; aes128_ecb_encrypt_buffer + 18
        0x0080eeb6:    1d24        $.      ADDS     r4,r4,#4
        0x0080eeb8:    42bc        .B      CMP      r4,r7
        0x0080eeba:    d3f3        ..      BCC      0x80eea4 ; aes128_ecb_decrypt_msb2lsb_buffer + 24
;;;119        {
;;;120            ret = aes128_ecb_decrypt_msb2lsb(in, key, out);
;;;121    
;;;122            in += 16;
;;;123            out += 16;
;;;124    
;;;125            if (!ret) { break; }
;;;126        }
;;;127    
;;;128        return ret;
;;;129    }
        0x0080eebc:    e7a3        ..      B        0x80ee06 ; aes128_ecb_encrypt_buffer + 18
    aes256_ecb_encrypt_buffer
;;;130    
;;;131    // ECB mode for 256-bit aes key
;;;132    bool aes256_ecb_encrypt_buffer(uint8_t *plaintext, const uint8_t key[32], uint8_t *encrypted,
;;;133                                   uint32_t data_word_len)
;;;134    {
        0x0080eebe:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0080eec2:    4688        .F      MOV      r8,r1
        0x0080eec4:    461f        .F      MOV      r7,r3
        0x0080eec6:    4615        .F      MOV      r5,r2
        0x0080eec8:    4606        .F      MOV      r6,r0
        0x0080eeca:    0799        ..      LSLS     r1,r3,#30
        0x0080eecc:    d001        ..      BEQ      0x80eed2 ; aes256_ecb_encrypt_buffer + 20
;;;135        bool ret;
;;;136        uint8_t *in = plaintext;
;;;137        uint8_t *out = encrypted;
;;;138    
;;;139        if (data_word_len % 4) { return false; }
        0x0080eece:    2000        .       MOVS     r0,#0
        0x0080eed0:    e799        ..      B        0x80ee06 ; aes128_ecb_encrypt_buffer + 18
;;;140    
;;;141        for (int i = 0; i < data_word_len; i += 4)
        0x0080eed2:    2400        .$      MOVS     r4,#0
        0x0080eed4:    e009        ..      B        0x80eeea ; aes256_ecb_encrypt_buffer + 44
        0x0080eed6:    462a        *F      MOV      r2,r5
        0x0080eed8:    4641        AF      MOV      r1,r8
        0x0080eeda:    4630        0F      MOV      r0,r6
        0x0080eedc:    f7f9df06    ....    BL       aes256_ecb_encrypt ; 0x8cec
        0x0080eee0:    3510        .5      ADDS     r5,r5,#0x10
        0x0080eee2:    3610        .6      ADDS     r6,r6,#0x10
        0x0080eee4:    2800        .(      CMP      r0,#0
        0x0080eee6:    d08e        ..      BEQ      0x80ee06 ; aes128_ecb_encrypt_buffer + 18
        0x0080eee8:    1d24        $.      ADDS     r4,r4,#4
        0x0080eeea:    42bc        .B      CMP      r4,r7
        0x0080eeec:    d3f3        ..      BCC      0x80eed6 ; aes256_ecb_encrypt_buffer + 24
;;;142        {
;;;143            ret = aes256_ecb_encrypt(in, key, out);
;;;144    
;;;145            in += 16;
;;;146            out += 16;
;;;147    
;;;148            if (!ret) { break; }
;;;149        }
;;;150    
;;;151        return ret;
;;;152    }
        0x0080eeee:    e78a        ..      B        0x80ee06 ; aes128_ecb_encrypt_buffer + 18
    aes256_ecb_decrypt_buffer
;;;153    
;;;154    bool aes256_ecb_decrypt_buffer(uint8_t *input, const uint8_t key[32], uint8_t *output,
;;;155                                   uint32_t data_word_len)
;;;156    {
        0x0080eef0:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0080eef4:    4688        .F      MOV      r8,r1
        0x0080eef6:    461f        .F      MOV      r7,r3
        0x0080eef8:    4615        .F      MOV      r5,r2
        0x0080eefa:    4606        .F      MOV      r6,r0
        0x0080eefc:    0799        ..      LSLS     r1,r3,#30
;;; .\..\..\..\src\hw_aes\hw_aes.c (156)
        0x0080eefe:    d001        ..      BEQ      0x80ef04 ; aes256_ecb_decrypt_buffer + 20
;;;157        bool ret;
;;;158        uint8_t *in = input;
;;;159        uint8_t *out = output;
;;;160    
;;;161        if (data_word_len % 4) { return false; }
        0x0080ef00:    2000        .       MOVS     r0,#0
        0x0080ef02:    e780        ..      B        0x80ee06 ; aes128_ecb_encrypt_buffer + 18
;;;162    
;;;163        for (int i = 0; i < data_word_len; i += 4)
        0x0080ef04:    2400        .$      MOVS     r4,#0
        0x0080ef06:    e009        ..      B        0x80ef1c ; aes256_ecb_decrypt_buffer + 44
        0x0080ef08:    462a        *F      MOV      r2,r5
        0x0080ef0a:    4641        AF      MOV      r1,r8
        0x0080ef0c:    4630        0F      MOV      r0,r6
        0x0080ef0e:    f7f9df1b    ....    BL       aes256_ecb_decrypt ; 0x8d48
        0x0080ef12:    3510        .5      ADDS     r5,r5,#0x10
        0x0080ef14:    3610        .6      ADDS     r6,r6,#0x10
        0x0080ef16:    2800        .(      CMP      r0,#0
        0x0080ef18:    d0f3        ..      BEQ      0x80ef02 ; aes256_ecb_decrypt_buffer + 18
        0x0080ef1a:    1d24        $.      ADDS     r4,r4,#4
        0x0080ef1c:    42bc        .B      CMP      r4,r7
        0x0080ef1e:    d3f3        ..      BCC      0x80ef08 ; aes256_ecb_decrypt_buffer + 24
;;;164        {
;;;165            ret = aes256_ecb_decrypt(in, key, out);
;;;166    
;;;167            in += 16;
;;;168            out += 16;
;;;169    
;;;170            if (!ret) { break; }
;;;171        }
;;;172    
;;;173        return ret;
;;;174    }
        0x0080ef20:    e771        q.      B        0x80ee06 ; aes128_ecb_encrypt_buffer + 18
    aes256_ecb_encrypt_msb2lsb_buffer
;;;175    
;;;176    bool aes256_ecb_encrypt_msb2lsb_buffer(uint8_t *plaintext, const uint8_t key[32],
;;;177                                           uint8_t *encrypted, uint32_t data_word_len)
;;;178    {
        0x0080ef22:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0080ef26:    4688        .F      MOV      r8,r1
        0x0080ef28:    461f        .F      MOV      r7,r3
        0x0080ef2a:    4615        .F      MOV      r5,r2
        0x0080ef2c:    4606        .F      MOV      r6,r0
        0x0080ef2e:    0799        ..      LSLS     r1,r3,#30
        0x0080ef30:    d001        ..      BEQ      0x80ef36 ; aes256_ecb_encrypt_msb2lsb_buffer + 20
;;;179        bool ret;
;;;180        uint8_t *in = plaintext;
;;;181        uint8_t *out = encrypted;
;;;182    
;;;183        if (data_word_len % 4) { return false; }
        0x0080ef32:    2000        .       MOVS     r0,#0
        0x0080ef34:    e767        g.      B        0x80ee06 ; aes128_ecb_encrypt_buffer + 18
;;;184    
;;;185        for (int i = 0; i < data_word_len; i += 4)
        0x0080ef36:    2400        .$      MOVS     r4,#0
        0x0080ef38:    e009        ..      B        0x80ef4e ; aes256_ecb_encrypt_msb2lsb_buffer + 44
        0x0080ef3a:    462a        *F      MOV      r2,r5
        0x0080ef3c:    4641        AF      MOV      r1,r8
        0x0080ef3e:    4630        0F      MOV      r0,r6
        0x0080ef40:    f7f9df2f    ../.    BL       aes256_ecb_encrypt_msb2lsb ; 0x8da2
        0x0080ef44:    3510        .5      ADDS     r5,r5,#0x10
        0x0080ef46:    3610        .6      ADDS     r6,r6,#0x10
        0x0080ef48:    2800        .(      CMP      r0,#0
        0x0080ef4a:    d0f3        ..      BEQ      0x80ef34 ; aes256_ecb_encrypt_msb2lsb_buffer + 18
        0x0080ef4c:    1d24        $.      ADDS     r4,r4,#4
        0x0080ef4e:    42bc        .B      CMP      r4,r7
        0x0080ef50:    d3f3        ..      BCC      0x80ef3a ; aes256_ecb_encrypt_msb2lsb_buffer + 24
;;;186        {
;;;187            ret = aes256_ecb_encrypt_msb2lsb(in, key, out);
;;;188    
;;;189            in += 16;
;;;190            out += 16;
;;;191    
;;;192            if (!ret) { break; }
;;;193        }
;;;194    
;;;195        return ret;
;;;196    }
        0x0080ef52:    e758        X.      B        0x80ee06 ; aes128_ecb_encrypt_buffer + 18
    aes256_ecb_decrypt_msb2lsb_buffer
;;;197    
;;;198    bool aes256_ecb_decrypt_msb2lsb_buffer(uint8_t *input, const uint8_t key[32], uint8_t *output,
;;;199                                           uint32_t data_word_len)
;;;200    {
        0x0080ef54:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0080ef58:    4688        .F      MOV      r8,r1
        0x0080ef5a:    461f        .F      MOV      r7,r3
        0x0080ef5c:    4615        .F      MOV      r5,r2
        0x0080ef5e:    4606        .F      MOV      r6,r0
        0x0080ef60:    0799        ..      LSLS     r1,r3,#30
;;; .\..\..\..\src\hw_aes\hw_aes.c (200)
        0x0080ef62:    d001        ..      BEQ      0x80ef68 ; aes256_ecb_decrypt_msb2lsb_buffer + 20
;;;201        bool ret;
;;;202        uint8_t *in = input;
;;;203        uint8_t *out = output;
;;;204    
;;;205        if (data_word_len % 4) { return false; }
        0x0080ef64:    2000        .       MOVS     r0,#0
        0x0080ef66:    e74e        N.      B        0x80ee06 ; aes128_ecb_encrypt_buffer + 18
;;;206    
;;;207        for (int i = 0; i < data_word_len; i += 4)
        0x0080ef68:    2400        .$      MOVS     r4,#0
        0x0080ef6a:    e009        ..      B        0x80ef80 ; aes256_ecb_decrypt_msb2lsb_buffer + 44
        0x0080ef6c:    462a        *F      MOV      r2,r5
        0x0080ef6e:    4641        AF      MOV      r1,r8
        0x0080ef70:    4630        0F      MOV      r0,r6
        0x0080ef72:    f7f9df22    ..".    BL       aes256_ecb_decrypt_msb2lsb ; 0x8dba
        0x0080ef76:    3510        .5      ADDS     r5,r5,#0x10
        0x0080ef78:    3610        .6      ADDS     r6,r6,#0x10
        0x0080ef7a:    2800        .(      CMP      r0,#0
        0x0080ef7c:    d0f3        ..      BEQ      0x80ef66 ; aes256_ecb_decrypt_msb2lsb_buffer + 18
        0x0080ef7e:    1d24        $.      ADDS     r4,r4,#4
        0x0080ef80:    42bc        .B      CMP      r4,r7
        0x0080ef82:    d3f3        ..      BCC      0x80ef6c ; aes256_ecb_decrypt_msb2lsb_buffer + 24
;;;208        {
;;;209            ret = aes256_ecb_decrypt_msb2lsb(in, key, out);
;;;210    
;;;211            in += 16;
;;;212            out += 16;
;;;213    
;;;214            if (!ret) { break; }
;;;215        }
;;;216    
;;;217        return ret;
;;;218    }
        0x0080ef84:    e73f        ?.      B        0x80ee06 ; aes128_ecb_encrypt_buffer + 18
    aes128_cbc_encrypt
;;;219    
;;;220    // CBC mode for 128-bit aes key
;;;221    bool aes128_cbc_encrypt(uint8_t *plaintext, const uint8_t key[16], uint8_t *encrypted,
;;;222                            uint32_t *p_iv, uint32_t data_word_len)
;;;223    {
        0x0080ef86:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x0080ef8a:    b090        ..      SUB      sp,sp,#0x40
        0x0080ef8c:    f04f0a00    O...    MOV      r10,#0
        0x0080ef90:    461c        .F      MOV      r4,r3
        0x0080ef92:    460b        .F      MOV      r3,r1
        0x0080ef94:    4615        .F      MOV      r5,r2
        0x0080ef96:    4606        .F      MOV      r6,r0
;;;224        bool ret;
;;;225    
;;;226        uint8_t key_tmp[16] = {0};
        0x0080ef98:    f8dd9060    ..`.    LDR      r9,[sp,#0x60]
        0x0080ef9c:    f8cda030    ..0.    STR      r10,[sp,#0x30]
        0x0080efa0:    f8cda034    ..4.    STR      r10,[sp,#0x34]
        0x0080efa4:    f8cda038    ..8.    STR      r10,[sp,#0x38]
;;;227        /* The most significant octet of key corresponds to key[0] */
;;;228        swap_buf(key, key_tmp, 16);
        0x0080efa8:    2210        ."      MOVS     r2,#0x10
        0x0080efaa:    a90c        ..      ADD      r1,sp,#0x30
        0x0080efac:    4618        .F      MOV      r0,r3
        0x0080efae:    f8cda03c    ..<.    STR      r10,[sp,#0x3c]
        0x0080efb2:    f000f961    ..a.    BL       swap_buf ; 0x80f278
;;;229    
;;;230        uint8_t *in = plaintext;
;;;231        uint8_t *out = encrypted;
;;;232    
;;;233        if (p_iv != 0) { memcpy(Iv, p_iv, 16); }
        0x0080efb6:    f8df82d8    ....    LDR      r8,[pc,#728] ; [0x80f290] = 0x20820c
        0x0080efba:    b124        $.      CBZ      r4,0x80efc6 ; aes128_cbc_encrypt + 64
        0x0080efbc:    cc1e        ..      LDM      r4,{r1-r4}
        0x0080efbe:    e888000e    ....    STM      r8,{r1-r3}
        0x0080efc2:    f8c8400c    ...@    STR      r4,[r8,#0xc]
;;;234    
;;;235        if (data_word_len % 4) { return false; }
        0x0080efc6:    ea5f7089    _..p    LSLS     r0,r9,#30
        0x0080efca:    d003        ..      BEQ      0x80efd4 ; aes128_cbc_encrypt + 78
        0x0080efcc:    2000        .       MOVS     r0,#0
        0x0080efce:    b010        ..      ADD      sp,sp,#0x40
        0x0080efd0:    e8bd87f0    ....    POP      {r4-r10,pc}
;;;236    
;;;237        for (int i = 0; i < data_word_len; i += 4)
        0x0080efd4:    2400        .$      MOVS     r4,#0
        0x0080efd6:    e02f        /.      B        0x80f038 ; aes128_cbc_encrypt + 178
;;;238        {
;;;239    
;;;240            uint8_t in_tmp[16] = {0};
        0x0080efd8:    f8cda024    ..$.    STR      r10,[sp,#0x24]
        0x0080efdc:    f8cda028    ..(.    STR      r10,[sp,#0x28]
        0x0080efe0:    f8cda02c    ..,.    STR      r10,[sp,#0x2c]
        0x0080efe4:    f8cda020    .. .    STR      r10,[sp,#0x20]
;;;241            uint8_t out_tmp[16] = {0};
        0x0080efe8:    f8cda010    ....    STR      r10,[sp,#0x10]
        0x0080efec:    f8cda014    ....    STR      r10,[sp,#0x14]
        0x0080eff0:    f8cda018    ....    STR      r10,[sp,#0x18]
;;;242    
;;;243            swap_buf(in, in_tmp, 16);
        0x0080eff4:    2210        ."      MOVS     r2,#0x10
        0x0080eff6:    a908        ..      ADD      r1,sp,#0x20
        0x0080eff8:    4630        0F      MOV      r0,r6
        0x0080effa:    f8cda01c    ....    STR      r10,[sp,#0x1c]
        0x0080effe:    f000f93b    ..;.    BL       swap_buf ; 0x80f278
;;;244    
;;;245            ret = hw_aes_encrypt128((uint32_t *) in_tmp, (uint32_t *) out_tmp, 4, (uint32_t *)key_tmp, Iv,
        0x0080f002:    2101        .!      MOVS     r1,#1
        0x0080f004:    e9cd8100    ....    STRD     r8,r1,[sp,#0]
        0x0080f008:    ab0c        ..      ADD      r3,sp,#0x30
        0x0080f00a:    2204        ."      MOVS     r2,#4
        0x0080f00c:    a904        ..      ADD      r1,sp,#0x10
        0x0080f00e:    a808        ..      ADD      r0,sp,#0x20
        0x0080f010:    f7f9dd53    ..S.    BL       hw_aes_encrypt128 ; 0x8aba
        0x0080f014:    f10d0e10    ....    ADD      lr,sp,#0x10
        0x0080f018:    4607        .F      MOV      r7,r0
        0x0080f01a:    e89e100e    ....    LDM      lr,{r1-r3,r12}
        0x0080f01e:    e888000e    ....    STM      r8,{r1-r3}
;;;246                                    AES_MODE_CBC);
;;;247    
;;;248            memcpy(Iv, out_tmp, 16);
;;;249    
;;;250            swap_buf(out_tmp, out, 16);
        0x0080f022:    2210        ."      MOVS     r2,#0x10
        0x0080f024:    4629        )F      MOV      r1,r5
        0x0080f026:    a804        ..      ADD      r0,sp,#0x10
        0x0080f028:    f8c8c00c    ....    STR      r12,[r8,#0xc]
        0x0080f02c:    f000f924    ..$.    BL       swap_buf ; 0x80f278
        0x0080f030:    3510        .5      ADDS     r5,r5,#0x10
        0x0080f032:    3610        .6      ADDS     r6,r6,#0x10
;;;251    
;;;252            in += 16;
;;;253            out += 16;
;;;254    
;;;255            if (!ret) { break; }
        0x0080f034:    b117        ..      CBZ      r7,0x80f03c ; aes128_cbc_encrypt + 182
        0x0080f036:    1d24        $.      ADDS     r4,r4,#4
        0x0080f038:    454c        LE      CMP      r4,r9
        0x0080f03a:    d3cd        ..      BCC      0x80efd8 ; aes128_cbc_encrypt + 82
;;;256        }
;;;257    
;;;258        return ret;
        0x0080f03c:    4638        8F      MOV      r0,r7
;;;259    }
        0x0080f03e:    e7c6        ..      B        0x80efce ; aes128_cbc_encrypt + 72
    aes128_cbc_decrypt
;;;260    
;;;261    bool aes128_cbc_decrypt(uint8_t *input, const uint8_t key[16], uint8_t *output, uint32_t *p_iv,
;;;262                            uint32_t data_word_len)
;;;263    {
        0x0080f040:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x0080f044:    b08e        ..      SUB      sp,sp,#0x38
        0x0080f046:    f04f0a00    O...    MOV      r10,#0
;;; .\..\..\..\src\hw_aes\hw_aes.c (263)
        0x0080f04a:    461c        .F      MOV      r4,r3
        0x0080f04c:    460b        .F      MOV      r3,r1
        0x0080f04e:    4615        .F      MOV      r5,r2
        0x0080f050:    4606        .F      MOV      r6,r0
;;;264        bool ret;
;;;265    
;;;266        uint8_t key_tmp[16] = {0};
        0x0080f052:    f8dd9058    ..X.    LDR      r9,[sp,#0x58]
        0x0080f056:    f8cda028    ..(.    STR      r10,[sp,#0x28]
        0x0080f05a:    f8cda02c    ..,.    STR      r10,[sp,#0x2c]
        0x0080f05e:    f8cda030    ..0.    STR      r10,[sp,#0x30]
;;;267        swap_buf(key, key_tmp, 16);
        0x0080f062:    2210        ."      MOVS     r2,#0x10
        0x0080f064:    a90a        ..      ADD      r1,sp,#0x28
        0x0080f066:    4618        .F      MOV      r0,r3
        0x0080f068:    f8cda034    ..4.    STR      r10,[sp,#0x34]
        0x0080f06c:    f000f904    ....    BL       swap_buf ; 0x80f278
;;;268    
;;;269        uint8_t *in = input;
;;;270        uint8_t *out = output;
;;;271    
;;;272        if (p_iv != 0) { memcpy(Iv, p_iv, 16); }
        0x0080f070:    f8df821c    ....    LDR      r8,[pc,#540] ; [0x80f290] = 0x20820c
        0x0080f074:    b124        $.      CBZ      r4,0x80f080 ; aes128_cbc_decrypt + 64
        0x0080f076:    cc1e        ..      LDM      r4,{r1-r4}
        0x0080f078:    e888000e    ....    STM      r8,{r1-r3}
        0x0080f07c:    f8c8400c    ...@    STR      r4,[r8,#0xc]
;;;273    
;;;274        if (data_word_len % 4) { return false; }
        0x0080f080:    ea5f7089    _..p    LSLS     r0,r9,#30
        0x0080f084:    d002        ..      BEQ      0x80f08c ; aes128_cbc_decrypt + 76
        0x0080f086:    2000        .       MOVS     r0,#0
        0x0080f088:    b00e        ..      ADD      sp,sp,#0x38
        0x0080f08a:    e7a1        ..      B        0x80efd0 ; aes128_cbc_encrypt + 74
;;;275    
;;;276        for (int i = 0; i < data_word_len; i += 4)
        0x0080f08c:    2400        .$      MOVS     r4,#0
        0x0080f08e:    e02f        /.      B        0x80f0f0 ; aes128_cbc_decrypt + 176
;;;277        {
;;;278    
;;;279            uint8_t in_tmp[16] = {0};
        0x0080f090:    f8cda008    ....    STR      r10,[sp,#8]
        0x0080f094:    f8cda00c    ....    STR      r10,[sp,#0xc]
        0x0080f098:    f8cda010    ....    STR      r10,[sp,#0x10]
;;;280            uint8_t out_tmp[16] = {0};
        0x0080f09c:    f8cda014    ....    STR      r10,[sp,#0x14]
        0x0080f0a0:    f8cda018    ....    STR      r10,[sp,#0x18]
        0x0080f0a4:    f8cda01c    ....    STR      r10,[sp,#0x1c]
        0x0080f0a8:    f8cda020    .. .    STR      r10,[sp,#0x20]
;;;281    
;;;282            swap_buf(in, in_tmp, 16);
        0x0080f0ac:    2210        ."      MOVS     r2,#0x10
        0x0080f0ae:    a902        ..      ADD      r1,sp,#8
        0x0080f0b0:    4630        0F      MOV      r0,r6
        0x0080f0b2:    f8cda024    ..$.    STR      r10,[sp,#0x24]
        0x0080f0b6:    f000f8df    ....    BL       swap_buf ; 0x80f278
;;;283    
;;;284            ret = hw_aes_decrypt128((uint32_t *) in_tmp, (uint32_t *) out_tmp, 4, (uint32_t *)key_tmp, Iv,
        0x0080f0ba:    2101        .!      MOVS     r1,#1
        0x0080f0bc:    e9cd8100    ....    STRD     r8,r1,[sp,#0]
        0x0080f0c0:    ab0a        ..      ADD      r3,sp,#0x28
        0x0080f0c2:    2204        ."      MOVS     r2,#4
        0x0080f0c4:    a906        ..      ADD      r1,sp,#0x18
        0x0080f0c6:    a802        ..      ADD      r0,sp,#8
        0x0080f0c8:    f7f9dd09    ....    BL       hw_aes_decrypt128 ; 0x8ade
        0x0080f0cc:    f10d0e08    ....    ADD      lr,sp,#8
        0x0080f0d0:    4607        .F      MOV      r7,r0
        0x0080f0d2:    e89e100e    ....    LDM      lr,{r1-r3,r12}
        0x0080f0d6:    e888000e    ....    STM      r8,{r1-r3}
;;;285                                    AES_MODE_CBC);
;;;286    
;;;287            memcpy(Iv, in_tmp, 16);
;;;288    
;;;289            swap_buf(out_tmp, out, 16);
        0x0080f0da:    2210        ."      MOVS     r2,#0x10
        0x0080f0dc:    4629        )F      MOV      r1,r5
        0x0080f0de:    a806        ..      ADD      r0,sp,#0x18
        0x0080f0e0:    f8c8c00c    ....    STR      r12,[r8,#0xc]
        0x0080f0e4:    f000f8c8    ....    BL       swap_buf ; 0x80f278
        0x0080f0e8:    3510        .5      ADDS     r5,r5,#0x10
        0x0080f0ea:    3610        .6      ADDS     r6,r6,#0x10
;;;290    
;;;291            in += 16;
;;;292            out += 16;
;;;293    
;;;294            if (!ret) { break; }
        0x0080f0ec:    b117        ..      CBZ      r7,0x80f0f4 ; aes128_cbc_decrypt + 180
        0x0080f0ee:    1d24        $.      ADDS     r4,r4,#4
        0x0080f0f0:    454c        LE      CMP      r4,r9
        0x0080f0f2:    d3cd        ..      BCC      0x80f090 ; aes128_cbc_decrypt + 80
;;;295        }
;;;296    
;;;297        return ret;
        0x0080f0f4:    4638        8F      MOV      r0,r7
;;;298    }
        0x0080f0f6:    e7c7        ..      B        0x80f088 ; aes128_cbc_decrypt + 72
    aes128_cbc_encrypt_msb2lsb
;;;299    
;;;300    
;;;301    bool aes128_cbc_encrypt_msb2lsb(uint8_t plaintext[16], const uint8_t key[16], uint8_t *encrypted,
;;;302                                    uint32_t *p_iv, uint32_t data_word_len)
;;;303    {
        0x0080f0f8:    b57c        |.      PUSH     {r2-r6,lr}
        0x0080f0fa:    460d        .F      MOV      r5,r1
        0x0080f0fc:    9906        ..      LDR      r1,[sp,#0x18]
;;; .\..\..\..\src\hw_aes\hw_aes.c (303)
        0x0080f0fe:    4614        .F      MOV      r4,r2
        0x0080f100:    078a        ..      LSLS     r2,r1,#30
        0x0080f102:    d001        ..      BEQ      0x80f108 ; aes128_cbc_encrypt_msb2lsb + 16
;;;304        if (data_word_len % 4) { return false; }
        0x0080f104:    2000        .       MOVS     r0,#0
        0x0080f106:    bd7c        |.      POP      {r2-r6,pc}
;;;305    
;;;306        return hw_aes_encrypt128((uint32_t *) plaintext, (uint32_t *) encrypted, data_word_len,
        0x0080f108:    2201        ."      MOVS     r2,#1
        0x0080f10a:    e9cd3200    ...2    STRD     r3,r2,[sp,#0]
        0x0080f10e:    b28a        ..      UXTH     r2,r1
        0x0080f110:    462b        +F      MOV      r3,r5
        0x0080f112:    4621        !F      MOV      r1,r4
        0x0080f114:    f7f9dcd1    ....    BL       hw_aes_encrypt128 ; 0x8aba
;;;307                                 (uint32_t *)key, p_iv,
;;;308                                 AES_MODE_CBC);
;;;309    }
        0x0080f118:    bd7c        |.      POP      {r2-r6,pc}
    aes128_cbc_decrypt_msb2lsb
;;;310    
;;;311    bool aes128_cbc_decrypt_msb2lsb(uint8_t *input, const uint8_t key[16], uint8_t *output,
;;;312                                    uint32_t *p_iv, uint32_t data_word_len)
;;;313    {
        0x0080f11a:    b57c        |.      PUSH     {r2-r6,lr}
        0x0080f11c:    460d        .F      MOV      r5,r1
        0x0080f11e:    9906        ..      LDR      r1,[sp,#0x18]
        0x0080f120:    4614        .F      MOV      r4,r2
        0x0080f122:    078a        ..      LSLS     r2,r1,#30
        0x0080f124:    d001        ..      BEQ      0x80f12a ; aes128_cbc_decrypt_msb2lsb + 16
;;;314        if (data_word_len % 4) { return false; }
        0x0080f126:    2000        .       MOVS     r0,#0
        0x0080f128:    bd7c        |.      POP      {r2-r6,pc}
;;;315    
;;;316        return hw_aes_decrypt128((uint32_t *)input, (uint32_t *)output, data_word_len, (uint32_t *)key,
        0x0080f12a:    2201        ."      MOVS     r2,#1
        0x0080f12c:    e9cd3200    ...2    STRD     r3,r2,[sp,#0]
        0x0080f130:    b28a        ..      UXTH     r2,r1
        0x0080f132:    462b        +F      MOV      r3,r5
        0x0080f134:    4621        !F      MOV      r1,r4
        0x0080f136:    f7f9dcd2    ....    BL       hw_aes_decrypt128 ; 0x8ade
;;;317                                 p_iv,
;;;318                                 AES_MODE_CBC);
;;;319    }
        0x0080f13a:    bd7c        |.      POP      {r2-r6,pc}
    aes256_cbc_encrypt
;;;320    
;;;321    // CBC mode for 256-bit aes key
;;;322    bool aes256_cbc_encrypt(uint8_t *plaintext, const uint8_t key[32], uint8_t *encrypted,
;;;323                            uint32_t *p_iv, uint32_t data_word_len)
;;;324    {
        0x0080f13c:    e92d43f0    -..C    PUSH     {r4-r9,lr}
        0x0080f140:    b093        ..      SUB      sp,sp,#0x4c
        0x0080f142:    460f        .F      MOV      r7,r1
        0x0080f144:    4606        .F      MOV      r6,r0
        0x0080f146:    461c        .F      MOV      r4,r3
        0x0080f148:    4615        .F      MOV      r5,r2
;;;325        bool ret;
;;;326    
;;;327        uint8_t key_tmp[32] = {0};
        0x0080f14a:    2120         !      MOVS     r1,#0x20
        0x0080f14c:    a802        ..      ADD      r0,sp,#8
        0x0080f14e:    f8dd9068    ..h.    LDR      r9,[sp,#0x68]
        0x0080f152:    f44af785    J...    BL       __aeabi_memclr4 ; 0x5a060
;;;328        /* The most significant octet of key corresponds to key[0] */
;;;329        swap_buf(key, key_tmp, 32);
        0x0080f156:    2220         "      MOVS     r2,#0x20
        0x0080f158:    a902        ..      ADD      r1,sp,#8
        0x0080f15a:    4638        8F      MOV      r0,r7
        0x0080f15c:    f000f88c    ....    BL       swap_buf ; 0x80f278
;;;330    
;;;331        uint8_t *in = plaintext;
;;;332        uint8_t *out = encrypted;
;;;333    
;;;334        if (p_iv != 0) { memcpy(Iv, p_iv, 16); }
        0x0080f160:    f8df812c    ..,.    LDR      r8,[pc,#300] ; [0x80f290] = 0x20820c
        0x0080f164:    b124        $.      CBZ      r4,0x80f170 ; aes256_cbc_encrypt + 52
        0x0080f166:    cc1e        ..      LDM      r4,{r1-r4}
        0x0080f168:    e888000e    ....    STM      r8,{r1-r3}
        0x0080f16c:    f8c8400c    ...@    STR      r4,[r8,#0xc]
;;;335    
;;;336        if (data_word_len % 4) { return false; }
        0x0080f170:    ea5f7089    _..p    LSLS     r0,r9,#30
        0x0080f174:    d003        ..      BEQ      0x80f17e ; aes256_cbc_encrypt + 66
        0x0080f176:    2000        .       MOVS     r0,#0
        0x0080f178:    b013        ..      ADD      sp,sp,#0x4c
        0x0080f17a:    e8bd83f0    ....    POP      {r4-r9,pc}
;;;337    
;;;338        for (int i = 0; i < data_word_len; i += 4)
        0x0080f17e:    2400        .$      MOVS     r4,#0
        0x0080f180:    e028        (.      B        0x80f1d4 ; aes256_cbc_encrypt + 152
;;;339        {
;;;340    
;;;341            uint8_t in_tmp[16] = {0};
        0x0080f182:    2000        .       MOVS     r0,#0
        0x0080f184:    900f        ..      STR      r0,[sp,#0x3c]
        0x0080f186:    9010        ..      STR      r0,[sp,#0x40]
        0x0080f188:    9011        ..      STR      r0,[sp,#0x44]
        0x0080f18a:    900e        ..      STR      r0,[sp,#0x38]
;;;342            uint8_t out_tmp[16] = {0};
        0x0080f18c:    900a        ..      STR      r0,[sp,#0x28]
        0x0080f18e:    900b        ..      STR      r0,[sp,#0x2c]
        0x0080f190:    900c        ..      STR      r0,[sp,#0x30]
;;;343    
;;;344            swap_buf(in, in_tmp, 16);
        0x0080f192:    900d        ..      STR      r0,[sp,#0x34]
        0x0080f194:    2210        ."      MOVS     r2,#0x10
        0x0080f196:    a90e        ..      ADD      r1,sp,#0x38
        0x0080f198:    4630        0F      MOV      r0,r6
        0x0080f19a:    f000f86d    ..m.    BL       swap_buf ; 0x80f278
;;;345    
;;;346            ret = hw_aes_encrypt256((uint32_t *) in_tmp, (uint32_t *) out_tmp, 4, (uint32_t *)key_tmp, Iv,
        0x0080f19e:    2101        .!      MOVS     r1,#1
        0x0080f1a0:    e9cd8100    ....    STRD     r8,r1,[sp,#0]
        0x0080f1a4:    ab02        ..      ADD      r3,sp,#8
        0x0080f1a6:    2204        ."      MOVS     r2,#4
        0x0080f1a8:    a90a        ..      ADD      r1,sp,#0x28
        0x0080f1aa:    a80e        ..      ADD      r0,sp,#0x38
        0x0080f1ac:    f7f9dca7    ....    BL       hw_aes_encrypt256 ; 0x8afe
        0x0080f1b0:    f10d0e28    ..(.    ADD      lr,sp,#0x28
        0x0080f1b4:    4607        .F      MOV      r7,r0
        0x0080f1b6:    e89e100e    ....    LDM      lr,{r1-r3,r12}
        0x0080f1ba:    e888000e    ....    STM      r8,{r1-r3}
;;;347                                    AES_MODE_CBC);
;;;348    
;;;349            memcpy(Iv, out_tmp, 16);
;;;350    
;;;351            swap_buf(out_tmp, out, 16);
        0x0080f1be:    2210        ."      MOVS     r2,#0x10
        0x0080f1c0:    4629        )F      MOV      r1,r5
        0x0080f1c2:    a80a        ..      ADD      r0,sp,#0x28
        0x0080f1c4:    f8c8c00c    ....    STR      r12,[r8,#0xc]
        0x0080f1c8:    f000f856    ..V.    BL       swap_buf ; 0x80f278
        0x0080f1cc:    3510        .5      ADDS     r5,r5,#0x10
        0x0080f1ce:    3610        .6      ADDS     r6,r6,#0x10
;;;352    
;;;353            in += 16;
;;;354            out += 16;
;;;355    
;;;356            if (!ret) { break; }
        0x0080f1d0:    b117        ..      CBZ      r7,0x80f1d8 ; aes256_cbc_encrypt + 156
        0x0080f1d2:    1d24        $.      ADDS     r4,r4,#4
        0x0080f1d4:    454c        LE      CMP      r4,r9
        0x0080f1d6:    d3d4        ..      BCC      0x80f182 ; aes256_cbc_encrypt + 70
;;;357        }
;;;358    
;;;359        return ret;
        0x0080f1d8:    4638        8F      MOV      r0,r7
;;;360    }
        0x0080f1da:    e7cd        ..      B        0x80f178 ; aes256_cbc_encrypt + 60
    aes256_cbc_decrypt
;;;361    
;;;362    bool aes256_cbc_decrypt(uint8_t *input, const uint8_t key[32], uint8_t *output, uint32_t *p_iv,
;;;363                            uint32_t data_word_len)
;;;364    {
        0x0080f1dc:    e92d43f0    -..C    PUSH     {r4-r9,lr}
        0x0080f1e0:    b093        ..      SUB      sp,sp,#0x4c
        0x0080f1e2:    460f        .F      MOV      r7,r1
        0x0080f1e4:    4606        .F      MOV      r6,r0
        0x0080f1e6:    461c        .F      MOV      r4,r3
        0x0080f1e8:    4615        .F      MOV      r5,r2
;;;365        bool ret;
;;;366    
;;;367        uint8_t key_tmp[32] = {0};
        0x0080f1ea:    2120         !      MOVS     r1,#0x20
        0x0080f1ec:    a802        ..      ADD      r0,sp,#8
        0x0080f1ee:    f8dd9068    ..h.    LDR      r9,[sp,#0x68]
        0x0080f1f2:    f44af735    J.5.    BL       __aeabi_memclr4 ; 0x5a060
;;;368        swap_buf(key, key_tmp, 32);
        0x0080f1f6:    2220         "      MOVS     r2,#0x20
        0x0080f1f8:    a902        ..      ADD      r1,sp,#8
        0x0080f1fa:    4638        8F      MOV      r0,r7
        0x0080f1fc:    f000f83c    ..<.    BL       swap_buf ; 0x80f278
;;;369    
;;;370        uint8_t *in = input;
;;;371        uint8_t *out = output;
;;;372    
;;;373        if (p_iv != 0) { memcpy(Iv, p_iv, 16); }
        0x0080f200:    f8df808c    ....    LDR      r8,[pc,#140] ; [0x80f290] = 0x20820c
        0x0080f204:    b124        $.      CBZ      r4,0x80f210 ; aes256_cbc_decrypt + 52
        0x0080f206:    cc1e        ..      LDM      r4,{r1-r4}
        0x0080f208:    e888000e    ....    STM      r8,{r1-r3}
        0x0080f20c:    f8c8400c    ...@    STR      r4,[r8,#0xc]
;;;374    
;;;375        if (data_word_len % 4) { return false; }
        0x0080f210:    ea5f7089    _..p    LSLS     r0,r9,#30
        0x0080f214:    d001        ..      BEQ      0x80f21a ; aes256_cbc_decrypt + 62
        0x0080f216:    2000        .       MOVS     r0,#0
        0x0080f218:    e7ae        ..      B        0x80f178 ; aes256_cbc_encrypt + 60
;;;376    
;;;377        for (int i = 0; i < data_word_len; i += 4)
        0x0080f21a:    2400        .$      MOVS     r4,#0
        0x0080f21c:    e028        (.      B        0x80f270 ; aes256_cbc_decrypt + 148
;;;378        {
;;;379    
;;;380            uint8_t in_tmp[16] = {0};
        0x0080f21e:    2000        .       MOVS     r0,#0
        0x0080f220:    900a        ..      STR      r0,[sp,#0x28]
        0x0080f222:    900b        ..      STR      r0,[sp,#0x2c]
        0x0080f224:    900c        ..      STR      r0,[sp,#0x30]
;;;381            uint8_t out_tmp[16] = {0};
        0x0080f226:    900d        ..      STR      r0,[sp,#0x34]
        0x0080f228:    900e        ..      STR      r0,[sp,#0x38]
        0x0080f22a:    900f        ..      STR      r0,[sp,#0x3c]
        0x0080f22c:    9010        ..      STR      r0,[sp,#0x40]
;;;382    
;;;383            swap_buf(in, in_tmp, 16);
        0x0080f22e:    9011        ..      STR      r0,[sp,#0x44]
        0x0080f230:    2210        ."      MOVS     r2,#0x10
        0x0080f232:    a90a        ..      ADD      r1,sp,#0x28
        0x0080f234:    4630        0F      MOV      r0,r6
        0x0080f236:    f000f81f    ....    BL       swap_buf ; 0x80f278
;;;384    
;;;385            ret = hw_aes_decrypt256((uint32_t *) in_tmp, (uint32_t *) out_tmp, 4, (uint32_t *)key_tmp, Iv,
        0x0080f23a:    2101        .!      MOVS     r1,#1
        0x0080f23c:    e9cd8100    ....    STRD     r8,r1,[sp,#0]
        0x0080f240:    ab02        ..      ADD      r3,sp,#8
        0x0080f242:    2204        ."      MOVS     r2,#4
        0x0080f244:    a90e        ..      ADD      r1,sp,#0x38
        0x0080f246:    a80a        ..      ADD      r0,sp,#0x28
        0x0080f248:    f7f9dc6b    ..k.    BL       hw_aes_decrypt256 ; 0x8b22
        0x0080f24c:    f10d0e28    ..(.    ADD      lr,sp,#0x28
        0x0080f250:    4607        .F      MOV      r7,r0
        0x0080f252:    e89e100e    ....    LDM      lr,{r1-r3,r12}
        0x0080f256:    e888000e    ....    STM      r8,{r1-r3}
;;;386                                    AES_MODE_CBC);
;;;387    
;;;388            memcpy(Iv, in_tmp, 16);
;;;389    
;;;390            swap_buf(out_tmp, out, 16);
        0x0080f25a:    2210        ."      MOVS     r2,#0x10
        0x0080f25c:    4629        )F      MOV      r1,r5
        0x0080f25e:    a80e        ..      ADD      r0,sp,#0x38
        0x0080f260:    f8c8c00c    ....    STR      r12,[r8,#0xc]
        0x0080f264:    f000f808    ....    BL       swap_buf ; 0x80f278
        0x0080f268:    3510        .5      ADDS     r5,r5,#0x10
        0x0080f26a:    3610        .6      ADDS     r6,r6,#0x10
;;;391    
;;;392            in += 16;
;;;393            out += 16;
;;;394    
;;;395            if (!ret) { break; }
        0x0080f26c:    b117        ..      CBZ      r7,0x80f274 ; aes256_cbc_decrypt + 152
        0x0080f26e:    1d24        $.      ADDS     r4,r4,#4
        0x0080f270:    454c        LE      CMP      r4,r9
        0x0080f272:    d3d4        ..      BCC      0x80f21e ; aes256_cbc_decrypt + 66
;;;396        }
;;;397    
;;;398        return ret;
        0x0080f274:    4638        8F      MOV      r0,r7
;;;399    }
        0x0080f276:    e77f        ..      B        0x80f178 ; aes256_cbc_encrypt + 60
    swap_buf
        0x0080f278:    b530        0.      PUSH     {r4,r5,lr}
        0x0080f27a:    2300        .#      MOVS     r3,#0
;;; .\..\..\..\src\hw_aes\hw_aes.c (33)
        0x0080f27c:    e005        ..      B        0x80f28a ; swap_buf + 18
        0x0080f27e:    1ad5        ..      SUBS     r5,r2,r3
        0x0080f280:    5cc4        .\      LDRB     r4,[r0,r3]
        0x0080f282:    440d        .D      ADD      r5,r5,r1
        0x0080f284:    1c5b        [.      ADDS     r3,r3,#1
        0x0080f286:    f8054c01    ...L    STRB     r4,[r5,#-1]
;;;34         int i;
;;;35     
;;;36         for (i = 0; i < len; i++)
        0x0080f28a:    4293        .B      CMP      r3,r2
        0x0080f28c:    dbf7        ..      BLT      0x80f27e ; swap_buf + 6
;;;37         {
;;;38             dst[len - 1 - i] = src[i];
;;;39         }
;;;40     }
        0x0080f28e:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x0080f290:    0020820c    .. .    DCD    2130444
    $t
    .text
    tuya_event_queue_send
;;; .\sample\app_task.c
;;;64     {
        0x0080f294:    b57c        |.      PUSH     {r2-r6,lr}
        0x0080f296:    460d        .F      MOV      r5,r1
;;;65         T_EVENT_TYPE app_event = EVENT_APP_CUSTOM;
        0x0080f298:    2110        .!      MOVS     r1,#0x10
        0x0080f29a:    f88d1004    ....    STRB     r1,[sp,#4]
;;;66     
;;;67         if(os_msg_send(tuya_queue_handle, evt, wait_ms))
        0x0080f29e:    2143        C!      MOVS     r1,#0x43
        0x0080f2a0:    4c41        AL      LDR      r4,[pc,#260] ; [0x80f3a8] = 0x20821c
        0x0080f2a2:    9100        ..      STR      r1,[sp,#0]
        0x0080f2a4:    4601        .F      MOV      r1,r0
        0x0080f2a6:    4b3f        ?K      LDR      r3,[pc,#252] ; [0x80f3a4] = 0x81c134
        0x0080f2a8:    462a        *F      MOV      r2,r5
        0x0080f2aa:    68e0        .h      LDR      r0,[r4,#0xc]
        0x0080f2ac:    f416f69a    ....    BL       os_msg_send_intern ; 0x25fe4
        0x0080f2b0:    2800        .(      CMP      r0,#0
        0x0080f2b2:    d00a        ..      BEQ      0x80f2ca ; tuya_event_queue_send + 54
;;;68         {
;;;69             if(os_msg_send(evt_queue_handle,&app_event, wait_ms))
        0x0080f2b4:    2045        E       MOVS     r0,#0x45
        0x0080f2b6:    9000        ..      STR      r0,[sp,#0]
        0x0080f2b8:    4b3a        :K      LDR      r3,[pc,#232] ; [0x80f3a4] = 0x81c134
        0x0080f2ba:    462a        *F      MOV      r2,r5
        0x0080f2bc:    a901        ..      ADD      r1,sp,#4
        0x0080f2be:    6860        `h      LDR      r0,[r4,#4]
        0x0080f2c0:    f416f690    ....    BL       os_msg_send_intern ; 0x25fe4
        0x0080f2c4:    2800        .(      CMP      r0,#0
        0x0080f2c6:    d000        ..      BEQ      0x80f2ca ; tuya_event_queue_send + 54
;;;70             {
;;;71                 return true;
        0x0080f2c8:    2001        .       MOVS     r0,#1
;;;72             }
;;;73             else
;;;74             {
;;;75                 return false;
;;;76             }
;;;77     
;;;78         }
;;;79         else
;;;80         {
;;;81             return false;
;;;82         }    
;;;83         
;;;84     }
        0x0080f2ca:    bd7c        |.      POP      {r2-r6,pc}
    app_main_task
;;;85     
;;;86     
;;;87     
;;;88     /**
;;;89      * @brief  Initialize App task
;;;90      * @return void
;;;91      */
;;;92     void app_task_init()
;;;93     {
;;;94         os_task_create(&app_task_handle, "app", app_main_task, 0, APP_TASK_STACK_SIZE,
;;;95                        APP_TASK_PRIORITY);
;;;96     }
;;;97     
;;;98     /**
;;;99      * @brief        App task to handle events & messages
;;;100     * @param[in]    p_param    Parameters sending to the task
;;;101     * @return       void
;;;102     */
;;;103    void app_main_task(void *p_param)
;;;104    {
        0x0080f2cc:    b08e        ..      SUB      sp,sp,#0x38
;;;105        uint8_t event;
;;;106        os_msg_queue_create(&io_queue_handle, MAX_NUMBER_OF_IO_MESSAGE, sizeof(T_IO_MSG));
        0x0080f2ce:    206a        j       MOVS     r0,#0x6a
        0x0080f2d0:    9000        ..      STR      r0,[sp,#0]
        0x0080f2d2:    4b34        4K      LDR      r3,[pc,#208] ; [0x80f3a4] = 0x81c134
        0x0080f2d4:    4834        4H      LDR      r0,[pc,#208] ; [0x80f3a8] = 0x20821c
        0x0080f2d6:    3316        .3      ADDS     r3,r3,#0x16
        0x0080f2d8:    2208        ."      MOVS     r2,#8
        0x0080f2da:    2120         !      MOVS     r1,#0x20
        0x0080f2dc:    3008        .0      ADDS     r0,r0,#8
        0x0080f2de:    f416f609    ....    BL       os_msg_queue_create_intern ; 0x25ef4
;;;107        os_msg_queue_create(&evt_queue_handle, MAX_NUMBER_OF_EVENT_MESSAGE, sizeof(uint8_t));
        0x0080f2e2:    206b        k       MOVS     r0,#0x6b
        0x0080f2e4:    9000        ..      STR      r0,[sp,#0]
        0x0080f2e6:    4b2f        /K      LDR      r3,[pc,#188] ; [0x80f3a4] = 0x81c134
        0x0080f2e8:    482f        /H      LDR      r0,[pc,#188] ; [0x80f3a8] = 0x20821c
        0x0080f2ea:    3316        .3      ADDS     r3,r3,#0x16
        0x0080f2ec:    2201        ."      MOVS     r2,#1
        0x0080f2ee:    2160        `!      MOVS     r1,#0x60
        0x0080f2f0:    1d00        ..      ADDS     r0,r0,#4
        0x0080f2f2:    f416f5ff    ....    BL       os_msg_queue_create_intern ; 0x25ef4
;;;108        os_msg_queue_create(&tuya_queue_handle, MAX_NUMBER_OF_TUYA_MESSAGE, sizeof(tuya_ble_evt_param_t));
        0x0080f2f6:    206c        l       MOVS     r0,#0x6c
        0x0080f2f8:    9000        ..      STR      r0,[sp,#0]
        0x0080f2fa:    4b2a        *K      LDR      r3,[pc,#168] ; [0x80f3a4] = 0x81c134
        0x0080f2fc:    482a        *H      LDR      r0,[pc,#168] ; [0x80f3a8] = 0x20821c
        0x0080f2fe:    3316        .3      ADDS     r3,r3,#0x16
        0x0080f300:    222c        ,"      MOVS     r2,#0x2c
        0x0080f302:    2120         !      MOVS     r1,#0x20
        0x0080f304:    300c        .0      ADDS     r0,r0,#0xc
        0x0080f306:    f416f5f5    ....    BL       os_msg_queue_create_intern ; 0x25ef4
;;;109        
;;;110        gap_start_bt_stack(evt_queue_handle, io_queue_handle, MAX_NUMBER_OF_GAP_MESSAGE);
        0x0080f30a:    4c27        'L      LDR      r4,[pc,#156] ; [0x80f3a8] = 0x20821c
        0x0080f30c:    2220         "      MOVS     r2,#0x20
        0x0080f30e:    e9d40101    ....    LDRD     r0,r1,[r4,#4]
        0x0080f312:    f43cf5aa    <...    BL       gap_start_bt_stack ; 0x4be6a
;;;111    
;;;112        tuya_ble_app_init();
        0x0080f316:    f000ff35    ..5.    BL       tuya_ble_app_init ; 0x810184
;;;113        
;;;114        driver_init();
        0x0080f31a:    f000f906    ....    BL       driver_init ; 0x80f52a
;;;115        
;;;116        while (true)
;;;117        {
;;;118            if (os_msg_recv(evt_queue_handle, &event, 0xFFFFFFFF) == true)
        0x0080f31e:    2576        v%      MOVS     r5,#0x76
        0x0080f320:    f04f36ff    O..6    MOV      r6,#0xffffffff
        0x0080f324:    4b1f        .K      LDR      r3,[pc,#124] ; [0x80f3a4] = 0x81c134
        0x0080f326:    9500        ..      STR      r5,[sp,#0]
        0x0080f328:    3316        .3      ADDS     r3,r3,#0x16
        0x0080f32a:    4632        2F      MOV      r2,r6
        0x0080f32c:    a90c        ..      ADD      r1,sp,#0x30
        0x0080f32e:    6860        `h      LDR      r0,[r4,#4]
        0x0080f330:    f416f688    ....    BL       os_msg_recv_intern ; 0x26044
        0x0080f334:    2800        .(      CMP      r0,#0
        0x0080f336:    d0f5        ..      BEQ      0x80f324 ; app_main_task + 88
;;;119            {
;;;120                if (event == EVENT_IO_TO_APP)
        0x0080f338:    f89d0030    ..0.    LDRB     r0,[sp,#0x30]
        0x0080f33c:    2802        .(      CMP      r0,#2
        0x0080f33e:    d004        ..      BEQ      0x80f34a ; app_main_task + 126
        0x0080f340:    2810        .(      CMP      r0,#0x10
        0x0080f342:    d012        ..      BEQ      0x80f36a ; app_main_task + 158
        0x0080f344:    f43cf5fe    <...    BL       gap_handle_msg ; 0x4bf44
        0x0080f348:    e7ec        ..      B        0x80f324 ; app_main_task + 88
;;;121                {
;;;122                    T_IO_MSG io_msg;
;;;123                    if (os_msg_recv(io_queue_handle, &io_msg, 0) == true)
        0x0080f34a:    207b        {       MOVS     r0,#0x7b
        0x0080f34c:    4b15        .K      LDR      r3,[pc,#84] ; [0x80f3a4] = 0x81c134
        0x0080f34e:    9000        ..      STR      r0,[sp,#0]
        0x0080f350:    3316        .3      ADDS     r3,r3,#0x16
        0x0080f352:    2200        ."      MOVS     r2,#0
        0x0080f354:    a901        ..      ADD      r1,sp,#4
        0x0080f356:    68a0        .h      LDR      r0,[r4,#8]
        0x0080f358:    f416f674    ..t.    BL       os_msg_recv_intern ; 0x26044
        0x0080f35c:    2800        .(      CMP      r0,#0
        0x0080f35e:    d0e1        ..      BEQ      0x80f324 ; app_main_task + 88
        0x0080f360:    e9dd0101    ....    LDRD     r0,r1,[sp,#4]
;;;124                    {
;;;125                        app_handle_io_msg(io_msg);
        0x0080f364:    f000fb4a    ..J.    BL       app_handle_io_msg ; 0x80f9fc
        0x0080f368:    e7dc        ..      B        0x80f324 ; app_main_task + 88
;;;126                    }
;;;127                }
;;;128                else if(event == EVENT_APP_CUSTOM)
;;;129    			{
;;;130    				tuya_ble_evt_param_t tuya_evt;
;;;131    				if (os_msg_recv(tuya_queue_handle, &tuya_evt, 0) == true)
        0x0080f36a:    2083        .       MOVS     r0,#0x83
        0x0080f36c:    4b0d        .K      LDR      r3,[pc,#52] ; [0x80f3a4] = 0x81c134
        0x0080f36e:    9000        ..      STR      r0,[sp,#0]
        0x0080f370:    3316        .3      ADDS     r3,r3,#0x16
        0x0080f372:    2200        ."      MOVS     r2,#0
        0x0080f374:    a901        ..      ADD      r1,sp,#4
        0x0080f376:    68e0        .h      LDR      r0,[r4,#0xc]
        0x0080f378:    f416f664    ..d.    BL       os_msg_recv_intern ; 0x26044
        0x0080f37c:    2800        .(      CMP      r0,#0
        0x0080f37e:    d0d1        ..      BEQ      0x80f324 ; app_main_task + 88
;;;132                    {
;;;133    					tuya_ble_event_process(&tuya_evt);
        0x0080f380:    a801        ..      ADD      r0,sp,#4
        0x0080f382:    f00cfc8c    ....    BL       tuya_ble_event_process ; 0x81bc9e
        0x0080f386:    e7cd        ..      B        0x80f324 ; app_main_task + 88
    app_task_init
        0x0080f388:    b51c        ..      PUSH     {r2-r4,lr}
;;; .\sample\app_task.c (94)
        0x0080f38a:    2101        .!      MOVS     r1,#1
        0x0080f38c:    0308        ..      LSLS     r0,r1,#12
        0x0080f38e:    2300        .#      MOVS     r3,#0
        0x0080f390:    f2af02c7    ....    ADR      r2,{pc}-0xc3 ; 0x80f2cd
        0x0080f394:    e9cd0100    ....    STRD     r0,r1,[sp,#0]
        0x0080f398:    a104        ..      ADR      r1,{pc}+0x14 ; 0x80f3ac
        0x0080f39a:    4803        .H      LDR      r0,[pc,#12] ; [0x80f3a8] = 0x20821c
        0x0080f39c:    f417f318    ....    BL       os_task_create ; 0x269d0
;;;95                        APP_TASK_PRIORITY);
;;;96     }
        0x0080f3a0:    bd1c        ..      POP      {r2-r4,pc}
    $d
        0x0080f3a2:    0000        ..      DCW    0
        0x0080f3a4:    0081c134    4...    DCD    8503604
        0x0080f3a8:    0020821c    .. .    DCD    2130460
        0x0080f3ac:    00707061    app.    DCD    7368801
    $t
    .text
    app_le_gap_init
;;; sample\main.c
;;;99     {
        0x0080f3b0:    b500        ..      PUSH     {lr}
        0x0080f3b2:    b09d        ..      SUB      sp,sp,#0x74
;;;100        /* Device name and device appearance */
;;;101        uint8_t  device_name[GAP_DEVICE_NAME_LEN] = "TY";
        0x0080f3b4:    2228        ("      MOVS     r2,#0x28
        0x0080f3b6:    49a1        .I      LDR      r1,[pc,#644] ; [0x80f63c] = 0x81c190
        0x0080f3b8:    4668        hF      MOV      r0,sp
        0x0080f3ba:    f44af5f5    J...    BL       __aeabi_memcpy4 ; 0x59fa8
;;;102        uint16_t appearance = GAP_GATT_APPEARANCE_UNKNOWN;
        0x0080f3be:    2000        .       MOVS     r0,#0
        0x0080f3c0:    f88d004c    ..L.    STRB     r0,[sp,#0x4c]
        0x0080f3c4:    2107        .!      MOVS     r1,#7
        0x0080f3c6:    f88d1038    ..8.    STRB     r1,[sp,#0x38]
        0x0080f3ca:    f44f71a0    O..q    MOV      r1,#0x140
;;;103        uint8_t  slave_init_mtu_req = false;
        0x0080f3ce:    f88d0044    ..D.    STRB     r0,[sp,#0x44]
;;;104    
;;;105    
;;;106        /* Advertising parameters */
;;;107        uint8_t  adv_evt_type = GAP_ADTYPE_ADV_IND;
        0x0080f3d2:    f88d0048    ..H.    STRB     r0,[sp,#0x48]
        0x0080f3d6:    f8ad1030    ..0.    STRH     r1,[sp,#0x30]
        0x0080f3da:    f8ad1034    ..4.    STRH     r1,[sp,#0x34]
;;;108        uint8_t  adv_direct_type = GAP_REMOTE_ADDR_LE_PUBLIC;
;;;109        uint8_t  adv_direct_addr[GAP_BD_ADDR_LEN] = {0};
        0x0080f3de:    900a        ..      STR      r0,[sp,#0x28]
        0x0080f3e0:    2101        .!      MOVS     r1,#1
        0x0080f3e2:    f8ad0040    ..@.    STRH     r0,[sp,#0x40]
        0x0080f3e6:    f88d003c    ..<.    STRB     r0,[sp,#0x3c]
        0x0080f3ea:    2203        ."      MOVS     r2,#3
;;;110        uint8_t  adv_chann_map = GAP_ADVCHAN_ALL;
        0x0080f3ec:    900b        ..      STR      r0,[sp,#0x2c]
;;;111        uint8_t  adv_filter_policy = GAP_ADV_FILTER_ANY;
;;;112        uint16_t adv_int_min = DEFAULT_ADVERTISING_INTERVAL_MIN;
;;;113        uint16_t adv_int_max = DEFAULT_ADVERTISING_INTERVAL_MAX;
;;;114    
;;;115        /* GAP Bond Manager parameters */
;;;116        uint8_t  auth_pair_mode = GAP_PAIRING_MODE_PAIRABLE;
        0x0080f3ee:    f88d1050    ..P.    STRB     r1,[sp,#0x50]
        0x0080f3f2:    f88d2058    ..X     STRB     r2,[sp,#0x58]
;;;117        uint16_t auth_flags = GAP_AUTHEN_BIT_NONE;//GAP_AUTHEN_BIT_BONDING_FLAG;
        0x0080f3f6:    f8ad0054    ..T.    STRH     r0,[sp,#0x54]
;;;118        uint8_t  auth_io_cap = GAP_IO_CAP_NO_INPUT_NO_OUTPUT;
;;;119        uint8_t  auth_oob = false;
        0x0080f3fa:    f88d005c    ..\.    STRB     r0,[sp,#0x5c]
;;;120        uint8_t  auth_use_fix_passkey = false;
        0x0080f3fe:    f88d0060    ..`.    STRB     r0,[sp,#0x60]
;;;121        uint32_t auth_fix_passkey = 0;
;;;122    #if F_BT_ANCS_CLIENT_SUPPORT
;;;123        uint8_t  auth_sec_req_enable = true;
;;;124    #else
;;;125        uint8_t  auth_sec_req_enable = false;
        0x0080f402:    9019        ..      STR      r0,[sp,#0x64]
        0x0080f404:    f88d0068    ..h.    STRB     r0,[sp,#0x68]
;;;126    #endif
;;;127        uint16_t auth_sec_req_flags = GAP_AUTHEN_BIT_BONDING_FLAG;
        0x0080f408:    f8ad106c    ..l.    STRH     r1,[sp,#0x6c]
;;;128    
;;;129        /* Set device name and device appearance */
;;;130        le_set_gap_param(GAP_PARAM_DEVICE_NAME, GAP_DEVICE_NAME_LEN, device_name);
        0x0080f40c:    466a        jF      MOV      r2,sp
        0x0080f40e:    2128        (!      MOVS     r1,#0x28
        0x0080f410:    f2402022    @."     MOV      r0,#0x222
        0x0080f414:    f43df418    =...    BL       le_set_gap_param ; 0x4cc48
;;;131        le_set_gap_param(GAP_PARAM_APPEARANCE, sizeof(appearance), &appearance);
        0x0080f418:    aa10        ..      ADD      r2,sp,#0x40
        0x0080f41a:    2102        .!      MOVS     r1,#2
        0x0080f41c:    f2402021    @.!     MOV      r0,#0x221
        0x0080f420:    f43df412    =...    BL       le_set_gap_param ; 0x4cc48
;;;132        le_set_gap_param(GAP_PARAM_SLAVE_INIT_GATT_MTU_REQ, sizeof(slave_init_mtu_req),
        0x0080f424:    aa11        ..      ADD      r2,sp,#0x44
        0x0080f426:    2101        .!      MOVS     r1,#1
        0x0080f428:    f2402023    @.#     MOV      r0,#0x223
        0x0080f42c:    f43df40c    =...    BL       le_set_gap_param ; 0x4cc48
;;;133                         &slave_init_mtu_req);
;;;134    
;;;135        /* Set advertising parameters */
;;;136        le_adv_set_param(GAP_PARAM_ADV_EVENT_TYPE, sizeof(adv_evt_type), &adv_evt_type);
        0x0080f430:    aa12        ..      ADD      r2,sp,#0x48
        0x0080f432:    2101        .!      MOVS     r1,#1
        0x0080f434:    f2402063    @.c     MOV      r0,#0x263
        0x0080f438:    f442f52a    B.*.    BL       le_adv_set_param ; 0x51e90
;;;137        le_adv_set_param(GAP_PARAM_ADV_DIRECT_ADDR_TYPE, sizeof(adv_direct_type), &adv_direct_type);
        0x0080f43c:    aa13        ..      ADD      r2,sp,#0x4c
        0x0080f43e:    2101        .!      MOVS     r1,#1
        0x0080f440:    f44f7019    O..p    MOV      r0,#0x264
        0x0080f444:    f442f524    B.$.    BL       le_adv_set_param ; 0x51e90
;;;138        le_adv_set_param(GAP_PARAM_ADV_DIRECT_ADDR, sizeof(adv_direct_addr), adv_direct_addr);
        0x0080f448:    aa0a        ..      ADD      r2,sp,#0x28
        0x0080f44a:    2106        .!      MOVS     r1,#6
        0x0080f44c:    f2402065    @.e     MOV      r0,#0x265
        0x0080f450:    f442f51e    B...    BL       le_adv_set_param ; 0x51e90
;;;139        le_adv_set_param(GAP_PARAM_ADV_CHANNEL_MAP, sizeof(adv_chann_map), &adv_chann_map);
        0x0080f454:    aa0e        ..      ADD      r2,sp,#0x38
        0x0080f456:    2101        .!      MOVS     r1,#1
        0x0080f458:    f2402066    @.f     MOV      r0,#0x266
        0x0080f45c:    f442f518    B...    BL       le_adv_set_param ; 0x51e90
;;;140        le_adv_set_param(GAP_PARAM_ADV_FILTER_POLICY, sizeof(adv_filter_policy), &adv_filter_policy);
        0x0080f460:    aa0f        ..      ADD      r2,sp,#0x3c
        0x0080f462:    2101        .!      MOVS     r1,#1
        0x0080f464:    f2402067    @.g     MOV      r0,#0x267
        0x0080f468:    f442f512    B...    BL       le_adv_set_param ; 0x51e90
;;;141        le_adv_set_param(GAP_PARAM_ADV_INTERVAL_MIN, sizeof(adv_int_min), &adv_int_min);
        0x0080f46c:    aa0c        ..      ADD      r2,sp,#0x30
        0x0080f46e:    2102        .!      MOVS     r1,#2
        0x0080f470:    f44f701a    O..p    MOV      r0,#0x268
        0x0080f474:    f442f50c    B...    BL       le_adv_set_param ; 0x51e90
;;;142        le_adv_set_param(GAP_PARAM_ADV_INTERVAL_MAX, sizeof(adv_int_max), &adv_int_max);
        0x0080f478:    aa0d        ..      ADD      r2,sp,#0x34
        0x0080f47a:    2102        .!      MOVS     r1,#2
        0x0080f47c:    f2402069    @.i     MOV      r0,#0x269
        0x0080f480:    f442f506    B...    BL       le_adv_set_param ; 0x51e90
;;;143        le_adv_set_param(GAP_PARAM_ADV_DATA, sizeof(adv_data), (void *)adv_data);
        0x0080f484:    4a6d        mJ      LDR      r2,[pc,#436] ; [0x80f63c] = 0x81c190
        0x0080f486:    211f        .!      MOVS     r1,#0x1f
        0x0080f488:    3a20         :      SUBS     r2,r2,#0x20
        0x0080f48a:    f2402061    @.a     MOV      r0,#0x261
        0x0080f48e:    f442f4ff    B...    BL       le_adv_set_param ; 0x51e90
;;;144        le_adv_set_param(GAP_PARAM_SCAN_RSP_DATA, sizeof(scan_rsp_data), (void *)scan_rsp_data);
        0x0080f492:    4a6a        jJ      LDR      r2,[pc,#424] ; [0x80f63c] = 0x81c190
        0x0080f494:    2118        .!      MOVS     r1,#0x18
        0x0080f496:    3a38        8:      SUBS     r2,r2,#0x38
        0x0080f498:    f2402062    @.b     MOV      r0,#0x262
        0x0080f49c:    f442f4f8    B...    BL       le_adv_set_param ; 0x51e90
;;;145    
;;;146        /* Setup the GAP Bond Manager */
;;;147        gap_set_param(GAP_PARAM_BOND_PAIRING_MODE, sizeof(auth_pair_mode), &auth_pair_mode);
        0x0080f4a0:    aa14        ..      ADD      r2,sp,#0x50
        0x0080f4a2:    2101        .!      MOVS     r1,#1
        0x0080f4a4:    f2402002    @..     MOV      r0,#0x202
        0x0080f4a8:    f43cf57f    <...    BL       gap_set_param ; 0x4bfaa
;;;148        gap_set_param(GAP_PARAM_BOND_AUTHEN_REQUIREMENTS_FLAGS, sizeof(auth_flags), &auth_flags);
        0x0080f4ac:    aa15        ..      ADD      r2,sp,#0x54
        0x0080f4ae:    2102        .!      MOVS     r1,#2
        0x0080f4b0:    f2402003    @..     MOV      r0,#0x203
        0x0080f4b4:    f43cf579    <.y.    BL       gap_set_param ; 0x4bfaa
;;;149        gap_set_param(GAP_PARAM_BOND_IO_CAPABILITIES, sizeof(auth_io_cap), &auth_io_cap);
        0x0080f4b8:    aa16        ..      ADD      r2,sp,#0x58
        0x0080f4ba:    2101        .!      MOVS     r1,#1
        0x0080f4bc:    f44f7001    O..p    MOV      r0,#0x204
        0x0080f4c0:    f43cf573    <.s.    BL       gap_set_param ; 0x4bfaa
;;;150        gap_set_param(GAP_PARAM_BOND_OOB_ENABLED, sizeof(auth_oob), &auth_oob);
        0x0080f4c4:    aa17        ..      ADD      r2,sp,#0x5c
        0x0080f4c6:    2101        .!      MOVS     r1,#1
        0x0080f4c8:    f2402005    @..     MOV      r0,#0x205
        0x0080f4cc:    f43cf56d    <.m.    BL       gap_set_param ; 0x4bfaa
;;;151        le_bond_set_param(GAP_PARAM_BOND_FIXED_PASSKEY, sizeof(auth_fix_passkey), &auth_fix_passkey);
        0x0080f4d0:    aa19        ..      ADD      r2,sp,#0x64
        0x0080f4d2:    2104        .!      MOVS     r1,#4
        0x0080f4d4:    f2402011    @..     MOV      r0,#0x211
        0x0080f4d8:    f43cf689    <...    BL       le_bond_set_param ; 0x4c1ee
;;;152        le_bond_set_param(GAP_PARAM_BOND_FIXED_PASSKEY_ENABLE, sizeof(auth_use_fix_passkey),
        0x0080f4dc:    aa18        ..      ADD      r2,sp,#0x60
        0x0080f4de:    2101        .!      MOVS     r1,#1
        0x0080f4e0:    f2402012    @..     MOV      r0,#0x212
        0x0080f4e4:    f43cf683    <...    BL       le_bond_set_param ; 0x4c1ee
;;;153                          &auth_use_fix_passkey);
;;;154        le_bond_set_param(GAP_PARAM_BOND_SEC_REQ_ENABLE, sizeof(auth_sec_req_enable), &auth_sec_req_enable);
        0x0080f4e8:    aa1a        ..      ADD      r2,sp,#0x68
        0x0080f4ea:    2101        .!      MOVS     r1,#1
        0x0080f4ec:    f2402013    @..     MOV      r0,#0x213
        0x0080f4f0:    f43cf67d    <.}.    BL       le_bond_set_param ; 0x4c1ee
;;;155        le_bond_set_param(GAP_PARAM_BOND_SEC_REQ_REQUIREMENT, sizeof(auth_sec_req_flags),
        0x0080f4f4:    aa1b        ..      ADD      r2,sp,#0x6c
        0x0080f4f6:    2102        .!      MOVS     r1,#2
        0x0080f4f8:    f44f7005    O..p    MOV      r0,#0x214
        0x0080f4fc:    f43cf677    <.w.    BL       le_bond_set_param ; 0x4c1ee
;;;156                          &auth_sec_req_flags);
;;;157    
;;;158        /* register gap message callback */
;;;159        le_register_app_cb(app_gap_callback);
        0x0080f500:    484f        OH      LDR      r0,[pc,#316] ; [0x80f640] = 0x80fa0f
        0x0080f502:    f43df39e    =...    BL       le_register_app_cb ; 0x4cc42
;;;160    }
        0x0080f506:    b01d        ..      ADD      sp,sp,#0x74
        0x0080f508:    bd00        ..      POP      {pc}
    app_le_profile_init
;;;161    
;;;162    /**
;;;163     * @brief  Add GATT services and register callbacks
;;;164     * @return void
;;;165     */
;;;166    void app_le_profile_init(void)
;;;167    {
        0x0080f50a:    b510        ..      PUSH     {r4,lr}
;;;168        server_init(1);
        0x0080f50c:    2001        .       MOVS     r0,#1
        0x0080f50e:    f43ff7f9    ?...    BL       server_init ; 0x4f504
;;;169        tuya_srv_id  = kns_add_service(app_profile_callback);
        0x0080f512:    484c        LH      LDR      r0,[pc,#304] ; [0x80f644] = 0x80fa5f
        0x0080f514:    f000fcd0    ....    BL       kns_add_service ; 0x80feb8
        0x0080f518:    494b        KI      LDR      r1,[pc,#300] ; [0x80f648] = 0x208233
        0x0080f51a:    7008        .p      STRB     r0,[r1,#0]
;;;170        server_register_app_cb(app_profile_callback);
        0x0080f51c:    e8bd4010    ...@    POP      {r4,lr}
        0x0080f520:    4848        HH      LDR      r0,[pc,#288] ; [0x80f644] = 0x80fa5f
        0x0080f522:    f440b008    @...    B        server_register_app_cb ; 0x4f536
    board_init
;;;171    #if F_BT_ANCS_CLIENT_SUPPORT
;;;172        client_init(1);
;;;173        ancs_init(APP_MAX_LINKS);
;;;174    #endif
;;;175    }
;;;176    
;;;177    /**
;;;178     * @brief    Contains the initialization of pinmux settings and pad settings
;;;179     * @note     All the pinmux settings and pad settings shall be initiated in this function,
;;;180     *           but if legacy driver is used, the initialization of pinmux setting and pad setting
;;;181     *           should be peformed with the IO initializing.
;;;182     * @return   void
;;;183     */
;;;184    void board_init(void)
;;;185    {
;;;186        board_uart_init();
        0x0080f526:    f000bb6c    ..l.    B.W      board_uart_init ; 0x80fc02
    driver_init
;;;187    }
;;;188    
;;;189    /**
;;;190     * @brief    Contains the initialization of peripherals
;;;191     * @note     Both new architecture driver and legacy driver initialization method can be used
;;;192     * @return   void
;;;193     */
;;;194    void driver_init(void)
;;;195    {
;;;196        driver_uart_init();  
        0x0080f52a:    f000bb8b    ....    B.W      driver_uart_init ; 0x80fc44
    io_dlps_enter_cb
;;;197    }
;;;198    
;;;199    /**
;;;200     * @brief    Contains the power mode settings
;;;201     * @return   void
;;;202     */
;;;203    void io_dlps_enter_cb(void)
;;;204    {
;;;205        uart_dlps_enter();
        0x0080f52e:    f000bbbe    ....    B.W      uart_dlps_enter ; 0x80fcae
    io_dlps_exit_cb
;;;206    }
;;;207    
;;;208    void io_dlps_exit_cb(void)
;;;209    {
;;;210        uart_dlps_exit();
        0x0080f532:    f000bbcc    ....    B.W      uart_dlps_exit ; 0x80fcce
    io_dlps_check_cb
;;;211    }
;;;212    
;;;213    bool io_dlps_check_cb(void)
;;;214    {
;;;215        return (uart_dlps_check());
        0x0080f536:    f000bbd5    ....    B.W      uart_dlps_check ; 0x80fce4
    pwr_mgr_init
;;;216    }
;;;217    
;;;218    void pwr_mgr_init(void)
;;;219    {
        0x0080f53a:    b510        ..      PUSH     {r4,lr}
;;;220    #if F_BT_DLPS_EN
;;;221        if (false == dlps_check_cb_reg(io_dlps_check_cb))
        0x0080f53c:    f2af0009    ....    ADR      r0,{pc}-5 ; 0x80f537
        0x0080f540:    f7f9d85d    ..].    BL       dlps_check_cb_reg ; 0x85fe
        0x0080f544:    b920         .      CBNZ     r0,0x80f550 ; pwr_mgr_init + 22
;;;222        {
;;;223            APP_PRINT_ERROR0("Error: dlps_check_cb_reg(app_dlps_check_cb) failed!");
        0x0080f546:    2200        ."      MOVS     r2,#0
        0x0080f548:    4940        @I      LDR      r1,[pc,#256] ; [0x80f64c] = 0x8800114
        0x0080f54a:    4841        AH      LDR      r0,[pc,#260] ; [0x80f650] = 0x21103000
        0x0080f54c:    f7f8da87    ....    BL       log_buffer ; 0x7a5e
;;;224        }
;;;225        DLPS_IORegUserDlpsEnterCb(io_dlps_enter_cb);
        0x0080f550:    f2af0025    ..%.    ADR      r0,{pc}-0x21 ; 0x80f52f
;;; ..\..\..\inc\peripheral\rtl876x_io_dlps.h
;;;88         User_IO_EnterDlpsCB = func;
        0x0080f554:    493f        ?I      LDR      r1,[pc,#252] ; [0x80f654] = 0x20815c
;;; sample\main.c
;;;226        DLPS_IORegUserDlpsExitCb(io_dlps_exit_cb);
        0x0080f556:    6008        .`      STR      r0,[r1,#0]
        0x0080f558:    f2af0029    ..).    ADR      r0,{pc}-0x25 ; 0x80f533
;;; ..\..\..\inc\peripheral\rtl876x_io_dlps.h
;;;72         User_IO_ExitDlpsCB = func;
        0x0080f55c:    493e        >I      LDR      r1,[pc,#248] ; [0x80f658] = 0x208158
;;; sample\main.c
;;;227        DLPS_IORegister();
        0x0080f55e:    6008        .`      STR      r0,[r1,#0]
        0x0080f560:    f7fff998    ....    BL       DLPS_IORegister ; 0x80e894
;;;228        lps_mode_set(LPM_DLPS_MODE);
        0x0080f564:    e8bd4010    ...@    POP      {r4,lr}
        0x0080f568:    2002        .       MOVS     r0,#2
        0x0080f56a:    f7f99978    ..x.    B        lps_mode_set ; 0x885e
    vtimer_io_uart_dlps_monitor_callback
;;;229    #endif
;;;230    }
;;;231    
;;;232    typedef void *TimerHandle_t;
;;;233    
;;;234    #define io_uart_dlps_monitor_timeout_ms 30000
;;;235    
;;;236    TimerHandle_t xTimer_io_uart_dlps_monitor; 
;;;237    
;;;238    
;;;239    static void vtimer_io_uart_dlps_monitor_callback(TimerHandle_t pxTimer)
;;;240    {
        0x0080f56e:    b510        ..      PUSH     {r4,lr}
;;;241        if(!uart_dlps_check())  
        0x0080f570:    f000fbb8    ....    BL       uart_dlps_check ; 0x80fce4
        0x0080f574:    2800        .(      CMP      r0,#0
        0x0080f576:    d104        ..      BNE      0x80f582 ; vtimer_io_uart_dlps_monitor_callback + 20
;;;242        {
;;;243            uart_dlps_enter_allowed_set(true);
        0x0080f578:    e8bd4010    ...@    POP      {r4,lr}
        0x0080f57c:    2001        .       MOVS     r0,#1
        0x0080f57e:    f000bb30    ..0.    B.W      uart_dlps_enter_allowed_set ; 0x80fbe2
;;;244        }
;;;245    
;;;246    }
        0x0080f582:    bd10        ..      POP      {r4,pc}
    io_uart_dlps_monitor_timer_start
;;;247    
;;;248    
;;;249    static void io_uart_dlps_monitor_timer_init(void)
;;;250    {
;;;251        bool retval ;
;;;252        /* xTimersRmcPairBtn is used to start bt pair process after timeout */
;;;253    
;;;254        retval = os_timer_create(&xTimer_io_uart_dlps_monitor, "xTimerIoUartDlpsMonitor",  3, io_uart_dlps_monitor_timeout_ms/*2s*/, false, vtimer_io_uart_dlps_monitor_callback);
;;;255        if (!retval)
;;;256        {
;;;257            APP_PRINT_INFO1("xTimerIoUartDlpsMonitor creat retval is %d", retval);
;;;258        }
;;;259    }
;;;260    
;;;261    
;;;262    void io_uart_dlps_monitor_timer_start(void)
;;;263    {
        0x0080f584:    b508        ..      PUSH     {r3,lr}
;;;264        uint32_t timer_state;
;;;265        os_timer_state_get(&xTimer_io_uart_dlps_monitor,&timer_state);
        0x0080f586:    4669        iF      MOV      r1,sp
        0x0080f588:    4834        4H      LDR      r0,[pc,#208] ; [0x80f65c] = 0x20822c
        0x0080f58a:    f417f39b    ....    BL       os_timer_state_get ; 0x26cc4
;;;266        if(timer_state)
        0x0080f58e:    9800        ..      LDR      r0,[sp,#0]
        0x0080f590:    b128        (.      CBZ      r0,0x80f59e ; io_uart_dlps_monitor_timer_start + 26
;;;267        {
;;;268            // Timer is active, do something.
;;;269            os_timer_restart(&xTimer_io_uart_dlps_monitor,io_uart_dlps_monitor_timeout_ms);
        0x0080f592:    f2475130    G.0Q    MOV      r1,#0x7530
        0x0080f596:    4831        1H      LDR      r0,[pc,#196] ; [0x80f65c] = 0x20822c
        0x0080f598:    f417f351    ..Q.    BL       os_timer_restart ; 0x26c3e
        0x0080f59c:    bd08        ..      POP      {r3,pc}
;;;270        }
;;;271        else
;;;272        {
;;;273            os_timer_start(&xTimer_io_uart_dlps_monitor);
        0x0080f59e:    482f        /H      LDR      r0,[pc,#188] ; [0x80f65c] = 0x20822c
        0x0080f5a0:    f417f33c    ..<.    BL       os_timer_start ; 0x26c1c
;;;274        }
;;;275    
;;;276    }
        0x0080f5a4:    bd08        ..      POP      {r3,pc}
    io_uart_dlps_monitor_timer_stop
;;;277    
;;;278    
;;;279    void io_uart_dlps_monitor_timer_stop(void)
;;;280    {
;;;281        os_timer_stop(&xTimer_io_uart_dlps_monitor);    
        0x0080f5a6:    482d        -H      LDR      r0,[pc,#180] ; [0x80f65c] = 0x20822c
        0x0080f5a8:    f417b35c    ..\.    B        os_timer_stop ; 0x26c64
    task_init
;;;282    }
;;;283    
;;;284    
;;;285    
;;;286    
;;;287    /**
;;;288     * @brief    Contains the initialization of all tasks
;;;289     * @note     There is only one task in BLE Peripheral APP, thus only one APP task is init here
;;;290     * @return   void
;;;291     */
;;;292    void task_init(void)
;;;293    {
;;;294        app_task_init();
        0x0080f5ac:    f7ffbeec    ....    B.W      app_task_init ; 0x80f388
    main
;;;295    }
;;;296    
;;;297    /**
;;;298     * @brief    Entry of APP code
;;;299     * @return   int (To avoid compile warning)
;;;300     */
;;;301    int main(void)
;;;302    {
        0x0080f5b0:    b51c        ..      PUSH     {r2-r4,lr}
        0x0080f5b2:    482b        +H      LDR      r0,[pc,#172] ; [0x80f660] = 0x208150
        0x0080f5b4:    6800        .h      LDR      r0,[r0,#0]
        0x0080f5b6:    f00bfe79    ..y.    BL       srand ; 0x81b2ac
;;; sample\main.c (186)
        0x0080f5ba:    f000fb22    ..".    BL       board_uart_init ; 0x80fc02
        0x0080f5be:    2001        .       MOVS     r0,#1
        0x0080f5c0:    f43df2fc    =...    BL       le_gap_init ; 0x4cbbc
        0x0080f5c4:    f00bfb82    ....    BL       gap_lib_init ; 0x81accc
        0x0080f5c8:    f7fffef2    ....    BL       app_le_gap_init ; 0x80f3b0
        0x0080f5cc:    f7ffff9d    ....    BL       app_le_profile_init ; 0x80f50a
        0x0080f5d0:    f7ffffb3    ....    BL       pwr_mgr_init ; 0x80f53a
;;;187    }
;;;188    
;;;189    /**
;;;190     * @brief    Contains the initialization of peripherals
;;;191     * @note     Both new architecture driver and legacy driver initialization method can be used
;;;192     * @return   void
;;;193     */
;;;194    void driver_init(void)
;;;195    {
;;;196        driver_uart_init();  
;;;197    }
;;;198    
;;;199    /**
;;;200     * @brief    Contains the power mode settings
;;;201     * @return   void
;;;202     */
;;;203    void io_dlps_enter_cb(void)
;;;204    {
;;;205        uart_dlps_enter();
;;;206    }
;;;207    
;;;208    void io_dlps_exit_cb(void)
;;;209    {
;;;210        uart_dlps_exit();
;;;211    }
;;;212    
;;;213    bool io_dlps_check_cb(void)
;;;214    {
;;;215        return (uart_dlps_check());
;;;216    }
;;;217    
;;;218    void pwr_mgr_init(void)
;;;219    {
;;;220    #if F_BT_DLPS_EN
;;;221        if (false == dlps_check_cb_reg(io_dlps_check_cb))
;;;222        {
;;;223            APP_PRINT_ERROR0("Error: dlps_check_cb_reg(app_dlps_check_cb) failed!");
;;;224        }
;;;225        DLPS_IORegUserDlpsEnterCb(io_dlps_enter_cb);
;;;226        DLPS_IORegUserDlpsExitCb(io_dlps_exit_cb);
;;;227        DLPS_IORegister();
;;;228        lps_mode_set(LPM_DLPS_MODE);
;;;229    #endif
;;;230    }
;;;231    
;;;232    typedef void *TimerHandle_t;
;;;233    
;;;234    #define io_uart_dlps_monitor_timeout_ms 30000
;;;235    
;;;236    TimerHandle_t xTimer_io_uart_dlps_monitor; 
;;;237    
;;;238    
;;;239    static void vtimer_io_uart_dlps_monitor_callback(TimerHandle_t pxTimer)
;;;240    {
;;;241        if(!uart_dlps_check())  
;;;242        {
;;;243            uart_dlps_enter_allowed_set(true);
;;;244        }
;;;245    
;;;246    }
;;;247    
;;;248    
;;;249    static void io_uart_dlps_monitor_timer_init(void)
;;;250    {
;;;251        bool retval ;
;;;252        /* xTimersRmcPairBtn is used to start bt pair process after timeout */
;;;253    
;;;254        retval = os_timer_create(&xTimer_io_uart_dlps_monitor, "xTimerIoUartDlpsMonitor",  3, io_uart_dlps_monitor_timeout_ms/*2s*/, false, vtimer_io_uart_dlps_monitor_callback);
        0x0080f5d4:    4923        #I      LDR      r1,[pc,#140] ; [0x80f664] = 0x80f56f
        0x0080f5d6:    2000        .       MOVS     r0,#0
        0x0080f5d8:    e9cd0100    ....    STRD     r0,r1,[sp,#0]
        0x0080f5dc:    f2475330    G.0S    MOV      r3,#0x7530
        0x0080f5e0:    2203        ."      MOVS     r2,#3
        0x0080f5e2:    a121        !.      ADR      r1,{pc}+0x86 ; 0x80f668
        0x0080f5e4:    481d        .H      LDR      r0,[pc,#116] ; [0x80f65c] = 0x20822c
        0x0080f5e6:    f417f2f6    ....    BL       os_timer_create ; 0x26bd6
        0x0080f5ea:    0003        ..      MOVS     r3,r0
;;;255        if (!retval)
        0x0080f5ec:    d106        ..      BNE      0x80f5fc ; main + 76
;;;256        {
;;;257            APP_PRINT_INFO1("xTimerIoUartDlpsMonitor creat retval is %d", retval);
        0x0080f5ee:    4917        .I      LDR      r1,[pc,#92] ; [0x80f64c] = 0x8800114
        0x0080f5f0:    4817        .H      LDR      r0,[pc,#92] ; [0x80f650] = 0x21103000
        0x0080f5f2:    2201        ."      MOVS     r2,#1
        0x0080f5f4:    3138        81      ADDS     r1,r1,#0x38
        0x0080f5f6:    1c80        ..      ADDS     r0,r0,#2
        0x0080f5f8:    f7f8da31    ..1.    BL       log_buffer ; 0x7a5e
;;;258        }
;;;259    }
;;;260    
;;;261    
;;;262    void io_uart_dlps_monitor_timer_start(void)
;;;263    {
;;;264        uint32_t timer_state;
;;;265        os_timer_state_get(&xTimer_io_uart_dlps_monitor,&timer_state);
;;;266        if(timer_state)
;;;267        {
;;;268            // Timer is active, do something.
;;;269            os_timer_restart(&xTimer_io_uart_dlps_monitor,io_uart_dlps_monitor_timeout_ms);
;;;270        }
;;;271        else
;;;272        {
;;;273            os_timer_start(&xTimer_io_uart_dlps_monitor);
;;;274        }
;;;275    
;;;276    }
;;;277    
;;;278    
;;;279    void io_uart_dlps_monitor_timer_stop(void)
;;;280    {
;;;281        os_timer_stop(&xTimer_io_uart_dlps_monitor);    
;;;282    }
;;;283    
;;;284    
;;;285    
;;;286    
;;;287    /**
;;;288     * @brief    Contains the initialization of all tasks
;;;289     * @note     There is only one task in BLE Peripheral APP, thus only one APP task is init here
;;;290     * @return   void
;;;291     */
;;;292    void task_init(void)
;;;293    {
;;;294        app_task_init();
        0x0080f5fc:    f7fffec4    ....    BL       app_task_init ; 0x80f388
;;;295    }
;;;296    
;;;297    /**
;;;298     * @brief    Entry of APP code
;;;299     * @return   int (To avoid compile warning)
;;;300     */
;;;301    int main(void)
;;;302    {
;;;303        extern uint32_t random_seed_value;
;;;304        srand(random_seed_value);
;;;305        board_init();
;;;306        le_gap_init(APP_MAX_LINKS);
;;;307        gap_lib_init();
;;;308        app_le_gap_init();
;;;309        app_le_profile_init();
;;;310        pwr_mgr_init();
;;;311        io_uart_dlps_monitor_timer_init();
;;;312        task_init();
;;;313        os_sched_start();
        0x0080f600:    f417f0df    ....    BL       os_sched_start ; 0x267c2
;;;314    
;;;315        return 0;
        0x0080f604:    2000        .       MOVS     r0,#0
;;;316    }
        0x0080f606:    bd1c        ..      POP      {r2-r4,pc}
    System_Handler
;;;317    
;;;318    
;;;319    /**
;;;320      * @brief  System interrupt handler function, for wakeup pin.
;;;321      * @param  No parameter.
;;;322      * @return void
;;;323    */
;;;324    void System_Handler(void)
;;;325    {
;;;326        APP_PRINT_INFO0("[main] System_Handler");
        0x0080f608:    4910        .I      LDR      r1,[pc,#64] ; [0x80f64c] = 0x8800114
        0x0080f60a:    4811        .H      LDR      r0,[pc,#68] ; [0x80f650] = 0x21103000
;;; sample\main.c (325)
        0x0080f60c:    b510        ..      PUSH     {r4,lr}
;;;326        APP_PRINT_INFO0("[main] System_Handler");
        0x0080f60e:    2200        ."      MOVS     r2,#0
        0x0080f610:    3168        h1      ADDS     r1,r1,#0x68
        0x0080f612:    1c80        ..      ADDS     r0,r0,#2
        0x0080f614:    f7f8da23    ..#.    BL       log_buffer ; 0x7a5e
;;;327        if (System_WakeUpInterruptValue(UART_RX_PIN) == SET)
        0x0080f618:    2019        .       MOVS     r0,#0x19
        0x0080f61a:    f401f7ac    ....    BL       System_WakeUpInterruptValue ; 0x11576
        0x0080f61e:    2801        .(      CMP      r0,#1
        0x0080f620:    d10b        ..      BNE      0x80f63a ; System_Handler + 50
;;;328        {
;;;329            Pad_ClearWakeupINTPendingBit(UART_RX_PIN);
        0x0080f622:    2019        .       MOVS     r0,#0x19
        0x0080f624:    f402f045    ..E.    BL       Pad_ClearWakeupINTPendingBit ; 0x116b2
;;;330            System_WakeUpPinDisable(UART_RX_PIN);
        0x0080f628:    2019        .       MOVS     r0,#0x19
        0x0080f62a:    f401f781    ....    BL       System_WakeUpPinDisable ; 0x11530
;;;331            IO_UART_DLPS_Enter_Allowed = false;
        0x0080f62e:    4914        .I      LDR      r1,[pc,#80] ; [0x80f680] = 0x20823c
        0x0080f630:    2000        .       MOVS     r0,#0
        0x0080f632:    7008        .p      STRB     r0,[r1,#0]
;;;332            io_uart_dlps_monitor_timer_start();
        0x0080f634:    e8bd4010    ...@    POP      {r4,lr}
        0x0080f638:    e7a4        ..      B        io_uart_dlps_monitor_timer_start ; 0x80f584
;;;333        }
;;;334    }
        0x0080f63a:    bd10        ..      POP      {r4,pc}
    $d
        0x0080f63c:    0081c190    ....    DCD    8503696
        0x0080f640:    0080fa0f    ....    DCD    8452623
        0x0080f644:    0080fa5f    _...    DCD    8452703
        0x0080f648:    00208233    3. .    DCD    2130483
        0x0080f64c:    08800114    ....    DCD    142606612
        0x0080f650:    21103000    .0.!    DCD    554708992
        0x0080f654:    0020815c    \. .    DCD    2130268
        0x0080f658:    00208158    X. .    DCD    2130264
        0x0080f65c:    0020822c    ,. .    DCD    2130476
        0x0080f660:    00208150    P. .    DCD    2130256
        0x0080f664:    0080f56f    o...    DCD    8451439
        0x0080f668:    6d695478    xTim    DCD    1835619448
        0x0080f66c:    6f497265    erIo    DCD    1867084389
        0x0080f670:    74726155    Uart    DCD    1953653077
        0x0080f674:    73706c44    Dlps    DCD    1936747588
        0x0080f678:    696e6f4d    Moni    DCD    1768845133
        0x0080f67c:    00726f74    tor.    DCD    7499636
        0x0080f680:    0020823c    <. .    DCD    2130492
    $t
    .text
    app_ble_disconnect
;;; .\sample\peripheral_app.c
;;;63         if(le_disconnect(m_conn_id)==GAP_CAUSE_SUCCESS)
        0x0080f684:    48fe        .H      LDR      r0,[pc,#1016] ; [0x80fa80] = 0x208230
;;; .\sample\peripheral_app.c (62)
        0x0080f686:    b510        ..      PUSH     {r4,lr}
;;;63         if(le_disconnect(m_conn_id)==GAP_CAUSE_SUCCESS)
        0x0080f688:    7800        .x      LDRB     r0,[r0,#0]
        0x0080f68a:    f43ef2cb    >...    BL       le_disconnect ; 0x4dc24
        0x0080f68e:    2800        .(      CMP      r0,#0
        0x0080f690:    d000        ..      BEQ      0x80f694 ; app_ble_disconnect + 16
;;;64         {
;;;65             return 0;
;;;66         }
;;;67         else
;;;68         {
;;;69             return 1;
        0x0080f692:    2001        .       MOVS     r0,#1
;;;70         }
;;;71     }
        0x0080f694:    bd10        ..      POP      {r4,pc}
    app_handle_authen_state_evt
;;;72     
;;;73     
;;;74     bool ble_value_notify(uint8_t *data,uint8_t len);
;;;75     
;;;76     /*============================================================================*
;;;77      *                              Functions
;;;78      *============================================================================*/
;;;79     void app_handle_gap_msg(T_IO_MSG  *p_gap_msg);
;;;80     /**
;;;81      * @brief    All the application messages are pre-handled in this function
;;;82      * @note     All the IO MSGs are sent to this function, then the event handling
;;;83      *           function shall be called according to the MSG type.
;;;84      * @param[in] io_msg  IO message data
;;;85      * @return   void
;;;86      */
;;;87     void app_handle_io_msg(T_IO_MSG io_msg)
;;;88     {
;;;89         uint16_t msg_type = io_msg.type;
;;;90     
;;;91         switch (msg_type)
;;;92         {
;;;93         case IO_MSG_TYPE_BT_STATUS:
;;;94             {
;;;95                 app_handle_gap_msg(&io_msg);
;;;96             }
;;;97             break;
;;;98     #if F_BT_ANCS_CLIENT_SUPPORT
;;;99         case IO_MSG_TYPE_ANCS:
;;;100            {
;;;101                ancs_handle_msg(&io_msg);
;;;102            }
;;;103            break;
;;;104    #endif
;;;105        default:
;;;106            break;
;;;107        }
;;;108    }
;;;109    
;;;110    /**
;;;111     * @brief    Handle msg GAP_MSG_LE_DEV_STATE_CHANGE
;;;112     * @note     All the gap device state events are pre-handled in this function.
;;;113     *           Then the event handling function shall be called according to the new_state
;;;114     * @param[in] new_state  New gap device state
;;;115     * @param[in] cause GAP device state change cause
;;;116     * @return   void
;;;117     */
;;;118    void app_handle_dev_state_evt(T_GAP_DEV_STATE new_state, uint16_t cause)
;;;119    {
;;;120        APP_PRINT_INFO3("app_handle_dev_state_evt: init state %d, adv state %d, cause 0x%x",
;;;121                        new_state.gap_init_state, new_state.gap_adv_state, cause);
;;;122        if (gap_dev_state.gap_init_state != new_state.gap_init_state)
;;;123        {
;;;124            if (new_state.gap_init_state == GAP_INIT_STATE_STACK_READY)
;;;125            {
;;;126                APP_PRINT_INFO0("GAP stack ready");
;;;127                /*stack ready*/
;;;128                le_adv_start();
;;;129            }
;;;130        }
;;;131    
;;;132        if (gap_dev_state.gap_adv_state != new_state.gap_adv_state)
;;;133        {
;;;134            if (new_state.gap_adv_state == GAP_ADV_STATE_IDLE)
;;;135            {
;;;136                if (new_state.gap_adv_sub_state == GAP_ADV_TO_IDLE_CAUSE_CONN)
;;;137                {
;;;138                    APP_PRINT_INFO0("GAP adv stoped: because connection created");
;;;139                }
;;;140                else
;;;141                {
;;;142                    APP_PRINT_INFO0("GAP adv stoped");
;;;143                }
;;;144            }
;;;145            else if (new_state.gap_adv_state == GAP_ADV_STATE_ADVERTISING)
;;;146            {
;;;147                APP_PRINT_INFO0("GAP adv start");
;;;148            }
;;;149        }
;;;150    
;;;151        gap_dev_state = new_state;
;;;152    }
;;;153    
;;;154    /**
;;;155     * @brief    Handle msg GAP_MSG_LE_CONN_STATE_CHANGE
;;;156     * @note     All the gap conn state events are pre-handled in this function.
;;;157     *           Then the event handling function shall be called according to the new_state
;;;158     * @param[in] conn_id Connection ID
;;;159     * @param[in] new_state  New gap connection state
;;;160     * @param[in] disc_cause Use this cause when new_state is GAP_CONN_STATE_DISCONNECTED
;;;161     * @return   void
;;;162     */
;;;163    void app_handle_conn_state_evt(uint8_t conn_id, T_GAP_CONN_STATE new_state, uint16_t disc_cause)
;;;164    {
;;;165        APP_PRINT_INFO4("app_handle_conn_state_evt: conn_id %d old_state %d new_state %d, disc_cause 0x%x",
;;;166                        conn_id, gap_conn_state, new_state, disc_cause);
;;;167        switch (new_state)
;;;168        {
;;;169        case GAP_CONN_STATE_DISCONNECTED:
;;;170            {
;;;171                if ((disc_cause != (HCI_ERR | HCI_ERR_REMOTE_USER_TERMINATE))
;;;172                    && (disc_cause != (HCI_ERR | HCI_ERR_LOCAL_HOST_TERMINATE)))
;;;173                {
;;;174                    APP_PRINT_ERROR1("app_handle_conn_state_evt: connection lost cause 0x%x", disc_cause);
;;;175                }
;;;176    
;;;177                le_adv_start();
;;;178                m_conn_id = 0; 
;;;179                tuya_ble_disconnected_handler();
;;;180                tuya_ota_init_disconnect();
;;;181            }
;;;182            break;
;;;183    
;;;184        case GAP_CONN_STATE_CONNECTED:
;;;185            {
;;;186                uint16_t conn_interval;
;;;187                uint16_t conn_latency;
;;;188                uint16_t conn_supervision_timeout;
;;;189                uint8_t  remote_bd[6];
;;;190                T_GAP_REMOTE_ADDR_TYPE remote_bd_type;
;;;191    
;;;192                le_get_conn_param(GAP_PARAM_CONN_INTERVAL, &conn_interval, conn_id);
;;;193                le_get_conn_param(GAP_PARAM_CONN_LATENCY, &conn_latency, conn_id);
;;;194                le_get_conn_param(GAP_PARAM_CONN_TIMEOUT, &conn_supervision_timeout, conn_id);
;;;195                le_get_conn_addr(conn_id, remote_bd, &remote_bd_type);
;;;196                APP_PRINT_INFO5("GAP_CONN_STATE_CONNECTED:remote_bd %s, remote_addr_type %d, conn_interval 0x%x, conn_latency 0x%x, conn_supervision_timeout 0x%x",
;;;197                                TRACE_BDADDR(remote_bd), remote_bd_type,
;;;198                                conn_interval, conn_latency, conn_supervision_timeout);
;;;199                m_conn_id = conn_id;          
;;;200    			tuya_ble_connected_handler();
;;;201            }
;;;202            break;
;;;203    
;;;204        default:
;;;205            break;
;;;206        }
;;;207        gap_conn_state = new_state;
;;;208    }
;;;209    
;;;210    /**
;;;211     * @brief    Handle msg GAP_MSG_LE_AUTHEN_STATE_CHANGE
;;;212     * @note     All the gap authentication state events are pre-handled in this function.
;;;213     *           Then the event handling function shall be called according to the new_state
;;;214     * @param[in] conn_id Connection ID
;;;215     * @param[in] new_state  New authentication state
;;;216     * @param[in] cause Use this cause when new_state is GAP_AUTHEN_STATE_COMPLETE
;;;217     * @return   void
;;;218     */
;;;219    void app_handle_authen_state_evt(uint8_t conn_id, uint8_t new_state, uint16_t cause)
;;;220    {
        0x0080f696:    b5f8        ..      PUSH     {r3-r7,lr}
        0x0080f698:    4efb        .N      LDR      r6,[pc,#1004] ; [0x80fa88] = 0x21103002
        0x0080f69a:    4615        .F      MOV      r5,r2
        0x0080f69c:    460c        .F      MOV      r4,r1
;;;221        APP_PRINT_INFO2("app_handle_authen_state_evt:conn_id %d, cause 0x%x", conn_id, cause);
        0x0080f69e:    4603        .F      MOV      r3,r0
        0x0080f6a0:    9200        ..      STR      r2,[sp,#0]
        0x0080f6a2:    2202        ."      MOVS     r2,#2
        0x0080f6a4:    49f7        .I      LDR      r1,[pc,#988] ; [0x80fa84] = 0x8800360
        0x0080f6a6:    4630        0F      MOV      r0,r6
        0x0080f6a8:    f7f8d9d9    ....    BL       log_buffer ; 0x7a5e
;;;222    
;;;223        switch (new_state)
        0x0080f6ac:    b154        T.      CBZ      r4,0x80f6c4 ; app_handle_authen_state_evt + 46
        0x0080f6ae:    2c01        .,      CMP      r4,#1
        0x0080f6b0:    d00c        ..      BEQ      0x80f6cc ; app_handle_authen_state_evt + 54
        0x0080f6b2:    2201        ."      MOVS     r2,#1
        0x0080f6b4:    b001        ..      ADD      sp,sp,#4
        0x0080f6b6:    4623        #F      MOV      r3,r4
        0x0080f6b8:    1eb0        ..      SUBS     r0,r6,#2
        0x0080f6ba:    e8bd40f0    ...@    POP      {r4-r7,lr}
        0x0080f6be:    49f3        .I      LDR      r1,[pc,#972] ; [0x80fa8c] = 0x8800464
        0x0080f6c0:    f7f899cd    ....    B        log_buffer ; 0x7a5e
;;;224        {
;;;225        case GAP_AUTHEN_STATE_STARTED:
;;;226            {
;;;227                APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_STARTED");
        0x0080f6c4:    49ef        .I      LDR      r1,[pc,#956] ; [0x80fa84] = 0x8800360
        0x0080f6c6:    2200        ."      MOVS     r2,#0
        0x0080f6c8:    3138        81      ADDS     r1,r1,#0x38
;;;228            }
;;;229            break;
        0x0080f6ca:    e004        ..      B        0x80f6d6 ; app_handle_authen_state_evt + 64
        0x0080f6cc:    f04f0200    O...    MOV      r2,#0
;;;230    
;;;231        case GAP_AUTHEN_STATE_COMPLETE:
;;;232            {
;;;233                if (cause == GAP_SUCCESS)
        0x0080f6d0:    b135        5.      CBZ      r5,0x80f6e0 ; app_handle_authen_state_evt + 74
        0x0080f6d2:    49ee        .I      LDR      r1,[pc,#952] ; [0x80fa8c] = 0x8800464
        0x0080f6d4:    3948        H9      SUBS     r1,r1,#0x48
        0x0080f6d6:    4630        0F      MOV      r0,r6
        0x0080f6d8:    e8bd40f8    ...@    POP      {r3-r7,lr}
        0x0080f6dc:    f7f899bf    ....    B        log_buffer ; 0x7a5e
;;;234                {
;;;235    #if F_BT_ANCS_CLIENT_SUPPORT
;;;236                    ancs_start_discovery(conn_id);
;;;237    #endif
;;;238                    APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_COMPLETE pair success");
        0x0080f6e0:    49e8        .I      LDR      r1,[pc,#928] ; [0x80fa84] = 0x8800360
        0x0080f6e2:    3174        t1      ADDS     r1,r1,#0x74
        0x0080f6e4:    e7f7        ..      B        0x80f6d6 ; app_handle_authen_state_evt + 64
    app_handle_conn_param_update_evt
;;;239    
;;;240                }
;;;241                else
;;;242                {
;;;243                    APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_COMPLETE pair failed");
;;;244                }
;;;245            }
;;;246            break;
;;;247    
;;;248        default:
;;;249            {
;;;250                APP_PRINT_ERROR1("app_handle_authen_state_evt: unknown newstate %d", new_state);
;;;251            }
;;;252            break;
;;;253        }
;;;254    }
;;;255    
;;;256    /**
;;;257     * @brief    Handle msg GAP_MSG_LE_CONN_MTU_INFO
;;;258     * @note     This msg is used to inform APP that exchange mtu procedure is completed.
;;;259     * @param[in] conn_id Connection ID
;;;260     * @param[in] mtu_size  New mtu size
;;;261     * @return   void
;;;262     */
;;;263    void app_handle_conn_mtu_info_evt(uint8_t conn_id, uint16_t mtu_size)
;;;264    {
;;;265        APP_PRINT_INFO2("app_handle_conn_mtu_info_evt: conn_id %d, mtu_size %d", conn_id, mtu_size);
;;;266    }
;;;267    
;;;268    /**
;;;269     * @brief    Handle msg GAP_MSG_LE_CONN_PARAM_UPDATE
;;;270     * @note     All the connection parameter update change  events are pre-handled in this function.
;;;271     * @param[in] conn_id Connection ID
;;;272     * @param[in] status  New update state
;;;273     * @param[in] cause Use this cause when status is GAP_CONN_PARAM_UPDATE_STATUS_FAIL
;;;274     * @return   void
;;;275     */
;;;276    void app_handle_conn_param_update_evt(uint8_t conn_id, uint8_t status, uint16_t cause)
;;;277    {
        0x0080f6e6:    b530        0.      PUSH     {r4,r5,lr}
        0x0080f6e8:    4ce7        .L      LDR      r4,[pc,#924] ; [0x80fa88] = 0x21103002
        0x0080f6ea:    b085        ..      SUB      sp,sp,#0x14
        0x0080f6ec:    4605        .F      MOV      r5,r0
        0x0080f6ee:    b159        Y.      CBZ      r1,0x80f708 ; app_handle_conn_param_update_evt + 34
;;;278        switch (status)
        0x0080f6f0:    2901        .)      CMP      r1,#1
        0x0080f6f2:    d02b        +.      BEQ      0x80f74c ; app_handle_conn_param_update_evt + 102
        0x0080f6f4:    2902        .)      CMP      r1,#2
        0x0080f6f6:    d127        '.      BNE      0x80f748 ; app_handle_conn_param_update_evt + 98
        0x0080f6f8:    b005        ..      ADD      sp,sp,#0x14
        0x0080f6fa:    4620         F      MOV      r0,r4
        0x0080f6fc:    e8bd4030    ..0@    POP      {r4,r5,lr}
        0x0080f700:    2200        ."      MOVS     r2,#0
        0x0080f702:    49e3        .I      LDR      r1,[pc,#908] ; [0x80fa90] = 0x8800594
        0x0080f704:    f7f899ab    ....    B        log_buffer ; 0x7a5e
;;;279        {
;;;280        case GAP_CONN_PARAM_UPDATE_STATUS_SUCCESS:
;;;281            {
;;;282                uint16_t conn_interval;
;;;283                uint16_t conn_slave_latency;
;;;284                uint16_t conn_supervision_timeout;
;;;285    
;;;286                le_get_conn_param(GAP_PARAM_CONN_INTERVAL, &conn_interval, conn_id);
        0x0080f708:    4602        .F      MOV      r2,r0
        0x0080f70a:    a904        ..      ADD      r1,sp,#0x10
        0x0080f70c:    f2402072    @.r     MOV      r0,#0x272
        0x0080f710:    f43ef1b5    >...    BL       le_get_conn_param ; 0x4da7e
;;;287                le_get_conn_param(GAP_PARAM_CONN_LATENCY, &conn_slave_latency, conn_id);
        0x0080f714:    462a        *F      MOV      r2,r5
        0x0080f716:    a903        ..      ADD      r1,sp,#0xc
        0x0080f718:    f2402073    @.s     MOV      r0,#0x273
        0x0080f71c:    f43ef1af    >...    BL       le_get_conn_param ; 0x4da7e
;;;288                le_get_conn_param(GAP_PARAM_CONN_TIMEOUT, &conn_supervision_timeout, conn_id);
        0x0080f720:    462a        *F      MOV      r2,r5
        0x0080f722:    a902        ..      ADD      r1,sp,#8
        0x0080f724:    f44f701d    O..p    MOV      r0,#0x274
        0x0080f728:    f43ef1a9    >...    BL       le_get_conn_param ; 0x4da7e
;;;289                APP_PRINT_INFO3("app_handle_conn_param_update_evt update success:conn_interval 0x%x, conn_slave_latency 0x%x, conn_supervision_timeout 0x%x",
        0x0080f72c:    f8bd1008    ....    LDRH     r1,[sp,#8]
        0x0080f730:    f8bd000c    ....    LDRH     r0,[sp,#0xc]
        0x0080f734:    e9cd0100    ....    STRD     r0,r1,[sp,#0]
        0x0080f738:    49d4        .I      LDR      r1,[pc,#848] ; [0x80fa8c] = 0x8800464
        0x0080f73a:    f8bd3010    ...0    LDRH     r3,[sp,#0x10]
        0x0080f73e:    2203        ."      MOVS     r2,#3
        0x0080f740:    3170        p1      ADDS     r1,r1,#0x70
        0x0080f742:    4620         F      MOV      r0,r4
        0x0080f744:    f7f8d98b    ....    BL       log_buffer ; 0x7a5e
        0x0080f748:    b005        ..      ADD      sp,sp,#0x14
        0x0080f74a:    bd30        0.      POP      {r4,r5,pc}
;;;290                                conn_interval, conn_slave_latency, conn_supervision_timeout);
;;;291            }
;;;292            break;
;;;293    
;;;294        case GAP_CONN_PARAM_UPDATE_STATUS_FAIL:
;;;295            {
;;;296                APP_PRINT_ERROR1("app_handle_conn_param_update_evt update failed: cause 0x%x", cause);
        0x0080f74c:    b005        ..      ADD      sp,sp,#0x14
        0x0080f74e:    49d0        .I      LDR      r1,[pc,#832] ; [0x80fa90] = 0x8800594
        0x0080f750:    4613        .F      MOV      r3,r2
        0x0080f752:    48cd        .H      LDR      r0,[pc,#820] ; [0x80fa88] = 0x21103002
        0x0080f754:    e8bd4030    ..0@    POP      {r4,r5,lr}
        0x0080f758:    2201        ."      MOVS     r2,#1
        0x0080f75a:    3940        @9      SUBS     r1,r1,#0x40
        0x0080f75c:    1e80        ..      SUBS     r0,r0,#2
        0x0080f75e:    f7f8997e    ..~.    B        log_buffer ; 0x7a5e
    app_handle_conn_mtu_info_evt
;;; .\sample\peripheral_app.c (264)
        0x0080f762:    b508        ..      PUSH     {r3,lr}
;;;265        APP_PRINT_INFO2("app_handle_conn_mtu_info_evt: conn_id %d, mtu_size %d", conn_id, mtu_size);
        0x0080f764:    4603        .F      MOV      r3,r0
        0x0080f766:    9100        ..      STR      r1,[sp,#0]
        0x0080f768:    49c8        .I      LDR      r1,[pc,#800] ; [0x80fa8c] = 0x8800464
        0x0080f76a:    2202        ."      MOVS     r2,#2
        0x0080f76c:    3134        41      ADDS     r1,r1,#0x34
        0x0080f76e:    48c6        .H      LDR      r0,[pc,#792] ; [0x80fa88] = 0x21103002
        0x0080f770:    f7f8d975    ..u.    BL       log_buffer ; 0x7a5e
;;;266    }
        0x0080f774:    bd08        ..      POP      {r3,pc}
    app_handle_conn_state_evt
;;; .\sample\peripheral_app.c (164)
        0x0080f776:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0080f77a:    4ec1        .N      LDR      r6,[pc,#772] ; [0x80fa80] = 0x208230
        0x0080f77c:    4607        .F      MOV      r7,r0
        0x0080f77e:    b08a        ..      SUB      sp,sp,#0x28
        0x0080f780:    78b0        .x      LDRB     r0,[r6,#2]
        0x0080f782:    460d        .F      MOV      r5,r1
        0x0080f784:    e9cd0500    ....    STRD     r0,r5,[sp,#0]
        0x0080f788:    f8df82fc    ....    LDR      r8,[pc,#764] ; [0x80fa88] = 0x21103002
        0x0080f78c:    4614        .F      MOV      r4,r2
;;;165        APP_PRINT_INFO4("app_handle_conn_state_evt: conn_id %d old_state %d new_state %d, disc_cause 0x%x",
        0x0080f78e:    9202        ..      STR      r2,[sp,#8]
        0x0080f790:    463b        ;F      MOV      r3,r7
        0x0080f792:    2204        ."      MOVS     r2,#4
        0x0080f794:    49bf        .I      LDR      r1,[pc,#764] ; [0x80fa94] = 0x880024c
        0x0080f796:    4640        @F      MOV      r0,r8
        0x0080f798:    f7f8d961    ..a.    BL       log_buffer ; 0x7a5e
;;;166                        conn_id, gap_conn_state, new_state, disc_cause);
;;;167        switch (new_state)
        0x0080f79c:    b115        ..      CBZ      r5,0x80f7a4 ; app_handle_conn_state_evt + 46
        0x0080f79e:    2d02        .-      CMP      r5,#2
        0x0080f7a0:    d147        G.      BNE      0x80f832 ; app_handle_conn_state_evt + 188
        0x0080f7a2:    e017        ..      B        0x80f7d4 ; app_handle_conn_state_evt + 94
;;;168        {
;;;169        case GAP_CONN_STATE_DISCONNECTED:
;;;170            {
;;;171                if ((disc_cause != (HCI_ERR | HCI_ERR_REMOTE_USER_TERMINATE))
        0x0080f7a4:    f5a47080    ...p    SUB      r0,r4,#0x100
        0x0080f7a8:    3813        .8      SUBS     r0,r0,#0x13
        0x0080f7aa:    d00a        ..      BEQ      0x80f7c2 ; app_handle_conn_state_evt + 76
;;;172                    && (disc_cause != (HCI_ERR | HCI_ERR_LOCAL_HOST_TERMINATE)))
        0x0080f7ac:    f5b47f8b    ....    CMP      r4,#0x116
        0x0080f7b0:    d007        ..      BEQ      0x80f7c2 ; app_handle_conn_state_evt + 76
;;;173                {
;;;174                    APP_PRINT_ERROR1("app_handle_conn_state_evt: connection lost cause 0x%x", disc_cause);
        0x0080f7b2:    49b8        .I      LDR      r1,[pc,#736] ; [0x80fa94] = 0x880024c
        0x0080f7b4:    48b4        .H      LDR      r0,[pc,#720] ; [0x80fa88] = 0x21103002
        0x0080f7b6:    4623        #F      MOV      r3,r4
        0x0080f7b8:    2201        ."      MOVS     r2,#1
        0x0080f7ba:    3154        T1      ADDS     r1,r1,#0x54
        0x0080f7bc:    1e80        ..      SUBS     r0,r0,#2
        0x0080f7be:    f7f8d94e    ..N.    BL       log_buffer ; 0x7a5e
;;;175                }
;;;176    
;;;177                le_adv_start();
        0x0080f7c2:    f442f480    B...    BL       le_adv_start ; 0x520c6
;;;178                m_conn_id = 0; 
        0x0080f7c6:    2000        .       MOVS     r0,#0
        0x0080f7c8:    7030        0p      STRB     r0,[r6,#0]
;;;179                tuya_ble_disconnected_handler();
        0x0080f7ca:    f002fd54    ..T.    BL       tuya_ble_disconnected_handler ; 0x812276
;;;180                tuya_ota_init_disconnect();
        0x0080f7ce:    f001facf    ....    BL       tuya_ota_init_disconnect ; 0x810d70
;;;181            }
;;;182            break;
        0x0080f7d2:    e02e        ..      B        0x80f832 ; app_handle_conn_state_evt + 188
;;;183    
;;;184        case GAP_CONN_STATE_CONNECTED:
;;;185            {
;;;186                uint16_t conn_interval;
;;;187                uint16_t conn_latency;
;;;188                uint16_t conn_supervision_timeout;
;;;189                uint8_t  remote_bd[6];
;;;190                T_GAP_REMOTE_ADDR_TYPE remote_bd_type;
;;;191    
;;;192                le_get_conn_param(GAP_PARAM_CONN_INTERVAL, &conn_interval, conn_id);
        0x0080f7d4:    463a        :F      MOV      r2,r7
        0x0080f7d6:    a906        ..      ADD      r1,sp,#0x18
        0x0080f7d8:    f2402072    @.r     MOV      r0,#0x272
        0x0080f7dc:    f43ef14f    >.O.    BL       le_get_conn_param ; 0x4da7e
;;;193                le_get_conn_param(GAP_PARAM_CONN_LATENCY, &conn_latency, conn_id);
        0x0080f7e0:    463a        :F      MOV      r2,r7
        0x0080f7e2:    a908        ..      ADD      r1,sp,#0x20
        0x0080f7e4:    f2402073    @.s     MOV      r0,#0x273
        0x0080f7e8:    f43ef149    >.I.    BL       le_get_conn_param ; 0x4da7e
;;;194                le_get_conn_param(GAP_PARAM_CONN_TIMEOUT, &conn_supervision_timeout, conn_id);
        0x0080f7ec:    463a        :F      MOV      r2,r7
        0x0080f7ee:    a909        ..      ADD      r1,sp,#0x24
        0x0080f7f0:    f44f701d    O..p    MOV      r0,#0x274
        0x0080f7f4:    f43ef143    >.C.    BL       le_get_conn_param ; 0x4da7e
;;;195                le_get_conn_addr(conn_id, remote_bd, &remote_bd_type);
        0x0080f7f8:    aa07        ..      ADD      r2,sp,#0x1c
        0x0080f7fa:    a904        ..      ADD      r1,sp,#0x10
        0x0080f7fc:    4638        8F      MOV      r0,r7
        0x0080f7fe:    f43ef1f6    >...    BL       le_get_conn_addr ; 0x4dbee
;;;196                APP_PRINT_INFO5("GAP_CONN_STATE_CONNECTED:remote_bd %s, remote_addr_type %d, conn_interval 0x%x, conn_latency 0x%x, conn_supervision_timeout 0x%x",
        0x0080f802:    a904        ..      ADD      r1,sp,#0x10
        0x0080f804:    48a4        .H      LDR      r0,[pc,#656] ; [0x80fa98] = 0x21300000
        0x0080f806:    f7f8dae7    ....    BL       trace_bdaddr ; 0x7dd8
        0x0080f80a:    4603        .F      MOV      r3,r0
        0x0080f80c:    f89d001c    ....    LDRB     r0,[sp,#0x1c]
        0x0080f810:    f8bd4024    ..$@    LDRH     r4,[sp,#0x24]
        0x0080f814:    f8bd2020    ..      LDRH     r2,[sp,#0x20]
        0x0080f818:    f8bd1018    ....    LDRH     r1,[sp,#0x18]
        0x0080f81c:    e88d0017    ....    STM      sp,{r0-r2,r4}
        0x0080f820:    4998        .I      LDR      r1,[pc,#608] ; [0x80fa84] = 0x8800360
        0x0080f822:    2205        ."      MOVS     r2,#5
        0x0080f824:    3984        .9      SUBS     r1,r1,#0x84
        0x0080f826:    4640        @F      MOV      r0,r8
        0x0080f828:    f7f8d919    ....    BL       log_buffer ; 0x7a5e
;;;197                                TRACE_BDADDR(remote_bd), remote_bd_type,
;;;198                                conn_interval, conn_latency, conn_supervision_timeout);
;;;199                m_conn_id = conn_id;          
        0x0080f82c:    7037        7p      STRB     r7,[r6,#0]
;;;200    			tuya_ble_connected_handler();
        0x0080f82e:    f002fd0b    ....    BL       tuya_ble_connected_handler ; 0x812248
;;;201            }
;;;202            break;
;;;203    
;;;204        default:
;;;205            break;
;;;206        }
;;;207        gap_conn_state = new_state;
        0x0080f832:    70b5        .p      STRB     r5,[r6,#2]
;;;208    }
        0x0080f834:    b00a        ..      ADD      sp,sp,#0x28
        0x0080f836:    e8bd81f0    ....    POP      {r4-r8,pc}
    app_handle_dev_state_evt
;;; .\sample\peripheral_app.c (119)
        0x0080f83a:    e92d41fc    -..A    PUSH     {r2-r8,lr}
        0x0080f83e:    b2c4        ..      UXTB     r4,r0
;;;120        APP_PRINT_INFO3("app_handle_dev_state_evt: init state %d, adv state %d, cause 0x%x",
        0x0080f840:    f3c40581    ....    UBFX     r5,r4,#2,#2
        0x0080f844:    e9cd5100    ...Q    STRD     r5,r1,[sp,#0]
        0x0080f848:    4992        .I      LDR      r1,[pc,#584] ; [0x80fa94] = 0x880024c
        0x0080f84a:    f8df823c    ..<.    LDR      r8,[pc,#572] ; [0x80fa88] = 0x21103002
        0x0080f84e:    f0040601    ....    AND      r6,r4,#1
        0x0080f852:    4633        3F      MOV      r3,r6
        0x0080f854:    2203        ."      MOVS     r2,#3
        0x0080f856:    39b4        .9      SUBS     r1,r1,#0xb4
        0x0080f858:    4640        @F      MOV      r0,r8
        0x0080f85a:    f7f8d900    ....    BL       log_buffer ; 0x7a5e
;;;121                        new_state.gap_init_state, new_state.gap_adv_state, cause);
;;;122        if (gap_dev_state.gap_init_state != new_state.gap_init_state)
        0x0080f85e:    4f88        .O      LDR      r7,[pc,#544] ; [0x80fa80] = 0x208230
        0x0080f860:    1c7f        ..      ADDS     r7,r7,#1
        0x0080f862:    7838        8x      LDRB     r0,[r7,#0]
        0x0080f864:    f0000001    ....    AND      r0,r0,#1
        0x0080f868:    42b0        .B      CMP      r0,r6
        0x0080f86a:    d009        ..      BEQ      0x80f880 ; app_handle_dev_state_evt + 70
;;;123        {
;;;124            if (new_state.gap_init_state == GAP_INIT_STATE_STACK_READY)
        0x0080f86c:    07e0        ..      LSLS     r0,r4,#31
        0x0080f86e:    d007        ..      BEQ      0x80f880 ; app_handle_dev_state_evt + 70
;;;125            {
;;;126                APP_PRINT_INFO0("GAP stack ready");
        0x0080f870:    4988        .I      LDR      r1,[pc,#544] ; [0x80fa94] = 0x880024c
        0x0080f872:    2200        ."      MOVS     r2,#0
        0x0080f874:    396c        l9      SUBS     r1,r1,#0x6c
        0x0080f876:    4640        @F      MOV      r0,r8
        0x0080f878:    f7f8d8f1    ....    BL       log_buffer ; 0x7a5e
;;;127                /*stack ready*/
;;;128                le_adv_start();
        0x0080f87c:    f442f423    B.#.    BL       le_adv_start ; 0x520c6
;;;129            }
;;;130        }
;;;131    
;;;132        if (gap_dev_state.gap_adv_state != new_state.gap_adv_state)
        0x0080f880:    7838        8x      LDRB     r0,[r7,#0]
        0x0080f882:    f3c00081    ....    UBFX     r0,r0,#2,#2
        0x0080f886:    42a8        .B      CMP      r0,r5
        0x0080f888:    d015        ..      BEQ      0x80f8b6 ; app_handle_dev_state_evt + 124
;;;133        {
;;;134            if (new_state.gap_adv_state == GAP_ADV_STATE_IDLE)
        0x0080f88a:    f0140f0c    ....    TST      r4,#0xc
        0x0080f88e:    d002        ..      BEQ      0x80f896 ; app_handle_dev_state_evt + 92
        0x0080f890:    2d02        .-      CMP      r5,#2
        0x0080f892:    d00a        ..      BEQ      0x80f8aa ; app_handle_dev_state_evt + 112
        0x0080f894:    e00f        ..      B        0x80f8b6 ; app_handle_dev_state_evt + 124
;;;135            {
;;;136                if (new_state.gap_adv_sub_state == GAP_ADV_TO_IDLE_CAUSE_CONN)
        0x0080f896:    07a0        ..      LSLS     r0,r4,#30
        0x0080f898:    f04f0200    O...    MOV      r2,#0
        0x0080f89c:    d502        ..      BPL      0x80f8a4 ; app_handle_dev_state_evt + 106
;;;137                {
;;;138                    APP_PRINT_INFO0("GAP adv stoped: because connection created");
        0x0080f89e:    497d        }I      LDR      r1,[pc,#500] ; [0x80fa94] = 0x880024c
        0x0080f8a0:    3958        X9      SUBS     r1,r1,#0x58
        0x0080f8a2:    e005        ..      B        0x80f8b0 ; app_handle_dev_state_evt + 118
;;;139                }
;;;140                else
;;;141                {
;;;142                    APP_PRINT_INFO0("GAP adv stoped");
        0x0080f8a4:    497b        {I      LDR      r1,[pc,#492] ; [0x80fa94] = 0x880024c
        0x0080f8a6:    3928        (9      SUBS     r1,r1,#0x28
        0x0080f8a8:    e002        ..      B        0x80f8b0 ; app_handle_dev_state_evt + 118
;;;143                }
;;;144            }
;;;145            else if (new_state.gap_adv_state == GAP_ADV_STATE_ADVERTISING)
;;;146            {
;;;147                APP_PRINT_INFO0("GAP adv start");
        0x0080f8aa:    497a        zI      LDR      r1,[pc,#488] ; [0x80fa94] = 0x880024c
        0x0080f8ac:    2200        ."      MOVS     r2,#0
        0x0080f8ae:    3914        .9      SUBS     r1,r1,#0x14
        0x0080f8b0:    4640        @F      MOV      r0,r8
        0x0080f8b2:    f7f8d8d4    ....    BL       log_buffer ; 0x7a5e
;;;148            }
;;;149        }
;;;150    
;;;151        gap_dev_state = new_state;
        0x0080f8b6:    4872        rH      LDR      r0,[pc,#456] ; [0x80fa80] = 0x208230
        0x0080f8b8:    7044        Dp      STRB     r4,[r0,#1]
;;;152    }
        0x0080f8ba:    e8bd81fc    ....    POP      {r2-r8,pc}
    app_handle_gap_msg
;;;153    
;;;154    /**
;;;155     * @brief    Handle msg GAP_MSG_LE_CONN_STATE_CHANGE
;;;156     * @note     All the gap conn state events are pre-handled in this function.
;;;157     *           Then the event handling function shall be called according to the new_state
;;;158     * @param[in] conn_id Connection ID
;;;159     * @param[in] new_state  New gap connection state
;;;160     * @param[in] disc_cause Use this cause when new_state is GAP_CONN_STATE_DISCONNECTED
;;;161     * @return   void
;;;162     */
;;;163    void app_handle_conn_state_evt(uint8_t conn_id, T_GAP_CONN_STATE new_state, uint16_t disc_cause)
;;;164    {
;;;165        APP_PRINT_INFO4("app_handle_conn_state_evt: conn_id %d old_state %d new_state %d, disc_cause 0x%x",
;;;166                        conn_id, gap_conn_state, new_state, disc_cause);
;;;167        switch (new_state)
;;;168        {
;;;169        case GAP_CONN_STATE_DISCONNECTED:
;;;170            {
;;;171                if ((disc_cause != (HCI_ERR | HCI_ERR_REMOTE_USER_TERMINATE))
;;;172                    && (disc_cause != (HCI_ERR | HCI_ERR_LOCAL_HOST_TERMINATE)))
;;;173                {
;;;174                    APP_PRINT_ERROR1("app_handle_conn_state_evt: connection lost cause 0x%x", disc_cause);
;;;175                }
;;;176    
;;;177                le_adv_start();
;;;178                m_conn_id = 0; 
;;;179                tuya_ble_disconnected_handler();
;;;180                tuya_ota_init_disconnect();
;;;181            }
;;;182            break;
;;;183    
;;;184        case GAP_CONN_STATE_CONNECTED:
;;;185            {
;;;186                uint16_t conn_interval;
;;;187                uint16_t conn_latency;
;;;188                uint16_t conn_supervision_timeout;
;;;189                uint8_t  remote_bd[6];
;;;190                T_GAP_REMOTE_ADDR_TYPE remote_bd_type;
;;;191    
;;;192                le_get_conn_param(GAP_PARAM_CONN_INTERVAL, &conn_interval, conn_id);
;;;193                le_get_conn_param(GAP_PARAM_CONN_LATENCY, &conn_latency, conn_id);
;;;194                le_get_conn_param(GAP_PARAM_CONN_TIMEOUT, &conn_supervision_timeout, conn_id);
;;;195                le_get_conn_addr(conn_id, remote_bd, &remote_bd_type);
;;;196                APP_PRINT_INFO5("GAP_CONN_STATE_CONNECTED:remote_bd %s, remote_addr_type %d, conn_interval 0x%x, conn_latency 0x%x, conn_supervision_timeout 0x%x",
;;;197                                TRACE_BDADDR(remote_bd), remote_bd_type,
;;;198                                conn_interval, conn_latency, conn_supervision_timeout);
;;;199                m_conn_id = conn_id;          
;;;200    			tuya_ble_connected_handler();
;;;201            }
;;;202            break;
;;;203    
;;;204        default:
;;;205            break;
;;;206        }
;;;207        gap_conn_state = new_state;
;;;208    }
;;;209    
;;;210    /**
;;;211     * @brief    Handle msg GAP_MSG_LE_AUTHEN_STATE_CHANGE
;;;212     * @note     All the gap authentication state events are pre-handled in this function.
;;;213     *           Then the event handling function shall be called according to the new_state
;;;214     * @param[in] conn_id Connection ID
;;;215     * @param[in] new_state  New authentication state
;;;216     * @param[in] cause Use this cause when new_state is GAP_AUTHEN_STATE_COMPLETE
;;;217     * @return   void
;;;218     */
;;;219    void app_handle_authen_state_evt(uint8_t conn_id, uint8_t new_state, uint16_t cause)
;;;220    {
;;;221        APP_PRINT_INFO2("app_handle_authen_state_evt:conn_id %d, cause 0x%x", conn_id, cause);
;;;222    
;;;223        switch (new_state)
;;;224        {
;;;225        case GAP_AUTHEN_STATE_STARTED:
;;;226            {
;;;227                APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_STARTED");
;;;228            }
;;;229            break;
;;;230    
;;;231        case GAP_AUTHEN_STATE_COMPLETE:
;;;232            {
;;;233                if (cause == GAP_SUCCESS)
;;;234                {
;;;235    #if F_BT_ANCS_CLIENT_SUPPORT
;;;236                    ancs_start_discovery(conn_id);
;;;237    #endif
;;;238                    APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_COMPLETE pair success");
;;;239    
;;;240                }
;;;241                else
;;;242                {
;;;243                    APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_COMPLETE pair failed");
;;;244                }
;;;245            }
;;;246            break;
;;;247    
;;;248        default:
;;;249            {
;;;250                APP_PRINT_ERROR1("app_handle_authen_state_evt: unknown newstate %d", new_state);
;;;251            }
;;;252            break;
;;;253        }
;;;254    }
;;;255    
;;;256    /**
;;;257     * @brief    Handle msg GAP_MSG_LE_CONN_MTU_INFO
;;;258     * @note     This msg is used to inform APP that exchange mtu procedure is completed.
;;;259     * @param[in] conn_id Connection ID
;;;260     * @param[in] mtu_size  New mtu size
;;;261     * @return   void
;;;262     */
;;;263    void app_handle_conn_mtu_info_evt(uint8_t conn_id, uint16_t mtu_size)
;;;264    {
;;;265        APP_PRINT_INFO2("app_handle_conn_mtu_info_evt: conn_id %d, mtu_size %d", conn_id, mtu_size);
;;;266    }
;;;267    
;;;268    /**
;;;269     * @brief    Handle msg GAP_MSG_LE_CONN_PARAM_UPDATE
;;;270     * @note     All the connection parameter update change  events are pre-handled in this function.
;;;271     * @param[in] conn_id Connection ID
;;;272     * @param[in] status  New update state
;;;273     * @param[in] cause Use this cause when status is GAP_CONN_PARAM_UPDATE_STATUS_FAIL
;;;274     * @return   void
;;;275     */
;;;276    void app_handle_conn_param_update_evt(uint8_t conn_id, uint8_t status, uint16_t cause)
;;;277    {
;;;278        switch (status)
;;;279        {
;;;280        case GAP_CONN_PARAM_UPDATE_STATUS_SUCCESS:
;;;281            {
;;;282                uint16_t conn_interval;
;;;283                uint16_t conn_slave_latency;
;;;284                uint16_t conn_supervision_timeout;
;;;285    
;;;286                le_get_conn_param(GAP_PARAM_CONN_INTERVAL, &conn_interval, conn_id);
;;;287                le_get_conn_param(GAP_PARAM_CONN_LATENCY, &conn_slave_latency, conn_id);
;;;288                le_get_conn_param(GAP_PARAM_CONN_TIMEOUT, &conn_supervision_timeout, conn_id);
;;;289                APP_PRINT_INFO3("app_handle_conn_param_update_evt update success:conn_interval 0x%x, conn_slave_latency 0x%x, conn_supervision_timeout 0x%x",
;;;290                                conn_interval, conn_slave_latency, conn_supervision_timeout);
;;;291            }
;;;292            break;
;;;293    
;;;294        case GAP_CONN_PARAM_UPDATE_STATUS_FAIL:
;;;295            {
;;;296                APP_PRINT_ERROR1("app_handle_conn_param_update_evt update failed: cause 0x%x", cause);
;;;297            }
;;;298            break;
;;;299    
;;;300        case GAP_CONN_PARAM_UPDATE_STATUS_PENDING:
;;;301            {
;;;302                APP_PRINT_INFO0("app_handle_conn_param_update_evt update pending.");
;;;303            }
;;;304            break;
;;;305    
;;;306        default:
;;;307            break;
;;;308        }
;;;309    }
;;;310    
;;;311    /**
;;;312     * @brief    All the BT GAP MSG are pre-handled in this function.
;;;313     * @note     Then the event handling function shall be called according to the
;;;314     *           subtype of T_IO_MSG
;;;315     * @param[in] p_gap_msg Pointer to GAP msg
;;;316     * @return   void
;;;317     */
;;;318    void app_handle_gap_msg(T_IO_MSG *p_gap_msg)
;;;319    {
        0x0080f8be:    b57f        ..      PUSH     {r0-r6,lr}
        0x0080f8c0:    4605        .F      MOV      r5,r0
;;;320        T_LE_GAP_MSG gap_msg;
;;;321        uint8_t conn_id;
;;;322        memcpy(&gap_msg, &p_gap_msg->u.param, sizeof(p_gap_msg->u.param));
;;;323    
;;;324        APP_PRINT_TRACE1("app_handle_gap_msg: subtype %d", p_gap_msg->subtype);
        0x0080f8c2:    8843        C.      LDRH     r3,[r0,#2]
        0x0080f8c4:    6844        Dh      LDR      r4,[r0,#4]
        0x0080f8c6:    4972        rI      LDR      r1,[pc,#456] ; [0x80fa90] = 0x8800594
        0x0080f8c8:    486f        oH      LDR      r0,[pc,#444] ; [0x80fa88] = 0x21103002
        0x0080f8ca:    2201        ."      MOVS     r2,#1
        0x0080f8cc:    3134        41      ADDS     r1,r1,#0x34
        0x0080f8ce:    1c40        @.      ADDS     r0,r0,#1
        0x0080f8d0:    f7f8d8c5    ....    BL       log_buffer ; 0x7a5e
;;;325        switch (p_gap_msg->subtype)
        0x0080f8d4:    886b        k.      LDRH     r3,[r5,#2]
        0x0080f8d6:    2000        .       MOVS     r0,#0
        0x0080f8d8:    4d6b        kM      LDR      r5,[pc,#428] ; [0x80fa88] = 0x21103002
        0x0080f8da:    2b0b        .+      CMP      r3,#0xb
        0x0080f8dc:    d27e        ~.      BCS      0x80f9dc ; app_handle_gap_msg + 286
        0x0080f8de:    e8dff003    ....    TBB      [pc,r3]
    $d
        0x0080f8e2:    0683        ..      DCW    1667
        0x0080f8e4:    22141a0c    ..."    DCD    571742732
        0x0080f8e8:    496c5b37    7[lI    DCD    1231838007
        0x0080f8ec:    002a        *.      DCW    42
    $t
;;;326        {
;;;327        case GAP_MSG_LE_DEV_STATE_CHANGE:
;;;328            {
;;;329                app_handle_dev_state_evt(gap_msg.msg_data.gap_dev_state_change.new_state,
        0x0080f8ee:    b004        ..      ADD      sp,sp,#0x10
        0x0080f8f0:    4620         F      MOV      r0,r4
        0x0080f8f2:    0c21        !.      LSRS     r1,r4,#16
        0x0080f8f4:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0080f8f8:    e79f        ..      B        app_handle_dev_state_evt ; 0x80f83a
        0x0080f8fa:    b004        ..      ADD      sp,sp,#0x10
        0x0080f8fc:    0c22        ".      LSRS     r2,r4,#16
        0x0080f8fe:    f3c42107    ...!    UBFX     r1,r4,#8,#8
        0x0080f902:    b2e0        ..      UXTB     r0,r4
;;;330                                         gap_msg.msg_data.gap_dev_state_change.cause);
;;;331            }
;;;332            break;
;;;333    
;;;334        case GAP_MSG_LE_CONN_STATE_CHANGE:
;;;335            {
;;;336                app_handle_conn_state_evt(gap_msg.msg_data.gap_conn_state_change.conn_id,
        0x0080f904:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0080f908:    e735        5.      B        app_handle_conn_state_evt ; 0x80f776
        0x0080f90a:    b004        ..      ADD      sp,sp,#0x10
        0x0080f90c:    0c21        !.      LSRS     r1,r4,#16
        0x0080f90e:    b2e0        ..      UXTB     r0,r4
;;;337                                          (T_GAP_CONN_STATE)gap_msg.msg_data.gap_conn_state_change.new_state,
;;;338                                          gap_msg.msg_data.gap_conn_state_change.disc_cause);
;;;339            }
;;;340            break;
;;;341    
;;;342        case GAP_MSG_LE_CONN_MTU_INFO:
;;;343            {
;;;344                app_handle_conn_mtu_info_evt(gap_msg.msg_data.gap_conn_mtu_info.conn_id,
        0x0080f910:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0080f914:    e725        %.      B        app_handle_conn_mtu_info_evt ; 0x80f762
        0x0080f916:    b004        ..      ADD      sp,sp,#0x10
        0x0080f918:    0c22        ".      LSRS     r2,r4,#16
        0x0080f91a:    f3c42107    ...!    UBFX     r1,r4,#8,#8
        0x0080f91e:    b2e0        ..      UXTB     r0,r4
;;;345                                             gap_msg.msg_data.gap_conn_mtu_info.mtu_size);
;;;346            }
;;;347            break;
;;;348    
;;;349        case GAP_MSG_LE_CONN_PARAM_UPDATE:
;;;350            {
;;;351                app_handle_conn_param_update_evt(gap_msg.msg_data.gap_conn_param_update.conn_id,
        0x0080f920:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0080f924:    e6df        ..      B        app_handle_conn_param_update_evt ; 0x80f6e6
        0x0080f926:    b004        ..      ADD      sp,sp,#0x10
        0x0080f928:    0c22        ".      LSRS     r2,r4,#16
        0x0080f92a:    f3c42107    ...!    UBFX     r1,r4,#8,#8
        0x0080f92e:    b2e0        ..      UXTB     r0,r4
;;;352                                                 gap_msg.msg_data.gap_conn_param_update.status,
;;;353                                                 gap_msg.msg_data.gap_conn_param_update.cause);
;;;354            }
;;;355            break;
;;;356    
;;;357        case GAP_MSG_LE_AUTHEN_STATE_CHANGE:
;;;358            {
;;;359                app_handle_authen_state_evt(gap_msg.msg_data.gap_authen_state.conn_id,
        0x0080f930:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0080f934:    e6af        ..      B        app_handle_authen_state_evt ; 0x80f696
        0x0080f936:    b2e0        ..      UXTB     r0,r4
;;;360                                            gap_msg.msg_data.gap_authen_state.new_state,
;;;361                                            gap_msg.msg_data.gap_authen_state.status);
;;;362            }
;;;363            break;
;;;364    
;;;365        case GAP_MSG_LE_BOND_JUST_WORK:
;;;366            {
;;;367                conn_id = gap_msg.msg_data.gap_bond_just_work_conf.conn_id;
;;;368                le_bond_just_work_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
        0x0080f938:    2101        .!      MOVS     r1,#1
        0x0080f93a:    f00bfa5a    ..Z.    BL       le_bond_just_work_confirm ; 0x81adf2
;;;369                APP_PRINT_INFO0("GAP_MSG_LE_BOND_JUST_WORK");
        0x0080f93e:    b004        ..      ADD      sp,sp,#0x10
        0x0080f940:    4628        (F      MOV      r0,r5
        0x0080f942:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0080f946:    4952        RI      LDR      r1,[pc,#328] ; [0x80fa90] = 0x8800594
        0x0080f948:    2200        ."      MOVS     r2,#0
        0x0080f94a:    3154        T1      ADDS     r1,r1,#0x54
        0x0080f94c:    f7f89887    ....    B        log_buffer ; 0x7a5e
;;;370            }
;;;371            break;
;;;372    
;;;373        case GAP_MSG_LE_BOND_PASSKEY_DISPLAY:
;;;374            {
;;;375                uint32_t display_value = 0;
        0x0080f950:    b2e4        ..      UXTB     r4,r4
;;;376                conn_id = gap_msg.msg_data.gap_bond_passkey_display.conn_id;
;;;377                le_bond_get_display_key(conn_id, &display_value);
        0x0080f952:    9000        ..      STR      r0,[sp,#0]
        0x0080f954:    4669        iF      MOV      r1,sp
        0x0080f956:    4620         F      MOV      r0,r4
        0x0080f958:    f43cf547    <.G.    BL       le_bond_get_display_key ; 0x4c3ea
;;;378                APP_PRINT_INFO1("GAP_MSG_LE_BOND_PASSKEY_DISPLAY:passkey %d", display_value);
        0x0080f95c:    494c        LI      LDR      r1,[pc,#304] ; [0x80fa90] = 0x8800594
        0x0080f95e:    2201        ."      MOVS     r2,#1
        0x0080f960:    3174        t1      ADDS     r1,r1,#0x74
        0x0080f962:    4628        (F      MOV      r0,r5
        0x0080f964:    9b00        ..      LDR      r3,[sp,#0]
        0x0080f966:    f7f8d87a    ..z.    BL       log_buffer ; 0x7a5e
;;;379                le_bond_passkey_display_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
        0x0080f96a:    2101        .!      MOVS     r1,#1
        0x0080f96c:    4620         F      MOV      r0,r4
        0x0080f96e:    f43cf581    <...    BL       le_bond_passkey_display_confirm ; 0x4c474
        0x0080f972:    bd7f        ..      POP      {r0-r6,pc}
;;;380            }
;;;381            break;
;;;382    
;;;383        case GAP_MSG_LE_BOND_USER_CONFIRMATION:
;;;384            {
;;;385                uint32_t display_value = 0;
        0x0080f974:    b2e4        ..      UXTB     r4,r4
;;;386                conn_id = gap_msg.msg_data.gap_bond_user_conf.conn_id;
;;;387                le_bond_get_display_key(conn_id, &display_value);
        0x0080f976:    9000        ..      STR      r0,[sp,#0]
        0x0080f978:    4669        iF      MOV      r1,sp
        0x0080f97a:    4620         F      MOV      r0,r4
        0x0080f97c:    f43cf535    <.5.    BL       le_bond_get_display_key ; 0x4c3ea
;;;388                APP_PRINT_INFO1("GAP_MSG_LE_BOND_USER_CONFIRMATION: passkey %d", display_value);
        0x0080f980:    4943        CI      LDR      r1,[pc,#268] ; [0x80fa90] = 0x8800594
        0x0080f982:    2201        ."      MOVS     r2,#1
        0x0080f984:    31a4        .1      ADDS     r1,r1,#0xa4
        0x0080f986:    4628        (F      MOV      r0,r5
        0x0080f988:    9b00        ..      LDR      r3,[sp,#0]
        0x0080f98a:    f7f8d868    ..h.    BL       log_buffer ; 0x7a5e
;;;389                le_bond_user_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
        0x0080f98e:    2101        .!      MOVS     r1,#1
        0x0080f990:    4620         F      MOV      r0,r4
        0x0080f992:    f43cf53f    <.?.    BL       le_bond_user_confirm ; 0x4c414
        0x0080f996:    bd7f        ..      POP      {r0-r6,pc}
        0x0080f998:    493d        =I      LDR      r1,[pc,#244] ; [0x80fa90] = 0x8800594
;;;390            }
;;;391            break;
;;;392    
;;;393        case GAP_MSG_LE_BOND_PASSKEY_INPUT:
;;;394            {
;;;395                uint32_t passkey = 888888;
        0x0080f99a:    b2e4        ..      UXTB     r4,r4
        0x0080f99c:    4e3f        ?N      LDR      r6,[pc,#252] ; [0x80fa9c] = 0xd9038
;;;396                conn_id = gap_msg.msg_data.gap_bond_passkey_input.conn_id;
;;;397                APP_PRINT_INFO1("GAP_MSG_LE_BOND_PASSKEY_INPUT: conn_id %d", conn_id);
        0x0080f99e:    4623        #F      MOV      r3,r4
        0x0080f9a0:    2201        ."      MOVS     r2,#1
        0x0080f9a2:    31d8        .1      ADDS     r1,r1,#0xd8
        0x0080f9a4:    4628        (F      MOV      r0,r5
        0x0080f9a6:    f7f8d85a    ..Z.    BL       log_buffer ; 0x7a5e
;;;398                le_bond_passkey_input_confirm(conn_id, passkey, GAP_CFM_CAUSE_ACCEPT);
        0x0080f9aa:    b004        ..      ADD      sp,sp,#0x10
        0x0080f9ac:    4631        1F      MOV      r1,r6
        0x0080f9ae:    4620         F      MOV      r0,r4
        0x0080f9b0:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0080f9b4:    2201        ."      MOVS     r2,#1
        0x0080f9b6:    f43cb4e4    <...    B        le_bond_passkey_input_confirm ; 0x4c382
;;;399            }
;;;400            break;
;;;401    
;;;402        case GAP_MSG_LE_BOND_OOB_INPUT:
;;;403            {
;;;404                uint8_t oob_data[GAP_OOB_LEN] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        0x0080f9ba:    9000        ..      STR      r0,[sp,#0]
        0x0080f9bc:    9001        ..      STR      r0,[sp,#4]
        0x0080f9be:    9002        ..      STR      r0,[sp,#8]
        0x0080f9c0:    9003        ..      STR      r0,[sp,#0xc]
        0x0080f9c2:    b2e4        ..      UXTB     r4,r4
;;;405                conn_id = gap_msg.msg_data.gap_bond_oob_input.conn_id;
;;;406                APP_PRINT_INFO0("GAP_MSG_LE_BOND_OOB_INPUT");
        0x0080f9c4:    2200        ."      MOVS     r2,#0
        0x0080f9c6:    4936        6I      LDR      r1,[pc,#216] ; [0x80faa0] = 0x880069c
        0x0080f9c8:    4628        (F      MOV      r0,r5
        0x0080f9ca:    f7f8d848    ..H.    BL       log_buffer ; 0x7a5e
;;;407                le_bond_set_param(GAP_PARAM_BOND_OOB_DATA, GAP_OOB_LEN, oob_data);
        0x0080f9ce:    466a        jF      MOV      r2,sp
        0x0080f9d0:    2110        .!      MOVS     r1,#0x10
        0x0080f9d2:    f44f7004    O..p    MOV      r0,#0x210
        0x0080f9d6:    f43cf40a    <...    BL       le_bond_set_param ; 0x4c1ee
;;;408                le_bond_oob_input_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
        0x0080f9da:    e000        ..      B        0x80f9de ; app_handle_gap_msg + 288
        0x0080f9dc:    e004        ..      B        0x80f9e8 ; app_handle_gap_msg + 298
        0x0080f9de:    2101        .!      MOVS     r1,#1
        0x0080f9e0:    4620         F      MOV      r0,r4
        0x0080f9e2:    f43cf4e8    <...    BL       le_bond_oob_input_confirm ; 0x4c3b6
        0x0080f9e6:    bd7f        ..      POP      {r0-r6,pc}
;;;409            }
;;;410            break;
;;;411    
;;;412        default:
;;;413            APP_PRINT_ERROR1("app_handle_gap_msg: unknown subtype %d", p_gap_msg->subtype);
        0x0080f9e8:    b004        ..      ADD      sp,sp,#0x10
        0x0080f9ea:    492d        -I      LDR      r1,[pc,#180] ; [0x80faa0] = 0x880069c
        0x0080f9ec:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0080f9f0:    4825        %H      LDR      r0,[pc,#148] ; [0x80fa88] = 0x21103002
        0x0080f9f2:    2201        ."      MOVS     r2,#1
        0x0080f9f4:    3120         1      ADDS     r1,r1,#0x20
        0x0080f9f6:    1e80        ..      SUBS     r0,r0,#2
        0x0080f9f8:    f7f89831    ..1.    B        log_buffer ; 0x7a5e
    app_handle_io_msg
;;; .\sample\peripheral_app.c (88)
        0x0080f9fc:    b513        ..      PUSH     {r0,r1,r4,lr}
        0x0080f9fe:    f8bd0000    ....    LDRH     r0,[sp,#0]
;;; .\sample\peripheral_app.c (88)
        0x0080fa02:    2800        .(      CMP      r0,#0
        0x0080fa04:    d102        ..      BNE      0x80fa0c ; app_handle_io_msg + 16
;;;89         uint16_t msg_type = io_msg.type;
;;;90     
;;;91         switch (msg_type)
;;;92         {
;;;93         case IO_MSG_TYPE_BT_STATUS:
;;;94             {
;;;95                 app_handle_gap_msg(&io_msg);
        0x0080fa06:    4668        hF      MOV      r0,sp
        0x0080fa08:    f7ffff59    ..Y.    BL       app_handle_gap_msg ; 0x80f8be
;;;96             }
;;;97             break;
;;;98     #if F_BT_ANCS_CLIENT_SUPPORT
;;;99         case IO_MSG_TYPE_ANCS:
;;;100            {
;;;101                ancs_handle_msg(&io_msg);
;;;102            }
;;;103            break;
;;;104    #endif
;;;105        default:
;;;106            break;
;;;107        }
;;;108    }
        0x0080fa0c:    bd1c        ..      POP      {r2-r4,pc}
    app_gap_callback
;;;109    
;;;110    /**
;;;111     * @brief    Handle msg GAP_MSG_LE_DEV_STATE_CHANGE
;;;112     * @note     All the gap device state events are pre-handled in this function.
;;;113     *           Then the event handling function shall be called according to the new_state
;;;114     * @param[in] new_state  New gap device state
;;;115     * @param[in] cause GAP device state change cause
;;;116     * @return   void
;;;117     */
;;;118    void app_handle_dev_state_evt(T_GAP_DEV_STATE new_state, uint16_t cause)
;;;119    {
;;;120        APP_PRINT_INFO3("app_handle_dev_state_evt: init state %d, adv state %d, cause 0x%x",
;;;121                        new_state.gap_init_state, new_state.gap_adv_state, cause);
;;;122        if (gap_dev_state.gap_init_state != new_state.gap_init_state)
;;;123        {
;;;124            if (new_state.gap_init_state == GAP_INIT_STATE_STACK_READY)
;;;125            {
;;;126                APP_PRINT_INFO0("GAP stack ready");
;;;127                /*stack ready*/
;;;128                le_adv_start();
;;;129            }
;;;130        }
;;;131    
;;;132        if (gap_dev_state.gap_adv_state != new_state.gap_adv_state)
;;;133        {
;;;134            if (new_state.gap_adv_state == GAP_ADV_STATE_IDLE)
;;;135            {
;;;136                if (new_state.gap_adv_sub_state == GAP_ADV_TO_IDLE_CAUSE_CONN)
;;;137                {
;;;138                    APP_PRINT_INFO0("GAP adv stoped: because connection created");
;;;139                }
;;;140                else
;;;141                {
;;;142                    APP_PRINT_INFO0("GAP adv stoped");
;;;143                }
;;;144            }
;;;145            else if (new_state.gap_adv_state == GAP_ADV_STATE_ADVERTISING)
;;;146            {
;;;147                APP_PRINT_INFO0("GAP adv start");
;;;148            }
;;;149        }
;;;150    
;;;151        gap_dev_state = new_state;
;;;152    }
;;;153    
;;;154    /**
;;;155     * @brief    Handle msg GAP_MSG_LE_CONN_STATE_CHANGE
;;;156     * @note     All the gap conn state events are pre-handled in this function.
;;;157     *           Then the event handling function shall be called according to the new_state
;;;158     * @param[in] conn_id Connection ID
;;;159     * @param[in] new_state  New gap connection state
;;;160     * @param[in] disc_cause Use this cause when new_state is GAP_CONN_STATE_DISCONNECTED
;;;161     * @return   void
;;;162     */
;;;163    void app_handle_conn_state_evt(uint8_t conn_id, T_GAP_CONN_STATE new_state, uint16_t disc_cause)
;;;164    {
;;;165        APP_PRINT_INFO4("app_handle_conn_state_evt: conn_id %d old_state %d new_state %d, disc_cause 0x%x",
;;;166                        conn_id, gap_conn_state, new_state, disc_cause);
;;;167        switch (new_state)
;;;168        {
;;;169        case GAP_CONN_STATE_DISCONNECTED:
;;;170            {
;;;171                if ((disc_cause != (HCI_ERR | HCI_ERR_REMOTE_USER_TERMINATE))
;;;172                    && (disc_cause != (HCI_ERR | HCI_ERR_LOCAL_HOST_TERMINATE)))
;;;173                {
;;;174                    APP_PRINT_ERROR1("app_handle_conn_state_evt: connection lost cause 0x%x", disc_cause);
;;;175                }
;;;176    
;;;177                le_adv_start();
;;;178                m_conn_id = 0; 
;;;179                tuya_ble_disconnected_handler();
;;;180                tuya_ota_init_disconnect();
;;;181            }
;;;182            break;
;;;183    
;;;184        case GAP_CONN_STATE_CONNECTED:
;;;185            {
;;;186                uint16_t conn_interval;
;;;187                uint16_t conn_latency;
;;;188                uint16_t conn_supervision_timeout;
;;;189                uint8_t  remote_bd[6];
;;;190                T_GAP_REMOTE_ADDR_TYPE remote_bd_type;
;;;191    
;;;192                le_get_conn_param(GAP_PARAM_CONN_INTERVAL, &conn_interval, conn_id);
;;;193                le_get_conn_param(GAP_PARAM_CONN_LATENCY, &conn_latency, conn_id);
;;;194                le_get_conn_param(GAP_PARAM_CONN_TIMEOUT, &conn_supervision_timeout, conn_id);
;;;195                le_get_conn_addr(conn_id, remote_bd, &remote_bd_type);
;;;196                APP_PRINT_INFO5("GAP_CONN_STATE_CONNECTED:remote_bd %s, remote_addr_type %d, conn_interval 0x%x, conn_latency 0x%x, conn_supervision_timeout 0x%x",
;;;197                                TRACE_BDADDR(remote_bd), remote_bd_type,
;;;198                                conn_interval, conn_latency, conn_supervision_timeout);
;;;199                m_conn_id = conn_id;          
;;;200    			tuya_ble_connected_handler();
;;;201            }
;;;202            break;
;;;203    
;;;204        default:
;;;205            break;
;;;206        }
;;;207        gap_conn_state = new_state;
;;;208    }
;;;209    
;;;210    /**
;;;211     * @brief    Handle msg GAP_MSG_LE_AUTHEN_STATE_CHANGE
;;;212     * @note     All the gap authentication state events are pre-handled in this function.
;;;213     *           Then the event handling function shall be called according to the new_state
;;;214     * @param[in] conn_id Connection ID
;;;215     * @param[in] new_state  New authentication state
;;;216     * @param[in] cause Use this cause when new_state is GAP_AUTHEN_STATE_COMPLETE
;;;217     * @return   void
;;;218     */
;;;219    void app_handle_authen_state_evt(uint8_t conn_id, uint8_t new_state, uint16_t cause)
;;;220    {
;;;221        APP_PRINT_INFO2("app_handle_authen_state_evt:conn_id %d, cause 0x%x", conn_id, cause);
;;;222    
;;;223        switch (new_state)
;;;224        {
;;;225        case GAP_AUTHEN_STATE_STARTED:
;;;226            {
;;;227                APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_STARTED");
;;;228            }
;;;229            break;
;;;230    
;;;231        case GAP_AUTHEN_STATE_COMPLETE:
;;;232            {
;;;233                if (cause == GAP_SUCCESS)
;;;234                {
;;;235    #if F_BT_ANCS_CLIENT_SUPPORT
;;;236                    ancs_start_discovery(conn_id);
;;;237    #endif
;;;238                    APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_COMPLETE pair success");
;;;239    
;;;240                }
;;;241                else
;;;242                {
;;;243                    APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_COMPLETE pair failed");
;;;244                }
;;;245            }
;;;246            break;
;;;247    
;;;248        default:
;;;249            {
;;;250                APP_PRINT_ERROR1("app_handle_authen_state_evt: unknown newstate %d", new_state);
;;;251            }
;;;252            break;
;;;253        }
;;;254    }
;;;255    
;;;256    /**
;;;257     * @brief    Handle msg GAP_MSG_LE_CONN_MTU_INFO
;;;258     * @note     This msg is used to inform APP that exchange mtu procedure is completed.
;;;259     * @param[in] conn_id Connection ID
;;;260     * @param[in] mtu_size  New mtu size
;;;261     * @return   void
;;;262     */
;;;263    void app_handle_conn_mtu_info_evt(uint8_t conn_id, uint16_t mtu_size)
;;;264    {
;;;265        APP_PRINT_INFO2("app_handle_conn_mtu_info_evt: conn_id %d, mtu_size %d", conn_id, mtu_size);
;;;266    }
;;;267    
;;;268    /**
;;;269     * @brief    Handle msg GAP_MSG_LE_CONN_PARAM_UPDATE
;;;270     * @note     All the connection parameter update change  events are pre-handled in this function.
;;;271     * @param[in] conn_id Connection ID
;;;272     * @param[in] status  New update state
;;;273     * @param[in] cause Use this cause when status is GAP_CONN_PARAM_UPDATE_STATUS_FAIL
;;;274     * @return   void
;;;275     */
;;;276    void app_handle_conn_param_update_evt(uint8_t conn_id, uint8_t status, uint16_t cause)
;;;277    {
;;;278        switch (status)
;;;279        {
;;;280        case GAP_CONN_PARAM_UPDATE_STATUS_SUCCESS:
;;;281            {
;;;282                uint16_t conn_interval;
;;;283                uint16_t conn_slave_latency;
;;;284                uint16_t conn_supervision_timeout;
;;;285    
;;;286                le_get_conn_param(GAP_PARAM_CONN_INTERVAL, &conn_interval, conn_id);
;;;287                le_get_conn_param(GAP_PARAM_CONN_LATENCY, &conn_slave_latency, conn_id);
;;;288                le_get_conn_param(GAP_PARAM_CONN_TIMEOUT, &conn_supervision_timeout, conn_id);
;;;289                APP_PRINT_INFO3("app_handle_conn_param_update_evt update success:conn_interval 0x%x, conn_slave_latency 0x%x, conn_supervision_timeout 0x%x",
;;;290                                conn_interval, conn_slave_latency, conn_supervision_timeout);
;;;291            }
;;;292            break;
;;;293    
;;;294        case GAP_CONN_PARAM_UPDATE_STATUS_FAIL:
;;;295            {
;;;296                APP_PRINT_ERROR1("app_handle_conn_param_update_evt update failed: cause 0x%x", cause);
;;;297            }
;;;298            break;
;;;299    
;;;300        case GAP_CONN_PARAM_UPDATE_STATUS_PENDING:
;;;301            {
;;;302                APP_PRINT_INFO0("app_handle_conn_param_update_evt update pending.");
;;;303            }
;;;304            break;
;;;305    
;;;306        default:
;;;307            break;
;;;308        }
;;;309    }
;;;310    
;;;311    /**
;;;312     * @brief    All the BT GAP MSG are pre-handled in this function.
;;;313     * @note     Then the event handling function shall be called according to the
;;;314     *           subtype of T_IO_MSG
;;;315     * @param[in] p_gap_msg Pointer to GAP msg
;;;316     * @return   void
;;;317     */
;;;318    void app_handle_gap_msg(T_IO_MSG *p_gap_msg)
;;;319    {
;;;320        T_LE_GAP_MSG gap_msg;
;;;321        uint8_t conn_id;
;;;322        memcpy(&gap_msg, &p_gap_msg->u.param, sizeof(p_gap_msg->u.param));
;;;323    
;;;324        APP_PRINT_TRACE1("app_handle_gap_msg: subtype %d", p_gap_msg->subtype);
;;;325        switch (p_gap_msg->subtype)
;;;326        {
;;;327        case GAP_MSG_LE_DEV_STATE_CHANGE:
;;;328            {
;;;329                app_handle_dev_state_evt(gap_msg.msg_data.gap_dev_state_change.new_state,
;;;330                                         gap_msg.msg_data.gap_dev_state_change.cause);
;;;331            }
;;;332            break;
;;;333    
;;;334        case GAP_MSG_LE_CONN_STATE_CHANGE:
;;;335            {
;;;336                app_handle_conn_state_evt(gap_msg.msg_data.gap_conn_state_change.conn_id,
;;;337                                          (T_GAP_CONN_STATE)gap_msg.msg_data.gap_conn_state_change.new_state,
;;;338                                          gap_msg.msg_data.gap_conn_state_change.disc_cause);
;;;339            }
;;;340            break;
;;;341    
;;;342        case GAP_MSG_LE_CONN_MTU_INFO:
;;;343            {
;;;344                app_handle_conn_mtu_info_evt(gap_msg.msg_data.gap_conn_mtu_info.conn_id,
;;;345                                             gap_msg.msg_data.gap_conn_mtu_info.mtu_size);
;;;346            }
;;;347            break;
;;;348    
;;;349        case GAP_MSG_LE_CONN_PARAM_UPDATE:
;;;350            {
;;;351                app_handle_conn_param_update_evt(gap_msg.msg_data.gap_conn_param_update.conn_id,
;;;352                                                 gap_msg.msg_data.gap_conn_param_update.status,
;;;353                                                 gap_msg.msg_data.gap_conn_param_update.cause);
;;;354            }
;;;355            break;
;;;356    
;;;357        case GAP_MSG_LE_AUTHEN_STATE_CHANGE:
;;;358            {
;;;359                app_handle_authen_state_evt(gap_msg.msg_data.gap_authen_state.conn_id,
;;;360                                            gap_msg.msg_data.gap_authen_state.new_state,
;;;361                                            gap_msg.msg_data.gap_authen_state.status);
;;;362            }
;;;363            break;
;;;364    
;;;365        case GAP_MSG_LE_BOND_JUST_WORK:
;;;366            {
;;;367                conn_id = gap_msg.msg_data.gap_bond_just_work_conf.conn_id;
;;;368                le_bond_just_work_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;369                APP_PRINT_INFO0("GAP_MSG_LE_BOND_JUST_WORK");
;;;370            }
;;;371            break;
;;;372    
;;;373        case GAP_MSG_LE_BOND_PASSKEY_DISPLAY:
;;;374            {
;;;375                uint32_t display_value = 0;
;;;376                conn_id = gap_msg.msg_data.gap_bond_passkey_display.conn_id;
;;;377                le_bond_get_display_key(conn_id, &display_value);
;;;378                APP_PRINT_INFO1("GAP_MSG_LE_BOND_PASSKEY_DISPLAY:passkey %d", display_value);
;;;379                le_bond_passkey_display_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;380            }
;;;381            break;
;;;382    
;;;383        case GAP_MSG_LE_BOND_USER_CONFIRMATION:
;;;384            {
;;;385                uint32_t display_value = 0;
;;;386                conn_id = gap_msg.msg_data.gap_bond_user_conf.conn_id;
;;;387                le_bond_get_display_key(conn_id, &display_value);
;;;388                APP_PRINT_INFO1("GAP_MSG_LE_BOND_USER_CONFIRMATION: passkey %d", display_value);
;;;389                le_bond_user_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;390            }
;;;391            break;
;;;392    
;;;393        case GAP_MSG_LE_BOND_PASSKEY_INPUT:
;;;394            {
;;;395                uint32_t passkey = 888888;
;;;396                conn_id = gap_msg.msg_data.gap_bond_passkey_input.conn_id;
;;;397                APP_PRINT_INFO1("GAP_MSG_LE_BOND_PASSKEY_INPUT: conn_id %d", conn_id);
;;;398                le_bond_passkey_input_confirm(conn_id, passkey, GAP_CFM_CAUSE_ACCEPT);
;;;399            }
;;;400            break;
;;;401    
;;;402        case GAP_MSG_LE_BOND_OOB_INPUT:
;;;403            {
;;;404                uint8_t oob_data[GAP_OOB_LEN] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
;;;405                conn_id = gap_msg.msg_data.gap_bond_oob_input.conn_id;
;;;406                APP_PRINT_INFO0("GAP_MSG_LE_BOND_OOB_INPUT");
;;;407                le_bond_set_param(GAP_PARAM_BOND_OOB_DATA, GAP_OOB_LEN, oob_data);
;;;408                le_bond_oob_input_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;409            }
;;;410            break;
;;;411    
;;;412        default:
;;;413            APP_PRINT_ERROR1("app_handle_gap_msg: unknown subtype %d", p_gap_msg->subtype);
;;;414            break;
;;;415        }
;;;416    }
;;;417    /** @} */ /* End of group PERIPH_GAP_MSG */
;;;418    
;;;419    /** @defgroup  PERIPH_GAP_CALLBACK GAP Callback Event Handler
;;;420        * @brief Handle GAP callback event
;;;421        * @{
;;;422        */
;;;423    /**
;;;424      * @brief Callback for gap le to notify app
;;;425      * @param[in] cb_type callback msy type @ref GAP_LE_MSG_Types.
;;;426      * @param[in] p_cb_data point to callback data @ref T_LE_CB_DATA.
;;;427      * @retval result @ref T_APP_RESULT
;;;428      */
;;;429    T_APP_RESULT app_gap_callback(uint8_t cb_type, void *p_cb_data)
;;;430    {
        0x0080fa0e:    b57c        |.      PUSH     {r2-r6,lr}
        0x0080fa10:    2400        .$      MOVS     r4,#0
        0x0080fa12:    4d1d        .M      LDR      r5,[pc,#116] ; [0x80fa88] = 0x21103002
        0x0080fa14:    2801        .(      CMP      r0,#1
        0x0080fa16:    d017        ..      BEQ      0x80fa48 ; app_gap_callback + 58
;;;431        T_APP_RESULT result = APP_RESULT_SUCCESS;
;;;432        T_LE_CB_DATA *p_data = (T_LE_CB_DATA *)p_cb_data;
;;;433    
;;;434        switch (cb_type)
        0x0080fa18:    2814        .(      CMP      r0,#0x14
        0x0080fa1a:    d008        ..      BEQ      0x80fa2e ; app_gap_callback + 32
        0x0080fa1c:    4920         I      LDR      r1,[pc,#128] ; [0x80faa0] = 0x880069c
        0x0080fa1e:    4603        .F      MOV      r3,r0
        0x0080fa20:    2201        ."      MOVS     r2,#1
        0x0080fa22:    31dc        .1      ADDS     r1,r1,#0xdc
        0x0080fa24:    1ea8        ..      SUBS     r0,r5,#2
        0x0080fa26:    f7f8d81a    ....    BL       log_buffer ; 0x7a5e
        0x0080fa2a:    4620         F      MOV      r0,r4
        0x0080fa2c:    bd7c        |.      POP      {r2-r6,pc}
;;;435        {
;;;436        case GAP_MSG_LE_DATA_LEN_CHANGE_INFO:
;;;437            APP_PRINT_INFO3("GAP_MSG_LE_DATA_LEN_CHANGE_INFO: conn_id %d, tx octets 0x%x, max_tx_time 0x%x",
        0x0080fa2e:    6808        .h      LDR      r0,[r1,#0]
        0x0080fa30:    8882        ..      LDRH     r2,[r0,#4]
        0x0080fa32:    8841        A.      LDRH     r1,[r0,#2]
        0x0080fa34:    e9cd1200    ....    STRD     r1,r2,[sp,#0]
        0x0080fa38:    4919        .I      LDR      r1,[pc,#100] ; [0x80faa0] = 0x880069c
        0x0080fa3a:    7803        .x      LDRB     r3,[r0,#0]
        0x0080fa3c:    2203        ."      MOVS     r2,#3
        0x0080fa3e:    314c        L1      ADDS     r1,r1,#0x4c
        0x0080fa40:    4628        (F      MOV      r0,r5
        0x0080fa42:    f7f8d80c    ....    BL       log_buffer ; 0x7a5e
;;;438                            p_data->p_le_data_len_change_info->conn_id,
;;;439                            p_data->p_le_data_len_change_info->max_tx_octets,
;;;440                            p_data->p_le_data_len_change_info->max_tx_time);
;;;441            break;
        0x0080fa46:    e7f0        ..      B        0x80fa2a ; app_gap_callback + 28
;;;442    
;;;443        case GAP_MSG_LE_MODIFY_WHITE_LIST:
;;;444            APP_PRINT_INFO2("GAP_MSG_LE_MODIFY_WHITE_LIST: operation %d, cause 0x%x",
        0x0080fa48:    6808        .h      LDR      r0,[r1,#0]
        0x0080fa4a:    2202        ."      MOVS     r2,#2
        0x0080fa4c:    8841        A.      LDRH     r1,[r0,#2]
        0x0080fa4e:    9100        ..      STR      r1,[sp,#0]
        0x0080fa50:    4913        .I      LDR      r1,[pc,#76] ; [0x80faa0] = 0x880069c
        0x0080fa52:    7803        .x      LDRB     r3,[r0,#0]
        0x0080fa54:    31a0        .1      ADDS     r1,r1,#0xa0
        0x0080fa56:    4628        (F      MOV      r0,r5
        0x0080fa58:    f7f8d801    ....    BL       log_buffer ; 0x7a5e
;;;445                            p_data->p_le_modify_white_list_rsp->operation,
;;;446                            p_data->p_le_modify_white_list_rsp->cause);
;;;447            break;
        0x0080fa5c:    e7e5        ..      B        0x80fa2a ; app_gap_callback + 28
    app_profile_callback
;;;448    
;;;449        default:
;;;450            APP_PRINT_ERROR1("app_gap_callback: unhandled cb_type 0x%x", cb_type);
;;;451            break;
;;;452        }
;;;453        return result;
;;;454    }
;;;455    /** @} */ /* End of group PERIPH_GAP_CALLBACK */
;;;456    
;;;457    /** @defgroup  PERIPH_SEVER_CALLBACK Profile Server Callback Event Handler
;;;458        * @brief Handle profile server callback event
;;;459        * @{
;;;460        */
;;;461    /**
;;;462        * @brief    All the BT Profile service callback events are handled in this function
;;;463        * @note     Then the event handling function shall be called according to the
;;;464        *           service_id
;;;465        * @param    service_id  Profile service ID
;;;466        * @param    p_data      Pointer to callback data
;;;467        * @return   T_APP_RESULT, which indicates the function call is successful or not
;;;468        * @retval   APP_RESULT_SUCCESS  Function run successfully
;;;469        * @retval   others              Function run failed, and return number indicates the reason
;;;470        */
;;;471    T_APP_RESULT app_profile_callback(T_SERVER_ID service_id, void *p_data)
;;;472    {
        0x0080fa5e:    b57f        ..      PUSH     {r0-r6,lr}
        0x0080fa60:    2500        .%      MOVS     r5,#0
        0x0080fa62:    4e09        .N      LDR      r6,[pc,#36] ; [0x80fa88] = 0x21103002
        0x0080fa64:    28ff        .(      CMP      r0,#0xff
        0x0080fa66:    d01d        ..      BEQ      0x80faa4 ; app_profile_callback + 70
        0x0080fa68:    4a05        .J      LDR      r2,[pc,#20] ; [0x80fa80] = 0x208230
        0x0080fa6a:    78d2        .x      LDRB     r2,[r2,#3]
        0x0080fa6c:    4290        .B      CMP      r0,r2
        0x0080fa6e:    d150        P.      BNE      0x80fb12 ; app_profile_callback + 180
        0x0080fa70:    4608        .F      MOV      r0,r1
        0x0080fa72:    7809        .x      LDRB     r1,[r1,#0]
        0x0080fa74:    2901        .)      CMP      r1,#1
        0x0080fa76:    d03a        :.      BEQ      0x80faee ; app_profile_callback + 144
        0x0080fa78:    2903        .)      CMP      r1,#3
        0x0080fa7a:    d14a        J.      BNE      0x80fb12 ; app_profile_callback + 180
        0x0080fa7c:    e045        E.      B        0x80fb0a ; app_profile_callback + 172
    $d
        0x0080fa7e:    0000        ..      DCW    0
        0x0080fa80:    00208230    0. .    DCD    2130480
        0x0080fa84:    08800360    `...    DCD    142607200
        0x0080fa88:    21103002    .0.!    DCD    554708994
        0x0080fa8c:    08800464    d...    DCD    142607460
        0x0080fa90:    08800594    ....    DCD    142607764
        0x0080fa94:    0880024c    L...    DCD    142606924
        0x0080fa98:    21300000    ..0!    DCD    556793856
        0x0080fa9c:    000d9038    8...    DCD    888888
        0x0080faa0:    0880069c    ....    DCD    142608028
    $t
        0x0080faa4:    7808        .x      LDRB     r0,[r1,#0]
;;;473        T_APP_RESULT app_result = APP_RESULT_SUCCESS;
;;;474        if (service_id == SERVICE_PROFILE_GENERAL_ID)
;;;475        {
;;;476            T_SERVER_APP_CB_DATA *p_param = (T_SERVER_APP_CB_DATA *)p_data;
        0x0080faa6:    460c        .F      MOV      r4,r1
;;;477            switch (p_param->eventId)
        0x0080faa8:    b110        ..      CBZ      r0,0x80fab0 ; app_profile_callback + 82
        0x0080faaa:    2801        .(      CMP      r0,#1
        0x0080faac:    d131        1.      BNE      0x80fb12 ; app_profile_callback + 180
        0x0080faae:    e006        ..      B        0x80fabe ; app_profile_callback + 96
;;;478            {
;;;479            case PROFILE_EVT_SRV_REG_COMPLETE:// srv register result event.
;;;480                APP_PRINT_INFO1("PROFILE_EVT_SRV_REG_COMPLETE: result %d",
        0x0080fab0:    788b        .x      LDRB     r3,[r1,#2]
        0x0080fab2:    2201        ."      MOVS     r2,#1
        0x0080fab4:    4923        #I      LDR      r1,[pc,#140] ; [0x80fb44] = 0x88007a4
        0x0080fab6:    4630        0F      MOV      r0,r6
        0x0080fab8:    f7f7dfd1    ....    BL       log_buffer ; 0x7a5e
;;;481                                p_param->event_data.service_reg_result);
;;;482                break;
        0x0080fabc:    e029        ).      B        0x80fb12 ; app_profile_callback + 180
;;;483    
;;;484            case PROFILE_EVT_SEND_DATA_COMPLETE:
;;;485                APP_PRINT_INFO5("PROFILE_EVT_SEND_DATA_COMPLETE: conn_id %d, cause 0x%x, service_id %d, attrib_idx 0x%x, credits %d",
        0x0080fabe:    8920         .      LDRH     r0,[r4,#8]
        0x0080fac0:    8863        c.      LDRH     r3,[r4,#2]
        0x0080fac2:    88e2        ..      LDRH     r2,[r4,#6]
        0x0080fac4:    7961        ay      LDRB     r1,[r4,#5]
        0x0080fac6:    e88d000f    ....    STM      sp,{r0-r3}
        0x0080faca:    491e        .I      LDR      r1,[pc,#120] ; [0x80fb44] = 0x88007a4
        0x0080facc:    7923        #y      LDRB     r3,[r4,#4]
        0x0080face:    2205        ."      MOVS     r2,#5
        0x0080fad0:    312c        ,1      ADDS     r1,r1,#0x2c
        0x0080fad2:    4630        0F      MOV      r0,r6
        0x0080fad4:    f7f7dfc3    ....    BL       log_buffer ; 0x7a5e
;;;486                                p_param->event_data.send_data_result.conn_id,
;;;487                                p_param->event_data.send_data_result.cause,
;;;488                                p_param->event_data.send_data_result.service_id,
;;;489                                p_param->event_data.send_data_result.attrib_idx,
;;;490                                p_param->event_data.send_data_result.credits);
;;;491                if (p_param->event_data.send_data_result.cause == GAP_SUCCESS)
        0x0080fad8:    8920         .      LDRH     r0,[r4,#8]
        0x0080fada:    f04f0200    O...    MOV      r2,#0
        0x0080fade:    b118        ..      CBZ      r0,0x80fae8 ; app_profile_callback + 138
        0x0080fae0:    4918        .I      LDR      r1,[pc,#96] ; [0x80fb44] = 0x88007a4
        0x0080fae2:    4819        .H      LDR      r0,[pc,#100] ; [0x80fb48] = 0x21103000
        0x0080fae4:    31c0        .1      ADDS     r1,r1,#0xc0
        0x0080fae6:    e00d        ..      B        0x80fb04 ; app_profile_callback + 166
;;;492                {
;;;493                    APP_PRINT_INFO0("PROFILE_EVT_SEND_DATA_COMPLETE success");
        0x0080fae8:    4916        .I      LDR      r1,[pc,#88] ; [0x80fb44] = 0x88007a4
        0x0080faea:    3194        .1      ADDS     r1,r1,#0x94
        0x0080faec:    e009        ..      B        0x80fb02 ; app_profile_callback + 164
;;;494                }
;;;495                else
;;;496                {
;;;497                    APP_PRINT_ERROR0("PROFILE_EVT_SEND_DATA_COMPLETE failed");
;;;498                }
;;;499                break;
;;;500    
;;;501            default:
;;;502                break;
;;;503            }
;;;504        }
;;;505        else if(service_id == tuya_srv_id)
;;;506        {
;;;507            T_KNS_CALLBACK_DATA *p_kns_cb_data = (T_KNS_CALLBACK_DATA *)p_data;
;;;508            switch (p_kns_cb_data->msg_type)
;;;509            {
;;;510            case SERVICE_CALLBACK_TYPE_INDIFICATION_NOTIFICATION:
;;;511                {
;;;512                    switch (p_kns_cb_data->msg_data.notification_indification_index)
        0x0080faee:    7840        @x      LDRB     r0,[r0,#1]
        0x0080faf0:    b128        (.      CBZ      r0,0x80fafe ; app_profile_callback + 160
        0x0080faf2:    2801        .(      CMP      r0,#1
        0x0080faf4:    d10d        ..      BNE      0x80fb12 ; app_profile_callback + 180
;;;513                    {
;;;514                    case KNS_NOTIFY_ENABLE:
;;;515                        {
;;;516                            APP_PRINT_INFO0("KNS_NOTIFY_ENABLE");
        0x0080faf6:    4913        .I      LDR      r1,[pc,#76] ; [0x80fb44] = 0x88007a4
        0x0080faf8:    2200        ."      MOVS     r2,#0
        0x0080fafa:    31ec        .1      ADDS     r1,r1,#0xec
        0x0080fafc:    e001        ..      B        0x80fb02 ; app_profile_callback + 164
        0x0080fafe:    4913        .I      LDR      r1,[pc,#76] ; [0x80fb4c] = 0x88008a8
        0x0080fb00:    2200        ."      MOVS     r2,#0
        0x0080fb02:    4630        0F      MOV      r0,r6
        0x0080fb04:    f7f7dfab    ....    BL       log_buffer ; 0x7a5e
        0x0080fb08:    e003        ..      B        0x80fb12 ; app_profile_callback + 180
;;;517                        }
;;;518                        break;
;;;519    
;;;520                    case KNS_NOTIFY_DISABLE:
;;;521                        {
;;;522                            APP_PRINT_INFO0("KNS_NOTIFY_DISABLE");
;;;523                        }
;;;524                        break;
;;;525                    default:
;;;526                        break;
;;;527                    }
;;;528                }
;;;529                break;
;;;530            case SERVICE_CALLBACK_TYPE_WRITE_CHAR_VALUE:
;;;531                {
;;;532                  //  APP_PRINT_INFO1("KNS_WRITE_PARA %x", p_kns_cb_data->msg_data.write_value.data_len);
;;;533                 //   gTimeParaValue = p_kns_cb_data->msg_data.write_value;
;;;534                    /*
;;;535                    event.hdr.event_id = TUYA_BLE_DATA_REV_EVT;
;;;536                    event.ble_rev_event.len = p_kns_cb_data->msg_data.write_value.data_len;
;;;537                    memcpy(event.ble_rev_event.data,p_kns_cb_data->msg_data.write_value.data,p_kns_cb_data->msg_data.write_value.data_len);
;;;538                    if(tuya_event_send(&event)!=0)
;;;539                    {
;;;540                        APP_PRINT_ERROR1("tuya_event_send ble data error,data len = %d ", p_kns_cb_data->msg_data.write_value.data_len);   
;;;541                    }
;;;542                    */
;;;543                    tuya_ble_gatt_receive_data(p_kns_cb_data->msg_data.write_value.data,p_kns_cb_data->msg_data.write_value.data_len);
        0x0080fb0a:    7d41        A}      LDRB     r1,[r0,#0x15]
        0x0080fb0c:    1c40        @.      ADDS     r0,r0,#1
        0x0080fb0e:    f001fe31    ..1.    BL       tuya_ble_gatt_receive_data ; 0x811774
        0x0080fb12:    b004        ..      ADD      sp,sp,#0x10
;;;544                   // ble_value_notify(p_kns_cb_data->msg_data.write_value.data,p_kns_cb_data->msg_data.write_value.data_len);
;;;545                }
;;;546                break;
;;;547    
;;;548            default:
;;;549                break;
;;;550            }
;;;551        }
;;;552    
;;;553        return app_result;
        0x0080fb14:    4628        (F      MOV      r0,r5
;;;554    }
        0x0080fb16:    bd70        p.      POP      {r4-r6,pc}
    ble_value_notify
;;;555    
;;;556    bool ble_value_notify(uint8_t *data,uint8_t len)
;;;557    {
        0x0080fb18:    b51c        ..      PUSH     {r2-r4,lr}
        0x0080fb1a:    2914        .)      CMP      r1,#0x14
;;; .\sample\peripheral_app.c (557)
        0x0080fb1c:    d907        ..      BLS      0x80fb2e ; ble_value_notify + 22
;;;558        if(len>PARA_VALUE_LEN_MAX)
;;;559        {
;;;560            APP_PRINT_ERROR0("ble notify value len exceed the limit");
        0x0080fb1e:    490b        .I      LDR      r1,[pc,#44] ; [0x80fb4c] = 0x88008a8
        0x0080fb20:    2200        ."      MOVS     r2,#0
        0x0080fb22:    3118        .1      ADDS     r1,r1,#0x18
        0x0080fb24:    4808        .H      LDR      r0,[pc,#32] ; [0x80fb48] = 0x21103000
        0x0080fb26:    f7f7df9a    ....    BL       log_buffer ; 0x7a5e
;;;561            return false;
        0x0080fb2a:    2000        .       MOVS     r0,#0
        0x0080fb2c:    bd1c        ..      POP      {r2-r4,pc}
;;;562        }
;;;563        else
;;;564        {
;;;565            return server_send_data(m_conn_id, tuya_srv_id, KNS_KEY_VALUE_INDEX, data,len, GATT_PDU_TYPE_NOTIFICATION);
        0x0080fb2e:    2201        ."      MOVS     r2,#1
        0x0080fb30:    4603        .F      MOV      r3,r0
        0x0080fb32:    e9cd1200    ....    STRD     r1,r2,[sp,#0]
        0x0080fb36:    4806        .H      LDR      r0,[pc,#24] ; [0x80fb50] = 0x208230
        0x0080fb38:    2204        ."      MOVS     r2,#4
        0x0080fb3a:    78c1        .x      LDRB     r1,[r0,#3]
        0x0080fb3c:    7800        .x      LDRB     r0,[r0,#0]
        0x0080fb3e:    f43ff631    ?.1.    BL       server_send_data ; 0x4f7a4
;;;566        }
;;;567    }
        0x0080fb42:    bd1c        ..      POP      {r2-r4,pc}
    $d
        0x0080fb44:    088007a4    ....    DCD    142608292
        0x0080fb48:    21103000    .0.!    DCD    554708992
        0x0080fb4c:    088008a8    ....    DCD    142608552
        0x0080fb50:    00208230    0. .    DCD    2130480
    $t
    .text
    load_overlay
;;; .\..\..\..\src\mcu\rtl876x\overlay_mgr.c
;;;116    {
        0x0080fb54:    b510        ..      PUSH     {r4,lr}
        0x0080fb56:    2803        .(      CMP      r0,#3
;;; .\..\..\..\src\mcu\rtl876x\overlay_mgr.c (116)
        0x0080fb58:    d301        ..      BCC      0x80fb5e ; load_overlay + 10
;;;117        const T_OVERLAY_SECTION *selected_scenario;
;;;118    
;;;119        if (scenario_idx >= OVERLAY_SCENARIO_NUM)
;;;120        {
;;;121            return false;
        0x0080fb5a:    2000        .       MOVS     r0,#0
        0x0080fb5c:    bd10        ..      POP      {r4,pc}
;;;122        }
;;;123    
;;;124        selected_scenario = &overlay_sections[scenario_idx];
        0x0080fb5e:    491a        .I      LDR      r1,[pc,#104] ; [0x80fbc8] = 0x2080c0
        0x0080fb60:    eb0000c0    ....    ADD      r0,r0,r0,LSL #3
        0x0080fb64:    eb010480    ....    ADD      r4,r1,r0,LSL #2
;;;125    
;;;126        if (memcmp(selected_scenario->signature, scenario_name, 8) == 0)
        0x0080fb68:    2208        ."      MOVS     r2,#8
        0x0080fb6a:    4918        .I      LDR      r1,[pc,#96] ; [0x80fbcc] = 0x208234
        0x0080fb6c:    6820         h      LDR      r0,[r4,#0]
        0x0080fb6e:    f44af149    J.I.    BL       memcmp ; 0x59e04
        0x0080fb72:    b198        ..      CBZ      r0,0x80fb9c ; load_overlay + 72
;;;127        {
;;;128            return true;
;;;129        }
;;;130    
;;;131        /* load code */
;;;132        memcpy(selected_scenario->image_ro_base, selected_scenario->load_ro_base,
        0x0080fb74:    69a2        .i      LDR      r2,[r4,#0x18]
        0x0080fb76:    6861        ah      LDR      r1,[r4,#4]
        0x0080fb78:    68e0        .h      LDR      r0,[r4,#0xc]
        0x0080fb7a:    f44af18e    J...    BL       __aeabi_memcpy ; 0x59e9a
;;;133               selected_scenario->ro_length);
;;;134        /* load rw data */
;;;135        memcpy(selected_scenario->image_rw_base, selected_scenario->load_rw_base,
        0x0080fb7e:    69e2        .i      LDR      r2,[r4,#0x1c]
        0x0080fb80:    68a1        .h      LDR      r1,[r4,#8]
        0x0080fb82:    6920         i      LDR      r0,[r4,#0x10]
        0x0080fb84:    f44af189    J...    BL       __aeabi_memcpy ; 0x59e9a
;;;136               selected_scenario->rw_length);
;;;137        /* clear zi data */
;;;138        memset(selected_scenario->image_zi_base, 0x0, selected_scenario->zi_length);
        0x0080fb88:    6a21        !j      LDR      r1,[r4,#0x20]
        0x0080fb8a:    6960        `i      LDR      r0,[r4,#0x14]
        0x0080fb8c:    f44af246    J.F.    BL       __aeabi_memclr ; 0x5a01c
;;;139    
;;;140        memcpy(scenario_name, selected_scenario->signature, 8);
        0x0080fb90:    6820         h      LDR      r0,[r4,#0]
        0x0080fb92:    490e        .I      LDR      r1,[pc,#56] ; [0x80fbcc] = 0x208234
        0x0080fb94:    6802        .h      LDR      r2,[r0,#0]
        0x0080fb96:    600a        .`      STR      r2,[r1,#0]
        0x0080fb98:    6840        @h      LDR      r0,[r0,#4]
        0x0080fb9a:    6048        H`      STR      r0,[r1,#4]
        0x0080fb9c:    2001        .       MOVS     r0,#1
;;;141    
;;;142        return true;
;;;143    }
        0x0080fb9e:    bd10        ..      POP      {r4,pc}
    get_current_scenario_index
;;;144    
;;;145    T_OVERLAY_SCENARIO_IDX get_current_scenario_index(void)
;;;146    {
        0x0080fba0:    b570        p.      PUSH     {r4-r6,lr}
        0x0080fba2:    4d09        .M      LDR      r5,[pc,#36] ; [0x80fbc8] = 0x2080c0
;;;147        const T_OVERLAY_SECTION *selected_scenario;
;;;148    
;;;149        for (int i = 0; i < (int)OVERLAY_SCENARIO_NUM; ++i)
        0x0080fba4:    2400        .$      MOVS     r4,#0
        0x0080fba6:    eb0400c4    ....    ADD      r0,r4,r4,LSL #3
        0x0080fbaa:    2208        ."      MOVS     r2,#8
        0x0080fbac:    f8550020    U. .    LDR      r0,[r5,r0,LSL #2]
        0x0080fbb0:    4906        .I      LDR      r1,[pc,#24] ; [0x80fbcc] = 0x208234
        0x0080fbb2:    f44af127    J.'.    BL       memcmp ; 0x59e04
        0x0080fbb6:    b120         .      CBZ      r0,0x80fbc2 ; get_current_scenario_index + 34
        0x0080fbb8:    1c64        d.      ADDS     r4,r4,#1
        0x0080fbba:    2c03        .,      CMP      r4,#3
        0x0080fbbc:    dbf3        ..      BLT      0x80fba6 ; get_current_scenario_index + 6
        0x0080fbbe:    2003        .       MOVS     r0,#3
        0x0080fbc0:    bd70        p.      POP      {r4-r6,pc}
;;;150        {
;;;151            selected_scenario = &overlay_sections[i];
;;;152            if (memcmp(selected_scenario->signature, scenario_name, 8) == 0)
;;;153            {
;;;154                return (T_OVERLAY_SCENARIO_IDX)i;
        0x0080fbc2:    b2e0        ..      UXTB     r0,r4
;;;155            }
;;;156        }
;;;157    
;;;158        return OVERLAY_SCENARIO_NUM; //not found valid scenario
;;;159    }
        0x0080fbc4:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x0080fbc6:    0000        ..      DCW    0
        0x0080fbc8:    002080c0    .. .    DCD    2130112
        0x0080fbcc:    00208234    4. .    DCD    2130484
    $t
    .text
    global_data_uart_init
;;; sample\uart.c
;;;45         IO_UART_DLPS_Enter_Allowed = false;
        0x0080fbd0:    4858        XH      LDR      r0,[pc,#352] ; [0x80fd34] = 0x20823c
        0x0080fbd2:    2100        .!      MOVS     r1,#0
        0x0080fbd4:    7001        .p      STRB     r1,[r0,#0]
;;;46         UART_RX_Count = 0;
        0x0080fbd6:    8041        A.      STRH     r1,[r0,#2]
;;;47         memset(UART_RX_Buffer, 0, sizeof(UART_RX_Buffer));
        0x0080fbd8:    f44f7116    O..q    MOV      r1,#0x258
        0x0080fbdc:    1d00        ..      ADDS     r0,r0,#4
        0x0080fbde:    f44ab21d    J...    B        __aeabi_memclr ; 0x5a01c
    uart_dlps_enter_allowed_set
;;;48     }
;;;49     
;;;50     void uart_dlps_enter_allowed_set(bool flag)
;;;51     {
        0x0080fbe2:    b570        p.      PUSH     {r4-r6,lr}
        0x0080fbe4:    4604        .F      MOV      r4,r0
;;;52         tuya_ble_device_enter_critical();
        0x0080fbe6:    f00afebf    ....    BL       tuya_ble_device_enter_critical ; 0x81a968
;;;53         IO_UART_DLPS_Enter_Allowed = flag; 
        0x0080fbea:    4d52        RM      LDR      r5,[pc,#328] ; [0x80fd34] = 0x20823c
        0x0080fbec:    702c        ,p      STRB     r4,[r5,#0]
;;;54         tuya_ble_device_exit_critical();
        0x0080fbee:    f00afec1    ....    BL       tuya_ble_device_exit_critical ; 0x81a974
;;;55            
;;;56         APP_PRINT_INFO1("IO_UART_DLPS_Enter_Allowed = %d",IO_UART_DLPS_Enter_Allowed);  
        0x0080fbf2:    782b        +x      LDRB     r3,[r5,#0]
        0x0080fbf4:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0080fbf8:    2201        ."      MOVS     r2,#1
        0x0080fbfa:    494f        OI      LDR      r1,[pc,#316] ; [0x80fd38] = 0x88008ec
        0x0080fbfc:    484f        OH      LDR      r0,[pc,#316] ; [0x80fd3c] = 0x21103002
        0x0080fbfe:    f7f79f2e    ....    B        log_buffer ; 0x7a5e
    board_uart_init
;;;57     }
;;;58     
;;;59     
;;;60     /**
;;;61       * @brief  Initialization of pinmux settings and pad settings.
;;;62       * @param  No parameter.
;;;63       * @return void
;;;64       */
;;;65     void board_uart_init(void)
;;;66     {
        0x0080fc02:    b57c        |.      PUSH     {r2-r6,lr}
;;;67         Pad_Config(UART_TX_PIN, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_HIGH);
        0x0080fc04:    2501        .%      MOVS     r5,#1
        0x0080fc06:    2400        .$      MOVS     r4,#0
        0x0080fc08:    462b        +F      MOV      r3,r5
        0x0080fc0a:    462a        *F      MOV      r2,r5
        0x0080fc0c:    4629        )F      MOV      r1,r5
        0x0080fc0e:    2018        .       MOVS     r0,#0x18
        0x0080fc10:    e9cd4500    ...E    STRD     r4,r5,[sp,#0]
        0x0080fc14:    f401f3e2    ....    BL       Pad_Config ; 0x113dc
;;;68         Pad_Config(UART_RX_PIN, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_HIGH);
        0x0080fc18:    2301        .#      MOVS     r3,#1
        0x0080fc1a:    461a        .F      MOV      r2,r3
        0x0080fc1c:    4619        .F      MOV      r1,r3
        0x0080fc1e:    2019        .       MOVS     r0,#0x19
        0x0080fc20:    e9cd4500    ...E    STRD     r4,r5,[sp,#0]
        0x0080fc24:    f401f3da    ....    BL       Pad_Config ; 0x113dc
;;;69         Pad_PullConfigValue(UART_RX_PIN, PAD_STRONG_PULL);
        0x0080fc28:    2101        .!      MOVS     r1,#1
        0x0080fc2a:    2019        .       MOVS     r0,#0x19
        0x0080fc2c:    f401f560    ..`.    BL       Pad_PullConfigValue ; 0x116f0
;;;70     
;;;71         Pinmux_Config(UART_TX_PIN, UART0_TX);
        0x0080fc30:    2123        #!      MOVS     r1,#0x23
        0x0080fc32:    2018        .       MOVS     r0,#0x18
        0x0080fc34:    f401f39e    ....    BL       Pinmux_Config ; 0x11374
;;;72         Pinmux_Config(UART_RX_PIN, UART0_RX);
        0x0080fc38:    e8bd407c    ..|@    POP      {r2-r6,lr}
        0x0080fc3c:    2124        $!      MOVS     r1,#0x24
        0x0080fc3e:    2019        .       MOVS     r0,#0x19
        0x0080fc40:    f401b398    ....    B        Pinmux_Config ; 0x11374
    driver_uart_init
;;;73     }
;;;74     
;;;75     /**
;;;76       * @brief  Initialize uart peripheral.
;;;77       * @param  No parameter.
;;;78       * @return void
;;;79       */
;;;80     void driver_uart_init(void)
;;;81     {
        0x0080fc44:    b530        0.      PUSH     {r4,r5,lr}
        0x0080fc46:    b08b        ..      SUB      sp,sp,#0x2c
;;;82         RCC_PeriphClockCmd(APBPeriph_UART0, APBPeriph_UART0_CLOCK, ENABLE);
        0x0080fc48:    2201        ."      MOVS     r2,#1
        0x0080fc4a:    493d        =I      LDR      r1,[pc,#244] ; [0x80fd40] = 0x40000001
        0x0080fc4c:    483d        =H      LDR      r0,[pc,#244] ; [0x80fd44] = 0x8000001
        0x0080fc4e:    f7fefe31    ..1.    BL       RCC_PeriphClockCmd ; 0x80e8b4
;;;83     
;;;84         global_data_uart_init();
        0x0080fc52:    f7ffffbd    ....    BL       global_data_uart_init ; 0x80fbd0
;;;85         /* uart init */
;;;86         UART_InitTypeDef UART_InitStruct; 
;;;87         UART_StructInit(&UART_InitStruct);
        0x0080fc56:    4668        hF      MOV      r0,sp
        0x0080fc58:    f7fff851    ..Q.    BL       UART_StructInit ; 0x80ecfe
;;;88     
;;;89         UART_InitStruct.parity         = UART_PARITY_NO_PARTY;
        0x0080fc5c:    2000        .       MOVS     r0,#0
        0x0080fc5e:    f8ad0008    ....    STRH     r0,[sp,#8]
;;;90         UART_InitStruct.stopBits       = UART_STOP_BITS_1;
        0x0080fc62:    f8ad000a    ....    STRH     r0,[sp,#0xa]
        0x0080fc66:    2010        .       MOVS     r0,#0x10
        0x0080fc68:    f8ad000e    ....    STRH     r0,[sp,#0xe]
        0x0080fc6c:    2006        .       MOVS     r0,#6
        0x0080fc6e:    4d36        6M      LDR      r5,[pc,#216] ; [0x80fd48] = 0x40012000
;;;91         UART_InitStruct.wordLen        = UART_WROD_LENGTH_8BIT;
        0x0080fc70:    2401        .$      MOVS     r4,#1
        0x0080fc72:    f8ad0012    ....    STRH     r0,[sp,#0x12]
        0x0080fc76:    f8ad4006    ...@    STRH     r4,[sp,#6]
;;;92         UART_InitStruct.rxTriggerLevel = 16;                       //1~29
;;;93         UART_InitStruct.idle_time      = UART_RX_IDLE_64BYTE;      //idle interrupt wait time
;;;94         UART_Init(UART, &UART_InitStruct);
        0x0080fc7a:    4669        iF      MOV      r1,sp
        0x0080fc7c:    4628        (F      MOV      r0,r5
        0x0080fc7e:    f7feffc5    ....    BL       UART_Init ; 0x80ec0c
;;;95     
;;;96         //enable rx interrupt and line status interrupt
;;;97         UART_INTConfig(UART, UART_INT_RD_AVA, ENABLE);
        0x0080fc82:    2201        ."      MOVS     r2,#1
        0x0080fc84:    4611        .F      MOV      r1,r2
        0x0080fc86:    4628        (F      MOV      r0,r5
        0x0080fc88:    f7fff860    ..`.    BL       UART_INTConfig ; 0x80ed4c
;;;98         UART_INTConfig(UART, UART_INT_IDLE, ENABLE);
        0x0080fc8c:    2201        ."      MOVS     r2,#1
        0x0080fc8e:    2180        .!      MOVS     r1,#0x80
        0x0080fc90:    4628        (F      MOV      r0,r5
        0x0080fc92:    f7fff85b    ..[.    BL       UART_INTConfig ; 0x80ed4c
;;;99     
;;;100        /*  Enable UART IRQ  */
;;;101        NVIC_InitTypeDef NVIC_InitStruct;
;;;102        NVIC_InitStruct.NVIC_IRQChannel         = UART0_IRQn;
        0x0080fc96:    200c        .       MOVS     r0,#0xc
        0x0080fc98:    f88d001c    ....    STRB     r0,[sp,#0x1c]
        0x0080fc9c:    2003        .       MOVS     r0,#3
        0x0080fc9e:    9008        ..      STR      r0,[sp,#0x20]
;;;103        NVIC_InitStruct.NVIC_IRQChannelCmd      = (FunctionalState)ENABLE;
        0x0080fca0:    f88d4024    ..$@    STRB     r4,[sp,#0x24]
;;;104        NVIC_InitStruct.NVIC_IRQChannelPriority = 3;
;;;105        NVIC_Init(&NVIC_InitStruct);
        0x0080fca4:    a807        ..      ADD      r0,sp,#0x1c
        0x0080fca6:    f401f30b    ....    BL       NVIC_Init ; 0x112c0
;;;106    }
        0x0080fcaa:    b00b        ..      ADD      sp,sp,#0x2c
        0x0080fcac:    bd30        0.      POP      {r4,r5,pc}
    uart_dlps_enter
;;;107    
;;;108    /**
;;;109      * @brief  IO enter dlps call back function.
;;;110      * @param  No parameter.
;;;111      * @return void
;;;112      */
;;;113    void uart_dlps_enter(void)
;;;114    {
        0x0080fcae:    b510        ..      PUSH     {r4,lr}
;;;115        /* Switch pad to Software mode */
;;;116        Pad_ControlSelectValue(UART_TX_PIN, PAD_SW_MODE);
        0x0080fcb0:    2100        .!      MOVS     r1,#0
        0x0080fcb2:    2018        .       MOVS     r0,#0x18
        0x0080fcb4:    f401f4ea    ....    BL       Pad_ControlSelectValue ; 0x1168c
;;;117        Pad_ControlSelectValue(UART_RX_PIN, PAD_SW_MODE);
        0x0080fcb8:    2100        .!      MOVS     r1,#0
        0x0080fcba:    2019        .       MOVS     r0,#0x19
        0x0080fcbc:    f401f4e6    ....    BL       Pad_ControlSelectValue ; 0x1168c
;;;118    
;;;119        System_WakeUpPinEnable(UART_RX_PIN, PAD_WAKEUP_POL_LOW, 0);
        0x0080fcc0:    2200        ."      MOVS     r2,#0
        0x0080fcc2:    2101        .!      MOVS     r1,#1
        0x0080fcc4:    e8bd4010    ...@    POP      {r4,lr}
        0x0080fcc8:    2019        .       MOVS     r0,#0x19
        0x0080fcca:    f401b418    ....    B        System_WakeUpPinEnable ; 0x114fe
    uart_dlps_exit
;;;120    }
;;;121    
;;;122    /**
;;;123      * @brief  IO exit dlps call back function.
;;;124      * @param  No parameter.
;;;125      * @return void
;;;126      */
;;;127    void uart_dlps_exit(void)
;;;128    {
        0x0080fcce:    b510        ..      PUSH     {r4,lr}
;;;129        /* Switch pad to Pinmux mode */
;;;130        Pad_ControlSelectValue(UART_TX_PIN, PAD_PINMUX_MODE);
        0x0080fcd0:    2101        .!      MOVS     r1,#1
        0x0080fcd2:    2018        .       MOVS     r0,#0x18
        0x0080fcd4:    f401f4da    ....    BL       Pad_ControlSelectValue ; 0x1168c
;;;131        Pad_ControlSelectValue(UART_RX_PIN, PAD_PINMUX_MODE);
        0x0080fcd8:    2101        .!      MOVS     r1,#1
        0x0080fcda:    e8bd4010    ...@    POP      {r4,lr}
        0x0080fcde:    2019        .       MOVS     r0,#0x19
        0x0080fce0:    f401b4d4    ....    B        Pad_ControlSelectValue ; 0x1168c
    uart_dlps_check
;;;132    
;;;133    }
;;;134    
;;;135    /**
;;;136      * @brief  IO enter dlps check function.
;;;137      * @param  No parameter.
;;;138      * @return void
;;;139      */
;;;140    bool uart_dlps_check(void)
;;;141    {
;;;142        return IO_UART_DLPS_Enter_Allowed;
        0x0080fce4:    4813        .H      LDR      r0,[pc,#76] ; [0x80fd34] = 0x20823c
        0x0080fce6:    7800        .x      LDRB     r0,[r0,#0]
;;;143    }
        0x0080fce8:    4770        pG      BX       lr
    uart_senddata_continuous
;;;144    
;;;145    /**
;;;146      * @brief  UARt send data continuous.
;;;147      * @param  No parameter.
;;;148      * @return void
;;;149      */
;;;150    void uart_senddata_continuous(UART_TypeDef *UARTx, const uint8_t *pSend_Buf, uint16_t vCount)
;;;151    {
        0x0080fcea:    b570        p.      PUSH     {r4-r6,lr}
        0x0080fcec:    4615        .F      MOV      r5,r2
        0x0080fcee:    460c        .F      MOV      r4,r1
        0x0080fcf0:    4606        .F      MOV      r6,r0
        0x0080fcf2:    e00f        ..      B        0x80fd14 ; uart_senddata_continuous + 42
;;;152        uint8_t count;
;;;153    
;;;154        while (vCount / UART_TX_FIFO_SIZE > 0)
;;;155        {
;;;156            while (UART_GetFlagState(UARTx, UART_FLAG_THR_EMPTY) == 0);
        0x0080fcf4:    2120         !      MOVS     r1,#0x20
        0x0080fcf6:    4630        0F      MOV      r0,r6
        0x0080fcf8:    f7fff853    ..S.    BL       UART_GetFlagState ; 0x80eda2
        0x0080fcfc:    2800        .(      CMP      r0,#0
        0x0080fcfe:    d0f9        ..      BEQ      0x80fcf4 ; uart_senddata_continuous + 10
;;;157            for (count = UART_TX_FIFO_SIZE; count > 0; count--)
        0x0080fd00:    2110        .!      MOVS     r1,#0x10
        0x0080fd02:    f8140b01    ....    LDRB     r0,[r4],#1
        0x0080fd06:    6270        pb      STR      r0,[r6,#0x24]
        0x0080fd08:    1e49        I.      SUBS     r1,r1,#1
        0x0080fd0a:    f01101ff    ....    ANDS     r1,r1,#0xff
        0x0080fd0e:    d1f8        ..      BNE      0x80fd02 ; uart_senddata_continuous + 24
        0x0080fd10:    3d10        .=      SUBS     r5,r5,#0x10
;;;158            {
;;;159                UARTx->RB_THR = *pSend_Buf++;
;;;160            }
;;;161            vCount -= UART_TX_FIFO_SIZE;
        0x0080fd12:    b2ad        ..      UXTH     r5,r5
        0x0080fd14:    2d0f        .-      CMP      r5,#0xf
        0x0080fd16:    d8ed        ..      BHI      0x80fcf4 ; uart_senddata_continuous + 10
;;;162        }
;;;163    
;;;164        while (UART_GetFlagState(UARTx, UART_FLAG_THR_EMPTY) == 0);
        0x0080fd18:    2120         !      MOVS     r1,#0x20
        0x0080fd1a:    4630        0F      MOV      r0,r6
        0x0080fd1c:    f7fff841    ..A.    BL       UART_GetFlagState ; 0x80eda2
        0x0080fd20:    2800        .(      CMP      r0,#0
        0x0080fd22:    d0f9        ..      BEQ      0x80fd18 ; uart_senddata_continuous + 46
        0x0080fd24:    e002        ..      B        0x80fd2c ; uart_senddata_continuous + 66
        0x0080fd26:    f8140b01    ....    LDRB     r0,[r4],#1
        0x0080fd2a:    6270        pb      STR      r0,[r6,#0x24]
;;;165        while (vCount--)
        0x0080fd2c:    1e6d        m.      SUBS     r5,r5,#1
        0x0080fd2e:    b2ad        ..      UXTH     r5,r5
        0x0080fd30:    d2f9        ..      BCS      0x80fd26 ; uart_senddata_continuous + 60
;;;166        {
;;;167            UARTx->RB_THR = *pSend_Buf++;
;;;168        }
;;;169    }
        0x0080fd32:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x0080fd34:    0020823c    <. .    DCD    2130492
        0x0080fd38:    088008ec    ....    DCD    142608620
        0x0080fd3c:    21103002    .0.!    DCD    554708994
        0x0080fd40:    40000001    ...@    DCD    1073741825
        0x0080fd44:    08000001    ....    DCD    134217729
        0x0080fd48:    40012000    . .@    DCD    1073815552
    $t
    .text
    kns_set_parameter
;;; sample\tuya_ble_services\tuya_ble_service_rtl8762c.c
;;;207    {
        0x0080fd4c:    b570        p.      PUSH     {r4-r6,lr}
        0x0080fd4e:    4616        .F      MOV      r6,r2
        0x0080fd50:    460d        .F      MOV      r5,r1
        0x0080fd52:    2401        .$      MOVS     r4,#1
;;; sample\tuya_ble_services\tuya_ble_service_rtl8762c.c (207)
        0x0080fd54:    b130        0.      CBZ      r0,0x80fd64 ; kns_set_parameter + 24
;;;208        bool ret = true;
;;;209    
;;;210        switch (param_type)
;;;211        {
;;;212        default:
;;;213            {
;;;214                ret = false;
        0x0080fd56:    2400        .$      MOVS     r4,#0
;;;215                PROFILE_PRINT_ERROR0("bas_set_parameter failed");
        0x0080fd58:    4622        "F      MOV      r2,r4
        0x0080fd5a:    4967        gI      LDR      r1,[pc,#412] ; [0x80fef8] = 0x8800910
        0x0080fd5c:    4867        gH      LDR      r0,[pc,#412] ; [0x80fefc] = 0x21103300
        0x0080fd5e:    f7f7de7e    ..~.    BL       log_buffer ; 0x7a5e
;;;216            }
;;;217            break;
        0x0080fd62:    e00c        ..      B        0x80fd7e ; kns_set_parameter + 50
;;;218    
;;;219        case KNS_PARAM_VALUE:
;;;220            {
;;;221                if (length > PARA_VALUE_LEN_MAX)
        0x0080fd64:    2d14        .-      CMP      r5,#0x14
        0x0080fd66:    d901        ..      BLS      0x80fd6c ; kns_set_parameter + 32
;;;222                {
;;;223                    ret = false;
        0x0080fd68:    2400        .$      MOVS     r4,#0
        0x0080fd6a:    e008        ..      B        0x80fd7e ; kns_set_parameter + 50
;;;224                }
;;;225                else
;;;226                {
;;;227                    memset(gParaValue_data,0,PARA_VALUE_LEN_MAX);
        0x0080fd6c:    2114        .!      MOVS     r1,#0x14
        0x0080fd6e:    4864        dH      LDR      r0,[pc,#400] ; [0x80ff00] = 0x20849c
        0x0080fd70:    f44af176    J.v.    BL       __aeabi_memclr4 ; 0x5a060
;;;228                    memcpy(gParaValue_data,p_value,length);
        0x0080fd74:    462a        *F      MOV      r2,r5
        0x0080fd76:    4631        1F      MOV      r1,r6
        0x0080fd78:    4861        aH      LDR      r0,[pc,#388] ; [0x80ff00] = 0x20849c
        0x0080fd7a:    f44af08e    J...    BL       __aeabi_memcpy ; 0x59e9a
;;;229                   // gParaValue = *p_value;
;;;230                }
;;;231            }
;;;232            break;
;;;233        }
;;;234    
;;;235        return ret;
        0x0080fd7e:    4620         F      MOV      r0,r4
;;;236    }
        0x0080fd80:    bd70        p.      POP      {r4-r6,pc}
    kns_attr_read_cb
;;;237    /**
;;;238     * @brief read characteristic data from stack.
;;;239     *
;;;240     * @param ServiceId          ServiceId generated when register to upper stack.
;;;241     * @param attrib_index          Attribute index of getting characteristic data.
;;;242     * @param offset                Used for Blob Read.
;;;243     * @param length_ptr            length of getting characteristic data.
;;;244     * @param ppValue            pointer of getting characteristic data.
;;;245     * @return TProfileResult   profile procedure results.
;;;246    */
;;;247    
;;;248    T_APP_RESULT kns_attr_read_cb(uint8_t conn_id, T_SERVER_ID service_id, uint16_t attrib_index,
;;;249                                  uint16_t offset, uint16_t *p_length, uint8_t **pp_value)
;;;250    {
        0x0080fd82:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0080fd84:    b087        ..      SUB      sp,sp,#0x1c
        0x0080fd86:    2500        .%      MOVS     r5,#0
        0x0080fd88:    e9dd470c    ...G    LDRD     r4,r7,[sp,#0x30]
        0x0080fd8c:    4616        .F      MOV      r6,r2
        0x0080fd8e:    460b        .F      MOV      r3,r1
        0x0080fd90:    8025        %.      STRH     r5,[r4,#0]
        0x0080fd92:    2a02        .*      CMP      r2,#2
        0x0080fd94:    d009        ..      BEQ      0x80fdaa ; kns_attr_read_cb + 40
;;;251        T_APP_RESULT  cause  = APP_RESULT_SUCCESS;
;;;252        *p_length = 0;
;;;253    
;;;254        switch (attrib_index)
;;;255        {
;;;256        default:
;;;257            /* invalid attribute index. */
;;;258            PROFILE_PRINT_ERROR1("kns_attr_read_cb attrib_index = %d not found", attrib_index);
        0x0080fd96:    4958        XI      LDR      r1,[pc,#352] ; [0x80fef8] = 0x8800910
        0x0080fd98:    4613        .F      MOV      r3,r2
        0x0080fd9a:    2201        ."      MOVS     r2,#1
        0x0080fd9c:    311c        .1      ADDS     r1,r1,#0x1c
        0x0080fd9e:    4857        WH      LDR      r0,[pc,#348] ; [0x80fefc] = 0x21103300
        0x0080fda0:    f7f7de5d    ..].    BL       log_buffer ; 0x7a5e
;;;259            cause  = APP_RESULT_ATTR_NOT_FOUND;
        0x0080fda4:    f240450a    @..E    MOV      r5,#0x40a
;;;260            break;
        0x0080fda8:    e00f        ..      B        0x80fdca ; kns_attr_read_cb + 72
;;;261        case KNS_PARAM_VALUE_INDEX:
;;;262            {
;;;263                T_KNS_CALLBACK_DATA callback_data;
;;;264    
;;;265                callback_data.msg_type = SERVICE_CALLBACK_TYPE_READ_CHAR_VALUE;
        0x0080fdaa:    2002        .       MOVS     r0,#2
        0x0080fdac:    f88d0000    ....    STRB     r0,[sp,#0]
;;;266                //callback_data.conn_id = conn_id;
;;;267                callback_data.msg_data.read_index = KNS_READ_PARA;
        0x0080fdb0:    f88d0001    ....    STRB     r0,[sp,#1]
;;;268                if (pfn_kns_cb)
        0x0080fdb4:    4852        RH      LDR      r0,[pc,#328] ; [0x80ff00] = 0x20849c
        0x0080fdb6:    1f00        ..      SUBS     r0,r0,#4
        0x0080fdb8:    6802        .h      LDR      r2,[r0,#0]
        0x0080fdba:    b112        ..      CBZ      r2,0x80fdc2 ; kns_attr_read_cb + 64
;;;269                {
;;;270                    pfn_kns_cb(service_id, (void *)&callback_data);
        0x0080fdbc:    4669        iF      MOV      r1,sp
        0x0080fdbe:    4618        .F      MOV      r0,r3
        0x0080fdc0:    4790        .G      BLX      r2
;;;271                }
;;;272    
;;;273                *pp_value = (uint8_t *)gParaValue_data;
        0x0080fdc2:    484f        OH      LDR      r0,[pc,#316] ; [0x80ff00] = 0x20849c
;;;274                *p_length = sizeof(gParaValue_data);
        0x0080fdc4:    6038        8`      STR      r0,[r7,#0]
        0x0080fdc6:    2014        .       MOVS     r0,#0x14
        0x0080fdc8:    8020         .      STRH     r0,[r4,#0]
;;;275            }
;;;276            break;
;;;277        }
;;;278    
;;;279        PROFILE_PRINT_INFO2("<-- gatt get PxpExtended attribute value: AttribIndex--%d, length--%d",
        0x0080fdca:    8820         .      LDRH     r0,[r4,#0]
        0x0080fdcc:    9000        ..      STR      r0,[sp,#0]
        0x0080fdce:    494a        JI      LDR      r1,[pc,#296] ; [0x80fef8] = 0x8800910
        0x0080fdd0:    484a        JH      LDR      r0,[pc,#296] ; [0x80fefc] = 0x21103300
        0x0080fdd2:    4633        3F      MOV      r3,r6
        0x0080fdd4:    2202        ."      MOVS     r2,#2
        0x0080fdd6:    314c        L1      ADDS     r1,r1,#0x4c
        0x0080fdd8:    1c80        ..      ADDS     r0,r0,#2
        0x0080fdda:    f7f7de40    ..@.    BL       log_buffer ; 0x7a5e
;;;280                            attrib_index,
;;;281                            *p_length);
;;;282        return (cause);
        0x0080fdde:    4628        (F      MOV      r0,r5
;;;283    }
        0x0080fde0:    b007        ..      ADD      sp,sp,#0x1c
        0x0080fde2:    bdf0        ..      POP      {r4-r7,pc}
    kns_attr_write_cb
;;;284    
;;;285    /**
;;;286     * @brief write characteristic data from stack.
;;;287     *
;;;288     * @param ServiceId          ServiceId generated when register to upper stack.
;;;289     * @param iAttribIndex          Attribute index of getting characteristic data.
;;;290     * @param wLength                length of data to be written.
;;;291     * @param pValue            pointer of data to be written.
;;;292     * @return TProfileResult   profile procedure results.
;;;293    */
;;;294    
;;;295    static T_APP_RESULT kns_attr_write_cb(uint8_t conn_id, T_SERVER_ID service_id,
;;;296                                          uint16_t attr_index, T_WRITE_TYPE write_type, uint16_t length,
;;;297                                          uint8_t *p_value, P_FUN_WRITE_IND_POST_PROC *p_write_ind_post_proc)
;;;298    {
        0x0080fde4:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0080fde6:    b087        ..      SUB      sp,sp,#0x1c
        0x0080fde8:    4844        DH      LDR      r0,[pc,#272] ; [0x80fefc] = 0x21103300
;;; sample\tuya_ble_services\tuya_ble_service_rtl8762c.c (298)
        0x0080fdea:    e9dd460c    ...F    LDRD     r4,r6,[sp,#0x30]
        0x0080fdee:    460f        .F      MOV      r7,r1
        0x0080fdf0:    2500        .%      MOVS     r5,#0
        0x0080fdf2:    b126        &.      CBZ      r6,0x80fdfe ; kns_attr_write_cb + 26
        0x0080fdf4:    2a02        .*      CMP      r2,#2
        0x0080fdf6:    d00c        ..      BEQ      0x80fe12 ; kns_attr_write_cb + 46
        0x0080fdf8:    f240450a    @..E    MOV      r5,#0x40a
        0x0080fdfc:    e027        '.      B        0x80fe4e ; kns_attr_write_cb + 106
;;;299        T_APP_RESULT  cause = APP_RESULT_SUCCESS;
;;;300        T_KNS_CALLBACK_DATA callback_data;
;;;301        if (!p_value)
;;;302        {
;;;303            PROFILE_PRINT_ERROR2("kns_attr_write_cb: p_value %p, length 0x%x", p_value, length);
        0x0080fdfe:    493e        >I      LDR      r1,[pc,#248] ; [0x80fef8] = 0x8800910
        0x0080fe00:    4633        3F      MOV      r3,r6
        0x0080fe02:    2202        ."      MOVS     r2,#2
        0x0080fe04:    3198        .1      ADDS     r1,r1,#0x98
        0x0080fe06:    9400        ..      STR      r4,[sp,#0]
        0x0080fe08:    f7f7de29    ..).    BL       log_buffer ; 0x7a5e
;;;304            cause = APP_RESULT_INVALID_PDU;
        0x0080fe0c:    f2404004    @..@    MOV      r0,#0x404
        0x0080fe10:    e7e6        ..      B        0x80fde0 ; kns_attr_read_cb + 94
;;;305            return cause;
;;;306        }
;;;307    
;;;308        switch (attr_index)
;;;309        {
;;;310        default:
;;;311            cause = APP_RESULT_ATTR_NOT_FOUND;
;;;312            break;
;;;313        case KNS_PARAM_VALUE_INDEX:
;;;314            if (length > PARA_VALUE_LEN_MAX)
        0x0080fe12:    2c14        .,      CMP      r4,#0x14
        0x0080fe14:    d909        ..      BLS      0x80fe2a ; kns_attr_write_cb + 70
        0x0080fe16:    4938        8I      LDR      r1,[pc,#224] ; [0x80fef8] = 0x8800910
;;;315            {
;;;316                cause = APP_RESULT_INVALID_VALUE_SIZE;
        0x0080fe18:    f240450d    @..E    MOV      r5,#0x40d
;;;317                PROFILE_PRINT_ERROR2("kns_attr_write_cb: p_value %p, length 0x%x", p_value, length);
        0x0080fe1c:    4633        3F      MOV      r3,r6
        0x0080fe1e:    2202        ."      MOVS     r2,#2
        0x0080fe20:    31c8        .1      ADDS     r1,r1,#0xc8
        0x0080fe22:    9400        ..      STR      r4,[sp,#0]
        0x0080fe24:    f7f7de1b    ....    BL       log_buffer ; 0x7a5e
        0x0080fe28:    e011        ..      B        0x80fe4e ; kns_attr_write_cb + 106
;;;318            }
;;;319            else
;;;320            {
;;;321                PROFILE_PRINT_ERROR2("kns_attr_write_cb: p_value %p, length 0x%x", p_value, length);
        0x0080fe2a:    4933        3I      LDR      r1,[pc,#204] ; [0x80fef8] = 0x8800910
        0x0080fe2c:    4633        3F      MOV      r3,r6
        0x0080fe2e:    2202        ."      MOVS     r2,#2
        0x0080fe30:    31f8        .1      ADDS     r1,r1,#0xf8
        0x0080fe32:    9400        ..      STR      r4,[sp,#0]
        0x0080fe34:    f7f7de13    ....    BL       log_buffer ; 0x7a5e
;;;322                //callback_data.conn_id = conn_id;
;;;323                callback_data.msg_type = SERVICE_CALLBACK_TYPE_WRITE_CHAR_VALUE;
        0x0080fe38:    2003        .       MOVS     r0,#3
        0x0080fe3a:    f88d0004    ....    STRB     r0,[sp,#4]
;;;324                callback_data.msg_data.write_value.data_len = length;
        0x0080fe3e:    f88d4019    ...@    STRB     r4,[sp,#0x19]
;;;325                memcpy(callback_data.msg_data.write_value.data,p_value,length);
        0x0080fe42:    4622        "F      MOV      r2,r4
        0x0080fe44:    4631        1F      MOV      r1,r6
        0x0080fe46:    f10d0005    ....    ADD      r0,sp,#5
        0x0080fe4a:    f44af026    J.&.    BL       __aeabi_memcpy ; 0x59e9a
;;;326            }
;;;327            break;
;;;328    
;;;329        }
;;;330        if (pfn_kns_cb && (cause == APP_RESULT_SUCCESS))
        0x0080fe4e:    482c        ,H      LDR      r0,[pc,#176] ; [0x80ff00] = 0x20849c
        0x0080fe50:    1f00        ..      SUBS     r0,r0,#4
        0x0080fe52:    6802        .h      LDR      r2,[r0,#0]
        0x0080fe54:    b11a        ..      CBZ      r2,0x80fe5e ; kns_attr_write_cb + 122
        0x0080fe56:    b915        ..      CBNZ     r5,0x80fe5e ; kns_attr_write_cb + 122
;;;331        {
;;;332            pfn_kns_cb(service_id, (void *)&callback_data);
        0x0080fe58:    a901        ..      ADD      r1,sp,#4
        0x0080fe5a:    4638        8F      MOV      r0,r7
        0x0080fe5c:    4790        .G      BLX      r2
;;;333        }
;;;334        return cause;
        0x0080fe5e:    4628        (F      MOV      r0,r5
;;;335    
;;;336    }
        0x0080fe60:    e7be        ..      B        0x80fde0 ; kns_attr_read_cb + 94
    kns_cccd_update_cb
;;;337    /**
;;;338     * @brief update CCCD bits from stack.
;;;339     *
;;;340     * @param ServiceId          ServiceId generated when register to upper stack.
;;;341     * @param Index          Attribute index of getting characteristic data.
;;;342     * @param wCCCBits                CCCD bits to be updated.
;;;343     * @return none.
;;;344    */
;;;345    
;;;346    void kns_cccd_update_cb(uint8_t conn_id, T_SERVER_ID service_id, uint16_t index, uint16_t ccc_bits)
;;;347    {
        0x0080fe62:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0080fe66:    b088        ..      SUB      sp,sp,#0x20
        0x0080fe68:    461d        .F      MOV      r5,r3
        0x0080fe6a:    2601        .&      MOVS     r6,#1
        0x0080fe6c:    9300        ..      STR      r3,[sp,#0]
        0x0080fe6e:    4823        #H      LDR      r0,[pc,#140] ; [0x80fefc] = 0x21103300
        0x0080fe70:    4617        .F      MOV      r7,r2
        0x0080fe72:    4688        .F      MOV      r8,r1
        0x0080fe74:    4613        .F      MOV      r3,r2
;;;348        T_KNS_CALLBACK_DATA callback_data;
;;;349        callback_data.msg_type = SERVICE_CALLBACK_TYPE_INDIFICATION_NOTIFICATION;
        0x0080fe76:    f88d6004    ...`    STRB     r6,[sp,#4]
;;;350        //callback_data.conn_id = conn_id;
;;;351        bool handle = true;
        0x0080fe7a:    4634        4F      MOV      r4,r6
;;;352        PROFILE_PRINT_INFO2("kns_cccd_update_cb index = %d ccc_bits %x", index, ccc_bits);
        0x0080fe7c:    2202        ."      MOVS     r2,#2
        0x0080fe7e:    4921        !I      LDR      r1,[pc,#132] ; [0x80ff04] = 0x8800a38
        0x0080fe80:    1c80        ..      ADDS     r0,r0,#2
        0x0080fe82:    f7f7ddec    ....    BL       log_buffer ; 0x7a5e
;;;353    
;;;354        switch (index)
        0x0080fe86:    2f05        ./      CMP      r7,#5
        0x0080fe88:    d00d        ..      BEQ      0x80fea6 ; kns_cccd_update_cb + 68
;;;355        {
;;;356        case KNS_KEY_VALUE_CCCD_INDEX:
;;;357            {
;;;358                if (ccc_bits & GATT_CLIENT_CHAR_CONFIG_NOTIFY)
;;;359                {
;;;360                    callback_data.msg_data.notification_indification_index = KNS_NOTIFY_ENABLE;
;;;361                }
;;;362                else
;;;363                {
;;;364                    callback_data.msg_data.notification_indification_index = KNS_NOTIFY_DISABLE;
;;;365                }
;;;366                break;
;;;367            }
;;;368        default:
;;;369            {
;;;370                handle = false;
        0x0080fe8a:    2400        .$      MOVS     r4,#0
;;;371                break;
;;;372            }
;;;373    
;;;374        }
;;;375    
;;;376        if (pfn_kns_cb && (handle == true))
        0x0080fe8c:    481c        .H      LDR      r0,[pc,#112] ; [0x80ff00] = 0x20849c
        0x0080fe8e:    1f00        ..      SUBS     r0,r0,#4
        0x0080fe90:    6802        .h      LDR      r2,[r0,#0]
        0x0080fe92:    2a00        .*      CMP      r2,#0
        0x0080fe94:    d004        ..      BEQ      0x80fea0 ; kns_cccd_update_cb + 62
        0x0080fe96:    2c00        .,      CMP      r4,#0
        0x0080fe98:    d002        ..      BEQ      0x80fea0 ; kns_cccd_update_cb + 62
;;;377        {
;;;378            pfn_kns_cb(service_id, (void *)&callback_data);
        0x0080fe9a:    a901        ..      ADD      r1,sp,#4
        0x0080fe9c:    4640        @F      MOV      r0,r8
        0x0080fe9e:    4790        .G      BLX      r2
;;;379        }
;;;380    
;;;381        return;
;;;382    }
        0x0080fea0:    b008        ..      ADD      sp,sp,#0x20
        0x0080fea2:    e8bd81f0    ....    POP      {r4-r8,pc}
        0x0080fea6:    07e8        ..      LSLS     r0,r5,#31
        0x0080fea8:    d002        ..      BEQ      0x80feb0 ; kns_cccd_update_cb + 78
        0x0080feaa:    f88d6005    ...`    STRB     r6,[sp,#5]
        0x0080feae:    e7ed        ..      B        0x80fe8c ; kns_cccd_update_cb + 42
        0x0080feb0:    2000        .       MOVS     r0,#0
        0x0080feb2:    f88d0005    ....    STRB     r0,[sp,#5]
        0x0080feb6:    e7e9        ..      B        0x80fe8c ; kns_cccd_update_cb + 42
    kns_add_service
;;;383    
;;;384    /**
;;;385     * @brief KNS Service Callbacks.
;;;386    */
;;;387    const T_FUN_GATT_SERVICE_CBS kns_cbs =
;;;388    {
;;;389        NULL,//kns_attr_read_cb,  // Read callback function pointer
;;;390        kns_attr_write_cb, // Write callback function pointer
;;;391        kns_cccd_update_cb  // CCCD update callback function pointer
;;;392    };
;;;393    
;;;394    /**
;;;395     * @brief Add PXP extended service to stack/profile.
;;;396     *
;;;397     * @param pFunc          pointer of function to send data to application from PXP extended service.
;;;398     * @return ServiceId.   the service ID auto generated by stack when register this service to stack
;;;399    */
;;;400    uint8_t kns_add_service(void *pFunc)
;;;401    {
        0x0080feb8:    b53e        >.      PUSH     {r1-r5,lr}
        0x0080feba:    4604        .F      MOV      r4,r0
;;;402        T_SERVER_ID service_id;
;;;403        if (false == server_add_service(&service_id,
        0x0080febc:    4812        .H      LDR      r0,[pc,#72] ; [0x80ff08] = 0x81c23c
        0x0080febe:    e9d0120b    ....    LDRD     r1,r2,[r0,#0x2c]
        0x0080fec2:    e9cd1200    ....    STRD     r1,r2,[sp,#0]
        0x0080fec6:    f1a00180    ....    SUB      r1,r0,#0x80
        0x0080feca:    6a83        .j      LDR      r3,[r0,#0x28]
        0x0080fecc:    22a8        ."      MOVS     r2,#0xa8
        0x0080fece:    a802        ..      ADD      r0,sp,#8
        0x0080fed0:    f43ff3cd    ?...    BL       server_add_service ; 0x4f66e
        0x0080fed4:    b950        P.      CBNZ     r0,0x80feec ; kns_add_service + 52
;;;404                                        (uint8_t *)kns_attr_tbl,
;;;405                                        kns_attr_tbl_size,
;;;406                                        kns_cbs))
;;;407        {
;;;408            PROFILE_PRINT_ERROR1("kns_add_service: service_id %d", service_id);
        0x0080fed6:    490b        .I      LDR      r1,[pc,#44] ; [0x80ff04] = 0x8800a38
        0x0080fed8:    f89d3008    ...0    LDRB     r3,[sp,#8]
        0x0080fedc:    2201        ."      MOVS     r2,#1
        0x0080fede:    3130        01      ADDS     r1,r1,#0x30
        0x0080fee0:    4806        .H      LDR      r0,[pc,#24] ; [0x80fefc] = 0x21103300
        0x0080fee2:    f7f7ddbc    ....    BL       log_buffer ; 0x7a5e
;;;409            service_id = 0xff;
        0x0080fee6:    20ff        .       MOVS     r0,#0xff
        0x0080fee8:    f88d0008    ....    STRB     r0,[sp,#8]
;;;410        }
;;;411    
;;;412        pfn_kns_cb = (P_FUN_SERVER_GENERAL_CB)pFunc;
        0x0080feec:    4804        .H      LDR      r0,[pc,#16] ; [0x80ff00] = 0x20849c
        0x0080feee:    1f00        ..      SUBS     r0,r0,#4
;;;413        return service_id;
        0x0080fef0:    6004        .`      STR      r4,[r0,#0]
        0x0080fef2:    f89d0008    ....    LDRB     r0,[sp,#8]
;;;414    }
        0x0080fef6:    bd3e        >.      POP      {r1-r5,pc}
    $d
        0x0080fef8:    08800910    ....    DCD    142608656
        0x0080fefc:    21103300    .3.!    DCD    554709760
        0x0080ff00:    0020849c    .. .    DCD    2131100
        0x0080ff04:    08800a38    8...    DCD    142608952
        0x0080ff08:    0081c23c    <...    DCD    8503868
    $t
    .text
    custom_data_process
;;; sample\tuya_ble_app\tuya_ble_app_demo.c
;;;56     {
        0x0080ff0c:    b570        p.      PUSH     {r4-r6,lr}
        0x0080ff0e:    4604        .F      MOV      r4,r0
        0x0080ff10:    460e        .F      MOV      r6,r1
;;;57         custom_data_type_t *event_1_data;
;;;58         TUYA_APP_LOG_DEBUG("custom event id = %d",evt_id);
        0x0080ff12:    a0cd        ..      ADR      r0,{pc}+0x336 ; 0x810248
        0x0080ff14:    f00afe49    ..I.    BL       get_args ; 0x81abaa
        0x0080ff18:    4dd5        .M      LDR      r5,[pc,#852] ; [0x810270] = 0x21103002
        0x0080ff1a:    4602        .F      MOV      r2,r0
        0x0080ff1c:    4623        #F      MOV      r3,r4
        0x0080ff1e:    49d3        .I      LDR      r1,[pc,#844] ; [0x81026c] = 0x8800a8c
        0x0080ff20:    4628        (F      MOV      r0,r5
        0x0080ff22:    f7f7dd9c    ....    BL       log_buffer ; 0x7a5e
;;;59         switch (evt_id)
        0x0080ff26:    2c02        .,      CMP      r4,#2
        0x0080ff28:    d21e        ..      BCS      0x80ff68 ; custom_data_process + 92
        0x0080ff2a:    e8dff004    ....    TBB      [pc,r4]
    $d
        0x0080ff2e:    011d        ..      DCW    285
    $t
;;;60         {
;;;61         case APP_CUSTOM_EVENT_1:
;;;62             event_1_data = (custom_data_type_t *)data;
        0x0080ff30:    4634        4F      MOV      r4,r6
;;;63             TUYA_APP_LOG_HEXDUMP_DEBUG("received APP_CUSTOM_EVENT_1 data:",event_1_data->data,50);
        0x0080ff32:    a0d0        ..      ADR      r0,{pc}+0x342 ; 0x810274
        0x0080ff34:    f00afe39    ..9.    BL       get_args ; 0x81abaa
        0x0080ff38:    49cc        .I      LDR      r1,[pc,#816] ; [0x81026c] = 0x8800a8c
        0x0080ff3a:    4602        .F      MOV      r2,r0
        0x0080ff3c:    2332        2#      MOVS     r3,#0x32
        0x0080ff3e:    3124        $1      ADDS     r1,r1,#0x24
        0x0080ff40:    4628        (F      MOV      r0,r5
        0x0080ff42:    f7f7dd8c    ....    BL       log_buffer ; 0x7a5e
        0x0080ff46:    2332        2#      MOVS     r3,#0x32
        0x0080ff48:    4622        "F      MOV      r2,r4
        0x0080ff4a:    2108        .!      MOVS     r1,#8
        0x0080ff4c:    a0d8        ..      ADR      r0,{pc}+0x364 ; 0x8102b0
        0x0080ff4e:    f00afe40    ..@.    BL       log_hexdump ; 0x81abd2
        0x0080ff52:    a0d7        ..      ADR      r0,{pc}+0x35e ; 0x8102b0
        0x0080ff54:    f00afe29    ..).    BL       get_args ; 0x81abaa
        0x0080ff58:    4602        .F      MOV      r2,r0
        0x0080ff5a:    4628        (F      MOV      r0,r5
        0x0080ff5c:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0080ff60:    49c2        .I      LDR      r1,[pc,#776] ; [0x81026c] = 0x8800a8c
        0x0080ff62:    3160        `1      ADDS     r1,r1,#0x60
        0x0080ff64:    f7f79d7b    ..{.    B        log_buffer ; 0x7a5e
;;;64             break;
;;;65         case APP_CUSTOM_EVENT_2:
;;;66             break;
;;;67         case APP_CUSTOM_EVENT_3:
;;;68             break;
;;;69         case APP_CUSTOM_EVENT_4:
;;;70             break;
;;;71         case APP_CUSTOM_EVENT_5:
;;;72             break;
;;;73         default:
;;;74             break;
;;;75     
;;;76         }
;;;77     }
        0x0080ff68:    bd70        p.      POP      {r4-r6,pc}
    custom_evt_1_send_test
        0x0080ff6a:    49d2        .I      LDR      r1,[pc,#840] ; [0x8102b4] = 0x208636
;;;78     
;;;79     custom_data_type_t custom_data;
;;;80     
;;;81     void custom_evt_1_send_test(uint8_t data)
;;;82     {
;;;83         tuya_ble_custom_evt_t event;
;;;84     
;;;85         for(uint8_t i=0; i<50; i++)
        0x0080ff6c:    2200        ."      MOVS     r2,#0
        0x0080ff6e:    5488        .T      STRB     r0,[r1,r2]
        0x0080ff70:    1c52        R.      ADDS     r2,r2,#1
        0x0080ff72:    b2d2        ..      UXTB     r2,r2
        0x0080ff74:    2a32        2*      CMP      r2,#0x32
        0x0080ff76:    d3fa        ..      BCC      0x80ff6e ; custom_evt_1_send_test + 4
;;;86         {
;;;87             custom_data.data[i] = data;
;;;88         }
;;;89         event.evt_id = APP_CUSTOM_EVENT_1;
        0x0080ff78:    2001        .       MOVS     r0,#1
;;;90         event.custom_event_handler = (void *)custom_data_process;
        0x0080ff7a:    f2af026f    ..o.    ADR      r2,{pc}-0x6d ; 0x80ff0d
;;;91         event.data = &custom_data;
;;;92         tuya_ble_custom_event_send(event);
        0x0080ff7e:    f005b867    ..g.    B.W      tuya_ble_custom_event_send ; 0x815050
    app_custom_task
        0x0080ff82:    4ccd        .L      LDR      r4,[pc,#820] ; [0x8102b8] = 0x2084b0
        0x0080ff84:    4eba        .N      LDR      r6,[pc,#744] ; [0x810270] = 0x21103002
;;;93     }
;;;94     
;;;95     
;;;96     static uint16_t sn = 0;
;;;97     static uint32_t time_stamp = 1587795793;
;;;98     
;;;99     void app_custom_task(void *p_param)
;;;100    {
        0x0080ff86:    b08c        ..      SUB      sp,sp,#0x30
;;;101        tuya_ble_cb_evt_param_t event;
;;;102    
;;;103        while (true)
;;;104        {
;;;105            if (os_msg_recv(tuya_custom_queue_handle, &event, 0xFFFFFFFF) == true)
        0x0080ff88:    2769        i'      MOVS     r7,#0x69
        0x0080ff8a:    f04f38ff    O..8    MOV      r8,#0xffffffff
        0x0080ff8e:    9700        ..      STR      r7,[sp,#0]
        0x0080ff90:    4bca        .K      LDR      r3,[pc,#808] ; [0x8102bc] = 0x81c2a8
        0x0080ff92:    4642        BF      MOV      r2,r8
        0x0080ff94:    a902        ..      ADD      r1,sp,#8
        0x0080ff96:    68a0        .h      LDR      r0,[r4,#8]
        0x0080ff98:    f416f054    ..T.    BL       os_msg_recv_intern ; 0x26044
        0x0080ff9c:    2800        .(      CMP      r0,#0
        0x0080ff9e:    d0f6        ..      BEQ      0x80ff8e ; app_custom_task + 12
        0x0080ffa0:    f89d0008    ....    LDRB     r0,[sp,#8]
;;;106            {
;;;107                int16_t result = 0;
        0x0080ffa4:    2500        .%      MOVS     r5,#0
;;;108                switch (event.evt)
        0x0080ffa6:    3840        @8      SUBS     r0,r0,#0x40
        0x0080ffa8:    2810        .(      CMP      r0,#0x10
        0x0080ffaa:    d272        r.      BCS      0x810092 ; app_custom_task + 272
        0x0080ffac:    e8dff000    ....    TBB      [pc,r0]
    $d
        0x0080ffb0:    9a891108    ....    DCD    2592674056
        0x0080ffb4:    ddb0dda2    ....    DCD    3719355810
        0x0080ffb8:    50483cbe    .<HP    DCD    1346911422
        0x0080ffbc:    8278725f    _rx.    DCD    2188931679
    $t
;;;109                {
;;;110                case TUYA_BLE_CB_EVT_CONNECTE_STATUS:
;;;111                    TUYA_APP_LOG_INFO("received tuya ble conncet status update event,current connect status = %d",event.connect_status);
        0x0080ffc0:    48bf        .H      LDR      r0,[pc,#764] ; [0x8102c0] = 0x81c760
        0x0080ffc2:    f00afdf2    ....    BL       get_args ; 0x81abaa
        0x0080ffc6:    49a9        .I      LDR      r1,[pc,#676] ; [0x81026c] = 0x8800a8c
        0x0080ffc8:    4602        .F      MOV      r2,r0
        0x0080ffca:    f89d300c    ...0    LDRB     r3,[sp,#0xc]
        0x0080ffce:    3164        d1      ADDS     r1,r1,#0x64
;;;112                    break;
        0x0080ffd0:    e032        2.      B        0x810038 ; app_custom_task + 182
        0x0080ffd2:    48b9        .H      LDR      r0,[pc,#740] ; [0x8102b8] = 0x2084b0
;;;113                case TUYA_BLE_CB_EVT_DP_WRITE:
;;;114                    dp_data_len = event.dp_write_data.data_len;
        0x0080ffd4:    f8bd5010    ...P    LDRH     r5,[sp,#0x10]
        0x0080ffd8:    8025        %.      STRH     r5,[r4,#0]
;;;115                    memset(dp_data_array,0,sizeof(dp_data_array));
        0x0080ffda:    f44f7181    O..q    MOV      r1,#0x102
        0x0080ffde:    3084        .0      ADDS     r0,r0,#0x84
        0x0080ffe0:    f44af03e    J.>.    BL       __aeabi_memclr4 ; 0x5a060
;;;116                    memcpy(dp_data_array,event.dp_write_data.p_data,dp_data_len);
        0x0080ffe4:    48b4        .H      LDR      r0,[pc,#720] ; [0x8102b8] = 0x2084b0
        0x0080ffe6:    462a        *F      MOV      r2,r5
        0x0080ffe8:    3084        .0      ADDS     r0,r0,#0x84
        0x0080ffea:    9903        ..      LDR      r1,[sp,#0xc]
        0x0080ffec:    f449f755    I.U.    BL       __aeabi_memcpy ; 0x59e9a
;;;117                    TUYA_APP_LOG_HEXDUMP_DEBUG("received dp write data :",dp_data_array,dp_data_len);
        0x0080fff0:    a0b4        ..      ADR      r0,{pc}+0x2d4 ; 0x8102c4
        0x0080fff2:    f00afdda    ....    BL       get_args ; 0x81abaa
        0x0080fff6:    499d        .I      LDR      r1,[pc,#628] ; [0x81026c] = 0x8800a8c
        0x0080fff8:    4602        .F      MOV      r2,r0
        0x0080fffa:    8823        #.      LDRH     r3,[r4,#0]
        0x0080fffc:    31bc        .1      ADDS     r1,r1,#0xbc
        0x0080fffe:    4630        0F      MOV      r0,r6
        0x00810000:    f7f7dd2d    ..-.    BL       log_buffer ; 0x7a5e
        0x00810004:    4aac        .J      LDR      r2,[pc,#688] ; [0x8102b8] = 0x2084b0
        0x00810006:    8823        #.      LDRH     r3,[r4,#0]
        0x00810008:    3284        .2      ADDS     r2,r2,#0x84
        0x0081000a:    2108        .!      MOVS     r1,#8
        0x0081000c:    a0a8        ..      ADR      r0,{pc}+0x2a4 ; 0x8102b0
        0x0081000e:    f00afde0    ....    BL       log_hexdump ; 0x81abd2
        0x00810012:    a0a7        ..      ADR      r0,{pc}+0x29e ; 0x8102b0
        0x00810014:    f00afdc9    ....    BL       get_args ; 0x81abaa
        0x00810018:    4994        .I      LDR      r1,[pc,#592] ; [0x81026c] = 0x8800a8c
        0x0081001a:    4602        .F      MOV      r2,r0
        0x0081001c:    31f0        .1      ADDS     r1,r1,#0xf0
        0x0081001e:    4630        0F      MOV      r0,r6
        0x00810020:    f7f7dd1d    ....    BL       log_buffer ; 0x7a5e
;;;118                    tuya_ble_dp_data_report(dp_data_array,dp_data_len);//1
        0x00810024:    8821        !.      LDRH     r1,[r4,#0]
;;;119                    break;
        0x00810026:    e058        X.      B        0x8100da ; app_custom_task + 344
;;;120                case TUYA_BLE_CB_EVT_DP_DATA_REPORT_RESPONSE:
;;;121                    TUYA_APP_LOG_INFO("received dp data report response result code =%d",event.dp_response_data.status);
        0x00810028:    a0b3        ..      ADR      r0,{pc}+0x2d0 ; 0x8102f8
        0x0081002a:    f00afdbe    ....    BL       get_args ; 0x81abaa
        0x0081002e:    498f        .I      LDR      r1,[pc,#572] ; [0x81026c] = 0x8800a8c
        0x00810030:    f89d300c    ...0    LDRB     r3,[sp,#0xc]
        0x00810034:    4602        .F      MOV      r2,r0
        0x00810036:    31f4        .1      ADDS     r1,r1,#0xf4
        0x00810038:    4630        0F      MOV      r0,r6
        0x0081003a:    f7f7dd10    ....    BL       log_buffer ; 0x7a5e
        0x0081003e:    e094        ..      B        0x81016a ; app_custom_task + 488
;;;122                    break;
;;;123                case TUYA_BLE_CB_EVT_DP_DATA_WTTH_TIME_REPORT_RESPONSE:
;;;124                    TUYA_APP_LOG_INFO("received dp data report response result code =%d",event.dp_response_data.status);
        0x00810040:    a0ad        ..      ADR      r0,{pc}+0x2b8 ; 0x8102f8
        0x00810042:    f00afdb2    ....    BL       get_args ; 0x81abaa
        0x00810046:    4602        .F      MOV      r2,r0
        0x00810048:    f89d300c    ...0    LDRB     r3,[sp,#0xc]
        0x0081004c:    49ba        .I      LDR      r1,[pc,#744] ; [0x810338] = 0x8800bc0
;;;125                    break;
        0x0081004e:    e7f3        ..      B        0x810038 ; app_custom_task + 182
;;;126                case TUYA_BLE_CB_EVT_DP_DATA_WITH_FLAG_REPORT_RESPONSE:
;;;127                    TUYA_APP_LOG_INFO("received dp data with flag report response sn = %d , flag = %d , result code =%d",event.dp_with_flag_response_data.sn,event.dp_with_flag_response_data.mode
        0x00810050:    48ba        .H      LDR      r0,[pc,#744] ; [0x81033c] = 0x81c820
        0x00810052:    f00afdaa    ....    BL       get_args ; 0x81abaa
        0x00810056:    4602        .F      MOV      r2,r0
        0x00810058:    f89d100f    ....    LDRB     r1,[sp,#0xf]
        0x0081005c:    f89d000e    ....    LDRB     r0,[sp,#0xe]
        0x00810060:    e9cd0100    ....    STRD     r0,r1,[sp,#0]
        0x00810064:    49b4        .I      LDR      r1,[pc,#720] ; [0x810338] = 0x8800bc0
        0x00810066:    f8bd300c    ...0    LDRH     r3,[sp,#0xc]
        0x0081006a:    3140        @1      ADDS     r1,r1,#0x40
        0x0081006c:    e00d        ..      B        0x81008a ; app_custom_task + 264
        0x0081006e:    48b4        .H      LDR      r0,[pc,#720] ; [0x810340] = 0x81c7b8
        0x00810070:    f00afd9b    ....    BL       get_args ; 0x81abaa
        0x00810074:    4602        .F      MOV      r2,r0
        0x00810076:    f89d100f    ....    LDRB     r1,[sp,#0xf]
        0x0081007a:    f89d000e    ....    LDRB     r0,[sp,#0xe]
        0x0081007e:    e9cd0100    ....    STRD     r0,r1,[sp,#0]
        0x00810082:    49ad        .I      LDR      r1,[pc,#692] ; [0x810338] = 0x8800bc0
        0x00810084:    f8bd300c    ...0    LDRH     r3,[sp,#0xc]
        0x00810088:    31a0        .1      ADDS     r1,r1,#0xa0
        0x0081008a:    4630        0F      MOV      r0,r6
        0x0081008c:    f7f7dce7    ....    BL       log_buffer ; 0x7a5e
        0x00810090:    e06b        k.      B        0x81016a ; app_custom_task + 488
        0x00810092:    e06e        n.      B        0x810172 ; app_custom_task + 496
;;;128                                      ,event.dp_with_flag_response_data.status);
;;;129                    break;
;;;130                case TUYA_BLE_CB_EVT_DP_DATA_WITH_FLAG_AND_TIME_REPORT_RESPONSE:
;;;131                    TUYA_APP_LOG_INFO("received dp data with flag and time report response sn = %d , flag = %d , result code =%d",event.dp_with_flag_and_time_response_data.sn,
;;;132                                      event.dp_with_flag_and_time_response_data.mode,event.dp_with_flag_and_time_response_data.status);
;;;133    
;;;134                    break;
;;;135                case TUYA_BLE_CB_EVT_UNBOUND:
;;;136    
;;;137                    TUYA_APP_LOG_INFO("received unbound req");
        0x00810094:    a0ab        ..      ADR      r0,{pc}+0x2b0 ; 0x810344
        0x00810096:    f00afd88    ....    BL       get_args ; 0x81abaa
        0x0081009a:    4602        .F      MOV      r2,r0
        0x0081009c:    49b2        .I      LDR      r1,[pc,#712] ; [0x810368] = 0x8800cc8
        0x0081009e:    e005        ..      B        0x8100ac ; app_custom_task + 298
        0x008100a0:    a0b2        ..      ADR      r0,{pc}+0x2cc ; 0x81036c
        0x008100a2:    f00afd82    ....    BL       get_args ; 0x81abaa
        0x008100a6:    49b0        .I      LDR      r1,[pc,#704] ; [0x810368] = 0x8800cc8
        0x008100a8:    4602        .F      MOV      r2,r0
        0x008100aa:    3124        $1      ADDS     r1,r1,#0x24
        0x008100ac:    4630        0F      MOV      r0,r6
        0x008100ae:    f7f7dcd6    ....    BL       log_buffer ; 0x7a5e
        0x008100b2:    e05a        Z.      B        0x81016a ; app_custom_task + 488
;;;138    
;;;139                    break;
;;;140                case TUYA_BLE_CB_EVT_ANOMALY_UNBOUND:
;;;141    
;;;142                    TUYA_APP_LOG_INFO("received anomaly unbound req");
;;;143    
;;;144                    break;
;;;145                case TUYA_BLE_CB_EVT_DEVICE_RESET:
;;;146    
;;;147                    TUYA_APP_LOG_INFO("received device reset req");
        0x008100b4:    a0b8        ..      ADR      r0,{pc}+0x2e4 ; 0x810398
        0x008100b6:    f00afd78    ..x.    BL       get_args ; 0x81abaa
        0x008100ba:    49ab        .I      LDR      r1,[pc,#684] ; [0x810368] = 0x8800cc8
        0x008100bc:    4602        .F      MOV      r2,r0
        0x008100be:    3150        P1      ADDS     r1,r1,#0x50
;;;148    
;;;149                    break;
        0x008100c0:    e7f4        ..      B        0x8100ac ; app_custom_task + 298
;;;150                case TUYA_BLE_CB_EVT_DP_QUERY:
;;;151                    TUYA_APP_LOG_INFO("received TUYA_BLE_CB_EVT_DP_QUERY event");
        0x008100c2:    a0bf        ..      ADR      r0,{pc}+0x2fe ; 0x8103c0
        0x008100c4:    f00afd71    ..q.    BL       get_args ; 0x81abaa
        0x008100c8:    49a7        .I      LDR      r1,[pc,#668] ; [0x810368] = 0x8800cc8
        0x008100ca:    4602        .F      MOV      r2,r0
        0x008100cc:    3178        x1      ADDS     r1,r1,#0x78
        0x008100ce:    4630        0F      MOV      r0,r6
        0x008100d0:    f7f7dcc5    ....    BL       log_buffer ; 0x7a5e
;;;152                    if(dp_data_len>0)
        0x008100d4:    8821        !.      LDRH     r1,[r4,#0]
        0x008100d6:    2900        .)      CMP      r1,#0
        0x008100d8:    d047        G.      BEQ      0x81016a ; app_custom_task + 488
;;;153                    {
;;;154                        tuya_ble_dp_data_report(dp_data_array,dp_data_len);
        0x008100da:    4877        wH      LDR      r0,[pc,#476] ; [0x8102b8] = 0x2084b0
        0x008100dc:    3084        .0      ADDS     r0,r0,#0x84
        0x008100de:    f001fcf6    ....    BL       tuya_ble_dp_data_report ; 0x811ace
        0x008100e2:    e042        B.      B        0x81016a ; app_custom_task + 488
;;;155                    }
;;;156                    break;
;;;157                case TUYA_BLE_CB_EVT_OTA_DATA:
;;;158                    tuya_ota_proc(event.ota_data.type,event.ota_data.p_data,event.ota_data.data_len);
        0x008100e4:    f8bd200e    ...     LDRH     r2,[sp,#0xe]
        0x008100e8:    f89d000c    ....    LDRB     r0,[sp,#0xc]
        0x008100ec:    9904        ..      LDR      r1,[sp,#0x10]
        0x008100ee:    f001f955    ..U.    BL       tuya_ota_proc ; 0x81139c
;;;159                    break;
        0x008100f2:    e03a        :.      B        0x81016a ; app_custom_task + 488
;;;160                case TUYA_BLE_CB_EVT_NETWORK_INFO:
;;;161                    TUYA_APP_LOG_INFO("received net info : %s",event.network_data.p_data);
        0x008100f4:    a0c0        ..      ADR      r0,{pc}+0x304 ; 0x8103f8
        0x008100f6:    f00afd58    ..X.    BL       get_args ; 0x81abaa
        0x008100fa:    499b        .I      LDR      r1,[pc,#620] ; [0x810368] = 0x8800cc8
        0x008100fc:    4602        .F      MOV      r2,r0
        0x008100fe:    31b0        .1      ADDS     r1,r1,#0xb0
        0x00810100:    4630        0F      MOV      r0,r6
        0x00810102:    9b04        ..      LDR      r3,[sp,#0x10]
        0x00810104:    f7f7dcab    ....    BL       log_buffer ; 0x7a5e
;;;162                    tuya_ble_net_config_response(result);
        0x00810108:    4628        (F      MOV      r0,r5
        0x0081010a:    f001ff99    ....    BL       tuya_ble_net_config_response ; 0x812040
;;;163                    break;
        0x0081010e:    e02c        ,.      B        0x81016a ; app_custom_task + 488
;;;164                case TUYA_BLE_CB_EVT_WIFI_SSID:
;;;165    
;;;166                    break;
;;;167                case TUYA_BLE_CB_EVT_TIME_STAMP:
;;;168                    TUYA_APP_LOG_INFO("received unix timestamp : %s ,time_zone : %d",event.timestamp_data.timestamp_string,event.timestamp_data.time_zone);
        0x00810110:    a0c3        ..      ADR      r0,{pc}+0x310 ; 0x810420
        0x00810112:    f00afd4a    ..J.    BL       get_args ; 0x81abaa
        0x00810116:    4602        .F      MOV      r2,r0
        0x00810118:    f9bd001a    ....    LDRSH    r0,[sp,#0x1a]
        0x0081011c:    4992        .I      LDR      r1,[pc,#584] ; [0x810368] = 0x8800cc8
        0x0081011e:    9000        ..      STR      r0,[sp,#0]
        0x00810120:    ab03        ..      ADD      r3,sp,#0xc
        0x00810122:    31d8        .1      ADDS     r1,r1,#0xd8
        0x00810124:    4630        0F      MOV      r0,r6
        0x00810126:    f7f7dc9a    ....    BL       log_buffer ; 0x7a5e
;;;169                    break;
        0x0081012a:    e01e        ..      B        0x81016a ; app_custom_task + 488
;;;170                case TUYA_BLE_CB_EVT_TIME_NORMAL:
;;;171    
;;;172                    break;
;;;173                case TUYA_BLE_CB_EVT_DATA_PASSTHROUGH:
;;;174                    TUYA_APP_LOG_HEXDUMP_DEBUG("received ble passthrough data :",event.ble_passthrough_data.p_data,event.ble_passthrough_data.data_len);
        0x0081012c:    a0cb        ..      ADR      r0,{pc}+0x330 ; 0x81045c
        0x0081012e:    f00afd3c    ..<.    BL       get_args ; 0x81abaa
        0x00810132:    4602        .F      MOV      r2,r0
        0x00810134:    f8bd300c    ...0    LDRH     r3,[sp,#0xc]
        0x00810138:    49d7        .I      LDR      r1,[pc,#860] ; [0x810498] = 0x8800ddc
        0x0081013a:    4630        0F      MOV      r0,r6
        0x0081013c:    f7f7dc8f    ....    BL       log_buffer ; 0x7a5e
        0x00810140:    f8bd300c    ...0    LDRH     r3,[sp,#0xc]
        0x00810144:    2108        .!      MOVS     r1,#8
        0x00810146:    a05a        Z.      ADR      r0,{pc}+0x16a ; 0x8102b0
        0x00810148:    9a04        ..      LDR      r2,[sp,#0x10]
        0x0081014a:    f00afd42    ..B.    BL       log_hexdump ; 0x81abd2
        0x0081014e:    a058        X.      ADR      r0,{pc}+0x162 ; 0x8102b0
        0x00810150:    f00afd2b    ..+.    BL       get_args ; 0x81abaa
        0x00810154:    49d0        .I      LDR      r1,[pc,#832] ; [0x810498] = 0x8800ddc
        0x00810156:    4602        .F      MOV      r2,r0
        0x00810158:    313c        <1      ADDS     r1,r1,#0x3c
        0x0081015a:    4630        0F      MOV      r0,r6
        0x0081015c:    f7f7dc7f    ....    BL       log_buffer ; 0x7a5e
;;;175                    tuya_ble_data_passthrough(event.ble_passthrough_data.p_data,event.ble_passthrough_data.data_len);
        0x00810160:    f8bd100c    ....    LDRH     r1,[sp,#0xc]
        0x00810164:    9804        ..      LDR      r0,[sp,#0x10]
        0x00810166:    f001ff18    ....    BL       tuya_ble_data_passthrough ; 0x811f9a
        0x0081016a:    a802        ..      ADD      r0,sp,#8
        0x0081016c:    f001fb00    ....    BL       tuya_ble_event_response ; 0x811770
        0x00810170:    e70d        ..      B        0x80ff8e ; app_custom_task + 12
;;;176                    break;
;;;177                default:
;;;178                    TUYA_APP_LOG_WARNING("app_tuya_cb_queue msg: unknown event type 0x%04x",event.evt);
        0x00810172:    a0ca        ..      ADR      r0,{pc}+0x32a ; 0x81049c
        0x00810174:    f00afd19    ....    BL       get_args ; 0x81abaa
        0x00810178:    49c7        .I      LDR      r1,[pc,#796] ; [0x810498] = 0x8800ddc
        0x0081017a:    4602        .F      MOV      r2,r0
        0x0081017c:    f89d3008    ...0    LDRB     r3,[sp,#8]
        0x00810180:    3140        @1      ADDS     r1,r1,#0x40
;;;179                    break;
        0x00810182:    e759        Y.      B        0x810038 ; app_custom_task + 182
    tuya_ble_app_init
;;;180                }
;;;181    
;;;182                tuya_ble_event_response(&event);
;;;183            }
;;;184        }
;;;185    
;;;186    }
;;;187    
;;;188    void tuya_ble_app_init(void)
;;;189    {
        0x00810184:    b57c        |.      PUSH     {r2-r6,lr}
;;;190        os_task_create(&app_custom_task_handle, "app_custom", app_custom_task, 0, APP_CUSTOM_TASK_STACK_SIZE,APP_CUSTOM_TASK_PRIORITY);
        0x00810186:    2601        .&      MOVS     r6,#1
        0x00810188:    f44f60c0    O..`    MOV      r0,#0x600
        0x0081018c:    2300        .#      MOVS     r3,#0
        0x0081018e:    f2af220d    ..."    ADR      r2,{pc}-0x20b ; 0x80ff83
        0x00810192:    e9cd0600    ....    STRD     r0,r6,[sp,#0]
        0x00810196:    4848        HH      LDR      r0,[pc,#288] ; [0x8102b8] = 0x2084b0
        0x00810198:    a1d0        ..      ADR      r1,{pc}+0x344 ; 0x8104dc
        0x0081019a:    1d00        ..      ADDS     r0,r0,#4
        0x0081019c:    f416f418    ....    BL       os_task_create ; 0x269d0
;;;191        os_msg_queue_create(&tuya_custom_queue_handle, MAX_NUMBER_OF_TUYA_CUSTOM_MESSAGE, sizeof(tuya_ble_cb_evt_param_t));
        0x008101a0:    20bf        .       MOVS     r0,#0xbf
        0x008101a2:    9000        ..      STR      r0,[sp,#0]
        0x008101a4:    4b45        EK      LDR      r3,[pc,#276] ; [0x8102bc] = 0x81c2a8
        0x008101a6:    4844        DH      LDR      r0,[pc,#272] ; [0x8102b8] = 0x2084b0
        0x008101a8:    3310        .3      ADDS     r3,r3,#0x10
        0x008101aa:    2224        $"      MOVS     r2,#0x24
        0x008101ac:    2120         !      MOVS     r1,#0x20
        0x008101ae:    3008        .0      ADDS     r0,r0,#8
        0x008101b0:    f415f6a0    ....    BL       os_msg_queue_create_intern ; 0x25ef4
;;;192    
;;;193        device_param.device_id_len = 16;    //If use the license stored by the SDK,initialized to 0, Otherwise 16 or 20.
        0x008101b4:    4d40        @M      LDR      r5,[pc,#256] ; [0x8102b8] = 0x2084b0
        0x008101b6:    2010        .       MOVS     r0,#0x10
        0x008101b8:    350c        .5      ADDS     r5,r5,#0xc
        0x008101ba:    4940        @I      LDR      r1,[pc,#256] ; [0x8102bc] = 0x81c2a8
        0x008101bc:    7028        (p      STRB     r0,[r5,#0]
;;;194        
;;;195        if(device_param.device_id_len==16)
;;;196        {
;;;197            memcpy(device_param.auth_key,(void *)auth_key_test,AUTH_KEY_LEN);
        0x008101be:    2220         "      MOVS     r2,#0x20
        0x008101c0:    3932        29      SUBS     r1,r1,#0x32
        0x008101c2:    f105003d    ..=.    ADD      r0,r5,#0x3d
        0x008101c6:    f449f668    I.h.    BL       __aeabi_memcpy ; 0x59e9a
;;;198            memcpy(device_param.device_id,(void *)device_id_test,DEVICE_ID_LEN);
        0x008101ca:    493c        <I      LDR      r1,[pc,#240] ; [0x8102bc] = 0x81c2a8
        0x008101cc:    2210        ."      MOVS     r2,#0x10
        0x008101ce:    3911        .9      SUBS     r1,r1,#0x11
        0x008101d0:    1c68        h.      ADDS     r0,r5,#1
        0x008101d2:    f449f662    I.b.    BL       __aeabi_memcpy ; 0x59e9a
;;;199            memcpy(device_param.mac_addr.addr,mac_test,6);
        0x008101d6:    4839        9H      LDR      r0,[pc,#228] ; [0x8102bc] = 0x81c2a8
        0x008101d8:    4c37        7L      LDR      r4,[pc,#220] ; [0x8102b8] = 0x2084b0
        0x008101da:    3838        88      SUBS     r0,r0,#0x38
        0x008101dc:    6801        .h      LDR      r1,[r0,#0]
        0x008101de:    6721        !g      STR      r1,[r4,#0x70]
        0x008101e0:    8880        ..      LDRH     r0,[r0,#4]
        0x008101e2:    f8a40074    ..t.    STRH     r0,[r4,#0x74]
;;;200            device_param.mac_addr.addr_type = TUYA_BLE_ADDRESS_TYPE_RANDOM;
        0x008101e6:    f8856063    ..c`    STRB     r6,[r5,#0x63]
;;;201        }
;;;202        
;;;203        device_param.p_type = TUYA_BLE_PRODUCT_ID_TYPE_PID;
        0x008101ea:    2000        .       MOVS     r0,#0
        0x008101ec:    7568        hu      STRB     r0,[r5,#0x15]
;;;204        device_param.product_id_len = 8;
        0x008101ee:    2008        .       MOVS     r0,#8
        0x008101f0:    75a8        .u      STRB     r0,[r5,#0x16]
;;;205        memcpy(device_param.product_id,APP_PRODUCT_ID,8);
        0x008101f2:    a0bd        ..      ADR      r0,{pc}+0x2f6 ; 0x8104e8
        0x008101f4:    6801        .h      LDR      r1,[r0,#0]
        0x008101f6:    f8c41023    ..#.    STR      r1,[r4,#0x23]
        0x008101fa:    6840        @h      LDR      r0,[r0,#4]
        0x008101fc:    f8c40027    ..'.    STR      r0,[r4,#0x27]
;;;206        device_param.firmware_version = TY_APP_VER_NUM;
        0x00810200:    0230        0.      LSLS     r0,r6,#8
;;;207        device_param.hardware_version = TY_HARD_VER_NUM;
        0x00810202:    66e8        .f      STR      r0,[r5,#0x6c]
;;;208    
;;;209        tuya_ble_sdk_init(&device_param);
        0x00810204:    6728        (g      STR      r0,[r5,#0x70]
        0x00810206:    4628        (F      MOV      r0,r5
        0x00810208:    f002f84b    ..K.    BL       tuya_ble_sdk_init ; 0x8122a2
;;;210    
;;;211        tuya_ble_callback_queue_register(tuya_custom_queue_handle);
        0x0081020c:    68a0        .h      LDR      r0,[r4,#8]
        0x0081020e:    f001fa9b    ....    BL       tuya_ble_callback_queue_register ; 0x811748
;;;212        tuya_ble_device_delay_ms(200);
        0x00810212:    20c8        .       MOVS     r0,#0xc8
        0x00810214:    f00afb70    ..p.    BL       tuya_ble_device_delay_ms ; 0x81a8f8
;;;213        tuya_ota_init();
        0x00810218:    f000f992    ....    BL       tuya_ota_init ; 0x810540
;;;214        
;;;215        TUYA_APP_LOG_INFO("tuya ble demo version : "TUYA_BLE_DEMO_VERSION_STR);
        0x0081021c:    a0b5        ..      ADR      r0,{pc}+0x2d8 ; 0x8104f4
        0x0081021e:    f00afcc4    ....    BL       get_args ; 0x81abaa
        0x00810222:    499d        .I      LDR      r1,[pc,#628] ; [0x810498] = 0x8800ddc
        0x00810224:    4c12        .L      LDR      r4,[pc,#72] ; [0x810270] = 0x21103002
        0x00810226:    4602        .F      MOV      r2,r0
        0x00810228:    3180        .1      ADDS     r1,r1,#0x80
        0x0081022a:    4620         F      MOV      r0,r4
        0x0081022c:    f7f7dc17    ....    BL       log_buffer ; 0x7a5e
;;;216        TUYA_APP_LOG_INFO("app version : "TY_APP_VER_STR);
        0x00810230:    a0bb        ..      ADR      r0,{pc}+0x2f0 ; 0x810520
        0x00810232:    f00afcba    ....    BL       get_args ; 0x81abaa
        0x00810236:    4602        .F      MOV      r2,r0
        0x00810238:    b002        ..      ADD      sp,sp,#8
        0x0081023a:    4620         F      MOV      r0,r4
        0x0081023c:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x00810240:    4995        .I      LDR      r1,[pc,#596] ; [0x810498] = 0x8800ddc
        0x00810242:    31ac        .1      ADDS     r1,r1,#0xac
        0x00810244:    f7f79c0b    ....    B        log_buffer ; 0x7a5e
    $d
        0x00810248:    205d445b    [D]     DCD    542983259
        0x0081024c:    41595554    TUYA    DCD    1096373588
        0x00810250:    5050415f    _APP    DCD    1347436895
        0x00810254:    7563203a    : cu    DCD    1969430586
        0x00810258:    6d6f7473    stom    DCD    1836020851
        0x0081025c:    65766520     eve    DCD    1702257952
        0x00810260:    6920746e    nt i    DCD    1763734638
        0x00810264:    203d2064    d =     DCD    540876900
        0x00810268:    00006425    %d..    DCD    25637
        0x0081026c:    08800a8c    ....    DCD    142609036
        0x00810270:    21103002    .0.!    DCD    554708994
        0x00810274:    205d445b    [D]     DCD    542983259
        0x00810278:    41595554    TUYA    DCD    1096373588
        0x0081027c:    5050415f    _APP    DCD    1347436895
        0x00810280:    6572203a    : re    DCD    1701978170
        0x00810284:    76696563    ceiv    DCD    1986618723
        0x00810288:    41206465    ed A    DCD    1092641893
        0x0081028c:    435f5050    PP_C    DCD    1130319952
        0x00810290:    4f545355    USTO    DCD    1330926421
        0x00810294:    56455f4d    M_EV    DCD    1447386957
        0x00810298:    5f544e45    ENT_    DCD    1599360581
        0x0081029c:    61642031    1 da    DCD    1633951793
        0x008102a0:    203a6174    ta:     DCD    540696948
        0x008102a4:    6e656c5b    [len    DCD    1852140635
        0x008102a8:    5d64253d    =%d]    DCD    1566844221
        0x008102ac:    00003a20     :..    DCD    14880
        0x008102b0:    00000000    ....    DCD    0
        0x008102b4:    00208636    6. .    DCD    2131510
        0x008102b8:    002084b0    .. .    DCD    2131120
        0x008102bc:    0081c2a8    ....    DCD    8503976
        0x008102c0:    0081c760    `...    DCD    8505184
        0x008102c4:    205d445b    [D]     DCD    542983259
        0x008102c8:    41595554    TUYA    DCD    1096373588
        0x008102cc:    5050415f    _APP    DCD    1347436895
        0x008102d0:    6572203a    : re    DCD    1701978170
        0x008102d4:    76696563    ceiv    DCD    1986618723
        0x008102d8:    64206465    ed d    DCD    1679844453
        0x008102dc:    72772070    p wr    DCD    1920409712
        0x008102e0:    20657469    ite     DCD    543519849
        0x008102e4:    61746164    data    DCD    1635017060
        0x008102e8:    5b203a20     : [    DCD    1528838688
        0x008102ec:    3d6e656c    len=    DCD    1030645100
        0x008102f0:    205d6425    %d]     DCD    542991397
        0x008102f4:    0000003a    :...    DCD    58
        0x008102f8:    205d495b    [I]     DCD    542984539
        0x008102fc:    41595554    TUYA    DCD    1096373588
        0x00810300:    5050415f    _APP    DCD    1347436895
        0x00810304:    6572203a    : re    DCD    1701978170
        0x00810308:    76696563    ceiv    DCD    1986618723
        0x0081030c:    64206465    ed d    DCD    1679844453
        0x00810310:    61642070    p da    DCD    1633951856
        0x00810314:    72206174    ta r    DCD    1914724724
        0x00810318:    726f7065    epor    DCD    1919905893
        0x0081031c:    65722074    t re    DCD    1701978228
        0x00810320:    6e6f7073    spon    DCD    1852797043
        0x00810324:    72206573    se r    DCD    1914725747
        0x00810328:    6c757365    esul    DCD    1819636581
        0x0081032c:    6f632074    t co    DCD    1868767348
        0x00810330:    3d206564    de =    DCD    1025533284
        0x00810334:    00006425    %d..    DCD    25637
        0x00810338:    08800bc0    ....    DCD    142609344
        0x0081033c:    0081c820     ...    DCD    8505376
        0x00810340:    0081c7b8    ....    DCD    8505272
        0x00810344:    205d495b    [I]     DCD    542984539
        0x00810348:    41595554    TUYA    DCD    1096373588
        0x0081034c:    5050415f    _APP    DCD    1347436895
        0x00810350:    6572203a    : re    DCD    1701978170
        0x00810354:    76696563    ceiv    DCD    1986618723
        0x00810358:    75206465    ed u    DCD    1965057125
        0x0081035c:    756f626e    nbou    DCD    1970233966
        0x00810360:    7220646e    nd r    DCD    1914725486
        0x00810364:    00007165    eq..    DCD    29029
        0x00810368:    08800cc8    ....    DCD    142609608
        0x0081036c:    205d495b    [I]     DCD    542984539
        0x00810370:    41595554    TUYA    DCD    1096373588
        0x00810374:    5050415f    _APP    DCD    1347436895
        0x00810378:    6572203a    : re    DCD    1701978170
        0x0081037c:    76696563    ceiv    DCD    1986618723
        0x00810380:    61206465    ed a    DCD    1629512805
        0x00810384:    616d6f6e    noma    DCD    1634561902
        0x00810388:    7520796c    ly u    DCD    1965062508
        0x0081038c:    756f626e    nbou    DCD    1970233966
        0x00810390:    7220646e    nd r    DCD    1914725486
        0x00810394:    00007165    eq..    DCD    29029
        0x00810398:    205d495b    [I]     DCD    542984539
        0x0081039c:    41595554    TUYA    DCD    1096373588
        0x008103a0:    5050415f    _APP    DCD    1347436895
        0x008103a4:    6572203a    : re    DCD    1701978170
        0x008103a8:    76696563    ceiv    DCD    1986618723
        0x008103ac:    64206465    ed d    DCD    1679844453
        0x008103b0:    63697665    evic    DCD    1667855973
        0x008103b4:    65722065    e re    DCD    1701978213
        0x008103b8:    20746573    set     DCD    544499059
        0x008103bc:    00716572    req.    DCD    7431538
        0x008103c0:    205d495b    [I]     DCD    542984539
        0x008103c4:    41595554    TUYA    DCD    1096373588
        0x008103c8:    5050415f    _APP    DCD    1347436895
        0x008103cc:    6572203a    : re    DCD    1701978170
        0x008103d0:    76696563    ceiv    DCD    1986618723
        0x008103d4:    54206465    ed T    DCD    1411408997
        0x008103d8:    5f415955    UYA_    DCD    1598118229
        0x008103dc:    5f454c42    BLE_    DCD    1598377026
        0x008103e0:    455f4243    CB_E    DCD    1163870787
        0x008103e4:    445f5456    VT_D    DCD    1147098198
        0x008103e8:    55515f50    P_QU    DCD    1431396176
        0x008103ec:    20595245    ERY     DCD    542724677
        0x008103f0:    6e657665    even    DCD    1852143205
        0x008103f4:    00000074    t...    DCD    116
        0x008103f8:    205d495b    [I]     DCD    542984539
        0x008103fc:    41595554    TUYA    DCD    1096373588
        0x00810400:    5050415f    _APP    DCD    1347436895
        0x00810404:    6572203a    : re    DCD    1701978170
        0x00810408:    76696563    ceiv    DCD    1986618723
        0x0081040c:    6e206465    ed n    DCD    1847616613
        0x00810410:    69207465    et i    DCD    1763734629
        0x00810414:    206f666e    nfo     DCD    544171630
        0x00810418:    7325203a    : %s    DCD    1931812922
        0x0081041c:    00000000    ....    DCD    0
        0x00810420:    205d495b    [I]     DCD    542984539
        0x00810424:    41595554    TUYA    DCD    1096373588
        0x00810428:    5050415f    _APP    DCD    1347436895
        0x0081042c:    6572203a    : re    DCD    1701978170
        0x00810430:    76696563    ceiv    DCD    1986618723
        0x00810434:    75206465    ed u    DCD    1965057125
        0x00810438:    2078696e    nix     DCD    544762222
        0x0081043c:    656d6974    time    DCD    1701669236
        0x00810440:    6d617473    stam    DCD    1835103347
        0x00810444:    203a2070    p :     DCD    540680304
        0x00810448:    2c207325    %s ,    DCD    740324133
        0x0081044c:    656d6974    time    DCD    1701669236
        0x00810450:    6e6f7a5f    _zon    DCD    1852799583
        0x00810454:    203a2065    e :     DCD    540680293
        0x00810458:    00006425    %d..    DCD    25637
        0x0081045c:    205d445b    [D]     DCD    542983259
        0x00810460:    41595554    TUYA    DCD    1096373588
        0x00810464:    5050415f    _APP    DCD    1347436895
        0x00810468:    6572203a    : re    DCD    1701978170
        0x0081046c:    76696563    ceiv    DCD    1986618723
        0x00810470:    62206465    ed b    DCD    1646290021
        0x00810474:    7020656c    le p    DCD    1881171308
        0x00810478:    74737361    asst    DCD    1953723233
        0x0081047c:    756f7268    hrou    DCD    1970238056
        0x00810480:    64206867    gh d    DCD    1679845479
        0x00810484:    20617461    ata     DCD    543257697
        0x00810488:    6c5b203a    : [l    DCD    1817911354
        0x0081048c:    253d6e65    en=%    DCD    624782949
        0x00810490:    3a205d64    d] :    DCD    975199588
        0x00810494:    00000000    ....    DCD    0
        0x00810498:    08800ddc    ....    DCD    142609884
        0x0081049c:    205d575b    [W]     DCD    542988123
        0x008104a0:    41595554    TUYA    DCD    1096373588
        0x008104a4:    5050415f    _APP    DCD    1347436895
        0x008104a8:    7061203a    : ap    DCD    1885413434
        0x008104ac:    75745f70    p_tu    DCD    1970560880
        0x008104b0:    635f6179    ya_c    DCD    1667195257
        0x008104b4:    75715f62    b_qu    DCD    1970364258
        0x008104b8:    20657565    eue     DCD    543520101
        0x008104bc:    3a67736d    msg:    DCD    979858285
        0x008104c0:    6b6e7520     unk    DCD    1802401056
        0x008104c4:    6e776f6e    nown    DCD    1853321070
        0x008104c8:    65766520     eve    DCD    1702257952
        0x008104cc:    7420746e    nt t    DCD    1948284014
        0x008104d0:    20657079    ype     DCD    543518841
        0x008104d4:    30257830    0x%0    DCD    807761968
        0x008104d8:    00007834    4x..    DCD    30772
        0x008104dc:    5f707061    app_    DCD    1601204321
        0x008104e0:    74737563    cust    DCD    1953723747
        0x008104e4:    00006d6f    om..    DCD    28015
        0x008104e8:    78787878    xxxx    DCD    2021161080
        0x008104ec:    78787878    xxxx    DCD    2021161080
        0x008104f0:    00000000    ....    DCD    0
        0x008104f4:    205d495b    [I]     DCD    542984539
        0x008104f8:    41595554    TUYA    DCD    1096373588
        0x008104fc:    5050415f    _APP    DCD    1347436895
        0x00810500:    7574203a    : tu    DCD    1970544698
        0x00810504:    62206179    ya b    DCD    1646289273
        0x00810508:    6420656c    le d    DCD    1679844716
        0x0081050c:    206f6d65    emo     DCD    544173413
        0x00810510:    73726576    vers    DCD    1936876918
        0x00810514:    206e6f69    ion     DCD    544108393
        0x00810518:    2e31203a    : 1.    DCD    774971450
        0x0081051c:    00302e30    0.0.    DCD    3157552
        0x00810520:    205d495b    [I]     DCD    542984539
        0x00810524:    41595554    TUYA    DCD    1096373588
        0x00810528:    5050415f    _APP    DCD    1347436895
        0x0081052c:    7061203a    : ap    DCD    1885413434
        0x00810530:    65762070    p ve    DCD    1702240368
        0x00810534:    6f697372    rsio    DCD    1869181810
        0x00810538:    203a206e    n :     DCD    540680302
        0x0081053c:    00302e31    1.0.    DCD    3157553
    $t
    .text
    tuya_ota_init
;;; sample\tuya_ble_app\tuya_ble_app_ota.c
;;;136    {
        0x00810540:    b570        p.      PUSH     {r4-r6,lr}
;;;137        tuya_ota_status = TUYA_OTA_STATUS_NONE;
        0x00810542:    4df3        .M      LDR      r5,[pc,#972] ; [0x810910] = 0x208668
        0x00810544:    2400        .$      MOVS     r4,#0
        0x00810546:    70ac        .p      STRB     r4,[r5,#2]
;;;138        //uint32_t crc_check;
;;;139        current_package = 0;
        0x00810548:    80ec        ..      STRH     r4,[r5,#6]
        0x0081054a:    f44f6600    O..f    MOV      r6,#0x800
;;;140        last_package = 0;
        0x0081054e:    812c        ,.      STRH     r4,[r5,#8]
;;;141        memset(TempBufferHead,0,sizeof(TempBufferHead));
        0x00810550:    4631        1F      MOV      r1,r6
        0x00810552:    f50570b0    ...p    ADD      r0,r5,#0x160
        0x00810556:    f449f583    I...    BL       __aeabi_memclr4 ; 0x5a060
;;;142        ota_tmp_buf_used_size = 0;
        0x0081055a:    80ac        ..      STRH     r4,[r5,#4]
        0x0081055c:    2250        P"      MOVS     r2,#0x50
        0x0081055e:    4631        1F      MOV      r1,r6
        0x00810560:    f5057088    ...p    ADD      r0,r5,#0x110
        0x00810564:    f7fbd9cf    ....    BL       ftl_load ; 0xb906
        0x00810568:    4dea        .M      LDR      r5,[pc,#936] ; [0x810914] = 0x21103002
;;;143        //memset(&dfuPara,0,sizeof(dfuPara));
;;;144    
;;;145        if(dfu_settings_read())
        0x0081056a:    b138        8.      CBZ      r0,0x81057c ; tuya_ota_init + 60
;;;146        {
;;;147            TUYA_BLE_LOG_ERROR("dfu_settings_read failed !");
        0x0081056c:    a0ea        ..      ADR      r0,{pc}+0x3ac ; 0x810918
        0x0081056e:    f00afb1c    ....    BL       get_args ; 0x81abaa
        0x00810572:    4602        .F      MOV      r2,r0
        0x00810574:    49f3        .I      LDR      r1,[pc,#972] ; [0x810944] = 0x8800ea8
        0x00810576:    4628        (F      MOV      r0,r5
        0x00810578:    f7f7da71    ..q.    BL       log_buffer ; 0x7a5e
;;;148        }
;;;149    
;;;150        TUYA_BLE_LOG_DEBUG("dfu_settings.crc = 0x%08x ",dfu_settings.crc);
        0x0081057c:    a0f2        ..      ADR      r0,{pc}+0x3cc ; 0x810948
        0x0081057e:    f00afb14    ....    BL       get_args ; 0x81abaa
        0x00810582:    4cfc        .L      LDR      r4,[pc,#1008] ; [0x810974] = 0x208778
        0x00810584:    49ef        .I      LDR      r1,[pc,#956] ; [0x810944] = 0x8800ea8
        0x00810586:    4602        .F      MOV      r2,r0
        0x00810588:    312c        ,1      ADDS     r1,r1,#0x2c
        0x0081058a:    4628        (F      MOV      r0,r5
        0x0081058c:    6823        #h      LDR      r3,[r4,#0]
        0x0081058e:    f7f7da66    ..f.    BL       log_buffer ; 0x7a5e
;;;151        TUYA_BLE_LOG_DEBUG("dfu_settings.progress.firmware_image_offset_last = %d ",dfu_settings.progress.firmware_image_offset_last);
        0x00810592:    48f9        .H      LDR      r0,[pc,#996] ; [0x810978] = 0x81c904
        0x00810594:    f00afb09    ....    BL       get_args ; 0x81abaa
        0x00810598:    49ea        .I      LDR      r1,[pc,#936] ; [0x810944] = 0x8800ea8
        0x0081059a:    4602        .F      MOV      r2,r0
        0x0081059c:    3158        X1      ADDS     r1,r1,#0x58
        0x0081059e:    4628        (F      MOV      r0,r5
        0x008105a0:    6aa3        .j      LDR      r3,[r4,#0x28]
        0x008105a2:    f7f7da5c    ..\.    BL       log_buffer ; 0x7a5e
;;;152        TUYA_BLE_LOG_DEBUG("dfu_settings.progress.firmware_image_crc_last = 0x%08x ",dfu_settings.progress.firmware_image_crc_last);
        0x008105a6:    48f5        .H      LDR      r0,[pc,#980] ; [0x81097c] = 0x81c94c
        0x008105a8:    f00afaff    ....    BL       get_args ; 0x81abaa
        0x008105ac:    49e5        .I      LDR      r1,[pc,#916] ; [0x810944] = 0x8800ea8
        0x008105ae:    4602        .F      MOV      r2,r0
        0x008105b0:    31a0        .1      ADDS     r1,r1,#0xa0
        0x008105b2:    4628        (F      MOV      r0,r5
        0x008105b4:    6ae3        .j      LDR      r3,[r4,#0x2c]
        0x008105b6:    f7f7da52    ..R.    BL       log_buffer ; 0x7a5e
        0x008105ba:    6820         h      LDR      r0,[r4,#0]
        0x008105bc:    1c40        @.      ADDS     r0,r0,#1
        0x008105be:    d005        ..      BEQ      0x8105cc ; tuya_ota_init + 140
        0x008105c0:    4620         F      MOV      r0,r4
        0x008105c2:    f000ff30    ..0.    BL       settings_crc_get ; 0x811426
        0x008105c6:    6821        !h      LDR      r1,[r4,#0]
        0x008105c8:    4281        .B      CMP      r1,r0
        0x008105ca:    d017        ..      BEQ      0x8105fc ; tuya_ota_init + 188
;;;153    
;;;154        if(!crc_ok(&dfu_settings))
;;;155        {
;;;156            TUYA_BLE_LOG_DEBUG("read dfu_settings...crc error!");
        0x008105cc:    a0ec        ..      ADR      r0,{pc}+0x3b4 ; 0x810980
        0x008105ce:    f00afaec    ....    BL       get_args ; 0x81abaa
        0x008105d2:    49dc        .I      LDR      r1,[pc,#880] ; [0x810944] = 0x8800ea8
        0x008105d4:    4602        .F      MOV      r2,r0
        0x008105d6:    31e8        .1      ADDS     r1,r1,#0xe8
        0x008105d8:    4628        (F      MOV      r0,r5
        0x008105da:    f7f7da40    ..@.    BL       log_buffer ; 0x7a5e
;;;157            memset(&dfu_settings,0,sizeof(dfu_settings_t));
        0x008105de:    2150        P!      MOVS     r1,#0x50
        0x008105e0:    48e4        .H      LDR      r0,[pc,#912] ; [0x810974] = 0x208778
        0x008105e2:    f449f53d    I.=.    BL       __aeabi_memclr4 ; 0x5a060
;;;158            if(dfu_settings_write())
        0x008105e6:    f000ff23    ..#.    BL       dfu_settings_write ; 0x811430
        0x008105ea:    b138        8.      CBZ      r0,0x8105fc ; tuya_ota_init + 188
;;;159            {
;;;160                TUYA_BLE_LOG_ERROR("dfu_settings_write failed !");
        0x008105ec:    a0f0        ..      ADR      r0,{pc}+0x3c4 ; 0x8109b0
        0x008105ee:    f00afadc    ....    BL       get_args ; 0x81abaa
        0x008105f2:    4602        .F      MOV      r2,r0
        0x008105f4:    49f9        .I      LDR      r1,[pc,#996] ; [0x8109dc] = 0x8800fc0
        0x008105f6:    4628        (F      MOV      r0,r5
        0x008105f8:    f7f7da31    ..1.    BL       log_buffer ; 0x7a5e
;;;161            }
;;;162        }
;;;163    
;;;164        return 0;
        0x008105fc:    2000        .       MOVS     r0,#0
;;;165    }
        0x008105fe:    bd70        p.      POP      {r4-r6,pc}
    flash_auto_read_buffer
;;;166    
;;;167    
;;;168    
;;;169    static void tuya_ota_start_req(uint8_t*recv_data,uint32_t recv_len)
;;;170    {
;;;171        uint8_t p_buf[70];
;;;172        uint8_t payload_len = 0;
;;;173        uint8_t encry_mode = 0;
;;;174        uint32_t current_version = TY_APP_VER_NUM;
;;;175        tuya_ble_ota_response_t res_data;
;;;176    
;;;177        if(tuya_ota_status!=TUYA_OTA_STATUS_NONE)
;;;178        {
;;;179            TUYA_BLE_LOG_ERROR("current ota status is not TUYA_OTA_STATUS_NONE  and is : %d !",tuya_ota_status);
;;;180            return;
;;;181        }
;;;182    
;;;183        p_buf[0] = TUYA_OTA_TYPE;
;;;184        p_buf[1] = TUYA_OTA_VERSION;
;;;185        p_buf[2] = 0;
;;;186        p_buf[3] = current_version>>24;
;;;187        p_buf[4] = current_version>>16;
;;;188        p_buf[5] = current_version>>8;
;;;189        p_buf[6] = current_version;
;;;190        p_buf[7] = MAX_DFU_DATA_LEN>>8;
;;;191        p_buf[8] = MAX_DFU_DATA_LEN;
;;;192        tuya_ota_status = TUYA_OTA_STATUS_START;
;;;193        payload_len = 9;
;;;194    
;;;195        res_data.type =  TUYA_BLE_OTA_REQ;
;;;196        res_data.data_len = payload_len;
;;;197        res_data.p_data = p_buf;
;;;198    
;;;199        if(tuya_ble_ota_response(&res_data) != TUYA_BLE_SUCCESS)
;;;200        {
;;;201            TUYA_BLE_LOG_ERROR("tuya_ota_start_response failed.");
;;;202        }
;;;203    
;;;204    }
;;;205    
;;;206    static uint8_t  flash_auto_read_buffer(uint32_t addr,uint32_t length,uint8_t *buf)
;;;207    {
        0x00810600:    b570        p.      PUSH     {r4-r6,lr}
        0x00810602:    4613        .F      MOV      r3,r2
        0x00810604:    b109        ..      CBZ      r1,0x81060a ; flash_auto_read_buffer + 10
;;;208        uint32_t data_temp = 0;
;;;209        uint32_t cnt;
;;;210        if((length == 0)||(length % 4))
        0x00810606:    078a        ..      LSLS     r2,r1,#30
        0x00810608:    d00a        ..      BEQ      0x810620 ; flash_auto_read_buffer + 32
;;;211        {
;;;212            TUYA_BLE_LOG_ERROR("flash_auto_read_buffer data length error.");
        0x0081060a:    a0f5        ..      ADR      r0,{pc}+0x3d6 ; 0x8109e0
        0x0081060c:    f00afacd    ....    BL       get_args ; 0x81abaa
        0x00810610:    49f2        .I      LDR      r1,[pc,#968] ; [0x8109dc] = 0x8800fc0
        0x00810612:    4602        .F      MOV      r2,r0
        0x00810614:    31a8        .1      ADDS     r1,r1,#0xa8
        0x00810616:    48bf        .H      LDR      r0,[pc,#764] ; [0x810914] = 0x21103002
        0x00810618:    f7f7da21    ..!.    BL       log_buffer ; 0x7a5e
;;;213            return 1;
        0x0081061c:    2001        .       MOVS     r0,#1
        0x0081061e:    bd70        p.      POP      {r4-r6,pc}
;;;214        }
;;;215        cnt = length/4;
        0x00810620:    088c        ..      LSRS     r4,r1,#2
;;;216        //tuya_ble_device_enter_critical();
;;;217        for(uint32_t i=0; i<cnt; i++)
        0x00810622:    2100        .!      MOVS     r1,#0
        0x00810624:    e008        ..      B        0x810638 ; flash_auto_read_buffer + 56
;;;218        {
;;;219            data_temp = flash_auto_read((addr + i*4) | FLASH_OFFSET_TO_NO_CACHE);
        0x00810626:    eb000281    ....    ADD      r2,r0,r1,LSL #2
        0x0081062a:    f0427280    B..r    ORR      r2,r2,#0x1000000
;;;220            memcpy(buf+i*4,(uint8_t *)&data_temp,4);
        0x0081062e:    eb030581    ....    ADD      r5,r3,r1,LSL #2
;;; .\sample\user_flash_driver.h
;;;247        return *(uint32_t *)addr;
        0x00810632:    6812        .h      LDR      r2,[r2,#0]
        0x00810634:    602a        *`      STR      r2,[r5,#0]
        0x00810636:    1c49        I.      ADDS     r1,r1,#1
        0x00810638:    42a1        .B      CMP      r1,r4
        0x0081063a:    d3f4        ..      BCC      0x810626 ; flash_auto_read_buffer + 38
;;; sample\tuya_ble_app\tuya_ble_app_ota.c
;;;223        return 0;
        0x0081063c:    2000        .       MOVS     r0,#0
;;;224    
;;;225    }
        0x0081063e:    bd70        p.      POP      {r4-r6,pc}
    file_crc_check_in_flash
;;;226    
;;;227    
;;;228    static  uint8_t file_crc_check_in_flash(uint32_t length,uint32_t *crc)
;;;229    {
        0x00810640:    e92d43f8    -..C    PUSH     {r3-r9,lr}
        0x00810644:    4db3        .M      LDR      r5,[pc,#716] ; [0x810914] = 0x21103002
;;; sample\tuya_ble_app\tuya_ble_app_ota.c (229)
        0x00810646:    4689        .F      MOV      r9,r1
        0x00810648:    b118        ..      CBZ      r0,0x810652 ; file_crc_check_in_flash + 18
;;;230        static uint8_t file_check_buf[256];
;;;231        uint8_t result = 0;
;;;232    
;;;233        if((length == 0)||(length % 4)||(length < 256))
        0x0081064a:    0781        ..      LSLS     r1,r0,#30
        0x0081064c:    d101        ..      BNE      0x810652 ; file_crc_check_in_flash + 18
        0x0081064e:    28ff        .(      CMP      r0,#0xff
        0x00810650:    d809        ..      BHI      0x810666 ; file_crc_check_in_flash + 38
;;;234        {
;;;235            TUYA_BLE_LOG_ERROR("file_crc_check_in_flash data length error.");
        0x00810652:    a0f1        ..      ADR      r0,{pc}+0x3c6 ; 0x810a18
        0x00810654:    f00afaa9    ....    BL       get_args ; 0x81abaa
        0x00810658:    49e0        .I      LDR      r1,[pc,#896] ; [0x8109dc] = 0x8800fc0
        0x0081065a:    4602        .F      MOV      r2,r0
        0x0081065c:    31e0        .1      ADDS     r1,r1,#0xe0
        0x0081065e:    4628        (F      MOV      r0,r5
        0x00810660:    f7f7d9fd    ....    BL       log_buffer ; 0x7a5e
;;;236            return 1;
        0x00810664:    e07c        |.      B        0x810760 ; file_crc_check_in_flash + 288
;;;237        }
;;;238    
;;;239        uint32_t crc_temp = 0;
        0x00810666:    2100        .!      MOVS     r1,#0
;;;240        uint32_t read_addr;
;;;241        uint32_t cnt = length/256;
        0x00810668:    0a06        ..      LSRS     r6,r0,#8
;;;242        uint32_t remainder = length % 256;
        0x0081066a:    b2c7        ..      UXTB     r7,r0
;;;243    
;;;244        read_addr = get_temp_ota_bank_addr_by_img_id((T_IMG_ID)AppPatch);
        0x0081066c:    f2427093    B..p    MOV      r0,#0x2793
        0x00810670:    9100        ..      STR      r1,[sp,#0]
        0x00810672:    f7fcd905    ....    BL       get_temp_ota_bank_addr_by_img_id ; 0xc880
        0x00810676:    4680        .F      MOV      r8,r0
;;;245        TUYA_BLE_LOG_DEBUG("read_addr = 0x%08x",read_addr);
        0x00810678:    a0f6        ..      ADR      r0,{pc}+0x3dc ; 0x810a54
        0x0081067a:    f00afa96    ....    BL       get_args ; 0x81abaa
        0x0081067e:    4602        .F      MOV      r2,r0
        0x00810680:    4643        CF      MOV      r3,r8
        0x00810682:    49fd        .I      LDR      r1,[pc,#1012] ; [0x810a78] = 0x88010dc
        0x00810684:    4628        (F      MOV      r0,r5
        0x00810686:    f7f7d9ea    ....    BL       log_buffer ; 0x7a5e
;;;246        //unlock_flash_all();
;;;247    
;;;248        if(flash_auto_read_buffer(read_addr,256,file_check_buf))
        0x0081068a:    4aa1        .J      LDR      r2,[pc,#644] ; [0x810910] = 0x208668
        0x0081068c:    f44f7480    O..t    MOV      r4,#0x100
        0x00810690:    320d        .2      ADDS     r2,r2,#0xd
        0x00810692:    4621        !F      MOV      r1,r4
        0x00810694:    4640        @F      MOV      r0,r8
        0x00810696:    f7ffffb3    ....    BL       flash_auto_read_buffer ; 0x810600
        0x0081069a:    2800        .(      CMP      r0,#0
        0x0081069c:    d160        `.      BNE      0x810760 ; file_crc_check_in_flash + 288
;;;249        {
;;;250            // lock_flash();
;;;251            return 1;
;;;252        }
;;;253        TUYA_BLE_LOG_HEXDUMP_DEBUG("file_crc_check_in_flash:buf data before:",file_check_buf,12);
        0x0081069e:    48f7        .H      LDR      r0,[pc,#988] ; [0x810a7c] = 0x81cb40
        0x008106a0:    f00afa83    ....    BL       get_args ; 0x81abaa
        0x008106a4:    49f4        .I      LDR      r1,[pc,#976] ; [0x810a78] = 0x88010dc
        0x008106a6:    4602        .F      MOV      r2,r0
        0x008106a8:    230c        .#      MOVS     r3,#0xc
        0x008106aa:    3124        $1      ADDS     r1,r1,#0x24
        0x008106ac:    4628        (F      MOV      r0,r5
        0x008106ae:    f7f7d9d6    ....    BL       log_buffer ; 0x7a5e
        0x008106b2:    4a97        .J      LDR      r2,[pc,#604] ; [0x810910] = 0x208668
        0x008106b4:    230c        .#      MOVS     r3,#0xc
        0x008106b6:    320d        .2      ADDS     r2,r2,#0xd
        0x008106b8:    2108        .!      MOVS     r1,#8
        0x008106ba:    a0a1        ..      ADR      r0,{pc}+0x286 ; 0x810940
        0x008106bc:    f00afa89    ....    BL       log_hexdump ; 0x81abd2
        0x008106c0:    a09f        ..      ADR      r0,{pc}+0x280 ; 0x810940
        0x008106c2:    f00afa72    ..r.    BL       get_args ; 0x81abaa
        0x008106c6:    49ec        .I      LDR      r1,[pc,#944] ; [0x810a78] = 0x88010dc
        0x008106c8:    4602        .F      MOV      r2,r0
        0x008106ca:    3168        h1      ADDS     r1,r1,#0x68
        0x008106cc:    4628        (F      MOV      r0,r5
        0x008106ce:    f7f7d9c6    ....    BL       log_buffer ; 0x7a5e
;;;254        T_IMG_CTRL_HEADER_FORMAT *p_header = (T_IMG_CTRL_HEADER_FORMAT *) file_check_buf;
        0x008106d2:    488f        .H      LDR      r0,[pc,#572] ; [0x810910] = 0x208668
        0x008106d4:    300d        .0      ADDS     r0,r0,#0xd
;;;255        p_header->ctrl_flag.flag_value.not_ready = 0;
        0x008106d6:    8841        A.      LDRH     r1,[r0,#2]
        0x008106d8:    f0210180    !...    BIC      r1,r1,#0x80
        0x008106dc:    8041        A.      STRH     r1,[r0,#2]
;;;256        TUYA_BLE_LOG_HEXDUMP_DEBUG("file_crc_check_in_flash:buf data after:",file_check_buf,12);
        0x008106de:    48e8        .H      LDR      r0,[pc,#928] ; [0x810a80] = 0x81cb84
        0x008106e0:    f00afa63    ..c.    BL       get_args ; 0x81abaa
        0x008106e4:    49e4        .I      LDR      r1,[pc,#912] ; [0x810a78] = 0x88010dc
        0x008106e6:    4602        .F      MOV      r2,r0
        0x008106e8:    230c        .#      MOVS     r3,#0xc
        0x008106ea:    316c        l1      ADDS     r1,r1,#0x6c
        0x008106ec:    4628        (F      MOV      r0,r5
        0x008106ee:    f7f7d9b6    ....    BL       log_buffer ; 0x7a5e
        0x008106f2:    4a87        .J      LDR      r2,[pc,#540] ; [0x810910] = 0x208668
        0x008106f4:    230c        .#      MOVS     r3,#0xc
        0x008106f6:    320d        .2      ADDS     r2,r2,#0xd
        0x008106f8:    2108        .!      MOVS     r1,#8
        0x008106fa:    a091        ..      ADR      r0,{pc}+0x246 ; 0x810940
        0x008106fc:    f00afa69    ..i.    BL       log_hexdump ; 0x81abd2
        0x00810700:    a08f        ..      ADR      r0,{pc}+0x240 ; 0x810940
        0x00810702:    f00afa52    ..R.    BL       get_args ; 0x81abaa
        0x00810706:    49dc        .I      LDR      r1,[pc,#880] ; [0x810a78] = 0x88010dc
        0x00810708:    4602        .F      MOV      r2,r0
        0x0081070a:    31b0        .1      ADDS     r1,r1,#0xb0
        0x0081070c:    4628        (F      MOV      r0,r5
        0x0081070e:    f7f7d9a6    ....    BL       log_buffer ; 0x7a5e
        0x00810712:    487f        .H      LDR      r0,[pc,#508] ; [0x810910] = 0x208668
;;;257        read_addr += 256;
        0x00810714:    f5087580    ...u    ADD      r5,r8,#0x100
;;;258        crc_temp = crc32_compute(file_check_buf, 256, &crc_temp);
        0x00810718:    466a        jF      MOV      r2,sp
        0x0081071a:    46a0        .F      MOV      r8,r4
        0x0081071c:    4621        !F      MOV      r1,r4
        0x0081071e:    300d        .0      ADDS     r0,r0,#0xd
        0x00810720:    f005ff88    ....    BL       tuya_ble_crc32_compute ; 0x816634
;;;259    
;;;260        for(uint32_t i = 1; i<cnt; i++)
        0x00810724:    2401        .$      MOVS     r4,#1
        0x00810726:    9000        ..      STR      r0,[sp,#0]
        0x00810728:    e010        ..      B        0x81074c ; file_crc_check_in_flash + 268
        0x0081072a:    4a79        yJ      LDR      r2,[pc,#484] ; [0x810910] = 0x208668
        0x0081072c:    4641        AF      MOV      r1,r8
        0x0081072e:    320d        .2      ADDS     r2,r2,#0xd
        0x00810730:    4628        (F      MOV      r0,r5
        0x00810732:    f7ffff65    ..e.    BL       flash_auto_read_buffer ; 0x810600
        0x00810736:    b998        ..      CBNZ     r0,0x810760 ; file_crc_check_in_flash + 288
        0x00810738:    4875        uH      LDR      r0,[pc,#468] ; [0x810910] = 0x208668
        0x0081073a:    466a        jF      MOV      r2,sp
        0x0081073c:    4641        AF      MOV      r1,r8
        0x0081073e:    300d        .0      ADDS     r0,r0,#0xd
        0x00810740:    f005ff78    ..x.    BL       tuya_ble_crc32_compute ; 0x816634
        0x00810744:    1c64        d.      ADDS     r4,r4,#1
        0x00810746:    f5057580    ...u    ADD      r5,r5,#0x100
        0x0081074a:    9000        ..      STR      r0,[sp,#0]
        0x0081074c:    42b4        .B      CMP      r4,r6
        0x0081074e:    d3ec        ..      BCC      0x81072a ; file_crc_check_in_flash + 234
;;;261        {
;;;262            if(flash_auto_read_buffer(read_addr,256,file_check_buf))
;;;263            {
;;;264                // lock_flash();
;;;265                return 1;
;;;266            }
;;;267            crc_temp = crc32_compute(file_check_buf, 256, &crc_temp);
;;;268            read_addr += 256;
;;;269        }
;;;270    
;;;271        if(remainder>0)
        0x00810750:    b187        ..      CBZ      r7,0x810774 ; file_crc_check_in_flash + 308
;;;272        {
;;;273            if(flash_auto_read_buffer(read_addr,remainder,file_check_buf))
        0x00810752:    4a6f        oJ      LDR      r2,[pc,#444] ; [0x810910] = 0x208668
        0x00810754:    4639        9F      MOV      r1,r7
        0x00810756:    320d        .2      ADDS     r2,r2,#0xd
        0x00810758:    4628        (F      MOV      r0,r5
        0x0081075a:    f7ffff51    ..Q.    BL       flash_auto_read_buffer ; 0x810600
        0x0081075e:    b110        ..      CBZ      r0,0x810766 ; file_crc_check_in_flash + 294
;;;274            {
;;;275                // lock_flash();
;;;276                return 1;
        0x00810760:    2001        .       MOVS     r0,#1
        0x00810762:    e8bd83f8    ....    POP      {r3-r9,pc}
;;;277            }
;;;278            crc_temp = crc32_compute(file_check_buf, remainder, &crc_temp);
        0x00810766:    486a        jH      LDR      r0,[pc,#424] ; [0x810910] = 0x208668
        0x00810768:    466a        jF      MOV      r2,sp
        0x0081076a:    4639        9F      MOV      r1,r7
        0x0081076c:    300d        .0      ADDS     r0,r0,#0xd
        0x0081076e:    f005ff61    ..a.    BL       tuya_ble_crc32_compute ; 0x816634
        0x00810772:    9000        ..      STR      r0,[sp,#0]
;;;279            read_addr += remainder;
;;;280        }
;;;281    
;;;282        *crc = crc_temp;
;;;283        // lock_flash();
;;;284        return 0;
        0x00810774:    f8c90000    ....    STR      r0,[r9,#0]
        0x00810778:    2000        .       MOVS     r0,#0
;;;285    }
        0x0081077a:    e7f2        ..      B        0x810762 ; file_crc_check_in_flash + 290
    tuya_ota_file_info_req
;;;286    
;;;287    
;;;288    
;;;289    
;;;290    static void tuya_ota_file_info_req(uint8_t*recv_data,uint32_t recv_len)
;;;291    {
        0x0081077c:    e92d4ff0    -..O    PUSH     {r4-r11,lr}
        0x00810780:    b08f        ..      SUB      sp,sp,#0x3c
        0x00810782:    f8dfb18c    ....    LDR      r11,[pc,#396] ; [0x810910] = 0x208668
        0x00810786:    2500        .%      MOVS     r5,#0
;;; sample\tuya_ble_app\tuya_ble_app_ota.c (291)
        0x00810788:    4604        .F      MOV      r4,r0
        0x0081078a:    9509        ..      STR      r5,[sp,#0x24]
        0x0081078c:    f89b0002    ....    LDRB     r0,[r11,#2]
        0x00810790:    46aa        .F      MOV      r10,r5
        0x00810792:    2801        .(      CMP      r0,#1
        0x00810794:    d00d        ..      BEQ      0x8107b2 ; tuya_ota_file_info_req + 54
;;;292        uint8_t p_buf[30];
;;;293        uint8_t payload_len = 0;
;;;294        uint8_t encry_mode = 0;
;;;295        uint32_t file_version;
;;;296        uint32_t file_length;
;;;297        uint32_t file_crc;
;;;298        bool file_md5;
;;;299        // uint8_t file_md5[16];
;;;300        uint8_t state = 0;
;;;301        tuya_ble_ota_response_t res_data;
;;;302        uint32_t crc_temp  = 0;
;;;303    
;;;304        //file_crc_check_in_flash(256,&file_crc);
;;;305        if(tuya_ota_status!=TUYA_OTA_STATUS_START)
;;;306        {
;;;307            TUYA_BLE_LOG_ERROR("current ota status is not TUYA_OTA_STATUS_START  and is : %d !",tuya_ota_status);
        0x00810796:    48bb        .H      LDR      r0,[pc,#748] ; [0x810a84] = 0x81ca34
        0x00810798:    f00afa07    ....    BL       get_args ; 0x81abaa
        0x0081079c:    f89b3002    ...0    LDRB     r3,[r11,#2]
        0x008107a0:    4602        .F      MOV      r2,r0
        0x008107a2:    49b5        .I      LDR      r1,[pc,#724] ; [0x810a78] = 0x88010dc
        0x008107a4:    485b        [H      LDR      r0,[pc,#364] ; [0x810914] = 0x21103002
        0x008107a6:    31b4        .1      ADDS     r1,r1,#0xb4
        0x008107a8:    f7f7d959    ..Y.    BL       log_buffer ; 0x7a5e
        0x008107ac:    b00f        ..      ADD      sp,sp,#0x3c
        0x008107ae:    e8bd8ff0    ....    POP      {r4-r11,pc}
;;;308            return;
;;;309        }
;;;310    
;;;311        if(recv_data[0]!=TUYA_OTA_TYPE)
        0x008107b2:    7820         x      LDRB     r0,[r4,#0]
        0x008107b4:    b128        (.      CBZ      r0,0x8107c2 ; tuya_ota_file_info_req + 70
;;;312        {
;;;313            TUYA_BLE_LOG_ERROR("current ota fm type is not 0!");
        0x008107b6:    a0b4        ..      ADR      r0,{pc}+0x2d2 ; 0x810a88
        0x008107b8:    f00af9f7    ....    BL       get_args ; 0x81abaa
        0x008107bc:    4602        .F      MOV      r2,r0
        0x008107be:    49bd        .I      LDR      r1,[pc,#756] ; [0x810ab4] = 0x88011e0
;;;314            return;
        0x008107c0:    e25c        \.      B        0x810c7c ; tuya_ota_file_info_req + 1280
;;;315        }
;;;316    
;;;317        file_version = recv_data[9]<<24;
        0x008107c2:    7a60        `z      LDRB     r0,[r4,#9]
        0x008107c4:    7aa1        .z      LDRB     r1,[r4,#0xa]
        0x008107c6:    0600        ..      LSLS     r0,r0,#24
;;;318        file_version += recv_data[10]<<16;
        0x008107c8:    eb004001    ...@    ADD      r0,r0,r1,LSL #16
;;;319        file_version += recv_data[11]<<8;
        0x008107cc:    7ae1        .z      LDRB     r1,[r4,#0xb]
        0x008107ce:    2210        ."      MOVS     r2,#0x10
        0x008107d0:    eb002001    ...     ADD      r0,r0,r1,LSL #8
;;;320        file_version += recv_data[12];
        0x008107d4:    7b21        !{      LDRB     r1,[r4,#0xc]
        0x008107d6:    180e        ..      ADDS     r6,r1,r0
;;;321    
;;;322        if(memcmp(dfu_settings.file_info.firmware_file_md5,&recv_data[17+TUYA_BLE_PRODUCT_ID_DEFAULT_LEN],16)==0)
        0x008107d8:    4866        fH      LDR      r0,[pc,#408] ; [0x810974] = 0x208778
        0x008107da:    f1040119    ....    ADD      r1,r4,#0x19
        0x008107de:    3014        .0      ADDS     r0,r0,#0x14
        0x008107e0:    e9cd010c    ....    STRD     r0,r1,[sp,#0x30]
        0x008107e4:    f449f30e    I...    BL       memcmp ; 0x59e04
        0x008107e8:    2800        .(      CMP      r0,#0
        0x008107ea:    d07d        }.      BEQ      0x8108e8 ; tuya_ota_file_info_req + 364
;;;323        {
;;;324            file_md5 = true;
;;;325        }
;;;326        else
;;;327        {
;;;328            file_md5 = false;
        0x008107ec:    2000        .       MOVS     r0,#0
        0x008107ee:    4681        .F      MOV      r9,r0
;;;329        }
;;;330    
;;;331        file_length = recv_data[29]<<24;
        0x008107f0:    f8140f1d    ....    LDRB     r0,[r4,#0x1d]!
        0x008107f4:    7861        ax      LDRB     r1,[r4,#1]
        0x008107f6:    0600        ..      LSLS     r0,r0,#24
;;;332        file_length += recv_data[30]<<16;
        0x008107f8:    eb004001    ...@    ADD      r0,r0,r1,LSL #16
;;;333        file_length += recv_data[31]<<8;
        0x008107fc:    78a1        .x      LDRB     r1,[r4,#2]
        0x008107fe:    eb002001    ...     ADD      r0,r0,r1,LSL #8
;;;334        file_length += recv_data[32];
        0x00810802:    78e1        .x      LDRB     r1,[r4,#3]
        0x00810804:    180f        ..      ADDS     r7,r1,r0
;;;335    
;;;336        file_crc = recv_data[33]<<24;
        0x00810806:    7920         y      LDRB     r0,[r4,#4]
        0x00810808:    7961        ay      LDRB     r1,[r4,#5]
        0x0081080a:    0600        ..      LSLS     r0,r0,#24
;;;337        file_crc += recv_data[34]<<16;
        0x0081080c:    eb004001    ...@    ADD      r0,r0,r1,LSL #16
;;;338        file_crc += recv_data[35]<<8;
        0x00810810:    79a1        .y      LDRB     r1,[r4,#6]
        0x00810812:    eb002001    ...     ADD      r0,r0,r1,LSL #8
;;;339        file_crc += recv_data[36];
        0x00810816:    79e1        .y      LDRB     r1,[r4,#7]
        0x00810818:    180c        ..      ADDS     r4,r1,r0
;;;340      
;;;341        TUYA_BLE_LOG_DEBUG("dfu_settings.file_info.firmware_file_version = 0x%04x ---- file_version = 0x%04x",dfu_settings.file_info.firmware_file_version,file_version);
        0x0081081a:    48a7        .H      LDR      r0,[pc,#668] ; [0x810ab8] = 0x81cd08
        0x0081081c:    f00af9c5    ....    BL       get_args ; 0x81abaa
        0x00810820:    f8df8150    ..P.    LDR      r8,[pc,#336] ; [0x810974] = 0x208778
        0x00810824:    49a3        .I      LDR      r1,[pc,#652] ; [0x810ab4] = 0x88011e0
        0x00810826:    4602        .F      MOV      r2,r0
        0x00810828:    9600        ..      STR      r6,[sp,#0]
        0x0081082a:    312c        ,1      ADDS     r1,r1,#0x2c
        0x0081082c:    4839        9H      LDR      r0,[pc,#228] ; [0x810914] = 0x21103002
        0x0081082e:    f8d83008    ...0    LDR      r3,[r8,#8]
        0x00810832:    f7f7d914    ....    BL       log_buffer ; 0x7a5e
;;;342        TUYA_BLE_LOG_DEBUG("dfu_settings.file_info.firmware_file_length = %d ---- file_length = %d",dfu_settings.file_info.firmware_file_length,file_length);
        0x00810836:    48a1        .H      LDR      r0,[pc,#644] ; [0x810abc] = 0x81cc18
        0x00810838:    f00af9b7    ....    BL       get_args ; 0x81abaa
        0x0081083c:    499d        .I      LDR      r1,[pc,#628] ; [0x810ab4] = 0x88011e0
        0x0081083e:    4602        .F      MOV      r2,r0
        0x00810840:    9700        ..      STR      r7,[sp,#0]
        0x00810842:    318c        .1      ADDS     r1,r1,#0x8c
        0x00810844:    4833        3H      LDR      r0,[pc,#204] ; [0x810914] = 0x21103002
        0x00810846:    f8d8300c    ...0    LDR      r3,[r8,#0xc]
        0x0081084a:    f7f7d908    ....    BL       log_buffer ; 0x7a5e
;;;343        TUYA_BLE_LOG_DEBUG("dfu_settings.file_info.firmware_file_crc = 0x%08x ---- file_crc = 0x%08x",dfu_settings.file_info.firmware_file_crc,file_crc);
        0x0081084e:    489c        .H      LDR      r0,[pc,#624] ; [0x810ac0] = 0x81cd68
        0x00810850:    f00af9ab    ....    BL       get_args ; 0x81abaa
        0x00810854:    4997        .I      LDR      r1,[pc,#604] ; [0x810ab4] = 0x88011e0
        0x00810856:    4602        .F      MOV      r2,r0
        0x00810858:    9400        ..      STR      r4,[sp,#0]
        0x0081085a:    31e4        .1      ADDS     r1,r1,#0xe4
        0x0081085c:    482d        -H      LDR      r0,[pc,#180] ; [0x810914] = 0x21103002
        0x0081085e:    f8d83010    ...0    LDR      r3,[r8,#0x10]
        0x00810862:    f7f7d8fc    ....    BL       log_buffer ; 0x7a5e
;;;344        TUYA_BLE_LOG_DEBUG("dfu_settings.progress.firmware_image_offset_last = %d ",dfu_settings.progress.firmware_image_offset_last);
        0x00810866:    4844        DH      LDR      r0,[pc,#272] ; [0x810978] = 0x81c904
        0x00810868:    f00af99f    ....    BL       get_args ; 0x81abaa
        0x0081086c:    4602        .F      MOV      r2,r0
        0x0081086e:    4995        .I      LDR      r1,[pc,#596] ; [0x810ac4] = 0x880131c
        0x00810870:    4828        (H      LDR      r0,[pc,#160] ; [0x810914] = 0x21103002
        0x00810872:    f8d83028    ..(0    LDR      r3,[r8,#0x28]
        0x00810876:    f7f7d8f2    ....    BL       log_buffer ; 0x7a5e
;;;345        TUYA_BLE_LOG_DEBUG("dfu_settings.progress.firmware_image_crc_last = 0x%08x ",dfu_settings.progress.firmware_image_crc_last);
        0x0081087a:    4840        @H      LDR      r0,[pc,#256] ; [0x81097c] = 0x81c94c
        0x0081087c:    f00af995    ....    BL       get_args ; 0x81abaa
        0x00810880:    4990        .I      LDR      r1,[pc,#576] ; [0x810ac4] = 0x880131c
        0x00810882:    4602        .F      MOV      r2,r0
        0x00810884:    3148        H1      ADDS     r1,r1,#0x48
        0x00810886:    4823        #H      LDR      r0,[pc,#140] ; [0x810914] = 0x21103002
        0x00810888:    f8d8302c    ..,0    LDR      r3,[r8,#0x2c]
        0x0081088c:    f7f7d8e7    ....    BL       log_buffer ; 0x7a5e
;;;346        TUYA_BLE_LOG_DEBUG("file_md5 = %d",file_md5);
        0x00810890:    a08d        ..      ADR      r0,{pc}+0x238 ; 0x810ac8
        0x00810892:    f00af98a    ....    BL       get_args ; 0x81abaa
        0x00810896:    498b        .I      LDR      r1,[pc,#556] ; [0x810ac4] = 0x880131c
        0x00810898:    4602        .F      MOV      r2,r0
        0x0081089a:    464b        KF      MOV      r3,r9
        0x0081089c:    3190        .1      ADDS     r1,r1,#0x90
        0x0081089e:    481d        .H      LDR      r0,[pc,#116] ; [0x810914] = 0x21103002
        0x008108a0:    f7f7d8dd    ....    BL       log_buffer ; 0x7a5e
;;;347        if((file_version > TY_APP_VER_NUM)&&(file_length <= APP_NEW_FW_MAX_SIZE))
        0x008108a4:    f5b67f80    ....    CMP      r6,#0x100
        0x008108a8:    d92f        /.      BLS      0x81090a ; tuya_ota_file_info_req + 398
        0x008108aa:    f44f1000    O...    MOV      r0,#0x200000
        0x008108ae:    f8d003e8    ....    LDR      r0,[r0,#0x3e8]
        0x008108b2:    42b8        .B      CMP      r0,r7
        0x008108b4:    d32a        *.      BCC      0x81090c ; tuya_ota_file_info_req + 400
;;;348        {
;;;349    
;;;350            if(file_md5&&(dfu_settings.file_info.firmware_file_version==file_version)&&(dfu_settings.file_info.firmware_file_length==file_length)
        0x008108b6:    f1b90f00    ....    CMP      r9,#0
        0x008108ba:    d00b        ..      BEQ      0x8108d4 ; tuya_ota_file_info_req + 344
        0x008108bc:    f8d81008    ....    LDR      r1,[r8,#8]
        0x008108c0:    4640        @F      MOV      r0,r8
        0x008108c2:    42b1        .B      CMP      r1,r6
        0x008108c4:    d106        ..      BNE      0x8108d4 ; tuya_ota_file_info_req + 344
        0x008108c6:    68c1        .h      LDR      r1,[r0,#0xc]
        0x008108c8:    42b9        .B      CMP      r1,r7
        0x008108ca:    d103        ..      BNE      0x8108d4 ; tuya_ota_file_info_req + 344
;;;351                    &&(dfu_settings.file_info.firmware_file_crc==file_crc))
        0x008108cc:    f8d80010    ....    LDR      r0,[r8,#0x10]
        0x008108d0:    42a0        .B      CMP      r0,r4
        0x008108d2:    d01c        ..      BEQ      0x81090e ; tuya_ota_file_info_req + 402
;;;352            {
;;;353                state = 0;
;;;354            }
;;;355            else
;;;356            {
;;;357                TUYA_BLE_LOG_DEBUG("file info check failed.");
        0x008108d4:    a083        ..      ADR      r0,{pc}+0x210 ; 0x810ae4
        0x008108d6:    f00af968    ..h.    BL       get_args ; 0x81abaa
        0x008108da:    497a        zI      LDR      r1,[pc,#488] ; [0x810ac4] = 0x880131c
        0x008108dc:    4602        .F      MOV      r2,r0
        0x008108de:    31ac        .1      ADDS     r1,r1,#0xac
        0x008108e0:    480c        .H      LDR      r0,[pc,#48] ; [0x810914] = 0x21103002
        0x008108e2:    f7f7d8bc    ....    BL       log_buffer ; 0x7a5e
;;;358                memset(&dfu_settings, 0, sizeof(dfu_settings_t));
        0x008108e6:    e000        ..      B        0x8108ea ; tuya_ota_file_info_req + 366
        0x008108e8:    e113        ..      B        0x810b12 ; tuya_ota_file_info_req + 918
        0x008108ea:    2150        P!      MOVS     r1,#0x50
        0x008108ec:    4821        !H      LDR      r0,[pc,#132] ; [0x810974] = 0x208778
        0x008108ee:    f449f3b7    I...    BL       __aeabi_memclr4 ; 0x5a060
;;;359                dfu_settings.progress.firmware_image_crc_last = 0;
        0x008108f2:    f8c8a02c    ..,.    STR      r10,[r8,#0x2c]
        0x008108f6:    e9c86702    ...g    STRD     r6,r7,[r8,#8]
;;;360                dfu_settings.file_info.firmware_file_version = file_version;
;;;361                dfu_settings.file_info.firmware_file_length = file_length;
;;;362                dfu_settings.file_info.firmware_file_crc = file_crc;
;;;363                memcpy(dfu_settings.file_info.firmware_file_md5,&recv_data[17+TUYA_BLE_PRODUCT_ID_DEFAULT_LEN],16);
        0x008108fa:    f8c84010    ...@    STR      r4,[r8,#0x10]
        0x008108fe:    e9dd010c    ....    LDRD     r0,r1,[sp,#0x30]
        0x00810902:    2210        ."      MOVS     r2,#0x10
        0x00810904:    f449f2c9    I...    BL       __aeabi_memcpy ; 0x59e9a
;;;364                //dfu_settings.write_offset = dfu_settings.progress.firmware_image_offset_last;
;;;365                state = 0;
;;;366                dfu_settings_write();
        0x00810908:    e100        ..      B        0x810b0c ; tuya_ota_file_info_req + 912
        0x0081090a:    e104        ..      B        0x810b16 ; tuya_ota_file_info_req + 922
        0x0081090c:    e10d        ..      B        0x810b2a ; tuya_ota_file_info_req + 942
        0x0081090e:    e116        ..      B        0x810b3e ; tuya_ota_file_info_req + 962
    $d
        0x00810910:    00208668    h. .    DCD    2131560
        0x00810914:    21103002    .0.!    DCD    554708994
        0x00810918:    205d455b    [E]     DCD    542983515
        0x0081091c:    41595554    TUYA    DCD    1096373588
        0x00810920:    454c425f    _BLE    DCD    1162625631
        0x00810924:    6664203a    : df    DCD    1717837882
        0x00810928:    65735f75    u_se    DCD    1702059893
        0x0081092c:    6e697474    ttin    DCD    1852404852
        0x00810930:    725f7367    gs_r    DCD    1918858087
        0x00810934:    20646165    ead     DCD    543449445
        0x00810938:    6c696166    fail    DCD    1818845542
        0x0081093c:    21206465    ed !    DCD    555770981
        0x00810940:    00000000    ....    DCD    0
        0x00810944:    08800ea8    ....    DCD    142610088
        0x00810948:    205d445b    [D]     DCD    542983259
        0x0081094c:    41595554    TUYA    DCD    1096373588
        0x00810950:    454c425f    _BLE    DCD    1162625631
        0x00810954:    6664203a    : df    DCD    1717837882
        0x00810958:    65735f75    u_se    DCD    1702059893
        0x0081095c:    6e697474    ttin    DCD    1852404852
        0x00810960:    632e7367    gs.c    DCD    1663988583
        0x00810964:    3d206372    rc =    DCD    1025532786
        0x00810968:    25783020     0x%    DCD    628633632
        0x0081096c:    20783830    08x     DCD    544749616
        0x00810970:    00000000    ....    DCD    0
        0x00810974:    00208778    x. .    DCD    2131832
        0x00810978:    0081c904    ....    DCD    8505604
        0x0081097c:    0081c94c    L...    DCD    8505676
        0x00810980:    205d445b    [D]     DCD    542983259
        0x00810984:    41595554    TUYA    DCD    1096373588
        0x00810988:    454c425f    _BLE    DCD    1162625631
        0x0081098c:    6572203a    : re    DCD    1701978170
        0x00810990:    64206461    ad d    DCD    1679844449
        0x00810994:    735f7566    fu_s    DCD    1935635814
        0x00810998:    69747465    etti    DCD    1769239653
        0x0081099c:    2e73676e    ngs.    DCD    779315054
        0x008109a0:    72632e2e    ..cr    DCD    1919102510
        0x008109a4:    72652063    c er    DCD    1919230051
        0x008109a8:    21726f72    ror!    DCD    561147762
        0x008109ac:    00000000    ....    DCD    0
        0x008109b0:    205d455b    [E]     DCD    542983515
        0x008109b4:    41595554    TUYA    DCD    1096373588
        0x008109b8:    454c425f    _BLE    DCD    1162625631
        0x008109bc:    6664203a    : df    DCD    1717837882
        0x008109c0:    65735f75    u_se    DCD    1702059893
        0x008109c4:    6e697474    ttin    DCD    1852404852
        0x008109c8:    775f7367    gs_w    DCD    2002744167
        0x008109cc:    65746972    rite    DCD    1702127986
        0x008109d0:    69616620     fai    DCD    1767990816
        0x008109d4:    2064656c    led     DCD    543450476
        0x008109d8:    00000021    !...    DCD    33
        0x008109dc:    08800fc0    ....    DCD    142610368
        0x008109e0:    205d455b    [E]     DCD    542983515
        0x008109e4:    41595554    TUYA    DCD    1096373588
        0x008109e8:    454c425f    _BLE    DCD    1162625631
        0x008109ec:    6c66203a    : fl    DCD    1818632250
        0x008109f0:    5f687361    ash_    DCD    1600680801
        0x008109f4:    6f747561    auto    DCD    1869903201
        0x008109f8:    6165725f    _rea    DCD    1634038367
        0x008109fc:    75625f64    d_bu    DCD    1969381220
        0x00810a00:    72656666    ffer    DCD    1919247974
        0x00810a04:    74616420     dat    DCD    1952539680
        0x00810a08:    656c2061    a le    DCD    1701584993
        0x00810a0c:    6874676e    ngth    DCD    1752459118
        0x00810a10:    72726520     err    DCD    1920099616
        0x00810a14:    002e726f    or..    DCD    3043951
        0x00810a18:    205d455b    [E]     DCD    542983515
        0x00810a1c:    41595554    TUYA    DCD    1096373588
        0x00810a20:    454c425f    _BLE    DCD    1162625631
        0x00810a24:    6966203a    : fi    DCD    1768300602
        0x00810a28:    635f656c    le_c    DCD    1667196268
        0x00810a2c:    635f6372    rc_c    DCD    1667195762
        0x00810a30:    6b636568    heck    DCD    1801676136
        0x00810a34:    5f6e695f    _in_    DCD    1601071455
        0x00810a38:    73616c66    flas    DCD    1935764582
        0x00810a3c:    61642068    h da    DCD    1633951848
        0x00810a40:    6c206174    ta l    DCD    1814061428
        0x00810a44:    74676e65    engt    DCD    1952935525
        0x00810a48:    72652068    h er    DCD    1919230056
        0x00810a4c:    2e726f72    ror.    DCD    779251570
        0x00810a50:    00000000    ....    DCD    0
        0x00810a54:    205d445b    [D]     DCD    542983259
        0x00810a58:    41595554    TUYA    DCD    1096373588
        0x00810a5c:    454c425f    _BLE    DCD    1162625631
        0x00810a60:    6572203a    : re    DCD    1701978170
        0x00810a64:    615f6461    ad_a    DCD    1633641569
        0x00810a68:    20726464    ddr     DCD    544367716
        0x00810a6c:    7830203d    = 0x    DCD    2016419901
        0x00810a70:    78383025    %08x    DCD    2016948261
        0x00810a74:    00000000    ....    DCD    0
        0x00810a78:    088010dc    ....    DCD    142610652
        0x00810a7c:    0081cb40    @...    DCD    8506176
        0x00810a80:    0081cb84    ....    DCD    8506244
        0x00810a84:    0081ca34    4...    DCD    8505908
        0x00810a88:    205d455b    [E]     DCD    542983515
        0x00810a8c:    41595554    TUYA    DCD    1096373588
        0x00810a90:    454c425f    _BLE    DCD    1162625631
        0x00810a94:    7563203a    : cu    DCD    1969430586
        0x00810a98:    6e657272    rren    DCD    1852142194
        0x00810a9c:    746f2074    t ot    DCD    1953439860
        0x00810aa0:    6d662061    a fm    DCD    1835409505
        0x00810aa4:    70797420     typ    DCD    1887007776
        0x00810aa8:    73692065    e is    DCD    1936269413
        0x00810aac:    746f6e20     not    DCD    1953459744
        0x00810ab0:    00213020     0!.    DCD    2175008
        0x00810ab4:    088011e0    ....    DCD    142610912
        0x00810ab8:    0081cd08    ....    DCD    8506632
        0x00810abc:    0081cc18    ....    DCD    8506392
        0x00810ac0:    0081cd68    h...    DCD    8506728
        0x00810ac4:    0880131c    ....    DCD    142611228
        0x00810ac8:    205d445b    [D]     DCD    542983259
        0x00810acc:    41595554    TUYA    DCD    1096373588
        0x00810ad0:    454c425f    _BLE    DCD    1162625631
        0x00810ad4:    6966203a    : fi    DCD    1768300602
        0x00810ad8:    6d5f656c    le_m    DCD    1834968428
        0x00810adc:    3d203564    d5 =    DCD    1025520996
        0x00810ae0:    00642520     %d.    DCD    6563104
        0x00810ae4:    205d445b    [D]     DCD    542983259
        0x00810ae8:    41595554    TUYA    DCD    1096373588
        0x00810aec:    454c425f    _BLE    DCD    1162625631
        0x00810af0:    6966203a    : fi    DCD    1768300602
        0x00810af4:    6920656c    le i    DCD    1763730796
        0x00810af8:    206f666e    nfo     DCD    544171630
        0x00810afc:    63656863    chec    DCD    1667590243
        0x00810b00:    6166206b    k fa    DCD    1634082923
        0x00810b04:    64656c69    iled    DCD    1684368489
        0x00810b08:    0000002e    ....    DCD    46
    $t
        0x00810b0c:    f000fc90    ....    BL       dfu_settings_write ; 0x811430
        0x00810b10:    e015        ..      B        0x810b3e ; tuya_ota_file_info_req + 962
        0x00810b12:    2001        .       MOVS     r0,#1
        0x00810b14:    e66b        k.      B        0x8107ee ; tuya_ota_file_info_req + 114
;;;367            }
;;;368    
;;;369        }
;;;370        else
;;;371        {
;;;372            if(file_version <= TY_APP_VER_NUM)
;;;373            {
;;;374                TUYA_BLE_LOG_ERROR("ota file version error !");
        0x00810b16:    a0e8        ..      ADR      r0,{pc}+0x3a2 ; 0x810eb8
        0x00810b18:    f00af847    ..G.    BL       get_args ; 0x81abaa
        0x00810b1c:    4602        .F      MOV      r2,r0
        0x00810b1e:    49f0        .I      LDR      r1,[pc,#960] ; [0x810ee0] = 0x88013f0
        0x00810b20:    48f0        .H      LDR      r0,[pc,#960] ; [0x810ee4] = 0x21103002
        0x00810b22:    f7f6df9c    ....    BL       log_buffer ; 0x7a5e
;;;375                state = 2;
        0x00810b26:    2502        .%      MOVS     r5,#2
        0x00810b28:    e009        ..      B        0x810b3e ; tuya_ota_file_info_req + 962
;;;376            }
;;;377            else
;;;378            {
;;;379                TUYA_BLE_LOG_ERROR("ota file length is bigger than rev space !");
        0x00810b2a:    a0ef        ..      ADR      r0,{pc}+0x3be ; 0x810ee8
        0x00810b2c:    f00af83d    ..=.    BL       get_args ; 0x81abaa
        0x00810b30:    49eb        .I      LDR      r1,[pc,#940] ; [0x810ee0] = 0x88013f0
        0x00810b32:    4602        .F      MOV      r2,r0
        0x00810b34:    3128        (1      ADDS     r1,r1,#0x28
        0x00810b36:    48eb        .H      LDR      r0,[pc,#940] ; [0x810ee4] = 0x21103002
        0x00810b38:    f7f6df91    ....    BL       log_buffer ; 0x7a5e
;;;380                state = 3;
        0x00810b3c:    2503        .%      MOVS     r5,#3
;;;381            }
;;;382        }
;;;383    
;;;384        memset(p_buf,0,sizeof(p_buf));
        0x00810b3e:    2120         !      MOVS     r1,#0x20
        0x00810b40:    a801        ..      ADD      r0,sp,#4
        0x00810b42:    f449f28d    I...    BL       __aeabi_memclr4 ; 0x5a060
;;;385        p_buf[0] = TUYA_OTA_TYPE;
        0x00810b46:    f88da004    ....    STRB     r10,[sp,#4]
        0x00810b4a:    4656        VF      MOV      r6,r10
;;;386        p_buf[1] = state;
        0x00810b4c:    f88d5005    ...P    STRB     r5,[sp,#5]
;;;387        if(state==0)
        0x00810b50:    2d00        .-      CMP      r5,#0
        0x00810b52:    d17f        ..      BNE      0x810c54 ; tuya_ota_file_info_req + 1240
;;;388        {
;;;389    
;;;390            if(dfu_settings.progress.firmware_image_offset_last>0)
        0x00810b54:    f8d80028    ..(.    LDR      r0,[r8,#0x28]
        0x00810b58:    4644        DF      MOV      r4,r8
        0x00810b5a:    b1c0        ..      CBZ      r0,0x810b8e ; tuya_ota_file_info_req + 1042
;;;391            {
;;;392                crc_temp  = 0;
;;;393                file_crc_check_in_flash(dfu_settings.progress.firmware_image_offset_last,&crc_temp);
        0x00810b5c:    a909        ..      ADD      r1,sp,#0x24
        0x00810b5e:    9609        ..      STR      r6,[sp,#0x24]
        0x00810b60:    f7fffd6e    ..n.    BL       file_crc_check_in_flash ; 0x810640
;;;394    
;;;395                TUYA_BLE_LOG_DEBUG("file_crc_check_in_flash-firmware_image_crc_last = 0x%08x ---- crc_temp = 0x%08x",dfu_settings.progress.firmware_image_crc_last,crc_temp);
        0x00810b64:    48ef        .H      LDR      r0,[pc,#956] ; [0x810f24] = 0x81cdc0
        0x00810b66:    f00af820    .. .    BL       get_args ; 0x81abaa
        0x00810b6a:    4602        .F      MOV      r2,r0
        0x00810b6c:    9809        ..      LDR      r0,[sp,#0x24]
        0x00810b6e:    9000        ..      STR      r0,[sp,#0]
        0x00810b70:    49db        .I      LDR      r1,[pc,#876] ; [0x810ee0] = 0x88013f0
        0x00810b72:    48dc        .H      LDR      r0,[pc,#880] ; [0x810ee4] = 0x21103002
        0x00810b74:    3164        d1      ADDS     r1,r1,#0x64
        0x00810b76:    6ae3        .j      LDR      r3,[r4,#0x2c]
        0x00810b78:    f7f6df71    ..q.    BL       log_buffer ; 0x7a5e
;;;396                if(crc_temp != dfu_settings.progress.firmware_image_crc_last)
        0x00810b7c:    6ae0        .j      LDR      r0,[r4,#0x2c]
        0x00810b7e:    9909        ..      LDR      r1,[sp,#0x24]
        0x00810b80:    4288        .B      CMP      r0,r1
        0x00810b82:    d004        ..      BEQ      0x810b8e ; tuya_ota_file_info_req + 1042
;;;397                {
;;;398                    dfu_settings.progress.firmware_image_offset_last = 0;
;;;399                    dfu_settings.progress.firmware_image_crc_last = 0;
        0x00810b84:    62a6        .b      STR      r6,[r4,#0x28]
;;;400                    dfu_settings.write_offset = dfu_settings.progress.firmware_image_offset_last;
        0x00810b86:    62e6        .b      STR      r6,[r4,#0x2c]
;;;401                    dfu_settings_write();
        0x00810b88:    6266        fb      STR      r6,[r4,#0x24]
        0x00810b8a:    f000fc51    ..Q.    BL       dfu_settings_write ; 0x811430
;;;402                }
;;;403    
;;;404            }
;;;405            p_buf[2] = dfu_settings.progress.firmware_image_offset_last>>24;
        0x00810b8e:    6aa0        .j      LDR      r0,[r4,#0x28]
        0x00810b90:    465d        ]F      MOV      r5,r11
        0x00810b92:    0e01        ..      LSRS     r1,r0,#24
        0x00810b94:    f88d1006    ....    STRB     r1,[sp,#6]
;;;406            p_buf[3] = dfu_settings.progress.firmware_image_offset_last>>16;
        0x00810b98:    0c01        ..      LSRS     r1,r0,#16
        0x00810b9a:    f88d1007    ....    STRB     r1,[sp,#7]
;;;407            p_buf[4] = dfu_settings.progress.firmware_image_offset_last>>8;
        0x00810b9e:    0a01        ..      LSRS     r1,r0,#8
        0x00810ba0:    f88d1008    ....    STRB     r1,[sp,#8]
;;;408            p_buf[5] = (uint8_t)dfu_settings.progress.firmware_image_offset_last;
        0x00810ba4:    f88d0009    ....    STRB     r0,[sp,#9]
;;;409            p_buf[6] = dfu_settings.progress.firmware_image_crc_last>>24;
        0x00810ba8:    6ae0        .j      LDR      r0,[r4,#0x2c]
        0x00810baa:    0e01        ..      LSRS     r1,r0,#24
        0x00810bac:    f88d100a    ....    STRB     r1,[sp,#0xa]
;;;410            p_buf[7] = dfu_settings.progress.firmware_image_crc_last>>16;
        0x00810bb0:    0c01        ..      LSRS     r1,r0,#16
        0x00810bb2:    f88d100b    ....    STRB     r1,[sp,#0xb]
;;;411            p_buf[8] = dfu_settings.progress.firmware_image_crc_last>>8;
        0x00810bb6:    0a01        ..      LSRS     r1,r0,#8
        0x00810bb8:    f88d100c    ....    STRB     r1,[sp,#0xc]
;;;412            p_buf[9] = (uint8_t)dfu_settings.progress.firmware_image_crc_last;
        0x00810bbc:    f88d000d    ....    STRB     r0,[sp,#0xd]
;;;413            tuya_ota_status = TUYA_OTA_STATUS_FILE_INFO;
        0x00810bc0:    2002        .       MOVS     r0,#2
        0x00810bc2:    f88b0002    ....    STRB     r0,[r11,#2]
;;;414            current_package = 0;
        0x00810bc6:    f8ab6006    ...`    STRH     r6,[r11,#6]
        0x00810bca:    0281        ..      LSLS     r1,r0,#10
;;;415            last_package = 0;
        0x00810bcc:    f8ab6008    ...`    STRH     r6,[r11,#8]
;;;416            memset(TempBufferHead,0,sizeof(TempBufferHead));
        0x00810bd0:    48d5        .H      LDR      r0,[pc,#852] ; [0x810f28] = 0x2087c8
        0x00810bd2:    f449f245    I.E.    BL       __aeabi_memclr4 ; 0x5a060
;;;417            ota_tmp_buf_used_size = 0;
        0x00810bd6:    80ae        ..      STRH     r6,[r5,#4]
;;;418    
;;;419            TUYA_BLE_LOG_DEBUG("ota file length  : %d",dfu_settings.file_info.firmware_file_length);
        0x00810bd8:    a0d4        ..      ADR      r0,{pc}+0x354 ; 0x810f2c
        0x00810bda:    f009ffe6    ....    BL       get_args ; 0x81abaa
        0x00810bde:    49c0        .I      LDR      r1,[pc,#768] ; [0x810ee0] = 0x88013f0
        0x00810be0:    4dc0        .M      LDR      r5,[pc,#768] ; [0x810ee4] = 0x21103002
        0x00810be2:    4602        .F      MOV      r2,r0
        0x00810be4:    31c4        .1      ADDS     r1,r1,#0xc4
        0x00810be6:    4628        (F      MOV      r0,r5
        0x00810be8:    68e3        .h      LDR      r3,[r4,#0xc]
        0x00810bea:    f7f6df38    ..8.    BL       log_buffer ; 0x7a5e
;;;420            TUYA_BLE_LOG_DEBUG("ota file  crc    : 0x%04x",dfu_settings.file_info.firmware_file_crc);
        0x00810bee:    a0d8        ..      ADR      r0,{pc}+0x362 ; 0x810f50
        0x00810bf0:    f009ffdb    ....    BL       get_args ; 0x81abaa
        0x00810bf4:    49ba        .I      LDR      r1,[pc,#744] ; [0x810ee0] = 0x88013f0
        0x00810bf6:    4602        .F      MOV      r2,r0
        0x00810bf8:    31e8        .1      ADDS     r1,r1,#0xe8
        0x00810bfa:    4628        (F      MOV      r0,r5
        0x00810bfc:    6923        #i      LDR      r3,[r4,#0x10]
        0x00810bfe:    f7f6df2e    ....    BL       log_buffer ; 0x7a5e
;;;421            TUYA_BLE_LOG_DEBUG("ota file version : 0x%04x",dfu_settings.file_info.firmware_file_version);
        0x00810c02:    a0dd        ..      ADR      r0,{pc}+0x376 ; 0x810f78
        0x00810c04:    f009ffd1    ....    BL       get_args ; 0x81abaa
        0x00810c08:    4602        .F      MOV      r2,r0
        0x00810c0a:    49e5        .I      LDR      r1,[pc,#916] ; [0x810fa0] = 0x8801500
        0x00810c0c:    4628        (F      MOV      r0,r5
        0x00810c0e:    68a3        .h      LDR      r3,[r4,#8]
        0x00810c10:    f7f6df25    ..%.    BL       log_buffer ; 0x7a5e
;;;422            // NRF_LOG_DEBUG("ota file md5 : 0x%04x",s_dfu_settings.progress.firmware_file_length);
;;;423            TUYA_BLE_LOG_DEBUG("ota firmware_image_offset_last : 0x%04x",dfu_settings.progress.firmware_image_offset_last);
        0x00810c14:    a0e3        ..      ADR      r0,{pc}+0x390 ; 0x810fa4
        0x00810c16:    f009ffc8    ....    BL       get_args ; 0x81abaa
        0x00810c1a:    49e1        .I      LDR      r1,[pc,#900] ; [0x810fa0] = 0x8801500
        0x00810c1c:    4602        .F      MOV      r2,r0
        0x00810c1e:    3128        (1      ADDS     r1,r1,#0x28
        0x00810c20:    4628        (F      MOV      r0,r5
        0x00810c22:    6aa3        .j      LDR      r3,[r4,#0x28]
        0x00810c24:    f7f6df1b    ....    BL       log_buffer ; 0x7a5e
;;;424            TUYA_BLE_LOG_DEBUG("ota firmware_image_crc_last    : 0x%04x",dfu_settings.progress.firmware_image_crc_last);
        0x00810c28:    a0ec        ..      ADR      r0,{pc}+0x3b4 ; 0x810fdc
        0x00810c2a:    f009ffbe    ....    BL       get_args ; 0x81abaa
        0x00810c2e:    49dc        .I      LDR      r1,[pc,#880] ; [0x810fa0] = 0x8801500
        0x00810c30:    4602        .F      MOV      r2,r0
        0x00810c32:    3160        `1      ADDS     r1,r1,#0x60
        0x00810c34:    4628        (F      MOV      r0,r5
        0x00810c36:    6ae3        .j      LDR      r3,[r4,#0x2c]
        0x00810c38:    f7f6df11    ....    BL       log_buffer ; 0x7a5e
;;;425            TUYA_BLE_LOG_DEBUG("ota firmware   write offset    : 0x%04x",dfu_settings.write_offset);
        0x00810c3c:    a0f5        ..      ADR      r0,{pc}+0x3d8 ; 0x811014
        0x00810c3e:    f009ffb4    ....    BL       get_args ; 0x81abaa
        0x00810c42:    49d7        .I      LDR      r1,[pc,#860] ; [0x810fa0] = 0x8801500
        0x00810c44:    4602        .F      MOV      r2,r0
        0x00810c46:    3198        .1      ADDS     r1,r1,#0x98
        0x00810c48:    4628        (F      MOV      r0,r5
        0x00810c4a:    6a63        cj      LDR      r3,[r4,#0x24]
        0x00810c4c:    e000        ..      B        0x810c50 ; tuya_ota_file_info_req + 1236
        0x00810c4e:    e001        ..      B        0x810c54 ; tuya_ota_file_info_req + 1240
        0x00810c50:    f7f6df05    ....    BL       log_buffer ; 0x7a5e
        0x00810c54:    2101        .!      MOVS     r1,#1
;;;426    
;;;427        }
;;;428        payload_len = 26;
        0x00810c56:    201a        .       MOVS     r0,#0x1a
;;;429    
;;;430        res_data.type =  TUYA_BLE_OTA_FILE_INFO;
        0x00810c58:    f88d1028    ..(.    STRB     r1,[sp,#0x28]
;;;431        res_data.data_len = payload_len;
        0x00810c5c:    f8ad002a    ..*.    STRH     r0,[sp,#0x2a]
;;;432        res_data.p_data = p_buf;
        0x00810c60:    a801        ..      ADD      r0,sp,#4
;;;433    
;;;434        if(tuya_ble_ota_response(&res_data) != TUYA_BLE_SUCCESS)
        0x00810c62:    900b        ..      STR      r0,[sp,#0x2c]
        0x00810c64:    a80a        ..      ADD      r0,sp,#0x28
        0x00810c66:    f001fa33    ..3.    BL       tuya_ble_ota_response ; 0x8120d0
        0x00810c6a:    2800        .(      CMP      r0,#0
        0x00810c6c:    f43fad9e    ?...    BEQ      0x8107ac ; tuya_ota_file_info_req + 48
;;;435        {
;;;436            TUYA_BLE_LOG_ERROR("tuya_ota_file_info_response failed.");
        0x00810c70:    a0f6        ..      ADR      r0,{pc}+0x3dc ; 0x81104c
        0x00810c72:    f009ff9a    ....    BL       get_args ; 0x81abaa
        0x00810c76:    49ca        .I      LDR      r1,[pc,#808] ; [0x810fa0] = 0x8801500
        0x00810c78:    4602        .F      MOV      r2,r0
        0x00810c7a:    31d0        .1      ADDS     r1,r1,#0xd0
        0x00810c7c:    4899        .H      LDR      r0,[pc,#612] ; [0x810ee4] = 0x21103002
        0x00810c7e:    f7f6deee    ....    BL       log_buffer ; 0x7a5e
;;;437        }
;;;438    
;;;439    }
        0x00810c82:    e593        ..      B        0x8107ac ; tuya_ota_file_info_req + 48
    tuya_ota_offset_req
;;;440    
;;;441    
;;;442    static void tuya_ota_offset_req(uint8_t*recv_data,uint32_t recv_len)
;;;443    {
        0x00810c84:    e92d41ff    -..A    PUSH     {r0-r8,lr}
        0x00810c88:    4efd        .N      LDR      r6,[pc,#1012] ; [0x811080] = 0x208668
        0x00810c8a:    78b1        .x      LDRB     r1,[r6,#2]
        0x00810c8c:    4f95        .O      LDR      r7,[pc,#596] ; [0x810ee4] = 0x21103002
        0x00810c8e:    2902        .)      CMP      r1,#2
;;; sample\tuya_ble_app\tuya_ble_app_ota.c (443)
        0x00810c90:    d00a        ..      BEQ      0x810ca8 ; tuya_ota_offset_req + 36
;;;444        uint8_t p_buf[5];
;;;445        uint8_t payload_len = 0;
;;;446        uint8_t encry_mode = 0;
;;;447        uint32_t offset = 0,offset_temp = 0;
;;;448        tuya_ble_ota_response_t res_data;
;;;449    
;;;450        if(tuya_ota_status!=TUYA_OTA_STATUS_FILE_INFO)
;;;451        {
;;;452            TUYA_BLE_LOG_ERROR("current ota status is not TUYA_OTA_STATUS_FILE_INFO  and is : %d !",tuya_ota_status);
        0x00810c92:    48fc        .H      LDR      r0,[pc,#1008] ; [0x811084] = 0x81c9e0
        0x00810c94:    f009ff89    ....    BL       get_args ; 0x81abaa
        0x00810c98:    78b3        .x      LDRB     r3,[r6,#2]
        0x00810c9a:    4602        .F      MOV      r2,r0
        0x00810c9c:    49fa        .I      LDR      r1,[pc,#1000] ; [0x811088] = 0x8801604
        0x00810c9e:    4638        8F      MOV      r0,r7
        0x00810ca0:    f7f6dedd    ....    BL       log_buffer ; 0x7a5e
        0x00810ca4:    e8bd81ff    ....    POP      {r0-r8,pc}
;;;453            return;
;;;454        }
;;;455    
;;;456        offset  = recv_data[1]<<24;
        0x00810ca8:    7841        Ax      LDRB     r1,[r0,#1]
        0x00810caa:    7882        .x      LDRB     r2,[r0,#2]
        0x00810cac:    0609        ..      LSLS     r1,r1,#24
;;;457        offset += recv_data[2]<<16;
        0x00810cae:    eb014102    ...A    ADD      r1,r1,r2,LSL #16
;;;458        offset += recv_data[3]<<8;
        0x00810cb2:    78c2        .x      LDRB     r2,[r0,#3]
        0x00810cb4:    7900        .y      LDRB     r0,[r0,#4]
        0x00810cb6:    4c9c        .L      LDR      r4,[pc,#624] ; [0x810f28] = 0x2087c8
        0x00810cb8:    eb012102    ...!    ADD      r1,r1,r2,LSL #8
;;;459        offset += recv_data[4];
        0x00810cbc:    42c8        .B      CMN      r0,r1
        0x00810cbe:    f04f0500    O...    MOV      r5,#0
;;;460    
;;;461        if((offset==0)&&(dfu_settings.progress.firmware_image_offset_last!=0))
        0x00810cc2:    f1a40450    ..P.    SUB      r4,r4,#0x50
        0x00810cc6:    d106        ..      BNE      0x810cd6 ; tuya_ota_offset_req + 82
        0x00810cc8:    6aa0        .j      LDR      r0,[r4,#0x28]
        0x00810cca:    b350        P.      CBZ      r0,0x810d22 ; tuya_ota_offset_req + 158
;;;462        {
;;;463            dfu_settings.progress.firmware_image_crc_last = 0;
;;;464            dfu_settings.progress.firmware_image_offset_last = 0;
        0x00810ccc:    62e5        .b      STR      r5,[r4,#0x2c]
;;;465            dfu_settings.write_offset = dfu_settings.progress.firmware_image_offset_last;
        0x00810cce:    62a5        .b      STR      r5,[r4,#0x28]
;;;466            dfu_settings_write();
        0x00810cd0:    6265        eb      STR      r5,[r4,#0x24]
        0x00810cd2:    f000fbad    ....    BL       dfu_settings_write ; 0x811430
;;;467        }
;;;468    
;;;469        if(dfu_settings.progress.firmware_image_offset_last>0)
        0x00810cd6:    6aa0        .j      LDR      r0,[r4,#0x28]
        0x00810cd8:    b318        ..      CBZ      r0,0x810d22 ; tuya_ota_offset_req + 158
;;;470        {
;;;471            offset_temp = dfu_settings.progress.firmware_image_offset_last % FMC_SEC_SECTION_LEN;
        0x00810cda:    0501        ..      LSLS     r1,r0,#20
        0x00810cdc:    0d09        ..      LSRS     r1,r1,#20
;;;472            if(offset_temp)
        0x00810cde:    d020         .      BEQ      0x810d22 ; tuya_ota_offset_req + 158
;;;473            {
;;;474                dfu_settings.progress.firmware_image_offset_last -= offset_temp;
        0x00810ce0:    1a40        @.      SUBS     r0,r0,r1
;;;475                if(dfu_settings.progress.firmware_image_offset_last>0)
        0x00810ce2:    62a0        .b      STR      r0,[r4,#0x28]
        0x00810ce4:    d004        ..      BEQ      0x810cf0 ; tuya_ota_offset_req + 108
;;;476                {
;;;477                    file_crc_check_in_flash(dfu_settings.progress.firmware_image_offset_last,&dfu_settings.progress.firmware_image_crc_last);
        0x00810ce6:    4990        .I      LDR      r1,[pc,#576] ; [0x810f28] = 0x2087c8
        0x00810ce8:    3924        $9      SUBS     r1,r1,#0x24
        0x00810cea:    f7fffca9    ....    BL       file_crc_check_in_flash ; 0x810640
        0x00810cee:    e000        ..      B        0x810cf2 ; tuya_ota_offset_req + 110
;;;478                }
;;;479                else
;;;480                {
;;;481                    dfu_settings.progress.firmware_image_crc_last = 0;
        0x00810cf0:    62e5        .b      STR      r5,[r4,#0x2c]
;;;482                }
;;;483                TUYA_BLE_LOG_DEBUG("tuya_ota_offset_req new firmware_image_offset_last : 0x%04x",dfu_settings.progress.firmware_image_offset_last);
        0x00810cf2:    48e6        .H      LDR      r0,[pc,#920] ; [0x81108c] = 0x81ccbc
        0x00810cf4:    f009ff59    ..Y.    BL       get_args ; 0x81abaa
        0x00810cf8:    49e3        .I      LDR      r1,[pc,#908] ; [0x811088] = 0x8801604
        0x00810cfa:    4602        .F      MOV      r2,r0
        0x00810cfc:    3154        T1      ADDS     r1,r1,#0x54
        0x00810cfe:    4638        8F      MOV      r0,r7
        0x00810d00:    6aa3        .j      LDR      r3,[r4,#0x28]
        0x00810d02:    f7f6deac    ....    BL       log_buffer ; 0x7a5e
;;;484                TUYA_BLE_LOG_DEBUG("tuya_ota_offset_req new firmware_image_crc_last    : 0x%04x",dfu_settings.progress.firmware_image_crc_last);
        0x00810d06:    48e2        .H      LDR      r0,[pc,#904] ; [0x811090] = 0x81cc70
        0x00810d08:    f009ff4f    ..O.    BL       get_args ; 0x81abaa
        0x00810d0c:    49de        .I      LDR      r1,[pc,#888] ; [0x811088] = 0x8801604
        0x00810d0e:    4602        .F      MOV      r2,r0
        0x00810d10:    31a0        .1      ADDS     r1,r1,#0xa0
        0x00810d12:    4638        8F      MOV      r0,r7
        0x00810d14:    6ae3        .j      LDR      r3,[r4,#0x2c]
        0x00810d16:    f7f6dea2    ....    BL       log_buffer ; 0x7a5e
;;;485                dfu_settings.write_offset = dfu_settings.progress.firmware_image_offset_last;
        0x00810d1a:    6aa0        .j      LDR      r0,[r4,#0x28]
;;;486                dfu_settings_write();
        0x00810d1c:    6260        `b      STR      r0,[r4,#0x24]
        0x00810d1e:    f000fb87    ....    BL       dfu_settings_write ; 0x811430
;;;487            }
;;;488        }
;;;489        p_buf[0] = TUYA_OTA_TYPE;
        0x00810d22:    f88d5000    ...P    STRB     r5,[sp,#0]
;;;490        p_buf[1] = dfu_settings.progress.firmware_image_offset_last>>24;
        0x00810d26:    6aa0        .j      LDR      r0,[r4,#0x28]
        0x00810d28:    f88d0004    ....    STRB     r0,[sp,#4]
        0x00810d2c:    0e01        ..      LSRS     r1,r0,#24
        0x00810d2e:    f88d1001    ....    STRB     r1,[sp,#1]
;;;491        p_buf[2] = dfu_settings.progress.firmware_image_offset_last>>16;
        0x00810d32:    0c01        ..      LSRS     r1,r0,#16
        0x00810d34:    f88d1002    ....    STRB     r1,[sp,#2]
;;;492        p_buf[3] = dfu_settings.progress.firmware_image_offset_last>>8;
        0x00810d38:    0a01        ..      LSRS     r1,r0,#8
        0x00810d3a:    f88d1003    ....    STRB     r1,[sp,#3]
;;;493        p_buf[4] = (uint8_t)dfu_settings.progress.firmware_image_offset_last;
;;;494    
;;;495        tuya_ota_status = TUYA_OTA_STATUS_FILE_OFFSET;
        0x00810d3e:    2003        .       MOVS     r0,#3
        0x00810d40:    70b0        .p      STRB     r0,[r6,#2]
        0x00810d42:    2102        .!      MOVS     r1,#2
;;;496    
;;;497        payload_len = 5;
        0x00810d44:    2005        .       MOVS     r0,#5
;;;498    
;;;499        res_data.type =  TUYA_BLE_OTA_FILE_OFFSET_REQ;
        0x00810d46:    f88d1008    ....    STRB     r1,[sp,#8]
;;;500        res_data.data_len = payload_len;
        0x00810d4a:    f8ad000a    ....    STRH     r0,[sp,#0xa]
;;;501        res_data.p_data = p_buf;
        0x00810d4e:    f8cdd00c    ....    STR      sp,[sp,#0xc]
;;;502    
;;;503        if(tuya_ble_ota_response(&res_data) != TUYA_BLE_SUCCESS)
        0x00810d52:    a802        ..      ADD      r0,sp,#8
        0x00810d54:    f001f9bc    ....    BL       tuya_ble_ota_response ; 0x8120d0
        0x00810d58:    2800        .(      CMP      r0,#0
        0x00810d5a:    d0a3        ..      BEQ      0x810ca4 ; tuya_ota_offset_req + 32
;;;504        {
;;;505            TUYA_BLE_LOG_ERROR("tuya_ota_offset_response failed.");
        0x00810d5c:    a0cd        ..      ADR      r0,{pc}+0x338 ; 0x811094
        0x00810d5e:    f009ff24    ..$.    BL       get_args ; 0x81abaa
        0x00810d62:    49c9        .I      LDR      r1,[pc,#804] ; [0x811088] = 0x8801604
        0x00810d64:    4602        .F      MOV      r2,r0
        0x00810d66:    31ec        .1      ADDS     r1,r1,#0xec
        0x00810d68:    4638        8F      MOV      r0,r7
        0x00810d6a:    f7f6de78    ..x.    BL       log_buffer ; 0x7a5e
;;;506        }
;;;507    
;;;508    }
        0x00810d6e:    e799        ..      B        0x810ca4 ; tuya_ota_offset_req + 32
    tuya_ota_init_disconnect
;;;509    
;;;510    
;;;511    
;;;512    static void tuya_ota_data_req(uint8_t*recv_data,uint32_t recv_len)
;;;513    {
;;;514        uint8_t p_buf[2];
;;;515        uint8_t payload_len = 0;
;;;516        uint8_t state = 0;
;;;517        uint16_t data_length;
;;;518        uint8_t *p_value;
;;;519        // uint8_t * p_balloc_buf;
;;;520        tuya_ble_ota_response_t res_data;
;;;521        T_DFU_CTRL_POINT dfu_control_point;
;;;522    
;;;523        if((tuya_ota_status!=TUYA_OTA_STATUS_FILE_OFFSET)&&(tuya_ota_status!=TUYA_OTA_STATUS_FILE_DATA))
;;;524        {
;;;525            TUYA_BLE_LOG_ERROR("current ota status is not TUYA_OTA_STATUS_FILE_OFFSET  or TUYA_OTA_STATUS_FILE_DATA and is : %d !",tuya_ota_status);
;;;526            return;
;;;527        }
;;;528    
;;;529        state = 0;
;;;530    
;;;531        current_package = (recv_data[1]<<8)|recv_data[2];
;;;532        data_length = (recv_data[3]<<8)|recv_data[4];
;;;533    
;;;534        if((current_package!=(last_package+1))&&(current_package!=0))
;;;535        {
;;;536            TUYA_BLE_LOG_ERROR("ota received package number error.received package number : %d",current_package);
;;;537            state = 1;
;;;538            goto ota_data_response;
;;;539        }
;;;540        else  if(data_length>MAX_DFU_DATA_LEN)
;;;541        {
;;;542            TUYA_BLE_LOG_ERROR("ota received package data length error : %d",data_length);
;;;543            state = 5;
;;;544            goto ota_data_response;
;;;545        }
;;;546        else
;;;547        {
;;;548            if((current_package==0)&&(dfu_settings.write_offset=0))
;;;549            {
;;;550                p_value  = &recv_data[7];
;;;551                dfu_control_point.p.start_dfu.ic_type = (*p_value);
;;;552                p_value += 1;
;;;553                dfu_control_point.p.start_dfu.secure_version = (*p_value);
;;;554                p_value += 1;
;;;555                LE_ARRAY_TO_UINT16(dfu_control_point.p.start_dfu.ctrl_flag.value, p_value);
;;;556                p_value += 2;
;;;557                LE_ARRAY_TO_UINT16(dfu_control_point.p.start_dfu.signature, p_value);
;;;558                p_value += 2;
;;;559                LE_ARRAY_TO_UINT16(dfu_control_point.p.start_dfu.crc16, p_value);
;;;560                p_value += 2;
;;;561    
;;;562                LE_ARRAY_TO_UINT32(dfu_control_point.p.start_dfu.image_length, p_value);
;;;563    
;;;564                TUYA_BLE_LOG_DEBUG("DFU_OPCODE_START_DFU: ic_type=0x%x, secure_version=0x%x, ctrl_flag.value=0x%x, signature=0x%x,crc16=0x%04x, image_length=0x%x",
;;;565                                   dfu_control_point.p.start_dfu.ic_type,
;;;566                                   dfu_control_point.p.start_dfu.secure_version,
;;;567                                   dfu_control_point.p.start_dfu.ctrl_flag.value,
;;;568                                   dfu_control_point.p.start_dfu.signature,
;;;569                                   dfu_control_point.p.start_dfu.crc16,
;;;570                                   dfu_control_point.p.start_dfu.image_length
;;;571                                  );
;;;572                if (dfu_control_point.p.start_dfu.ic_type != 0x05 || dfu_control_point.p.start_dfu.signature != AppPatch  \
;;;573                        || (dfu_control_point.p.start_dfu.image_length+IMG_HEADER_SIZE) != dfu_settings.file_info.firmware_file_length)
;;;574                {
;;;575                    state = 4;
;;;576                    TUYA_BLE_LOG_ERROR("tuya_uart_ota_start_req_process error,status = %d ",state);
;;;577                    goto ota_data_response;
;;;578                }
;;;579    
;;;580            }
;;;581    
;;;582            if (dfu_settings.write_offset + ota_tmp_buf_used_size + data_length > dfu_settings.file_info.firmware_file_length)
;;;583            {
;;;584                TUYA_BLE_LOG_ERROR("dfu_service_handle_packet_req: p_dfu->cur_offset=%d, ota_temp_buf_used_size =%d, length= %d, image_total_length = %d ",
;;;585                                   dfu_settings.write_offset,
;;;586                                   ota_tmp_buf_used_size,
;;;587                                   data_length,
;;;588                                   dfu_settings.file_info.firmware_file_length
;;;589                                  );
;;;590                state = 2;
;;;591                TUYA_BLE_LOG_ERROR("DFU_LENGTH_ERROR");
;;;592                goto ota_data_response;
;;;593            }
;;;594            else
;;;595            {
;;;596                memcpy(TempBufferHead+ota_tmp_buf_used_size,recv_data+7,data_length);
;;;597                ota_tmp_buf_used_size += data_length;
;;;598    
;;;599                if (ota_tmp_buf_used_size == 2048 || dfu_settings.write_offset + ota_tmp_buf_used_size == dfu_settings.file_info.firmware_file_length)
;;;600                {
;;;601                    unlock_flash_all();
;;;602                    if (sil_dfu_update(AppPatch, dfu_settings.write_offset, ota_tmp_buf_used_size,(uint32_t *)TempBufferHead) == 0)
;;;603                    {
;;;604                        lock_flash();
;;;605                        if(dfu_settings.write_offset==0)
;;;606                        {
;;;607                            T_IMG_CTRL_HEADER_FORMAT *p_header = (T_IMG_CTRL_HEADER_FORMAT *) TempBufferHead;
;;;608                            p_header->ctrl_flag.flag_value.not_ready = 0;
;;;609                        }
;;;610                        dfu_settings.write_offset += ota_tmp_buf_used_size;
;;;611                        dfu_settings.progress.firmware_image_crc_last = crc32_compute(TempBufferHead, ota_tmp_buf_used_size, &dfu_settings.progress.firmware_image_crc_last);
;;;612                        dfu_settings.progress.firmware_image_offset_last += ota_tmp_buf_used_size;
;;;613    
;;;614                        if((current_package+1)%32==0)
;;;615                        {
;;;616                            dfu_settings_write();
;;;617                        }
;;;618    
;;;619                        if(dfu_settings.write_offset == dfu_settings.file_info.firmware_file_length)
;;;620                        {
;;;621                            //
;;;622                        }
;;;623                        ota_tmp_buf_used_size = 0;
;;;624                    }
;;;625                    else
;;;626                    {
;;;627                        lock_flash();
;;;628                        state = 2;
;;;629                        TUYA_BLE_LOG_ERROR("tuya_uart_ota_data_process error,status = %d ",state);
;;;630                        goto ota_data_response;
;;;631                    }
;;;632                }
;;;633    
;;;634            }
;;;635    
;;;636        }
;;;637    
;;;638    ota_data_response:
;;;639    
;;;640        p_buf[0] = TUYA_OTA_TYPE;
;;;641        p_buf[1] = state;
;;;642    
;;;643        tuya_ota_status = TUYA_OTA_STATUS_FILE_DATA;
;;;644    
;;;645        payload_len = 2;
;;;646    
;;;647        res_data.type =  TUYA_BLE_OTA_DATA;
;;;648        res_data.data_len = payload_len;
;;;649        res_data.p_data = p_buf;
;;;650    
;;;651        if(tuya_ble_ota_response(&res_data) != TUYA_BLE_SUCCESS)
;;;652        {
;;;653            TUYA_BLE_LOG_ERROR("tuya_ota_data_response failed.");
;;;654        }
;;;655    
;;;656        if(state!=0)//出错，恢复初始状态
;;;657        {
;;;658            TUYA_BLE_LOG_ERROR("ota error so free!");
;;;659            tuya_ota_status = TUYA_OTA_STATUS_NONE;
;;;660            tuya_ota_init_disconnect();
;;;661            //memset(&dfu_settings, 0, sizeof(dfu_settings_t));
;;;662            //dfu_settings_write();
;;;663        }
;;;664        else
;;;665        {
;;;666            last_package = current_package;
;;;667        }
;;;668    
;;;669    
;;;670    }
;;;671    
;;;672    
;;;673    static void on_data_write_request_sched(void)
;;;674    {
;;;675        uint8_t p_buf[2];
;;;676        uint8_t payload_len = 0;
;;;677        uint8_t state;
;;;678        bool check_result;
;;;679        tuya_ble_ota_response_t res_data;
;;;680        uint8_t old_bp_lv = 0x02;
;;;681    
;;;682        if (dfu_settings.progress.firmware_image_offset_last == dfu_settings.file_info.firmware_file_length)
;;;683        {
;;;684            TUYA_BLE_LOG_DEBUG("Whole firmware image received. Postvalidating.");
;;;685            /*
;;;686                    uint32_t crc_temp  = 0;
;;;687                    if(file_crc_check_in_flash(dfu_settings.progress.firmware_image_offset_last,&crc_temp)==0)
;;;688                    {
;;;689                        if(dfu_settings.progress.firmware_image_crc_last != crc_temp)
;;;690                        {
;;;691                            TUYA_BLE_LOG_WARNING("file crc check in flash diff from crc_last. crc_temp = 0x%04x,crc_last = 0x%04x",crc_temp,dfu_settings.progress.firmware_image_crc_last);
;;;692                            dfu_settings.progress.firmware_image_crc_last = crc_temp;
;;;693                        }
;;;694    
;;;695                    }
;;;696            */
;;;697    
;;;698            flstatus = flash_lock(FLASH_LOCK_USER_MODE_READ);//signal = os_lock();
;;;699            check_result = dfu_check_checksum(AppPatch);
;;;700            flash_unlock(FLASH_LOCK_USER_MODE_READ);//os_unlock(signal);
;;;701    
;;;702            TUYA_BLE_LOG_DEBUG("dfu_act_notify_valid, check_result:%d (1: Success, 0: Fail)", check_result);
;;;703    
;;;704            if (check_result)
;;;705            {
;;;706                memset(&dfu_settings, 0, sizeof(dfu_settings_t));
;;;707                dfu_settings_write();
;;;708                state = 0;
;;;709    
;;;710            }
;;;711            else
;;;712            {
;;;713                state = 2;
;;;714            }
;;;715    
;;;716        }
;;;717        else
;;;718        {
;;;719            state = 1;
;;;720        }
;;;721    
;;;722        p_buf[0] = TUYA_OTA_TYPE;
;;;723        p_buf[1] = state;
;;;724        tuya_ota_status = TUYA_OTA_STATUS_NONE;
;;;725        payload_len = 2;
;;;726        res_data.type =  TUYA_BLE_OTA_END;
;;;727        res_data.data_len = payload_len;
;;;728        res_data.p_data = p_buf;
;;;729    
;;;730        if(tuya_ble_ota_response(&res_data) != TUYA_BLE_SUCCESS)
;;;731        {
;;;732            TUYA_BLE_LOG_ERROR("tuya_ota_end_response failed.");
;;;733        }
;;;734    
;;;735        if(state==0)
;;;736        {
;;;737            //tuya_bsp_delay_ms(1000);
;;;738            TUYA_BLE_LOG_INFO("start reset~~~.");
;;;739            if (flash_sw_protect_unlock_by_addr_locked(0x800000, &old_bp_lv))
;;;740            {
;;;741                APP_PRINT_INFO1("Unlock success! old_bp_lv=%d", old_bp_lv);
;;;742            }
;;;743            os_delay(1000);
;;;744            //tuya_ble_gap_disconnect();
;;;745            WDG_SystemReset(RESET_ALL, DFU_SWITCH_TO_OTA);
;;;746        }
;;;747        else
;;;748        {
;;;749            TUYA_BLE_LOG_ERROR("ota crc error!");
;;;750            tuya_ota_status = TUYA_OTA_STATUS_NONE;
;;;751            //tuya_ota_init_disconnect();
;;;752            memset(&dfu_settings, 0, sizeof(dfu_settings_t));
;;;753            dfu_settings_write();
;;;754        }
;;;755    
;;;756    }
;;;757    
;;;758    
;;;759    
;;;760    static void tuya_ota_end_req(uint8_t*recv_data,uint32_t recv_len)
;;;761    {
;;;762        uint8_t p_buf[2];
;;;763        uint8_t payload_len = 0;
;;;764        uint8_t encry_mode = 0;
;;;765    
;;;766    
;;;767        if(tuya_ota_status==TUYA_OTA_STATUS_NONE)
;;;768        {
;;;769            TUYA_BLE_LOG_ERROR("current ota status is TUYA_OTA_STATUS_NONE!");
;;;770            return;
;;;771        }
;;;772    
;;;773        on_data_write_request_sched();
;;;774    
;;;775    }
;;;776    
;;;777    
;;;778    void tuya_ota_proc(uint16_t cmd,uint8_t*recv_data,uint32_t recv_len)
;;;779    {
;;;780        TUYA_BLE_LOG_DEBUG("ota cmd : 0x%04x , recv_len : %d",cmd,recv_len);
;;;781        switch(cmd)
;;;782        {
;;;783        case TUYA_BLE_OTA_REQ:
;;;784            tuya_ota_start_req(recv_data,recv_len);
;;;785            break;
;;;786        case TUYA_BLE_OTA_FILE_INFO:
;;;787            tuya_ota_file_info_req(recv_data,recv_len);
;;;788            break;
;;;789        case TUYA_BLE_OTA_FILE_OFFSET_REQ:
;;;790            tuya_ota_offset_req(recv_data,recv_len);
;;;791            break;
;;;792        case TUYA_BLE_OTA_DATA:
;;;793            tuya_ota_data_req(recv_data,recv_len);
;;;794            break;
;;;795        case TUYA_BLE_OTA_END:
;;;796            tuya_ota_end_req(recv_data,recv_len);
;;;797            break;
;;;798        default:
;;;799            break;
;;;800        }
;;;801    
;;;802    }
;;;803    
;;;804    void tuya_ota_status_set(tuya_ota_status_t status)
;;;805    {
;;;806        tuya_ota_status = status;
;;;807    }
;;;808    
;;;809    
;;;810    tuya_ota_status_t tuya_ota_status_get(void)
;;;811    {
;;;812        return tuya_ota_status;
;;;813    }
;;;814    
;;;815    uint8_t tuya_ota_init_disconnect(void)
;;;816    {
        0x00810d70:    b510        ..      PUSH     {r4,lr}
        0x00810d72:    4cc3        .L      LDR      r4,[pc,#780] ; [0x811080] = 0x208668
        0x00810d74:    78a0        .x      LDRB     r0,[r4,#2]
;;; sample\tuya_ble_app\tuya_ble_app_ota.c (816)
        0x00810d76:    2800        .(      CMP      r0,#0
        0x00810d78:    d005        ..      BEQ      0x810d86 ; tuya_ota_init_disconnect + 22
;;;817        if(tuya_ota_status != TUYA_OTA_STATUS_NONE)
;;;818        {
;;;819            dfu_settings_write();
        0x00810d7a:    f000fb59    ..Y.    BL       dfu_settings_write ; 0x811430
;;;820            tuya_ota_status = TUYA_OTA_STATUS_NONE;
        0x00810d7e:    2000        .       MOVS     r0,#0
        0x00810d80:    70a0        .p      STRB     r0,[r4,#2]
;;;821            current_package = 0;
        0x00810d82:    80e0        ..      STRH     r0,[r4,#6]
;;;822            last_package = 0;
        0x00810d84:    8120         .      STRH     r0,[r4,#8]
;;;823        }
;;;824    
;;;825    }
        0x00810d86:    bd10        ..      POP      {r4,pc}
    lock_flash
;;;826    
;;;827    
;;;828    bool unlock_flash_all(void)
;;;829    {
;;;830        prev_bp_lv = 0;
;;;831        APP_PRINT_INFO0("**********[Flash Set] Flash unlock ***********");
;;;832        if (FLASH_SUCCESS == flash_sw_protect_unlock_by_addr_locked((0x00800000), &prev_bp_lv))
;;;833        {
;;;834            APP_PRINT_INFO1("[Flash Set] Flash unlock address = 0x800000, prev_bp_lv = %d", prev_bp_lv);
;;;835            return true;
;;;836        }
;;;837        return false;
;;;838    }
;;;839    void lock_flash(void)
;;;840    {
;;;841        if (prev_bp_lv != 0xfe)
        0x00810d88:    48ce        .H      LDR      r0,[pc,#824] ; [0x8110c4] = 0x20812c
        0x00810d8a:    7800        .x      LDRB     r0,[r0,#0]
        0x00810d8c:    28fe        .(      CMP      r0,#0xfe
;;; sample\tuya_ble_app\tuya_ble_app_ota.c (840)
        0x00810d8e:    d001        ..      BEQ      0x810d94 ; lock_flash + 12
;;;841        if (prev_bp_lv != 0xfe)
;;;842        {
;;;843            flash_set_block_protect_locked(prev_bp_lv);
        0x00810d90:    f00abdce    ....    B.W      flash_set_block_protect_locked ; 0x81b930
;;;844        }
;;;845    }
        0x00810d94:    4770        pG      BX       lr
    sil_dfu_update
;;;846    DATA_RAM_FUNCTION bool app_flash_wait_busy(void)
;;;847    {
;;;848        uint8_t status = 0;
;;;849        uint32_t ctr = 0;
;;;850        bool ret;
;;;851    
;;;852        while (ctr++ <= 0x100000)
;;;853        {
;;;854            ret = flash_cmd_rx(0x05, 1, &status);
;;;855    
;;;856    //        DFU_PRINT_INFO2("ret is %x,status is %x", ret, status);
;;;857            if (!ret)
;;;858            {
;;;859                goto wait_busy_fail;
;;;860            }
;;;861    
;;;862            if (!(status & BIT_STATUS_WIP))
;;;863            {
;;;864                return true;
;;;865            }
;;;866    //        DFU_PRINT_INFO1("CNT is %x", ctr);
;;;867        }
;;;868    
;;;869    wait_busy_fail:
;;;870        return false;
;;;871    }
;;;872    
;;;873    DATA_RAM_FUNCTION bool app_flash_cmd_tx(uint8_t cmd, uint8_t data_len, uint8_t *data_buf)
;;;874    {
;;;875        bool retval = true;
;;;876        DFU_PRINT_INFO0("app_flash_cmd_tx");
;;;877        uint32_t ctrlr0 = SPIC->ctrlr0;
;;;878        uint32_t addr_len = SPIC->addr_length;
;;;879    
;;;880        spic_enable(DISABLE);
;;;881        spic_clr_multi_ch();
;;;882        spic_set_tx_mode();
;;;883    
;;;884        SPIC->addr_length = data_len;
;;;885    
;;;886        spic_set_dr(DATA_BYTE, cmd);
;;;887    
;;;888        while (data_len--)
;;;889        {
;;;890            spic_set_dr(DATA_BYTE, *data_buf++);
;;;891        }
;;;892    
;;;893        spic_enable(ENABLE);
;;;894    
;;;895        if (!spic_wait_busy())
;;;896        {
;;;897            retval = false;
;;;898        }
;;;899    
;;;900        spic_enable(DISABLE);
;;;901        DFU_PRINT_INFO1("app_flash_wait_busy ..%x", retval);
;;;902        if (retval == true && !app_flash_wait_busy())
;;;903        {
;;;904            retval = false;
;;;905        }
;;;906    
;;;907    
;;;908        //restore ctrl0 and addr_len register
;;;909        SPIC->ctrlr0 = ctrlr0;
;;;910        SPIC->addr_length = addr_len;
;;;911    
;;;912        return retval;
;;;913    }
;;;914    /**
;;;915     * @brief erase a sector of the flash.
;;;916     *
;;;917     * @param  addr          flash addr in sector to be erase.
;;;918     * @return  0 if erase successfully, error line number otherwise
;;;919    */
;;;920    DATA_RAM_FUNCTION uint32_t flash_erase_sector(uint32_t addr)
;;;921    {
;;;922    
;;;923        static uint8_t address[3];
;;;924        DFU_PRINT_INFO1("==> flash_erase_sector :%x \r\n", addr);
;;;925        address[0] = (addr >> 16) & 0xff;
;;;926        address[1] = (addr >> 8) & 0xff;
;;;927        address[2] = addr & 0xff;
;;;928    
;;;929        flstatus = flash_lock(FLASH_LOCK_USER_MODE_ERASE);//signal = os_lock();
;;;930        flash_write_enable();
;;;931        app_flash_cmd_tx(0x20, 3, address);
;;;932        flash_unlock(FLASH_LOCK_USER_MODE_ERASE);//os_unlock(signal);
;;;933        return 0;
;;;934    }
;;;935    /**
;;;936     * @brief  write specified image data with specified length to flash
;;;937     * @param  signature          signature to identify FW.
;;;938     * @param  offset             offset of the image.
;;;939     * @param  length             length of data.
;;;940     * @param  p_void             pointer to data.
;;;941     * @return 0 if write FW image successfully, error line number otherwise
;;;942    */
;;;943    uint32_t sil_dfu_update(uint16_t signature, uint32_t offset, uint32_t length,
;;;944                            uint32_t/*void*/ *p_void)
;;;945    {
        0x00810d96:    e92d5ffc    -.._    PUSH     {r2-r12,lr}
        0x00810d9a:    461c        .F      MOV      r4,r3
        0x00810d9c:    f8dfb32c    ..,.    LDR      r11,[pc,#812] ; [0x8110cc] = 0x21103102
        0x00810da0:    460d        .F      MOV      r5,r1
        0x00810da2:    4681        .F      MOV      r9,r0
        0x00810da4:    4690        .F      MOV      r8,r2
        0x00810da6:    4613        .F      MOV      r3,r2
;;;946        uint32_t result = 0;
        0x00810da8:    2600        .&      MOVS     r6,#0
;;;947        uint32_t dfu_base_addr;
;;;948        uint32_t start_addr;
;;;949        uint32_t s_val;
;;;950    
;;;951        DFU_PRINT_INFO1("==> dfu_update length:%d \r\n", length);
        0x00810daa:    2201        ."      MOVS     r2,#1
        0x00810dac:    49c6        .I      LDR      r1,[pc,#792] ; [0x8110c8] = 0x8801c6c
        0x00810dae:    4658        XF      MOV      r0,r11
        0x00810db0:    f7f6de55    ..U.    BL       log_buffer ; 0x7a5e
;;;952    
;;;953        if (length % 4)
        0x00810db4:    ea5f7088    _..p    LSLS     r0,r8,#30
        0x00810db8:    d002        ..      BEQ      0x810dc0 ; sil_dfu_update + 42
;;;954        {
;;;955            result = __LINE__;
        0x00810dba:    f24036bb    @..6    MOV      r6,#0x3bb
;;;956            goto L_Return;
        0x00810dbe:    e057        W.      B        0x810e70 ; sil_dfu_update + 218
;;;957        }
;;;958    
;;;959        if (p_void == 0)
        0x00810dc0:    b17c        |.      CBZ      r4,0x810de2 ; sil_dfu_update + 76
        0x00810dc2:    4648        HF      MOV      r0,r9
        0x00810dc4:    f7fbdd5c    ..\.    BL       get_temp_ota_bank_addr_by_img_id ; 0xc880
        0x00810dc8:    49bf        .I      LDR      r1,[pc,#764] ; [0x8110c8] = 0x8801c6c
        0x00810dca:    4607        .F      MOV      r7,r0
        0x00810dcc:    4603        .F      MOV      r3,r0
        0x00810dce:    2201        ."      MOVS     r2,#1
        0x00810dd0:    3120         1      ADDS     r1,r1,#0x20
        0x00810dd2:    4658        XF      MOV      r0,r11
        0x00810dd4:    f7f6de43    ..C.    BL       log_buffer ; 0x7a5e
        0x00810dd8:    b137        7.      CBZ      r7,0x810de8 ; sil_dfu_update + 82
        0x00810dda:    f8dfa108    ....    LDR      r10,[pc,#264] ; [0x810ee4] = 0x21103002
        0x00810dde:    b135        5.      CBZ      r5,0x810dee ; sil_dfu_update + 88
        0x00810de0:    e012        ..      B        0x810e08 ; sil_dfu_update + 114
;;;960        {
;;;961            result = __LINE__;
        0x00810de2:    f24036c1    @..6    MOV      r6,#0x3c1
;;;962            goto L_Return;
        0x00810de6:    e043        C.      B        0x810e70 ; sil_dfu_update + 218
;;;963        }
;;;964        /*get back up area address*/
;;;965        dfu_base_addr = get_temp_ota_bank_addr_by_img_id((T_IMG_ID)signature);
;;;966        DFU_PRINT_INFO1("==> dfu_update dfu_base_addr:0x%x \r\n", dfu_base_addr);
;;;967        if (dfu_base_addr == 0)
;;;968        {
;;;969            result = __LINE__;
        0x00810de8:    f24036c9    @..6    MOV      r6,#0x3c9
;;;970            goto L_Return;
        0x00810dec:    e040        @.      B        0x810e70 ; sil_dfu_update + 218
;;;971        }
;;;972    //      dfu_base_addr&= 0xffffff;
;;;973        /*if it's start_packet*/
;;;974        if (offset == 0)
;;;975        {
;;;976            /*ASSERT(length>=sizeof(image_header_t));*/
;;;977            T_IMG_CTRL_HEADER_FORMAT *p_header = (T_IMG_CTRL_HEADER_FORMAT *) p_void;
;;;978            p_header->ctrl_flag.flag_value.not_ready = 0x1; /*make sure image is not ready, will use it later*/
        0x00810dee:    8860        `.      LDRH     r0,[r4,#2]
        0x00810df0:    49b5        .I      LDR      r1,[pc,#724] ; [0x8110c8] = 0x8801c6c
        0x00810df2:    f0400080    @...    ORR      r0,r0,#0x80
        0x00810df6:    8060        `.      STRH     r0,[r4,#2]
;;;979            APP_PRINT_INFO3("dfu_update New Image Header:0x%08x, Signature:0x%08x, dfu_base_addr:0x%08x",
        0x00810df8:    e9cd9700    ....    STRD     r9,r7,[sp,#0]
        0x00810dfc:    4643        CF      MOV      r3,r8
        0x00810dfe:    2203        ."      MOVS     r2,#3
        0x00810e00:    3148        H1      ADDS     r1,r1,#0x48
        0x00810e02:    4650        PF      MOV      r0,r10
        0x00810e04:    f7f6de2b    ..+.    BL       log_buffer ; 0x7a5e
        0x00810e08:    f8df9274    ..t.    LDR      r9,[pc,#628] ; [0x811080] = 0x208668
;;;980                            length, signature, dfu_base_addr);
;;;981        }
;;;982    
;;;983        if ((offset % FMC_SEC_SECTION_LEN) == 0)   //new page starts
        0x00810e0c:    0528        (.      LSLS     r0,r5,#20
        0x00810e0e:    d012        ..      BEQ      0x810e36 ; sil_dfu_update + 160
;;;984        {
;;;985            erase_error = flash_erase_sector(dfu_base_addr + offset);
;;;986        }
;;;987        else  // cross page
;;;988        {
;;;989            if ((offset / FMC_SEC_SECTION_LEN) != ((offset + length) / FMC_SEC_SECTION_LEN))
        0x00810e10:    0b29        ).      LSRS     r1,r5,#12
        0x00810e12:    eb050008    ....    ADD      r0,r5,r8
        0x00810e16:    ebb13f10    ...?    CMP      r1,r0,LSR #12
        0x00810e1a:    d008        ..      BEQ      0x810e2e ; sil_dfu_update + 152
;;;990            {
;;;991                erase_error = flash_erase_sector((dfu_base_addr + offset + length) & ~(FMC_SEC_SECTION_LEN - 1));
        0x00810e1c:    1979        y.      ADDS     r1,r7,r5
        0x00810e1e:    eb010008    ....    ADD      r0,r1,r8
        0x00810e22:    f36f000b    o...    BFC      r0,#0,#12
        0x00810e26:    f5f7f112    ....    BL       flash_erase_sector ; 0x20804e
        0x00810e2a:    f8890000    ....    STRB     r0,[r9,#0]
;;;992            }
;;;993        }
;;;994        start_addr = dfu_base_addr + offset;
        0x00810e2e:    eb070905    ....    ADD      r9,r7,r5
;;;995        // APP_PRINT_INFO3("start_addr:0x%08x, *p_void:0x%08x, *p_void:0x%08x",start_addr, *p_void, *(p_void + 1));
;;;996        for (int i = 0; i < length; i = i + 4)
        0x00810e32:    2500        .%      MOVS     r5,#0
        0x00810e34:    e01a        ..      B        0x810e6c ; sil_dfu_update + 214
        0x00810e36:    1978        x.      ADDS     r0,r7,r5
        0x00810e38:    e7f5        ..      B        0x810e26 ; sil_dfu_update + 144
;;;997        {
;;;998            flash_auto_write(start_addr + i, *(uint32_t *)p_void);
        0x00810e3a:    eb090005    ....    ADD      r0,r9,r5
        0x00810e3e:    4607        .F      MOV      r7,r0
        0x00810e40:    6821        !h      LDR      r1,[r4,#0]
        0x00810e42:    f7f9db43    ..C.    BL       flash_auto_write ; 0xa4cc
;;;999    
;;;1000           s_val = flash_auto_read(start_addr + i | FLASH_OFFSET_TO_NO_CACHE);
        0x00810e46:    f0477080    G..p    ORR      r0,r7,#0x1000000
;;;1001   //        if(flash_auto_read_locked(start_addr + i | FLASH_OFFSET_TO_NO_CACHE,&s_val))
;;;1002   //        {
;;;1003   //            result = __LINE__;
;;;1004   //            goto L_Return;
;;;1005   //        }
;;;1006           if (s_val != *(uint32_t *)p_void)
        0x00810e4a:    6803        .h      LDR      r3,[r0,#0]
        0x00810e4c:    6820         h      LDR      r0,[r4,#0]
        0x00810e4e:    4298        .B      CMP      r0,r3
        0x00810e50:    d00a        ..      BEQ      0x810e68 ; sil_dfu_update + 210
;;;1007           {
;;;1008               APP_PRINT_INFO3("s_val:0x%08x, *p_void:0x%08x, i:0x%08x",
        0x00810e52:    e9cd0500    ....    STRD     r0,r5,[sp,#0]
        0x00810e56:    499c        .I      LDR      r1,[pc,#624] ; [0x8110c8] = 0x8801c6c
        0x00810e58:    2203        ."      MOVS     r2,#3
        0x00810e5a:    3198        .1      ADDS     r1,r1,#0x98
        0x00810e5c:    4650        PF      MOV      r0,r10
        0x00810e5e:    f7f6ddfe    ....    BL       log_buffer ; 0x7a5e
;;;1009                               s_val, *(uint32_t *)p_void, i);
;;;1010               result = __LINE__;
        0x00810e62:    f24036f2    @..6    MOV      r6,#0x3f2
;;;1011               goto L_Return;
        0x00810e66:    e003        ..      B        0x810e70 ; sil_dfu_update + 218
        0x00810e68:    1d24        $.      ADDS     r4,r4,#4
        0x00810e6a:    1d2d        -.      ADDS     r5,r5,#4
        0x00810e6c:    4545        EE      CMP      r5,r8
        0x00810e6e:    d3e4        ..      BCC      0x810e3a ; sil_dfu_update + 164
;;;1012           }
;;;1013           else
;;;1014           {
;;;1015               p_void++;
;;;1016           }
;;;1017       }
;;;1018   
;;;1019   L_Return:
;;;1020   
;;;1021       DFU_PRINT_INFO1("<==dfu_update result:%d \r\n", result);
        0x00810e70:    4995        .I      LDR      r1,[pc,#596] ; [0x8110c8] = 0x8801c6c
        0x00810e72:    4633        3F      MOV      r3,r6
        0x00810e74:    2201        ."      MOVS     r2,#1
        0x00810e76:    31c4        .1      ADDS     r1,r1,#0xc4
        0x00810e78:    4658        XF      MOV      r0,r11
        0x00810e7a:    f7f6ddf0    ....    BL       log_buffer ; 0x7a5e
;;;1022       return result;
        0x00810e7e:    4630        0F      MOV      r0,r6
;;;1023   }
        0x00810e80:    e8bd9ffc    ....    POP      {r2-r12,pc}
    unlock_flash_all
;;; sample\tuya_ble_app\tuya_ble_app_ota.c (829)
        0x00810e84:    b570        p.      PUSH     {r4-r6,lr}
;;;830        prev_bp_lv = 0;
        0x00810e86:    4c8f        .L      LDR      r4,[pc,#572] ; [0x8110c4] = 0x20812c
        0x00810e88:    2000        .       MOVS     r0,#0
        0x00810e8a:    498f        .I      LDR      r1,[pc,#572] ; [0x8110c8] = 0x8801c6c
        0x00810e8c:    4d15        .M      LDR      r5,[pc,#84] ; [0x810ee4] = 0x21103002
        0x00810e8e:    7020         p      STRB     r0,[r4,#0]
;;;831        APP_PRINT_INFO0("**********[Flash Set] Flash unlock ***********");
        0x00810e90:    4602        .F      MOV      r2,r0
        0x00810e92:    39c8        .9      SUBS     r1,r1,#0xc8
        0x00810e94:    4628        (F      MOV      r0,r5
        0x00810e96:    f7f6dde2    ....    BL       log_buffer ; 0x7a5e
;;;832        if (FLASH_SUCCESS == flash_sw_protect_unlock_by_addr_locked((0x00800000), &prev_bp_lv))
        0x00810e9a:    4621        !F      MOV      r1,r4
        0x00810e9c:    05a8        ..      LSLS     r0,r5,#22
        0x00810e9e:    f00afd5a    ..Z.    BL       flash_sw_protect_unlock_by_addr_locked ; 0x81b956
        0x00810ea2:    2800        .(      CMP      r0,#0
        0x00810ea4:    d007        ..      BEQ      0x810eb6 ; unlock_flash_all + 50
;;;833        {
;;;834            APP_PRINT_INFO1("[Flash Set] Flash unlock address = 0x800000, prev_bp_lv = %d", prev_bp_lv);
        0x00810ea6:    4988        .I      LDR      r1,[pc,#544] ; [0x8110c8] = 0x8801c6c
        0x00810ea8:    7823        #x      LDRB     r3,[r4,#0]
        0x00810eaa:    2201        ."      MOVS     r2,#1
        0x00810eac:    3994        .9      SUBS     r1,r1,#0x94
        0x00810eae:    4628        (F      MOV      r0,r5
        0x00810eb0:    f7f6ddd5    ....    BL       log_buffer ; 0x7a5e
;;;835            return true;
        0x00810eb4:    2001        .       MOVS     r0,#1
;;;836        }
;;;837        return false;
;;;838    }
        0x00810eb6:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x00810eb8:    205d455b    [E]     DCD    542983515
        0x00810ebc:    41595554    TUYA    DCD    1096373588
        0x00810ec0:    454c425f    _BLE    DCD    1162625631
        0x00810ec4:    746f203a    : ot    DCD    1953439802
        0x00810ec8:    69662061    a fi    DCD    1768300641
        0x00810ecc:    7620656c    le v    DCD    1981834604
        0x00810ed0:    69737265    ersi    DCD    1769173605
        0x00810ed4:    65206e6f    on e    DCD    1696624239
        0x00810ed8:    726f7272    rror    DCD    1919906418
        0x00810edc:    00002120     !..    DCD    8480
        0x00810ee0:    088013f0    ....    DCD    142611440
        0x00810ee4:    21103002    .0.!    DCD    554708994
        0x00810ee8:    205d455b    [E]     DCD    542983515
        0x00810eec:    41595554    TUYA    DCD    1096373588
        0x00810ef0:    454c425f    _BLE    DCD    1162625631
        0x00810ef4:    746f203a    : ot    DCD    1953439802
        0x00810ef8:    69662061    a fi    DCD    1768300641
        0x00810efc:    6c20656c    le l    DCD    1814062444
        0x00810f00:    74676e65    engt    DCD    1952935525
        0x00810f04:    73692068    h is    DCD    1936269416
        0x00810f08:    67696220     big    DCD    1734959648
        0x00810f0c:    20726567    ger     DCD    544367975
        0x00810f10:    6e616874    than    DCD    1851877492
        0x00810f14:    76657220     rev    DCD    1986359840
        0x00810f18:    61707320     spa    DCD    1634759456
        0x00810f1c:    21206563    ce !    DCD    555771235
        0x00810f20:    00000000    ....    DCD    0
        0x00810f24:    0081cdc0    ....    DCD    8506816
        0x00810f28:    002087c8    .. .    DCD    2131912
        0x00810f2c:    205d445b    [D]     DCD    542983259
        0x00810f30:    41595554    TUYA    DCD    1096373588
        0x00810f34:    454c425f    _BLE    DCD    1162625631
        0x00810f38:    746f203a    : ot    DCD    1953439802
        0x00810f3c:    69662061    a fi    DCD    1768300641
        0x00810f40:    6c20656c    le l    DCD    1814062444
        0x00810f44:    74676e65    engt    DCD    1952935525
        0x00810f48:    3a202068    h  :    DCD    975183976
        0x00810f4c:    00642520     %d.    DCD    6563104
        0x00810f50:    205d445b    [D]     DCD    542983259
        0x00810f54:    41595554    TUYA    DCD    1096373588
        0x00810f58:    454c425f    _BLE    DCD    1162625631
        0x00810f5c:    746f203a    : ot    DCD    1953439802
        0x00810f60:    69662061    a fi    DCD    1768300641
        0x00810f64:    2020656c    le      DCD    538994028
        0x00810f68:    20637263    crc     DCD    543388259
        0x00810f6c:    3a202020       :    DCD    975183904
        0x00810f70:    25783020     0x%    DCD    628633632
        0x00810f74:    00783430    04x.    DCD    7877680
        0x00810f78:    205d445b    [D]     DCD    542983259
        0x00810f7c:    41595554    TUYA    DCD    1096373588
        0x00810f80:    454c425f    _BLE    DCD    1162625631
        0x00810f84:    746f203a    : ot    DCD    1953439802
        0x00810f88:    69662061    a fi    DCD    1768300641
        0x00810f8c:    7620656c    le v    DCD    1981834604
        0x00810f90:    69737265    ersi    DCD    1769173605
        0x00810f94:    3a206e6f    on :    DCD    975203951
        0x00810f98:    25783020     0x%    DCD    628633632
        0x00810f9c:    00783430    04x.    DCD    7877680
        0x00810fa0:    08801500    ....    DCD    142611712
        0x00810fa4:    205d445b    [D]     DCD    542983259
        0x00810fa8:    41595554    TUYA    DCD    1096373588
        0x00810fac:    454c425f    _BLE    DCD    1162625631
        0x00810fb0:    746f203a    : ot    DCD    1953439802
        0x00810fb4:    69662061    a fi    DCD    1768300641
        0x00810fb8:    61776d72    rmwa    DCD    1635216754
        0x00810fbc:    695f6572    re_i    DCD    1767859570
        0x00810fc0:    6567616d    mage    DCD    1701273965
        0x00810fc4:    66666f5f    _off    DCD    1717989215
        0x00810fc8:    5f746573    set_    DCD    1601463667
        0x00810fcc:    7473616c    last    DCD    1953718636
        0x00810fd0:    30203a20     : 0    DCD    807418400
        0x00810fd4:    34302578    x%04    DCD    875570552
        0x00810fd8:    00000078    x...    DCD    120
        0x00810fdc:    205d445b    [D]     DCD    542983259
        0x00810fe0:    41595554    TUYA    DCD    1096373588
        0x00810fe4:    454c425f    _BLE    DCD    1162625631
        0x00810fe8:    746f203a    : ot    DCD    1953439802
        0x00810fec:    69662061    a fi    DCD    1768300641
        0x00810ff0:    61776d72    rmwa    DCD    1635216754
        0x00810ff4:    695f6572    re_i    DCD    1767859570
        0x00810ff8:    6567616d    mage    DCD    1701273965
        0x00810ffc:    6372635f    _crc    DCD    1668440927
        0x00811000:    73616c5f    _las    DCD    1935764575
        0x00811004:    20202074    t       DCD    538976372
        0x00811008:    30203a20     : 0    DCD    807418400
        0x0081100c:    34302578    x%04    DCD    875570552
        0x00811010:    00000078    x...    DCD    120
        0x00811014:    205d445b    [D]     DCD    542983259
        0x00811018:    41595554    TUYA    DCD    1096373588
        0x0081101c:    454c425f    _BLE    DCD    1162625631
        0x00811020:    746f203a    : ot    DCD    1953439802
        0x00811024:    69662061    a fi    DCD    1768300641
        0x00811028:    61776d72    rmwa    DCD    1635216754
        0x0081102c:    20206572    re      DCD    538994034
        0x00811030:    69727720     wri    DCD    1769109280
        0x00811034:    6f206574    te o    DCD    1864394100
        0x00811038:    65736666    ffse    DCD    1702061670
        0x0081103c:    20202074    t       DCD    538976372
        0x00811040:    30203a20     : 0    DCD    807418400
        0x00811044:    34302578    x%04    DCD    875570552
        0x00811048:    00000078    x...    DCD    120
        0x0081104c:    205d455b    [E]     DCD    542983515
        0x00811050:    41595554    TUYA    DCD    1096373588
        0x00811054:    454c425f    _BLE    DCD    1162625631
        0x00811058:    7574203a    : tu    DCD    1970544698
        0x0081105c:    6f5f6179    ya_o    DCD    1868521849
        0x00811060:    665f6174    ta_f    DCD    1717526900
        0x00811064:    5f656c69    ile_    DCD    1600482409
        0x00811068:    6f666e69    info    DCD    1868983913
        0x0081106c:    7365725f    _res    DCD    1936028255
        0x00811070:    736e6f70    pons    DCD    1936617328
        0x00811074:    61662065    e fa    DCD    1634082917
        0x00811078:    64656c69    iled    DCD    1684368489
        0x0081107c:    0000002e    ....    DCD    46
        0x00811080:    00208668    h. .    DCD    2131560
        0x00811084:    0081c9e0    ....    DCD    8505824
        0x00811088:    08801604    ....    DCD    142611972
        0x0081108c:    0081ccbc    ....    DCD    8506556
        0x00811090:    0081cc70    p...    DCD    8506480
        0x00811094:    205d455b    [E]     DCD    542983515
        0x00811098:    41595554    TUYA    DCD    1096373588
        0x0081109c:    454c425f    _BLE    DCD    1162625631
        0x008110a0:    7574203a    : tu    DCD    1970544698
        0x008110a4:    6f5f6179    ya_o    DCD    1868521849
        0x008110a8:    6f5f6174    ta_o    DCD    1868521844
        0x008110ac:    65736666    ffse    DCD    1702061670
        0x008110b0:    65725f74    t_re    DCD    1701994356
        0x008110b4:    6e6f7073    spon    DCD    1852797043
        0x008110b8:    66206573    se f    DCD    1713399155
        0x008110bc:    656c6961    aile    DCD    1701603681
        0x008110c0:    00002e64    d...    DCD    11876
        0x008110c4:    0020812c    ,. .    DCD    2130220
        0x008110c8:    08801c6c    l...    DCD    142613612
        0x008110cc:    21103102    .1.!    DCD    554709250
    $t
    tuya_ota_data_req
        0x008110d0:    e92d43f0    -..C    PUSH     {r4-r9,lr}
        0x008110d4:    4efc        .N      LDR      r6,[pc,#1008] ; [0x8114c8] = 0x208668
;;; sample\tuya_ble_app\tuya_ble_app_ota.c (513)
        0x008110d6:    b087        ..      SUB      sp,sp,#0x1c
;;;514        uint8_t p_buf[2];
;;;515        uint8_t payload_len = 0;
;;;516        uint8_t state = 0;
        0x008110d8:    2400        .$      MOVS     r4,#0
;;;517        uint16_t data_length;
;;;518        uint8_t *p_value;
;;;519        // uint8_t * p_balloc_buf;
;;;520        tuya_ble_ota_response_t res_data;
;;;521        T_DFU_CTRL_POINT dfu_control_point;
;;;522    
;;;523        if((tuya_ota_status!=TUYA_OTA_STATUS_FILE_OFFSET)&&(tuya_ota_status!=TUYA_OTA_STATUS_FILE_DATA))
        0x008110da:    78b1        .x      LDRB     r1,[r6,#2]
        0x008110dc:    f8df93ec    ....    LDR      r9,[pc,#1004] ; [0x8114cc] = 0x21103002
        0x008110e0:    2903        .)      CMP      r1,#3
        0x008110e2:    d00e        ..      BEQ      0x811102 ; tuya_ota_data_req + 50
        0x008110e4:    78b1        .x      LDRB     r1,[r6,#2]
        0x008110e6:    2904        .)      CMP      r1,#4
        0x008110e8:    d00b        ..      BEQ      0x811102 ; tuya_ota_data_req + 50
;;;524        {
;;;525            TUYA_BLE_LOG_ERROR("current ota status is not TUYA_OTA_STATUS_FILE_OFFSET  or TUYA_OTA_STATUS_FILE_DATA and is : %d !",tuya_ota_status);
        0x008110ea:    48f9        .H      LDR      r0,[pc,#996] ; [0x8114d0] = 0x81ca84
        0x008110ec:    f009fd5d    ..].    BL       get_args ; 0x81abaa
        0x008110f0:    78b3        .x      LDRB     r3,[r6,#2]
        0x008110f2:    4602        .F      MOV      r2,r0
        0x008110f4:    49f7        .I      LDR      r1,[pc,#988] ; [0x8114d4] = 0x8801720
        0x008110f6:    4648        HF      MOV      r0,r9
        0x008110f8:    f7f6dcb1    ....    BL       log_buffer ; 0x7a5e
        0x008110fc:    b007        ..      ADD      sp,sp,#0x1c
        0x008110fe:    e8bd83f0    ....    POP      {r4-r9,pc}
;;;526            return;
;;;527        }
;;;528    
;;;529        state = 0;
;;;530    
;;;531        current_package = (recv_data[1]<<8)|recv_data[2];
        0x00811102:    f8b01001    ....    LDRH     r1,[r0,#1]
        0x00811106:    f04f0800    O...    MOV      r8,#0
        0x0081110a:    ba49        I.      REV16    r1,r1
        0x0081110c:    80f1        ..      STRH     r1,[r6,#6]
;;;532        data_length = (recv_data[3]<<8)|recv_data[4];
        0x0081110e:    f8b02003    ...     LDRH     r2,[r0,#3]
        0x00811112:    ba55        U.      REV16    r5,r2
;;;533    
;;;534        if((current_package!=(last_package+1))&&(current_package!=0))
        0x00811114:    8932        2.      LDRH     r2,[r6,#8]
        0x00811116:    1c52        R.      ADDS     r2,r2,#1
        0x00811118:    4291        .B      CMP      r1,r2
        0x0081111a:    d00c        ..      BEQ      0x811136 ; tuya_ota_data_req + 102
        0x0081111c:    b159        Y.      CBZ      r1,0x811136 ; tuya_ota_data_req + 102
;;;535        {
;;;536            TUYA_BLE_LOG_ERROR("ota received package number error.received package number : %d",current_package);
        0x0081111e:    48ee        .H      LDR      r0,[pc,#952] ; [0x8114d8] = 0x81cbc8
        0x00811120:    f009fd43    ..C.    BL       get_args ; 0x81abaa
        0x00811124:    49eb        .I      LDR      r1,[pc,#940] ; [0x8114d4] = 0x8801720
        0x00811126:    4602        .F      MOV      r2,r0
        0x00811128:    88f3        ..      LDRH     r3,[r6,#6]
        0x0081112a:    3170        p1      ADDS     r1,r1,#0x70
        0x0081112c:    4648        HF      MOV      r0,r9
        0x0081112e:    f7f6dc96    ....    BL       log_buffer ; 0x7a5e
;;;537            state = 1;
        0x00811132:    2401        .$      MOVS     r4,#1
;;;538            goto ota_data_response;
        0x00811134:    e060        `.      B        0x8111f8 ; tuya_ota_data_req + 296
;;;539        }
;;;540        else  if(data_length>MAX_DFU_DATA_LEN)
        0x00811136:    f5b57f00    ....    CMP      r5,#0x200
        0x0081113a:    d90b        ..      BLS      0x811154 ; tuya_ota_data_req + 132
;;;541        {
;;;542            TUYA_BLE_LOG_ERROR("ota received package data length error : %d",data_length);
        0x0081113c:    a0e7        ..      ADR      r0,{pc}+0x3a0 ; 0x8114dc
        0x0081113e:    f009fd34    ..4.    BL       get_args ; 0x81abaa
        0x00811142:    49e4        .I      LDR      r1,[pc,#912] ; [0x8114d4] = 0x8801720
        0x00811144:    4602        .F      MOV      r2,r0
        0x00811146:    462b        +F      MOV      r3,r5
        0x00811148:    31c0        .1      ADDS     r1,r1,#0xc0
        0x0081114a:    4648        HF      MOV      r0,r9
        0x0081114c:    f7f6dc87    ....    BL       log_buffer ; 0x7a5e
;;;543            state = 5;
        0x00811150:    2405        .$      MOVS     r4,#5
;;;544            goto ota_data_response;
        0x00811152:    e051        Q.      B        0x8111f8 ; tuya_ota_data_req + 296
;;;545        }
;;;546        else
;;;547        {
;;;548            if((current_package==0)&&(dfu_settings.write_offset=0))
        0x00811154:    4ff0        .O      LDR      r7,[pc,#960] ; [0x811518] = 0x208778
        0x00811156:    b909        ..      CBNZ     r1,0x81115c ; tuya_ota_data_req + 140
        0x00811158:    f8c78024    ..$.    STR      r8,[r7,#0x24]
;;;549            {
;;;550                p_value  = &recv_data[7];
;;;551                dfu_control_point.p.start_dfu.ic_type = (*p_value);
;;;552                p_value += 1;
;;;553                dfu_control_point.p.start_dfu.secure_version = (*p_value);
;;;554                p_value += 1;
;;;555                LE_ARRAY_TO_UINT16(dfu_control_point.p.start_dfu.ctrl_flag.value, p_value);
;;;556                p_value += 2;
;;;557                LE_ARRAY_TO_UINT16(dfu_control_point.p.start_dfu.signature, p_value);
;;;558                p_value += 2;
;;;559                LE_ARRAY_TO_UINT16(dfu_control_point.p.start_dfu.crc16, p_value);
;;;560                p_value += 2;
;;;561    
;;;562                LE_ARRAY_TO_UINT32(dfu_control_point.p.start_dfu.image_length, p_value);
;;;563    
;;;564                TUYA_BLE_LOG_DEBUG("DFU_OPCODE_START_DFU: ic_type=0x%x, secure_version=0x%x, ctrl_flag.value=0x%x, signature=0x%x,crc16=0x%04x, image_length=0x%x",
;;;565                                   dfu_control_point.p.start_dfu.ic_type,
;;;566                                   dfu_control_point.p.start_dfu.secure_version,
;;;567                                   dfu_control_point.p.start_dfu.ctrl_flag.value,
;;;568                                   dfu_control_point.p.start_dfu.signature,
;;;569                                   dfu_control_point.p.start_dfu.crc16,
;;;570                                   dfu_control_point.p.start_dfu.image_length
;;;571                                  );
;;;572                if (dfu_control_point.p.start_dfu.ic_type != 0x05 || dfu_control_point.p.start_dfu.signature != AppPatch  \
;;;573                        || (dfu_control_point.p.start_dfu.image_length+IMG_HEADER_SIZE) != dfu_settings.file_info.firmware_file_length)
;;;574                {
;;;575                    state = 4;
;;;576                    TUYA_BLE_LOG_ERROR("tuya_uart_ota_start_req_process error,status = %d ",state);
;;;577                    goto ota_data_response;
;;;578                }
;;;579    
;;;580            }
;;;581    
;;;582            if (dfu_settings.write_offset + ota_tmp_buf_used_size + data_length > dfu_settings.file_info.firmware_file_length)
        0x0081115c:    88b1        ..      LDRH     r1,[r6,#4]
        0x0081115e:    6a7a        zj      LDR      r2,[r7,#0x24]
        0x00811160:    194b        K.      ADDS     r3,r1,r5
        0x00811162:    441a        .D      ADD      r2,r2,r3
        0x00811164:    68fb        .h      LDR      r3,[r7,#0xc]
        0x00811166:    429a        .B      CMP      r2,r3
        0x00811168:    d919        ..      BLS      0x81119e ; tuya_ota_data_req + 206
;;;583            {
;;;584                TUYA_BLE_LOG_ERROR("dfu_service_handle_packet_req: p_dfu->cur_offset=%d, ota_temp_buf_used_size =%d, length= %d, image_total_length = %d ",
        0x0081116a:    48ec        .H      LDR      r0,[pc,#944] ; [0x81151c] = 0x81c880
        0x0081116c:    f009fd1d    ....    BL       get_args ; 0x81abaa
        0x00811170:    4602        .F      MOV      r2,r0
        0x00811172:    88b1        ..      LDRH     r1,[r6,#4]
        0x00811174:    68f8        .h      LDR      r0,[r7,#0xc]
        0x00811176:    9100        ..      STR      r1,[sp,#0]
        0x00811178:    e9cd5001    ...P    STRD     r5,r0,[sp,#4]
        0x0081117c:    49e8        .I      LDR      r1,[pc,#928] ; [0x811520] = 0x88018ec
        0x0081117e:    464d        MF      MOV      r5,r9
        0x00811180:    4648        HF      MOV      r0,r9
        0x00811182:    6a7b        {j      LDR      r3,[r7,#0x24]
        0x00811184:    f7f6dc6b    ..k.    BL       log_buffer ; 0x7a5e
;;;585                                   dfu_settings.write_offset,
;;;586                                   ota_tmp_buf_used_size,
;;;587                                   data_length,
;;;588                                   dfu_settings.file_info.firmware_file_length
;;;589                                  );
;;;590                state = 2;
        0x00811188:    2402        .$      MOVS     r4,#2
;;;591                TUYA_BLE_LOG_ERROR("DFU_LENGTH_ERROR");
        0x0081118a:    a0e6        ..      ADR      r0,{pc}+0x39a ; 0x811524
        0x0081118c:    f009fd0d    ....    BL       get_args ; 0x81abaa
        0x00811190:    49e3        .I      LDR      r1,[pc,#908] ; [0x811520] = 0x88018ec
        0x00811192:    4602        .F      MOV      r2,r0
        0x00811194:    3184        .1      ADDS     r1,r1,#0x84
        0x00811196:    4628        (F      MOV      r0,r5
        0x00811198:    f7f6dc61    ..a.    BL       log_buffer ; 0x7a5e
;;;592                goto ota_data_response;
        0x0081119c:    e02c        ,.      B        0x8111f8 ; tuya_ota_data_req + 296
;;;593            }
;;;594            else
;;;595            {
;;;596                memcpy(TempBufferHead+ota_tmp_buf_used_size,recv_data+7,data_length);
        0x0081119e:    4ade        .J      LDR      r2,[pc,#888] ; [0x811518] = 0x208778
        0x008111a0:    3250        P2      ADDS     r2,r2,#0x50
        0x008111a2:    1853        S.      ADDS     r3,r2,r1
        0x008111a4:    1dc1        ..      ADDS     r1,r0,#7
        0x008111a6:    462a        *F      MOV      r2,r5
        0x008111a8:    4618        .F      MOV      r0,r3
        0x008111aa:    f448f676    H.v.    BL       __aeabi_memcpy ; 0x59e9a
;;;597                ota_tmp_buf_used_size += data_length;
        0x008111ae:    88b0        ..      LDRH     r0,[r6,#4]
        0x008111b0:    4428        (D      ADD      r0,r0,r5
        0x008111b2:    b280        ..      UXTH     r0,r0
        0x008111b4:    80b0        ..      STRH     r0,[r6,#4]
;;;598    
;;;599                if (ota_tmp_buf_used_size == 2048 || dfu_settings.write_offset + ota_tmp_buf_used_size == dfu_settings.file_info.firmware_file_length)
        0x008111b6:    f5b06f00    ...o    CMP      r0,#0x800
        0x008111ba:    d004        ..      BEQ      0x8111c6 ; tuya_ota_data_req + 246
        0x008111bc:    6a79        yj      LDR      r1,[r7,#0x24]
        0x008111be:    4408        .D      ADD      r0,r0,r1
        0x008111c0:    68f9        .h      LDR      r1,[r7,#0xc]
        0x008111c2:    4288        .B      CMP      r0,r1
        0x008111c4:    d118        ..      BNE      0x8111f8 ; tuya_ota_data_req + 296
;;;600                {
;;;601                    unlock_flash_all();
        0x008111c6:    f7fffe5d    ..].    BL       unlock_flash_all ; 0x810e84
;;;602                    if (sil_dfu_update(AppPatch, dfu_settings.write_offset, ota_tmp_buf_used_size,(uint32_t *)TempBufferHead) == 0)
        0x008111ca:    4bd3        .K      LDR      r3,[pc,#844] ; [0x811518] = 0x208778
        0x008111cc:    88b2        ..      LDRH     r2,[r6,#4]
        0x008111ce:    3350        P3      ADDS     r3,r3,#0x50
        0x008111d0:    f2427093    B..p    MOV      r0,#0x2793
        0x008111d4:    6a79        yj      LDR      r1,[r7,#0x24]
        0x008111d6:    f7fffdde    ....    BL       sil_dfu_update ; 0x810d96
        0x008111da:    2800        .(      CMP      r0,#0
        0x008111dc:    d035        5.      BEQ      0x81124a ; tuya_ota_data_req + 378
;;;603                    {
;;;604                        lock_flash();
;;;605                        if(dfu_settings.write_offset==0)
;;;606                        {
;;;607                            T_IMG_CTRL_HEADER_FORMAT *p_header = (T_IMG_CTRL_HEADER_FORMAT *) TempBufferHead;
;;;608                            p_header->ctrl_flag.flag_value.not_ready = 0;
;;;609                        }
;;;610                        dfu_settings.write_offset += ota_tmp_buf_used_size;
;;;611                        dfu_settings.progress.firmware_image_crc_last = crc32_compute(TempBufferHead, ota_tmp_buf_used_size, &dfu_settings.progress.firmware_image_crc_last);
;;;612                        dfu_settings.progress.firmware_image_offset_last += ota_tmp_buf_used_size;
;;;613    
;;;614                        if((current_package+1)%32==0)
;;;615                        {
;;;616                            dfu_settings_write();
;;;617                        }
;;;618    
;;;619                        if(dfu_settings.write_offset == dfu_settings.file_info.firmware_file_length)
;;;620                        {
;;;621                            //
;;;622                        }
;;;623                        ota_tmp_buf_used_size = 0;
;;;624                    }
;;;625                    else
;;;626                    {
;;;627                        lock_flash();
        0x008111de:    f7fffdd3    ....    BL       lock_flash ; 0x810d88
;;;628                        state = 2;
        0x008111e2:    2402        .$      MOVS     r4,#2
;;;629                        TUYA_BLE_LOG_ERROR("tuya_uart_ota_data_process error,status = %d ",state);
        0x008111e4:    a0d7        ..      ADR      r0,{pc}+0x360 ; 0x811544
        0x008111e6:    f009fce0    ....    BL       get_args ; 0x81abaa
        0x008111ea:    49cd        .I      LDR      r1,[pc,#820] ; [0x811520] = 0x88018ec
        0x008111ec:    4602        .F      MOV      r2,r0
        0x008111ee:    4623        #F      MOV      r3,r4
        0x008111f0:    31a4        .1      ADDS     r1,r1,#0xa4
        0x008111f2:    4648        HF      MOV      r0,r9
        0x008111f4:    f7f6dc33    ..3.    BL       log_buffer ; 0x7a5e
;;;630                        goto ota_data_response;
;;;631                    }
;;;632                }
;;;633    
;;;634            }
;;;635    
;;;636        }
;;;637    
;;;638    ota_data_response:
;;;639    
;;;640        p_buf[0] = TUYA_OTA_TYPE;
        0x008111f8:    f88d8014    ....    STRB     r8,[sp,#0x14]
        0x008111fc:    f88d4015    ...@    STRB     r4,[sp,#0x15]
        0x00811200:    2004        .       MOVS     r0,#4
        0x00811202:    4645        EF      MOV      r5,r8
;;;641        p_buf[1] = state;
;;;642    
;;;643        tuya_ota_status = TUYA_OTA_STATUS_FILE_DATA;
        0x00811204:    70b0        .p      STRB     r0,[r6,#2]
        0x00811206:    2103        .!      MOVS     r1,#3
;;;644    
;;;645        payload_len = 2;
        0x00811208:    2002        .       MOVS     r0,#2
;;;646    
;;;647        res_data.type =  TUYA_BLE_OTA_DATA;
        0x0081120a:    f88d100c    ....    STRB     r1,[sp,#0xc]
;;;648        res_data.data_len = payload_len;
        0x0081120e:    f8ad000e    ....    STRH     r0,[sp,#0xe]
;;;649        res_data.p_data = p_buf;
        0x00811212:    a805        ..      ADD      r0,sp,#0x14
;;;650    
;;;651        if(tuya_ble_ota_response(&res_data) != TUYA_BLE_SUCCESS)
        0x00811214:    9004        ..      STR      r0,[sp,#0x10]
        0x00811216:    a803        ..      ADD      r0,sp,#0xc
        0x00811218:    f000ff5a    ..Z.    BL       tuya_ble_ota_response ; 0x8120d0
        0x0081121c:    b140        @.      CBZ      r0,0x811230 ; tuya_ota_data_req + 352
;;;652        {
;;;653            TUYA_BLE_LOG_ERROR("tuya_ota_data_response failed.");
        0x0081121e:    a0d8        ..      ADR      r0,{pc}+0x362 ; 0x811580
        0x00811220:    f009fcc3    ....    BL       get_args ; 0x81abaa
        0x00811224:    49be        .I      LDR      r1,[pc,#760] ; [0x811520] = 0x88018ec
        0x00811226:    4602        .F      MOV      r2,r0
        0x00811228:    31e0        .1      ADDS     r1,r1,#0xe0
        0x0081122a:    4648        HF      MOV      r0,r9
        0x0081122c:    f7f6dc17    ....    BL       log_buffer ; 0x7a5e
;;;654        }
;;;655    
;;;656        if(state!=0)//出错，恢复初始状态
        0x00811230:    b374        t.      CBZ      r4,0x811290 ; tuya_ota_data_req + 448
;;;657        {
;;;658            TUYA_BLE_LOG_ERROR("ota error so free!");
        0x00811232:    a0df        ..      ADR      r0,{pc}+0x37e ; 0x8115b0
        0x00811234:    f009fcb9    ....    BL       get_args ; 0x81abaa
        0x00811238:    4602        .F      MOV      r2,r0
        0x0081123a:    49e6        .I      LDR      r1,[pc,#920] ; [0x8115d4] = 0x88019fc
        0x0081123c:    4648        HF      MOV      r0,r9
        0x0081123e:    f7f6dc0e    ....    BL       log_buffer ; 0x7a5e
;;;659            tuya_ota_status = TUYA_OTA_STATUS_NONE;
        0x00811242:    70b5        .p      STRB     r5,[r6,#2]
;;;660            tuya_ota_init_disconnect();
        0x00811244:    f7fffd94    ....    BL       tuya_ota_init_disconnect ; 0x810d70
;;;661            //memset(&dfu_settings, 0, sizeof(dfu_settings_t));
;;;662            //dfu_settings_write();
;;;663        }
;;;664        else
;;;665        {
;;;666            last_package = current_package;
;;;667        }
;;;668    
;;;669    
;;;670    }
        0x00811248:    e758        X.      B        0x8110fc ; tuya_ota_data_req + 44
        0x0081124a:    f7fffd9d    ....    BL       lock_flash ; 0x810d88
        0x0081124e:    6a78        xj      LDR      r0,[r7,#0x24]
        0x00811250:    b928        (.      CBNZ     r0,0x81125e ; tuya_ota_data_req + 398
        0x00811252:    48b1        .H      LDR      r0,[pc,#708] ; [0x811518] = 0x208778
        0x00811254:    3050        P0      ADDS     r0,r0,#0x50
        0x00811256:    8841        A.      LDRH     r1,[r0,#2]
        0x00811258:    f0210180    !...    BIC      r1,r1,#0x80
        0x0081125c:    8041        A.      STRH     r1,[r0,#2]
        0x0081125e:    88b1        ..      LDRH     r1,[r6,#4]
        0x00811260:    6a78        xj      LDR      r0,[r7,#0x24]
        0x00811262:    4aad        .J      LDR      r2,[pc,#692] ; [0x811518] = 0x208778
        0x00811264:    4408        .D      ADD      r0,r0,r1
        0x00811266:    322c        ,2      ADDS     r2,r2,#0x2c
        0x00811268:    6278        xb      STR      r0,[r7,#0x24]
        0x0081126a:    f1020024    ..$.    ADD      r0,r2,#0x24
        0x0081126e:    f005f9e1    ....    BL       tuya_ble_crc32_compute ; 0x816634
        0x00811272:    62f8        .b      STR      r0,[r7,#0x2c]
        0x00811274:    88b1        ..      LDRH     r1,[r6,#4]
        0x00811276:    6ab8        .j      LDR      r0,[r7,#0x28]
        0x00811278:    4408        .D      ADD      r0,r0,r1
        0x0081127a:    62b8        .b      STR      r0,[r7,#0x28]
        0x0081127c:    79b0        .y      LDRB     r0,[r6,#6]
        0x0081127e:    06c0        ..      LSLS     r0,r0,#27
        0x00811280:    f1b04f78    ..xO    CMP      r0,#0xf8000000
        0x00811284:    d101        ..      BNE      0x81128a ; tuya_ota_data_req + 442
        0x00811286:    f000f8d3    ....    BL       dfu_settings_write ; 0x811430
        0x0081128a:    f8a68004    ....    STRH     r8,[r6,#4]
        0x0081128e:    e7b3        ..      B        0x8111f8 ; tuya_ota_data_req + 296
        0x00811290:    88f0        ..      LDRH     r0,[r6,#6]
        0x00811292:    8130        0.      STRH     r0,[r6,#8]
        0x00811294:    e732        2.      B        0x8110fc ; tuya_ota_data_req + 44
    on_data_write_request_sched
;;;671    
;;;672    
;;;673    static void on_data_write_request_sched(void)
;;;674    {
        0x00811296:    e92d41ff    -..A    PUSH     {r0-r8,lr}
;;;675        uint8_t p_buf[2];
;;;676        uint8_t payload_len = 0;
;;;677        uint8_t state;
;;;678        bool check_result;
;;;679        tuya_ble_ota_response_t res_data;
;;;680        uint8_t old_bp_lv = 0x02;
        0x0081129a:    2002        .       MOVS     r0,#2
        0x0081129c:    f88d0008    ....    STRB     r0,[sp,#8]
;;;681    
;;;682        if (dfu_settings.progress.firmware_image_offset_last == dfu_settings.file_info.firmware_file_length)
        0x008112a0:    489d        .H      LDR      r0,[pc,#628] ; [0x811518] = 0x208778
        0x008112a2:    4e89        .N      LDR      r6,[pc,#548] ; [0x8114c8] = 0x208668
        0x008112a4:    4f89        .O      LDR      r7,[pc,#548] ; [0x8114cc] = 0x21103002
        0x008112a6:    6a81        .j      LDR      r1,[r0,#0x28]
        0x008112a8:    68c0        .h      LDR      r0,[r0,#0xc]
        0x008112aa:    4281        .B      CMP      r1,r0
        0x008112ac:    d129        ).      BNE      0x811302 ; on_data_write_request_sched + 108
;;;683        {
;;;684            TUYA_BLE_LOG_DEBUG("Whole firmware image received. Postvalidating.");
        0x008112ae:    a0ca        ..      ADR      r0,{pc}+0x32a ; 0x8115d8
        0x008112b0:    f009fc7b    ..{.    BL       get_args ; 0x81abaa
        0x008112b4:    49c7        .I      LDR      r1,[pc,#796] ; [0x8115d4] = 0x88019fc
        0x008112b6:    4602        .F      MOV      r2,r0
        0x008112b8:    3124        $1      ADDS     r1,r1,#0x24
        0x008112ba:    4638        8F      MOV      r0,r7
        0x008112bc:    f7f6dbcf    ....    BL       log_buffer ; 0x7a5e
;;;685            /*
;;;686                    uint32_t crc_temp  = 0;
;;;687                    if(file_crc_check_in_flash(dfu_settings.progress.firmware_image_offset_last,&crc_temp)==0)
;;;688                    {
;;;689                        if(dfu_settings.progress.firmware_image_crc_last != crc_temp)
;;;690                        {
;;;691                            TUYA_BLE_LOG_WARNING("file crc check in flash diff from crc_last. crc_temp = 0x%04x,crc_last = 0x%04x",crc_temp,dfu_settings.progress.firmware_image_crc_last);
;;;692                            dfu_settings.progress.firmware_image_crc_last = crc_temp;
;;;693                        }
;;;694    
;;;695                    }
;;;696            */
;;;697    
;;;698            flstatus = flash_lock(FLASH_LOCK_USER_MODE_READ);//signal = os_lock();
        0x008112c0:    2001        .       MOVS     r0,#1
        0x008112c2:    f7f8df1e    ....    BL       flash_lock ; 0xa102
        0x008112c6:    7070        pp      STRB     r0,[r6,#1]
;;;699            check_result = dfu_check_checksum(AppPatch);
        0x008112c8:    f2427093    B..p    MOV      r0,#0x2793
        0x008112cc:    f436f2b1    6...    BL       dfu_check_checksum ; 0x47832
        0x008112d0:    4604        .F      MOV      r4,r0
;;;700            flash_unlock(FLASH_LOCK_USER_MODE_READ);//os_unlock(signal);
        0x008112d2:    2001        .       MOVS     r0,#1
        0x008112d4:    f7f8df69    ..i.    BL       flash_unlock ; 0xa1aa
;;;701    
;;;702            TUYA_BLE_LOG_DEBUG("dfu_act_notify_valid, check_result:%d (1: Success, 0: Fail)", check_result);
        0x008112d8:    48cf        .H      LDR      r0,[pc,#828] ; [0x811618] = 0x81caf4
        0x008112da:    f009fc66    ..f.    BL       get_args ; 0x81abaa
        0x008112de:    49bd        .I      LDR      r1,[pc,#756] ; [0x8115d4] = 0x88019fc
        0x008112e0:    4602        .F      MOV      r2,r0
        0x008112e2:    4623        #F      MOV      r3,r4
        0x008112e4:    3164        d1      ADDS     r1,r1,#0x64
        0x008112e6:    4638        8F      MOV      r0,r7
        0x008112e8:    f7f6dbb9    ....    BL       log_buffer ; 0x7a5e
;;;703    
;;;704            if (check_result)
        0x008112ec:    b13c        <.      CBZ      r4,0x8112fe ; on_data_write_request_sched + 104
;;;705            {
;;;706                memset(&dfu_settings, 0, sizeof(dfu_settings_t));
        0x008112ee:    2150        P!      MOVS     r1,#0x50
        0x008112f0:    4889        .H      LDR      r0,[pc,#548] ; [0x811518] = 0x208778
        0x008112f2:    f448f6b5    H...    BL       __aeabi_memclr4 ; 0x5a060
;;;707                dfu_settings_write();
        0x008112f6:    f000f89b    ....    BL       dfu_settings_write ; 0x811430
;;;708                state = 0;
        0x008112fa:    2400        .$      MOVS     r4,#0
        0x008112fc:    e002        ..      B        0x811304 ; on_data_write_request_sched + 110
;;;709    
;;;710            }
;;;711            else
;;;712            {
;;;713                state = 2;
        0x008112fe:    2402        .$      MOVS     r4,#2
        0x00811300:    e000        ..      B        0x811304 ; on_data_write_request_sched + 110
;;;714            }
;;;715    
;;;716        }
;;;717        else
;;;718        {
;;;719            state = 1;
        0x00811302:    2401        .$      MOVS     r4,#1
;;;720        }
;;;721    
;;;722        p_buf[0] = TUYA_OTA_TYPE;
        0x00811304:    2500        .%      MOVS     r5,#0
        0x00811306:    f88d500c    ...P    STRB     r5,[sp,#0xc]
;;;723        p_buf[1] = state;
        0x0081130a:    f88d400d    ...@    STRB     r4,[sp,#0xd]
;;;724        tuya_ota_status = TUYA_OTA_STATUS_NONE;
        0x0081130e:    70b5        .p      STRB     r5,[r6,#2]
        0x00811310:    2104        .!      MOVS     r1,#4
;;;725        payload_len = 2;
        0x00811312:    2002        .       MOVS     r0,#2
;;;726        res_data.type =  TUYA_BLE_OTA_END;
        0x00811314:    f88d1000    ....    STRB     r1,[sp,#0]
;;;727        res_data.data_len = payload_len;
        0x00811318:    f8ad0002    ....    STRH     r0,[sp,#2]
;;;728        res_data.p_data = p_buf;
        0x0081131c:    a803        ..      ADD      r0,sp,#0xc
;;;729    
;;;730        if(tuya_ble_ota_response(&res_data) != TUYA_BLE_SUCCESS)
        0x0081131e:    9001        ..      STR      r0,[sp,#4]
        0x00811320:    4668        hF      MOV      r0,sp
        0x00811322:    f000fed5    ....    BL       tuya_ble_ota_response ; 0x8120d0
        0x00811326:    b140        @.      CBZ      r0,0x81133a ; on_data_write_request_sched + 164
;;;731        {
;;;732            TUYA_BLE_LOG_ERROR("tuya_ota_end_response failed.");
        0x00811328:    a0bc        ..      ADR      r0,{pc}+0x2f4 ; 0x81161c
        0x0081132a:    f009fc3e    ..>.    BL       get_args ; 0x81abaa
        0x0081132e:    49a9        .I      LDR      r1,[pc,#676] ; [0x8115d4] = 0x88019fc
        0x00811330:    4602        .F      MOV      r2,r0
        0x00811332:    31b0        .1      ADDS     r1,r1,#0xb0
        0x00811334:    4638        8F      MOV      r0,r7
        0x00811336:    f7f6db92    ....    BL       log_buffer ; 0x7a5e
;;;733        }
;;;734    
;;;735        if(state==0)
        0x0081133a:    b17c        |.      CBZ      r4,0x81135c ; on_data_write_request_sched + 198
        0x0081133c:    a0c2        ..      ADR      r0,{pc}+0x30c ; 0x811648
        0x0081133e:    f009fc34    ..4.    BL       get_args ; 0x81abaa
        0x00811342:    4602        .F      MOV      r2,r0
        0x00811344:    49c8        .I      LDR      r1,[pc,#800] ; [0x811668] = 0x8801b18
        0x00811346:    4638        8F      MOV      r0,r7
        0x00811348:    f7f6db89    ....    BL       log_buffer ; 0x7a5e
        0x0081134c:    70b5        .p      STRB     r5,[r6,#2]
        0x0081134e:    2150        P!      MOVS     r1,#0x50
        0x00811350:    4871        qH      LDR      r0,[pc,#452] ; [0x811518] = 0x208778
        0x00811352:    f448f685    H...    BL       __aeabi_memclr4 ; 0x5a060
        0x00811356:    f000f86b    ..k.    BL       dfu_settings_write ; 0x811430
        0x0081135a:    e4a3        ..      B        0x810ca4 ; tuya_ota_offset_req + 32
;;;736        {
;;;737            //tuya_bsp_delay_ms(1000);
;;;738            TUYA_BLE_LOG_INFO("start reset~~~.");
        0x0081135c:    a0c3        ..      ADR      r0,{pc}+0x310 ; 0x81166c
        0x0081135e:    f009fc24    ..$.    BL       get_args ; 0x81abaa
        0x00811362:    49c1        .I      LDR      r1,[pc,#772] ; [0x811668] = 0x8801b18
        0x00811364:    4602        .F      MOV      r2,r0
        0x00811366:    3940        @9      SUBS     r1,r1,#0x40
        0x00811368:    4638        8F      MOV      r0,r7
        0x0081136a:    f7f6db78    ..x.    BL       log_buffer ; 0x7a5e
;;;739            if (flash_sw_protect_unlock_by_addr_locked(0x800000, &old_bp_lv))
        0x0081136e:    a902        ..      ADD      r1,sp,#8
        0x00811370:    f44f0000    O...    MOV      r0,#0x800000
        0x00811374:    f00afaef    ....    BL       flash_sw_protect_unlock_by_addr_locked ; 0x81b956
        0x00811378:    b138        8.      CBZ      r0,0x81138a ; on_data_write_request_sched + 244
;;;740            {
;;;741                APP_PRINT_INFO1("Unlock success! old_bp_lv=%d", old_bp_lv);
        0x0081137a:    49bb        .I      LDR      r1,[pc,#748] ; [0x811668] = 0x8801b18
        0x0081137c:    f89d3008    ...0    LDRB     r3,[sp,#8]
        0x00811380:    2201        ."      MOVS     r2,#1
        0x00811382:    3920         9      SUBS     r1,r1,#0x20
        0x00811384:    4638        8F      MOV      r0,r7
        0x00811386:    f7f6db6a    ..j.    BL       log_buffer ; 0x7a5e
;;;742            }
;;;743            os_delay(1000);
        0x0081138a:    f44f707a    O.zp    MOV      r0,#0x3e8
        0x0081138e:    f415f1ef    ....    BL       os_delay ; 0x26770
;;;744            //tuya_ble_gap_disconnect();
;;;745            WDG_SystemReset(RESET_ALL, DFU_SWITCH_TO_OTA);
        0x00811392:    21d2        .!      MOVS     r1,#0xd2
        0x00811394:    2003        .       MOVS     r0,#3
        0x00811396:    f7fdfa02    ....    BL       WDG_SystemReset ; 0x80e79e
;;;746        }
;;;747        else
;;;748        {
;;;749            TUYA_BLE_LOG_ERROR("ota crc error!");
;;;750            tuya_ota_status = TUYA_OTA_STATUS_NONE;
;;;751            //tuya_ota_init_disconnect();
;;;752            memset(&dfu_settings, 0, sizeof(dfu_settings_t));
;;;753            dfu_settings_write();
;;;754        }
;;;755    
;;;756    }
        0x0081139a:    e483        ..      B        0x810ca4 ; tuya_ota_offset_req + 32
    tuya_ota_proc
;;;757    
;;;758    
;;;759    
;;;760    static void tuya_ota_end_req(uint8_t*recv_data,uint32_t recv_len)
;;;761    {
;;;762        uint8_t p_buf[2];
;;;763        uint8_t payload_len = 0;
;;;764        uint8_t encry_mode = 0;
;;;765    
;;;766    
;;;767        if(tuya_ota_status==TUYA_OTA_STATUS_NONE)
;;;768        {
;;;769            TUYA_BLE_LOG_ERROR("current ota status is TUYA_OTA_STATUS_NONE!");
;;;770            return;
;;;771        }
;;;772    
;;;773        on_data_write_request_sched();
;;;774    
;;;775    }
;;;776    
;;;777    
;;;778    void tuya_ota_proc(uint16_t cmd,uint8_t*recv_data,uint32_t recv_len)
;;;779    {
        0x0081139c:    b5f8        ..      PUSH     {r3-r7,lr}
        0x0081139e:    4604        .F      MOV      r4,r0
        0x008113a0:    4615        .F      MOV      r5,r2
        0x008113a2:    460f        .F      MOV      r7,r1
;;;780        TUYA_BLE_LOG_DEBUG("ota cmd : 0x%04x , recv_len : %d",cmd,recv_len);
        0x008113a4:    a0b9        ..      ADR      r0,{pc}+0x2e8 ; 0x81168c
        0x008113a6:    f009fc00    ....    BL       get_args ; 0x81abaa
        0x008113aa:    49af        .I      LDR      r1,[pc,#700] ; [0x811668] = 0x8801b18
        0x008113ac:    4e47        GN      LDR      r6,[pc,#284] ; [0x8114cc] = 0x21103002
        0x008113ae:    4602        .F      MOV      r2,r0
        0x008113b0:    4623        #F      MOV      r3,r4
        0x008113b2:    315c        \1      ADDS     r1,r1,#0x5c
        0x008113b4:    4630        0F      MOV      r0,r6
        0x008113b6:    9500        ..      STR      r5,[sp,#0]
        0x008113b8:    f7f6db51    ..Q.    BL       log_buffer ; 0x7a5e
;;;781        switch(cmd)
        0x008113bc:    2c05        .,      CMP      r4,#5
        0x008113be:    d22b        +.      BCS      0x811418 ; tuya_ota_proc + 124
        0x008113c0:    e8dff004    ....    TBB      [pc,r4]
    $d
        0x008113c4:    140f0903    ....    DCD    336529667
        0x008113c8:    0019        ..      DCW    25
    $t
;;;782        {
;;;783        case TUYA_BLE_OTA_REQ:
;;;784            tuya_ota_start_req(recv_data,recv_len);
        0x008113ca:    4629        )F      MOV      r1,r5
        0x008113cc:    4638        8F      MOV      r0,r7
        0x008113ce:    e8bd40f8    ...@    POP      {r3-r7,lr}
        0x008113d2:    f000b83b    ..;.    B.W      tuya_ota_start_req ; 0x81144c
;;;785            break;
;;;786        case TUYA_BLE_OTA_FILE_INFO:
;;;787            tuya_ota_file_info_req(recv_data,recv_len);
        0x008113d6:    4629        )F      MOV      r1,r5
        0x008113d8:    4638        8F      MOV      r0,r7
        0x008113da:    e8bd40f8    ...@    POP      {r3-r7,lr}
        0x008113de:    f7ffb9cd    ....    B        tuya_ota_file_info_req ; 0x81077c
;;;788            break;
;;;789        case TUYA_BLE_OTA_FILE_OFFSET_REQ:
;;;790            tuya_ota_offset_req(recv_data,recv_len);
        0x008113e2:    4629        )F      MOV      r1,r5
        0x008113e4:    4638        8F      MOV      r0,r7
        0x008113e6:    e8bd40f8    ...@    POP      {r3-r7,lr}
        0x008113ea:    e44b        K.      B        tuya_ota_offset_req ; 0x810c84
;;;791            break;
;;;792        case TUYA_BLE_OTA_DATA:
;;;793            tuya_ota_data_req(recv_data,recv_len);
        0x008113ec:    4629        )F      MOV      r1,r5
        0x008113ee:    4638        8F      MOV      r0,r7
        0x008113f0:    e8bd40f8    ...@    POP      {r3-r7,lr}
        0x008113f4:    e66c        l.      B        tuya_ota_data_req ; 0x8110d0
        0x008113f6:    4834        4H      LDR      r0,[pc,#208] ; [0x8114c8] = 0x208668
        0x008113f8:    7880        .x      LDRB     r0,[r0,#2]
        0x008113fa:    b110        ..      CBZ      r0,0x811402 ; tuya_ota_proc + 102
        0x008113fc:    e8bd40f8    ...@    POP      {r3-r7,lr}
        0x00811400:    e749        I.      B        on_data_write_request_sched ; 0x811296
        0x00811402:    a0ae        ..      ADR      r0,{pc}+0x2ba ; 0x8116bc
        0x00811404:    f009fbd1    ....    BL       get_args ; 0x81abaa
        0x00811408:    4602        .F      MOV      r2,r0
        0x0081140a:    4630        0F      MOV      r0,r6
        0x0081140c:    e8bd40f8    ...@    POP      {r3-r7,lr}
        0x00811410:    4995        .I      LDR      r1,[pc,#596] ; [0x811668] = 0x8801b18
        0x00811412:    3120         1      ADDS     r1,r1,#0x20
        0x00811414:    f7f69b23    ..#.    B        log_buffer ; 0x7a5e
;;;794            break;
;;;795        case TUYA_BLE_OTA_END:
;;;796            tuya_ota_end_req(recv_data,recv_len);
;;;797            break;
;;;798        default:
;;;799            break;
;;;800        }
;;;801    
;;;802    }
        0x00811418:    bdf8        ..      POP      {r3-r7,pc}
    tuya_ota_status_set
;;;803    
;;;804    void tuya_ota_status_set(tuya_ota_status_t status)
;;;805    {
;;;806        tuya_ota_status = status;
        0x0081141a:    492b        +I      LDR      r1,[pc,#172] ; [0x8114c8] = 0x208668
        0x0081141c:    7088        .p      STRB     r0,[r1,#2]
;;;807    }
        0x0081141e:    4770        pG      BX       lr
    tuya_ota_status_get
;;;808    
;;;809    
;;;810    tuya_ota_status_t tuya_ota_status_get(void)
;;;811    {
;;;812        return tuya_ota_status;
        0x00811420:    4829        )H      LDR      r0,[pc,#164] ; [0x8114c8] = 0x208668
        0x00811422:    7880        .x      LDRB     r0,[r0,#2]
        0x00811424:    4770        pG      BX       lr
    settings_crc_get
;;; sample\tuya_ble_app\tuya_ble_app_ota.c (106)
        0x00811426:    2200        ."      MOVS     r2,#0
        0x00811428:    214c        L!      MOVS     r1,#0x4c
        0x0081142a:    1d00        ..      ADDS     r0,r0,#4
        0x0081142c:    f005b902    ....    B.W      tuya_ble_crc32_compute ; 0x816634
    dfu_settings_write
;;;107    }
;;;108    
;;;109    static bool crc_ok(dfu_settings_t const * p_settings)
;;;110    {
;;;111        if (p_settings->crc != 0xFFFFFFFF)
;;;112        {
;;;113            // CRC is set. Content must be valid
;;;114            uint32_t crc = settings_crc_get(p_settings);
;;;115            if (crc == p_settings->crc)
;;;116            {
;;;117                return true;
;;;118            }
;;;119        }
;;;120        return false;
;;;121    }
;;;122    
;;;123    
;;;124    static uint32_t dfu_settings_write(void)
;;;125    {
        0x00811430:    b510        ..      PUSH     {r4,lr}
;;;126        dfu_settings.crc = settings_crc_get(&dfu_settings);
        0x00811432:    4839        9H      LDR      r0,[pc,#228] ; [0x811518] = 0x208778
        0x00811434:    f7fffff7    ....    BL       settings_crc_get ; 0x811426
        0x00811438:    4937        7I      LDR      r1,[pc,#220] ; [0x811518] = 0x208778
;;;127        return ftl_save(&dfu_settings, DFU_SETTINGS_ADDR, sizeof(dfu_settings_t));
        0x0081143a:    2250        P"      MOVS     r2,#0x50
        0x0081143c:    6008        .`      STR      r0,[r1,#0]
        0x0081143e:    e8bd4010    ...@    POP      {r4,lr}
        0x00811442:    f44f6100    O..a    MOV      r1,#0x800
        0x00811446:    4834        4H      LDR      r0,[pc,#208] ; [0x811518] = 0x208778
        0x00811448:    f7fa9a66    ..f.    B        ftl_save ; 0xb918
    tuya_ota_start_req
;;;128    }
;;;129    
;;;130    static uint32_t dfu_settings_read(void)
;;;131    {
;;;132        return ftl_load(&dfu_settings, DFU_SETTINGS_ADDR, sizeof(dfu_settings_t));
;;;133    }
;;;134    
;;;135    uint32_t tuya_ota_init(void)
;;;136    {
;;;137        tuya_ota_status = TUYA_OTA_STATUS_NONE;
;;;138        //uint32_t crc_check;
;;;139        current_package = 0;
;;;140        last_package = 0;
;;;141        memset(TempBufferHead,0,sizeof(TempBufferHead));
;;;142        ota_tmp_buf_used_size = 0;
;;;143        //memset(&dfuPara,0,sizeof(dfuPara));
;;;144    
;;;145        if(dfu_settings_read())
;;;146        {
;;;147            TUYA_BLE_LOG_ERROR("dfu_settings_read failed !");
;;;148        }
;;;149    
;;;150        TUYA_BLE_LOG_DEBUG("dfu_settings.crc = 0x%08x ",dfu_settings.crc);
;;;151        TUYA_BLE_LOG_DEBUG("dfu_settings.progress.firmware_image_offset_last = %d ",dfu_settings.progress.firmware_image_offset_last);
;;;152        TUYA_BLE_LOG_DEBUG("dfu_settings.progress.firmware_image_crc_last = 0x%08x ",dfu_settings.progress.firmware_image_crc_last);
;;;153    
;;;154        if(!crc_ok(&dfu_settings))
;;;155        {
;;;156            TUYA_BLE_LOG_DEBUG("read dfu_settings...crc error!");
;;;157            memset(&dfu_settings,0,sizeof(dfu_settings_t));
;;;158            if(dfu_settings_write())
;;;159            {
;;;160                TUYA_BLE_LOG_ERROR("dfu_settings_write failed !");
;;;161            }
;;;162        }
;;;163    
;;;164        return 0;
;;;165    }
;;;166    
;;;167    
;;;168    
;;;169    static void tuya_ota_start_req(uint8_t*recv_data,uint32_t recv_len)
;;;170    {
        0x0081144c:    b530        0.      PUSH     {r4,r5,lr}
        0x0081144e:    4c1e        .L      LDR      r4,[pc,#120] ; [0x8114c8] = 0x208668
;;; sample\tuya_ble_app\tuya_ble_app_ota.c (170)
        0x00811450:    b095        ..      SUB      sp,sp,#0x54
        0x00811452:    78a0        .x      LDRB     r0,[r4,#2]
        0x00811454:    4d1d        .M      LDR      r5,[pc,#116] ; [0x8114cc] = 0x21103002
        0x00811456:    b150        P.      CBZ      r0,0x81146e ; tuya_ota_start_req + 34
;;;171        uint8_t p_buf[70];
;;;172        uint8_t payload_len = 0;
;;;173        uint8_t encry_mode = 0;
;;;174        uint32_t current_version = TY_APP_VER_NUM;
;;;175        tuya_ble_ota_response_t res_data;
;;;176    
;;;177        if(tuya_ota_status!=TUYA_OTA_STATUS_NONE)
;;;178        {
;;;179            TUYA_BLE_LOG_ERROR("current ota status is not TUYA_OTA_STATUS_NONE  and is : %d !",tuya_ota_status);
        0x00811458:    48a7        .H      LDR      r0,[pc,#668] ; [0x8116f8] = 0x81c994
        0x0081145a:    f009fba6    ....    BL       get_args ; 0x81abaa
        0x0081145e:    78a3        .x      LDRB     r3,[r4,#2]
        0x00811460:    4602        .F      MOV      r2,r0
        0x00811462:    49a6        .I      LDR      r1,[pc,#664] ; [0x8116fc] = 0x8800fec
        0x00811464:    4628        (F      MOV      r0,r5
        0x00811466:    f7f6dafa    ....    BL       log_buffer ; 0x7a5e
        0x0081146a:    b015        ..      ADD      sp,sp,#0x54
        0x0081146c:    bd30        0.      POP      {r4,r5,pc}
;;;180            return;
;;;181        }
;;;182    
;;;183        p_buf[0] = TUYA_OTA_TYPE;
        0x0081146e:    2000        .       MOVS     r0,#0
        0x00811470:    f88d0000    ....    STRB     r0,[sp,#0]
;;;184        p_buf[1] = TUYA_OTA_VERSION;
        0x00811474:    2103        .!      MOVS     r1,#3
        0x00811476:    f88d1001    ....    STRB     r1,[sp,#1]
        0x0081147a:    2101        .!      MOVS     r1,#1
        0x0081147c:    f88d0004    ....    STRB     r0,[sp,#4]
        0x00811480:    f88d1005    ....    STRB     r1,[sp,#5]
;;;185        p_buf[2] = 0;
        0x00811484:    f88d0002    ....    STRB     r0,[sp,#2]
        0x00811488:    f88d0006    ....    STRB     r0,[sp,#6]
        0x0081148c:    2202        ."      MOVS     r2,#2
;;;186        p_buf[3] = current_version>>24;
        0x0081148e:    f88d0003    ....    STRB     r0,[sp,#3]
;;;187        p_buf[4] = current_version>>16;
;;;188        p_buf[5] = current_version>>8;
;;;189        p_buf[6] = current_version;
;;;190        p_buf[7] = MAX_DFU_DATA_LEN>>8;
        0x00811492:    f88d2007    ...     STRB     r2,[sp,#7]
;;;191        p_buf[8] = MAX_DFU_DATA_LEN;
        0x00811496:    f88d0008    ....    STRB     r0,[sp,#8]
;;;192        tuya_ota_status = TUYA_OTA_STATUS_START;
        0x0081149a:    70a1        .p      STRB     r1,[r4,#2]
        0x0081149c:    f88d0048    ..H.    STRB     r0,[sp,#0x48]
;;;193        payload_len = 9;
        0x008114a0:    2109        .!      MOVS     r1,#9
;;;194    
;;;195        res_data.type =  TUYA_BLE_OTA_REQ;
;;;196        res_data.data_len = payload_len;
        0x008114a2:    f8ad104a    ..J.    STRH     r1,[sp,#0x4a]
;;;197        res_data.p_data = p_buf;
        0x008114a6:    f8cdd04c    ..L.    STR      sp,[sp,#0x4c]
;;;198    
;;;199        if(tuya_ble_ota_response(&res_data) != TUYA_BLE_SUCCESS)
        0x008114aa:    a812        ..      ADD      r0,sp,#0x48
        0x008114ac:    f000fe10    ....    BL       tuya_ble_ota_response ; 0x8120d0
        0x008114b0:    2800        .(      CMP      r0,#0
        0x008114b2:    d0da        ..      BEQ      0x81146a ; tuya_ota_start_req + 30
;;;200        {
;;;201            TUYA_BLE_LOG_ERROR("tuya_ota_start_response failed.");
        0x008114b4:    a092        ..      ADR      r0,{pc}+0x24c ; 0x811700
        0x008114b6:    f009fb78    ..x.    BL       get_args ; 0x81abaa
        0x008114ba:    4990        .I      LDR      r1,[pc,#576] ; [0x8116fc] = 0x8800fec
        0x008114bc:    4602        .F      MOV      r2,r0
        0x008114be:    314c        L1      ADDS     r1,r1,#0x4c
        0x008114c0:    4628        (F      MOV      r0,r5
        0x008114c2:    f7f6dacc    ....    BL       log_buffer ; 0x7a5e
;;;202        }
;;;203    
;;;204    }
        0x008114c6:    e7d0        ..      B        0x81146a ; tuya_ota_start_req + 30
    $d
        0x008114c8:    00208668    h. .    DCD    2131560
        0x008114cc:    21103002    .0.!    DCD    554708994
        0x008114d0:    0081ca84    ....    DCD    8505988
        0x008114d4:    08801720     ...    DCD    142612256
        0x008114d8:    0081cbc8    ....    DCD    8506312
        0x008114dc:    205d455b    [E]     DCD    542983515
        0x008114e0:    41595554    TUYA    DCD    1096373588
        0x008114e4:    454c425f    _BLE    DCD    1162625631
        0x008114e8:    746f203a    : ot    DCD    1953439802
        0x008114ec:    65722061    a re    DCD    1701978209
        0x008114f0:    76696563    ceiv    DCD    1986618723
        0x008114f4:    70206465    ed p    DCD    1881171045
        0x008114f8:    616b6361    acka    DCD    1634427745
        0x008114fc:    64206567    ge d    DCD    1679844711
        0x00811500:    20617461    ata     DCD    543257697
        0x00811504:    676e656c    leng    DCD    1735288172
        0x00811508:    65206874    th e    DCD    1696622708
        0x0081150c:    726f7272    rror    DCD    1919906418
        0x00811510:    25203a20     : %    DCD    622869024
        0x00811514:    00000064    d...    DCD    100
        0x00811518:    00208778    x. .    DCD    2131832
        0x0081151c:    0081c880    ....    DCD    8505472
        0x00811520:    088018ec    ....    DCD    142612716
        0x00811524:    205d455b    [E]     DCD    542983515
        0x00811528:    41595554    TUYA    DCD    1096373588
        0x0081152c:    454c425f    _BLE    DCD    1162625631
        0x00811530:    4644203a    : DF    DCD    1178869818
        0x00811534:    454c5f55    U_LE    DCD    1162633045
        0x00811538:    4854474e    NGTH    DCD    1213482830
        0x0081153c:    5252455f    _ERR    DCD    1381123423
        0x00811540:    0000524f    OR..    DCD    21071
        0x00811544:    205d455b    [E]     DCD    542983515
        0x00811548:    41595554    TUYA    DCD    1096373588
        0x0081154c:    454c425f    _BLE    DCD    1162625631
        0x00811550:    7574203a    : tu    DCD    1970544698
        0x00811554:    755f6179    ya_u    DCD    1969185145
        0x00811558:    5f747261    art_    DCD    1601466977
        0x0081155c:    5f61746f    ota_    DCD    1600222319
        0x00811560:    61746164    data    DCD    1635017060
        0x00811564:    6f72705f    _pro    DCD    1869770847
        0x00811568:    73736563    cess    DCD    1936942435
        0x0081156c:    72726520     err    DCD    1920099616
        0x00811570:    732c726f    or,s    DCD    1932292719
        0x00811574:    75746174    tatu    DCD    1970561396
        0x00811578:    203d2073    s =     DCD    540876915
        0x0081157c:    00206425    %d .    DCD    2122789
        0x00811580:    205d455b    [E]     DCD    542983515
        0x00811584:    41595554    TUYA    DCD    1096373588
        0x00811588:    454c425f    _BLE    DCD    1162625631
        0x0081158c:    7574203a    : tu    DCD    1970544698
        0x00811590:    6f5f6179    ya_o    DCD    1868521849
        0x00811594:    645f6174    ta_d    DCD    1683972468
        0x00811598:    5f617461    ata_    DCD    1600222305
        0x0081159c:    70736572    resp    DCD    1886610802
        0x008115a0:    65736e6f    onse    DCD    1702063727
        0x008115a4:    69616620     fai    DCD    1767990816
        0x008115a8:    2e64656c    led.    DCD    778331500
        0x008115ac:    00000000    ....    DCD    0
        0x008115b0:    205d455b    [E]     DCD    542983515
        0x008115b4:    41595554    TUYA    DCD    1096373588
        0x008115b8:    454c425f    _BLE    DCD    1162625631
        0x008115bc:    746f203a    : ot    DCD    1953439802
        0x008115c0:    72652061    a er    DCD    1919230049
        0x008115c4:    20726f72    ror     DCD    544370546
        0x008115c8:    66206f73    so f    DCD    1713401715
        0x008115cc:    21656572    ree!    DCD    560293234
        0x008115d0:    00000000    ....    DCD    0
        0x008115d4:    088019fc    ....    DCD    142612988
        0x008115d8:    205d445b    [D]     DCD    542983259
        0x008115dc:    41595554    TUYA    DCD    1096373588
        0x008115e0:    454c425f    _BLE    DCD    1162625631
        0x008115e4:    6857203a    : Wh    DCD    1750540346
        0x008115e8:    20656c6f    ole     DCD    543517807
        0x008115ec:    6d726966    firm    DCD    1836214630
        0x008115f0:    65726177    ware    DCD    1701994871
        0x008115f4:    616d6920     ima    DCD    1634560288
        0x008115f8:    72206567    ge r    DCD    1914725735
        0x008115fc:    69656365    ecei    DCD    1768252261
        0x00811600:    2e646576    ved.    DCD    778331510
        0x00811604:    736f5020     Pos    DCD    1936674848
        0x00811608:    6c617674    tval    DCD    1818326644
        0x0081160c:    74616469    idat    DCD    1952539753
        0x00811610:    2e676e69    ing.    DCD    778530409
        0x00811614:    00000000    ....    DCD    0
        0x00811618:    0081caf4    ....    DCD    8506100
        0x0081161c:    205d455b    [E]     DCD    542983515
        0x00811620:    41595554    TUYA    DCD    1096373588
        0x00811624:    454c425f    _BLE    DCD    1162625631
        0x00811628:    7574203a    : tu    DCD    1970544698
        0x0081162c:    6f5f6179    ya_o    DCD    1868521849
        0x00811630:    655f6174    ta_e    DCD    1700749684
        0x00811634:    725f646e    nd_r    DCD    1918854254
        0x00811638:    6f707365    espo    DCD    1869640549
        0x0081163c:    2065736e    nse     DCD    543519598
        0x00811640:    6c696166    fail    DCD    1818845542
        0x00811644:    002e6465    ed..    DCD    3040357
        0x00811648:    205d455b    [E]     DCD    542983515
        0x0081164c:    41595554    TUYA    DCD    1096373588
        0x00811650:    454c425f    _BLE    DCD    1162625631
        0x00811654:    746f203a    : ot    DCD    1953439802
        0x00811658:    72632061    a cr    DCD    1919098977
        0x0081165c:    72652063    c er    DCD    1919230051
        0x00811660:    21726f72    ror!    DCD    561147762
        0x00811664:    00000000    ....    DCD    0
        0x00811668:    08801b18    ....    DCD    142613272
        0x0081166c:    205d495b    [I]     DCD    542984539
        0x00811670:    41595554    TUYA    DCD    1096373588
        0x00811674:    454c425f    _BLE    DCD    1162625631
        0x00811678:    7473203a    : st    DCD    1953701946
        0x0081167c:    20747261    art     DCD    544502369
        0x00811680:    65736572    rese    DCD    1702061426
        0x00811684:    7e7e7e74    t~~~    DCD    2122219124
        0x00811688:    0000002e    ....    DCD    46
        0x0081168c:    205d445b    [D]     DCD    542983259
        0x00811690:    41595554    TUYA    DCD    1096373588
        0x00811694:    454c425f    _BLE    DCD    1162625631
        0x00811698:    746f203a    : ot    DCD    1953439802
        0x0081169c:    6d632061    a cm    DCD    1835212897
        0x008116a0:    203a2064    d :     DCD    540680292
        0x008116a4:    30257830    0x%0    DCD    807761968
        0x008116a8:    2c207834    4x ,    DCD    740325428
        0x008116ac:    63657220     rec    DCD    1667592736
        0x008116b0:    656c5f76    v_le    DCD    1701601142
        0x008116b4:    203a206e    n :     DCD    540680302
        0x008116b8:    00006425    %d..    DCD    25637
        0x008116bc:    205d455b    [E]     DCD    542983515
        0x008116c0:    41595554    TUYA    DCD    1096373588
        0x008116c4:    454c425f    _BLE    DCD    1162625631
        0x008116c8:    7563203a    : cu    DCD    1969430586
        0x008116cc:    6e657272    rren    DCD    1852142194
        0x008116d0:    746f2074    t ot    DCD    1953439860
        0x008116d4:    74732061    a st    DCD    1953701985
        0x008116d8:    73757461    atus    DCD    1937077345
        0x008116dc:    20736920     is     DCD    544434464
        0x008116e0:    41595554    TUYA    DCD    1096373588
        0x008116e4:    41544f5f    _OTA    DCD    1096044383
        0x008116e8:    4154535f    _STA    DCD    1096045407
        0x008116ec:    5f535554    TUS_    DCD    1599296852
        0x008116f0:    454e4f4e    NONE    DCD    1162760014
        0x008116f4:    00000021    !...    DCD    33
        0x008116f8:    0081c994    ....    DCD    8505748
        0x008116fc:    08800fec    ....    DCD    142610412
        0x00811700:    205d455b    [E]     DCD    542983515
        0x00811704:    41595554    TUYA    DCD    1096373588
        0x00811708:    454c425f    _BLE    DCD    1162625631
        0x0081170c:    7574203a    : tu    DCD    1970544698
        0x00811710:    6f5f6179    ya_o    DCD    1868521849
        0x00811714:    735f6174    ta_s    DCD    1935630708
        0x00811718:    74726174    tart    DCD    1953653108
        0x0081171c:    7365725f    _res    DCD    1936028255
        0x00811720:    736e6f70    pons    DCD    1936617328
        0x00811724:    61662065    e fa    DCD    1634082917
        0x00811728:    64656c69    iled    DCD    1684368489
        0x0081172c:    0000002e    ....    DCD    46
    $t
    .text
    tuya_ble_prod_beacon_scan_start
;;; sample\tuya_ble_app\custom_app_product_test.c
;;;25         return TUYA_BLE_SUCCESS;
        0x00811730:    2000        .       MOVS     r0,#0
;;;26     }
        0x00811732:    4770        pG      BX       lr
    tuya_ble_prod_beacon_scan_stop
;;;27     
;;;28     tuya_ble_status_t tuya_ble_prod_beacon_scan_stop(void)
;;;29     {
;;;30         //
;;;31         return TUYA_BLE_SUCCESS;
        0x00811734:    2000        .       MOVS     r0,#0
;;;32     }
        0x00811736:    4770        pG      BX       lr
    tuya_ble_prod_beacon_get_rssi_avg
;;;33     
;;;34     tuya_ble_status_t tuya_ble_prod_beacon_get_rssi_avg(int8_t *rssi)
;;;35     {
;;;36         //
;;;37         *rssi = -30;
        0x00811738:    21e2        .!      MOVS     r1,#0xe2
        0x0081173a:    7001        .p      STRB     r1,[r0,#0]
;;;38         return TUYA_BLE_SUCCESS;
        0x0081173c:    2000        .       MOVS     r0,#0
;;;39     }
        0x0081173e:    4770        pG      BX       lr
    tuya_ble_prod_gpio_test
;;;40     
;;;41     tuya_ble_status_t tuya_ble_prod_gpio_test(void)
;;;42     {
;;;43         //Add gpio test code here
;;;44         return TUYA_BLE_SUCCESS;
        0x00811740:    2000        .       MOVS     r0,#0
;;;45     }
        0x00811742:    4770        pG      BX       lr
    tuya_ble_custom_app_production_test_process
;;;46     
;;;47     void tuya_ble_custom_app_production_test_process(uint8_t channel,uint8_t *p_in_data,uint16_t in_len)
;;;48     {
;;;49         uint16_t cmd = 0;
;;;50         uint8_t *data_buffer = NULL;
;;;51         uint16_t data_len = ((p_in_data[4]<<8) + p_in_data[5]);
;;;52            
;;;53         if((p_in_data[6] != 3)||(data_len<3))
;;;54             return;
;;;55         
;;;56         cmd = (p_in_data[7]<<8) + p_in_data[8];
;;;57         data_len -= 3;
;;;58         if(data_len>0)
;;;59         {
;;;60             data_buffer = p_in_data+9;
;;;61         }
;;;62         
;;;63         switch(cmd)
;;;64         {   
;;;65     
;;;66             //
;;;67             default:
;;;68                 break;
;;;69         };    
;;;70         
;;;71         
;;;72     }
        0x00811744:    4770        pG      BX       lr
    .text
    tuya_ble_custom_app_uart_common_process
;;; sample\tuya_ble_app\custom_app_uart_common_handler.c
;;;94     }
        0x00811746:    4770        pG      BX       lr
    .text
    tuya_ble_callback_queue_register
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_api.c
;;;52     {
        0x00811748:    b510        ..      PUSH     {r4,lr}
        0x0081174a:    4604        .F      MOV      r4,r0
;;;53         tuya_ble_status_t ret;
;;;54     
;;;55         tuya_ble_device_enter_critical();
        0x0081174c:    f009f90c    ....    BL       tuya_ble_device_enter_critical ; 0x81a968
;;;56         if (m_callback_numbers == TUYA_BLE_MAX_CALLBACKS) {
        0x00811750:    4afd        .J      LDR      r2,[pc,#1012] ; [0x811b48] = 0x208fc8
        0x00811752:    7811        .x      LDRB     r1,[r2,#0]
        0x00811754:    2901        .)      CMP      r1,#1
        0x00811756:    d009        ..      BEQ      0x81176c ; tuya_ble_callback_queue_register + 36
;;;57             ret = TUYA_BLE_ERR_RESOURCES;
;;;58         } else {
;;;59             m_cb_queue_table[m_callback_numbers] = (uint32_t)cb_queue;
        0x00811758:    48fc        .H      LDR      r0,[pc,#1008] ; [0x811b4c] = 0x2097a4
        0x0081175a:    f8404021    @.!@    STR      r4,[r0,r1,LSL #2]
        0x0081175e:    1c49        I.      ADDS     r1,r1,#1
;;;60             m_callback_numbers++;
        0x00811760:    7011        .p      STRB     r1,[r2,#0]
;;;61     
;;;62             ret = TUYA_BLE_SUCCESS;
        0x00811762:    2400        .$      MOVS     r4,#0
;;;63         }
;;;64         tuya_ble_device_exit_critical();
        0x00811764:    f009f906    ....    BL       tuya_ble_device_exit_critical ; 0x81a974
;;;65     
;;;66         return ret;
        0x00811768:    4620         F      MOV      r0,r4
;;;67     }
        0x0081176a:    bd10        ..      POP      {r4,pc}
        0x0081176c:    240d        .$      MOVS     r4,#0xd
        0x0081176e:    e7f9        ..      B        0x811764 ; tuya_ble_callback_queue_register + 28
    tuya_ble_event_response
;;;68     
;;;69     
;;;70     /**
;;;71      * @brief   Function for response the event.
;;;72      *
;;;73      * @note    if use os,must be sure to call this function after process one event in queue.
;;;74      *
;;;75      * */
;;;76     tuya_ble_status_t tuya_ble_event_response(tuya_ble_cb_evt_param_t *param)
;;;77     {
;;;78         return tuya_ble_inter_event_response(param);
        0x00811770:    f003bc80    ....    B.W      tuya_ble_inter_event_response ; 0x815074
    tuya_ble_gatt_receive_data
;;;79     }
;;;80     
;;;81     #else
;;;82     
;;;83     
;;;84     extern tuya_ble_callback_t m_cb_table[TUYA_BLE_MAX_CALLBACKS];
;;;85     /**
;;;86      * @brief   Function for registe call back functions.
;;;87      *
;;;88      * @note    appliction should receive the message from the call back registed by this function.
;;;89      *
;;;90      * */
;;;91     tuya_ble_status_t tuya_ble_callback_queue_register(tuya_ble_callback_t cb)
;;;92     {
;;;93         tuya_ble_status_t ret;
;;;94     
;;;95         tuya_ble_device_enter_critical();
;;;96         if (m_callback_numbers == TUYA_BLE_MAX_CALLBACKS) {
;;;97             ret = TUYA_BLE_ERR_RESOURCES;
;;;98         } else {
;;;99             m_cb_table[m_callback_numbers] = cb;
;;;100            m_callback_numbers++;
;;;101    
;;;102            ret = TUYA_BLE_SUCCESS;
;;;103        }
;;;104        tuya_ble_device_exit_critical();
;;;105    
;;;106        return ret;
;;;107    }
;;;108    
;;;109    /**
;;;110     * @brief   Function for get scheduler queue size.
;;;111     *
;;;112     * @note    If it returns 0, it means that the queue has not been initialized.
;;;113     *
;;;114     * */
;;;115    uint16_t tuya_ble_scheduler_queue_size_get(void)
;;;116    {
;;;117        return tuya_ble_sched_queue_size_get();
;;;118    }
;;;119    
;;;120    /**
;;;121     * @brief   Function for get queue free space.
;;;122     *
;;;123     * @note
;;;124     *
;;;125     * */
;;;126    uint16_t tuya_ble_scheduler_queue_space_get(void)
;;;127    {
;;;128        return tuya_ble_sched_queue_space_get();
;;;129    }
;;;130    
;;;131    /**
;;;132     * @brief   Function for get the number of current events in the queue.
;;;133     *
;;;134     * @note
;;;135     *
;;;136     * */
;;;137    uint16_t tuya_ble_scheduler_queue_events_get(void)
;;;138    {
;;;139        return tuya_ble_sched_queue_events_get();
;;;140    }
;;;141    
;;;142    #endif
;;;143    
;;;144    /*
;;;145     *@brief
;;;146     *@param
;;;147     *
;;;148     *@note
;;;149     *
;;;150     * */
;;;151    tuya_ble_status_t tuya_ble_gatt_receive_data(uint8_t *p_data,uint16_t len)
;;;152    {
        0x00811774:    b500        ..      PUSH     {lr}
        0x00811776:    b08b        ..      SUB      sp,sp,#0x2c
        0x00811778:    2200        ."      MOVS     r2,#0
        0x0081177a:    f88d2000    ...     STRB     r2,[sp,#0]
        0x0081177e:    2914        .)      CMP      r1,#0x14
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_api.c (152)
        0x00811780:    d900        ..      BLS      0x811784 ; tuya_ble_gatt_receive_data + 16
;;;153        tuya_ble_evt_param_t event;
;;;154    
;;;155        event.hdr.event = TUYA_BLE_EVT_MTU_DATA_RECEIVE;
;;;156    
;;;157        if(len>TUYA_BLE_DATA_MTU_MAX)
;;;158        {
;;;159            event.mtu_data.len = TUYA_BLE_DATA_MTU_MAX;
        0x00811782:    2114        .!      MOVS     r1,#0x14
;;;160        }
;;;161        else
;;;162        {
;;;163            event.mtu_data.len = len;
        0x00811784:    f88d101c    ....    STRB     r1,[sp,#0x1c]
;;;164        }
;;;165        memcpy(event.mtu_data.data,p_data,event.mtu_data.len);
        0x00811788:    b2ca        ..      UXTB     r2,r1
        0x0081178a:    4601        .F      MOV      r1,r0
        0x0081178c:    a802        ..      ADD      r0,sp,#8
        0x0081178e:    f448f384    H...    BL       __aeabi_memcpy ; 0x59e9a
;;;166        if(tuya_ble_event_send(&event)!=0)
        0x00811792:    4668        hF      MOV      r0,sp
        0x00811794:    f003fc53    ..S.    BL       tuya_ble_event_send ; 0x81503e
        0x00811798:    2800        .(      CMP      r0,#0
        0x0081179a:    d00a        ..      BEQ      0x8117b2 ; tuya_ble_gatt_receive_data + 62
;;;167        {
;;;168            TUYA_BLE_LOG_ERROR("tuya_event_send ble data error,data len = %d ", event.mtu_data.len);
        0x0081179c:    a0ec        ..      ADR      r0,{pc}+0x3b4 ; 0x811b50
        0x0081179e:    f009fa04    ....    BL       get_args ; 0x81abaa
        0x008117a2:    4602        .F      MOV      r2,r0
        0x008117a4:    f89d301c    ...0    LDRB     r3,[sp,#0x1c]
        0x008117a8:    49f8        .I      LDR      r1,[pc,#992] ; [0x811b8c] = 0x8801d50
        0x008117aa:    48f9        .H      LDR      r0,[pc,#996] ; [0x811b90] = 0x21103002
        0x008117ac:    f7f6d957    ..W.    BL       log_buffer ; 0x7a5e
;;;169            return TUYA_BLE_ERR_INTERNAL;
        0x008117b0:    2001        .       MOVS     r0,#1
;;;170        }
;;;171    
;;;172        return TUYA_BLE_SUCCESS;
;;;173    }
        0x008117b2:    b00b        ..      ADD      sp,sp,#0x2c
        0x008117b4:    bd00        ..      POP      {pc}
    tuya_ble_common_uart_data_unpack
;;;174    
;;;175    
;;;176    /*
;;;177     *@brief Function for receive uart data.
;;;178     *@param
;;;179     *
;;;180     *@note
;;;181     *
;;;182     * */
;;;183    
;;;184    typedef enum {
;;;185        TUYA_BLE_UART_REV_STATE_FOUND_NULL,
;;;186        TUYA_BLE_UART_REV_STATE_FOUND_HEAD,
;;;187        TUYA_BLE_UART_REV_STATE_FOUND_CMD,
;;;188        TUYA_BLE_UART_REV_STATE_FOUND_LEN_H,
;;;189        TUYA_BLE_UART_REV_STATE_FOUND_LEN_L,
;;;190        TUYA_BLE_UART_REV_STATE_FOUND_DATA,
;;;191        TUYA_BLE_UART_REV_STATE_UNKOWN,
;;;192    } tuya_ble_uart_rev_state_type_t;
;;;193    
;;;194    #define UART_RX_BUFFER_MAX   300
;;;195    #define UART_RX_DATA_LEN_MAX 249
;;;196    static volatile tuya_ble_uart_rev_state_type_t current_uart_rev_state_type = TUYA_BLE_UART_REV_STATE_FOUND_NULL;
;;;197    static uint8_t UART_RX_Buffer[UART_RX_BUFFER_MAX];
;;;198    static uint8_t UART_RX_Buffer_temp[3] = {0};
;;;199    static uint16_t uart_data_len =  0;
;;;200    static volatile uint16_t UART_RX_Count = 0;
;;;201    
;;;202    
;;;203    static bool tuya_ble_common_uart_data_unpack(uint8_t data)
;;;204    {
        0x008117b6:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x008117ba:    4ae3        .J      LDR      r2,[pc,#908] ; [0x811b48] = 0x208fc8
        0x008117bc:    4605        .F      MOV      r5,r0
        0x008117be:    1d92        ..      ADDS     r2,r2,#6
;;;205        bool ret = false;
        0x008117c0:    2700        .'      MOVS     r7,#0
;;;206    
;;;207        UART_RX_Buffer_temp[0] = UART_RX_Buffer_temp[1];
        0x008117c2:    7850        Px      LDRB     r0,[r2,#1]
        0x008117c4:    7010        .p      STRB     r0,[r2,#0]
;;;208        UART_RX_Buffer_temp[1] = UART_RX_Buffer_temp[2];
        0x008117c6:    7893        .x      LDRB     r3,[r2,#2]
        0x008117c8:    7053        Sp      STRB     r3,[r2,#1]
        0x008117ca:    1f94        ..      SUBS     r4,r2,#6
;;;209        UART_RX_Buffer_temp[2] = data;
        0x008117cc:    7095        .p      STRB     r5,[r2,#2]
        0x008117ce:    463e        >F      MOV      r6,r7
        0x008117d0:    f44f7196    O..q    MOV      r1,#0x12c
        0x008117d4:    f04f0903    O...    MOV      r9,#3
;;;210    
;;;211        if(((UART_RX_Buffer_temp[0]==0x55)||(UART_RX_Buffer_temp[0]==0x66))&&(UART_RX_Buffer_temp[1]==0xAA)&&((UART_RX_Buffer_temp[2]==0x00)||(UART_RX_Buffer_temp[2]==0x01)))
        0x008117d8:    2855        U(      CMP      r0,#0x55
        0x008117da:    d001        ..      BEQ      0x8117e0 ; tuya_ble_common_uart_data_unpack + 42
        0x008117dc:    2866        f(      CMP      r0,#0x66
        0x008117de:    d106        ..      BNE      0x8117ee ; tuya_ble_common_uart_data_unpack + 56
        0x008117e0:    2baa        .+      CMP      r3,#0xaa
        0x008117e2:    d104        ..      BNE      0x8117ee ; tuya_ble_common_uart_data_unpack + 56
        0x008117e4:    4690        .F      MOV      r8,r2
        0x008117e6:    0028        (.      MOVS     r0,r5
        0x008117e8:    d00d        ..      BEQ      0x811806 ; tuya_ble_common_uart_data_unpack + 80
        0x008117ea:    2d01        .-      CMP      r5,#1
        0x008117ec:    d00b        ..      BEQ      0x811806 ; tuya_ble_common_uart_data_unpack + 80
        0x008117ee:    7863        cx      LDRB     r3,[r4,#1]
;;;212        {
;;;213            memset(UART_RX_Buffer,0,sizeof(UART_RX_Buffer));
        0x008117f0:    48d5        .H      LDR      r0,[pc,#852] ; [0x811b48] = 0x208fc8
        0x008117f2:    f04f0805    O...    MOV      r8,#5
        0x008117f6:    3010        .0      ADDS     r0,r0,#0x10
        0x008117f8:    2b06        .+      CMP      r3,#6
        0x008117fa:    d239        9.      BCS      0x811870 ; tuya_ble_common_uart_data_unpack + 186
        0x008117fc:    e8dff003    ....    TBB      [pc,r3]
    $d
        0x00811800:    241d165a    Z..$    DCD    605886042
        0x00811804:    5446        FT      DCW    21574
    $t
        0x00811806:    48d0        .H      LDR      r0,[pc,#832] ; [0x811b48] = 0x208fc8
        0x00811808:    3010        .0      ADDS     r0,r0,#0x10
        0x0081180a:    f448f429    H.).    BL       __aeabi_memclr4 ; 0x5a060
;;;214            memcpy(UART_RX_Buffer,UART_RX_Buffer_temp,3);
        0x0081180e:    88e0        ..      LDRH     r0,[r4,#6]
        0x00811810:    8220         .      STRH     r0,[r4,#0x10]
        0x00811812:    74a5        .t      STRB     r5,[r4,#0x12]
;;;215            memset(UART_RX_Buffer_temp,0,3);
        0x00811814:    f8a86000    ...`    STRH     r6,[r8,#0]
        0x00811818:    f8886002    ...`    STRB     r6,[r8,#2]
        0x0081181c:    4630        0F      MOV      r0,r6
;;;216            UART_RX_Count = 3;
        0x0081181e:    f8a49004    ....    STRH     r9,[r4,#4]
;;;217            current_uart_rev_state_type = TUYA_BLE_UART_REV_STATE_FOUND_HEAD;
        0x00811822:    2101        .!      MOVS     r1,#1
        0x00811824:    7061        ap      STRB     r1,[r4,#1]
;;;218            uart_data_len = 0;
        0x00811826:    8066        f.      STRH     r6,[r4,#2]
        0x00811828:    e8bd87f0    ....    POP      {r4-r10,pc}
;;;219            return ret;
;;;220        }
;;;221    
;;;222        switch(current_uart_rev_state_type)
;;;223        {
;;;224        case TUYA_BLE_UART_REV_STATE_FOUND_NULL:
;;;225            break;
;;;226        case TUYA_BLE_UART_REV_STATE_FOUND_HEAD:
;;;227            UART_RX_Buffer[UART_RX_Count++] = data;
        0x0081182c:    88a1        ..      LDRH     r1,[r4,#4]
        0x0081182e:    4408        .D      ADD      r0,r0,r1
        0x00811830:    1c49        I.      ADDS     r1,r1,#1
        0x00811832:    80a1        ..      STRH     r1,[r4,#4]
        0x00811834:    7005        .p      STRB     r5,[r0,#0]
;;;228            current_uart_rev_state_type = TUYA_BLE_UART_REV_STATE_FOUND_CMD;
        0x00811836:    2002        .       MOVS     r0,#2
;;;229            break;
        0x00811838:    e026        &.      B        0x811888 ; tuya_ble_common_uart_data_unpack + 210
;;;230        case TUYA_BLE_UART_REV_STATE_FOUND_CMD:
;;;231            UART_RX_Buffer[UART_RX_Count++] = data;
        0x0081183a:    88a1        ..      LDRH     r1,[r4,#4]
        0x0081183c:    4408        .D      ADD      r0,r0,r1
        0x0081183e:    1c49        I.      ADDS     r1,r1,#1
        0x00811840:    80a1        ..      STRH     r1,[r4,#4]
        0x00811842:    7005        .p      STRB     r5,[r0,#0]
;;;232            current_uart_rev_state_type = TUYA_BLE_UART_REV_STATE_FOUND_LEN_H;
        0x00811844:    4648        HF      MOV      r0,r9
;;;233            break;
        0x00811846:    e01f        ..      B        0x811888 ; tuya_ble_common_uart_data_unpack + 210
;;;234        case TUYA_BLE_UART_REV_STATE_FOUND_LEN_H:
;;;235            UART_RX_Buffer[UART_RX_Count++] = data;
        0x00811848:    88a3        ..      LDRH     r3,[r4,#4]
        0x0081184a:    eb000c03    ....    ADD      r12,r0,r3
        0x0081184e:    1c5b        [.      ADDS     r3,r3,#1
        0x00811850:    80a3        ..      STRH     r3,[r4,#4]
        0x00811852:    f88c5000    ...P    STRB     r5,[r12,#0]
;;;236            uart_data_len = (UART_RX_Buffer[UART_RX_Count-2]<<8)|UART_RX_Buffer[UART_RX_Count-1];
        0x00811856:    88a3        ..      LDRH     r3,[r4,#4]
        0x00811858:    88a5        ..      LDRH     r5,[r4,#4]
        0x0081185a:    4403        .D      ADD      r3,r3,r0
        0x0081185c:    f8133c01    ...<    LDRB     r3,[r3,#-1]
        0x00811860:    4428        (D      ADD      r0,r0,r5
        0x00811862:    f8100c02    ....    LDRB     r0,[r0,#-2]
        0x00811866:    ea432000    C..     ORR      r0,r3,r0,LSL #8
        0x0081186a:    8060        `.      STRH     r0,[r4,#2]
;;;237            if(uart_data_len>UART_RX_DATA_LEN_MAX)
        0x0081186c:    28f9        .(      CMP      r0,#0xf9
        0x0081186e:    d909        ..      BLS      0x811884 ; tuya_ble_common_uart_data_unpack + 206
        0x00811870:    48b5        .H      LDR      r0,[pc,#724] ; [0x811b48] = 0x208fc8
;;;238            {
;;;239                memset(UART_RX_Buffer_temp,0,3);
        0x00811872:    8016        ..      STRH     r6,[r2,#0]
        0x00811874:    7096        .p      STRB     r6,[r2,#2]
;;;240                memset(UART_RX_Buffer,0,sizeof(UART_RX_Buffer));
        0x00811876:    3010        .0      ADDS     r0,r0,#0x10
        0x00811878:    f448f3f2    H...    BL       __aeabi_memclr4 ; 0x5a060
;;;241                UART_RX_Count = 0;
        0x0081187c:    80a6        ..      STRH     r6,[r4,#4]
;;;242                current_uart_rev_state_type = TUYA_BLE_UART_REV_STATE_FOUND_NULL;
        0x0081187e:    7066        fp      STRB     r6,[r4,#1]
;;;243                uart_data_len = 0;
        0x00811880:    8066        f.      STRH     r6,[r4,#2]
        0x00811882:    e017        ..      B        0x8118b4 ; tuya_ble_common_uart_data_unpack + 254
;;;244            }
;;;245            else if(uart_data_len>0)
        0x00811884:    b168        h.      CBZ      r0,0x8118a2 ; tuya_ble_common_uart_data_unpack + 236
;;;246            {
;;;247                current_uart_rev_state_type = TUYA_BLE_UART_REV_STATE_FOUND_LEN_L;
        0x00811886:    2004        .       MOVS     r0,#4
        0x00811888:    7060        `p      STRB     r0,[r4,#1]
        0x0081188a:    e013        ..      B        0x8118b4 ; tuya_ble_common_uart_data_unpack + 254
;;;248            }
;;;249            else
;;;250            {
;;;251                current_uart_rev_state_type = TUYA_BLE_UART_REV_STATE_FOUND_DATA;
;;;252            }
;;;253            break;
;;;254        case TUYA_BLE_UART_REV_STATE_FOUND_LEN_L:
;;;255            UART_RX_Buffer[UART_RX_Count++] = data;   //DATA
        0x0081188c:    88a1        ..      LDRH     r1,[r4,#4]
        0x0081188e:    4408        .D      ADD      r0,r0,r1
        0x00811890:    1c49        I.      ADDS     r1,r1,#1
        0x00811892:    80a1        ..      STRH     r1,[r4,#4]
        0x00811894:    7005        .p      STRB     r5,[r0,#0]
;;;256            uart_data_len--;
        0x00811896:    8860        `.      LDRH     r0,[r4,#2]
        0x00811898:    1e40        @.      SUBS     r0,r0,#1
        0x0081189a:    0400        ..      LSLS     r0,r0,#16
        0x0081189c:    0c00        ..      LSRS     r0,r0,#16
        0x0081189e:    8060        `.      STRH     r0,[r4,#2]
;;;257            if(uart_data_len==0)
        0x008118a0:    d108        ..      BNE      0x8118b4 ; tuya_ble_common_uart_data_unpack + 254
;;;258            {
;;;259                current_uart_rev_state_type = TUYA_BLE_UART_REV_STATE_FOUND_DATA;
        0x008118a2:    f8848001    ....    STRB     r8,[r4,#1]
        0x008118a6:    e005        ..      B        0x8118b4 ; tuya_ble_common_uart_data_unpack + 254
;;;260            }
;;;261            break;
;;;262        case TUYA_BLE_UART_REV_STATE_FOUND_DATA:
;;;263            UART_RX_Buffer[UART_RX_Count++] = data;  //sum data
        0x008118a8:    88a1        ..      LDRH     r1,[r4,#4]
        0x008118aa:    4408        .D      ADD      r0,r0,r1
        0x008118ac:    1c49        I.      ADDS     r1,r1,#1
        0x008118ae:    80a1        ..      STRH     r1,[r4,#4]
        0x008118b0:    7005        .p      STRB     r5,[r0,#0]
;;;264            ret = true;
        0x008118b2:    2701        .'      MOVS     r7,#1
;;;265            break;
;;;266        default:
;;;267            memset(UART_RX_Buffer_temp,0,3);
;;;268            memset(UART_RX_Buffer,0,sizeof(UART_RX_Buffer));
;;;269            UART_RX_Count = 0;
;;;270            current_uart_rev_state_type = TUYA_BLE_UART_REV_STATE_FOUND_NULL;
;;;271            uart_data_len = 0;
;;;272            break;
;;;273        };
;;;274    
;;;275        return ret;
        0x008118b4:    4638        8F      MOV      r0,r7
;;;276    
;;;277    }
        0x008118b6:    e7b7        ..      B        0x811828 ; tuya_ble_common_uart_data_unpack + 114
    tuya_ble_common_uart_receive_data
;;;278    
;;;279    tuya_ble_status_t tuya_ble_common_uart_receive_data(uint8_t *p_data,uint16_t len)
;;;280    {
        0x008118b8:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x008118bc:    2502        .%      MOVS     r5,#2
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_api.c (280)
        0x008118be:    b08c        ..      SUB      sp,sp,#0x30
        0x008118c0:    4688        .F      MOV      r8,r1
        0x008118c2:    4681        .F      MOV      r9,r0
        0x008118c4:    2400        .$      MOVS     r4,#0
        0x008118c6:    f8dfa2c8    ....    LDR      r10,[pc,#712] ; [0x811b90] = 0x21103002
        0x008118ca:    4f9f        .O      LDR      r7,[pc,#636] ; [0x811b48] = 0x208fc8
        0x008118cc:    e044        D.      B        0x811958 ; tuya_ble_common_uart_receive_data + 160
;;;281        tuya_ble_status_t ret = TUYA_BLE_ERR_NOT_FOUND;
;;;282        tuya_ble_evt_param_t event;
;;;283        uint8_t* uart_evt_buffer;
;;;284        uint16_t i;
;;;285    
;;;286        for(i=0; i<len; i++)
;;;287        {
;;;288            if(tuya_ble_common_uart_data_unpack(p_data[i]))
        0x008118ce:    f8190004    ....    LDRB     r0,[r9,r4]
        0x008118d2:    f7ffff70    ..p.    BL       tuya_ble_common_uart_data_unpack ; 0x8117b6
        0x008118d6:    2800        .(      CMP      r0,#0
        0x008118d8:    d03c        <.      BEQ      0x811954 ; tuya_ble_common_uart_receive_data + 156
;;;289            {
;;;290    
;;;291                uart_evt_buffer=(uint8_t*)tuya_ble_malloc(UART_RX_Count);
        0x008118da:    88b8        ..      LDRH     r0,[r7,#4]
        0x008118dc:    f003fd58    ..X.    BL       tuya_ble_malloc ; 0x815390
        0x008118e0:    0005        ..      MOVS     r5,r0
;;;292    
;;;293                if(uart_evt_buffer==NULL)
        0x008118e2:    d01e        ..      BEQ      0x811922 ; tuya_ble_common_uart_receive_data + 106
;;;294                {
;;;295                    TUYA_BLE_LOG_ERROR("tuya_MemGet uart evt buffer fail.");
;;;296                    ret = TUYA_BLE_ERR_NO_MEM;
;;;297                }
;;;298                else
;;;299                {
;;;300                    event.hdr.event = TUYA_BLE_EVT_UART_CMD;
        0x008118e4:    200c        .       MOVS     r0,#0xc
        0x008118e6:    f88d0000    ....    STRB     r0,[sp,#0]
;;;301    
;;;302                    event.uart_cmd_data.data_len = UART_RX_Count;
        0x008118ea:    88ba        ..      LDRH     r2,[r7,#4]
        0x008118ec:    4996        .I      LDR      r1,[pc,#600] ; [0x811b48] = 0x208fc8
        0x008118ee:    f8ad200c    ...     STRH     r2,[sp,#0xc]
;;;303    
;;;304                    event.uart_cmd_data.p_data = uart_evt_buffer;
;;;305    
;;;306                    memcpy(event.uart_cmd_data.p_data,&UART_RX_Buffer[0],event.uart_cmd_data.data_len);
        0x008118f2:    4628        (F      MOV      r0,r5
        0x008118f4:    3110        .1      ADDS     r1,r1,#0x10
        0x008118f6:    9504        ..      STR      r5,[sp,#0x10]
        0x008118f8:    f448f2cf    H...    BL       __aeabi_memcpy ; 0x59e9a
;;;307    
;;;308                    if(tuya_ble_event_send(&event)!=0)
        0x008118fc:    4668        hF      MOV      r0,sp
        0x008118fe:    f003fb9e    ....    BL       tuya_ble_event_send ; 0x81503e
        0x00811902:    2800        .(      CMP      r0,#0
        0x00811904:    d018        ..      BEQ      0x811938 ; tuya_ble_common_uart_receive_data + 128
;;;309                    {
;;;310                        TUYA_BLE_LOG_ERROR("tuya_event_send uart data error.");
        0x00811906:    a0a3        ..      ADR      r0,{pc}+0x28e ; 0x811b94
        0x00811908:    f009f94f    ..O.    BL       get_args ; 0x81abaa
        0x0081190c:    499f        .I      LDR      r1,[pc,#636] ; [0x811b8c] = 0x8801d50
        0x0081190e:    4602        .F      MOV      r2,r0
        0x00811910:    316c        l1      ADDS     r1,r1,#0x6c
        0x00811912:    4650        PF      MOV      r0,r10
        0x00811914:    f7f6d8a3    ....    BL       log_buffer ; 0x7a5e
;;;311                        tuya_ble_free(uart_evt_buffer);
        0x00811918:    4628        (F      MOV      r0,r5
        0x0081191a:    f003fd44    ..D.    BL       tuya_ble_free ; 0x8153a6
;;;312                        ret = TUYA_BLE_ERR_BUSY;
        0x0081191e:    250b        .%      MOVS     r5,#0xb
        0x00811920:    e00b        ..      B        0x81193a ; tuya_ble_common_uart_receive_data + 130
        0x00811922:    a0a8        ..      ADR      r0,{pc}+0x2a2 ; 0x811bc4
        0x00811924:    f009f941    ..A.    BL       get_args ; 0x81abaa
        0x00811928:    4998        .I      LDR      r1,[pc,#608] ; [0x811b8c] = 0x8801d50
        0x0081192a:    4602        .F      MOV      r2,r0
        0x0081192c:    313c        <1      ADDS     r1,r1,#0x3c
        0x0081192e:    4650        PF      MOV      r0,r10
        0x00811930:    f7f6d895    ....    BL       log_buffer ; 0x7a5e
        0x00811934:    2504        .%      MOVS     r5,#4
        0x00811936:    e000        ..      B        0x81193a ; tuya_ble_common_uart_receive_data + 130
;;;313                    }
;;;314                    else
;;;315                    {
;;;316                        ret = TUYA_BLE_SUCCESS;
        0x00811938:    2500        .%      MOVS     r5,#0
;;;317                    }
;;;318                }
;;;319                memset(UART_RX_Buffer_temp,0,3);
        0x0081193a:    4883        .H      LDR      r0,[pc,#524] ; [0x811b48] = 0x208fc8
        0x0081193c:    2600        .&      MOVS     r6,#0
        0x0081193e:    1d80        ..      ADDS     r0,r0,#6
        0x00811940:    f44f7196    O..q    MOV      r1,#0x12c
        0x00811944:    8006        ..      STRH     r6,[r0,#0]
        0x00811946:    7086        .p      STRB     r6,[r0,#2]
;;;320                memset(UART_RX_Buffer,0,sizeof(UART_RX_Buffer));
        0x00811948:    300a        .0      ADDS     r0,r0,#0xa
        0x0081194a:    f448f389    H...    BL       __aeabi_memclr4 ; 0x5a060
;;;321                UART_RX_Count = 0;
        0x0081194e:    80be        ..      STRH     r6,[r7,#4]
;;;322                current_uart_rev_state_type = TUYA_BLE_UART_REV_STATE_FOUND_NULL;
        0x00811950:    707e        ~p      STRB     r6,[r7,#1]
;;;323                uart_data_len = 0;
        0x00811952:    807e        ~.      STRH     r6,[r7,#2]
        0x00811954:    1c64        d.      ADDS     r4,r4,#1
        0x00811956:    b2a4        ..      UXTH     r4,r4
        0x00811958:    4544        DE      CMP      r4,r8
        0x0081195a:    d3b8        ..      BCC      0x8118ce ; tuya_ble_common_uart_receive_data + 22
;;;324    
;;;325            }
;;;326        }
;;;327    
;;;328        return ret;
        0x0081195c:    4628        (F      MOV      r0,r5
;;;329    }
        0x0081195e:    b00c        ..      ADD      sp,sp,#0x30
        0x00811960:    e762        b.      B        0x811828 ; tuya_ble_common_uart_data_unpack + 114
    tuya_ble_common_uart_send_full_instruction_received
;;;330    
;;;331    
;;;332    /**
;;;333     * @brief   Function for send the full instruction received from uart to the sdk.
;;;334     *
;;;335     * @param
;;;336     *          [in]p_data  : pointer to full instruction data(Complete instruction,include0x55 or 0x66 0xaa and checksum.)
;;;337     *          [in]len     : Number of bytes of pdata.
;;;338     *
;;;339     * @note    If the application uses a custom uart parsing algorithm to obtain the full uart instruction,then call this function to send the full instruction.
;;;340     *
;;;341     * */
;;;342    tuya_ble_status_t tuya_ble_common_uart_send_full_instruction_received(uint8_t *p_data,uint16_t len)
;;;343    {
        0x00811962:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x00811966:    2400        .$      MOVS     r4,#0
        0x00811968:    b08c        ..      SUB      sp,sp,#0x30
        0x0081196a:    4680        .F      MOV      r8,r0
        0x0081196c:    460e        .F      MOV      r6,r1
        0x0081196e:    2907        .)      CMP      r1,#7
        0x00811970:    d305        ..      BCC      0x81197e ; tuya_ble_common_uart_send_full_instruction_received + 28
;;;344        tuya_ble_status_t ret = TUYA_BLE_SUCCESS;
;;;345        tuya_ble_evt_param_t event;
;;;346        uint16_t rev_len,data_len;
;;;347        uint8_t* uart_evt_buffer;
;;;348    
;;;349        if(len<7)
;;;350        {
;;;351            return TUYA_BLE_ERR_INVALID_PARAM;
;;;352        }
;;;353    
;;;354        if((p_data[0]!=0x55)&&(p_data[0]!=0x66))
        0x00811972:    f8980000    ....    LDRB     r0,[r8,#0]
        0x00811976:    2855        U(      CMP      r0,#0x55
        0x00811978:    d005        ..      BEQ      0x811986 ; tuya_ble_common_uart_send_full_instruction_received + 36
        0x0081197a:    2866        f(      CMP      r0,#0x66
        0x0081197c:    d003        ..      BEQ      0x811986 ; tuya_ble_common_uart_send_full_instruction_received + 36
;;;355        {
;;;356            return TUYA_BLE_ERR_INVALID_PARAM;
        0x0081197e:    2006        .       MOVS     r0,#6
        0x00811980:    b00c        ..      ADD      sp,sp,#0x30
        0x00811982:    e8bd81f0    ....    POP      {r4-r8,pc}
;;;357        }
;;;358    
;;;359        uart_evt_buffer=(uint8_t*)tuya_ble_malloc(len);
        0x00811986:    4608        .F      MOV      r0,r1
        0x00811988:    f003fd02    ....    BL       tuya_ble_malloc ; 0x815390
        0x0081198c:    4f80        .O      LDR      r7,[pc,#512] ; [0x811b90] = 0x21103002
        0x0081198e:    0005        ..      MOVS     r5,r0
;;;360    
;;;361        if(uart_evt_buffer==NULL)
        0x00811990:    d01d        ..      BEQ      0x8119ce ; tuya_ble_common_uart_send_full_instruction_received + 108
;;;362        {
;;;363            TUYA_BLE_LOG_ERROR("tuya_MemGet uart evt buffer fail.");
;;;364            ret = TUYA_BLE_ERR_NO_MEM;
;;;365        }
;;;366        else
;;;367        {
;;;368            event.hdr.event = TUYA_BLE_EVT_UART_CMD;
        0x00811992:    200c        .       MOVS     r0,#0xc
        0x00811994:    f88d0000    ....    STRB     r0,[sp,#0]
;;;369    
;;;370            event.uart_cmd_data.data_len = len;
        0x00811998:    f8ad600c    ...`    STRH     r6,[sp,#0xc]
;;;371    
;;;372            event.uart_cmd_data.p_data = uart_evt_buffer;
;;;373    
;;;374            memcpy(event.uart_cmd_data.p_data,p_data,len);
        0x0081199c:    4628        (F      MOV      r0,r5
        0x0081199e:    4632        2F      MOV      r2,r6
        0x008119a0:    4641        AF      MOV      r1,r8
        0x008119a2:    9504        ..      STR      r5,[sp,#0x10]
        0x008119a4:    f448f279    H.y.    BL       __aeabi_memcpy ; 0x59e9a
;;;375    
;;;376            if(tuya_ble_event_send(&event)!=0)
        0x008119a8:    4668        hF      MOV      r0,sp
        0x008119aa:    f003fb48    ..H.    BL       tuya_ble_event_send ; 0x81503e
        0x008119ae:    b160        `.      CBZ      r0,0x8119ca ; tuya_ble_common_uart_send_full_instruction_received + 104
;;;377            {
;;;378                TUYA_BLE_LOG_ERROR("tuya_event_send uart full cmd error.");
        0x008119b0:    a090        ..      ADR      r0,{pc}+0x244 ; 0x811bf4
        0x008119b2:    f009f8fa    ....    BL       get_args ; 0x81abaa
        0x008119b6:    4975        uI      LDR      r1,[pc,#468] ; [0x811b8c] = 0x8801d50
        0x008119b8:    4602        .F      MOV      r2,r0
        0x008119ba:    31cc        .1      ADDS     r1,r1,#0xcc
        0x008119bc:    4638        8F      MOV      r0,r7
        0x008119be:    f7f6d84e    ..N.    BL       log_buffer ; 0x7a5e
;;;379                tuya_ble_free(uart_evt_buffer);
        0x008119c2:    4628        (F      MOV      r0,r5
        0x008119c4:    f003fcef    ....    BL       tuya_ble_free ; 0x8153a6
;;;380                ret = TUYA_BLE_ERR_BUSY;
        0x008119c8:    240b        .$      MOVS     r4,#0xb
;;;381            }
;;;382        }
;;;383    
;;;384        return ret;
        0x008119ca:    4620         F      MOV      r0,r4
;;;385    }
        0x008119cc:    e7d8        ..      B        0x811980 ; tuya_ble_common_uart_send_full_instruction_received + 30
        0x008119ce:    a07d        }.      ADR      r0,{pc}+0x1f6 ; 0x811bc4
        0x008119d0:    f009f8eb    ....    BL       get_args ; 0x81abaa
        0x008119d4:    496d        mI      LDR      r1,[pc,#436] ; [0x811b8c] = 0x8801d50
        0x008119d6:    4602        .F      MOV      r2,r0
        0x008119d8:    319c        .1      ADDS     r1,r1,#0x9c
        0x008119da:    4638        8F      MOV      r0,r7
        0x008119dc:    f7f6d83f    ..?.    BL       log_buffer ; 0x7a5e
        0x008119e0:    2404        .$      MOVS     r4,#4
        0x008119e2:    e7f2        ..      B        0x8119ca ; tuya_ble_common_uart_send_full_instruction_received + 104
    tuya_ble_device_update_product_id
;;;386    
;;;387    
;;;388    
;;;389    
;;;390    /*
;;;391     *@brief
;;;392     *@param
;;;393     *
;;;394     *@note
;;;395     *
;;;396     * */
;;;397    tuya_ble_status_t tuya_ble_device_update_product_id(tuya_ble_product_id_type_t type, uint8_t len, uint8_t* p_buf)
;;;398    {
        0x008119e4:    b500        ..      PUSH     {lr}
        0x008119e6:    b08b        ..      SUB      sp,sp,#0x2c
        0x008119e8:    4613        .F      MOV      r3,r2
        0x008119ea:    b1f9        ..      CBZ      r1,0x811a2c ; tuya_ble_device_update_product_id + 72
;;;399        tuya_ble_evt_param_t event;
;;;400    
;;;401        if(len==0)
;;;402        {
;;;403            return TUYA_BLE_ERR_INVALID_PARAM;
;;;404        }
;;;405    
;;;406        if(len>TUYA_BLE_PRODUCT_ID_MAX_LEN)
        0x008119ec:    2910        .)      CMP      r1,#0x10
        0x008119ee:    d900        ..      BLS      0x8119f2 ; tuya_ble_device_update_product_id + 14
;;;407        {
;;;408            len = TUYA_BLE_PRODUCT_ID_MAX_LEN;
        0x008119f0:    2110        .!      MOVS     r1,#0x10
;;;409        }
;;;410    
;;;411        event.hdr.event = TUYA_BLE_EVT_DEVICE_INFO_UPDATE;
        0x008119f2:    2201        ."      MOVS     r2,#1
        0x008119f4:    f88d2000    ...     STRB     r2,[sp,#0]
;;;412    
;;;413        if(type==TUYA_BLE_PRODUCT_ID_TYPE_PID)
        0x008119f8:    b1d0        ..      CBZ      r0,0x811a30 ; tuya_ble_device_update_product_id + 76
;;;414        {
;;;415            event.device_info_data.type = DEVICE_INFO_TYPE_PID;
;;;416        }
;;;417        else
;;;418        {
;;;419            event.device_info_data.type = DEVICE_INFO_TYPE_PRODUCT_KEY;
        0x008119fa:    f88d2008    ...     STRB     r2,[sp,#8]
;;;420        }
;;;421    
;;;422        event.device_info_data.len = len;
        0x008119fe:    f88d1009    ....    STRB     r1,[sp,#9]
;;;423        memcpy(event.device_info_data.data,p_buf,len);
        0x00811a02:    460a        .F      MOV      r2,r1
        0x00811a04:    4619        .F      MOV      r1,r3
        0x00811a06:    f10d000a    ....    ADD      r0,sp,#0xa
        0x00811a0a:    f448f246    H.F.    BL       __aeabi_memcpy ; 0x59e9a
;;;424        if(tuya_ble_event_send(&event)!=0)
        0x00811a0e:    4668        hF      MOV      r0,sp
        0x00811a10:    f003fb15    ....    BL       tuya_ble_event_send ; 0x81503e
        0x00811a14:    2800        .(      CMP      r0,#0
        0x00811a16:    d008        ..      BEQ      0x811a2a ; tuya_ble_device_update_product_id + 70
;;;425        {
;;;426            TUYA_BLE_LOG_ERROR("tuya_event_send product id update error");
        0x00811a18:    a083        ..      ADR      r0,{pc}+0x210 ; 0x811c28
        0x00811a1a:    f009f8c6    ....    BL       get_args ; 0x81abaa
        0x00811a1e:    4602        .F      MOV      r2,r0
        0x00811a20:    498f        .I      LDR      r1,[pc,#572] ; [0x811c60] = 0x8801e50
        0x00811a22:    485b        [H      LDR      r0,[pc,#364] ; [0x811b90] = 0x21103002
        0x00811a24:    f7f6d81b    ....    BL       log_buffer ; 0x7a5e
;;;427            return TUYA_BLE_ERR_INTERNAL;
        0x00811a28:    2001        .       MOVS     r0,#1
;;;428        }
;;;429    
;;;430        return TUYA_BLE_SUCCESS;
;;;431    }
        0x00811a2a:    e6c2        ..      B        0x8117b2 ; tuya_ble_gatt_receive_data + 62
        0x00811a2c:    2006        .       MOVS     r0,#6
        0x00811a2e:    e6c0        ..      B        0x8117b2 ; tuya_ble_gatt_receive_data + 62
        0x00811a30:    2000        .       MOVS     r0,#0
        0x00811a32:    f88d0008    ....    STRB     r0,[sp,#8]
        0x00811a36:    e7e2        ..      B        0x8119fe ; tuya_ble_device_update_product_id + 26
    tuya_ble_device_update_login_key
;;;432    
;;;433    
;;;434    /*
;;;435     *@brief
;;;436     *@param
;;;437     *
;;;438     *@note
;;;439     *
;;;440     * */
;;;441    tuya_ble_status_t tuya_ble_device_update_login_key(uint8_t* p_buf, uint8_t len)
;;;442    {
        0x00811a38:    b500        ..      PUSH     {lr}
        0x00811a3a:    b08b        ..      SUB      sp,sp,#0x2c
;;;443        tuya_ble_evt_param_t event;
;;;444    
;;;445        event.hdr.event = TUYA_BLE_EVT_DEVICE_INFO_UPDATE;
        0x00811a3c:    2201        ."      MOVS     r2,#1
        0x00811a3e:    f88d2000    ...     STRB     r2,[sp,#0]
;;;446    
;;;447        event.device_info_data.type = DEVICE_INFO_TYPE_LOGIN_KEY;
        0x00811a42:    2202        ."      MOVS     r2,#2
        0x00811a44:    f88d2008    ...     STRB     r2,[sp,#8]
;;;448    
;;;449        if(len<LOGIN_KEY_LEN)
        0x00811a48:    2906        .)      CMP      r1,#6
        0x00811a4a:    d201        ..      BCS      0x811a50 ; tuya_ble_device_update_login_key + 24
;;;450        {
;;;451            return TUYA_BLE_ERR_INVALID_PARAM;
        0x00811a4c:    2006        .       MOVS     r0,#6
        0x00811a4e:    e6b0        ..      B        0x8117b2 ; tuya_ble_gatt_receive_data + 62
;;;452        }
;;;453        event.device_info_data.len = LOGIN_KEY_LEN;
        0x00811a50:    2106        .!      MOVS     r1,#6
        0x00811a52:    f88d1009    ....    STRB     r1,[sp,#9]
;;;454        memcpy(event.device_info_data.data,p_buf,LOGIN_KEY_LEN);
        0x00811a56:    6801        .h      LDR      r1,[r0,#0]
        0x00811a58:    f8cd100a    ....    STR      r1,[sp,#0xa]
        0x00811a5c:    8880        ..      LDRH     r0,[r0,#4]
        0x00811a5e:    f8ad000e    ....    STRH     r0,[sp,#0xe]
;;;455        if(tuya_ble_event_send(&event)!=0)
        0x00811a62:    4668        hF      MOV      r0,sp
        0x00811a64:    f003faeb    ....    BL       tuya_ble_event_send ; 0x81503e
        0x00811a68:    2800        .(      CMP      r0,#0
        0x00811a6a:    d0f0        ..      BEQ      0x811a4e ; tuya_ble_device_update_login_key + 22
;;;456        {
;;;457            TUYA_BLE_LOG_ERROR("tuya_event_send LOGIN KEY update error");
        0x00811a6c:    a07d        }.      ADR      r0,{pc}+0x1f8 ; 0x811c64
        0x00811a6e:    f009f89c    ....    BL       get_args ; 0x81abaa
        0x00811a72:    497b        {I      LDR      r1,[pc,#492] ; [0x811c60] = 0x8801e50
        0x00811a74:    4602        .F      MOV      r2,r0
        0x00811a76:    3138        81      ADDS     r1,r1,#0x38
        0x00811a78:    4845        EH      LDR      r0,[pc,#276] ; [0x811b90] = 0x21103002
        0x00811a7a:    f7f5dff0    ....    BL       log_buffer ; 0x7a5e
;;;458            return TUYA_BLE_ERR_INTERNAL;
        0x00811a7e:    2001        .       MOVS     r0,#1
;;;459        }
;;;460    
;;;461        return TUYA_BLE_SUCCESS;
;;;462    }
        0x00811a80:    e697        ..      B        0x8117b2 ; tuya_ble_gatt_receive_data + 62
    tuya_ble_device_update_mcu_version
;;;463    
;;;464    /*
;;;465     *@brief
;;;466     *@param
;;;467     *
;;;468     *@note
;;;469     *
;;;470     * */
;;;471    tuya_ble_status_t tuya_ble_device_update_mcu_version(uint32_t mcu_firmware_version, uint32_t mcu_hardware_version)
;;;472    {
        0x00811a82:    b510        ..      PUSH     {r4,lr}
;;;473        tuya_ble_set_external_mcu_version(mcu_firmware_version,mcu_hardware_version);
        0x00811a84:    f000ff71    ..q.    BL       tuya_ble_set_external_mcu_version ; 0x81296a
;;;474        return TUYA_BLE_SUCCESS;
        0x00811a88:    2000        .       MOVS     r0,#0
;;;475    }
        0x00811a8a:    bd10        ..      POP      {r4,pc}
    tuya_ble_device_update_bound_state
;;;476    
;;;477    /*
;;;478     *@brief
;;;479     *@param
;;;480     *
;;;481     *@note
;;;482     *
;;;483     * */
;;;484    tuya_ble_status_t tuya_ble_device_update_bound_state(uint8_t state)
;;;485    {
        0x00811a8c:    b500        ..      PUSH     {lr}
        0x00811a8e:    b08b        ..      SUB      sp,sp,#0x2c
;;;486        tuya_ble_evt_param_t event;
;;;487    
;;;488        event.hdr.event = TUYA_BLE_EVT_DEVICE_INFO_UPDATE;
        0x00811a90:    2101        .!      MOVS     r1,#1
        0x00811a92:    2203        ."      MOVS     r2,#3
        0x00811a94:    f88d1000    ....    STRB     r1,[sp,#0]
;;;489    
;;;490        event.device_info_data.type = DEVICE_INFO_TYPE_BOUND;
        0x00811a98:    f88d2008    ...     STRB     r2,[sp,#8]
;;;491    
;;;492        if((state!=1)&&(state!=0))
        0x00811a9c:    2801        .(      CMP      r0,#1
        0x00811a9e:    d002        ..      BEQ      0x811aa6 ; tuya_ble_device_update_bound_state + 26
        0x00811aa0:    b108        ..      CBZ      r0,0x811aa6 ; tuya_ble_device_update_bound_state + 26
;;;493        {
;;;494            return TUYA_BLE_ERR_INVALID_PARAM;
        0x00811aa2:    2006        .       MOVS     r0,#6
        0x00811aa4:    e685        ..      B        0x8117b2 ; tuya_ble_gatt_receive_data + 62
;;;495        }
;;;496        event.device_info_data.len = 1;
        0x00811aa6:    f88d1009    ....    STRB     r1,[sp,#9]
;;;497        event.device_info_data.data[0] = state;
        0x00811aaa:    f88d000a    ....    STRB     r0,[sp,#0xa]
;;;498        if(tuya_ble_event_send(&event)!=0)
        0x00811aae:    4668        hF      MOV      r0,sp
        0x00811ab0:    f003fac5    ....    BL       tuya_ble_event_send ; 0x81503e
        0x00811ab4:    2800        .(      CMP      r0,#0
        0x00811ab6:    d0f5        ..      BEQ      0x811aa4 ; tuya_ble_device_update_bound_state + 24
;;;499        {
;;;500            TUYA_BLE_LOG_ERROR("tuya_event_send bound state update error");
        0x00811ab8:    a078        x.      ADR      r0,{pc}+0x1e4 ; 0x811c9c
        0x00811aba:    f009f876    ..v.    BL       get_args ; 0x81abaa
        0x00811abe:    4968        hI      LDR      r1,[pc,#416] ; [0x811c60] = 0x8801e50
        0x00811ac0:    4602        .F      MOV      r2,r0
        0x00811ac2:    3170        p1      ADDS     r1,r1,#0x70
        0x00811ac4:    4832        2H      LDR      r0,[pc,#200] ; [0x811b90] = 0x21103002
        0x00811ac6:    f7f5dfca    ....    BL       log_buffer ; 0x7a5e
;;;501            return TUYA_BLE_ERR_INTERNAL;
        0x00811aca:    2001        .       MOVS     r0,#1
;;;502        }
;;;503    
;;;504        return TUYA_BLE_SUCCESS;
;;;505    }
        0x00811acc:    e671        q.      B        0x8117b2 ; tuya_ble_gatt_receive_data + 62
    tuya_ble_dp_data_report
;;;506    
;;;507    
;;;508    /*
;;;509     *@brief
;;;510     *@param
;;;511     *
;;;512     *@note
;;;513     *
;;;514     * */
;;;515    tuya_ble_status_t tuya_ble_dp_data_report(uint8_t *p_data,uint32_t len)
;;;516    {
        0x00811ace:    b570        p.      PUSH     {r4-r6,lr}
        0x00811ad0:    b08e        ..      SUB      sp,sp,#0x38
        0x00811ad2:    4606        .F      MOV      r6,r0
        0x00811ad4:    2000        .       MOVS     r0,#0
        0x00811ad6:    460c        .F      MOV      r4,r1
;;;517        tuya_ble_evt_param_t evt;
;;;518        uint8_t *ble_evt_buffer;
;;;519        mtp_ret ret;
;;;520        klv_node_s *list = NULL;
;;;521    
;;;522        if(tuya_ble_connect_status_get()!=BONDING_CONN)
        0x00811ad8:    900c        ..      STR      r0,[sp,#0x30]
        0x00811ada:    f003faa3    ....    BL       tuya_ble_connect_status_get ; 0x815024
        0x00811ade:    2803        .(      CMP      r0,#3
        0x00811ae0:    d002        ..      BEQ      0x811ae8 ; tuya_ble_dp_data_report + 26
;;;523        {
;;;524            return TUYA_BLE_ERR_INVALID_STATE;
        0x00811ae2:    2007        .       MOVS     r0,#7
        0x00811ae4:    b00e        ..      ADD      sp,sp,#0x38
        0x00811ae6:    bd70        p.      POP      {r4-r6,pc}
;;;525        }
;;;526    
;;;527        if((len>TUYA_BLE_REPORT_MAX_DP_DATA_LEN)||(len==0))
        0x00811ae8:    f44f7581    O..u    MOV      r5,#0x102
        0x00811aec:    42ac        .B      CMP      r4,r5
        0x00811aee:    d809        ..      BHI      0x811b04 ; tuya_ble_dp_data_report + 54
        0x00811af0:    b144        D.      CBZ      r4,0x811b04 ; tuya_ble_dp_data_report + 54
;;;528        {
;;;529            TUYA_BLE_LOG_ERROR("report dp data len error,data len = %d , max data len = %d",len,TUYA_BLE_REPORT_MAX_DP_DATA_LEN);
;;;530            return TUYA_BLE_ERR_INVALID_LENGTH;
;;;531        }
;;;532        ret = data_2_klvlist(p_data,len,&list,0);
        0x00811af2:    2300        .#      MOVS     r3,#0
        0x00811af4:    aa0c        ..      ADD      r2,sp,#0x30
        0x00811af6:    4621        !F      MOV      r1,r4
        0x00811af8:    4630        0F      MOV      r0,r6
        0x00811afa:    f003fe1c    ....    BL       data_2_klvlist ; 0x815736
;;;533        if(MTP_OK != ret)
        0x00811afe:    b170        p.      CBZ      r0,0x811b1e ; tuya_ble_dp_data_report + 80
;;;534        {
;;;535            return TUYA_BLE_ERR_INVALID_PARAM;
        0x00811b00:    2006        .       MOVS     r0,#6
        0x00811b02:    e7ef        ..      B        0x811ae4 ; tuya_ble_dp_data_report + 22
        0x00811b04:    4873        sH      LDR      r0,[pc,#460] ; [0x811cd4] = 0x81ceb8
        0x00811b06:    f009f850    ..P.    BL       get_args ; 0x81abaa
        0x00811b0a:    4955        UI      LDR      r1,[pc,#340] ; [0x811c60] = 0x8801e50
        0x00811b0c:    4602        .F      MOV      r2,r0
        0x00811b0e:    4623        #F      MOV      r3,r4
        0x00811b10:    31a8        .1      ADDS     r1,r1,#0xa8
        0x00811b12:    481f        .H      LDR      r0,[pc,#124] ; [0x811b90] = 0x21103002
        0x00811b14:    9500        ..      STR      r5,[sp,#0]
        0x00811b16:    f7f5dfa2    ....    BL       log_buffer ; 0x7a5e
        0x00811b1a:    2008        .       MOVS     r0,#8
        0x00811b1c:    e7e2        ..      B        0x811ae4 ; tuya_ble_dp_data_report + 22
;;;536        }
;;;537        free_klv_list(list);
        0x00811b1e:    980c        ..      LDR      r0,[sp,#0x30]
        0x00811b20:    f003fd66    ..f.    BL       free_klv_list ; 0x8155f0
;;;538    
;;;539        ble_evt_buffer=(uint8_t *)tuya_ble_malloc(len);
        0x00811b24:    b2a0        ..      UXTH     r0,r4
        0x00811b26:    f003fc33    ..3.    BL       tuya_ble_malloc ; 0x815390
        0x00811b2a:    0005        ..      MOVS     r5,r0
;;;540        if(ble_evt_buffer==NULL)
        0x00811b2c:    d00b        ..      BEQ      0x811b46 ; tuya_ble_dp_data_report + 120
;;;541        {
;;;542            return TUYA_BLE_ERR_NO_MEM;
;;;543        }
;;;544        else
;;;545        {
;;;546            memcpy(ble_evt_buffer,p_data,len);
        0x00811b2e:    4622        "F      MOV      r2,r4
        0x00811b30:    4631        1F      MOV      r1,r6
        0x00811b32:    f448f1b2    H...    BL       __aeabi_memcpy ; 0x59e9a
;;;547        }
;;;548    
;;;549        evt.hdr.event = TUYA_BLE_EVT_DP_DATA_REPORTED;
        0x00811b36:    2002        .       MOVS     r0,#2
        0x00811b38:    f88d0004    ....    STRB     r0,[sp,#4]
;;;550        evt.reported_data.p_data = ble_evt_buffer;
;;;551        evt.reported_data.data_len = len;
        0x00811b3c:    9503        ..      STR      r5,[sp,#0xc]
        0x00811b3e:    f8ad4010    ...@    STRH     r4,[sp,#0x10]
;;;552    
;;;553        if(tuya_ble_event_send(&evt)!=0)
        0x00811b42:    a801        ..      ADD      r0,sp,#4
        0x00811b44:    e0c8        ..      B        0x811cd8 ; tuya_ble_dp_data_report + 522
        0x00811b46:    e0d1        ..      B        0x811cec ; tuya_ble_dp_data_report + 542
    $d
        0x00811b48:    00208fc8    .. .    DCD    2133960
        0x00811b4c:    002097a4    .. .    DCD    2135972
        0x00811b50:    205d455b    [E]     DCD    542983515
        0x00811b54:    41595554    TUYA    DCD    1096373588
        0x00811b58:    454c425f    _BLE    DCD    1162625631
        0x00811b5c:    7574203a    : tu    DCD    1970544698
        0x00811b60:    655f6179    ya_e    DCD    1700749689
        0x00811b64:    746e6576    vent    DCD    1953391990
        0x00811b68:    6e65735f    _sen    DCD    1852142431
        0x00811b6c:    6c622064    d bl    DCD    1818370148
        0x00811b70:    61642065    e da    DCD    1633951845
        0x00811b74:    65206174    ta e    DCD    1696620916
        0x00811b78:    726f7272    rror    DCD    1919906418
        0x00811b7c:    7461642c    ,dat    DCD    1952539692
        0x00811b80:    656c2061    a le    DCD    1701584993
        0x00811b84:    203d206e    n =     DCD    540876910
        0x00811b88:    00206425    %d .    DCD    2122789
        0x00811b8c:    08801d50    P...    DCD    142613840
        0x00811b90:    21103002    .0.!    DCD    554708994
        0x00811b94:    205d455b    [E]     DCD    542983515
        0x00811b98:    41595554    TUYA    DCD    1096373588
        0x00811b9c:    454c425f    _BLE    DCD    1162625631
        0x00811ba0:    7574203a    : tu    DCD    1970544698
        0x00811ba4:    655f6179    ya_e    DCD    1700749689
        0x00811ba8:    746e6576    vent    DCD    1953391990
        0x00811bac:    6e65735f    _sen    DCD    1852142431
        0x00811bb0:    61752064    d ua    DCD    1635065956
        0x00811bb4:    64207472    rt d    DCD    1679848562
        0x00811bb8:    20617461    ata     DCD    543257697
        0x00811bbc:    6f727265    erro    DCD    1869771365
        0x00811bc0:    00002e72    r...    DCD    11890
        0x00811bc4:    205d455b    [E]     DCD    542983515
        0x00811bc8:    41595554    TUYA    DCD    1096373588
        0x00811bcc:    454c425f    _BLE    DCD    1162625631
        0x00811bd0:    7574203a    : tu    DCD    1970544698
        0x00811bd4:    4d5f6179    ya_M    DCD    1298096505
        0x00811bd8:    65476d65    emGe    DCD    1699179877
        0x00811bdc:    61752074    t ua    DCD    1635065972
        0x00811be0:    65207472    rt e    DCD    1696625778
        0x00811be4:    62207476    vt b    DCD    1646294134
        0x00811be8:    65666675    uffe    DCD    1701209717
        0x00811bec:    61662072    r fa    DCD    1634082930
        0x00811bf0:    002e6c69    il..    DCD    3042409
        0x00811bf4:    205d455b    [E]     DCD    542983515
        0x00811bf8:    41595554    TUYA    DCD    1096373588
        0x00811bfc:    454c425f    _BLE    DCD    1162625631
        0x00811c00:    7574203a    : tu    DCD    1970544698
        0x00811c04:    655f6179    ya_e    DCD    1700749689
        0x00811c08:    746e6576    vent    DCD    1953391990
        0x00811c0c:    6e65735f    _sen    DCD    1852142431
        0x00811c10:    61752064    d ua    DCD    1635065956
        0x00811c14:    66207472    rt f    DCD    1713402994
        0x00811c18:    206c6c75    ull     DCD    543976565
        0x00811c1c:    20646d63    cmd     DCD    543452515
        0x00811c20:    6f727265    erro    DCD    1869771365
        0x00811c24:    00002e72    r...    DCD    11890
        0x00811c28:    205d455b    [E]     DCD    542983515
        0x00811c2c:    41595554    TUYA    DCD    1096373588
        0x00811c30:    454c425f    _BLE    DCD    1162625631
        0x00811c34:    7574203a    : tu    DCD    1970544698
        0x00811c38:    655f6179    ya_e    DCD    1700749689
        0x00811c3c:    746e6576    vent    DCD    1953391990
        0x00811c40:    6e65735f    _sen    DCD    1852142431
        0x00811c44:    72702064    d pr    DCD    1919950948
        0x00811c48:    6375646f    oduc    DCD    1668637807
        0x00811c4c:    64692074    t id    DCD    1684611188
        0x00811c50:    64707520     upd    DCD    1685091616
        0x00811c54:    20657461    ate     DCD    543519841
        0x00811c58:    6f727265    erro    DCD    1869771365
        0x00811c5c:    00000072    r...    DCD    114
        0x00811c60:    08801e50    P...    DCD    142614096
        0x00811c64:    205d455b    [E]     DCD    542983515
        0x00811c68:    41595554    TUYA    DCD    1096373588
        0x00811c6c:    454c425f    _BLE    DCD    1162625631
        0x00811c70:    7574203a    : tu    DCD    1970544698
        0x00811c74:    655f6179    ya_e    DCD    1700749689
        0x00811c78:    746e6576    vent    DCD    1953391990
        0x00811c7c:    6e65735f    _sen    DCD    1852142431
        0x00811c80:    4f4c2064    d LO    DCD    1330389092
        0x00811c84:    204e4947    GIN     DCD    542001479
        0x00811c88:    2059454b    KEY     DCD    542721355
        0x00811c8c:    61647075    upda    DCD    1633972341
        0x00811c90:    65206574    te e    DCD    1696621940
        0x00811c94:    726f7272    rror    DCD    1919906418
        0x00811c98:    00000000    ....    DCD    0
        0x00811c9c:    205d455b    [E]     DCD    542983515
        0x00811ca0:    41595554    TUYA    DCD    1096373588
        0x00811ca4:    454c425f    _BLE    DCD    1162625631
        0x00811ca8:    7574203a    : tu    DCD    1970544698
        0x00811cac:    655f6179    ya_e    DCD    1700749689
        0x00811cb0:    746e6576    vent    DCD    1953391990
        0x00811cb4:    6e65735f    _sen    DCD    1852142431
        0x00811cb8:    6f622064    d bo    DCD    1868701796
        0x00811cbc:    20646e75    und     DCD    543452789
        0x00811cc0:    74617473    stat    DCD    1952543859
        0x00811cc4:    70752065    e up    DCD    1886724197
        0x00811cc8:    65746164    date    DCD    1702125924
        0x00811ccc:    72726520     err    DCD    1920099616
        0x00811cd0:    0000726f    or..    DCD    29295
        0x00811cd4:    0081ceb8    ....    DCD    8507064
    $t
        0x00811cd8:    f003f9b1    ....    BL       tuya_ble_event_send ; 0x81503e
        0x00811cdc:    2800        .(      CMP      r0,#0
        0x00811cde:    f43faf10    ?...    BEQ      0x811b02 ; tuya_ble_dp_data_report + 52
;;;554        {
;;;555            tuya_ble_free(ble_evt_buffer);
        0x00811ce2:    4628        (F      MOV      r0,r5
        0x00811ce4:    f003fb5f    .._.    BL       tuya_ble_free ; 0x8153a6
;;;556            return TUYA_BLE_ERR_NO_EVENT;
        0x00811ce8:    2003        .       MOVS     r0,#3
;;;557        }
;;;558    
;;;559        return TUYA_BLE_SUCCESS;
;;;560    }
        0x00811cea:    e6fb        ..      B        0x811ae4 ; tuya_ble_dp_data_report + 22
        0x00811cec:    2004        .       MOVS     r0,#4
        0x00811cee:    e6f9        ..      B        0x811ae4 ; tuya_ble_dp_data_report + 22
    tuya_ble_dp_data_with_flag_report
;;;561    
;;;562    /*
;;;563     *@brief
;;;564     *@param
;;;565     *
;;;566     *@note
;;;567     *
;;;568     * */
;;;569    tuya_ble_status_t tuya_ble_dp_data_with_flag_report(uint16_t sn,tuya_ble_report_mode_t mode,uint8_t *p_data,uint32_t len)
;;;570    {
        0x00811cf0:    e92d43f0    -..C    PUSH     {r4-r9,lr}
        0x00811cf4:    b08d        ..      SUB      sp,sp,#0x34
        0x00811cf6:    4606        .F      MOV      r6,r0
        0x00811cf8:    2000        .       MOVS     r0,#0
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_api.c (570)
        0x00811cfa:    461d        .F      MOV      r5,r3
        0x00811cfc:    4691        .F      MOV      r9,r2
        0x00811cfe:    4688        .F      MOV      r8,r1
;;;571        tuya_ble_evt_param_t evt;
;;;572        uint8_t *ble_evt_buffer = NULL;
;;;573        mtp_ret ret;
;;;574        klv_node_s *list = NULL;
;;;575    
;;;576        if(tuya_ble_connect_status_get()!=BONDING_CONN)
        0x00811d00:    900c        ..      STR      r0,[sp,#0x30]
        0x00811d02:    f003f98f    ....    BL       tuya_ble_connect_status_get ; 0x815024
        0x00811d06:    2803        .(      CMP      r0,#3
        0x00811d08:    d003        ..      BEQ      0x811d12 ; tuya_ble_dp_data_with_flag_report + 34
;;;577        {
;;;578            return TUYA_BLE_ERR_INVALID_STATE;
        0x00811d0a:    2007        .       MOVS     r0,#7
        0x00811d0c:    b00d        ..      ADD      sp,sp,#0x34
        0x00811d0e:    e8bd83f0    ....    POP      {r4-r9,pc}
;;;579        }
;;;580    
;;;581        if((len>(TUYA_BLE_REPORT_MAX_DP_DATA_LEN-3))||(len==0))
        0x00811d12:    2dff        .-      CMP      r5,#0xff
        0x00811d14:    d809        ..      BHI      0x811d2a ; tuya_ble_dp_data_with_flag_report + 58
        0x00811d16:    b145        E.      CBZ      r5,0x811d2a ; tuya_ble_dp_data_with_flag_report + 58
;;;582        {
;;;583            TUYA_BLE_LOG_ERROR("report flag dp data len error,data len = %d , max data len = %d",len,(TUYA_BLE_REPORT_MAX_DP_DATA_LEN-3));
;;;584            return TUYA_BLE_ERR_INVALID_LENGTH;
;;;585        }
;;;586        ret = data_2_klvlist(p_data,len,&list,0);
        0x00811d18:    2300        .#      MOVS     r3,#0
        0x00811d1a:    aa0c        ..      ADD      r2,sp,#0x30
        0x00811d1c:    4629        )F      MOV      r1,r5
        0x00811d1e:    4648        HF      MOV      r0,r9
        0x00811d20:    f003fd09    ....    BL       data_2_klvlist ; 0x815736
;;;587        if(MTP_OK != ret)
        0x00811d24:    b170        p.      CBZ      r0,0x811d44 ; tuya_ble_dp_data_with_flag_report + 84
;;;588        {
;;;589            return TUYA_BLE_ERR_INVALID_PARAM;
        0x00811d26:    2006        .       MOVS     r0,#6
        0x00811d28:    e7f0        ..      B        0x811d0c ; tuya_ble_dp_data_with_flag_report + 28
        0x00811d2a:    48fe        .H      LDR      r0,[pc,#1016] ; [0x812124] = 0x81ce68
        0x00811d2c:    f008ff3d    ..=.    BL       get_args ; 0x81abaa
        0x00811d30:    4602        .F      MOV      r2,r0
        0x00811d32:    20ff        .       MOVS     r0,#0xff
        0x00811d34:    9000        ..      STR      r0,[sp,#0]
        0x00811d36:    462b        +F      MOV      r3,r5
        0x00811d38:    49fb        .I      LDR      r1,[pc,#1004] ; [0x812128] = 0x8801f44
        0x00811d3a:    48fc        .H      LDR      r0,[pc,#1008] ; [0x81212c] = 0x21103002
        0x00811d3c:    f7f5de8f    ....    BL       log_buffer ; 0x7a5e
        0x00811d40:    2008        .       MOVS     r0,#8
        0x00811d42:    e7e3        ..      B        0x811d0c ; tuya_ble_dp_data_with_flag_report + 28
;;;590        }
;;;591        free_klv_list(list);
        0x00811d44:    980c        ..      LDR      r0,[sp,#0x30]
        0x00811d46:    f003fc53    ..S.    BL       free_klv_list ; 0x8155f0
;;;592    
;;;593        ble_evt_buffer=(uint8_t *)tuya_ble_malloc(len+3);
        0x00811d4a:    1cef        ..      ADDS     r7,r5,#3
        0x00811d4c:    b2b8        ..      UXTH     r0,r7
        0x00811d4e:    f003fb1f    ....    BL       tuya_ble_malloc ; 0x815390
        0x00811d52:    0004        ..      MOVS     r4,r0
;;;594        if(ble_evt_buffer==NULL)
        0x00811d54:    d01d        ..      BEQ      0x811d92 ; tuya_ble_dp_data_with_flag_report + 162
;;;595        {
;;;596            return TUYA_BLE_ERR_NO_MEM;
;;;597        }
;;;598        else
;;;599        {
;;;600            ble_evt_buffer[0] = sn>>8;
        0x00811d56:    0a30        0.      LSRS     r0,r6,#8
        0x00811d58:    7020         p      STRB     r0,[r4,#0]
;;;601            ble_evt_buffer[1] = sn;
        0x00811d5a:    7066        fp      STRB     r6,[r4,#1]
;;;602            ble_evt_buffer[2] = mode;
        0x00811d5c:    f8848002    ....    STRB     r8,[r4,#2]
;;;603            memcpy(ble_evt_buffer+3,p_data,len);
        0x00811d60:    462a        *F      MOV      r2,r5
        0x00811d62:    4649        IF      MOV      r1,r9
        0x00811d64:    1ce0        ..      ADDS     r0,r4,#3
        0x00811d66:    f448f098    H...    BL       __aeabi_memcpy ; 0x59e9a
;;;604        }
;;;605    
;;;606        evt.hdr.event = TUYA_BLE_EVT_DP_DATA_WITH_FLAG_REPORTED;
        0x00811d6a:    2005        .       MOVS     r0,#5
        0x00811d6c:    f88d0004    ....    STRB     r0,[sp,#4]
;;;607        evt.flag_reported_data.sn = sn;
        0x00811d70:    f8ad600c    ...`    STRH     r6,[sp,#0xc]
;;;608        evt.flag_reported_data.mode = mode;
        0x00811d74:    f88d800e    ....    STRB     r8,[sp,#0xe]
;;;609        evt.flag_reported_data.p_data = ble_evt_buffer;
;;;610        evt.flag_reported_data.data_len = len+3;
        0x00811d78:    9404        ..      STR      r4,[sp,#0x10]
        0x00811d7a:    f8ad7014    ...p    STRH     r7,[sp,#0x14]
;;;611    
;;;612        if(tuya_ble_event_send(&evt)!=0)
        0x00811d7e:    a801        ..      ADD      r0,sp,#4
        0x00811d80:    f003f95d    ..].    BL       tuya_ble_event_send ; 0x81503e
        0x00811d84:    2800        .(      CMP      r0,#0
        0x00811d86:    d0c1        ..      BEQ      0x811d0c ; tuya_ble_dp_data_with_flag_report + 28
;;;613        {
;;;614            tuya_ble_free(ble_evt_buffer);
        0x00811d88:    4620         F      MOV      r0,r4
        0x00811d8a:    f003fb0c    ....    BL       tuya_ble_free ; 0x8153a6
;;;615            return TUYA_BLE_ERR_NO_EVENT;
        0x00811d8e:    2003        .       MOVS     r0,#3
;;;616        }
;;;617    
;;;618        return TUYA_BLE_SUCCESS;
;;;619    }
        0x00811d90:    e7bc        ..      B        0x811d0c ; tuya_ble_dp_data_with_flag_report + 28
        0x00811d92:    2004        .       MOVS     r0,#4
        0x00811d94:    e7ba        ..      B        0x811d0c ; tuya_ble_dp_data_with_flag_report + 28
    tuya_ble_dp_data_with_time_report
;;;620    
;;;621    /*
;;;622     *@brief
;;;623     *@param
;;;624     *
;;;625     *@note
;;;626     *
;;;627     * */
;;;628    
;;;629    tuya_ble_status_t tuya_ble_dp_data_with_time_report(uint32_t timestamp,uint8_t *p_data,uint32_t len)
;;;630    {
        0x00811d96:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00811d98:    b08d        ..      SUB      sp,sp,#0x34
        0x00811d9a:    4606        .F      MOV      r6,r0
        0x00811d9c:    2000        .       MOVS     r0,#0
        0x00811d9e:    4614        .F      MOV      r4,r2
        0x00811da0:    460f        .F      MOV      r7,r1
;;;631        tuya_ble_evt_param_t evt;
;;;632        uint8_t *ble_evt_buffer;
;;;633        mtp_ret ret;
;;;634        klv_node_s *list = NULL;
;;;635    
;;;636        if(tuya_ble_connect_status_get()!=BONDING_CONN)
        0x00811da2:    900b        ..      STR      r0,[sp,#0x2c]
        0x00811da4:    f003f93e    ..>.    BL       tuya_ble_connect_status_get ; 0x815024
        0x00811da8:    2803        .(      CMP      r0,#3
        0x00811daa:    d002        ..      BEQ      0x811db2 ; tuya_ble_dp_data_with_time_report + 28
;;;637        {
;;;638            return TUYA_BLE_ERR_INVALID_STATE;
        0x00811dac:    2007        .       MOVS     r0,#7
        0x00811dae:    b00d        ..      ADD      sp,sp,#0x34
        0x00811db0:    bdf0        ..      POP      {r4-r7,pc}
;;;639        }
;;;640    
;;;641        if((len>TUYA_BLE_REPORT_MAX_DP_DATA_LEN)||(len==0))
        0x00811db2:    f5b47f81    ....    CMP      r4,#0x102
        0x00811db6:    d809        ..      BHI      0x811dcc ; tuya_ble_dp_data_with_time_report + 54
        0x00811db8:    b144        D.      CBZ      r4,0x811dcc ; tuya_ble_dp_data_with_time_report + 54
;;;642        {
;;;643            return TUYA_BLE_ERR_INVALID_LENGTH;
;;;644        }
;;;645        ret = data_2_klvlist(p_data,len,&list,0);
        0x00811dba:    2300        .#      MOVS     r3,#0
        0x00811dbc:    aa0b        ..      ADD      r2,sp,#0x2c
        0x00811dbe:    4621        !F      MOV      r1,r4
        0x00811dc0:    4638        8F      MOV      r0,r7
        0x00811dc2:    f003fcb8    ....    BL       data_2_klvlist ; 0x815736
;;;646        if(MTP_OK != ret)
        0x00811dc6:    b118        ..      CBZ      r0,0x811dd0 ; tuya_ble_dp_data_with_time_report + 58
;;;647        {
;;;648            return TUYA_BLE_ERR_INVALID_PARAM;
        0x00811dc8:    2006        .       MOVS     r0,#6
        0x00811dca:    e7f0        ..      B        0x811dae ; tuya_ble_dp_data_with_time_report + 24
        0x00811dcc:    2008        .       MOVS     r0,#8
        0x00811dce:    e7ee        ..      B        0x811dae ; tuya_ble_dp_data_with_time_report + 24
;;;649        }
;;;650        free_klv_list(list);
        0x00811dd0:    980b        ..      LDR      r0,[sp,#0x2c]
        0x00811dd2:    f003fc0d    ....    BL       free_klv_list ; 0x8155f0
;;;651        ble_evt_buffer=(uint8_t *)tuya_ble_malloc(len);
        0x00811dd6:    b2a0        ..      UXTH     r0,r4
        0x00811dd8:    f003fada    ....    BL       tuya_ble_malloc ; 0x815390
        0x00811ddc:    0005        ..      MOVS     r5,r0
;;;652        if(ble_evt_buffer==NULL)
        0x00811dde:    d014        ..      BEQ      0x811e0a ; tuya_ble_dp_data_with_time_report + 116
;;;653        {
;;;654            return TUYA_BLE_ERR_NO_MEM;
;;;655        }
;;;656        else
;;;657        {
;;;658            memcpy(ble_evt_buffer,p_data,len);
        0x00811de0:    4622        "F      MOV      r2,r4
        0x00811de2:    4639        9F      MOV      r1,r7
        0x00811de4:    f448f059    H.Y.    BL       __aeabi_memcpy ; 0x59e9a
;;;659        }
;;;660    
;;;661        evt.hdr.event = TUYA_BLE_EVT_DP_DATA_WITH_TIME_REPORTED;
        0x00811de8:    2003        .       MOVS     r0,#3
        0x00811dea:    e9cd6502    ...e    STRD     r6,r5,[sp,#8]
        0x00811dee:    f88d0000    ....    STRB     r0,[sp,#0]
;;;662        evt.reported_with_time_data.timestamp = timestamp;
;;;663        evt.reported_with_time_data.p_data = ble_evt_buffer;
;;;664        evt.reported_with_time_data.data_len = len;
        0x00811df2:    f8ad4010    ...@    STRH     r4,[sp,#0x10]
;;;665    
;;;666        if(tuya_ble_event_send(&evt)!=0)
        0x00811df6:    4668        hF      MOV      r0,sp
        0x00811df8:    f003f921    ..!.    BL       tuya_ble_event_send ; 0x81503e
        0x00811dfc:    2800        .(      CMP      r0,#0
        0x00811dfe:    d0d6        ..      BEQ      0x811dae ; tuya_ble_dp_data_with_time_report + 24
;;;667        {
;;;668            tuya_ble_free(ble_evt_buffer);
        0x00811e00:    4628        (F      MOV      r0,r5
        0x00811e02:    f003fad0    ....    BL       tuya_ble_free ; 0x8153a6
;;;669            return TUYA_BLE_ERR_NO_EVENT;
        0x00811e06:    2003        .       MOVS     r0,#3
;;;670        }
;;;671    
;;;672        return TUYA_BLE_SUCCESS;
;;;673    }
        0x00811e08:    e7d1        ..      B        0x811dae ; tuya_ble_dp_data_with_time_report + 24
        0x00811e0a:    2004        .       MOVS     r0,#4
        0x00811e0c:    e7cf        ..      B        0x811dae ; tuya_ble_dp_data_with_time_report + 24
    tuya_ble_dp_data_with_flag_and_time_report
;;;674    
;;;675    /*
;;;676     *@brief
;;;677     *@param
;;;678     *
;;;679     *@note
;;;680     *
;;;681     * */
;;;682    tuya_ble_status_t tuya_ble_dp_data_with_flag_and_time_report(uint16_t sn,tuya_ble_report_mode_t mode,uint32_t timestamp,uint8_t *p_data,uint32_t len)
;;;683    {
        0x00811e0e:    e92d43f0    -..C    PUSH     {r4-r9,lr}
        0x00811e12:    b08d        ..      SUB      sp,sp,#0x34
        0x00811e14:    4680        .F      MOV      r8,r0
        0x00811e16:    2000        .       MOVS     r0,#0
        0x00811e18:    4699        .F      MOV      r9,r3
        0x00811e1a:    4616        .F      MOV      r6,r2
        0x00811e1c:    460f        .F      MOV      r7,r1
;;;684        tuya_ble_evt_param_t evt;
;;;685        uint8_t *ble_evt_buffer=NULL;
;;;686        mtp_ret ret;
;;;687        klv_node_s *list = NULL;
        0x00811e1e:    9c14        ..      LDR      r4,[sp,#0x50]
;;;688    
;;;689        if(tuya_ble_connect_status_get()!=BONDING_CONN)
        0x00811e20:    900b        ..      STR      r0,[sp,#0x2c]
        0x00811e22:    f003f8ff    ....    BL       tuya_ble_connect_status_get ; 0x815024
        0x00811e26:    2803        .(      CMP      r0,#3
        0x00811e28:    d001        ..      BEQ      0x811e2e ; tuya_ble_dp_data_with_flag_and_time_report + 32
;;;690        {
;;;691            return TUYA_BLE_ERR_INVALID_STATE;
        0x00811e2a:    2007        .       MOVS     r0,#7
        0x00811e2c:    e76e        n.      B        0x811d0c ; tuya_ble_dp_data_with_flag_report + 28
;;;692        }
;;;693    
;;;694        if((len>(TUYA_BLE_REPORT_MAX_DP_DATA_LEN-8))||(len==0))
        0x00811e2e:    2cfa        .,      CMP      r4,#0xfa
        0x00811e30:    d809        ..      BHI      0x811e46 ; tuya_ble_dp_data_with_flag_and_time_report + 56
        0x00811e32:    b144        D.      CBZ      r4,0x811e46 ; tuya_ble_dp_data_with_flag_and_time_report + 56
;;;695        {
;;;696            return TUYA_BLE_ERR_INVALID_LENGTH;
;;;697        }
;;;698        ret = data_2_klvlist(p_data,len,&list,0);
        0x00811e34:    2300        .#      MOVS     r3,#0
        0x00811e36:    aa0b        ..      ADD      r2,sp,#0x2c
        0x00811e38:    4621        !F      MOV      r1,r4
        0x00811e3a:    4648        HF      MOV      r0,r9
        0x00811e3c:    f003fc7b    ..{.    BL       data_2_klvlist ; 0x815736
;;;699        if(MTP_OK != ret)
        0x00811e40:    b118        ..      CBZ      r0,0x811e4a ; tuya_ble_dp_data_with_flag_and_time_report + 60
;;;700        {
;;;701            return TUYA_BLE_ERR_INVALID_PARAM;
        0x00811e42:    2006        .       MOVS     r0,#6
        0x00811e44:    e762        b.      B        0x811d0c ; tuya_ble_dp_data_with_flag_report + 28
        0x00811e46:    2008        .       MOVS     r0,#8
        0x00811e48:    e760        `.      B        0x811d0c ; tuya_ble_dp_data_with_flag_report + 28
;;;702        }
;;;703        free_klv_list(list);
        0x00811e4a:    980b        ..      LDR      r0,[sp,#0x2c]
        0x00811e4c:    f003fbd0    ....    BL       free_klv_list ; 0x8155f0
;;;704        ble_evt_buffer=(uint8_t *)tuya_ble_malloc(len);
        0x00811e50:    b2a0        ..      UXTH     r0,r4
        0x00811e52:    f003fa9d    ....    BL       tuya_ble_malloc ; 0x815390
        0x00811e56:    0005        ..      MOVS     r5,r0
;;;705        if(ble_evt_buffer==NULL)
        0x00811e58:    d018        ..      BEQ      0x811e8c ; tuya_ble_dp_data_with_flag_and_time_report + 126
;;;706        {
;;;707            return TUYA_BLE_ERR_NO_MEM;
;;;708        }
;;;709        else
;;;710        {
;;;711            memcpy(ble_evt_buffer,p_data,len);
        0x00811e5a:    4622        "F      MOV      r2,r4
        0x00811e5c:    4649        IF      MOV      r1,r9
        0x00811e5e:    f448f01c    H...    BL       __aeabi_memcpy ; 0x59e9a
;;;712        }
;;;713    
;;;714        evt.hdr.event = TUYA_BLE_EVT_DP_DATA_WITH_FLAG_AND_TIME_REPORTED;
        0x00811e62:    2006        .       MOVS     r0,#6
        0x00811e64:    f88d0000    ....    STRB     r0,[sp,#0]
;;;715        evt.flag_reported_with_time_data.sn = sn;
        0x00811e68:    f8ad8008    ....    STRH     r8,[sp,#8]
;;;716        evt.flag_reported_with_time_data.mode = mode;
        0x00811e6c:    f88d700a    ...p    STRB     r7,[sp,#0xa]
        0x00811e70:    e9cd6503    ...e    STRD     r6,r5,[sp,#0xc]
;;;717        evt.flag_reported_with_time_data.timestamp = timestamp;
;;;718        evt.flag_reported_with_time_data.p_data = ble_evt_buffer;
;;;719        evt.flag_reported_with_time_data.data_len = len;
        0x00811e74:    f8ad4014    ...@    STRH     r4,[sp,#0x14]
;;;720    
;;;721        if(tuya_ble_event_send(&evt)!=0)
        0x00811e78:    4668        hF      MOV      r0,sp
        0x00811e7a:    f003f8e0    ....    BL       tuya_ble_event_send ; 0x81503e
        0x00811e7e:    2800        .(      CMP      r0,#0
        0x00811e80:    d0d4        ..      BEQ      0x811e2c ; tuya_ble_dp_data_with_flag_and_time_report + 30
;;;722        {
;;;723            tuya_ble_free(ble_evt_buffer);
        0x00811e82:    4628        (F      MOV      r0,r5
        0x00811e84:    f003fa8f    ....    BL       tuya_ble_free ; 0x8153a6
;;;724            return TUYA_BLE_ERR_NO_EVENT;
        0x00811e88:    2003        .       MOVS     r0,#3
;;;725        }
;;;726    
;;;727        return TUYA_BLE_SUCCESS;
;;;728    }
        0x00811e8a:    e73f        ?.      B        0x811d0c ; tuya_ble_dp_data_with_flag_report + 28
        0x00811e8c:    2004        .       MOVS     r0,#4
        0x00811e8e:    e73d        =.      B        0x811d0c ; tuya_ble_dp_data_with_flag_report + 28
    tuya_ble_dp_data_with_time_ms_string_report
;;;729    
;;;730    /*
;;;731     *@brief
;;;732     *@param
;;;733     *
;;;734     *@note  time_string: 13-byte millisecond string ,for example ,"0000000123456";
;;;735     *
;;;736     * */
;;;737    
;;;738    tuya_ble_status_t tuya_ble_dp_data_with_time_ms_string_report(uint8_t *time_string,uint8_t *p_data,uint32_t len)
;;;739    {
        0x00811e90:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00811e92:    b08d        ..      SUB      sp,sp,#0x34
        0x00811e94:    4607        .F      MOV      r7,r0
        0x00811e96:    2000        .       MOVS     r0,#0
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_api.c (739)
        0x00811e98:    4614        .F      MOV      r4,r2
        0x00811e9a:    460e        .F      MOV      r6,r1
;;;740        tuya_ble_evt_param_t evt;
;;;741        uint8_t *ble_evt_buffer;
;;;742        mtp_ret ret;
;;;743        klv_node_s *list = NULL;
;;;744    
;;;745        if(tuya_ble_connect_status_get()!=BONDING_CONN)
        0x00811e9c:    900b        ..      STR      r0,[sp,#0x2c]
        0x00811e9e:    f003f8c1    ....    BL       tuya_ble_connect_status_get ; 0x815024
        0x00811ea2:    2803        .(      CMP      r0,#3
        0x00811ea4:    d001        ..      BEQ      0x811eaa ; tuya_ble_dp_data_with_time_ms_string_report + 26
;;;746        {
;;;747            return TUYA_BLE_ERR_INVALID_STATE;
        0x00811ea6:    2007        .       MOVS     r0,#7
        0x00811ea8:    e781        ..      B        0x811dae ; tuya_ble_dp_data_with_time_report + 24
;;;748        }
;;;749    
;;;750        if((len>TUYA_BLE_REPORT_MAX_DP_DATA_LEN)||(len==0))
        0x00811eaa:    f5b47f81    ....    CMP      r4,#0x102
        0x00811eae:    d809        ..      BHI      0x811ec4 ; tuya_ble_dp_data_with_time_ms_string_report + 52
        0x00811eb0:    b144        D.      CBZ      r4,0x811ec4 ; tuya_ble_dp_data_with_time_ms_string_report + 52
;;;751        {
;;;752            return TUYA_BLE_ERR_INVALID_LENGTH;
;;;753        }
;;;754        ret = data_2_klvlist(p_data,len,&list,0);
        0x00811eb2:    2300        .#      MOVS     r3,#0
        0x00811eb4:    aa0b        ..      ADD      r2,sp,#0x2c
        0x00811eb6:    4621        !F      MOV      r1,r4
        0x00811eb8:    4630        0F      MOV      r0,r6
        0x00811eba:    f003fc3c    ..<.    BL       data_2_klvlist ; 0x815736
;;;755        if(MTP_OK != ret)
        0x00811ebe:    b118        ..      CBZ      r0,0x811ec8 ; tuya_ble_dp_data_with_time_ms_string_report + 56
;;;756        {
;;;757            return TUYA_BLE_ERR_INVALID_PARAM;
        0x00811ec0:    2006        .       MOVS     r0,#6
        0x00811ec2:    e774        t.      B        0x811dae ; tuya_ble_dp_data_with_time_report + 24
        0x00811ec4:    2008        .       MOVS     r0,#8
        0x00811ec6:    e772        r.      B        0x811dae ; tuya_ble_dp_data_with_time_report + 24
;;;758        }
;;;759        free_klv_list(list);
        0x00811ec8:    980b        ..      LDR      r0,[sp,#0x2c]
        0x00811eca:    f003fb91    ....    BL       free_klv_list ; 0x8155f0
;;;760        ble_evt_buffer=(uint8_t *)tuya_ble_malloc(len);
        0x00811ece:    b2a0        ..      UXTH     r0,r4
        0x00811ed0:    f003fa5e    ..^.    BL       tuya_ble_malloc ; 0x815390
        0x00811ed4:    0005        ..      MOVS     r5,r0
;;;761        if(ble_evt_buffer==NULL)
        0x00811ed6:    d018        ..      BEQ      0x811f0a ; tuya_ble_dp_data_with_time_ms_string_report + 122
;;;762        {
;;;763            return TUYA_BLE_ERR_NO_MEM;
;;;764        }
;;;765        else
;;;766        {
;;;767            memcpy(ble_evt_buffer,p_data,len);
        0x00811ed8:    4622        "F      MOV      r2,r4
        0x00811eda:    4631        1F      MOV      r1,r6
        0x00811edc:    f447f7dd    G...    BL       __aeabi_memcpy ; 0x59e9a
;;;768        }
;;;769    
;;;770        evt.hdr.event = TUYA_BLE_EVT_DP_DATA_WITH_TIME_STRING_REPORTED;
        0x00811ee0:    2004        .       MOVS     r0,#4
        0x00811ee2:    f88d0000    ....    STRB     r0,[sp,#0]
;;;771        memcpy(evt.reported_with_time_string_data.time_string,time_string,13);
        0x00811ee6:    220d        ."      MOVS     r2,#0xd
        0x00811ee8:    4639        9F      MOV      r1,r7
        0x00811eea:    a802        ..      ADD      r0,sp,#8
        0x00811eec:    f447f7d5    G...    BL       __aeabi_memcpy ; 0x59e9a
;;;772        evt.reported_with_time_string_data.p_data = ble_evt_buffer;
;;;773        evt.reported_with_time_string_data.data_len = len;
        0x00811ef0:    9506        ..      STR      r5,[sp,#0x18]
        0x00811ef2:    f8ad401c    ...@    STRH     r4,[sp,#0x1c]
;;;774    
;;;775        if(tuya_ble_event_send(&evt)!=0)
        0x00811ef6:    4668        hF      MOV      r0,sp
        0x00811ef8:    f003f8a1    ....    BL       tuya_ble_event_send ; 0x81503e
        0x00811efc:    2800        .(      CMP      r0,#0
        0x00811efe:    d0d3        ..      BEQ      0x811ea8 ; tuya_ble_dp_data_with_time_ms_string_report + 24
;;;776        {
;;;777            tuya_ble_free(ble_evt_buffer);
        0x00811f00:    4628        (F      MOV      r0,r5
        0x00811f02:    f003fa50    ..P.    BL       tuya_ble_free ; 0x8153a6
;;;778            return TUYA_BLE_ERR_NO_EVENT;
        0x00811f06:    2003        .       MOVS     r0,#3
;;;779        }
;;;780    
;;;781        return TUYA_BLE_SUCCESS;
;;;782    }
        0x00811f08:    e751        Q.      B        0x811dae ; tuya_ble_dp_data_with_time_report + 24
        0x00811f0a:    2004        .       MOVS     r0,#4
        0x00811f0c:    e74f        O.      B        0x811dae ; tuya_ble_dp_data_with_time_report + 24
    tuya_ble_dp_data_with_flag_and_time_ms_string_report
;;;783    
;;;784    /*
;;;785     *@brief
;;;786     *@param
;;;787     *
;;;788     *@note  time_string: 13-byte millisecond string ,for example ,"0000000123456";
;;;789     *
;;;790     * */
;;;791    tuya_ble_status_t tuya_ble_dp_data_with_flag_and_time_ms_string_report(uint16_t sn,tuya_ble_report_mode_t mode,uint8_t *time_string,uint8_t *p_data,uint32_t len)
;;;792    {
        0x00811f0e:    e92d43f0    -..C    PUSH     {r4-r9,lr}
        0x00811f12:    b08d        ..      SUB      sp,sp,#0x34
        0x00811f14:    4607        .F      MOV      r7,r0
        0x00811f16:    2000        .       MOVS     r0,#0
        0x00811f18:    4698        .F      MOV      r8,r3
        0x00811f1a:    4691        .F      MOV      r9,r2
        0x00811f1c:    460e        .F      MOV      r6,r1
;;;793        tuya_ble_evt_param_t evt;
;;;794        uint8_t *ble_evt_buffer=NULL;
;;;795        mtp_ret ret;
;;;796        klv_node_s *list = NULL;
        0x00811f1e:    9c14        ..      LDR      r4,[sp,#0x50]
;;;797    
;;;798        if(tuya_ble_connect_status_get()!=BONDING_CONN)
        0x00811f20:    900b        ..      STR      r0,[sp,#0x2c]
        0x00811f22:    f003f87f    ....    BL       tuya_ble_connect_status_get ; 0x815024
        0x00811f26:    2803        .(      CMP      r0,#3
        0x00811f28:    d001        ..      BEQ      0x811f2e ; tuya_ble_dp_data_with_flag_and_time_ms_string_report + 32
;;;799        {
;;;800            return TUYA_BLE_ERR_INVALID_STATE;
        0x00811f2a:    2007        .       MOVS     r0,#7
        0x00811f2c:    e6ee        ..      B        0x811d0c ; tuya_ble_dp_data_with_flag_report + 28
;;;801        }
;;;802    
;;;803        if((len>(TUYA_BLE_REPORT_MAX_DP_DATA_LEN-17))||(len==0))
        0x00811f2e:    2cf1        .,      CMP      r4,#0xf1
        0x00811f30:    d809        ..      BHI      0x811f46 ; tuya_ble_dp_data_with_flag_and_time_ms_string_report + 56
        0x00811f32:    b144        D.      CBZ      r4,0x811f46 ; tuya_ble_dp_data_with_flag_and_time_ms_string_report + 56
;;;804        {
;;;805            return TUYA_BLE_ERR_INVALID_LENGTH;
;;;806        }
;;;807        ret = data_2_klvlist(p_data,len,&list,0);
        0x00811f34:    2300        .#      MOVS     r3,#0
        0x00811f36:    aa0b        ..      ADD      r2,sp,#0x2c
        0x00811f38:    4621        !F      MOV      r1,r4
        0x00811f3a:    4640        @F      MOV      r0,r8
        0x00811f3c:    f003fbfb    ....    BL       data_2_klvlist ; 0x815736
;;;808        if(MTP_OK != ret)
        0x00811f40:    b118        ..      CBZ      r0,0x811f4a ; tuya_ble_dp_data_with_flag_and_time_ms_string_report + 60
;;;809        {
;;;810            return TUYA_BLE_ERR_INVALID_PARAM;
        0x00811f42:    2006        .       MOVS     r0,#6
        0x00811f44:    e6e2        ..      B        0x811d0c ; tuya_ble_dp_data_with_flag_report + 28
        0x00811f46:    2008        .       MOVS     r0,#8
        0x00811f48:    e6e0        ..      B        0x811d0c ; tuya_ble_dp_data_with_flag_report + 28
;;;811        }
;;;812        free_klv_list(list);
        0x00811f4a:    980b        ..      LDR      r0,[sp,#0x2c]
        0x00811f4c:    f003fb50    ..P.    BL       free_klv_list ; 0x8155f0
;;;813        ble_evt_buffer=(uint8_t *)tuya_ble_malloc(len);
        0x00811f50:    b2a0        ..      UXTH     r0,r4
        0x00811f52:    f003fa1d    ....    BL       tuya_ble_malloc ; 0x815390
        0x00811f56:    0005        ..      MOVS     r5,r0
;;;814        if(ble_evt_buffer==NULL)
        0x00811f58:    d01d        ..      BEQ      0x811f96 ; tuya_ble_dp_data_with_flag_and_time_ms_string_report + 136
;;;815        {
;;;816            return TUYA_BLE_ERR_NO_MEM;
;;;817        }
;;;818        else
;;;819        {
;;;820            memcpy(ble_evt_buffer,p_data,len);
        0x00811f5a:    4622        "F      MOV      r2,r4
        0x00811f5c:    4641        AF      MOV      r1,r8
        0x00811f5e:    f447f79c    G...    BL       __aeabi_memcpy ; 0x59e9a
;;;821        }
;;;822    
;;;823        evt.hdr.event = TUYA_BLE_EVT_DP_DATA_WITH_FLAG_AND_TIME_STRING_REPORTED;
        0x00811f62:    2007        .       MOVS     r0,#7
        0x00811f64:    f88d0000    ....    STRB     r0,[sp,#0]
;;;824        evt.flag_reported_with_time_string_data.sn = sn;
        0x00811f68:    f8ad7008    ...p    STRH     r7,[sp,#8]
;;;825        evt.flag_reported_with_time_string_data.mode  = mode;
        0x00811f6c:    f88d600a    ...`    STRB     r6,[sp,#0xa]
;;;826        memcpy(evt.flag_reported_with_time_string_data.time_string,time_string,13);
        0x00811f70:    220d        ."      MOVS     r2,#0xd
        0x00811f72:    4649        IF      MOV      r1,r9
        0x00811f74:    f10d000b    ....    ADD      r0,sp,#0xb
        0x00811f78:    f447f78f    G...    BL       __aeabi_memcpy ; 0x59e9a
;;;827        evt.flag_reported_with_time_string_data.p_data = ble_evt_buffer;
;;;828        evt.flag_reported_with_time_string_data.data_len = len;
        0x00811f7c:    9507        ..      STR      r5,[sp,#0x1c]
        0x00811f7e:    f8ad4020    .. @    STRH     r4,[sp,#0x20]
;;;829    
;;;830        if(tuya_ble_event_send(&evt)!=0)
        0x00811f82:    4668        hF      MOV      r0,sp
        0x00811f84:    f003f85b    ..[.    BL       tuya_ble_event_send ; 0x81503e
        0x00811f88:    2800        .(      CMP      r0,#0
        0x00811f8a:    d0cf        ..      BEQ      0x811f2c ; tuya_ble_dp_data_with_flag_and_time_ms_string_report + 30
;;;831        {
;;;832            tuya_ble_free(ble_evt_buffer);
        0x00811f8c:    4628        (F      MOV      r0,r5
        0x00811f8e:    f003fa0a    ....    BL       tuya_ble_free ; 0x8153a6
;;;833            return TUYA_BLE_ERR_NO_EVENT;
        0x00811f92:    2003        .       MOVS     r0,#3
;;;834        }
;;;835    
;;;836        return TUYA_BLE_SUCCESS;
;;;837    }
        0x00811f94:    e6ba        ..      B        0x811d0c ; tuya_ble_dp_data_with_flag_report + 28
        0x00811f96:    2004        .       MOVS     r0,#4
        0x00811f98:    e6b8        ..      B        0x811d0c ; tuya_ble_dp_data_with_flag_report + 28
    tuya_ble_data_passthrough
;;;838    
;;;839    /**
;;;840     * @brief   Function for data passthrough.
;;;841     *
;;;842     * @note    The tuya sdk will forwards the data to the app.
;;;843     *.
;;;844     * */
;;;845    tuya_ble_status_t tuya_ble_data_passthrough(uint8_t *p_data,uint32_t len)
;;;846    {
        0x00811f9a:    b570        p.      PUSH     {r4-r6,lr}
        0x00811f9c:    b08c        ..      SUB      sp,sp,#0x30
        0x00811f9e:    460c        .F      MOV      r4,r1
        0x00811fa0:    4606        .F      MOV      r6,r0
;;;847        tuya_ble_evt_param_t evt;
;;;848        uint8_t *ble_evt_buffer;
;;;849    
;;;850        if(tuya_ble_connect_status_get()!=BONDING_CONN)
        0x00811fa2:    f003f83f    ..?.    BL       tuya_ble_connect_status_get ; 0x815024
        0x00811fa6:    2803        .(      CMP      r0,#3
        0x00811fa8:    d002        ..      BEQ      0x811fb0 ; tuya_ble_data_passthrough + 22
;;;851        {
;;;852            return TUYA_BLE_ERR_INVALID_STATE;
        0x00811faa:    2007        .       MOVS     r0,#7
        0x00811fac:    b00c        ..      ADD      sp,sp,#0x30
        0x00811fae:    bd70        p.      POP      {r4-r6,pc}
;;;853        }
;;;854    
;;;855        if(len>TUYA_BLE_TRANSMISSION_MAX_DATA_LEN)
        0x00811fb0:    f5b47f79    ..y.    CMP      r4,#0x3e4
        0x00811fb4:    d301        ..      BCC      0x811fba ; tuya_ble_data_passthrough + 32
;;;856        {
;;;857            return TUYA_BLE_ERR_INVALID_LENGTH;
        0x00811fb6:    2008        .       MOVS     r0,#8
        0x00811fb8:    e7f8        ..      B        0x811fac ; tuya_ble_data_passthrough + 18
;;;858        }
;;;859    
;;;860        ble_evt_buffer=(uint8_t *)tuya_ble_malloc(len);
        0x00811fba:    b2a0        ..      UXTH     r0,r4
        0x00811fbc:    f003f9e8    ....    BL       tuya_ble_malloc ; 0x815390
        0x00811fc0:    0005        ..      MOVS     r5,r0
;;;861        if(ble_evt_buffer==NULL)
        0x00811fc2:    d013        ..      BEQ      0x811fec ; tuya_ble_data_passthrough + 82
;;;862        {
;;;863            return TUYA_BLE_ERR_NO_MEM;
;;;864        }
;;;865    
;;;866        memcpy(ble_evt_buffer,(uint8_t *)p_data,len);
        0x00811fc4:    4622        "F      MOV      r2,r4
        0x00811fc6:    4631        1F      MOV      r1,r6
        0x00811fc8:    f447f767    G.g.    BL       __aeabi_memcpy ; 0x59e9a
;;;867        evt.hdr.event = TUYA_BLE_EVT_DATA_PASSTHROUGH;
        0x00811fcc:    200a        .       MOVS     r0,#0xa
        0x00811fce:    f88d0000    ....    STRB     r0,[sp,#0]
;;;868        evt.passthrough_data.p_data = ble_evt_buffer;
;;;869        evt.passthrough_data.data_len = len;
        0x00811fd2:    9503        ..      STR      r5,[sp,#0xc]
        0x00811fd4:    f8ad4008    ...@    STRH     r4,[sp,#8]
;;;870    
;;;871        if(tuya_ble_event_send(&evt)!=0)
        0x00811fd8:    4668        hF      MOV      r0,sp
        0x00811fda:    f003f830    ..0.    BL       tuya_ble_event_send ; 0x81503e
        0x00811fde:    2800        .(      CMP      r0,#0
        0x00811fe0:    d0e4        ..      BEQ      0x811fac ; tuya_ble_data_passthrough + 18
;;;872        {
;;;873            tuya_ble_free(ble_evt_buffer);
        0x00811fe2:    4628        (F      MOV      r0,r5
        0x00811fe4:    f003f9df    ....    BL       tuya_ble_free ; 0x8153a6
;;;874            return TUYA_BLE_ERR_NO_EVENT;
        0x00811fe8:    2003        .       MOVS     r0,#3
;;;875        }
;;;876    
;;;877        return TUYA_BLE_SUCCESS;
;;;878    
;;;879    }
        0x00811fea:    e7df        ..      B        0x811fac ; tuya_ble_data_passthrough + 18
        0x00811fec:    2004        .       MOVS     r0,#4
        0x00811fee:    e7dd        ..      B        0x811fac ; tuya_ble_data_passthrough + 18
    tuya_ble_production_test_asynchronous_response
;;;880    
;;;881    /**
;;;882     * @brief   Function for response the production test instruction asynchronous.
;;;883     *
;;;884     * @param   [in]channel: 0-uart ,1 - ble.
;;;885     *          [in]p_data  : pointer to production test cmd data(Complete instruction,include0x66 0xaa and checksum.)
;;;886     *          [in]len    : Number of bytes of pdata.
;;;887     * @note
;;;888     *.
;;;889     * */
;;;890    tuya_ble_status_t tuya_ble_production_test_asynchronous_response(uint8_t channel,uint8_t *p_data,uint32_t len)
;;;891    {
        0x00811ff0:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00811ff2:    b08b        ..      SUB      sp,sp,#0x2c
        0x00811ff4:    4614        .F      MOV      r4,r2
        0x00811ff6:    460f        .F      MOV      r7,r1
        0x00811ff8:    4606        .F      MOV      r6,r0
        0x00811ffa:    f5b27f79    ..y.    CMP      r2,#0x3e4
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_api.c (891)
        0x00811ffe:    d302        ..      BCC      0x812006 ; tuya_ble_production_test_asynchronous_response + 22
;;;892        tuya_ble_evt_param_t evt;
;;;893        uint8_t *ble_evt_buffer;
;;;894    
;;;895        if(len>TUYA_BLE_TRANSMISSION_MAX_DATA_LEN)
;;;896        {
;;;897            return TUYA_BLE_ERR_INVALID_LENGTH;
        0x00812000:    2008        .       MOVS     r0,#8
        0x00812002:    b00b        ..      ADD      sp,sp,#0x2c
        0x00812004:    bdf0        ..      POP      {r4-r7,pc}
;;;898        }
;;;899    
;;;900        ble_evt_buffer=(uint8_t *)tuya_ble_malloc(len);
        0x00812006:    b2a0        ..      UXTH     r0,r4
        0x00812008:    f003f9c2    ....    BL       tuya_ble_malloc ; 0x815390
        0x0081200c:    0005        ..      MOVS     r5,r0
;;;901        if(ble_evt_buffer==NULL)
        0x0081200e:    d015        ..      BEQ      0x81203c ; tuya_ble_production_test_asynchronous_response + 76
;;;902        {
;;;903            return TUYA_BLE_ERR_NO_MEM;
;;;904        }
;;;905    
;;;906        memcpy(ble_evt_buffer,(uint8_t *)p_data,len);
        0x00812010:    4622        "F      MOV      r2,r4
        0x00812012:    4639        9F      MOV      r1,r7
        0x00812014:    f447f741    G.A.    BL       __aeabi_memcpy ; 0x59e9a
;;;907        evt.hdr.event = TUYA_BLE_EVT_PRODUCTION_TEST_RESPONSE;
        0x00812018:    200b        .       MOVS     r0,#0xb
        0x0081201a:    f88d0000    ....    STRB     r0,[sp,#0]
;;;908        evt.prod_test_res_data.p_data = ble_evt_buffer;
;;;909        evt.prod_test_res_data.data_len = len;
        0x0081201e:    f8ad400a    ...@    STRH     r4,[sp,#0xa]
        0x00812022:    9503        ..      STR      r5,[sp,#0xc]
;;;910        evt.prod_test_res_data.channel = channel;
        0x00812024:    f88d6008    ...`    STRB     r6,[sp,#8]
;;;911    
;;;912        if(tuya_ble_event_send(&evt)!=0)
        0x00812028:    4668        hF      MOV      r0,sp
        0x0081202a:    f003f808    ....    BL       tuya_ble_event_send ; 0x81503e
        0x0081202e:    2800        .(      CMP      r0,#0
        0x00812030:    d0e7        ..      BEQ      0x812002 ; tuya_ble_production_test_asynchronous_response + 18
;;;913        {
;;;914            tuya_ble_free(ble_evt_buffer);
        0x00812032:    4628        (F      MOV      r0,r5
        0x00812034:    f003f9b7    ....    BL       tuya_ble_free ; 0x8153a6
;;;915            return TUYA_BLE_ERR_NO_EVENT;
        0x00812038:    2003        .       MOVS     r0,#3
;;;916        }
;;;917    
;;;918        return TUYA_BLE_SUCCESS;
;;;919    
;;;920    }
        0x0081203a:    e7e2        ..      B        0x812002 ; tuya_ble_production_test_asynchronous_response + 18
        0x0081203c:    2004        .       MOVS     r0,#4
        0x0081203e:    e7e0        ..      B        0x812002 ; tuya_ble_production_test_asynchronous_response + 18
    tuya_ble_net_config_response
;;;921    
;;;922    
;;;923    /**
;;;924     * @brief   Function for response for the net config req.
;;;925     *
;;;926     * @note
;;;927     *.
;;;928     * */
;;;929    tuya_ble_status_t tuya_ble_net_config_response(int16_t result_code)
;;;930    {
        0x00812040:    b510        ..      PUSH     {r4,lr}
        0x00812042:    b08c        ..      SUB      sp,sp,#0x30
        0x00812044:    4604        .F      MOV      r4,r0
;;;931        tuya_ble_evt_param_t evt;
;;;932        tuya_ble_connect_status_t status = tuya_ble_connect_status_get();
        0x00812046:    f002ffed    ....    BL       tuya_ble_connect_status_get ; 0x815024
;;;933    
;;;934        if((status!=BONDING_CONN)&&(status!=UNBONDING_CONN))
        0x0081204a:    2803        .(      CMP      r0,#3
        0x0081204c:    d004        ..      BEQ      0x812058 ; tuya_ble_net_config_response + 24
        0x0081204e:    2801        .(      CMP      r0,#1
        0x00812050:    d002        ..      BEQ      0x812058 ; tuya_ble_net_config_response + 24
;;;935        {
;;;936            return TUYA_BLE_ERR_INVALID_STATE;
        0x00812052:    2007        .       MOVS     r0,#7
        0x00812054:    b00c        ..      ADD      sp,sp,#0x30
        0x00812056:    bd10        ..      POP      {r4,pc}
;;;937        }
;;;938    
;;;939        evt.hdr.event = TUYA_BLE_EVT_NET_CONFIG_RESPONSE;
        0x00812058:    200e        .       MOVS     r0,#0xe
        0x0081205a:    f88d0000    ....    STRB     r0,[sp,#0]
;;;940        evt.net_config_response_data.result_code = result_code;
        0x0081205e:    f8ad4008    ...@    STRH     r4,[sp,#8]
;;;941    
;;;942        if(tuya_ble_event_send(&evt)!=0)
        0x00812062:    4668        hF      MOV      r0,sp
        0x00812064:    f002ffeb    ....    BL       tuya_ble_event_send ; 0x81503e
        0x00812068:    2800        .(      CMP      r0,#0
        0x0081206a:    d0f3        ..      BEQ      0x812054 ; tuya_ble_net_config_response + 20
;;;943        {
;;;944            return TUYA_BLE_ERR_NO_EVENT;
        0x0081206c:    2003        .       MOVS     r0,#3
;;;945        }
;;;946    
;;;947        return TUYA_BLE_SUCCESS;
;;;948    
;;;949    }
        0x0081206e:    e7f1        ..      B        0x812054 ; tuya_ble_net_config_response + 20
    tuya_ble_device_factory_reset
;;;950    
;;;951    #if (!TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;952    /**
;;;953     * @brief   Function for response for ubound req.
;;;954     *
;;;955     * @note
;;;956     *.
;;;957     * */
;;;958    tuya_ble_status_t tuya_ble_ubound_response(uint8_t result_code)
;;;959    {
;;;960        tuya_ble_evt_param_t evt;
;;;961        tuya_ble_connect_status_t status = tuya_ble_connect_status_get();
;;;962    
;;;963        if(status!=BONDING_CONN)
;;;964        {
;;;965            return TUYA_BLE_ERR_INVALID_STATE;
;;;966        }
;;;967    
;;;968        evt.hdr.event = TUYA_BLE_EVT_UNBOUND_RESPONSE;
;;;969        evt.ubound_res_data.result_code = result_code;
;;;970    
;;;971        if(tuya_ble_event_send(&evt)!=0)
;;;972        {
;;;973            return TUYA_BLE_ERR_NO_EVENT;
;;;974        }
;;;975    
;;;976        return TUYA_BLE_SUCCESS;
;;;977    
;;;978    }
;;;979    
;;;980    
;;;981    /**
;;;982     * @brief   Function for response for anomaly ubound req.
;;;983     *
;;;984     * @note
;;;985     *.
;;;986     * */
;;;987    tuya_ble_status_t tuya_ble_anomaly_ubound_response(uint8_t result_code)
;;;988    {
;;;989        tuya_ble_evt_param_t evt;
;;;990        tuya_ble_connect_status_t status = tuya_ble_connect_status_get();
;;;991    
;;;992        if(status!=BONDING_CONN)
;;;993        {
;;;994            return TUYA_BLE_ERR_INVALID_STATE;
;;;995        }
;;;996    
;;;997        evt.hdr.event = TUYA_BLE_EVT_ANOMALY_UNBOUND_RESPONSE;
;;;998        evt.anomaly_ubound_res_data.result_code = result_code;
;;;999    
;;;1000       if(tuya_ble_event_send(&evt)!=0)
;;;1001       {
;;;1002           return TUYA_BLE_ERR_NO_EVENT;
;;;1003       }
;;;1004   
;;;1005       return TUYA_BLE_SUCCESS;
;;;1006   
;;;1007   }
;;;1008   
;;;1009   /**
;;;1010    * @brief   Function for response for device reset req.
;;;1011    *
;;;1012    * @note
;;;1013    *.
;;;1014    * */
;;;1015   tuya_ble_status_t tuya_ble_device_reset_response(uint8_t result_code)
;;;1016   {
;;;1017       tuya_ble_evt_param_t evt;
;;;1018       tuya_ble_connect_status_t status = tuya_ble_connect_status_get();
;;;1019   
;;;1020       if(status!=BONDING_CONN)
;;;1021       {
;;;1022           return TUYA_BLE_ERR_INVALID_STATE;
;;;1023       }
;;;1024   
;;;1025       evt.hdr.event = TUYA_BLE_EVT_DEVICE_RESET_RESPONSE;
;;;1026       evt.device_reset_res_data.result_code = result_code;
;;;1027   
;;;1028       if(tuya_ble_event_send(&evt)!=0)
;;;1029       {
;;;1030           return TUYA_BLE_ERR_NO_EVENT;
;;;1031       }
;;;1032   
;;;1033       return TUYA_BLE_SUCCESS;
;;;1034   
;;;1035   }
;;;1036   
;;;1037   #endif
;;;1038   
;;;1039   /*
;;;1040    *@brief
;;;1041    *@param
;;;1042    *
;;;1043    *@note
;;;1044    *
;;;1045    * */
;;;1046   
;;;1047   tuya_ble_status_t tuya_ble_device_factory_reset(void)
;;;1048   {
        0x00812070:    b500        ..      PUSH     {lr}
        0x00812072:    b08b        ..      SUB      sp,sp,#0x2c
;;;1049       tuya_ble_evt_param_t event;
;;;1050   
;;;1051       event.hdr.event = TUYA_BLE_EVT_FACTORY_RESET;
        0x00812074:    2008        .       MOVS     r0,#8
        0x00812076:    f88d0000    ....    STRB     r0,[sp,#0]
;;;1052   
;;;1053       if(tuya_ble_event_send(&event)!=0)
        0x0081207a:    4668        hF      MOV      r0,sp
        0x0081207c:    f002ffdf    ....    BL       tuya_ble_event_send ; 0x81503e
        0x00812080:    2800        .(      CMP      r0,#0
        0x00812082:    d009        ..      BEQ      0x812098 ; tuya_ble_device_factory_reset + 40
;;;1054       {
;;;1055           TUYA_BLE_LOG_ERROR("tuya_event_send factory reset error");
        0x00812084:    a02a        *.      ADR      r0,{pc}+0xac ; 0x812130
        0x00812086:    f008fd90    ....    BL       get_args ; 0x81abaa
        0x0081208a:    4927        'I      LDR      r1,[pc,#156] ; [0x812128] = 0x8801f44
        0x0081208c:    4602        .F      MOV      r2,r0
        0x0081208e:    3150        P1      ADDS     r1,r1,#0x50
        0x00812090:    4826        &H      LDR      r0,[pc,#152] ; [0x81212c] = 0x21103002
        0x00812092:    f7f5dce4    ....    BL       log_buffer ; 0x7a5e
;;;1056           return TUYA_BLE_ERR_INTERNAL;
        0x00812096:    2001        .       MOVS     r0,#1
;;;1057       }
;;;1058   
;;;1059       return TUYA_BLE_SUCCESS;
;;;1060   }
        0x00812098:    e4c7        ..      B        0x811a2a ; tuya_ble_device_update_product_id + 70
    tuya_ble_time_req
;;;1061   
;;;1062   
;;;1063   /*
;;;1064    *@brief
;;;1065    *@param time_type: 0-13-byte millisecond string ,1 - normal time format
;;;1066    *
;;;1067    *@note
;;;1068    *
;;;1069    * */
;;;1070   
;;;1071   tuya_ble_status_t tuya_ble_time_req(uint8_t time_type)
;;;1072   {
        0x0081209a:    b500        ..      PUSH     {lr}
        0x0081209c:    b08b        ..      SUB      sp,sp,#0x2c
        0x0081209e:    2801        .(      CMP      r0,#1
        0x008120a0:    d901        ..      BLS      0x8120a6 ; tuya_ble_time_req + 12
;;;1073       tuya_ble_evt_param_t event;
;;;1074   
;;;1075       if(time_type>1)
;;;1076       {
;;;1077           return TUYA_BLE_ERR_INVALID_PARAM;
        0x008120a2:    2006        .       MOVS     r0,#6
        0x008120a4:    e4c1        ..      B        0x811a2a ; tuya_ble_device_update_product_id + 70
;;;1078       }
;;;1079   
;;;1080       event.hdr.event = TUYA_BLE_EVT_TIME_REQ;
        0x008120a6:    2114        .!      MOVS     r1,#0x14
        0x008120a8:    f88d0008    ....    STRB     r0,[sp,#8]
        0x008120ac:    f88d1000    ....    STRB     r1,[sp,#0]
;;;1081       event.time_req_data.time_type = time_type;
;;;1082   
;;;1083       if(tuya_ble_event_send(&event)!=0)
        0x008120b0:    4668        hF      MOV      r0,sp
        0x008120b2:    f002ffc4    ....    BL       tuya_ble_event_send ; 0x81503e
        0x008120b6:    2800        .(      CMP      r0,#0
        0x008120b8:    d0f4        ..      BEQ      0x8120a4 ; tuya_ble_time_req + 10
;;;1084       {
;;;1085           TUYA_BLE_LOG_ERROR("tuya_event_send time req error");
        0x008120ba:    a02a        *.      ADR      r0,{pc}+0xaa ; 0x812164
        0x008120bc:    f008fd75    ..u.    BL       get_args ; 0x81abaa
        0x008120c0:    4919        .I      LDR      r1,[pc,#100] ; [0x812128] = 0x8801f44
        0x008120c2:    4602        .F      MOV      r2,r0
        0x008120c4:    3184        .1      ADDS     r1,r1,#0x84
        0x008120c6:    4819        .H      LDR      r0,[pc,#100] ; [0x81212c] = 0x21103002
        0x008120c8:    f7f5dcc9    ....    BL       log_buffer ; 0x7a5e
;;;1086           return TUYA_BLE_ERR_INTERNAL;
        0x008120cc:    2001        .       MOVS     r0,#1
;;;1087       }
;;;1088   
;;;1089       return TUYA_BLE_SUCCESS;
;;;1090   }
        0x008120ce:    e4ac        ..      B        0x811a2a ; tuya_ble_device_update_product_id + 70
    tuya_ble_ota_response
;;;1091   
;;;1092   /*
;;;1093    *@brief
;;;1094    *@param
;;;1095    *
;;;1096    *@note
;;;1097    *
;;;1098    * */
;;;1099   
;;;1100   tuya_ble_status_t tuya_ble_ota_response(tuya_ble_ota_response_t *p_data)
;;;1101   {
        0x008120d0:    b530        0.      PUSH     {r4,r5,lr}
        0x008120d2:    b08b        ..      SUB      sp,sp,#0x2c
        0x008120d4:    4604        .F      MOV      r4,r0
;;;1102       tuya_ble_evt_param_t evt;
;;;1103       uint8_t *ble_evt_buffer;
;;;1104   
;;;1105       if(tuya_ble_connect_status_get()!=BONDING_CONN)
        0x008120d6:    f002ffa5    ....    BL       tuya_ble_connect_status_get ; 0x815024
        0x008120da:    2803        .(      CMP      r0,#3
        0x008120dc:    d002        ..      BEQ      0x8120e4 ; tuya_ble_ota_response + 20
;;;1106       {
;;;1107           return TUYA_BLE_ERR_INVALID_STATE;
        0x008120de:    2007        .       MOVS     r0,#7
        0x008120e0:    b00b        ..      ADD      sp,sp,#0x2c
        0x008120e2:    bd30        0.      POP      {r4,r5,pc}
;;;1108       }
;;;1109   
;;;1110       if(p_data->data_len>TUYA_BLE_TRANSMISSION_MAX_DATA_LEN)
        0x008120e4:    8860        `.      LDRH     r0,[r4,#2]
        0x008120e6:    f5b07f79    ..y.    CMP      r0,#0x3e4
        0x008120ea:    d301        ..      BCC      0x8120f0 ; tuya_ble_ota_response + 32
;;;1111       {
;;;1112           return TUYA_BLE_ERR_INVALID_LENGTH;
        0x008120ec:    2008        .       MOVS     r0,#8
        0x008120ee:    e7f7        ..      B        0x8120e0 ; tuya_ble_ota_response + 16
;;;1113       }
;;;1114   
;;;1115       ble_evt_buffer=(uint8_t *)tuya_ble_malloc(p_data->data_len);
        0x008120f0:    f003f94e    ..N.    BL       tuya_ble_malloc ; 0x815390
        0x008120f4:    0005        ..      MOVS     r5,r0
;;;1116       if(ble_evt_buffer==NULL)
        0x008120f6:    d051        Q.      BEQ      0x81219c ; tuya_ble_ota_response + 204
;;;1117       {
;;;1118           return TUYA_BLE_ERR_NO_MEM;
;;;1119       }
;;;1120   
;;;1121       memcpy(ble_evt_buffer,(uint8_t *)p_data->p_data,p_data->data_len);
        0x008120f8:    8862        b.      LDRH     r2,[r4,#2]
        0x008120fa:    6861        ah      LDR      r1,[r4,#4]
        0x008120fc:    f447f6cd    G...    BL       __aeabi_memcpy ; 0x59e9a
;;;1122       evt.hdr.event = TUYA_BLE_EVT_OTA_RESPONSE;
        0x00812100:    2009        .       MOVS     r0,#9
        0x00812102:    f88d0000    ....    STRB     r0,[sp,#0]
;;;1123       evt.ota_response_data.type = p_data->type;
        0x00812106:    7820         x      LDRB     r0,[r4,#0]
        0x00812108:    f88d0008    ....    STRB     r0,[sp,#8]
;;;1124       evt.ota_response_data.p_data = ble_evt_buffer;
;;;1125       evt.ota_response_data.data_len = p_data->data_len;
        0x0081210c:    9503        ..      STR      r5,[sp,#0xc]
        0x0081210e:    8860        `.      LDRH     r0,[r4,#2]
        0x00812110:    f8ad000a    ....    STRH     r0,[sp,#0xa]
;;;1126   
;;;1127       if(tuya_ble_event_send(&evt)!=0)
        0x00812114:    4668        hF      MOV      r0,sp
        0x00812116:    f002ff92    ....    BL       tuya_ble_event_send ; 0x81503e
        0x0081211a:    2800        .(      CMP      r0,#0
        0x0081211c:    d0e0        ..      BEQ      0x8120e0 ; tuya_ble_ota_response + 16
;;;1128       {
;;;1129           tuya_ble_free(ble_evt_buffer);
        0x0081211e:    4628        (F      MOV      r0,r5
        0x00812120:    e038        8.      B        0x812194 ; tuya_ble_ota_response + 196
    $d
        0x00812122:    0000        ..      DCW    0
        0x00812124:    0081ce68    h...    DCD    8506984
        0x00812128:    08801f44    D...    DCD    142614340
        0x0081212c:    21103002    .0.!    DCD    554708994
        0x00812130:    205d455b    [E]     DCD    542983515
        0x00812134:    41595554    TUYA    DCD    1096373588
        0x00812138:    454c425f    _BLE    DCD    1162625631
        0x0081213c:    7574203a    : tu    DCD    1970544698
        0x00812140:    655f6179    ya_e    DCD    1700749689
        0x00812144:    746e6576    vent    DCD    1953391990
        0x00812148:    6e65735f    _sen    DCD    1852142431
        0x0081214c:    61662064    d fa    DCD    1634082916
        0x00812150:    726f7463    ctor    DCD    1919906915
        0x00812154:    65722079    y re    DCD    1701978233
        0x00812158:    20746573    set     DCD    544499059
        0x0081215c:    6f727265    erro    DCD    1869771365
        0x00812160:    00000072    r...    DCD    114
        0x00812164:    205d455b    [E]     DCD    542983515
        0x00812168:    41595554    TUYA    DCD    1096373588
        0x0081216c:    454c425f    _BLE    DCD    1162625631
        0x00812170:    7574203a    : tu    DCD    1970544698
        0x00812174:    655f6179    ya_e    DCD    1700749689
        0x00812178:    746e6576    vent    DCD    1953391990
        0x0081217c:    6e65735f    _sen    DCD    1852142431
        0x00812180:    69742064    d ti    DCD    1769218148
        0x00812184:    7220656d    me r    DCD    1914725741
        0x00812188:    65207165    eq e    DCD    1696624997
        0x0081218c:    726f7272    rror    DCD    1919906418
        0x00812190:    00000000    ....    DCD    0
    $t
        0x00812194:    f003f907    ....    BL       tuya_ble_free ; 0x8153a6
;;;1130           return TUYA_BLE_ERR_NO_EVENT;
        0x00812198:    2003        .       MOVS     r0,#3
;;;1131       }
;;;1132   
;;;1133       return TUYA_BLE_SUCCESS;
;;;1134   }
        0x0081219a:    e7a1        ..      B        0x8120e0 ; tuya_ble_ota_response + 16
        0x0081219c:    2004        .       MOVS     r0,#4
        0x0081219e:    e79f        ..      B        0x8120e0 ; tuya_ble_ota_response + 16
    tuya_ble_vtimer_conncet_monitor_callback
;;;1135   
;;;1136   tuya_ble_timer_t tuya_ble_xtimer_connect_monitor;
;;;1137   
;;;1138   #define tuya_ble_connect_monitor_timeout_ms 30000
;;;1139   
;;;1140   static void tuya_ble_vtimer_conncet_monitor_callback(tuya_ble_timer_t timer)
;;;1141   {
        0x008121a0:    b510        ..      PUSH     {r4,lr}
;;;1142       tuya_ble_connect_status_t connect_state = tuya_ble_connect_status_get();
        0x008121a2:    f002ff3f    ..?.    BL       tuya_ble_connect_status_get ; 0x815024
;;;1143   
;;;1144       if( (connect_state == UNBONDING_UNAUTH_CONN)||(connect_state == BONDING_UNAUTH_CONN) )
        0x008121a6:    2805        .(      CMP      r0,#5
        0x008121a8:    d001        ..      BEQ      0x8121ae ; tuya_ble_vtimer_conncet_monitor_callback + 14
        0x008121aa:    2804        .(      CMP      r0,#4
        0x008121ac:    d10b        ..      BNE      0x8121c6 ; tuya_ble_vtimer_conncet_monitor_callback + 38
;;;1145       {
;;;1146           TUYA_BLE_LOG_DEBUG("ble disconncet because monitor timer timeout.");
        0x008121ae:    a0f0        ..      ADR      r0,{pc}+0x3c2 ; 0x812570
        0x008121b0:    f008fcfb    ....    BL       get_args ; 0x81abaa
        0x008121b4:    4602        .F      MOV      r2,r0
        0x008121b6:    49fd        .I      LDR      r1,[pc,#1012] ; [0x8125ac] = 0x8801ff8
        0x008121b8:    48fd        .H      LDR      r0,[pc,#1012] ; [0x8125b0] = 0x21103002
        0x008121ba:    f7f5dc50    ..P.    BL       log_buffer ; 0x7a5e
;;;1147           tuya_ble_gap_disconnect();
        0x008121be:    e8bd4010    ...@    POP      {r4,lr}
        0x008121c2:    f008bb55    ..U.    B.W      tuya_ble_gap_disconnect ; 0x81a870
;;;1148       }
;;;1149   
;;;1150   }
        0x008121c6:    bd10        ..      POP      {r4,pc}
    tuya_ble_connect_monitor_timer_start
;;;1151   
;;;1152   
;;;1153   static void tuya_ble_connect_monitor_timer_init(void)
;;;1154   {
;;;1155       if(tuya_ble_timer_create(&tuya_ble_xtimer_connect_monitor,tuya_ble_connect_monitor_timeout_ms, TUYA_BLE_TIMER_SINGLE_SHOT,tuya_ble_vtimer_conncet_monitor_callback) != TUYA_BLE_SUCCESS)
;;;1156       {
;;;1157           TUYA_BLE_LOG_ERROR("tuya_ble_xtimer_connect_monitor creat failed");
;;;1158       }
;;;1159   
;;;1160   }
;;;1161   
;;;1162   
;;;1163   void tuya_ble_connect_monitor_timer_start(void)
;;;1164   {
;;;1165       if(tuya_ble_timer_start(tuya_ble_xtimer_connect_monitor) != TUYA_BLE_SUCCESS)
        0x008121c8:    48fa        .H      LDR      r0,[pc,#1000] ; [0x8125b4] = 0x208fc8
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_api.c (1164)
        0x008121ca:    b510        ..      PUSH     {r4,lr}
;;;1165       if(tuya_ble_timer_start(tuya_ble_xtimer_connect_monitor) != TUYA_BLE_SUCCESS)
        0x008121cc:    68c0        .h      LDR      r0,[r0,#0xc]
        0x008121ce:    f008fb81    ....    BL       tuya_ble_timer_start ; 0x81a8d4
        0x008121d2:    2800        .(      CMP      r0,#0
        0x008121d4:    d00a        ..      BEQ      0x8121ec ; tuya_ble_connect_monitor_timer_start + 36
;;;1166       {
;;;1167           TUYA_BLE_LOG_ERROR("tuya_ble_xtimer_connect_monitor start failed");
        0x008121d6:    a0f8        ..      ADR      r0,{pc}+0x3e2 ; 0x8125b8
        0x008121d8:    f008fce7    ....    BL       get_args ; 0x81abaa
        0x008121dc:    49f3        .I      LDR      r1,[pc,#972] ; [0x8125ac] = 0x8801ff8
        0x008121de:    4602        .F      MOV      r2,r0
        0x008121e0:    e8bd4010    ...@    POP      {r4,lr}
        0x008121e4:    3178        x1      ADDS     r1,r1,#0x78
        0x008121e6:    48f2        .H      LDR      r0,[pc,#968] ; [0x8125b0] = 0x21103002
        0x008121e8:    f7f59c39    ..9.    B        log_buffer ; 0x7a5e
;;;1168       }
;;;1169   
;;;1170   }
        0x008121ec:    bd10        ..      POP      {r4,pc}
    tuya_ble_connect_monitor_timer_stop
        0x008121ee:    48f1        .H      LDR      r0,[pc,#964] ; [0x8125b4] = 0x208fc8
;;;1171   
;;;1172   
;;;1173   void tuya_ble_connect_monitor_timer_stop(void)
;;;1174   {
        0x008121f0:    b510        ..      PUSH     {r4,lr}
;;;1175   
;;;1176       if(tuya_ble_timer_stop(tuya_ble_xtimer_connect_monitor) != TUYA_BLE_SUCCESS)
        0x008121f2:    68c0        .h      LDR      r0,[r0,#0xc]
        0x008121f4:    f008fb77    ..w.    BL       tuya_ble_timer_stop ; 0x81a8e6
        0x008121f8:    2800        .(      CMP      r0,#0
        0x008121fa:    d00a        ..      BEQ      0x812212 ; tuya_ble_connect_monitor_timer_stop + 36
;;;1177       {
;;;1178           TUYA_BLE_LOG_ERROR("tuya_ble_xtimer_connect_monitor start failed");
        0x008121fc:    a0ee        ..      ADR      r0,{pc}+0x3bc ; 0x8125b8
        0x008121fe:    f008fcd4    ....    BL       get_args ; 0x81abaa
        0x00812202:    49ea        .I      LDR      r1,[pc,#936] ; [0x8125ac] = 0x8801ff8
        0x00812204:    4602        .F      MOV      r2,r0
        0x00812206:    e8bd4010    ...@    POP      {r4,lr}
        0x0081220a:    31b4        .1      ADDS     r1,r1,#0xb4
        0x0081220c:    48e8        .H      LDR      r0,[pc,#928] ; [0x8125b0] = 0x21103002
        0x0081220e:    f7f59c26    ..&.    B        log_buffer ; 0x7a5e
;;;1179       }
;;;1180   
;;;1181   }
        0x00812212:    bd10        ..      POP      {r4,pc}
    tuya_ble_adv_data_connecting_request_set
;;;1182   
;;;1183   #if (TUYA_BLE_PROTOCOL_VERSION_HIGN >= 3) 
;;;1184   /*
;;;1185    *@brief
;;;1186    *@param [in]on_off: 0-off ,1 - on.
;;;1187    *
;;;1188    *@note
;;;1189    *
;;;1190    * */
;;;1191   tuya_ble_status_t tuya_ble_adv_data_connecting_request_set(uint8_t on_off)
;;;1192   {
        0x00812214:    b510        ..      PUSH     {r4,lr}
        0x00812216:    b08c        ..      SUB      sp,sp,#0x30
        0x00812218:    4604        .F      MOV      r4,r0
        0x0081221a:    2801        .(      CMP      r0,#1
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_api.c (1192)
        0x0081221c:    d901        ..      BLS      0x812222 ; tuya_ble_adv_data_connecting_request_set + 14
;;;1193       tuya_ble_connect_status_t currnet_connect_status;
;;;1194       tuya_ble_evt_param_t evt;
;;;1195   
;;;1196       if(on_off>1)
;;;1197       {
;;;1198           return TUYA_BLE_ERR_INVALID_PARAM;
        0x0081221e:    2006        .       MOVS     r0,#6
        0x00812220:    e718        ..      B        0x812054 ; tuya_ble_net_config_response + 20
;;;1199       }
;;;1200       currnet_connect_status = tuya_ble_connect_status_get();
        0x00812222:    f002feff    ....    BL       tuya_ble_connect_status_get ; 0x815024
;;;1201       if((currnet_connect_status != BONDING_UNCONN)&&(currnet_connect_status!= UNBONDING_UNCONN))
        0x00812226:    2802        .(      CMP      r0,#2
        0x00812228:    d002        ..      BEQ      0x812230 ; tuya_ble_adv_data_connecting_request_set + 28
        0x0081222a:    b108        ..      CBZ      r0,0x812230 ; tuya_ble_adv_data_connecting_request_set + 28
;;;1202       {
;;;1203           return TUYA_BLE_ERR_INVALID_STATE;
        0x0081222c:    2007        .       MOVS     r0,#7
        0x0081222e:    e711        ..      B        0x812054 ; tuya_ble_net_config_response + 20
;;;1204       }
;;;1205   
;;;1206       evt.hdr.event = TUYA_BLE_EVT_CONNECTING_REQUEST;
        0x00812230:    2016        .       MOVS     r0,#0x16
        0x00812232:    f88d0000    ....    STRB     r0,[sp,#0]
;;;1207       evt.connecting_request_data.cmd = on_off;
        0x00812236:    f88d4008    ...@    STRB     r4,[sp,#8]
;;;1208   
;;;1209       if(tuya_ble_event_send(&evt)!=0)
        0x0081223a:    4668        hF      MOV      r0,sp
        0x0081223c:    f002feff    ....    BL       tuya_ble_event_send ; 0x81503e
        0x00812240:    2800        .(      CMP      r0,#0
        0x00812242:    d0ed        ..      BEQ      0x812220 ; tuya_ble_adv_data_connecting_request_set + 12
;;;1210       {
;;;1211           return TUYA_BLE_ERR_NO_EVENT;
        0x00812244:    2003        .       MOVS     r0,#3
;;;1212       }
;;;1213   
;;;1214       return TUYA_BLE_SUCCESS;
;;;1215   
;;;1216   }
        0x00812246:    e705        ..      B        0x812054 ; tuya_ble_net_config_response + 20
    tuya_ble_connected_handler
;;;1217   
;;;1218   #endif
;;;1219   
;;;1220   extern tuya_ble_parameters_settings_t tuya_ble_current_para;
;;;1221   
;;;1222   /*
;;;1223    *@brief
;;;1224    *@param
;;;1225    *
;;;1226    *@note
;;;1227    *
;;;1228    * */
;;;1229   void tuya_ble_connected_handler(void)
;;;1230   {
        0x00812248:    b500        ..      PUSH     {lr}
        0x0081224a:    b08b        ..      SUB      sp,sp,#0x2c
;;;1231       tuya_ble_evt_param_t event;
;;;1232   
;;;1233       event.hdr.event = TUYA_BLE_EVT_CONNECT_STATUS_UPDATE;
        0x0081224c:    2010        .       MOVS     r0,#0x10
        0x0081224e:    f88d0000    ....    STRB     r0,[sp,#0]
;;;1234       event.connect_change_evt = TUYA_BLE_CONNECTED;
        0x00812252:    2000        .       MOVS     r0,#0
        0x00812254:    f88d0008    ....    STRB     r0,[sp,#8]
;;;1235   
;;;1236       if(tuya_ble_event_send(&event)!=0)
        0x00812258:    4668        hF      MOV      r0,sp
        0x0081225a:    f002fef0    ....    BL       tuya_ble_event_send ; 0x81503e
        0x0081225e:    2800        .(      CMP      r0,#0
        0x00812260:    d008        ..      BEQ      0x812274 ; tuya_ble_connected_handler + 44
;;;1237       {
;;;1238           TUYA_BLE_LOG_ERROR("tuya_event_send connect handler error");
        0x00812262:    a0e4        ..      ADR      r0,{pc}+0x392 ; 0x8125f4
        0x00812264:    f008fca1    ....    BL       get_args ; 0x81abaa
        0x00812268:    49d0        .I      LDR      r1,[pc,#832] ; [0x8125ac] = 0x8801ff8
        0x0081226a:    4602        .F      MOV      r2,r0
        0x0081226c:    31f0        .1      ADDS     r1,r1,#0xf0
        0x0081226e:    48d0        .H      LDR      r0,[pc,#832] ; [0x8125b0] = 0x21103002
        0x00812270:    f7f5dbf5    ....    BL       log_buffer ; 0x7a5e
;;;1239       }
;;;1240   }
        0x00812274:    e404        ..      B        0x811a80 ; tuya_ble_device_update_login_key + 72
    tuya_ble_disconnected_handler
;;;1241   
;;;1242   /*
;;;1243    *@brief
;;;1244    *@param
;;;1245    *
;;;1246    *@note
;;;1247    *
;;;1248    * */
;;;1249   void tuya_ble_disconnected_handler(void)
;;;1250   {
        0x00812276:    b500        ..      PUSH     {lr}
        0x00812278:    b08b        ..      SUB      sp,sp,#0x2c
;;;1251       tuya_ble_evt_param_t event;
;;;1252   
;;;1253       event.hdr.event = TUYA_BLE_EVT_CONNECT_STATUS_UPDATE;
        0x0081227a:    2010        .       MOVS     r0,#0x10
        0x0081227c:    f88d0000    ....    STRB     r0,[sp,#0]
;;;1254       event.connect_change_evt = TUYA_BLE_DISCONNECTED;
        0x00812280:    2001        .       MOVS     r0,#1
        0x00812282:    f88d0008    ....    STRB     r0,[sp,#8]
;;;1255   
;;;1256       if(tuya_ble_event_send(&event)!=0)
        0x00812286:    4668        hF      MOV      r0,sp
        0x00812288:    f002fed9    ....    BL       tuya_ble_event_send ; 0x81503e
        0x0081228c:    2800        .(      CMP      r0,#0
        0x0081228e:    d007        ..      BEQ      0x8122a0 ; tuya_ble_disconnected_handler + 42
;;;1257       {
;;;1258           TUYA_BLE_LOG_ERROR("tuya_event_send disconnect handler error");
        0x00812290:    a0e5        ..      ADR      r0,{pc}+0x398 ; 0x812628
        0x00812292:    f008fc8a    ....    BL       get_args ; 0x81abaa
        0x00812296:    4602        .F      MOV      r2,r0
        0x00812298:    49f1        .I      LDR      r1,[pc,#964] ; [0x812660] = 0x880211c
        0x0081229a:    48c5        .H      LDR      r0,[pc,#788] ; [0x8125b0] = 0x21103002
        0x0081229c:    f7f5dbdf    ....    BL       log_buffer ; 0x7a5e
;;;1259       }
;;;1260   }
        0x008122a0:    e414        ..      B        0x811acc ; tuya_ble_device_update_bound_state + 64
    tuya_ble_sdk_init
;;;1261   
;;;1262   /*
;;;1263    *@brief
;;;1264    *@param
;;;1265    *
;;;1266    *@note
;;;1267    *
;;;1268    * */
;;;1269   tuya_ble_status_t tuya_ble_sdk_init(tuya_ble_device_param_t * param_data)
;;;1270   {
        0x008122a2:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x008122a6:    b08e        ..      SUB      sp,sp,#0x38
        0x008122a8:    4604        .F      MOV      r4,r0
;;;1271       tuya_ble_cb_evt_param_t event;
;;;1272       uint8_t device_id_temp[16];
;;;1273       uint8_t device_id_temp2[20];
;;;1274       tuya_ble_gap_addr_t bt_addr;
;;;1275       uint8_t mac_temp[6];
;;;1276   
;;;1277   #if (!TUYA_BLE_DEVICE_AUTH_DATA_STORE)
;;;1278       if((param_data->device_id_len!=16)&&(param_data->device_id_len!=20))
;;;1279       {
;;;1280           TUYA_BLE_LOG_ERROR("tuya_ble_sdk_init param_data->device_id_len error.");
;;;1281           return TUYA_BLE_ERR_INVALID_PARAM;
;;;1282       }
;;;1283   #endif
;;;1284   
;;;1285       tuya_ble_storage_init();
        0x008122aa:    f003fc4c    ..L.    BL       tuya_ble_storage_init ; 0x815b46
        0x008122ae:    4ded        .M      LDR      r5,[pc,#948] ; [0x812664] = 0x2097d4
;;;1286   
;;;1287       if(param_data->product_id_len>0)       //
        0x008122b0:    7da1        .}      LDRB     r1,[r4,#0x16]
        0x008122b2:    f5057ae1    ...z    ADD      r10,r5,#0x1c2
        0x008122b6:    b181        ..      CBZ      r1,0x8122da ; tuya_ble_sdk_init + 56
;;;1288       {
;;;1289           tuya_ble_current_para.pid_type = param_data->p_type;
        0x008122b8:    7d60        `}      LDRB     r0,[r4,#0x15]
        0x008122ba:    f88501c0    ....    STRB     r0,[r5,#0x1c0]
;;;1290   
;;;1291           tuya_ble_current_para.pid_len = param_data->product_id_len;
        0x008122be:    7da0        .}      LDRB     r0,[r4,#0x16]
        0x008122c0:    f88501c1    ....    STRB     r0,[r5,#0x1c1]
;;;1292   
;;;1293           if(tuya_ble_current_para.pid_len>TUYA_BLE_PRODUCT_ID_MAX_LEN)
        0x008122c4:    2810        .(      CMP      r0,#0x10
        0x008122c6:    d902        ..      BLS      0x8122ce ; tuya_ble_sdk_init + 44
;;;1294           {
;;;1295               tuya_ble_current_para.pid_len = TUYA_BLE_PRODUCT_ID_MAX_LEN;
        0x008122c8:    2010        .       MOVS     r0,#0x10
        0x008122ca:    f88501c1    ....    STRB     r0,[r5,#0x1c1]
;;;1296           }
;;;1297   
;;;1298           memcpy(tuya_ble_current_para.pid,param_data->product_id,tuya_ble_current_para.pid_len);
        0x008122ce:    b2c2        ..      UXTB     r2,r0
        0x008122d0:    f1040117    ....    ADD      r1,r4,#0x17
        0x008122d4:    4650        PF      MOV      r0,r10
        0x008122d6:    f447f5e0    G...    BL       __aeabi_memcpy ; 0x59e9a
        0x008122da:    49e2        .I      LDR      r1,[pc,#904] ; [0x812664] = 0x2097d4
;;;1299       }
;;;1300   
;;;1301   #if (!TUYA_BLE_DEVICE_AUTH_DATA_STORE)
;;;1302       if(param_data->device_id_len == 20)
;;;1303       {
;;;1304           TUYA_BLE_LOG_HEXDUMP_DEBUG("device_id_20 ",param_data->device_id, 20);
;;;1305           tuya_ble_device_id_20_to_16(param_data->device_id,device_id_temp);
;;;1306           TUYA_BLE_LOG_HEXDUMP_DEBUG("device_id_16 ",device_id_temp, 16);
;;;1307           tuya_ble_device_id_16_to_20(device_id_temp,device_id_temp2);
;;;1308           TUYA_BLE_LOG_HEXDUMP_DEBUG("device_id_20 ", device_id_temp2, 20);
;;;1309           memcpy(tuya_ble_current_para.auth_settings.device_id,device_id_temp,DEVICE_ID_LEN);
;;;1310       }
;;;1311       else
;;;1312       {
;;;1313           memcpy(tuya_ble_current_para.auth_settings.device_id,param_data->device_id,DEVICE_ID_LEN);
;;;1314       }
;;;1315   
;;;1316       memcpy(tuya_ble_current_para.auth_settings.auth_key,param_data->auth_key,AUTH_KEY_LEN);
;;;1317   
;;;1318       tuya_ble_current_para.sys_settings.bound_flag = param_data->bound_flag;
;;;1319   
;;;1320       if(tuya_ble_current_para.sys_settings.bound_flag)
;;;1321       {
;;;1322           memcpy(tuya_ble_current_para.sys_settings.login_key,param_data->login_key,LOGIN_KEY_LEN);
;;;1323       }
;;;1324   
;;;1325   #else
;;;1326   
;;;1327       if((param_data->device_id_len==16)||(param_data->device_id_len==20))
        0x008122dc:    7820         x      LDRB     r0,[r4,#0]
        0x008122de:    4eb4        .N      LDR      r6,[pc,#720] ; [0x8125b0] = 0x21103002
        0x008122e0:    f101081b    ....    ADD      r8,r1,#0x1b
        0x008122e4:    f1010931    ..1.    ADD      r9,r1,#0x31
        0x008122e8:    2810        .(      CMP      r0,#0x10
        0x008122ea:    d05d        ].      BEQ      0x8123a8 ; tuya_ble_sdk_init + 262
        0x008122ec:    2814        .(      CMP      r0,#0x14
        0x008122ee:    d17d        }.      BNE      0x8123ec ; tuya_ble_sdk_init + 330
;;;1328       {
;;;1329           if(param_data->device_id_len == 20)
;;;1330           {
;;;1331               TUYA_BLE_LOG_HEXDUMP_DEBUG("device_id_20 ",param_data->device_id, 20);
        0x008122f0:    a0dd        ..      ADR      r0,{pc}+0x378 ; 0x812668
        0x008122f2:    f008fc5a    ..Z.    BL       get_args ; 0x81abaa
        0x008122f6:    49da        .I      LDR      r1,[pc,#872] ; [0x812660] = 0x880211c
        0x008122f8:    4602        .F      MOV      r2,r0
        0x008122fa:    2314        .#      MOVS     r3,#0x14
        0x008122fc:    3138        81      ADDS     r1,r1,#0x38
        0x008122fe:    4630        0F      MOV      r0,r6
        0x00812300:    f7f5dbad    ....    BL       log_buffer ; 0x7a5e
        0x00812304:    2314        .#      MOVS     r3,#0x14
        0x00812306:    1c62        b.      ADDS     r2,r4,#1
        0x00812308:    2108        .!      MOVS     r1,#8
        0x0081230a:    f2af107c    ..|.    ADR      r0,{pc}-0x17a ; 0x812190
        0x0081230e:    f008fc60    ..`.    BL       log_hexdump ; 0x81abd2
        0x00812312:    f2af1084    ....    ADR      r0,{pc}-0x182 ; 0x812190
        0x00812316:    f008fc48    ..H.    BL       get_args ; 0x81abaa
        0x0081231a:    49d1        .I      LDR      r1,[pc,#836] ; [0x812660] = 0x880211c
        0x0081231c:    4602        .F      MOV      r2,r0
        0x0081231e:    3160        `1      ADDS     r1,r1,#0x60
        0x00812320:    4630        0F      MOV      r0,r6
        0x00812322:    f7f5db9c    ....    BL       log_buffer ; 0x7a5e
;;;1332               tuya_ble_device_id_20_to_16(param_data->device_id,device_id_temp);
        0x00812326:    4669        iF      MOV      r1,sp
        0x00812328:    1c60        `.      ADDS     r0,r4,#1
        0x0081232a:    f004f9a4    ....    BL       tuya_ble_device_id_20_to_16 ; 0x816676
;;;1333               TUYA_BLE_LOG_HEXDUMP_DEBUG("device_id_16 ", device_id_temp, 16);
        0x0081232e:    a0d8        ..      ADR      r0,{pc}+0x362 ; 0x812690
        0x00812330:    f008fc3b    ..;.    BL       get_args ; 0x81abaa
        0x00812334:    49ca        .I      LDR      r1,[pc,#808] ; [0x812660] = 0x880211c
        0x00812336:    4602        .F      MOV      r2,r0
        0x00812338:    2310        .#      MOVS     r3,#0x10
        0x0081233a:    3164        d1      ADDS     r1,r1,#0x64
        0x0081233c:    4630        0F      MOV      r0,r6
        0x0081233e:    f7f5db8e    ....    BL       log_buffer ; 0x7a5e
        0x00812342:    2310        .#      MOVS     r3,#0x10
        0x00812344:    466a        jF      MOV      r2,sp
        0x00812346:    2108        .!      MOVS     r1,#8
        0x00812348:    f2af10bc    ....    ADR      r0,{pc}-0x1b8 ; 0x812190
        0x0081234c:    f008fc41    ..A.    BL       log_hexdump ; 0x81abd2
        0x00812350:    f2af10c4    ....    ADR      r0,{pc}-0x1c0 ; 0x812190
        0x00812354:    f008fc29    ..).    BL       get_args ; 0x81abaa
        0x00812358:    49c1        .I      LDR      r1,[pc,#772] ; [0x812660] = 0x880211c
        0x0081235a:    4602        .F      MOV      r2,r0
        0x0081235c:    318c        .1      ADDS     r1,r1,#0x8c
        0x0081235e:    4630        0F      MOV      r0,r6
        0x00812360:    f7f5db7d    ..}.    BL       log_buffer ; 0x7a5e
;;;1334               tuya_ble_device_id_16_to_20(device_id_temp,device_id_temp2);
        0x00812364:    a908        ..      ADD      r1,sp,#0x20
        0x00812366:    4668        hF      MOV      r0,sp
        0x00812368:    f004f9d0    ....    BL       tuya_ble_device_id_16_to_20 ; 0x81670c
;;;1335               TUYA_BLE_LOG_HEXDUMP_DEBUG("device_id_20 ", device_id_temp2, 20);
        0x0081236c:    a0be        ..      ADR      r0,{pc}+0x2fc ; 0x812668
        0x0081236e:    f008fc1c    ....    BL       get_args ; 0x81abaa
        0x00812372:    49bb        .I      LDR      r1,[pc,#748] ; [0x812660] = 0x880211c
        0x00812374:    4602        .F      MOV      r2,r0
        0x00812376:    2314        .#      MOVS     r3,#0x14
        0x00812378:    3190        .1      ADDS     r1,r1,#0x90
        0x0081237a:    4630        0F      MOV      r0,r6
        0x0081237c:    f7f5db6f    ..o.    BL       log_buffer ; 0x7a5e
        0x00812380:    2314        .#      MOVS     r3,#0x14
        0x00812382:    aa08        ..      ADD      r2,sp,#0x20
        0x00812384:    2108        .!      MOVS     r1,#8
        0x00812386:    f2af10f8    ....    ADR      r0,{pc}-0x1f6 ; 0x812190
        0x0081238a:    f008fc22    ..".    BL       log_hexdump ; 0x81abd2
        0x0081238e:    f2af2000    ...     ADR      r0,{pc}-0x1fe ; 0x812190
        0x00812392:    f008fc0a    ....    BL       get_args ; 0x81abaa
        0x00812396:    49b2        .I      LDR      r1,[pc,#712] ; [0x812660] = 0x880211c
        0x00812398:    4602        .F      MOV      r2,r0
        0x0081239a:    31b8        .1      ADDS     r1,r1,#0xb8
        0x0081239c:    4630        0F      MOV      r0,r6
        0x0081239e:    f7f5db5e    ..^.    BL       log_buffer ; 0x7a5e
;;;1336               memcpy(tuya_ble_current_para.auth_settings.device_id,device_id_temp,DEVICE_ID_LEN);
        0x008123a2:    2210        ."      MOVS     r2,#0x10
        0x008123a4:    4669        iF      MOV      r1,sp
        0x008123a6:    e001        ..      B        0x8123ac ; tuya_ble_sdk_init + 266
;;;1337           }
;;;1338           else
;;;1339           {
;;;1340               memcpy(tuya_ble_current_para.auth_settings.device_id,param_data->device_id,DEVICE_ID_LEN);
        0x008123a8:    2210        ."      MOVS     r2,#0x10
        0x008123aa:    1c61        a.      ADDS     r1,r4,#1
        0x008123ac:    4640        @F      MOV      r0,r8
        0x008123ae:    f447f574    G.t.    BL       __aeabi_memcpy ; 0x59e9a
;;;1341           }
;;;1342   
;;;1343           memcpy(tuya_ble_current_para.auth_settings.auth_key,param_data->auth_key,AUTH_KEY_LEN);
        0x008123b2:    2220         "      MOVS     r2,#0x20
        0x008123b4:    f104013d    ..=.    ADD      r1,r4,#0x3d
        0x008123b8:    4648        HF      MOV      r0,r9
        0x008123ba:    f447f56e    G.n.    BL       __aeabi_memcpy ; 0x59e9a
;;;1344           
;;;1345           TUYA_BLE_LOG_HEXDUMP_INFO("The MAC address passed in by the application", param_data->mac_addr.addr, 6);
        0x008123be:    48be        .H      LDR      r0,[pc,#760] ; [0x8126b8] = 0x81ce20
        0x008123c0:    f008fbf3    ....    BL       get_args ; 0x81abaa
        0x008123c4:    49a6        .I      LDR      r1,[pc,#664] ; [0x812660] = 0x880211c
        0x008123c6:    4602        .F      MOV      r2,r0
        0x008123c8:    2306        .#      MOVS     r3,#6
        0x008123ca:    31bc        .1      ADDS     r1,r1,#0xbc
        0x008123cc:    4630        0F      MOV      r0,r6
        0x008123ce:    f7f5db46    ..F.    BL       log_buffer ; 0x7a5e
        0x008123d2:    2306        .#      MOVS     r3,#6
        0x008123d4:    f1040264    ..d.    ADD      r2,r4,#0x64
        0x008123d8:    2108        .!      MOVS     r1,#8
        0x008123da:    f2af204c    ..L     ADR      r0,{pc}-0x24a ; 0x812190
        0x008123de:    f008fbf8    ....    BL       log_hexdump ; 0x81abd2
        0x008123e2:    f2af2054    ..T     ADR      r0,{pc}-0x252 ; 0x812190
        0x008123e6:    f008fbe0    ....    BL       get_args ; 0x81abaa
        0x008123ea:    e000        ..      B        0x8123ee ; tuya_ble_sdk_init + 332
        0x008123ec:    e004        ..      B        0x8123f8 ; tuya_ble_sdk_init + 342
        0x008123ee:    4602        .F      MOV      r2,r0
        0x008123f0:    49b2        .I      LDR      r1,[pc,#712] ; [0x8126bc] = 0x8802220
        0x008123f2:    4630        0F      MOV      r0,r6
        0x008123f4:    f7f5db33    ..3.    BL       log_buffer ; 0x7a5e
;;;1346           
;;;1347       }
;;;1348       
;;;1349       if(tuya_ble_gap_addr_get(&bt_addr)==TUYA_BLE_SUCCESS)
        0x008123f8:    a804        ..      ADD      r0,sp,#0x10
        0x008123fa:    f008fa9f    ....    BL       tuya_ble_gap_addr_get ; 0x81a93c
        0x008123fe:    b130        0.      CBZ      r0,0x81240e ; tuya_ble_sdk_init + 364
        0x00812400:    a0af        ..      ADR      r0,{pc}+0x2c0 ; 0x8126c0
        0x00812402:    f008fbd2    ....    BL       get_args ; 0x81abaa
        0x00812406:    49ad        .I      LDR      r1,[pc,#692] ; [0x8126bc] = 0x8802220
        0x00812408:    4602        .F      MOV      r2,r0
        0x0081240a:    318c        .1      ADDS     r1,r1,#0x8c
        0x0081240c:    e055        U.      B        0x8124ba ; tuya_ble_sdk_init + 536
;;;1350       {
;;;1351           TUYA_BLE_LOG_HEXDUMP_INFO("current device MAC address : ",bt_addr.addr,6);
        0x0081240e:    a0b5        ..      ADR      r0,{pc}+0x2d6 ; 0x8126e4
        0x00812410:    f008fbcb    ....    BL       get_args ; 0x81abaa
        0x00812414:    49a9        .I      LDR      r1,[pc,#676] ; [0x8126bc] = 0x8802220
        0x00812416:    4602        .F      MOV      r2,r0
        0x00812418:    2306        .#      MOVS     r3,#6
        0x0081241a:    1d09        ..      ADDS     r1,r1,#4
        0x0081241c:    4630        0F      MOV      r0,r6
        0x0081241e:    f7f5db1e    ....    BL       log_buffer ; 0x7a5e
        0x00812422:    2306        .#      MOVS     r3,#6
        0x00812424:    af04        ..      ADD      r7,sp,#0x10
        0x00812426:    2108        .!      MOVS     r1,#8
        0x00812428:    f2af209c    ...     ADR      r0,{pc}-0x298 ; 0x812190
        0x0081242c:    1c7a        z.      ADDS     r2,r7,#1
        0x0081242e:    f008fbd0    ....    BL       log_hexdump ; 0x81abd2
        0x00812432:    f2af20a4    ...     ADR      r0,{pc}-0x2a2 ; 0x812190
        0x00812436:    f008fbb8    ....    BL       get_args ; 0x81abaa
        0x0081243a:    49a0        .I      LDR      r1,[pc,#640] ; [0x8126bc] = 0x8802220
        0x0081243c:    4602        .F      MOV      r2,r0
        0x0081243e:    313c        <1      ADDS     r1,r1,#0x3c
        0x00812440:    4630        0F      MOV      r0,r6
        0x00812442:    f7f5db0c    ....    BL       log_buffer ; 0x7a5e
;;;1352   
;;;1353           if(TUYA_BLE_DEVICE_MAC_UPDATE)
;;;1354           {
;;;1355               if(param_data->device_id_len==0)
        0x00812446:    7820         x      LDRB     r0,[r4,#0]
        0x00812448:    b170        p.      CBZ      r0,0x812468 ; tuya_ble_sdk_init + 454
        0x0081244a:    f8940063    ..c.    LDRB     r0,[r4,#0x63]
        0x0081244e:    f88d0010    ....    STRB     r0,[sp,#0x10]
        0x00812452:    e9d40119    ....    LDRD     r0,r1,[r4,#0x64]
        0x00812456:    e9cd0106    ....    STRD     r0,r1,[sp,#0x18]
        0x0081245a:    2200        ."      MOVS     r2,#0
        0x0081245c:    2106        .!      MOVS     r1,#6
        0x0081245e:    a806        ..      ADD      r0,sp,#0x18
        0x00812460:    f003ff70    ..p.    BL       tuya_ble_buffer_value_is_all_x ; 0x816344
        0x00812464:    b158        X.      CBZ      r0,0x81247e ; tuya_ble_sdk_init + 476
        0x00812466:    e02b        +.      B        0x8124c0 ; tuya_ble_sdk_init + 542
;;;1356               {
;;;1357                   bt_addr.addr_type = TUYA_BLE_ADDRESS_TYPE_RANDOM;
        0x00812468:    2001        .       MOVS     r0,#1
        0x0081246a:    f88d0010    ....    STRB     r0,[sp,#0x10]
;;;1358                   memcpy(mac_temp,tuya_ble_current_para.auth_settings.mac,6);
        0x0081246e:    f8d5002b    ..+.    LDR      r0,[r5,#0x2b]
        0x00812472:    9006        ..      STR      r0,[sp,#0x18]
        0x00812474:    f8b5002f    ../.    LDRH     r0,[r5,#0x2f]
        0x00812478:    f8ad001c    ....    STRH     r0,[sp,#0x1c]
        0x0081247c:    e7ed        ..      B        0x81245a ; tuya_ble_sdk_init + 440
;;;1359               }
;;;1360               else
;;;1361               {
;;;1362                   bt_addr.addr_type = param_data->mac_addr.addr_type;
;;;1363                   memcpy(mac_temp,param_data->mac_addr.addr,6);
;;;1364               }
;;;1365   
;;;1366               if((!tuya_ble_buffer_value_is_all_x(mac_temp,6,0))&&(memcmp(mac_temp,bt_addr.addr,6)))
        0x0081247e:    2206        ."      MOVS     r2,#6
        0x00812480:    1c79        y.      ADDS     r1,r7,#1
        0x00812482:    a806        ..      ADD      r0,sp,#0x18
        0x00812484:    f447f4be    G...    BL       memcmp ; 0x59e04
        0x00812488:    b1d0        ..      CBZ      r0,0x8124c0 ; tuya_ble_sdk_init + 542
;;;1367               {                
;;;1368                   memcpy(bt_addr.addr,mac_temp,6);
        0x0081248a:    9806        ..      LDR      r0,[sp,#0x18]
        0x0081248c:    f8cd0011    ....    STR      r0,[sp,#0x11]
        0x00812490:    f8bd001c    ....    LDRH     r0,[sp,#0x1c]
        0x00812494:    f8ad0015    ....    STRH     r0,[sp,#0x15]
;;;1369                   if(tuya_ble_gap_addr_set(&bt_addr)!=TUYA_BLE_SUCCESS)
        0x00812498:    a804        ..      ADD      r0,sp,#0x10
        0x0081249a:    f008fa5c    ..\.    BL       tuya_ble_gap_addr_set ; 0x81a956
        0x0081249e:    b130        0.      CBZ      r0,0x8124ae ; tuya_ble_sdk_init + 524
;;;1370                   {
;;;1371                       TUYA_BLE_LOG_ERROR("GAP ADDR SET failed!");
        0x008124a0:    a09e        ..      ADR      r0,{pc}+0x27c ; 0x81271c
        0x008124a2:    f008fb82    ....    BL       get_args ; 0x81abaa
        0x008124a6:    4985        .I      LDR      r1,[pc,#532] ; [0x8126bc] = 0x8802220
        0x008124a8:    4602        .F      MOV      r2,r0
        0x008124aa:    3140        @1      ADDS     r1,r1,#0x40
        0x008124ac:    e005        ..      B        0x8124ba ; tuya_ble_sdk_init + 536
        0x008124ae:    a0a4        ..      ADR      r0,{pc}+0x292 ; 0x812740
        0x008124b0:    f008fb7b    ..{.    BL       get_args ; 0x81abaa
        0x008124b4:    4981        .I      LDR      r1,[pc,#516] ; [0x8126bc] = 0x8802220
        0x008124b6:    4602        .F      MOV      r2,r0
        0x008124b8:    3164        d1      ADDS     r1,r1,#0x64
        0x008124ba:    4630        0F      MOV      r0,r6
        0x008124bc:    f7f5dacf    ....    BL       log_buffer ; 0x7a5e
        0x008124c0:    e9d4011b    ....    LDRD     r0,r1,[r4,#0x6c]
;;;1372                   }
;;;1373                   else
;;;1374                   {
;;;1375                       TUYA_BLE_LOG_INFO("GAP ADDR SET SUCCESSED!");
;;;1376                       if(TUYA_BLE_DEVICE_MAC_UPDATE_RESET)
;;;1377                       {
;;;1378                           tuya_ble_device_delay_ms(500);
;;;1379                           tuya_ble_device_reset();
;;;1380                       }
;;;1381                   }
;;;1382               }
;;;1383           }
;;;1384       }
;;;1385       else
;;;1386       {
;;;1387           TUYA_BLE_LOG_WARNING("GAP ADDR GET failed!");
;;;1388       }
;;;1389           
;;;1390   #endif
;;;1391   
;;;1392       tuya_ble_set_device_version(param_data->firmware_version,param_data->hardware_version);
        0x008124c4:    f000fa4d    ..M.    BL       tuya_ble_set_device_version ; 0x812962
;;;1393   
;;;1394       tuya_ble_set_external_mcu_version(0,0);//Initialize to 0
        0x008124c8:    2100        .!      MOVS     r1,#0
        0x008124ca:    4608        .F      MOV      r0,r1
        0x008124cc:    f000fa4d    ..M.    BL       tuya_ble_set_external_mcu_version ; 0x81296a
;;;1395   
;;;1396       if(tuya_ble_current_para.sys_settings.bound_flag==1)
        0x008124d0:    f895013c    ..<.    LDRB     r0,[r5,#0x13c]
        0x008124d4:    2801        .(      CMP      r0,#1
        0x008124d6:    d04a        J.      BEQ      0x81256e ; tuya_ble_sdk_init + 716
;;;1397       {
;;;1398           tuya_ble_connect_status_set(BONDING_UNCONN);
;;;1399       }
;;;1400       else
;;;1401       {
;;;1402           tuya_ble_connect_status_set(UNBONDING_UNCONN);
        0x008124d8:    2000        .       MOVS     r0,#0
        0x008124da:    f002fd99    ....    BL       tuya_ble_connect_status_set ; 0x815010
;;;1403       }
;;;1404   
;;;1405       tuya_ble_adv_change();
        0x008124de:    f002fdf0    ....    BL       tuya_ble_adv_change ; 0x8150c2
;;;1406   
;;;1407       tuya_ble_event_init();
        0x008124e2:    f002fda2    ....    BL       tuya_ble_event_init ; 0x81502a
;;;1408   
;;;1409       tuya_ble_gatt_send_queue_init();
        0x008124e6:    f004f9d1    ....    BL       tuya_ble_gatt_send_queue_init ; 0x81688c
;;;1410   
;;;1411       tuya_ble_common_uart_init();
        0x008124ea:    f008f9d1    ....    BL       tuya_ble_common_uart_init ; 0x81a890
        0x008124ee:    4831        1H      LDR      r0,[pc,#196] ; [0x8125b4] = 0x208fc8
        0x008124f0:    4b9d        .K      LDR      r3,[pc,#628] ; [0x812768] = 0x8121a1
        0x008124f2:    2200        ."      MOVS     r2,#0
        0x008124f4:    f2475130    G.0Q    MOV      r1,#0x7530
        0x008124f8:    300c        .0      ADDS     r0,r0,#0xc
        0x008124fa:    f008f9d3    ....    BL       tuya_ble_timer_create ; 0x81a8a4
        0x008124fe:    b140        @.      CBZ      r0,0x812512 ; tuya_ble_sdk_init + 624
        0x00812500:    a09a        ..      ADR      r0,{pc}+0x26c ; 0x81276c
        0x00812502:    f008fb52    ..R.    BL       get_args ; 0x81abaa
        0x00812506:    4929        )I      LDR      r1,[pc,#164] ; [0x8125ac] = 0x8801ff8
        0x00812508:    4602        .F      MOV      r2,r0
        0x0081250a:    313c        <1      ADDS     r1,r1,#0x3c
        0x0081250c:    4630        0F      MOV      r0,r6
        0x0081250e:    f7f5daa6    ....    BL       log_buffer ; 0x7a5e
;;;1412   
;;;1413       tuya_ble_connect_monitor_timer_init();
;;;1414   
;;;1415       TUYA_BLE_LOG_HEXDUMP_INFO("auth settings mac", tuya_ble_current_para.auth_settings.mac, MAC_LEN);
        0x00812512:    a0a5        ..      ADR      r0,{pc}+0x296 ; 0x8127a8
        0x00812514:    f008fb49    ..I.    BL       get_args ; 0x81abaa
        0x00812518:    4968        hI      LDR      r1,[pc,#416] ; [0x8126bc] = 0x8802220
        0x0081251a:    4602        .F      MOV      r2,r0
        0x0081251c:    2306        .#      MOVS     r3,#6
        0x0081251e:    31b0        .1      ADDS     r1,r1,#0xb0
        0x00812520:    4630        0F      MOV      r0,r6
        0x00812522:    f7f5da9c    ....    BL       log_buffer ; 0x7a5e
        0x00812526:    4a4f        OJ      LDR      r2,[pc,#316] ; [0x812664] = 0x2097d4
        0x00812528:    2306        .#      MOVS     r3,#6
        0x0081252a:    322b        +2      ADDS     r2,r2,#0x2b
        0x0081252c:    2108        .!      MOVS     r1,#8
        0x0081252e:    f2af30a0    ...0    ADR      r0,{pc}-0x39e ; 0x812190
        0x00812532:    f008fb4e    ..N.    BL       log_hexdump ; 0x81abd2
        0x00812536:    f2af30a8    ...0    ADR      r0,{pc}-0x3a6 ; 0x812190
        0x0081253a:    f008fb36    ..6.    BL       get_args ; 0x81abaa
        0x0081253e:    495f        _I      LDR      r1,[pc,#380] ; [0x8126bc] = 0x8802220
        0x00812540:    4602        .F      MOV      r2,r0
        0x00812542:    31dc        .1      ADDS     r1,r1,#0xdc
        0x00812544:    4630        0F      MOV      r0,r6
        0x00812546:    f7f5da8a    ....    BL       log_buffer ; 0x7a5e
;;;1416       TUYA_BLE_LOG_HEXDUMP_INFO("product_id", tuya_ble_current_para.pid, tuya_ble_current_para.pid_len);
        0x0081254a:    a0a2        ..      ADR      r0,{pc}+0x28a ; 0x8127d4
        0x0081254c:    f008fb2d    ..-.    BL       get_args ; 0x81abaa
        0x00812550:    495a        ZI      LDR      r1,[pc,#360] ; [0x8126bc] = 0x8802220
        0x00812552:    4602        .F      MOV      r2,r0
        0x00812554:    f89531c1    ...1    LDRB     r3,[r5,#0x1c1]
        0x00812558:    31e0        .1      ADDS     r1,r1,#0xe0
        0x0081255a:    4630        0F      MOV      r0,r6
        0x0081255c:    f7f5da7f    ....    BL       log_buffer ; 0x7a5e
        0x00812560:    f89531c1    ...1    LDRB     r3,[r5,#0x1c1]
        0x00812564:    4652        RF      MOV      r2,r10
        0x00812566:    2108        .!      MOVS     r1,#8
        0x00812568:    f2af30dc    ...0    ADR      r0,{pc}-0x3d8 ; 0x812190
        0x0081256c:    e144        D.      B        0x8127f8 ; tuya_ble_sdk_init + 1366
        0x0081256e:    e198        ..      B        0x8128a2 ; tuya_ble_sdk_init + 1536
    $d
        0x00812570:    205d445b    [D]     DCD    542983259
        0x00812574:    41595554    TUYA    DCD    1096373588
        0x00812578:    454c425f    _BLE    DCD    1162625631
        0x0081257c:    6c62203a    : bl    DCD    1818370106
        0x00812580:    69642065    e di    DCD    1768169573
        0x00812584:    6e6f6373    scon    DCD    1852793715
        0x00812588:    7465636e    ncet    DCD    1952801646
        0x0081258c:    63656220     bec    DCD    1667588640
        0x00812590:    65737561    ause    DCD    1702065505
        0x00812594:    6e6f6d20     mon    DCD    1852796192
        0x00812598:    726f7469    itor    DCD    1919906921
        0x0081259c:    6d697420     tim    DCD    1835627552
        0x008125a0:    74207265    er t    DCD    1948283493
        0x008125a4:    6f656d69    imeo    DCD    1868918121
        0x008125a8:    002e7475    ut..    DCD    3044469
        0x008125ac:    08801ff8    ....    DCD    142614520
        0x008125b0:    21103002    .0.!    DCD    554708994
        0x008125b4:    00208fc8    .. .    DCD    2133960
        0x008125b8:    205d455b    [E]     DCD    542983515
        0x008125bc:    41595554    TUYA    DCD    1096373588
        0x008125c0:    454c425f    _BLE    DCD    1162625631
        0x008125c4:    7574203a    : tu    DCD    1970544698
        0x008125c8:    625f6179    ya_b    DCD    1650418041
        0x008125cc:    785f656c    le_x    DCD    2019517804
        0x008125d0:    656d6974    time    DCD    1701669236
        0x008125d4:    6f635f72    r_co    DCD    1868783474
        0x008125d8:    63656e6e    nnec    DCD    1667591790
        0x008125dc:    6f6d5f74    t_mo    DCD    1869438836
        0x008125e0:    6f74696e    nito    DCD    1869900142
        0x008125e4:    74732072    r st    DCD    1953702002
        0x008125e8:    20747261    art     DCD    544502369
        0x008125ec:    6c696166    fail    DCD    1818845542
        0x008125f0:    00006465    ed..    DCD    25701
        0x008125f4:    205d455b    [E]     DCD    542983515
        0x008125f8:    41595554    TUYA    DCD    1096373588
        0x008125fc:    454c425f    _BLE    DCD    1162625631
        0x00812600:    7574203a    : tu    DCD    1970544698
        0x00812604:    655f6179    ya_e    DCD    1700749689
        0x00812608:    746e6576    vent    DCD    1953391990
        0x0081260c:    6e65735f    _sen    DCD    1852142431
        0x00812610:    6f632064    d co    DCD    1868767332
        0x00812614:    63656e6e    nnec    DCD    1667591790
        0x00812618:    61682074    t ha    DCD    1634214004
        0x0081261c:    656c646e    ndle    DCD    1701602414
        0x00812620:    72652072    r er    DCD    1919230066
        0x00812624:    00726f72    ror.    DCD    7499634
        0x00812628:    205d455b    [E]     DCD    542983515
        0x0081262c:    41595554    TUYA    DCD    1096373588
        0x00812630:    454c425f    _BLE    DCD    1162625631
        0x00812634:    7574203a    : tu    DCD    1970544698
        0x00812638:    655f6179    ya_e    DCD    1700749689
        0x0081263c:    746e6576    vent    DCD    1953391990
        0x00812640:    6e65735f    _sen    DCD    1852142431
        0x00812644:    69642064    d di    DCD    1768169572
        0x00812648:    6e6f6373    scon    DCD    1852793715
        0x0081264c:    7463656e    nect    DCD    1952671086
        0x00812650:    6e616820     han    DCD    1851877408
        0x00812654:    72656c64    dler    DCD    1919249508
        0x00812658:    72726520     err    DCD    1920099616
        0x0081265c:    0000726f    or..    DCD    29295
        0x00812660:    0880211c    .!..    DCD    142614812
        0x00812664:    002097d4    .. .    DCD    2136020
        0x00812668:    205d445b    [D]     DCD    542983259
        0x0081266c:    41595554    TUYA    DCD    1096373588
        0x00812670:    454c425f    _BLE    DCD    1162625631
        0x00812674:    6564203a    : de    DCD    1701060666
        0x00812678:    65636976    vice    DCD    1701013878
        0x0081267c:    5f64695f    _id_    DCD    1600416095
        0x00812680:    20203032    20      DCD    538980402
        0x00812684:    6e656c5b    [len    DCD    1852140635
        0x00812688:    5d64253d    =%d]    DCD    1566844221
        0x0081268c:    00003a20     :..    DCD    14880
        0x00812690:    205d445b    [D]     DCD    542983259
        0x00812694:    41595554    TUYA    DCD    1096373588
        0x00812698:    454c425f    _BLE    DCD    1162625631
        0x0081269c:    6564203a    : de    DCD    1701060666
        0x008126a0:    65636976    vice    DCD    1701013878
        0x008126a4:    5f64695f    _id_    DCD    1600416095
        0x008126a8:    20203631    16      DCD    538981937
        0x008126ac:    6e656c5b    [len    DCD    1852140635
        0x008126b0:    5d64253d    =%d]    DCD    1566844221
        0x008126b4:    00003a20     :..    DCD    14880
        0x008126b8:    0081ce20     ...    DCD    8506912
        0x008126bc:    08802220     "..    DCD    142615072
        0x008126c0:    205d575b    [W]     DCD    542988123
        0x008126c4:    41595554    TUYA    DCD    1096373588
        0x008126c8:    454c425f    _BLE    DCD    1162625631
        0x008126cc:    4147203a    : GA    DCD    1095180346
        0x008126d0:    44412050    P AD    DCD    1145118800
        0x008126d4:    47205244    DR G    DCD    1193300548
        0x008126d8:    66205445    ET f    DCD    1713394757
        0x008126dc:    656c6961    aile    DCD    1701603681
        0x008126e0:    00002164    d!..    DCD    8548
        0x008126e4:    205d495b    [I]     DCD    542984539
        0x008126e8:    41595554    TUYA    DCD    1096373588
        0x008126ec:    454c425f    _BLE    DCD    1162625631
        0x008126f0:    7563203a    : cu    DCD    1969430586
        0x008126f4:    6e657272    rren    DCD    1852142194
        0x008126f8:    65642074    t de    DCD    1701060724
        0x008126fc:    65636976    vice    DCD    1701013878
        0x00812700:    43414d20     MAC    DCD    1128353056
        0x00812704:    64646120     add    DCD    1684300064
        0x00812708:    73736572    ress    DCD    1936942450
        0x0081270c:    20203a20     :      DCD    538982944
        0x00812710:    6e656c5b    [len    DCD    1852140635
        0x00812714:    5d64253d    =%d]    DCD    1566844221
        0x00812718:    00003a20     :..    DCD    14880
        0x0081271c:    205d455b    [E]     DCD    542983515
        0x00812720:    41595554    TUYA    DCD    1096373588
        0x00812724:    454c425f    _BLE    DCD    1162625631
        0x00812728:    4147203a    : GA    DCD    1095180346
        0x0081272c:    44412050    P AD    DCD    1145118800
        0x00812730:    53205244    DR S    DCD    1394627140
        0x00812734:    66205445    ET f    DCD    1713394757
        0x00812738:    656c6961    aile    DCD    1701603681
        0x0081273c:    00002164    d!..    DCD    8548
        0x00812740:    205d495b    [I]     DCD    542984539
        0x00812744:    41595554    TUYA    DCD    1096373588
        0x00812748:    454c425f    _BLE    DCD    1162625631
        0x0081274c:    4147203a    : GA    DCD    1095180346
        0x00812750:    44412050    P AD    DCD    1145118800
        0x00812754:    53205244    DR S    DCD    1394627140
        0x00812758:    53205445    ET S    DCD    1394627653
        0x0081275c:    45434355    UCCE    DCD    1162036053
        0x00812760:    44455353    SSED    DCD    1145394003
        0x00812764:    00000021    !...    DCD    33
        0x00812768:    008121a1    .!..    DCD    8462753
        0x0081276c:    205d455b    [E]     DCD    542983515
        0x00812770:    41595554    TUYA    DCD    1096373588
        0x00812774:    454c425f    _BLE    DCD    1162625631
        0x00812778:    7574203a    : tu    DCD    1970544698
        0x0081277c:    625f6179    ya_b    DCD    1650418041
        0x00812780:    785f656c    le_x    DCD    2019517804
        0x00812784:    656d6974    time    DCD    1701669236
        0x00812788:    6f635f72    r_co    DCD    1868783474
        0x0081278c:    63656e6e    nnec    DCD    1667591790
        0x00812790:    6f6d5f74    t_mo    DCD    1869438836
        0x00812794:    6f74696e    nito    DCD    1869900142
        0x00812798:    72632072    r cr    DCD    1919098994
        0x0081279c:    20746165    eat     DCD    544498021
        0x008127a0:    6c696166    fail    DCD    1818845542
        0x008127a4:    00006465    ed..    DCD    25701
        0x008127a8:    205d495b    [I]     DCD    542984539
        0x008127ac:    41595554    TUYA    DCD    1096373588
        0x008127b0:    454c425f    _BLE    DCD    1162625631
        0x008127b4:    7561203a    : au    DCD    1969299514
        0x008127b8:    73206874    th s    DCD    1931503732
        0x008127bc:    69747465    etti    DCD    1769239653
        0x008127c0:    2073676e    ngs     DCD    544434030
        0x008127c4:    2063616d    mac     DCD    543383917
        0x008127c8:    6e656c5b    [len    DCD    1852140635
        0x008127cc:    5d64253d    =%d]    DCD    1566844221
        0x008127d0:    00003a20     :..    DCD    14880
        0x008127d4:    205d495b    [I]     DCD    542984539
        0x008127d8:    41595554    TUYA    DCD    1096373588
        0x008127dc:    454c425f    _BLE    DCD    1162625631
        0x008127e0:    7270203a    : pr    DCD    1919950906
        0x008127e4:    6375646f    oduc    DCD    1668637807
        0x008127e8:    64695f74    t_id    DCD    1684627316
        0x008127ec:    656c5b20     [le    DCD    1701600032
        0x008127f0:    64253d6e    n=%d    DCD    1680162158
        0x008127f4:    003a205d    ] :.    DCD    3809373
    $t
        0x008127f8:    f008f9eb    ....    BL       log_hexdump ; 0x81abd2
        0x008127fc:    f2af6070    ..p`    ADR      r0,{pc}-0x66c ; 0x812190
        0x00812800:    f008f9d3    ....    BL       get_args ; 0x81abaa
        0x00812804:    4602        .F      MOV      r2,r0
        0x00812806:    4928        (I      LDR      r1,[pc,#160] ; [0x8128a8] = 0x8802324
        0x00812808:    4630        0F      MOV      r0,r6
        0x0081280a:    f7f5d928    ..(.    BL       log_buffer ; 0x7a5e
;;;1417       TUYA_BLE_LOG_HEXDUMP_DEBUG("device_uuid", tuya_ble_current_para.auth_settings.device_id, DEVICE_ID_LEN);
        0x0081280e:    a027        '.      ADR      r0,{pc}+0x9e ; 0x8128ac
        0x00812810:    f008f9cb    ....    BL       get_args ; 0x81abaa
        0x00812814:    4924        $I      LDR      r1,[pc,#144] ; [0x8128a8] = 0x8802324
        0x00812816:    4602        .F      MOV      r2,r0
        0x00812818:    2310        .#      MOVS     r3,#0x10
        0x0081281a:    1d09        ..      ADDS     r1,r1,#4
        0x0081281c:    4630        0F      MOV      r0,r6
        0x0081281e:    f7f5d91e    ....    BL       log_buffer ; 0x7a5e
        0x00812822:    2310        .#      MOVS     r3,#0x10
        0x00812824:    4642        BF      MOV      r2,r8
        0x00812826:    2108        .!      MOVS     r1,#8
        0x00812828:    a029        ).      ADR      r0,{pc}+0xa8 ; 0x8128d0
        0x0081282a:    f008f9d2    ....    BL       log_hexdump ; 0x81abd2
        0x0081282e:    a028        (.      ADR      r0,{pc}+0xa2 ; 0x8128d0
        0x00812830:    f008f9bb    ....    BL       get_args ; 0x81abaa
        0x00812834:    491c        .I      LDR      r1,[pc,#112] ; [0x8128a8] = 0x8802324
        0x00812836:    4602        .F      MOV      r2,r0
        0x00812838:    312c        ,1      ADDS     r1,r1,#0x2c
        0x0081283a:    4630        0F      MOV      r0,r6
        0x0081283c:    f7f5d90f    ....    BL       log_buffer ; 0x7a5e
;;;1418       TUYA_BLE_LOG_HEXDUMP_DEBUG("device_authkey", tuya_ble_current_para.auth_settings.auth_key, AUTH_KEY_LEN);
        0x00812840:    a024        $.      ADR      r0,{pc}+0x94 ; 0x8128d4
        0x00812842:    f008f9b2    ....    BL       get_args ; 0x81abaa
        0x00812846:    4918        .I      LDR      r1,[pc,#96] ; [0x8128a8] = 0x8802324
        0x00812848:    4602        .F      MOV      r2,r0
        0x0081284a:    2320         #      MOVS     r3,#0x20
        0x0081284c:    3130        01      ADDS     r1,r1,#0x30
        0x0081284e:    4630        0F      MOV      r0,r6
        0x00812850:    f7f5d905    ....    BL       log_buffer ; 0x7a5e
        0x00812854:    2320         #      MOVS     r3,#0x20
        0x00812856:    464a        JF      MOV      r2,r9
        0x00812858:    2108        .!      MOVS     r1,#8
        0x0081285a:    a01d        ..      ADR      r0,{pc}+0x76 ; 0x8128d0
        0x0081285c:    f008f9b9    ....    BL       log_hexdump ; 0x81abd2
        0x00812860:    a01b        ..      ADR      r0,{pc}+0x70 ; 0x8128d0
        0x00812862:    f008f9a2    ....    BL       get_args ; 0x81abaa
        0x00812866:    4910        .I      LDR      r1,[pc,#64] ; [0x8128a8] = 0x8802324
        0x00812868:    4602        .F      MOV      r2,r0
        0x0081286a:    3158        X1      ADDS     r1,r1,#0x58
        0x0081286c:    4630        0F      MOV      r0,r6
        0x0081286e:    f7f5d8f6    ....    BL       log_buffer ; 0x7a5e
;;;1419       TUYA_BLE_LOG_INFO("bond_flag = %d", tuya_ble_current_para.sys_settings.bound_flag);
        0x00812872:    a022        ".      ADR      r0,{pc}+0x8a ; 0x8128fc
        0x00812874:    f008f999    ....    BL       get_args ; 0x81abaa
        0x00812878:    490b        .I      LDR      r1,[pc,#44] ; [0x8128a8] = 0x8802324
        0x0081287a:    4602        .F      MOV      r2,r0
        0x0081287c:    f895313c    ..<1    LDRB     r3,[r5,#0x13c]
        0x00812880:    315c        \1      ADDS     r1,r1,#0x5c
        0x00812882:    4630        0F      MOV      r0,r6
        0x00812884:    f7f5d8eb    ....    BL       log_buffer ; 0x7a5e
;;;1420   
;;;1421       TUYA_BLE_LOG_INFO("tuya ble sdk version : "TUYA_BLE_SDK_VERSION_STR);
        0x00812888:    a024        $.      ADR      r0,{pc}+0x94 ; 0x81291c
        0x0081288a:    f008f98e    ....    BL       get_args ; 0x81abaa
        0x0081288e:    4906        .I      LDR      r1,[pc,#24] ; [0x8128a8] = 0x8802324
        0x00812890:    4602        .F      MOV      r2,r0
        0x00812892:    317c        |1      ADDS     r1,r1,#0x7c
        0x00812894:    4630        0F      MOV      r0,r6
        0x00812896:    f7f5d8e2    ....    BL       log_buffer ; 0x7a5e
        0x0081289a:    b00e        ..      ADD      sp,sp,#0x38
;;;1422   
;;;1423       return TUYA_BLE_SUCCESS;
        0x0081289c:    2000        .       MOVS     r0,#0
;;;1424   }
        0x0081289e:    e8bd87f0    ....    POP      {r4-r10,pc}
        0x008128a2:    2002        .       MOVS     r0,#2
        0x008128a4:    e619        ..      B        0x8124da ; tuya_ble_sdk_init + 568
    $d
        0x008128a6:    0000        ..      DCW    0
        0x008128a8:    08802324    $#..    DCD    142615332
        0x008128ac:    205d445b    [D]     DCD    542983259
        0x008128b0:    41595554    TUYA    DCD    1096373588
        0x008128b4:    454c425f    _BLE    DCD    1162625631
        0x008128b8:    6564203a    : de    DCD    1701060666
        0x008128bc:    65636976    vice    DCD    1701013878
        0x008128c0:    6975755f    _uui    DCD    1769305439
        0x008128c4:    6c5b2064    d [l    DCD    1817911396
        0x008128c8:    253d6e65    en=%    DCD    624782949
        0x008128cc:    3a205d64    d] :    DCD    975199588
        0x008128d0:    00000000    ....    DCD    0
        0x008128d4:    205d445b    [D]     DCD    542983259
        0x008128d8:    41595554    TUYA    DCD    1096373588
        0x008128dc:    454c425f    _BLE    DCD    1162625631
        0x008128e0:    6564203a    : de    DCD    1701060666
        0x008128e4:    65636976    vice    DCD    1701013878
        0x008128e8:    7475615f    _aut    DCD    1953849695
        0x008128ec:    79656b68    hkey    DCD    2036689768
        0x008128f0:    656c5b20     [le    DCD    1701600032
        0x008128f4:    64253d6e    n=%d    DCD    1680162158
        0x008128f8:    003a205d    ] :.    DCD    3809373
        0x008128fc:    205d495b    [I]     DCD    542984539
        0x00812900:    41595554    TUYA    DCD    1096373588
        0x00812904:    454c425f    _BLE    DCD    1162625631
        0x00812908:    6f62203a    : bo    DCD    1868701754
        0x0081290c:    665f646e    nd_f    DCD    1717527662
        0x00812910:    2067616c    lag     DCD    543646060
        0x00812914:    6425203d    = %d    DCD    1680154685
        0x00812918:    00000000    ....    DCD    0
        0x0081291c:    205d495b    [I]     DCD    542984539
        0x00812920:    41595554    TUYA    DCD    1096373588
        0x00812924:    454c425f    _BLE    DCD    1162625631
        0x00812928:    7574203a    : tu    DCD    1970544698
        0x0081292c:    62206179    ya b    DCD    1646289273
        0x00812930:    7320656c    le s    DCD    1931502956
        0x00812934:    76206b64    dk v    DCD    1981836132
        0x00812938:    69737265    ersi    DCD    1769173605
        0x0081293c:    3a206e6f    on :    DCD    975203951
        0x00812940:    322e3120     1.2    DCD    841888032
        0x00812944:    0000342e    .4..    DCD    13358
    $t
    .text
    tuya_ble_reset_ble_sn
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_data_handler.c
;;;83     {
        0x00812948:    b510        ..      PUSH     {r4,lr}
;;;84         tuya_ble_device_enter_critical();
        0x0081294a:    f008f80d    ....    BL       tuya_ble_device_enter_critical ; 0x81a968
;;;85         tuya_ble_receive_sn = 0;
        0x0081294e:    49f8        .I      LDR      r1,[pc,#992] ; [0x812d30] = 0x209104
        0x00812950:    2000        .       MOVS     r0,#0
;;;86         tuya_ble_send_sn = 1;
        0x00812952:    6148        Ha      STR      r0,[r1,#0x14]
        0x00812954:    49f7        .I      LDR      r1,[pc,#988] ; [0x812d34] = 0x208130
        0x00812956:    2001        .       MOVS     r0,#1
;;;87         tuya_ble_device_exit_critical();
        0x00812958:    6008        .`      STR      r0,[r1,#0]
        0x0081295a:    e8bd4010    ...@    POP      {r4,lr}
        0x0081295e:    f008b809    ....    B.W      tuya_ble_device_exit_critical ; 0x81a974
    tuya_ble_set_device_version
;;;88     }
;;;89     
;;;90     
;;;91     void tuya_ble_set_device_version(uint32_t firmware_version,uint32_t hardware_version)
;;;92     {
;;;93         tuya_ble_firmware_version = firmware_version;
        0x00812962:    4af3        .J      LDR      r2,[pc,#972] ; [0x812d30] = 0x209104
        0x00812964:    e9c20101    ....    STRD     r0,r1,[r2,#4]
;;;94         tuya_ble_hardware_version = hardware_version;
;;;95     }
        0x00812968:    4770        pG      BX       lr
    tuya_ble_set_external_mcu_version
;;;96     
;;;97     
;;;98     void tuya_ble_set_external_mcu_version(uint32_t firmware_version,uint32_t hardware_version)
;;;99     {
        0x0081296a:    b570        p.      PUSH     {r4-r6,lr}
        0x0081296c:    460d        .F      MOV      r5,r1
        0x0081296e:    4604        .F      MOV      r4,r0
;;;100        tuya_ble_device_enter_critical();
        0x00812970:    f007fffa    ....    BL       tuya_ble_device_enter_critical ; 0x81a968
;;;101        tuya_ble_mcu_firmware_version = firmware_version;
        0x00812974:    48ee        .H      LDR      r0,[pc,#952] ; [0x812d30] = 0x209104
        0x00812976:    e9c04503    ...E    STRD     r4,r5,[r0,#0xc]
;;;102        tuya_ble_mcu_hardware_version = hardware_version;
;;;103        tuya_ble_device_exit_critical();
        0x0081297a:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0081297e:    f007bff9    ....    B.W      tuya_ble_device_exit_critical ; 0x81a974
    tuya_ble_ota_status_set
;;;104    }
;;;105    
;;;106    
;;;107    void tuya_ble_ota_status_set(tuya_ble_ota_status_t status)
;;;108    {
;;;109        tuya_ble_ota_status = status;
        0x00812982:    49eb        .I      LDR      r1,[pc,#940] ; [0x812d30] = 0x209104
        0x00812984:    7048        Hp      STRB     r0,[r1,#1]
;;;110    }
        0x00812986:    4770        pG      BX       lr
    tuya_ble_ota_status_get
;;;111    
;;;112    
;;;113    tuya_ble_ota_status_t tuya_ble_ota_status_get(void)
;;;114    {
;;;115        return tuya_ble_ota_status;
        0x00812988:    48e9        .H      LDR      r0,[pc,#932] ; [0x812d30] = 0x209104
        0x0081298a:    7840        @x      LDRB     r0,[r0,#1]
;;;116    }
        0x0081298c:    4770        pG      BX       lr
    tuya_ble_pair_rand_clear
;;;117    
;;;118    
;;;119    void tuya_ble_pair_rand_clear(void)
;;;120    {
        0x0081298e:    b510        ..      PUSH     {r4,lr}
;;;121        tuya_ble_device_enter_critical();
        0x00812990:    f007ffea    ....    BL       tuya_ble_device_enter_critical ; 0x81a968
;;;122        memset(tuya_ble_pair_rand,0,sizeof(tuya_ble_pair_rand));
        0x00812994:    49e6        .I      LDR      r1,[pc,#920] ; [0x812d30] = 0x209104
        0x00812996:    2000        .       MOVS     r0,#0
        0x00812998:    311c        .1      ADDS     r1,r1,#0x1c
        0x0081299a:    6008        .`      STR      r0,[r1,#0]
        0x0081299c:    8088        ..      STRH     r0,[r1,#4]
;;;123        tuya_ble_pair_rand_valid = 0;
        0x0081299e:    391c        .9      SUBS     r1,r1,#0x1c
        0x008129a0:    7008        .p      STRB     r0,[r1,#0]
;;;124        tuya_ble_device_exit_critical();
        0x008129a2:    e8bd4010    ...@    POP      {r4,lr}
        0x008129a6:    f007bfe5    ....    B.W      tuya_ble_device_exit_critical ; 0x81a974
    tuya_ble_pair_rand_valid_get
;;;125    }
;;;126    
;;;127    
;;;128    uint8_t tuya_ble_pair_rand_valid_get(void)
;;;129    {
;;;130        return tuya_ble_pair_rand_valid;
        0x008129aa:    48e1        .H      LDR      r0,[pc,#900] ; [0x812d30] = 0x209104
        0x008129ac:    7800        .x      LDRB     r0,[r0,#0]
;;;131    }
        0x008129ae:    4770        pG      BX       lr
    tuya_ble_air_recv_packet_free
;;;132    
;;;133    
;;;134    static bool buffer_value_is_all_x(uint8_t *buffer,uint16_t len,uint8_t value)
;;;135    {
;;;136        bool ret = true;
;;;137        for(uint16_t i = 0; i<len; i++)
;;;138        {
;;;139            if(buffer[i]!= value)
;;;140            {
;;;141                ret = false;
;;;142                break;
;;;143            }
;;;144        }
;;;145        return ret;
;;;146    }
;;;147    
;;;148    void tuya_ble_air_recv_packet_free(void)
;;;149    {
        0x008129b0:    b510        ..      PUSH     {r4,lr}
        0x008129b2:    4cdf        .L      LDR      r4,[pc,#892] ; [0x812d30] = 0x209104
        0x008129b4:    3424        $4      ADDS     r4,r4,#0x24
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_data_handler.c (149)
        0x008129b6:    68a0        .h      LDR      r0,[r4,#8]
        0x008129b8:    2800        .(      CMP      r0,#0
        0x008129ba:    d005        ..      BEQ      0x8129c8 ; tuya_ble_air_recv_packet_free + 24
;;;150        if(air_recv_packet.recv_data)
;;;151        {
;;;152            tuya_ble_free(air_recv_packet.recv_data);
        0x008129bc:    f002fcf3    ....    BL       tuya_ble_free ; 0x8153a6
;;;153            air_recv_packet.recv_data = NULL;
        0x008129c0:    2000        .       MOVS     r0,#0
;;;154            air_recv_packet.recv_len_max = 0;
        0x008129c2:    60a0        .`      STR      r0,[r4,#8]
;;;155            air_recv_packet.recv_len = 0;
        0x008129c4:    6060        ``      STR      r0,[r4,#4]
        0x008129c6:    6020         `      STR      r0,[r4,#0]
;;;156        }
;;;157    }
        0x008129c8:    bd10        ..      POP      {r4,pc}
    ble_data_unpack
;;;158    
;;;159    static uint32_t ble_data_unpack(uint8_t *buf,uint32_t len)
;;;160    {
        0x008129ca:    e92d47f0    -..G    PUSH     {r4-r10,lr}
;;;161        static uint32_t offset = 0;
;;;162        mtp_ret ret;
;;;163    
;;;164        ret = trsmitr_recv_pkg_decode(&ty_trsmitr_proc, buf, len);
        0x008129ce:    b2ca        ..      UXTB     r2,r1
        0x008129d0:    4601        .F      MOV      r1,r0
        0x008129d2:    48d7        .H      LDR      r0,[pc,#860] ; [0x812d30] = 0x209104
        0x008129d4:    3038        80      ADDS     r0,r0,#0x38
        0x008129d6:    f002fd8b    ....    BL       trsmitr_recv_pkg_decode ; 0x8154f0
        0x008129da:    4fd5        .O      LDR      r7,[pc,#852] ; [0x812d30] = 0x209104
        0x008129dc:    0004        ..      MOVS     r4,r0
        0x008129de:    f04f0500    O...    MOV      r5,#0
        0x008129e2:    f1070724    ..$.    ADD      r7,r7,#0x24
;;;165        if(MTP_OK != ret && MTP_TRSMITR_CONTINUE != ret)
        0x008129e6:    d00b        ..      BEQ      0x812a00 ; ble_data_unpack + 54
        0x008129e8:    2c03        .,      CMP      r4,#3
        0x008129ea:    d009        ..      BEQ      0x812a00 ; ble_data_unpack + 54
;;;166        {
;;;167            air_recv_packet.recv_len_max = 0;
;;;168            air_recv_packet.recv_len = 0;
        0x008129ec:    607d        }`      STR      r5,[r7,#4]
;;;169            if(air_recv_packet.recv_data)
        0x008129ee:    603d        =`      STR      r5,[r7,#0]
        0x008129f0:    68b8        .h      LDR      r0,[r7,#8]
        0x008129f2:    b110        ..      CBZ      r0,0x8129fa ; ble_data_unpack + 48
;;;170            {
;;;171                tuya_ble_free(air_recv_packet.recv_data);
        0x008129f4:    f002fcd7    ....    BL       tuya_ble_free ; 0x8153a6
;;;172                air_recv_packet.recv_data = NULL;
        0x008129f8:    60bd        .`      STR      r5,[r7,#8]
;;;173            }
;;;174            
;;;175            return 1;
        0x008129fa:    2001        .       MOVS     r0,#1
        0x008129fc:    e8bd87f0    ....    POP      {r4-r10,pc}
;;;176        }
;;;177    
;;;178        if(FRM_PKG_FIRST == ty_trsmitr_proc.pkg_desc)
        0x00812a00:    48cb        .H      LDR      r0,[pc,#812] ; [0x812d30] = 0x209104
        0x00812a02:    f8df9334    ..4.    LDR      r9,[pc,#820] ; [0x812d38] = 0x21103002
        0x00812a06:    3038        80      ADDS     r0,r0,#0x38
        0x00812a08:    4ec9        .N      LDR      r6,[pc,#804] ; [0x812d30] = 0x209104
        0x00812a0a:    7980        .y      LDRB     r0,[r0,#6]
        0x00812a0c:    2801        .(      CMP      r0,#1
        0x00812a0e:    d118        ..      BNE      0x812a42 ; ble_data_unpack + 120
;;;179        {
;;;180            if(air_recv_packet.recv_data)
        0x00812a10:    68b8        .h      LDR      r0,[r7,#8]
        0x00812a12:    b110        ..      CBZ      r0,0x812a1a ; ble_data_unpack + 80
;;;181            {
;;;182                tuya_ble_free(air_recv_packet.recv_data);
        0x00812a14:    f002fcc7    ....    BL       tuya_ble_free ; 0x8153a6
;;;183                air_recv_packet.recv_data = NULL;
        0x00812a18:    60bd        .`      STR      r5,[r7,#8]
;;;184            }
;;;185            air_recv_packet.recv_len_max = get_trsmitr_frame_total_len(&ty_trsmitr_proc);
        0x00812a1a:    48c5        .H      LDR      r0,[pc,#788] ; [0x812d30] = 0x209104
        0x00812a1c:    3038        80      ADDS     r0,r0,#0x38
        0x00812a1e:    f002fce9    ....    BL       get_trsmitr_frame_total_len ; 0x8153f4
;;;186            if((air_recv_packet.recv_len_max>TUYA_BLE_AIR_FRAME_MAX)||(air_recv_packet.recv_len_max==0))
        0x00812a22:    6078        x`      STR      r0,[r7,#4]
        0x00812a24:    f5b06f80    ...o    CMP      r0,#0x400
        0x00812a28:    d833        3.      BHI      0x812a92 ; ble_data_unpack + 200
        0x00812a2a:    b388        ..      CBZ      r0,0x812a90 ; ble_data_unpack + 198
;;;187            {
;;;188                air_recv_packet.recv_len_max = 0;
;;;189                air_recv_packet.recv_len = 0;
;;;190                TUYA_BLE_LOG_ERROR("ble_data_unpack total size [%d ]error.",air_recv_packet.recv_len_max);
;;;191                return 2;
;;;192            }
;;;193            air_recv_packet.recv_len = 0;
;;;194            air_recv_packet.recv_data = tuya_ble_malloc(air_recv_packet.recv_len_max);
        0x00812a2c:    b280        ..      UXTH     r0,r0
        0x00812a2e:    603d        =`      STR      r5,[r7,#0]
        0x00812a30:    f002fcae    ....    BL       tuya_ble_malloc ; 0x815390
;;;195            if(air_recv_packet.recv_data==NULL)
        0x00812a34:    60b8        .`      STR      r0,[r7,#8]
        0x00812a36:    2800        .(      CMP      r0,#0
        0x00812a38:    d037        7.      BEQ      0x812aaa ; ble_data_unpack + 224
;;;196            {
;;;197                TUYA_BLE_LOG_ERROR("ble_data_unpack malloc failed.");
;;;198                return 2;
;;;199            }
;;;200            memset(air_recv_packet.recv_data,0,air_recv_packet.recv_len_max);
        0x00812a3a:    6879        yh      LDR      r1,[r7,#4]
        0x00812a3c:    f447f2ee    G...    BL       __aeabi_memclr ; 0x5a01c
;;;201            offset = 0;
        0x00812a40:    61b5        .a      STR      r5,[r6,#0x18]
;;;202        }
;;;203        if((offset+get_trsmitr_subpkg_len(&ty_trsmitr_proc))<=air_recv_packet.recv_len_max)
        0x00812a42:    48bb        .H      LDR      r0,[pc,#748] ; [0x812d30] = 0x209104
        0x00812a44:    3038        80      ADDS     r0,r0,#0x38
        0x00812a46:    f002fcdb    ....    BL       get_trsmitr_subpkg_len ; 0x815400
        0x00812a4a:    69b1        .i      LDR      r1,[r6,#0x18]
        0x00812a4c:    4408        .D      ADD      r0,r0,r1
        0x00812a4e:    6879        yh      LDR      r1,[r7,#4]
        0x00812a50:    4288        .B      CMP      r0,r1
        0x00812a52:    d840        @.      BHI      0x812ad6 ; ble_data_unpack + 268
;;;204        {
;;;205            if(air_recv_packet.recv_data)
        0x00812a54:    68b8        .h      LDR      r0,[r7,#8]
        0x00812a56:    2800        .(      CMP      r0,#0
        0x00812a58:    d031        1.      BEQ      0x812abe ; ble_data_unpack + 244
;;;206            {
;;;207                memcpy(air_recv_packet.recv_data+offset,get_trsmitr_subpkg(&ty_trsmitr_proc),get_trsmitr_subpkg_len(&ty_trsmitr_proc));
        0x00812a5a:    48b5        .H      LDR      r0,[pc,#724] ; [0x812d30] = 0x209104
        0x00812a5c:    3038        80      ADDS     r0,r0,#0x38
        0x00812a5e:    f002fccf    ....    BL       get_trsmitr_subpkg_len ; 0x815400
        0x00812a62:    4680        .F      MOV      r8,r0
        0x00812a64:    48b2        .H      LDR      r0,[pc,#712] ; [0x812d30] = 0x209104
        0x00812a66:    3038        80      ADDS     r0,r0,#0x38
        0x00812a68:    f002fccc    ....    BL       get_trsmitr_subpkg ; 0x815404
        0x00812a6c:    4601        .F      MOV      r1,r0
        0x00812a6e:    68b8        .h      LDR      r0,[r7,#8]
        0x00812a70:    69b2        .i      LDR      r2,[r6,#0x18]
        0x00812a72:    4410        .D      ADD      r0,r0,r2
        0x00812a74:    4642        BF      MOV      r2,r8
        0x00812a76:    f447f210    G...    BL       __aeabi_memcpy ; 0x59e9a
;;;208                offset += get_trsmitr_subpkg_len(&ty_trsmitr_proc);
        0x00812a7a:    48ad        .H      LDR      r0,[pc,#692] ; [0x812d30] = 0x209104
        0x00812a7c:    3038        80      ADDS     r0,r0,#0x38
        0x00812a7e:    f002fcbf    ....    BL       get_trsmitr_subpkg_len ; 0x815400
        0x00812a82:    69b1        .i      LDR      r1,[r6,#0x18]
        0x00812a84:    2c00        .,      CMP      r4,#0
        0x00812a86:    4408        .D      ADD      r0,r0,r1
;;;209                air_recv_packet.recv_len = offset;
        0x00812a88:    61b0        .a      STR      r0,[r6,#0x18]
        0x00812a8a:    6038        8`      STR      r0,[r7,#0]
        0x00812a8c:    d030        0.      BEQ      0x812af0 ; ble_data_unpack + 294
        0x00812a8e:    e02d        -.      B        0x812aec ; ble_data_unpack + 290
        0x00812a90:    e7ff        ..      B        0x812a92 ; ble_data_unpack + 200
        0x00812a92:    607d        }`      STR      r5,[r7,#4]
        0x00812a94:    a0a9        ..      ADR      r0,{pc}+0x2a8 ; 0x812d3c
        0x00812a96:    603d        =`      STR      r5,[r7,#0]
        0x00812a98:    f008f887    ....    BL       get_args ; 0x81abaa
        0x00812a9c:    4602        .F      MOV      r2,r0
        0x00812a9e:    49b5        .I      LDR      r1,[pc,#724] ; [0x812d74] = 0x88023cc
        0x00812aa0:    4648        HF      MOV      r0,r9
        0x00812aa2:    687b        {h      LDR      r3,[r7,#4]
        0x00812aa4:    f7f4dfdb    ....    BL       log_buffer ; 0x7a5e
        0x00812aa8:    e020         .      B        0x812aec ; ble_data_unpack + 290
        0x00812aaa:    a0b3        ..      ADR      r0,{pc}+0x2ce ; 0x812d78
        0x00812aac:    f008f87d    ..}.    BL       get_args ; 0x81abaa
        0x00812ab0:    49b0        .I      LDR      r1,[pc,#704] ; [0x812d74] = 0x88023cc
        0x00812ab2:    4602        .F      MOV      r2,r0
        0x00812ab4:    3138        81      ADDS     r1,r1,#0x38
        0x00812ab6:    4648        HF      MOV      r0,r9
        0x00812ab8:    f7f4dfd1    ....    BL       log_buffer ; 0x7a5e
        0x00812abc:    e016        ..      B        0x812aec ; ble_data_unpack + 290
;;;210            }
;;;211            else
;;;212            {
;;;213                TUYA_BLE_LOG_ERROR("ble_data_unpack error.");
        0x00812abe:    a0ba        ..      ADR      r0,{pc}+0x2ea ; 0x812da8
        0x00812ac0:    f008f873    ..s.    BL       get_args ; 0x81abaa
        0x00812ac4:    49ab        .I      LDR      r1,[pc,#684] ; [0x812d74] = 0x88023cc
        0x00812ac6:    4602        .F      MOV      r2,r0
        0x00812ac8:    3168        h1      ADDS     r1,r1,#0x68
        0x00812aca:    4648        HF      MOV      r0,r9
        0x00812acc:    f7f4dfc7    ....    BL       log_buffer ; 0x7a5e
;;;214                air_recv_packet.recv_len_max = 0;
;;;215                air_recv_packet.recv_len = 0;
        0x00812ad0:    607d        }`      STR      r5,[r7,#4]
;;;216                return 2;
        0x00812ad2:    603d        =`      STR      r5,[r7,#0]
        0x00812ad4:    e00a        ..      B        0x812aec ; ble_data_unpack + 290
;;;217            }
;;;218        }
;;;219        else
;;;220        {
;;;221            ret = MTP_INVALID_PARAM;
;;;222            TUYA_BLE_LOG_ERROR("ble_data_unpack[%d] error:MTP_INVALID_PARAM");
        0x00812ad6:    a0be        ..      ADR      r0,{pc}+0x2fa ; 0x812dd0
        0x00812ad8:    f008f867    ..g.    BL       get_args ; 0x81abaa
        0x00812adc:    49a5        .I      LDR      r1,[pc,#660] ; [0x812d74] = 0x88023cc
        0x00812ade:    4602        .F      MOV      r2,r0
        0x00812ae0:    3190        .1      ADDS     r1,r1,#0x90
        0x00812ae2:    4648        HF      MOV      r0,r9
        0x00812ae4:    f7f4dfbb    ....    BL       log_buffer ; 0x7a5e
;;;223            tuya_ble_air_recv_packet_free();
        0x00812ae8:    f7ffff62    ..b.    BL       tuya_ble_air_recv_packet_free ; 0x8129b0
        0x00812aec:    2002        .       MOVS     r0,#2
        0x00812aee:    e785        ..      B        0x8129fc ; ble_data_unpack + 50
;;;224        }
;;;225    
;;;226        if(ret == MTP_OK)
;;;227        {
;;;228            offset=0;
;;;229            TUYA_BLE_LOG_DEBUG("ble_data_unpack[%d]",air_recv_packet.recv_len);
        0x00812af0:    a0c6        ..      ADR      r0,{pc}+0x31c ; 0x812e0c
        0x00812af2:    61b5        .a      STR      r5,[r6,#0x18]
        0x00812af4:    f008f859    ..Y.    BL       get_args ; 0x81abaa
        0x00812af8:    499e        .I      LDR      r1,[pc,#632] ; [0x812d74] = 0x88023cc
        0x00812afa:    4602        .F      MOV      r2,r0
        0x00812afc:    31cc        .1      ADDS     r1,r1,#0xcc
        0x00812afe:    4648        HF      MOV      r0,r9
        0x00812b00:    683b        ;h      LDR      r3,[r7,#0]
        0x00812b02:    f7f4dfac    ....    BL       log_buffer ; 0x7a5e
;;;230    
;;;231            return 0;
        0x00812b06:    2000        .       MOVS     r0,#0
;;;232        }
;;;233        else
;;;234        {
;;;235            return 2;
;;;236        }
;;;237    }
        0x00812b08:    e778        x.      B        0x8129fc ; ble_data_unpack + 50
    tuya_ble_commonData_rx_proc
;;;238    
;;;239    static uint8_t ble_cmd_data_crc_check(uint8_t *input,uint16_t len)
;;;240    {
;;;241        uint16_t data_len = 0;
;;;242        uint16_t crc16 = 0xFFFF;
;;;243        uint16_t crc16_cal = 0;
;;;244    
;;;245        data_len = (input[10]<<8)|input[11];
;;;246    
;;;247        if((13+data_len)>=TUYA_BLE_AIR_FRAME_MAX)
;;;248        {
;;;249            return 1;
;;;250        }
;;;251    
;;;252        crc16_cal = tuya_ble_crc16_compute(input,12+data_len, &crc16);
;;;253    
;;;254        TUYA_BLE_LOG_DEBUG("crc16_cal[0x%04x]",crc16_cal);
;;;255        crc16 = (input[12+data_len]<<8)|input[13+data_len];
;;;256        TUYA_BLE_LOG_DEBUG("crc16[0x%04x]",crc16);
;;;257        if(crc16==crc16_cal)
;;;258        {
;;;259            return 0;
;;;260        }
;;;261        else
;;;262        {
;;;263            return 1;
;;;264        }
;;;265    }
;;;266    
;;;267    
;;;268    void tuya_ble_commonData_rx_proc(uint8_t *buf,uint16_t len)
;;;269    {
        0x00812b0a:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x00812b0e:    b08e        ..      SUB      sp,sp,#0x38
;;;270        uint8_t temp;
;;;271        uint32_t current_sn = 0;
;;;272        uint16_t current_cmd = 0;
;;;273        tuya_ble_evt_param_t evt;
;;;274        uint8_t *ble_evt_buffer=NULL;
;;;275        uint8_t current_encry_mode = 0;
;;;276        uint16_t p_version = 0;
;;;277    
;;;278        if(ble_data_unpack(buf,len))
        0x00812b10:    f7ffff5b    ..[.    BL       ble_data_unpack ; 0x8129ca
        0x00812b14:    2800        .(      CMP      r0,#0
        0x00812b16:    d176        v.      BNE      0x812c06 ; tuya_ble_commonData_rx_proc + 252
;;;279        {
;;;280            return;      //
;;;281        }
;;;282    
;;;283        if(air_recv_packet.recv_len>TUYA_BLE_AIR_FRAME_MAX)
        0x00812b18:    4e85        .N      LDR      r6,[pc,#532] ; [0x812d30] = 0x209104
        0x00812b1a:    4c87        .L      LDR      r4,[pc,#540] ; [0x812d38] = 0x21103002
        0x00812b1c:    3624        $6      ADDS     r6,r6,#0x24
        0x00812b1e:    6830        0h      LDR      r0,[r6,#0]
        0x00812b20:    f5b06f80    ...o    CMP      r0,#0x400
        0x00812b24:    d905        ..      BLS      0x812b32 ; tuya_ble_commonData_rx_proc + 40
;;;284        {
;;;285            TUYA_BLE_LOG_ERROR("air_recv_packet.recv_len bigger than TUYA_BLE_AIR_FRAME_MAX.");
        0x00812b26:    48c2        .H      LDR      r0,[pc,#776] ; [0x812e30] = 0x81cfb8
        0x00812b28:    f008f83f    ..?.    BL       get_args ; 0x81abaa
        0x00812b2c:    4602        .F      MOV      r2,r0
        0x00812b2e:    49c1        .I      LDR      r1,[pc,#772] ; [0x812e34] = 0x88024f8
;;;286            tuya_ble_air_recv_packet_free();
;;;287            return;
        0x00812b30:    e064        d.      B        0x812bfc ; tuya_ble_commonData_rx_proc + 242
;;;288        }
;;;289    
;;;290        if(ty_trsmitr_proc.version<2)  //协议主版本号低于2，不解析，返回。
        0x00812b32:    487f        .H      LDR      r0,[pc,#508] ; [0x812d30] = 0x209104
        0x00812b34:    3038        80      ADDS     r0,r0,#0x38
        0x00812b36:    7900        .y      LDRB     r0,[r0,#4]
        0x00812b38:    2802        .(      CMP      r0,#2
        0x00812b3a:    d206        ..      BCS      0x812b4a ; tuya_ble_commonData_rx_proc + 64
;;;291        {
;;;292            TUYA_BLE_LOG_ERROR("ty_ble_rx_proc version not compatibility!");
        0x00812b3c:    a0be        ..      ADR      r0,{pc}+0x2fc ; 0x812e38
        0x00812b3e:    f008f834    ..4.    BL       get_args ; 0x81abaa
        0x00812b42:    49bc        .I      LDR      r1,[pc,#752] ; [0x812e34] = 0x88024f8
        0x00812b44:    4602        .F      MOV      r2,r0
        0x00812b46:    314c        L1      ADDS     r1,r1,#0x4c
;;;293            tuya_ble_air_recv_packet_free();
;;;294            return;
        0x00812b48:    e058        X.      B        0x812bfc ; tuya_ble_commonData_rx_proc + 242
;;;295        }
;;;296    
;;;297    
;;;298        if(tuya_ble_current_para.sys_settings.bound_flag==1)//当前已绑定状态
        0x00812b4a:    f8df8324    ..$.    LDR      r8,[pc,#804] ; [0x812e70] = 0x2097d4
        0x00812b4e:    f898013c    ..<.    LDRB     r0,[r8,#0x13c]
        0x00812b52:    2801        .(      CMP      r0,#1
        0x00812b54:    d103        ..      BNE      0x812b5e ; tuya_ble_commonData_rx_proc + 84
;;;299        {
;;;300            if(ENCRYPTION_MODE_NONE==air_recv_packet.recv_data[0])
        0x00812b56:    68b0        .h      LDR      r0,[r6,#8]
        0x00812b58:    7800        .x      LDRB     r0,[r0,#0]
        0x00812b5a:    2800        .(      CMP      r0,#0
        0x00812b5c:    d041        A.      BEQ      0x812be2 ; tuya_ble_commonData_rx_proc + 216
;;;301            {
;;;302                TUYA_BLE_LOG_ERROR("ty_ble_rx_proc data encryption mode error since bound_flag = 1.");
;;;303                tuya_ble_air_recv_packet_free();
;;;304                return;
;;;305            }
;;;306        }
;;;307    
;;;308        current_encry_mode = air_recv_packet.recv_data[0];
        0x00812b5e:    68b0        .h      LDR      r0,[r6,#8]
        0x00812b60:    7807        .x      LDRB     r7,[r0,#0]
;;;309    
;;;310        TUYA_BLE_LOG_HEXDUMP_DEBUG("received encry data",(uint8_t*)air_recv_packet.recv_data,air_recv_packet.recv_len);//
        0x00812b62:    a0c4        ..      ADR      r0,{pc}+0x312 ; 0x812e74
        0x00812b64:    f008f821    ..!.    BL       get_args ; 0x81abaa
        0x00812b68:    49b2        .I      LDR      r1,[pc,#712] ; [0x812e34] = 0x88024f8
        0x00812b6a:    4602        .F      MOV      r2,r0
        0x00812b6c:    31d4        .1      ADDS     r1,r1,#0xd4
        0x00812b6e:    4620         F      MOV      r0,r4
        0x00812b70:    6833        3h      LDR      r3,[r6,#0]
        0x00812b72:    f7f4df74    ..t.    BL       log_buffer ; 0x7a5e
        0x00812b76:    8830        0.      LDRH     r0,[r6,#0]
        0x00812b78:    2108        .!      MOVS     r1,#8
        0x00812b7a:    b283        ..      UXTH     r3,r0
        0x00812b7c:    a07c        |.      ADR      r0,{pc}+0x1f4 ; 0x812d70
        0x00812b7e:    68b2        .h      LDR      r2,[r6,#8]
        0x00812b80:    f008f827    ..'.    BL       log_hexdump ; 0x81abd2
        0x00812b84:    a07a        z.      ADR      r0,{pc}+0x1ec ; 0x812d70
        0x00812b86:    f008f810    ....    BL       get_args ; 0x81abaa
        0x00812b8a:    4602        .F      MOV      r2,r0
        0x00812b8c:    49c5        .I      LDR      r1,[pc,#788] ; [0x812ea4] = 0x88025fc
        0x00812b8e:    4620         F      MOV      r0,r4
        0x00812b90:    f7f4df65    ..e.    BL       log_buffer ; 0x7a5e
;;;311    
;;;312        air_recv_packet.de_encrypt_buf = NULL;
        0x00812b94:    2500        .%      MOVS     r5,#0
;;;313        
;;;314        air_recv_packet.de_encrypt_buf = (uint8_t*)tuya_ble_malloc(air_recv_packet.recv_len);
        0x00812b96:    6135        5a      STR      r5,[r6,#0x10]
        0x00812b98:    8830        0.      LDRH     r0,[r6,#0]
        0x00812b9a:    b280        ..      UXTH     r0,r0
        0x00812b9c:    f002fbf8    ....    BL       tuya_ble_malloc ; 0x815390
;;;315        
;;;316        if(air_recv_packet.de_encrypt_buf==NULL)
        0x00812ba0:    6130        0a      STR      r0,[r6,#0x10]
        0x00812ba2:    b328        (.      CBZ      r0,0x812bf0 ; tuya_ble_commonData_rx_proc + 230
        0x00812ba4:    60f5        .`      STR      r5,[r6,#0xc]
        0x00812ba6:    4a62        bJ      LDR      r2,[pc,#392] ; [0x812d30] = 0x209104
        0x00812ba8:    e9cd0800    ....    STRD     r0,r8,[sp,#0]
        0x00812bac:    321c        .2      ADDS     r2,r2,#0x1c
        0x00812bae:    9202        ..      STR      r2,[sp,#8]
        0x00812bb0:    4b5f        _K      LDR      r3,[pc,#380] ; [0x812d30] = 0x209104
;;;317        {
;;;318            TUYA_BLE_LOG_ERROR("air_recv_packet.de_encrypt_buf malloc failed.");
;;;319            tuya_ble_air_recv_packet_free();
;;;320            return;
;;;321        }
;;;322        else
;;;323        {
;;;324            p_version = (TUYA_BLE_PROTOCOL_VERSION_HIGN<<8) + TUYA_BLE_PROTOCOL_VERSION_LOW;
        0x00812bb2:    f2403c03    @..<    MOV      r12,#0x303
;;;325            air_recv_packet.decrypt_buf_len = 0;
;;;326            temp = tuya_ble_decryption(p_version,(uint8_t *)air_recv_packet.recv_data,air_recv_packet.recv_len,&air_recv_packet.decrypt_buf_len,
        0x00812bb6:    3330        03      ADDS     r3,r3,#0x30
        0x00812bb8:    4660        `F      MOV      r0,r12
        0x00812bba:    6832        2h      LDR      r2,[r6,#0]
        0x00812bbc:    68b1        .h      LDR      r1,[r6,#8]
        0x00812bbe:    f008ff59    ..Y.    BL       tuya_ble_decryption ; 0x81ba74
        0x00812bc2:    4605        .F      MOV      r5,r0
;;;327            (uint8_t *)air_recv_packet.de_encrypt_buf,&tuya_ble_current_para,tuya_ble_pair_rand);
;;;328            tuya_ble_air_recv_packet_free();
        0x00812bc4:    f7fffef4    ....    BL       tuya_ble_air_recv_packet_free ; 0x8129b0
        0x00812bc8:    2d00        .-      CMP      r5,#0
        0x00812bca:    d01f        ..      BEQ      0x812c0c ; tuya_ble_commonData_rx_proc + 258
;;;329        }
;;;330        
;;;331       
;;;332        if(temp != 0) //解密失败
;;;333        {
;;;334            TUYA_BLE_LOG_ERROR("ble receive data decryption error code = %d",temp);
        0x00812bcc:    a0b6        ..      ADR      r0,{pc}+0x2dc ; 0x812ea8
        0x00812bce:    f007ffec    ....    BL       get_args ; 0x81abaa
        0x00812bd2:    49b4        .I      LDR      r1,[pc,#720] ; [0x812ea4] = 0x88025fc
        0x00812bd4:    4602        .F      MOV      r2,r0
        0x00812bd6:    462b        +F      MOV      r3,r5
        0x00812bd8:    3140        @1      ADDS     r1,r1,#0x40
        0x00812bda:    4620         F      MOV      r0,r4
        0x00812bdc:    f7f4df3f    ..?.    BL       log_buffer ; 0x7a5e
;;;335            tuya_ble_free(air_recv_packet.de_encrypt_buf);
;;;336            return;
        0x00812be0:    e235        5.      B        0x81304e ; tuya_ble_commonData_rx_proc + 1348
        0x00812be2:    48c0        .H      LDR      r0,[pc,#768] ; [0x812ee4] = 0x81cf68
        0x00812be4:    f007ffe1    ....    BL       get_args ; 0x81abaa
        0x00812be8:    49ae        .I      LDR      r1,[pc,#696] ; [0x812ea4] = 0x88025fc
        0x00812bea:    4602        .F      MOV      r2,r0
        0x00812bec:    3980        .9      SUBS     r1,r1,#0x80
        0x00812bee:    e005        ..      B        0x812bfc ; tuya_ble_commonData_rx_proc + 242
        0x00812bf0:    a0bd        ..      ADR      r0,{pc}+0x2f8 ; 0x812ee8
        0x00812bf2:    f007ffda    ....    BL       get_args ; 0x81abaa
        0x00812bf6:    49ab        .I      LDR      r1,[pc,#684] ; [0x812ea4] = 0x88025fc
        0x00812bf8:    4602        .F      MOV      r2,r0
        0x00812bfa:    1d09        ..      ADDS     r1,r1,#4
        0x00812bfc:    4620         F      MOV      r0,r4
        0x00812bfe:    f7f4df2e    ....    BL       log_buffer ; 0x7a5e
        0x00812c02:    f7fffed5    ....    BL       tuya_ble_air_recv_packet_free ; 0x8129b0
        0x00812c06:    b00e        ..      ADD      sp,sp,#0x38
        0x00812c08:    e8bd81f0    ....    POP      {r4-r8,pc}
;;;337        }
;;;338    
;;;339        TUYA_BLE_LOG_HEXDUMP_DEBUG("decryped data",(uint8_t*)air_recv_packet.de_encrypt_buf,air_recv_packet.decrypt_buf_len);//解密数据
        0x00812c0c:    a0c5        ..      ADR      r0,{pc}+0x318 ; 0x812f24
        0x00812c0e:    f007ffcc    ....    BL       get_args ; 0x81abaa
        0x00812c12:    49a4        .I      LDR      r1,[pc,#656] ; [0x812ea4] = 0x88025fc
        0x00812c14:    4602        .F      MOV      r2,r0
        0x00812c16:    46a0        .F      MOV      r8,r4
        0x00812c18:    317c        |1      ADDS     r1,r1,#0x7c
        0x00812c1a:    4640        @F      MOV      r0,r8
        0x00812c1c:    68f3        .h      LDR      r3,[r6,#0xc]
        0x00812c1e:    f7f4df1e    ....    BL       log_buffer ; 0x7a5e
        0x00812c22:    89b0        ..      LDRH     r0,[r6,#0xc]
        0x00812c24:    2108        .!      MOVS     r1,#8
        0x00812c26:    b283        ..      UXTH     r3,r0
        0x00812c28:    a051        Q.      ADR      r0,{pc}+0x148 ; 0x812d70
        0x00812c2a:    6932        2i      LDR      r2,[r6,#0x10]
        0x00812c2c:    f007ffd1    ....    BL       log_hexdump ; 0x81abd2
        0x00812c30:    a04f        O.      ADR      r0,{pc}+0x140 ; 0x812d70
        0x00812c32:    f007ffba    ....    BL       get_args ; 0x81abaa
        0x00812c36:    499b        .I      LDR      r1,[pc,#620] ; [0x812ea4] = 0x88025fc
        0x00812c38:    4602        .F      MOV      r2,r0
        0x00812c3a:    31a4        .1      ADDS     r1,r1,#0xa4
        0x00812c3c:    4620         F      MOV      r0,r4
        0x00812c3e:    f7f4df0e    ....    BL       log_buffer ; 0x7a5e
;;;340        //指令数据crc验证
;;;341        if(ble_cmd_data_crc_check((uint8_t *)air_recv_packet.de_encrypt_buf,air_recv_packet.decrypt_buf_len)!=0)
        0x00812c42:    89b0        ..      LDRH     r0,[r6,#0xc]
        0x00812c44:    b281        ..      UXTH     r1,r0
        0x00812c46:    6930        0i      LDR      r0,[r6,#0x10]
        0x00812c48:    f001fb9b    ....    BL       ble_cmd_data_crc_check ; 0x814382
        0x00812c4c:    b130        0.      CBZ      r0,0x812c5c ; tuya_ble_commonData_rx_proc + 338
;;;342        {
;;;343            TUYA_BLE_LOG_ERROR("ble receive data crc check error!");
        0x00812c4e:    a0bf        ..      ADR      r0,{pc}+0x2fe ; 0x812f4c
        0x00812c50:    f007ffab    ....    BL       get_args ; 0x81abaa
        0x00812c54:    4993        .I      LDR      r1,[pc,#588] ; [0x812ea4] = 0x88025fc
        0x00812c56:    4602        .F      MOV      r2,r0
        0x00812c58:    31a8        .1      ADDS     r1,r1,#0xa8
;;;344            tuya_ble_free(air_recv_packet.de_encrypt_buf);
;;;345            return;
        0x00812c5a:    e202        ..      B        0x813062 ; tuya_ble_commonData_rx_proc + 1368
;;;346        }
;;;347    
;;;348        //SN验证
;;;349        current_sn  = air_recv_packet.de_encrypt_buf[0]<<24;
        0x00812c5c:    6930        0i      LDR      r0,[r6,#0x10]
        0x00812c5e:    4d34        4M      LDR      r5,[pc,#208] ; [0x812d30] = 0x209104
        0x00812c60:    7801        .x      LDRB     r1,[r0,#0]
        0x00812c62:    7842        Bx      LDRB     r2,[r0,#1]
        0x00812c64:    0609        ..      LSLS     r1,r1,#24
;;;350        current_sn += air_recv_packet.de_encrypt_buf[1]<<16;
        0x00812c66:    eb014102    ...A    ADD      r1,r1,r2,LSL #16
;;;351        current_sn += air_recv_packet.de_encrypt_buf[2]<<8;
        0x00812c6a:    7882        .x      LDRB     r2,[r0,#2]
        0x00812c6c:    78c0        .x      LDRB     r0,[r0,#3]
        0x00812c6e:    eb012102    ...!    ADD      r1,r1,r2,LSL #8
;;;352        current_sn += air_recv_packet.de_encrypt_buf[3];
        0x00812c72:    1844        D.      ADDS     r4,r0,r1
;;;353    
;;;354        if(current_sn<=tuya_ble_receive_sn)
        0x00812c74:    6968        hi      LDR      r0,[r5,#0x14]
        0x00812c76:    4284        .B      CMP      r4,r0
        0x00812c78:    d80b        ..      BHI      0x812c92 ; tuya_ble_commonData_rx_proc + 392
;;;355        {
;;;356            TUYA_BLE_LOG_ERROR("ble receive SN error!");
        0x00812c7a:    a0c0        ..      ADR      r0,{pc}+0x302 ; 0x812f7c
        0x00812c7c:    f007ff95    ....    BL       get_args ; 0x81abaa
        0x00812c80:    4988        .I      LDR      r1,[pc,#544] ; [0x812ea4] = 0x88025fc
        0x00812c82:    4602        .F      MOV      r2,r0
        0x00812c84:    31d8        .1      ADDS     r1,r1,#0xd8
        0x00812c86:    4640        @F      MOV      r0,r8
        0x00812c88:    f7f4dee9    ....    BL       log_buffer ; 0x7a5e
;;;357            tuya_ble_gap_disconnect();//SN错误，断开蓝牙连接
        0x00812c8c:    f007fdf0    ....    BL       tuya_ble_gap_disconnect ; 0x81a870
;;;358            tuya_ble_free(air_recv_packet.de_encrypt_buf);
;;;359            return;
        0x00812c90:    e1dd        ..      B        0x81304e ; tuya_ble_commonData_rx_proc + 1348
        0x00812c92:    f007fe69    ..i.    BL       tuya_ble_device_enter_critical ; 0x81a968
        0x00812c96:    616c        la      STR      r4,[r5,#0x14]
        0x00812c98:    f007fe6c    ..l.    BL       tuya_ble_device_exit_critical ; 0x81a974
        0x00812c9c:    6930        0i      LDR      r0,[r6,#0x10]
        0x00812c9e:    8900        ..      LDRH     r0,[r0,#8]
        0x00812ca0:    ba44        D.      REV16    r4,r0
        0x00812ca2:    f002f9bf    ....    BL       tuya_ble_connect_status_get ; 0x815024
        0x00812ca6:    2803        .(      CMP      r0,#3
;;;360        }
;;;361        else
;;;362        {
;;;363            set_ble_receive_sn(current_sn);
        0x00812ca8:    d014        ..      BEQ      0x812cd4 ; tuya_ble_commonData_rx_proc + 458
;;;364        }
;;;365    
;;;366        current_cmd = ((air_recv_packet.de_encrypt_buf[8]<<8)|air_recv_packet.de_encrypt_buf[9]);
;;;367    
;;;368    
;;;369        if((BONDING_CONN != tuya_ble_connect_status_get())&&(FRM_QRY_DEV_INFO_REQ != current_cmd)&&(PAIR_REQ != current_cmd)
        0x00812caa:    b19c        ..      CBZ      r4,0x812cd4 ; tuya_ble_commonData_rx_proc + 458
        0x00812cac:    2c01        .,      CMP      r4,#1
        0x00812cae:    d011        ..      BEQ      0x812cd4 ; tuya_ble_commonData_rx_proc + 458
;;;370                &&(FRM_LOGIN_KEY_REQ != current_cmd)&&(FRM_FACTORY_TEST_CMD != current_cmd)&&(FRM_NET_CONFIG_INFO_REQ != current_cmd)&&(FRM_ANOMALY_UNBONDING_REQ != current_cmd))
        0x00812cb0:    2c04        .,      CMP      r4,#4
        0x00812cb2:    d00f        ..      BEQ      0x812cd4 ; tuya_ble_commonData_rx_proc + 458
        0x00812cb4:    2c12        .,      CMP      r4,#0x12
        0x00812cb6:    d00d        ..      BEQ      0x812cd4 ; tuya_ble_commonData_rx_proc + 458
        0x00812cb8:    2c21        !,      CMP      r4,#0x21
        0x00812cba:    d00b        ..      BEQ      0x812cd4 ; tuya_ble_commonData_rx_proc + 458
        0x00812cbc:    2c14        .,      CMP      r4,#0x14
        0x00812cbe:    d009        ..      BEQ      0x812cd4 ; tuya_ble_commonData_rx_proc + 458
;;;371        {   //没有绑定前，不响应其它命令
;;;372            tuya_ble_free(air_recv_packet.de_encrypt_buf);
        0x00812cc0:    6930        0i      LDR      r0,[r6,#0x10]
        0x00812cc2:    f002fb70    ..p.    BL       tuya_ble_free ; 0x8153a6
;;;373            TUYA_BLE_LOG_ERROR("ble receive cmd error on current bond state!");
        0x00812cc6:    a0b6        ..      ADR      r0,{pc}+0x2da ; 0x812fa0
        0x00812cc8:    f007ff6f    ..o.    BL       get_args ; 0x81abaa
        0x00812ccc:    4975        uI      LDR      r1,[pc,#468] ; [0x812ea4] = 0x88025fc
        0x00812cce:    4602        .F      MOV      r2,r0
        0x00812cd0:    31fc        .1      ADDS     r1,r1,#0xfc
;;;374            return;
        0x00812cd2:    e00d        ..      B        0x812cf0 ; tuya_ble_commonData_rx_proc + 486
        0x00812cd4:    7868        hx      LDRB     r0,[r5,#1]
;;;375        }
;;;376    
;;;377    
;;;378        if(tuya_ble_ota_status_get()!=TUYA_BLE_OTA_STATUS_NONE)
        0x00812cd6:    b178        x.      CBZ      r0,0x812cf8 ; tuya_ble_commonData_rx_proc + 494
;;;379        {   //OTA状态下，不处理其它事件
;;;380            if(!((current_cmd>=FRM_OTA_START_REQ)&&(current_cmd<=FRM_OTA_END_REQ)))
        0x00812cd8:    f1a4000c    ....    SUB      r0,r4,#0xc
        0x00812cdc:    2805        .(      CMP      r0,#5
        0x00812cde:    d30b        ..      BCC      0x812cf8 ; tuya_ble_commonData_rx_proc + 494
;;;381            {
;;;382                tuya_ble_free(air_recv_packet.de_encrypt_buf);
        0x00812ce0:    6930        0i      LDR      r0,[r6,#0x10]
        0x00812ce2:    f002fb60    ..`.    BL       tuya_ble_free ; 0x8153a6
;;;383                TUYA_BLE_LOG_ERROR("ble receive cmd error on ota state!");
        0x00812ce6:    a0bd        ..      ADR      r0,{pc}+0x2f6 ; 0x812fdc
        0x00812ce8:    f007ff5f    .._.    BL       get_args ; 0x81abaa
        0x00812cec:    49c8        .I      LDR      r1,[pc,#800] ; [0x813010] = 0x8802734
        0x00812cee:    4602        .F      MOV      r2,r0
        0x00812cf0:    4640        @F      MOV      r0,r8
        0x00812cf2:    f7f4deb4    ....    BL       log_buffer ; 0x7a5e
        0x00812cf6:    e786        ..      B        0x812c06 ; tuya_ble_commonData_rx_proc + 252
;;;384                return;
;;;385            }
;;;386        }
;;;387    
;;;388        ble_evt_buffer=(uint8_t*)tuya_ble_malloc(air_recv_packet.decrypt_buf_len+1);
        0x00812cf8:    89b0        ..      LDRH     r0,[r6,#0xc]
        0x00812cfa:    1c40        @.      ADDS     r0,r0,#1
        0x00812cfc:    b280        ..      UXTH     r0,r0
        0x00812cfe:    f002fb47    ..G.    BL       tuya_ble_malloc ; 0x815390
        0x00812d02:    0005        ..      MOVS     r5,r0
;;;389        if(ble_evt_buffer==NULL)
        0x00812d04:    d013        ..      BEQ      0x812d2e ; tuya_ble_commonData_rx_proc + 548
;;;390        {
;;;391            TUYA_BLE_LOG_ERROR("ty_ble_rx_proc no mem.");
;;;392            tuya_ble_free(air_recv_packet.de_encrypt_buf);
;;;393            return;
;;;394        }
;;;395        else
;;;396        {
;;;397            memset(ble_evt_buffer,0,air_recv_packet.decrypt_buf_len+1);
        0x00812d06:    68f1        .h      LDR      r1,[r6,#0xc]
        0x00812d08:    1c49        I.      ADDS     r1,r1,#1
        0x00812d0a:    f447f187    G...    BL       __aeabi_memclr ; 0x5a01c
;;;398        }
;;;399        ble_evt_buffer[0] = current_encry_mode;     //首字节拷贝加密方式，便于后续使用
        0x00812d0e:    702f        /p      STRB     r7,[r5,#0]
;;;400        memcpy(ble_evt_buffer+1,(uint8_t *)air_recv_packet.de_encrypt_buf,air_recv_packet.decrypt_buf_len);
        0x00812d10:    e9d62103    ...!    LDRD     r2,r1,[r6,#0xc]
        0x00812d14:    1c68        h.      ADDS     r0,r5,#1
        0x00812d16:    f447f0c0    G...    BL       __aeabi_memcpy ; 0x59e9a
;;;401        evt.hdr.event = TUYA_BLE_EVT_BLE_CMD;
        0x00812d1a:    200d        .       MOVS     r0,#0xd
        0x00812d1c:    f88d000c    ....    STRB     r0,[sp,#0xc]
;;;402        evt.ble_cmd_data.cmd = current_cmd;
;;;403        evt.ble_cmd_data.p_data = ble_evt_buffer;
;;;404        evt.ble_cmd_data.data_len = air_recv_packet.decrypt_buf_len+1;
        0x00812d20:    9507        ..      STR      r5,[sp,#0x1c]
        0x00812d22:    9405        ..      STR      r4,[sp,#0x14]
        0x00812d24:    89b0        ..      LDRH     r0,[r6,#0xc]
        0x00812d26:    1c40        @.      ADDS     r0,r0,#1
        0x00812d28:    f8ad0018    ....    STRH     r0,[sp,#0x18]
;;;405        TUYA_BLE_LOG_DEBUG("BLE EVENT SEND-CMD:0x%02x - LEN:0x%02x",current_cmd,air_recv_packet.decrypt_buf_len+1);
        0x00812d2c:    e172        r.      B        0x813014 ; tuya_ble_commonData_rx_proc + 1290
        0x00812d2e:    e192        ..      B        0x813056 ; tuya_ble_commonData_rx_proc + 1356
    $d
        0x00812d30:    00209104    .. .    DCD    2134276
        0x00812d34:    00208130    0. .    DCD    2130224
        0x00812d38:    21103002    .0.!    DCD    554708994
        0x00812d3c:    205d455b    [E]     DCD    542983515
        0x00812d40:    41595554    TUYA    DCD    1096373588
        0x00812d44:    454c425f    _BLE    DCD    1162625631
        0x00812d48:    6c62203a    : bl    DCD    1818370106
        0x00812d4c:    61645f65    e_da    DCD    1633967973
        0x00812d50:    755f6174    ta_u    DCD    1969185140
        0x00812d54:    6361706e    npac    DCD    1667330158
        0x00812d58:    6f74206b    k to    DCD    1869881451
        0x00812d5c:    206c6174    tal     DCD    543973748
        0x00812d60:    657a6973    size    DCD    1702521203
        0x00812d64:    64255b20     [%d    DCD    1680169760
        0x00812d68:    72655d20     ]er    DCD    1919245600
        0x00812d6c:    2e726f72    ror.    DCD    779251570
        0x00812d70:    00000000    ....    DCD    0
        0x00812d74:    088023cc    .#..    DCD    142615500
        0x00812d78:    205d455b    [E]     DCD    542983515
        0x00812d7c:    41595554    TUYA    DCD    1096373588
        0x00812d80:    454c425f    _BLE    DCD    1162625631
        0x00812d84:    6c62203a    : bl    DCD    1818370106
        0x00812d88:    61645f65    e_da    DCD    1633967973
        0x00812d8c:    755f6174    ta_u    DCD    1969185140
        0x00812d90:    6361706e    npac    DCD    1667330158
        0x00812d94:    616d206b    k ma    DCD    1634541675
        0x00812d98:    636f6c6c    lloc    DCD    1668246636
        0x00812d9c:    69616620     fai    DCD    1767990816
        0x00812da0:    2e64656c    led.    DCD    778331500
        0x00812da4:    00000000    ....    DCD    0
        0x00812da8:    205d455b    [E]     DCD    542983515
        0x00812dac:    41595554    TUYA    DCD    1096373588
        0x00812db0:    454c425f    _BLE    DCD    1162625631
        0x00812db4:    6c62203a    : bl    DCD    1818370106
        0x00812db8:    61645f65    e_da    DCD    1633967973
        0x00812dbc:    755f6174    ta_u    DCD    1969185140
        0x00812dc0:    6361706e    npac    DCD    1667330158
        0x00812dc4:    7265206b    k er    DCD    1919230059
        0x00812dc8:    2e726f72    ror.    DCD    779251570
        0x00812dcc:    00000000    ....    DCD    0
        0x00812dd0:    205d455b    [E]     DCD    542983515
        0x00812dd4:    41595554    TUYA    DCD    1096373588
        0x00812dd8:    454c425f    _BLE    DCD    1162625631
        0x00812ddc:    6c62203a    : bl    DCD    1818370106
        0x00812de0:    61645f65    e_da    DCD    1633967973
        0x00812de4:    755f6174    ta_u    DCD    1969185140
        0x00812de8:    6361706e    npac    DCD    1667330158
        0x00812dec:    64255b6b    k[%d    DCD    1680169835
        0x00812df0:    7265205d    ] er    DCD    1919230045
        0x00812df4:    3a726f72    ror:    DCD    980578162
        0x00812df8:    5f50544d    MTP_    DCD    1599099981
        0x00812dfc:    41564e49    INVA    DCD    1096175177
        0x00812e00:    5f44494c    LID_    DCD    1598310732
        0x00812e04:    41524150    PARA    DCD    1095909712
        0x00812e08:    0000004d    M...    DCD    77
        0x00812e0c:    205d445b    [D]     DCD    542983259
        0x00812e10:    41595554    TUYA    DCD    1096373588
        0x00812e14:    454c425f    _BLE    DCD    1162625631
        0x00812e18:    6c62203a    : bl    DCD    1818370106
        0x00812e1c:    61645f65    e_da    DCD    1633967973
        0x00812e20:    755f6174    ta_u    DCD    1969185140
        0x00812e24:    6361706e    npac    DCD    1667330158
        0x00812e28:    64255b6b    k[%d    DCD    1680169835
        0x00812e2c:    0000005d    ]...    DCD    93
        0x00812e30:    0081cfb8    ....    DCD    8507320
        0x00812e34:    088024f8    .$..    DCD    142615800
        0x00812e38:    205d455b    [E]     DCD    542983515
        0x00812e3c:    41595554    TUYA    DCD    1096373588
        0x00812e40:    454c425f    _BLE    DCD    1162625631
        0x00812e44:    7974203a    : ty    DCD    2037653562
        0x00812e48:    656c625f    _ble    DCD    1701601887
        0x00812e4c:    5f78725f    _rx_    DCD    1601729119
        0x00812e50:    636f7270    proc    DCD    1668248176
        0x00812e54:    72657620     ver    DCD    1919252000
        0x00812e58:    6e6f6973    sion    DCD    1852795251
        0x00812e5c:    746f6e20     not    DCD    1953459744
        0x00812e60:    6d6f6320     com    DCD    1836016416
        0x00812e64:    69746170    pati    DCD    1769234800
        0x00812e68:    696c6962    bili    DCD    1768712546
        0x00812e6c:    00217974    ty!.    DCD    2193780
        0x00812e70:    002097d4    .. .    DCD    2136020
        0x00812e74:    205d445b    [D]     DCD    542983259
        0x00812e78:    41595554    TUYA    DCD    1096373588
        0x00812e7c:    454c425f    _BLE    DCD    1162625631
        0x00812e80:    6572203a    : re    DCD    1701978170
        0x00812e84:    76696563    ceiv    DCD    1986618723
        0x00812e88:    65206465    ed e    DCD    1696621669
        0x00812e8c:    7972636e    ncry    DCD    2037539694
        0x00812e90:    74616420     dat    DCD    1952539680
        0x00812e94:    6c5b2061    a [l    DCD    1817911393
        0x00812e98:    253d6e65    en=%    DCD    624782949
        0x00812e9c:    3a205d64    d] :    DCD    975199588
        0x00812ea0:    00000000    ....    DCD    0
        0x00812ea4:    088025fc    .%..    DCD    142616060
        0x00812ea8:    205d455b    [E]     DCD    542983515
        0x00812eac:    41595554    TUYA    DCD    1096373588
        0x00812eb0:    454c425f    _BLE    DCD    1162625631
        0x00812eb4:    6c62203a    : bl    DCD    1818370106
        0x00812eb8:    65722065    e re    DCD    1701978213
        0x00812ebc:    76696563    ceiv    DCD    1986618723
        0x00812ec0:    61642065    e da    DCD    1633951845
        0x00812ec4:    64206174    ta d    DCD    1679843700
        0x00812ec8:    79726365    ecry    DCD    2037539685
        0x00812ecc:    6f697470    ptio    DCD    1869182064
        0x00812ed0:    7265206e    n er    DCD    1919230062
        0x00812ed4:    20726f72    ror     DCD    544370546
        0x00812ed8:    65646f63    code    DCD    1701080931
        0x00812edc:    25203d20     = %    DCD    622869792
        0x00812ee0:    00000064    d...    DCD    100
        0x00812ee4:    0081cf68    h...    DCD    8507240
        0x00812ee8:    205d455b    [E]     DCD    542983515
        0x00812eec:    41595554    TUYA    DCD    1096373588
        0x00812ef0:    454c425f    _BLE    DCD    1162625631
        0x00812ef4:    6961203a    : ai    DCD    1767972922
        0x00812ef8:    65725f72    r_re    DCD    1701994354
        0x00812efc:    705f7663    cv_p    DCD    1885304419
        0x00812f00:    656b6361    acke    DCD    1701536609
        0x00812f04:    65642e74    t.de    DCD    1701064308
        0x00812f08:    636e655f    _enc    DCD    1668179295
        0x00812f0c:    74707972    rypt    DCD    1953528178
        0x00812f10:    6675625f    _buf    DCD    1718968927
        0x00812f14:    6c616d20     mal    DCD    1818324256
        0x00812f18:    20636f6c    loc     DCD    543387500
        0x00812f1c:    6c696166    fail    DCD    1818845542
        0x00812f20:    002e6465    ed..    DCD    3040357
        0x00812f24:    205d445b    [D]     DCD    542983259
        0x00812f28:    41595554    TUYA    DCD    1096373588
        0x00812f2c:    454c425f    _BLE    DCD    1162625631
        0x00812f30:    6564203a    : de    DCD    1701060666
        0x00812f34:    70797263    cryp    DCD    1887007331
        0x00812f38:    64206465    ed d    DCD    1679844453
        0x00812f3c:    20617461    ata     DCD    543257697
        0x00812f40:    6e656c5b    [len    DCD    1852140635
        0x00812f44:    5d64253d    =%d]    DCD    1566844221
        0x00812f48:    00003a20     :..    DCD    14880
        0x00812f4c:    205d455b    [E]     DCD    542983515
        0x00812f50:    41595554    TUYA    DCD    1096373588
        0x00812f54:    454c425f    _BLE    DCD    1162625631
        0x00812f58:    6c62203a    : bl    DCD    1818370106
        0x00812f5c:    65722065    e re    DCD    1701978213
        0x00812f60:    76696563    ceiv    DCD    1986618723
        0x00812f64:    61642065    e da    DCD    1633951845
        0x00812f68:    63206174    ta c    DCD    1663066484
        0x00812f6c:    63206372    rc c    DCD    1663066994
        0x00812f70:    6b636568    heck    DCD    1801676136
        0x00812f74:    72726520     err    DCD    1920099616
        0x00812f78:    0021726f    or!.    DCD    2191983
        0x00812f7c:    205d455b    [E]     DCD    542983515
        0x00812f80:    41595554    TUYA    DCD    1096373588
        0x00812f84:    454c425f    _BLE    DCD    1162625631
        0x00812f88:    6c62203a    : bl    DCD    1818370106
        0x00812f8c:    65722065    e re    DCD    1701978213
        0x00812f90:    76696563    ceiv    DCD    1986618723
        0x00812f94:    4e532065    e SN    DCD    1314070629
        0x00812f98:    72726520     err    DCD    1920099616
        0x00812f9c:    0021726f    or!.    DCD    2191983
        0x00812fa0:    205d455b    [E]     DCD    542983515
        0x00812fa4:    41595554    TUYA    DCD    1096373588
        0x00812fa8:    454c425f    _BLE    DCD    1162625631
        0x00812fac:    6c62203a    : bl    DCD    1818370106
        0x00812fb0:    65722065    e re    DCD    1701978213
        0x00812fb4:    76696563    ceiv    DCD    1986618723
        0x00812fb8:    6d632065    e cm    DCD    1835212901
        0x00812fbc:    72652064    d er    DCD    1919230052
        0x00812fc0:    20726f72    ror     DCD    544370546
        0x00812fc4:    63206e6f    on c    DCD    1663069807
        0x00812fc8:    65727275    urre    DCD    1701999221
        0x00812fcc:    6220746e    nt b    DCD    1646294126
        0x00812fd0:    20646e6f    ond     DCD    543452783
        0x00812fd4:    74617473    stat    DCD    1952543859
        0x00812fd8:    00002165    e!..    DCD    8549
        0x00812fdc:    205d455b    [E]     DCD    542983515
        0x00812fe0:    41595554    TUYA    DCD    1096373588
        0x00812fe4:    454c425f    _BLE    DCD    1162625631
        0x00812fe8:    6c62203a    : bl    DCD    1818370106
        0x00812fec:    65722065    e re    DCD    1701978213
        0x00812ff0:    76696563    ceiv    DCD    1986618723
        0x00812ff4:    6d632065    e cm    DCD    1835212901
        0x00812ff8:    72652064    d er    DCD    1919230052
        0x00812ffc:    20726f72    ror     DCD    544370546
        0x00813000:    6f206e6f    on o    DCD    1864396399
        0x00813004:    73206174    ta s    DCD    1931501940
        0x00813008:    65746174    tate    DCD    1702125940
        0x0081300c:    00000021    !...    DCD    33
        0x00813010:    08802734    4'..    DCD    142616372
    $t
        0x00813014:    a0f3        ..      ADR      r0,{pc}+0x3d0 ; 0x8133e4
        0x00813016:    f007fdc8    ....    BL       get_args ; 0x81abaa
        0x0081301a:    4602        .F      MOV      r2,r0
        0x0081301c:    68f0        .h      LDR      r0,[r6,#0xc]
        0x0081301e:    4623        #F      MOV      r3,r4
        0x00813020:    1c40        @.      ADDS     r0,r0,#1
        0x00813022:    9000        ..      STR      r0,[sp,#0]
        0x00813024:    49fd        .I      LDR      r1,[pc,#1012] ; [0x81341c] = 0x8802790
        0x00813026:    4644        DF      MOV      r4,r8
        0x00813028:    4640        @F      MOV      r0,r8
        0x0081302a:    f7f4dd18    ....    BL       log_buffer ; 0x7a5e
;;;406    
;;;407        if(tuya_ble_event_send(&evt)!=0)
        0x0081302e:    a803        ..      ADD      r0,sp,#0xc
        0x00813030:    f002f805    ....    BL       tuya_ble_event_send ; 0x81503e
        0x00813034:    b158        X.      CBZ      r0,0x81304e ; tuya_ble_commonData_rx_proc + 1348
;;;408        {
;;;409            TUYA_BLE_LOG_ERROR("ble event send fail!");
        0x00813036:    a0fa        ..      ADR      r0,{pc}+0x3ea ; 0x813420
        0x00813038:    f007fdb7    ....    BL       get_args ; 0x81abaa
        0x0081303c:    49f7        .I      LDR      r1,[pc,#988] ; [0x81341c] = 0x8802790
        0x0081303e:    4602        .F      MOV      r2,r0
        0x00813040:    3138        81      ADDS     r1,r1,#0x38
        0x00813042:    4620         F      MOV      r0,r4
        0x00813044:    f7f4dd0b    ....    BL       log_buffer ; 0x7a5e
;;;410            tuya_ble_free(ble_evt_buffer);
        0x00813048:    4628        (F      MOV      r0,r5
        0x0081304a:    f002f9ac    ....    BL       tuya_ble_free ; 0x8153a6
;;;411        }
;;;412        
;;;413        tuya_ble_free(air_recv_packet.de_encrypt_buf);
        0x0081304e:    6930        0i      LDR      r0,[r6,#0x10]
        0x00813050:    f002f9a9    ....    BL       tuya_ble_free ; 0x8153a6
;;;414    
;;;415    }
        0x00813054:    e5d7        ..      B        0x812c06 ; tuya_ble_commonData_rx_proc + 252
        0x00813056:    a0fb        ..      ADR      r0,{pc}+0x3ee ; 0x813444
        0x00813058:    f007fda7    ....    BL       get_args ; 0x81abaa
        0x0081305c:    49ef        .I      LDR      r1,[pc,#956] ; [0x81341c] = 0x8802790
        0x0081305e:    4602        .F      MOV      r2,r0
        0x00813060:    3928        (9      SUBS     r1,r1,#0x28
        0x00813062:    4640        @F      MOV      r0,r8
        0x00813064:    f7f4dcfb    ....    BL       log_buffer ; 0x7a5e
        0x00813068:    e7f1        ..      B        0x81304e ; tuya_ble_commonData_rx_proc + 1348
    tuya_ble_commData_send
;;;416    
;;;417    #if (TUYA_BLE_PROTOCOL_VERSION_HIGN==3)
;;;418    
;;;419    #if (TUYA_BLE_PROTOCOL_VERSION_LOW>=2)
;;;420    
;;;421    static void tuya_ble_handle_dev_info_req(uint8_t*recv_data,uint16_t recv_len)
;;;422    {
;;;423        uint8_t p_buf[90];
;;;424        uint8_t payload_len = 0;
;;;425        uint32_t ack_sn = 0;
;;;426        uint8_t encry_mode = 0;
;;;427        uint32_t version_temp_s,version_temp_h;
;;;428        
;;;429        memset(p_buf,0,sizeof(p_buf));
;;;430    
;;;431        ack_sn  = recv_data[1]<<24;
;;;432        ack_sn += recv_data[2]<<16;
;;;433        ack_sn += recv_data[3]<<8;
;;;434        ack_sn += recv_data[4];
;;;435    
;;;436        TUYA_BLE_LOG_DEBUG("get device infor-%d",tuya_ble_current_para.sys_settings.bound_flag);
;;;437    
;;;438        tuya_ble_rand_generator(tuya_ble_pair_rand,6);
;;;439        tuya_ble_pair_rand_valid = 1;
;;;440    
;;;441        if(TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;442        {
;;;443            version_temp_s = tuya_ble_firmware_version;
;;;444            version_temp_h = tuya_ble_hardware_version;
;;;445            p_buf[4] = 0x00;
;;;446        }
;;;447        else
;;;448        {
;;;449            version_temp_s = tuya_ble_firmware_version>>8;
;;;450            version_temp_h = tuya_ble_hardware_version>>8;
;;;451            p_buf[4] = 0x05;
;;;452        }
;;;453        p_buf[0] = (version_temp_s>>8)&0xff;
;;;454        p_buf[1] = (version_temp_s&0xff);
;;;455        p_buf[2] = TUYA_BLE_PROTOCOL_VERSION_HIGN;
;;;456        p_buf[3] = TUYA_BLE_PROTOCOL_VERSION_LOW;
;;;457        if(TUYA_BLE_ADVANCED_ENCRYPTION_DEVICE==1)
;;;458        {
;;;459            p_buf[4] |= 0x02;
;;;460        }
;;;461    
;;;462        p_buf[5] = tuya_ble_current_para.sys_settings.bound_flag;
;;;463        memcpy(&p_buf[6],tuya_ble_pair_rand,6);
;;;464        p_buf[12] = (version_temp_h>>8)&0xff;
;;;465        p_buf[13] = (version_temp_h&0xff);
;;;466        
;;;467        tuya_ble_register_key_generate(&p_buf[14],&tuya_ble_current_para);
;;;468    
;;;469        p_buf[46] = (tuya_ble_firmware_version>>16)&0xff;
;;;470        p_buf[47] = (tuya_ble_firmware_version>>8)&0xff;
;;;471        p_buf[48] = (tuya_ble_firmware_version&0xff);
;;;472        p_buf[49] = (tuya_ble_hardware_version>>16)&0xff;
;;;473        p_buf[50] = (tuya_ble_hardware_version>>8)&0xff;
;;;474        p_buf[51] = (tuya_ble_hardware_version&0xff);
;;;475    
;;;476        p_buf[52] = TUYA_BLE_DEVICE_COMMUNICATION_ABILITY>>8;
;;;477        p_buf[53] = TUYA_BLE_DEVICE_COMMUNICATION_ABILITY; //communication ability
;;;478    
;;;479        p_buf[54] = 0x00;
;;;480    
;;;481        memcpy(&p_buf[55],tuya_ble_current_para.sys_settings.device_virtual_id,DEVICE_VIRTUAL_ID_LEN);
;;;482    
;;;483        p_buf[77] = (tuya_ble_mcu_firmware_version>>16)&0xff;
;;;484        p_buf[78] = (tuya_ble_mcu_firmware_version>>8)&0xff;
;;;485        p_buf[79] = (tuya_ble_mcu_firmware_version&0xff);
;;;486        p_buf[80] = (tuya_ble_mcu_hardware_version>>16)&0xff;
;;;487        p_buf[81] = (tuya_ble_mcu_hardware_version>>8)&0xff;
;;;488        p_buf[82] = (tuya_ble_mcu_hardware_version&0xff);
;;;489        
;;;490        p_buf[83] = TUYA_BLE_WIFI_DEVICE_REGISTER_MODE;
;;;491        
;;;492        payload_len = 84;
;;;493    
;;;494        encry_mode = recv_data[0];
;;;495    
;;;496        if(tuya_ble_commData_send(FRM_QRY_DEV_INFO_RESP,ack_sn,p_buf,payload_len,encry_mode)==2)
;;;497        {
;;;498            tuya_ble_pair_rand_clear();
;;;499        }
;;;500    }
;;;501    
;;;502    #else
;;;503    
;;;504    static void tuya_ble_handle_dev_info_req(uint8_t*recv_data,uint16_t recv_len)
;;;505    {
;;;506        uint8_t p_buf[90];
;;;507        uint8_t payload_len = 0;
;;;508        uint32_t ack_sn = 0;
;;;509        uint8_t encry_mode = 0;
;;;510        uint32_t version_temp_s,version_temp_h;
;;;511    
;;;512        ack_sn  = recv_data[1]<<24;
;;;513        ack_sn += recv_data[2]<<16;
;;;514        ack_sn += recv_data[3]<<8;
;;;515        ack_sn += recv_data[4];
;;;516    
;;;517        TUYA_BLE_LOG_DEBUG("get device infor-%d",tuya_ble_current_para.sys_settings.bound_flag);
;;;518    
;;;519        tuya_ble_rand_generator(tuya_ble_pair_rand,6);
;;;520        tuya_ble_pair_rand_valid = 1;
;;;521    
;;;522        if(TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;523        {
;;;524            version_temp_s = tuya_ble_firmware_version;
;;;525            version_temp_h = tuya_ble_hardware_version;
;;;526            p_buf[4] = 0x00;
;;;527        }
;;;528        else
;;;529        {
;;;530            version_temp_s = tuya_ble_firmware_version>>8;
;;;531            version_temp_h = tuya_ble_hardware_version>>8;
;;;532            p_buf[4] = 0x05;
;;;533        }
;;;534        p_buf[0] = (version_temp_s>>8)&0xff;
;;;535        p_buf[1] = (version_temp_s&0xff);
;;;536        p_buf[2] = TUYA_BLE_PROTOCOL_VERSION_HIGN;
;;;537        p_buf[3] = TUYA_BLE_PROTOCOL_VERSION_LOW;
;;;538        if(TUYA_BLE_ADVANCED_ENCRYPTION_DEVICE==1)
;;;539        {
;;;540            p_buf[4] |= 0x02;
;;;541        }
;;;542    
;;;543        p_buf[5] = tuya_ble_current_para.sys_settings.bound_flag;
;;;544        memcpy(&p_buf[6],tuya_ble_pair_rand,6);
;;;545        p_buf[12] = (version_temp_h>>8)&0xff;
;;;546        p_buf[13] = (version_temp_h&0xff);
;;;547        memcpy(&p_buf[14],tuya_ble_current_para.auth_settings.auth_key,AUTH_KEY_LEN);
;;;548    
;;;549        p_buf[46] = (tuya_ble_firmware_version>>16)&0xff;
;;;550        p_buf[47] = (tuya_ble_firmware_version>>8)&0xff;
;;;551        p_buf[48] = (tuya_ble_firmware_version&0xff);
;;;552        p_buf[49] = (tuya_ble_hardware_version>>16)&0xff;
;;;553        p_buf[50] = (tuya_ble_hardware_version>>8)&0xff;
;;;554        p_buf[51] = (tuya_ble_hardware_version&0xff);
;;;555    
;;;556        p_buf[52] = TUYA_BLE_DEVICE_COMMUNICATION_ABILITY>>8;
;;;557        p_buf[53] = TUYA_BLE_DEVICE_COMMUNICATION_ABILITY; //communication ability
;;;558    
;;;559        p_buf[54] = 0x00;
;;;560    
;;;561        memcpy(&p_buf[55],tuya_ble_current_para.sys_settings.device_virtual_id,DEVICE_VIRTUAL_ID_LEN);
;;;562    
;;;563        p_buf[77] = (tuya_ble_mcu_firmware_version>>16)&0xff;
;;;564        p_buf[78] = (tuya_ble_mcu_firmware_version>>8)&0xff;
;;;565        p_buf[79] = (tuya_ble_mcu_firmware_version&0xff);
;;;566        p_buf[80] = (tuya_ble_mcu_hardware_version>>16)&0xff;
;;;567        p_buf[81] = (tuya_ble_mcu_hardware_version>>8)&0xff;
;;;568        p_buf[82] = (tuya_ble_mcu_hardware_version&0xff);
;;;569    
;;;570        payload_len = 83;
;;;571    
;;;572        encry_mode = recv_data[0];
;;;573    
;;;574        if(tuya_ble_commData_send(FRM_QRY_DEV_INFO_RESP,ack_sn,p_buf,payload_len,encry_mode)==2)
;;;575        {
;;;576            tuya_ble_pair_rand_clear();
;;;577        }
;;;578    }
;;;579    
;;;580    #endif
;;;581    
;;;582    extern void tuya_ble_connect_monitor_timer_stop(void);
;;;583    static void tuya_ble_handle_pair_req(uint8_t*recv_data,uint16_t recv_len)
;;;584    {
;;;585        uint8_t p_buf[1];
;;;586        uint8_t encry_mode = 0;
;;;587        uint32_t ack_sn = 0;
;;;588        tuya_ble_cb_evt_param_t event;
;;;589    
;;;590        ack_sn  = recv_data[1]<<24;
;;;591        ack_sn += recv_data[2]<<16;
;;;592        ack_sn += recv_data[3]<<8;
;;;593        ack_sn += recv_data[4];
;;;594    
;;;595        if(0 == memcmp(&recv_data[13],tuya_ble_current_para.auth_settings.device_id,DEVICE_ID_LEN))
;;;596        {
;;;597            tuya_ble_connect_monitor_timer_stop();
;;;598            
;;;599            if(1==tuya_ble_get_adv_connect_request_bit_status())
;;;600            {
;;;601                TUYA_BLE_LOG_INFO("ble adv data update,because the last broadcast data connection request flag was set!");
;;;602                tuya_ble_adv_change();
;;;603            }
;;;604    
;;;605            if(tuya_ble_current_para.sys_settings.bound_flag==1)
;;;606            {
;;;607                TUYA_BLE_LOG_INFO("PAIR_REQ already bound!");
;;;608                p_buf[0] = 2;
;;;609            }
;;;610            else
;;;611            {
;;;612    #if (TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;613                memcpy(tuya_ble_current_para.sys_settings.login_key,recv_data+29,LOGIN_KEY_LEN);
;;;614                memcpy(tuya_ble_current_para.sys_settings.device_virtual_id,recv_data+29+LOGIN_KEY_LEN,DEVICE_VIRTUAL_ID_LEN);
;;;615                tuya_ble_current_para.sys_settings.bound_flag = 1;
;;;616    
;;;617                tuya_ble_storage_save_sys_settings();
;;;618    
;;;619                tuya_ble_adv_change();
;;;620                TUYA_BLE_LOG_INFO("PAIR_REQ ok-%d",tuya_ble_current_para.sys_settings.bound_flag);
;;;621    
;;;622                event.evt = TUYA_BLE_CB_EVT_UPDATE_LOGIN_KEY_VID;
;;;623                event.device_login_key_vid_data.login_key_len = LOGIN_KEY_LEN;
;;;624                event.device_login_key_vid_data.vid_len = DEVICE_VIRTUAL_ID_LEN;
;;;625                memcpy( event.device_login_key_vid_data.login_key,tuya_ble_current_para.sys_settings.login_key,LOGIN_KEY_LEN);
;;;626                memcpy( event.device_login_key_vid_data.vid,tuya_ble_current_para.sys_settings.device_virtual_id,DEVICE_VIRTUAL_ID_LEN);
;;;627                if(tuya_ble_cb_event_send(&event)!=0)
;;;628                {
;;;629                    TUYA_BLE_LOG_ERROR("tuya ble send cb event failed.");
;;;630                }
;;;631                else
;;;632                {
;;;633                    TUYA_BLE_LOG_DEBUG("tuya ble send cb event succeed.");
;;;634                }
;;;635    
;;;636    
;;;637    #else
;;;638                tuya_ble_connect_status_set(UNBONDING_CONN);
;;;639    #endif
;;;640                p_buf[0] = 0x00;
;;;641            }
;;;642    
;;;643            if(tuya_ble_current_para.sys_settings.bound_flag==1)
;;;644            {
;;;645                tuya_ble_connect_status_set(BONDING_CONN);
;;;646            }
;;;647            event.evt = TUYA_BLE_CB_EVT_CONNECTE_STATUS;
;;;648            event.connect_status = tuya_ble_connect_status_get();
;;;649            if(tuya_ble_cb_event_send(&event)!=0)
;;;650            {
;;;651                TUYA_BLE_LOG_ERROR("tuya ble send cb event failed.");
;;;652            }
;;;653            else
;;;654            {
;;;655                TUYA_BLE_LOG_INFO("tuya ble send cb event succeed.");
;;;656            }
;;;657    
;;;658    
;;;659        }
;;;660        else
;;;661        {
;;;662            TUYA_BLE_LOG_ERROR("PAIR_REQ device id not match!");  //ID not match ,and disconnected.
;;;663            p_buf[0] = 0x01;
;;;664    
;;;665        }
;;;666    
;;;667    
;;;668        if(p_buf[0]==0)
;;;669        {
;;;670    #if (TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;671            encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;672    #else
;;;673            encry_mode = recv_data[0];
;;;674    #endif
;;;675        }
;;;676        else if(p_buf[0]==1)
;;;677        {
;;;678            encry_mode = recv_data[0];
;;;679        }
;;;680        else if(p_buf[0]==2)
;;;681        {
;;;682            encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;683        }
;;;684        else
;;;685        {
;;;686    
;;;687        }
;;;688    
;;;689        tuya_ble_commData_send(PAIR_RESP,ack_sn,p_buf,1,encry_mode);
;;;690    
;;;691        if(encry_mode == ENCRYPTION_MODE_SESSION_KEY)
;;;692        {
;;;693            tuya_ble_commData_send(FRM_GET_UNIX_TIME_CHAR_MS_REQ,0,NULL,0,encry_mode);
;;;694            TUYA_BLE_LOG_INFO("send FRM_GET_UNIX_TIME_CHAR_MS_REQ cmd to app.\n");
;;;695        }
;;;696    
;;;697        if(p_buf[0]==1)
;;;698        {
;;;699            tuya_ble_gap_disconnect();
;;;700        }
;;;701    
;;;702    }
;;;703    
;;;704    #endif
;;;705    
;;;706    #if (TUYA_BLE_PROTOCOL_VERSION_HIGN==2)
;;;707    
;;;708    static void tuya_ble_handle_dev_info_req(uint8_t*recv_data,uint16_t recv_len)
;;;709    {
;;;710        uint8_t p_buf[70];
;;;711        uint8_t payload_len = 0;
;;;712        uint32_t ack_sn = 0;
;;;713        uint8_t encry_mode = 0;
;;;714    
;;;715        ack_sn  = recv_data[1]<<24;
;;;716        ack_sn += recv_data[2]<<16;
;;;717        ack_sn += recv_data[3]<<8;
;;;718        ack_sn += recv_data[4];
;;;719    
;;;720        TUYA_BLE_LOG_INFO("get device infor-%d",tuya_ble_current_para.sys_settings.bound_flag);
;;;721    
;;;722        tuya_ble_rand_generator(tuya_ble_pair_rand,6);
;;;723        tuya_ble_pair_rand_valid = 1;
;;;724    
;;;725    
;;;726        p_buf[0] = (tuya_ble_firmware_version>>8)&0xff;
;;;727        p_buf[1] = (tuya_ble_firmware_version&0xff);
;;;728        p_buf[2] = TUYA_BLE_PROTOCOL_VERSION_HIGN;
;;;729        p_buf[3] = TUYA_BLE_PROTOCOL_VERSION_LOW;
;;;730        if(TUYA_BLE_ADVANCED_ENCRYPTION_DEVICE==1)
;;;731        {
;;;732            p_buf[4] = 0x02;
;;;733        }
;;;734        else
;;;735        {
;;;736            p_buf[4] = 0x00;
;;;737        }
;;;738        p_buf[5] = tuya_ble_current_para.sys_settings.bound_flag;
;;;739        memcpy(&p_buf[6],tuya_ble_pair_rand,6);
;;;740        p_buf[12] = (tuya_ble_hardware_version>>8)&0xff;
;;;741        p_buf[13] = (tuya_ble_hardware_version&0xff);
;;;742        memcpy(&p_buf[14],tuya_ble_current_para.auth_settings.auth_key,AUTH_KEY_LEN);
;;;743    
;;;744        payload_len = 46;
;;;745    
;;;746        encry_mode = recv_data[0];
;;;747    
;;;748        if(tuya_ble_commData_send(FRM_QRY_DEV_INFO_RESP,ack_sn,p_buf,payload_len,encry_mode)==2)
;;;749        {
;;;750            tuya_ble_pair_rand_clear();
;;;751        }
;;;752        
;;;753    }
;;;754    
;;;755    extern void tuya_ble_connect_monitor_timer_stop(void);
;;;756    static void tuya_ble_handle_pair_req(uint8_t*recv_data,uint16_t recv_len)
;;;757    {
;;;758        uint8_t p_buf[1];
;;;759        uint8_t encry_mode = 0;
;;;760        uint32_t ack_sn = 0;
;;;761        tuya_ble_cb_evt_param_t event;
;;;762    
;;;763        ack_sn  = recv_data[1]<<24;
;;;764        ack_sn += recv_data[2]<<16;
;;;765        ack_sn += recv_data[3]<<8;
;;;766        ack_sn += recv_data[4];
;;;767    
;;;768        if(0 == memcmp(&recv_data[13],tuya_ble_current_para.auth_settings.device_id,DEVICE_ID_LEN))
;;;769        {
;;;770            tuya_ble_connect_monitor_timer_stop();
;;;771            
;;;772            if(tuya_ble_current_para.sys_settings.bound_flag==1)
;;;773            {
;;;774                TUYA_BLE_LOG_ERROR("PAIR_REQ already bound!");
;;;775                p_buf[0] = 2;
;;;776            }
;;;777            else
;;;778            {
;;;779    
;;;780    #if (TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;781    
;;;782                memcpy(tuya_ble_current_para.sys_settings.login_key,recv_data+29,LOGIN_KEY_LEN);
;;;783                tuya_ble_current_para.sys_settings.bound_flag = 1;
;;;784                tuya_ble_storage_save_sys_settings();
;;;785                tuya_ble_adv_change();
;;;786                TUYA_BLE_LOG_INFO("PAIR_REQ ok-%d",tuya_ble_current_para.sys_settings.bound_flag);
;;;787                
;;;788                event.evt = TUYA_BLE_CB_EVT_UPDATE_LOGIN_KEY_VID;
;;;789                event.device_login_key_vid_data.login_key_len = LOGIN_KEY_LEN;
;;;790                event.device_login_key_vid_data.vid_len = 0;
;;;791                memcpy( event.device_login_key_vid_data.login_key,tuya_ble_current_para.sys_settings.login_key,LOGIN_KEY_LEN);
;;;792    
;;;793                if(tuya_ble_cb_event_send(&event)!=0)
;;;794                {
;;;795                    TUYA_BLE_LOG_ERROR("tuya ble send cb event failed.");
;;;796                }
;;;797                else
;;;798                {
;;;799                    TUYA_BLE_LOG_DEBUG("tuya ble send cb event succeed.");
;;;800                }
;;;801                
;;;802    #else
;;;803                tuya_ble_connect_status_set(UNBONDING_CONN);
;;;804    #endif
;;;805                p_buf[0] = 0x00;
;;;806    
;;;807            }
;;;808    
;;;809            if(tuya_ble_current_para.sys_settings.bound_flag==1)
;;;810            {
;;;811                tuya_ble_connect_status_set(BONDING_CONN);
;;;812            }
;;;813    
;;;814            event.evt = TUYA_BLE_CB_EVT_CONNECTE_STATUS;
;;;815            event.connect_status = tuya_ble_connect_status_get();
;;;816            if(tuya_ble_cb_event_send(&event)!=0)
;;;817            {
;;;818                TUYA_BLE_LOG_ERROR("tuya ble send cb event failed.");
;;;819            }
;;;820            else
;;;821            {
;;;822                TUYA_BLE_LOG_INFO("tuya ble send cb event succeed.");
;;;823            }
;;;824    
;;;825    
;;;826        }
;;;827        else
;;;828        {
;;;829            TUYA_BLE_LOG_ERROR("PAIR_REQ device id not match!");  //ID not match ,and disconnected.
;;;830            p_buf[0] = 0x01;
;;;831    
;;;832        }
;;;833    
;;;834    
;;;835        if(p_buf[0]==0)
;;;836        {
;;;837    #if (TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;838            encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;839    #else
;;;840            encry_mode = recv_data[0];
;;;841    #endif
;;;842        }
;;;843        else if(p_buf[0]==1)
;;;844        {
;;;845            encry_mode = recv_data[0];
;;;846        }
;;;847        else if(p_buf[0]==2)
;;;848        {
;;;849            encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;850        }
;;;851        else
;;;852        {
;;;853    
;;;854        }
;;;855    
;;;856        tuya_ble_commData_send(PAIR_RESP,ack_sn,p_buf,1,encry_mode);
;;;857    
;;;858        if(encry_mode == ENCRYPTION_MODE_SESSION_KEY)
;;;859        {
;;;860            tuya_ble_commData_send(FRM_GET_UNIX_TIME_CHAR_MS_REQ,0,NULL,0,encry_mode);
;;;861            TUYA_BLE_LOG_INFO("send FRM_GET_UNIX_TIME_CHAR_MS_REQ cmd to app.");
;;;862        }
;;;863    
;;;864        if(p_buf[0]==1)
;;;865        {
;;;866            tuya_ble_gap_disconnect();
;;;867        }
;;;868    
;;;869    }
;;;870    
;;;871    #endif
;;;872    
;;;873    static void tuya_ble_handle_net_config_info_req(uint8_t*recv_data,uint16_t recv_len)
;;;874    {
;;;875        uint8_t p_buf[1];
;;;876        uint8_t encry_mode = 0;
;;;877        uint32_t ack_sn = 0;
;;;878        tuya_ble_cb_evt_param_t event;
;;;879        uint16_t data_len;
;;;880    
;;;881    
;;;882        ack_sn  = recv_data[1]<<24;
;;;883        ack_sn += recv_data[2]<<16;
;;;884        ack_sn += recv_data[3]<<8;
;;;885        ack_sn += recv_data[4];
;;;886        data_len = (recv_data[11]<<8) + recv_data[12];
;;;887        encry_mode = recv_data[0];
;;;888    
;;;889        event.evt = TUYA_BLE_CB_EVT_NETWORK_INFO;
;;;890        uint8_t *ble_cb_evt_buffer=(uint8_t*)tuya_ble_malloc(data_len);
;;;891        if(ble_cb_evt_buffer==NULL)
;;;892        {
;;;893            p_buf[0]=1;
;;;894            TUYA_BLE_LOG_ERROR("ble_cb_evt_buffer malloc failed.");
;;;895            tuya_ble_commData_send(FRM_NET_CONFIG_INFO_RESP,ack_sn,p_buf,1,encry_mode);
;;;896            return;
;;;897        }
;;;898        else
;;;899        {
;;;900            memset(ble_cb_evt_buffer,0,data_len);
;;;901            memcpy(ble_cb_evt_buffer,&recv_data[13],data_len);
;;;902        }
;;;903        event.network_data.data_len = data_len;
;;;904        event.network_data.p_data = ble_cb_evt_buffer;
;;;905    
;;;906        if(tuya_ble_cb_event_send(&event)!=0)
;;;907        {
;;;908            tuya_ble_free(ble_cb_evt_buffer);
;;;909            TUYA_BLE_LOG_ERROR("tuya ble send cb event failed.");
;;;910            p_buf[0]=1;
;;;911            tuya_ble_commData_send(FRM_NET_CONFIG_INFO_RESP,ack_sn,p_buf,1,encry_mode);
;;;912            return;
;;;913        }
;;;914        else
;;;915        {
;;;916            p_buf[0]=0;
;;;917        }
;;;918    
;;;919        tuya_ble_commData_send(FRM_NET_CONFIG_INFO_RESP,ack_sn,p_buf,1,encry_mode);
;;;920    
;;;921    
;;;922    }
;;;923    
;;;924    
;;;925    static void tuya_ble_handle_ble_passthrough_data_req(uint8_t*recv_data,uint16_t recv_len)
;;;926    {
;;;927        tuya_ble_cb_evt_param_t event;
;;;928        uint16_t data_len;
;;;929    
;;;930        data_len = (recv_data[11]<<8) + recv_data[12];
;;;931    
;;;932        event.evt = TUYA_BLE_CB_EVT_DATA_PASSTHROUGH;
;;;933    
;;;934        uint8_t *ble_cb_evt_buffer=(uint8_t*)tuya_ble_malloc(data_len);
;;;935        if(ble_cb_evt_buffer==NULL)
;;;936        {
;;;937            TUYA_BLE_LOG_ERROR("ble_cb_evt_buffer malloc failed.");
;;;938            return;
;;;939        }
;;;940        else
;;;941        {
;;;942            memcpy(ble_cb_evt_buffer,&recv_data[13],data_len);
;;;943        }
;;;944        event.ble_passthrough_data.data_len = data_len;
;;;945        event.ble_passthrough_data.p_data = ble_cb_evt_buffer;
;;;946    
;;;947        if(tuya_ble_cb_event_send(&event)!=0)
;;;948        {
;;;949            tuya_ble_free(ble_cb_evt_buffer);
;;;950            TUYA_BLE_LOG_ERROR("tuya ble send cb event failed.");
;;;951        }
;;;952        else
;;;953        {
;;;954    
;;;955        }
;;;956    
;;;957    }
;;;958    
;;;959    #include "tuya_ble_app_production_test.h"
;;;960    static void tuya_ble_handle_ble_factory_test_req(uint8_t*recv_data,uint16_t recv_len)
;;;961    {
;;;962        uint16_t data_len;
;;;963        uint32_t ack_sn;
;;;964        uint8_t sum;
;;;965        uint8_t encry_mode;
;;;966    
;;;967        data_len = (recv_data[11]<<8) + recv_data[12];
;;;968    
;;;969        if(data_len<7)
;;;970        {
;;;971            return;
;;;972        }
;;;973    
;;;974        ack_sn  = recv_data[1]<<24;
;;;975        ack_sn += recv_data[2]<<16;
;;;976        ack_sn += recv_data[3]<<8;
;;;977        ack_sn += recv_data[4];
;;;978    
;;;979        encry_mode = recv_data[0];
;;;980    
;;;981        if((recv_data[13]==0x66)&&(recv_data[14]==0xAA))
;;;982        {
;;;983            sum = tuya_ble_check_sum(&recv_data[13],data_len-1);
;;;984            if(sum==recv_data[13+data_len-1])
;;;985            {
;;;986                tuya_ble_app_production_test_process(1,&recv_data[13],data_len);
;;;987            }
;;;988        }
;;;989    
;;;990    }
;;;991    
;;;992    
;;;993    #include "tuya_ble_app_uart_common_handler.h"
;;;994    static void tuya_ble_handle_ota_req(uint16_t cmd,uint8_t*recv_data,uint32_t recv_len)
;;;995    {
;;;996        tuya_ble_cb_evt_param_t event;
;;;997        uint16_t data_len;
;;;998        tuya_ble_ota_data_type_t cmd_type;
;;;999    
;;;1000       data_len = (recv_data[11]<<8) + recv_data[12];
;;;1001   
;;;1002       if(data_len==0)
;;;1003       {
;;;1004           return;
;;;1005       }
;;;1006   
;;;1007       if(recv_data[13]==1)  //extern mcu ota
;;;1008       {
;;;1009           tuya_ble_uart_common_mcu_ota_data_from_ble_handler(cmd,&recv_data[14],data_len-1);
;;;1010       }
;;;1011       else if(recv_data[13]==0)
;;;1012       {
;;;1013           event.evt = TUYA_BLE_CB_EVT_OTA_DATA;
;;;1014   
;;;1015           uint8_t *ble_cb_evt_buffer=(uint8_t*)tuya_ble_malloc(data_len);
;;;1016           if(ble_cb_evt_buffer==NULL)
;;;1017           {
;;;1018               TUYA_BLE_LOG_ERROR("ble_cb_evt_buffer malloc failed.");
;;;1019               return;
;;;1020           }
;;;1021           else
;;;1022           {
;;;1023               memcpy(ble_cb_evt_buffer,&recv_data[13],data_len);
;;;1024           }
;;;1025   
;;;1026           switch (cmd)
;;;1027           {
;;;1028           case FRM_OTA_START_REQ:
;;;1029               cmd_type = TUYA_BLE_OTA_REQ;
;;;1030               break;
;;;1031           case FRM_OTA_FILE_INFOR_REQ:
;;;1032               cmd_type = TUYA_BLE_OTA_FILE_INFO;
;;;1033               break;
;;;1034           case FRM_OTA_FILE_OFFSET_REQ:
;;;1035               cmd_type = TUYA_BLE_OTA_FILE_OFFSET_REQ;
;;;1036               break;
;;;1037           case FRM_OTA_DATA_REQ:
;;;1038               cmd_type = TUYA_BLE_OTA_DATA;
;;;1039               break;
;;;1040           case FRM_OTA_END_REQ:
;;;1041               cmd_type = TUYA_BLE_OTA_END;
;;;1042               break;
;;;1043           default:
;;;1044               cmd_type = TUYA_BLE_OTA_UNKONWN;
;;;1045               break;
;;;1046           }
;;;1047   
;;;1048           event.ota_data.type = cmd_type;
;;;1049           event.ota_data.data_len = data_len;
;;;1050           event.ota_data.p_data = ble_cb_evt_buffer;
;;;1051   
;;;1052           if(tuya_ble_cb_event_send(&event)!=0)
;;;1053           {
;;;1054               tuya_ble_free(ble_cb_evt_buffer);
;;;1055               TUYA_BLE_LOG_ERROR("tuya_ble_handle_ota_req-tuya ble send cb event failed.");
;;;1056           }
;;;1057           else
;;;1058           {
;;;1059   
;;;1060           }
;;;1061       }
;;;1062       else
;;;1063       {
;;;1064           
;;;1065       }
;;;1066   }
;;;1067   
;;;1068   static char current_timems_string[14] = "000000000000";
;;;1069   
;;;1070   static void tuya_ble_handle_unix_time_char_ms_resp(uint8_t*recv_data,uint16_t recv_len)
;;;1071   {
;;;1072       int16_t zone_temp = 0;
;;;1073       uint64_t time_stamp_ms;
;;;1074       uint32_t time_stamp;
;;;1075       tuya_ble_cb_evt_param_t event;
;;;1076       
;;;1077       memset(&event,0,sizeof(tuya_ble_cb_evt_param_t));
;;;1078   
;;;1079       if(recv_len<30)
;;;1080       {
;;;1081           TUYA_BLE_LOG_ERROR("received unix time char cmd data length error!");
;;;1082           return;
;;;1083       }
;;;1084   
;;;1085       if(!buffer_value_is_all_x(&recv_data[13],13,0))
;;;1086       {
;;;1087           memcpy(current_timems_string,&recv_data[13],13);
;;;1088           zone_temp  = (int16_t)((recv_data[26]<<8)|recv_data[27]);
;;;1089           time_stamp_ms = atoll(current_timems_string);
;;;1090           TUYA_BLE_LOG_INFO("received unix time_zone = %d\n",zone_temp);
;;;1091           time_stamp = time_stamp_ms/1000;
;;;1092           if(time_stamp_ms%1000>=500)
;;;1093           {
;;;1094               time_stamp += 1;
;;;1095           }
;;;1096   
;;;1097           tuya_ble_rtc_set_timestamp(time_stamp,zone_temp);
;;;1098   
;;;1099           event.evt = TUYA_BLE_CB_EVT_TIME_STAMP;
;;;1100   
;;;1101           memcpy(event.timestamp_data.timestamp_string,current_timems_string,13);
;;;1102           event.timestamp_data.time_zone = zone_temp;
;;;1103           if(tuya_ble_cb_event_send(&event)!=0)
;;;1104           {
;;;1105               TUYA_BLE_LOG_ERROR("tuya_ble_handle_unix_time_char_ms_resp-tuya ble send cb event failed.");
;;;1106           }
;;;1107   
;;;1108       }
;;;1109   
;;;1110   }
;;;1111   
;;;1112   
;;;1113   static void tuya_ble_handle_unix_time_date_resp(uint8_t*recv_data,uint16_t recv_len)
;;;1114   {
;;;1115       int16_t zone_temp = 0;
;;;1116       uint32_t time_stamp;
;;;1117       tuya_ble_cb_evt_param_t event;
;;;1118       tuya_ble_time_struct_data_t time_temp;
;;;1119   
;;;1120       if(recv_len<24)
;;;1121       {
;;;1122           TUYA_BLE_LOG_ERROR("received unix time date cmd data length error!");
;;;1123           return;
;;;1124       }
;;;1125   
;;;1126       memset(&event,0,sizeof(tuya_ble_cb_evt_param_t));
;;;1127       
;;;1128       if(!buffer_value_is_all_x(&recv_data[13],7,0))
;;;1129       {
;;;1130           time_temp.nYear = 2000+recv_data[13];
;;;1131           time_temp.nMonth = recv_data[14];
;;;1132           time_temp.nDay = recv_data[15];
;;;1133           time_temp.nHour = recv_data[16];
;;;1134           time_temp.nMin = recv_data[17];
;;;1135           time_temp.nSec = recv_data[18];
;;;1136           time_temp.DayIndex = recv_data[19];
;;;1137   
;;;1138           time_stamp = tuya_ble_mytime_2_utc_sec(&time_temp,false);
;;;1139   
;;;1140           zone_temp  = (int16_t)((recv_data[20]<<8)|recv_data[21]);
;;;1141   
;;;1142           TUYA_BLE_LOG_INFO("received unix time_zone = %d",zone_temp);
;;;1143   
;;;1144           tuya_ble_rtc_set_timestamp(time_stamp,zone_temp);
;;;1145   
;;;1146           event.evt = TUYA_BLE_CB_EVT_TIME_NORMAL;
;;;1147           event.time_normal_data.nYear = recv_data[13];
;;;1148           event.time_normal_data.nMonth = recv_data[14];
;;;1149           event.time_normal_data.nDay = recv_data[15];
;;;1150           event.time_normal_data.nHour = recv_data[16];
;;;1151           event.time_normal_data.nMin = recv_data[17];
;;;1152           event.time_normal_data.nSec = recv_data[18];
;;;1153           event.time_normal_data.DayIndex = recv_data[19];
;;;1154           event.time_normal_data.time_zone = zone_temp;
;;;1155   
;;;1156           if(tuya_ble_cb_event_send(&event)!=0)
;;;1157           {
;;;1158               TUYA_BLE_LOG_ERROR("tuya_ble_handle_unix_time_date_resp-tuya ble send cb event failed.");
;;;1159           }
;;;1160   
;;;1161       }
;;;1162   
;;;1163   }
;;;1164   
;;;1165   static void tuya_ble_handle_dp_write_req(uint8_t*recv_data,uint16_t recv_len)
;;;1166   {
;;;1167       mtp_ret ret;
;;;1168       klv_node_s *list = NULL;
;;;1169       uint8_t p_buf[1];
;;;1170       uint16_t data_len = 0;
;;;1171       uint32_t ack_sn = 0;
;;;1172       tuya_ble_cb_evt_param_t event;
;;;1173   
;;;1174       ack_sn  = recv_data[1]<<24;
;;;1175       ack_sn += recv_data[2]<<16;
;;;1176       ack_sn += recv_data[3]<<8;
;;;1177       ack_sn += recv_data[4];
;;;1178   
;;;1179       data_len = (recv_data[11]<<8)|recv_data[12];
;;;1180   
;;;1181       if((data_len==0)||(data_len>TUYA_BLE_RECEIVE_MAX_DP_DATA_LEN))
;;;1182       {
;;;1183           TUYA_BLE_LOG_ERROR("cmd dp write receive data len == %d",data_len);
;;;1184           p_buf[0] = 0x01;
;;;1185           tuya_ble_commData_send(FRM_CMD_RESP,ack_sn,p_buf,1,ENCRYPTION_MODE_SESSION_KEY);
;;;1186           return;
;;;1187       }
;;;1188       TUYA_BLE_LOG_HEXDUMP_DEBUG("cmd_dp_write data : ",recv_data+13,data_len);
;;;1189       ret = data_2_klvlist(&recv_data[13],data_len,&list,0);
;;;1190       if(MTP_OK != ret)
;;;1191       {
;;;1192           TUYA_BLE_LOG_ERROR("cmd rx fail-%d",ret);
;;;1193           p_buf[0] = 0x01;
;;;1194           tuya_ble_commData_send(FRM_CMD_RESP,ack_sn,p_buf,1,ENCRYPTION_MODE_SESSION_KEY);
;;;1195           return;
;;;1196       }
;;;1197   
;;;1198       free_klv_list(list);
;;;1199       p_buf[0] = 0x00;
;;;1200   
;;;1201       tuya_ble_commData_send(FRM_CMD_RESP,ack_sn,p_buf,1,ENCRYPTION_MODE_SESSION_KEY);
;;;1202   
;;;1203       event.evt = TUYA_BLE_CB_EVT_DP_WRITE;
;;;1204   
;;;1205       uint8_t *ble_cb_evt_buffer=(uint8_t*)tuya_ble_malloc(data_len);
;;;1206       if(ble_cb_evt_buffer==NULL)
;;;1207       {
;;;1208           TUYA_BLE_LOG_ERROR("ble_cb_evt_buffer malloc failed.");
;;;1209           return;
;;;1210       }
;;;1211       else
;;;1212       {
;;;1213           memcpy(ble_cb_evt_buffer,&recv_data[13],data_len);
;;;1214       }
;;;1215       event.dp_write_data.p_data = ble_cb_evt_buffer;
;;;1216       event.dp_write_data.data_len = data_len;
;;;1217   
;;;1218       if(tuya_ble_cb_event_send(&event)!=0)
;;;1219       {
;;;1220           tuya_ble_free(ble_cb_evt_buffer);
;;;1221           TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_write_req-tuya ble send cb event failed.");
;;;1222       }
;;;1223       else
;;;1224       {
;;;1225   
;;;1226       }
;;;1227   
;;;1228   }
;;;1229   
;;;1230   static void tuya_ble_handle_dp_query_req(uint8_t*recv_data,uint16_t recv_len)
;;;1231   {
;;;1232       uint8_t p_buf[1];
;;;1233       uint16_t dp_num = 0;
;;;1234       uint32_t ack_sn = 0;
;;;1235       tuya_ble_cb_evt_param_t event;
;;;1236       uint8_t *ble_cb_evt_buffer = NULL;
;;;1237   
;;;1238       ack_sn  = recv_data[1]<<24;
;;;1239       ack_sn += recv_data[2]<<16;
;;;1240       ack_sn += recv_data[3]<<8;
;;;1241       ack_sn += recv_data[4];
;;;1242   
;;;1243       dp_num = (recv_data[11]<<8)|recv_data[12];
;;;1244   
;;;1245       p_buf[0] = 0x00;
;;;1246   
;;;1247       tuya_ble_commData_send(FRM_STATE_QUERY_RESP,ack_sn,p_buf,1,ENCRYPTION_MODE_SESSION_KEY);
;;;1248   
;;;1249       event.evt = TUYA_BLE_CB_EVT_DP_QUERY;
;;;1250   
;;;1251       if(dp_num>0)
;;;1252       {
;;;1253           ble_cb_evt_buffer=(uint8_t*)tuya_ble_malloc(dp_num);
;;;1254           if(ble_cb_evt_buffer==NULL)
;;;1255           {
;;;1256               TUYA_BLE_LOG_ERROR("ble_cb_evt_buffer malloc failed.");
;;;1257               return;
;;;1258           }
;;;1259           else
;;;1260           {
;;;1261               memcpy(ble_cb_evt_buffer,&recv_data[13],dp_num);
;;;1262           }
;;;1263       }
;;;1264       event.dp_query_data.p_data = ble_cb_evt_buffer;
;;;1265       event.dp_query_data.data_len = dp_num;
;;;1266   
;;;1267       if(tuya_ble_cb_event_send(&event)!=0)
;;;1268       {
;;;1269           TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_query_req-tuya ble send cb event failed.");
;;;1270           if(dp_num>0)
;;;1271           {
;;;1272               tuya_ble_free(ble_cb_evt_buffer);
;;;1273           }
;;;1274       }
;;;1275       else
;;;1276       {
;;;1277   
;;;1278       }
;;;1279   }
;;;1280   
;;;1281   
;;;1282   void tuya_ble_device_unbond(void)
;;;1283   {
;;;1284   
;;;1285       tuya_ble_gap_disconnect();
;;;1286       memset(tuya_ble_current_para.sys_settings.login_key,0,LOGIN_KEY_LEN);
;;;1287       tuya_ble_current_para.sys_settings.bound_flag= 0;
;;;1288       tuya_ble_storage_save_sys_settings();
;;;1289       tuya_ble_adv_change();
;;;1290       tuya_ble_connect_status_set(UNBONDING_UNCONN);
;;;1291       TUYA_BLE_LOG_INFO("tuya_ble_device_unbond current bound flag = %d",tuya_ble_current_para.sys_settings.bound_flag);
;;;1292   }
;;;1293   
;;;1294   
;;;1295   
;;;1296   static void tuya_ble_handle_unbond_req(uint8_t*recv_data,uint16_t recv_len)
;;;1297   {
;;;1298       uint8_t p_buf[1];
;;;1299       uint8_t encry_mode = 0;
;;;1300       uint32_t ack_sn = 0;
;;;1301       tuya_ble_cb_evt_param_t event;
;;;1302   
;;;1303       event.evt = TUYA_BLE_CB_EVT_UNBOUND;
;;;1304       event.unbound_data.data = 0;
;;;1305   
;;;1306       if(tuya_ble_cb_event_send(&event)!=0)
;;;1307       {
;;;1308           TUYA_BLE_LOG_ERROR("tuya_ble_handle_unbond_req-tuya ble send cb event (unbound req) failed.");
;;;1309       }
;;;1310       else
;;;1311       {
;;;1312   
;;;1313       }
;;;1314   #if (TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;1315       ack_sn  = recv_data[1]<<24;
;;;1316       ack_sn += recv_data[2]<<16;
;;;1317       ack_sn += recv_data[3]<<8;
;;;1318       ack_sn += recv_data[4];
;;;1319   
;;;1320       encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;1321   
;;;1322       p_buf[0] = 0;
;;;1323   
;;;1324       tuya_ble_commData_send(FRM_UNBONDING_RESP,ack_sn,p_buf,1,encry_mode);
;;;1325       
;;;1326   #if (TUYA_BLE_DEVICE_UNBIND_MODE)    
;;;1327       tuya_ble_device_unbond();
;;;1328   
;;;1329       event.evt = TUYA_BLE_CB_EVT_CONNECTE_STATUS;
;;;1330       event.connect_status = tuya_ble_connect_status_get();
;;;1331   
;;;1332       if(tuya_ble_cb_event_send(&event)!=0)
;;;1333       {
;;;1334           TUYA_BLE_LOG_ERROR("tuya_ble_handle_unbond_req-tuya ble send cb event (connect status update) failed.");
;;;1335       }
;;;1336       else
;;;1337       {
;;;1338   
;;;1339       }
;;;1340   #else
;;;1341       tuya_ble_gap_disconnect();
;;;1342   #endif    
;;;1343       
;;;1344   #endif
;;;1345   }
;;;1346   
;;;1347   
;;;1348   static void tuya_ble_handle_anomaly_unbond_req(uint8_t*recv_data,uint16_t recv_len)
;;;1349   {
;;;1350       uint8_t p_buf[1];
;;;1351       uint8_t encry_mode = 0;
;;;1352       uint32_t ack_sn = 0;
;;;1353       tuya_ble_cb_evt_param_t event;
;;;1354   
;;;1355       event.evt = TUYA_BLE_CB_EVT_ANOMALY_UNBOUND;
;;;1356       event.anomaly_unbound_data.data = 0;
;;;1357   
;;;1358       if(tuya_ble_cb_event_send(&event)!=0)
;;;1359       {
;;;1360           TUYA_BLE_LOG_ERROR("tuya_ble_handle_anomaly_unbond_req-tuya ble send cb event (unbound req) failed.");
;;;1361       }
;;;1362       else
;;;1363       {
;;;1364   
;;;1365       }
;;;1366   
;;;1367   #if (TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;1368   
;;;1369       ack_sn  = recv_data[1]<<24;
;;;1370       ack_sn += recv_data[2]<<16;
;;;1371       ack_sn += recv_data[3]<<8;
;;;1372       ack_sn += recv_data[4];
;;;1373   
;;;1374       encry_mode = ENCRYPTION_MODE_KEY_1;
;;;1375   
;;;1376       p_buf[0] = 0;
;;;1377   
;;;1378       tuya_ble_commData_send(FRM_ANOMALY_UNBONDING_RESP,ack_sn,p_buf,1,encry_mode);
;;;1379       tuya_ble_device_unbond();
;;;1380   
;;;1381       event.evt = TUYA_BLE_CB_EVT_CONNECTE_STATUS;
;;;1382       event.connect_status = tuya_ble_connect_status_get();
;;;1383   
;;;1384       if(tuya_ble_cb_event_send(&event)!=0)
;;;1385       {
;;;1386           TUYA_BLE_LOG_ERROR("tuya_ble_handle_anomaly_unbond_req-tuya ble send cb event (connect status update) failed.");
;;;1387       }
;;;1388       else
;;;1389       {
;;;1390   
;;;1391       }
;;;1392   
;;;1393   #endif
;;;1394   }
;;;1395   
;;;1396   
;;;1397   static void tuya_ble_handle_device_reset_req(uint8_t*recv_data,uint16_t recv_len)
;;;1398   {
;;;1399       uint8_t p_buf[1];
;;;1400       uint8_t encry_mode = 0;
;;;1401       uint32_t ack_sn = 0;
;;;1402       tuya_ble_cb_evt_param_t event;
;;;1403   
;;;1404       event.evt = TUYA_BLE_CB_EVT_DEVICE_RESET;
;;;1405       event.device_reset_data.data = 0;
;;;1406   
;;;1407       if(tuya_ble_cb_event_send(&event)!=0)
;;;1408       {
;;;1409           TUYA_BLE_LOG_ERROR("tuya_ble_handle_device_reset_req-tuya ble send cb event device reset req failed.");
;;;1410       }
;;;1411       else
;;;1412       {
;;;1413   
;;;1414       }
;;;1415   
;;;1416   #if (TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;1417   
;;;1418       ack_sn  = recv_data[1]<<24;
;;;1419       ack_sn += recv_data[2]<<16;
;;;1420       ack_sn += recv_data[3]<<8;
;;;1421       ack_sn += recv_data[4];
;;;1422   
;;;1423       encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;1424   
;;;1425       p_buf[0] = 0;
;;;1426   
;;;1427       tuya_ble_commData_send(FRM_DEVICE_RESET_RESP,ack_sn,p_buf,1,encry_mode);
;;;1428       
;;;1429   #if (TUYA_BLE_DEVICE_UNBIND_MODE)    
;;;1430       memset(tuya_ble_current_para.sys_settings.device_virtual_id,0,DEVICE_VIRTUAL_ID_LEN);
;;;1431       tuya_ble_device_unbond();
;;;1432   
;;;1433       event.evt = TUYA_BLE_CB_EVT_CONNECTE_STATUS;
;;;1434       event.connect_status = tuya_ble_connect_status_get();
;;;1435   
;;;1436       if(tuya_ble_cb_event_send(&event)!=0)
;;;1437       {
;;;1438           TUYA_BLE_LOG_ERROR("tuya_ble_handle_device_reset_req-tuya ble send cb event (connect status update) failed.");
;;;1439       }
;;;1440       else
;;;1441       {
;;;1442   
;;;1443       }
;;;1444   #else
;;;1445       tuya_ble_gap_disconnect();
;;;1446   #endif    
;;;1447       
;;;1448   #endif
;;;1449   }
;;;1450   
;;;1451   static void tuya_ble_handle_dp_data_report_res(uint8_t*recv_data,uint16_t recv_len)
;;;1452   {
;;;1453       tuya_ble_cb_evt_param_t event;
;;;1454   
;;;1455       event.evt = TUYA_BLE_CB_EVT_DP_DATA_REPORT_RESPONSE;
;;;1456       event.dp_response_data.status = recv_data[13];
;;;1457   
;;;1458       if(tuya_ble_cb_event_send(&event)!=0)
;;;1459       {
;;;1460           TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_data_report_res-tuya ble send cb event failed.");
;;;1461       }
;;;1462       else
;;;1463       {
;;;1464   
;;;1465       }
;;;1466   }
;;;1467   
;;;1468   static void tuya_ble_handle_dp_data_with_time_report_res(uint8_t*recv_data,uint16_t recv_len)
;;;1469   {
;;;1470       tuya_ble_cb_evt_param_t event;
;;;1471   
;;;1472       event.evt = TUYA_BLE_CB_EVT_DP_DATA_WTTH_TIME_REPORT_RESPONSE;
;;;1473       event.dp_response_data.status = recv_data[13];
;;;1474   
;;;1475       if(tuya_ble_cb_event_send(&event)!=0)
;;;1476       {
;;;1477           TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_data_report_res-tuya ble send cb event failed.");
;;;1478       }
;;;1479       else
;;;1480       {
;;;1481   
;;;1482       }
;;;1483   }
;;;1484   
;;;1485   static void tuya_ble_handle_dp_data_with_flag_report_res(uint8_t*recv_data,uint16_t recv_len)
;;;1486   {
;;;1487       tuya_ble_cb_evt_param_t event;
;;;1488       uint16_t data_len = recv_data[11]<<8|recv_data[12];
;;;1489   
;;;1490       if(data_len!=4)
;;;1491       {
;;;1492           TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_data_with_flag_report_res- invalid data len received.");
;;;1493           return;
;;;1494       }
;;;1495   
;;;1496       event.evt = TUYA_BLE_CB_EVT_DP_DATA_WITH_FLAG_REPORT_RESPONSE;
;;;1497       event.dp_with_flag_response_data.sn = recv_data[13]<<8|recv_data[14];
;;;1498       event.dp_with_flag_response_data.mode = recv_data[15];
;;;1499       event.dp_with_flag_response_data.status = recv_data[16];
;;;1500   
;;;1501       if(tuya_ble_cb_event_send(&event)!=0)
;;;1502       {
;;;1503           TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_data_with_flag_report_res-tuya ble send cb event failed.");
;;;1504       }
;;;1505       else
;;;1506       {
;;;1507   
;;;1508       }
;;;1509   }
;;;1510   
;;;1511   static void tuya_ble_handle_dp_data_with_flag_and_time_report_res(uint8_t*recv_data,uint16_t recv_len)
;;;1512   {
;;;1513       tuya_ble_cb_evt_param_t event;
;;;1514       uint16_t data_len = recv_data[11]<<8|recv_data[12];
;;;1515   
;;;1516       if(data_len!=4)
;;;1517       {
;;;1518           TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_data_with_flag_and_time_report_res- invalid data len received.");
;;;1519           return;
;;;1520       }
;;;1521   
;;;1522       event.evt = TUYA_BLE_CB_EVT_DP_DATA_WITH_FLAG_AND_TIME_REPORT_RESPONSE;
;;;1523       event.dp_with_flag_and_time_response_data.sn = recv_data[13]<<8|recv_data[14];
;;;1524       event.dp_with_flag_and_time_response_data.mode = recv_data[15];
;;;1525       event.dp_with_flag_and_time_response_data.status = recv_data[16];
;;;1526   
;;;1527       if(tuya_ble_cb_event_send(&event)!=0)
;;;1528       {
;;;1529           TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_data_with_flag_and_time_report_res-tuya ble send cb event failed.");
;;;1530       }
;;;1531       else
;;;1532       {
;;;1533   
;;;1534       }
;;;1535   }
;;;1536   
;;;1537   /**
;;;1538   recv_data[0]为加密方式，1/2/3/4为SN
;;;1539   **/
;;;1540   
;;;1541   void tuya_ble_evt_process(uint16_t cmd,uint8_t*recv_data,uint32_t recv_len)
;;;1542   {
;;;1543       switch(cmd)
;;;1544       {
;;;1545       case FRM_CMD_SEND:
;;;1546           tuya_ble_handle_dp_write_req(recv_data,recv_len);
;;;1547           break;
;;;1548       case FRM_STATE_QUERY:
;;;1549           tuya_ble_handle_dp_query_req(recv_data,recv_len);
;;;1550           break;
;;;1551       case FRM_QRY_DEV_INFO_REQ:
;;;1552           tuya_ble_handle_dev_info_req(recv_data,recv_len);
;;;1553           break;
;;;1554       case PAIR_REQ:
;;;1555           tuya_ble_handle_pair_req(recv_data,recv_len);
;;;1556           break;
;;;1557       case FRM_NET_CONFIG_INFO_REQ:
;;;1558           tuya_ble_handle_net_config_info_req(recv_data,recv_len);
;;;1559           break;
;;;1560       case FRM_DATA_PASSTHROUGH_REQ:
;;;1561           tuya_ble_handle_ble_passthrough_data_req(recv_data,recv_len);
;;;1562           break;
;;;1563       case FRM_OTA_START_REQ:
;;;1564       case FRM_OTA_FILE_INFOR_REQ:
;;;1565       case FRM_OTA_FILE_OFFSET_REQ:
;;;1566       case FRM_OTA_DATA_REQ:
;;;1567       case FRM_OTA_END_REQ:
;;;1568           TUYA_BLE_LOG_INFO("RECEIVED OTA CMD:0x%02x DATA LEN:0x%02x",cmd,recv_len);
;;;1569           tuya_ble_handle_ota_req(cmd,recv_data,recv_len);
;;;1570           break;
;;;1571       case FRM_GET_UNIX_TIME_CHAR_MS_RESP:
;;;1572           tuya_ble_handle_unix_time_char_ms_resp(recv_data,recv_len);
;;;1573           break;
;;;1574       case FRM_GET_UNIX_TIME_CHAR_DATE_RESP:
;;;1575           tuya_ble_handle_unix_time_date_resp(recv_data,recv_len);
;;;1576           break;
;;;1577       case FRM_UNBONDING_REQ:
;;;1578           TUYA_BLE_LOG_INFO("RECEIVED FRM_UNBONDING_REQ");
;;;1579           tuya_ble_handle_unbond_req(recv_data,recv_len);
;;;1580           break;
;;;1581       case FRM_ANOMALY_UNBONDING_REQ:
;;;1582           TUYA_BLE_LOG_INFO("RECEIVED FRM_ANOMALY_UNBONDING_REQ");
;;;1583           tuya_ble_handle_anomaly_unbond_req(recv_data,recv_len);
;;;1584           break;
;;;1585       case FRM_DEVICE_RESET:
;;;1586           TUYA_BLE_LOG_INFO("RECEIVED FRM_DEVICE_RESET_REQ");
;;;1587           tuya_ble_handle_device_reset_req(recv_data,recv_len);
;;;1588           break;
;;;1589       case FRM_STAT_REPORT_RESP:
;;;1590           tuya_ble_handle_dp_data_report_res(recv_data,recv_len);
;;;1591           break;
;;;1592       case FRM_DATA_WITH_FLAG_REPORT_RESP:
;;;1593           tuya_ble_handle_dp_data_with_flag_report_res(recv_data,recv_len);
;;;1594           break;
;;;1595       case FRM_STAT_WITH_TIME_REPORT_RESP:
;;;1596           tuya_ble_handle_dp_data_with_time_report_res(recv_data,recv_len);
;;;1597           break;
;;;1598       case FRM_DATA_WITH_FLAG_AND_TIME_REPORT_RESP:
;;;1599           tuya_ble_handle_dp_data_with_flag_and_time_report_res(recv_data,recv_len);
;;;1600           break;
;;;1601       case FRM_FACTORY_TEST_CMD:
;;;1602           tuya_ble_handle_ble_factory_test_req(recv_data,recv_len);
;;;1603           break;
;;;1604       default:
;;;1605           TUYA_BLE_LOG_WARNING("RECEIVED UNKNOWN BLE EVT CMD-0x%04x",cmd);
;;;1606           break;
;;;1607       }
;;;1608   }
;;;1609   
;;;1610   uint8_t tuya_ble_commData_send(uint16_t cmd,uint32_t ack_sn,uint8_t *data,uint16_t len,uint8_t encryption_mode)
;;;1611   {
        0x0081306a:    e92d4fff    -..O    PUSH     {r0-r11,lr}
        0x0081306e:    b091        ..      SUB      sp,sp,#0x44
        0x00813070:    2000        .       MOVS     r0,#0
        0x00813072:    f8dd8078    ..x.    LDR      r8,[sp,#0x78]
        0x00813076:    e9cd000e    ....    STRD     r0,r0,[sp,#0x38]
        0x0081307a:    461d        .F      MOV      r5,r3
        0x0081307c:    468a        .F      MOV      r10,r1
;;;1612       mtp_ret ret;
;;;1613       uint8_t send_len = 0;
;;;1614       uint8_t p_buf[20];
;;;1615       uint32_t err=0;
;;;1616       int8_t retries_cnt = 0;
;;;1617       uint8_t iv[16];
;;;1618       uint16_t rand_value = 0,i=0;
        0x0081307e:    4604        .F      MOV      r4,r0
;;;1619       uint16_t crc16 = 0;
;;;1620       uint16_t en_len  = 0;
;;;1621       uint32_t out_len = 0;
        0x00813080:    4606        .F      MOV      r6,r0
;;;1622       uint32_t temp_len = 0;
;;;1623   	uint32_t package_number = 0;
;;;1624       uint16_t p_version = 0;
;;;1625       tuya_ble_r_air_send_packet  air_send_packet;
;;;1626       
;;;1627       memset(&air_send_packet,0,sizeof(air_send_packet));
;;;1628   
;;;1629       tuya_ble_connect_status_t currnet_connect_status = tuya_ble_connect_status_get();
        0x00813082:    f001ffcf    ....    BL       tuya_ble_connect_status_get ; 0x815024
;;;1630   
;;;1631       if((currnet_connect_status == BONDING_UNCONN)||(currnet_connect_status== UNBONDING_UNCONN))
        0x00813086:    2802        .(      CMP      r0,#2
        0x00813088:    d016        ..      BEQ      0x8130b8 ; tuya_ble_commData_send + 78
        0x0081308a:    b1a8        ..      CBZ      r0,0x8130b8 ; tuya_ble_commData_send + 78
;;;1632       {
;;;1633           TUYA_BLE_LOG_ERROR("tuya ble commData_send failed,because ble not in connect status.");
;;;1634           return 2;
;;;1635       }
;;;1636   
;;;1637       if((encryption_mode>=ENCRYPTION_MODE_MAX)||(len>(TUYA_BLE_AIR_FRAME_MAX-29)))
        0x0081308c:    f1b80f06    ....    CMP      r8,#6
        0x00813090:    d23a        :.      BCS      0x813108 ; tuya_ble_commData_send + 158
        0x00813092:    f5b57f79    ..y.    CMP      r5,#0x3e4
        0x00813096:    d2fb        ..      BCS      0x813090 ; tuya_ble_commData_send + 38
;;;1638       {
;;;1639           return 1;
;;;1640       }
;;;1641   
;;;1642       //生成随机IV
;;;1643       if(encryption_mode != ENCRYPTION_MODE_NONE)
        0x00813098:    f1b80f00    ....    CMP      r8,#0
        0x0081309c:    d018        ..      BEQ      0x8130d0 ; tuya_ble_commData_send + 102
        0x0081309e:    ae05        ..      ADD      r6,sp,#0x14
;;;1644       {
;;;1645           for(i=0; i<16; i+=2)
;;;1646           {
;;;1647               rand_value = rand();
        0x008130a0:    f7fbfb16    ....    BL       rand ; 0x80e6d0
;;;1648               iv[i+0] = rand_value>>8;
        0x008130a4:    0a01        ..      LSRS     r1,r0,#8
        0x008130a6:    5531        1U      STRB     r1,[r6,r4]
;;;1649               iv[i+1] = rand_value;
        0x008130a8:    1931        1.      ADDS     r1,r6,r4
        0x008130aa:    1ca4        ..      ADDS     r4,r4,#2
        0x008130ac:    b2a4        ..      UXTH     r4,r4
        0x008130ae:    7048        Hp      STRB     r0,[r1,#1]
        0x008130b0:    2c10        .,      CMP      r4,#0x10
        0x008130b2:    d3f5        ..      BCC      0x8130a0 ; tuya_ble_commData_send + 54
;;;1650           }
;;;1651           en_len = 17;
        0x008130b4:    2711        .'      MOVS     r7,#0x11
        0x008130b6:    e010        ..      B        0x8130da ; tuya_ble_commData_send + 112
        0x008130b8:    48ec        .H      LDR      r0,[pc,#944] ; [0x81346c] = 0x81d5e4
        0x008130ba:    f007fd76    ..v.    BL       get_args ; 0x81abaa
        0x008130be:    4602        .F      MOV      r2,r0
        0x008130c0:    49eb        .I      LDR      r1,[pc,#940] ; [0x813470] = 0x88033b8
        0x008130c2:    48ec        .H      LDR      r0,[pc,#944] ; [0x813474] = 0x21103002
        0x008130c4:    f7f4dccb    ....    BL       log_buffer ; 0x7a5e
        0x008130c8:    2002        .       MOVS     r0,#2
        0x008130ca:    b015        ..      ADD      sp,sp,#0x54
        0x008130cc:    e8bd8ff0    ....    POP      {r4-r11,pc}
;;;1652       }
;;;1653       else
;;;1654       {
;;;1655           en_len = 1;
        0x008130d0:    2701        .'      MOVS     r7,#1
;;;1656           memset(iv,0,sizeof(iv));
        0x008130d2:    9605        ..      STR      r6,[sp,#0x14]
        0x008130d4:    9606        ..      STR      r6,[sp,#0x18]
        0x008130d6:    9607        ..      STR      r6,[sp,#0x1c]
        0x008130d8:    9608        ..      STR      r6,[sp,#0x20]
;;;1657       }
;;;1658       
;;;1659       air_send_packet.send_len = 14+len;
        0x008130da:    f105060e    ....    ADD      r6,r5,#0xe
;;;1660   
;;;1661       if(air_send_packet.send_len%16==0)
        0x008130de:    0730        0.      LSLS     r0,r6,#28
        0x008130e0:    d003        ..      BEQ      0x8130ea ; tuya_ble_commData_send + 128
;;;1662       {
;;;1663           temp_len = 0;
;;;1664       }
;;;1665       else
;;;1666       {
;;;1667           temp_len = 16 - air_send_packet.send_len%16;
        0x008130e2:    f006000f    ....    AND      r0,r6,#0xf
        0x008130e6:    f1c00010    ....    RSB      r0,r0,#0x10
;;;1668       }
;;;1669   
;;;1670       temp_len += air_send_packet.send_len;
        0x008130ea:    eb060900    ....    ADD      r9,r6,r0
;;;1671   
;;;1672       if(temp_len>(TUYA_BLE_AIR_FRAME_MAX-en_len))
        0x008130ee:    f5c76180    ...a    RSB      r1,r7,#0x400
        0x008130f2:    4549        IE      CMP      r1,r9
        0x008130f4:    d209        ..      BCS      0x81310a ; tuya_ble_commData_send + 160
;;;1673       {
;;;1674           TUYA_BLE_LOG_ERROR("The length of the send to ble exceeds the maximum length.");
        0x008130f6:    48e0        .H      LDR      r0,[pc,#896] ; [0x813478] = 0x81d59c
        0x008130f8:    f007fd57    ..W.    BL       get_args ; 0x81abaa
        0x008130fc:    49dc        .I      LDR      r1,[pc,#880] ; [0x813470] = 0x88033b8
        0x008130fe:    4602        .F      MOV      r2,r0
        0x00813100:    3150        P1      ADDS     r1,r1,#0x50
        0x00813102:    48dc        .H      LDR      r0,[pc,#880] ; [0x813474] = 0x21103002
        0x00813104:    f7f4dcab    ....    BL       log_buffer ; 0x7a5e
;;;1675           air_send_packet.send_len = 0;
;;;1676           return 1; //加密后数据加上加密头超过AIR_FRAME_MAX
        0x00813108:    e0eb        ..      B        0x8132e2 ; tuya_ble_commData_send + 632
;;;1677       }
;;;1678         
;;;1679       air_send_packet.send_data = NULL;
;;;1680          
;;;1681       air_send_packet.send_data = (uint8_t *)tuya_ble_malloc(temp_len); //must temp_len
        0x0081310a:    fa1ff089    ....    UXTH     r0,r9
        0x0081310e:    f002f93f    ..?.    BL       tuya_ble_malloc ; 0x815390
        0x00813112:    0004        ..      MOVS     r4,r0
;;;1682       
;;;1683       if(air_send_packet.send_data==NULL)
        0x00813114:    d07e        ~.      BEQ      0x813214 ; tuya_ble_commData_send + 426
;;;1684       {
;;;1685           TUYA_BLE_LOG_ERROR("air_send_packet.send_data malloc failed return 3.");
;;;1686           air_send_packet.send_len = 0;
;;;1687           return 3;
;;;1688       }
;;;1689       else
;;;1690       {
;;;1691           memset(air_send_packet.send_data,0,temp_len);
        0x00813116:    4649        IF      MOV      r1,r9
        0x00813118:    f446f780    F...    BL       __aeabi_memclr ; 0x5a01c
        0x0081311c:    f007fc24    ..$.    BL       tuya_ble_device_enter_critical ; 0x81a968
        0x00813120:    49d6        .I      LDR      r1,[pc,#856] ; [0x81347c] = 0x208130
        0x00813122:    6808        .h      LDR      r0,[r1,#0]
        0x00813124:    4683        .F      MOV      r11,r0
        0x00813126:    1c40        @.      ADDS     r0,r0,#1
        0x00813128:    6008        .`      STR      r0,[r1,#0]
        0x0081312a:    f007fc23    ..#.    BL       tuya_ble_device_exit_critical ; 0x81a974
;;;1692       }
;;;1693   
;;;1694   
;;;1695       uint32_t send_sn = get_ble_send_sn();
;;;1696       //利用send_data buffer缓存明文指令数据
;;;1697       air_send_packet.send_data[0] = send_sn>>24;
        0x0081312e:    ea4f611b    O..a    LSR      r1,r11,#24
        0x00813132:    7021        !p      STRB     r1,[r4,#0]
;;;1698       air_send_packet.send_data[1] = send_sn>>16;
        0x00813134:    ea4f411b    O..A    LSR      r1,r11,#16
        0x00813138:    7061        ap      STRB     r1,[r4,#1]
;;;1699       air_send_packet.send_data[2] = send_sn>>8;
        0x0081313a:    ea4f211b    O..!    LSR      r1,r11,#8
        0x0081313e:    70a1        .p      STRB     r1,[r4,#2]
;;;1700       air_send_packet.send_data[3] = send_sn;
        0x00813140:    f884b003    ....    STRB     r11,[r4,#3]
;;;1701   
;;;1702       air_send_packet.send_data[4] = ack_sn>>24;
        0x00813144:    ea4f601a    O..`    LSR      r0,r10,#24
        0x00813148:    7120         q      STRB     r0,[r4,#4]
;;;1703       air_send_packet.send_data[5] = ack_sn>>16;
        0x0081314a:    ea4f401a    O..@    LSR      r0,r10,#16
        0x0081314e:    7160        `q      STRB     r0,[r4,#5]
;;;1704       air_send_packet.send_data[6] = ack_sn>>8;
        0x00813150:    ea4f201a    O..     LSR      r0,r10,#8
        0x00813154:    71a0        .q      STRB     r0,[r4,#6]
;;;1705       air_send_packet.send_data[7] = ack_sn;
        0x00813156:    f884a007    ....    STRB     r10,[r4,#7]
;;;1706   
;;;1707       air_send_packet.send_data[8] = cmd>>8;
        0x0081315a:    9811        ..      LDR      r0,[sp,#0x44]
        0x0081315c:    462a        *F      MOV      r2,r5
        0x0081315e:    0a00        ..      LSRS     r0,r0,#8
        0x00813160:    7220         r      STRB     r0,[r4,#8]
;;;1708       air_send_packet.send_data[9] = cmd;
        0x00813162:    9811        ..      LDR      r0,[sp,#0x44]
        0x00813164:    7260        `r      STRB     r0,[r4,#9]
;;;1709   
;;;1710       air_send_packet.send_data[10] = len>>8;
        0x00813166:    0a28        (.      LSRS     r0,r5,#8
        0x00813168:    72a0        .r      STRB     r0,[r4,#0xa]
;;;1711       air_send_packet.send_data[11] = len;
        0x0081316a:    72e5        .r      STRB     r5,[r4,#0xb]
;;;1712   
;;;1713       memcpy(&air_send_packet.send_data[12],data,len);
        0x0081316c:    f104000c    ....    ADD      r0,r4,#0xc
        0x00813170:    9913        ..      LDR      r1,[sp,#0x4c]
        0x00813172:    f446f692    F...    BL       __aeabi_memcpy ; 0x59e9a
;;;1714   
;;;1715       crc16 = tuya_ble_crc16_compute(air_send_packet.send_data,12+len, NULL);
        0x00813176:    f1050a0c    ....    ADD      r10,r5,#0xc
        0x0081317a:    fa1ff18a    ....    UXTH     r1,r10
        0x0081317e:    4620         F      MOV      r0,r4
        0x00813180:    2200        ."      MOVS     r2,#0
        0x00813182:    f003fa3b    ..;.    BL       tuya_ble_crc16_compute ; 0x8165fc
;;;1716   
;;;1717       air_send_packet.send_data[12+len] = crc16>>8;
        0x00813186:    0a02        ..      LSRS     r2,r0,#8
        0x00813188:    350d        .5      ADDS     r5,r5,#0xd
        0x0081318a:    f804200a    ...     STRB     r2,[r4,r10]
;;;1718       air_send_packet.send_data[13+len] = crc16;
        0x0081318e:    5560        `U      STRB     r0,[r4,r5]
;;;1719       
;;;1720   
;;;1721       TUYA_BLE_LOG_HEXDUMP_DEBUG("ble_commData_send plain data",(uint8_t*)air_send_packet.send_data,air_send_packet.send_len);//
        0x00813190:    a0bb        ..      ADR      r0,{pc}+0x2f0 ; 0x813480
        0x00813192:    f007fd0a    ....    BL       get_args ; 0x81abaa
        0x00813196:    f8dfb2dc    ....    LDR      r11,[pc,#732] ; [0x813474] = 0x21103002
        0x0081319a:    49b5        .I      LDR      r1,[pc,#724] ; [0x813470] = 0x88033b8
        0x0081319c:    4602        .F      MOV      r2,r0
        0x0081319e:    4633        3F      MOV      r3,r6
        0x008131a0:    31d8        .1      ADDS     r1,r1,#0xd8
        0x008131a2:    465d        ]F      MOV      r5,r11
        0x008131a4:    4658        XF      MOV      r0,r11
        0x008131a6:    f7f4dc5a    ..Z.    BL       log_buffer ; 0x7a5e
        0x008131aa:    b2b3        ..      UXTH     r3,r6
        0x008131ac:    4622        "F      MOV      r2,r4
        0x008131ae:    2108        .!      MOVS     r1,#8
        0x008131b0:    a099        ..      ADR      r0,{pc}+0x268 ; 0x813418
        0x008131b2:    f007fd0e    ....    BL       log_hexdump ; 0x81abd2
        0x008131b6:    a098        ..      ADR      r0,{pc}+0x262 ; 0x813418
        0x008131b8:    f007fcf7    ....    BL       get_args ; 0x81abaa
        0x008131bc:    4602        .F      MOV      r2,r0
        0x008131be:    49be        .I      LDR      r1,[pc,#760] ; [0x8134b8] = 0x88034c8
        0x008131c0:    4628        (F      MOV      r0,r5
        0x008131c2:    f7f4dc4c    ..L.    BL       log_buffer ; 0x7a5e
;;;1722     
;;;1723       air_send_packet.encrypt_data_buf = NULL;
;;;1724       
;;;1725       air_send_packet.encrypt_data_buf = (uint8_t *)tuya_ble_malloc(temp_len+en_len);
        0x008131c6:    eb090a07    ....    ADD      r10,r9,r7
        0x008131ca:    fa1ff08a    ....    UXTH     r0,r10
        0x008131ce:    f002f8df    ....    BL       tuya_ble_malloc ; 0x815390
        0x008131d2:    0005        ..      MOVS     r5,r0
        0x008131d4:    d032        2.      BEQ      0x81323c ; tuya_ble_commData_send + 466
        0x008131d6:    4651        QF      MOV      r1,r10
;;;1726       
;;;1727       if(air_send_packet.encrypt_data_buf==NULL)
;;;1728       {
;;;1729           TUYA_BLE_LOG_ERROR("air_send_packet.encrypt_data_buf malloc failed.");
;;;1730           tuya_ble_free(air_send_packet.send_data);
;;;1731           return 3;
;;;1732       }
;;;1733       else
;;;1734       {
;;;1735           air_send_packet.encrypt_data_buf_len = 0;
;;;1736           memset(air_send_packet.encrypt_data_buf,0,temp_len+en_len);
        0x008131d8:    f446f720    F. .    BL       __aeabi_memclr ; 0x5a01c
        0x008131dc:    f8858000    ....    STRB     r8,[r5,#0]
        0x008131e0:    ea5f0008    _...    MOVS     r0,r8
        0x008131e4:    d004        ..      BEQ      0x8131f0 ; tuya_ble_commData_send + 390
;;;1737       }
;;;1738        
;;;1739            
;;;1740       air_send_packet.encrypt_data_buf[0] = encryption_mode;
;;;1741   
;;;1742       if(encryption_mode != ENCRYPTION_MODE_NONE)
;;;1743       {
;;;1744           memcpy(&air_send_packet.encrypt_data_buf[1],iv,16);
        0x008131e6:    1c68        h.      ADDS     r0,r5,#1
        0x008131e8:    2210        ."      MOVS     r2,#0x10
        0x008131ea:    a905        ..      ADD      r1,sp,#0x14
        0x008131ec:    f446f655    F.U.    BL       __aeabi_memcpy ; 0x59e9a
        0x008131f0:    4bb3        .K      LDR      r3,[pc,#716] ; [0x8134c0] = 0x2097d4
        0x008131f2:    19e9        ..      ADDS     r1,r5,r7
        0x008131f4:    e9cd1302    ....    STRD     r1,r3,[sp,#8]
        0x008131f8:    f10d0c38    ..8.    ADD      r12,sp,#0x38
        0x008131fc:    4aaf        .J      LDR      r2,[pc,#700] ; [0x8134bc] = 0x209120
        0x008131fe:    e9cd6c00    ...l    STRD     r6,r12,[sp,#0]
        0x00813202:    9204        ..      STR      r2,[sp,#0x10]
;;;1745       }
;;;1746       else
;;;1747       {
;;;1748           
;;;1749       }
;;;1750       
;;;1751       p_version = (TUYA_BLE_PROTOCOL_VERSION_HIGN<<8) + TUYA_BLE_PROTOCOL_VERSION_LOW;
        0x00813204:    f2403003    @..0    MOV      r0,#0x303
;;;1752       if(tuya_ble_encryption(p_version,encryption_mode,iv,(uint8_t *)air_send_packet.send_data,air_send_packet.send_len,&out_len,
        0x00813208:    4623        #F      MOV      r3,r4
        0x0081320a:    aa05        ..      ADD      r2,sp,#0x14
        0x0081320c:    4641        AF      MOV      r1,r8
        0x0081320e:    f008fd01    ....    BL       tuya_ble_encryption ; 0x81bc14
        0x00813212:    e000        ..      B        0x813216 ; tuya_ble_commData_send + 428
        0x00813214:    e008        ..      B        0x813228 ; tuya_ble_commData_send + 446
        0x00813216:    2800        .(      CMP      r0,#0
        0x00813218:    d01e        ..      BEQ      0x813258 ; tuya_ble_commData_send + 494
        0x0081321a:    a0aa        ..      ADR      r0,{pc}+0x2aa ; 0x8134c4
        0x0081321c:    f007fcc5    ....    BL       get_args ; 0x81abaa
        0x00813220:    49a5        .I      LDR      r1,[pc,#660] ; [0x8134b8] = 0x88034c8
        0x00813222:    4602        .F      MOV      r2,r0
        0x00813224:    31b4        .1      ADDS     r1,r1,#0xb4
        0x00813226:    e023        #.      B        0x813270 ; tuya_ble_commData_send + 518
        0x00813228:    a0b2        ..      ADR      r0,{pc}+0x2cc ; 0x8134f4
        0x0081322a:    f007fcbe    ....    BL       get_args ; 0x81abaa
        0x0081322e:    49a2        .I      LDR      r1,[pc,#648] ; [0x8134b8] = 0x88034c8
        0x00813230:    4602        .F      MOV      r2,r0
        0x00813232:    3978        x9      SUBS     r1,r1,#0x78
        0x00813234:    488f        .H      LDR      r0,[pc,#572] ; [0x813474] = 0x21103002
        0x00813236:    f7f4dc12    ....    BL       log_buffer ; 0x7a5e
        0x0081323a:    e00b        ..      B        0x813254 ; tuya_ble_commData_send + 490
        0x0081323c:    a0bd        ..      ADR      r0,{pc}+0x2f8 ; 0x813534
        0x0081323e:    f007fcb4    ....    BL       get_args ; 0x81abaa
        0x00813242:    499d        .I      LDR      r1,[pc,#628] ; [0x8134b8] = 0x88034c8
        0x00813244:    4602        .F      MOV      r2,r0
        0x00813246:    1d09        ..      ADDS     r1,r1,#4
        0x00813248:    4658        XF      MOV      r0,r11
        0x0081324a:    f7f4dc08    ....    BL       log_buffer ; 0x7a5e
        0x0081324e:    4620         F      MOV      r0,r4
        0x00813250:    f002f8a9    ....    BL       tuya_ble_free ; 0x8153a6
        0x00813254:    2003        .       MOVS     r0,#3
        0x00813256:    e738        8.      B        0x8130ca ; tuya_ble_commData_send + 96
;;;1753           (uint8_t *)(air_send_packet.encrypt_data_buf+en_len),&tuya_ble_current_para,tuya_ble_pair_rand)==0)
;;;1754       {
;;;1755           if((encryption_mode != ENCRYPTION_MODE_NONE)&&(out_len != temp_len))
        0x00813258:    f1b80f00    ....    CMP      r8,#0
        0x0081325c:    d00f        ..      BEQ      0x81327e ; tuya_ble_commData_send + 532
        0x0081325e:    990e        ..      LDR      r1,[sp,#0x38]
        0x00813260:    4549        IE      CMP      r1,r9
        0x00813262:    d00c        ..      BEQ      0x81327e ; tuya_ble_commData_send + 532
;;;1756           {
;;;1757               TUYA_BLE_LOG_ERROR("ble_commData_send encryed error."); 
        0x00813264:    a0c3        ..      ADR      r0,{pc}+0x310 ; 0x813574
        0x00813266:    f007fca0    ....    BL       get_args ; 0x81abaa
        0x0081326a:    4993        .I      LDR      r1,[pc,#588] ; [0x8134b8] = 0x88034c8
        0x0081326c:    4602        .F      MOV      r2,r0
        0x0081326e:    3144        D1      ADDS     r1,r1,#0x44
        0x00813270:    4658        XF      MOV      r0,r11
        0x00813272:    f7f4dbf4    ....    BL       log_buffer ; 0x7a5e
;;;1758               tuya_ble_free(air_send_packet.send_data);        
        0x00813276:    4620         F      MOV      r0,r4
        0x00813278:    f002f895    ....    BL       tuya_ble_free ; 0x8153a6
        0x0081327c:    e02e        ..      B        0x8132dc ; tuya_ble_commData_send + 626
;;;1759               tuya_ble_free(air_send_packet.encrypt_data_buf);        
;;;1760               return 1;
;;;1761           }
;;;1762   
;;;1763           air_send_packet.encrypt_data_buf_len = en_len + out_len;
        0x0081327e:    980e        ..      LDR      r0,[sp,#0x38]
        0x00813280:    183e        >.      ADDS     r6,r7,r0
;;;1764   
;;;1765           TUYA_BLE_LOG_HEXDUMP_DEBUG("ble_commData_send encryped data",(uint8_t*)air_send_packet.encrypt_data_buf,air_send_packet.encrypt_data_buf_len);//
        0x00813282:    a0c8        ..      ADR      r0,{pc}+0x322 ; 0x8135a4
        0x00813284:    f007fc91    ....    BL       get_args ; 0x81abaa
        0x00813288:    498b        .I      LDR      r1,[pc,#556] ; [0x8134b8] = 0x88034c8
        0x0081328a:    4602        .F      MOV      r2,r0
        0x0081328c:    4633        3F      MOV      r3,r6
        0x0081328e:    3174        t1      ADDS     r1,r1,#0x74
        0x00813290:    465f        _F      MOV      r7,r11
        0x00813292:    4658        XF      MOV      r0,r11
        0x00813294:    f7f4dbe3    ....    BL       log_buffer ; 0x7a5e
        0x00813298:    b2b3        ..      UXTH     r3,r6
        0x0081329a:    462a        *F      MOV      r2,r5
        0x0081329c:    2108        .!      MOVS     r1,#8
        0x0081329e:    a05e        ^.      ADR      r0,{pc}+0x17a ; 0x813418
        0x008132a0:    f007fc97    ....    BL       log_hexdump ; 0x81abd2
        0x008132a4:    a05c        \.      ADR      r0,{pc}+0x174 ; 0x813418
        0x008132a6:    f007fc80    ....    BL       get_args ; 0x81abaa
        0x008132aa:    4983        .I      LDR      r1,[pc,#524] ; [0x8134b8] = 0x88034c8
        0x008132ac:    4602        .F      MOV      r2,r0
        0x008132ae:    31b0        .1      ADDS     r1,r1,#0xb0
        0x008132b0:    4638        8F      MOV      r0,r7
        0x008132b2:    f7f4dbd4    ....    BL       log_buffer ; 0x7a5e
;;;1766       }
;;;1767       else
;;;1768       {
;;;1769           TUYA_BLE_LOG_ERROR("ble_commData_send encryed fail."); 
;;;1770           tuya_ble_free(air_send_packet.send_data);        
;;;1771           tuya_ble_free(air_send_packet.encrypt_data_buf);        
;;;1772           return 1;
;;;1773       }
;;;1774       
;;;1775       tuya_ble_free(air_send_packet.send_data);
        0x008132b6:    4620         F      MOV      r0,r4
        0x008132b8:    f002f875    ..u.    BL       tuya_ble_free ; 0x8153a6
        0x008132bc:    487f        .H      LDR      r0,[pc,#508] ; [0x8134bc] = 0x209120
;;;1776       package_number = 0;
        0x008132be:    2700        .'      MOVS     r7,#0
;;;1777       trsmitr_init(&ty_trsmitr_proc_send);
        0x008132c0:    3044        D0      ADDS     r0,r0,#0x44
        0x008132c2:    f002f892    ....    BL       trsmitr_init ; 0x8153ea
;;;1778       do
;;;1779       {
;;;1780           ret = trsmitr_send_pkg_encode(&ty_trsmitr_proc_send,TUYA_BLE_PROTOCOL_VERSION_HIGN,(uint8_t *)(air_send_packet.encrypt_data_buf), air_send_packet.encrypt_data_buf_len);
        0x008132c6:    487d        }H      LDR      r0,[pc,#500] ; [0x8134bc] = 0x209120
        0x008132c8:    4633        3F      MOV      r3,r6
        0x008132ca:    462a        *F      MOV      r2,r5
        0x008132cc:    2103        .!      MOVS     r1,#3
        0x008132ce:    3044        D0      ADDS     r0,r0,#0x44
        0x008132d0:    f002f89a    ....    BL       trsmitr_send_pkg_encode ; 0x815408
        0x008132d4:    0004        ..      MOVS     r4,r0
;;;1781           if (MTP_OK != ret && MTP_TRSMITR_CONTINUE != ret)
        0x008132d6:    d006        ..      BEQ      0x8132e6 ; tuya_ble_commData_send + 636
        0x008132d8:    2c03        .,      CMP      r4,#3
        0x008132da:    d004        ..      BEQ      0x8132e6 ; tuya_ble_commData_send + 636
;;;1782           {
;;;1783               tuya_ble_free(air_send_packet.encrypt_data_buf);  
        0x008132dc:    4628        (F      MOV      r0,r5
        0x008132de:    f002f862    ..b.    BL       tuya_ble_free ; 0x8153a6
;;;1784               return 1;
        0x008132e2:    2001        .       MOVS     r0,#1
        0x008132e4:    e6f1        ..      B        0x8130ca ; tuya_ble_commData_send + 96
;;;1785           }
;;;1786           send_len = get_trsmitr_subpkg_len(&ty_trsmitr_proc_send);
        0x008132e6:    4875        uH      LDR      r0,[pc,#468] ; [0x8134bc] = 0x209120
        0x008132e8:    3044        D0      ADDS     r0,r0,#0x44
        0x008132ea:    f002f889    ....    BL       get_trsmitr_subpkg_len ; 0x815400
        0x008132ee:    4680        .F      MOV      r8,r0
;;;1787           memcpy(p_buf,get_trsmitr_subpkg(&ty_trsmitr_proc_send),send_len);
        0x008132f0:    4872        rH      LDR      r0,[pc,#456] ; [0x8134bc] = 0x209120
        0x008132f2:    3044        D0      ADDS     r0,r0,#0x44
        0x008132f4:    f002f886    ....    BL       get_trsmitr_subpkg ; 0x815404
        0x008132f8:    4601        .F      MOV      r1,r0
        0x008132fa:    4642        BF      MOV      r2,r8
        0x008132fc:    a809        ..      ADD      r0,sp,#0x24
        0x008132fe:    f446f5cc    F...    BL       __aeabi_memcpy ; 0x59e9a
;;;1788   		package_number++;
;;;1789   		tuya_ble_gatt_send_data_enqueue(p_buf,send_len);
        0x00813302:    4641        AF      MOV      r1,r8
        0x00813304:    a809        ..      ADD      r0,sp,#0x24
        0x00813306:    1c7f        ..      ADDS     r7,r7,#1
        0x00813308:    f003fb20    .. .    BL       tuya_ble_gatt_send_data_enqueue ; 0x81694c
;;;1790           
;;;1791       } while (ret == MTP_TRSMITR_CONTINUE);
        0x0081330c:    2c03        .,      CMP      r4,#3
        0x0081330e:    d0da        ..      BEQ      0x8132c6 ; tuya_ble_commData_send + 604
;;;1792   
;;;1793       TUYA_BLE_LOG_INFO("ble_commData_send len = %d , package_number = %d , protocol version : 0x%02x , error code : 0x%02x",air_send_packet.encrypt_data_buf_len,package_number,TUYA_BLE_PROTOCOL_VERSION_HIGN,err);
        0x00813310:    48b3        .H      LDR      r0,[pc,#716] ; [0x8135e0] = 0x81d634
        0x00813312:    f007fc4a    ..J.    BL       get_args ; 0x81abaa
        0x00813316:    4602        .F      MOV      r2,r0
        0x00813318:    980f        ..      LDR      r0,[sp,#0x3c]
        0x0081331a:    2103        .!      MOVS     r1,#3
        0x0081331c:    9700        ..      STR      r7,[sp,#0]
        0x0081331e:    e9cd1001    ....    STRD     r1,r0,[sp,#4]
        0x00813322:    4965        eI      LDR      r1,[pc,#404] ; [0x8134b8] = 0x88034c8
        0x00813324:    4633        3F      MOV      r3,r6
        0x00813326:    31e4        .1      ADDS     r1,r1,#0xe4
        0x00813328:    4658        XF      MOV      r0,r11
        0x0081332a:    f7f4db98    ....    BL       log_buffer ; 0x7a5e
;;;1794   
;;;1795       tuya_ble_free(air_send_packet.encrypt_data_buf);  
        0x0081332e:    4628        (F      MOV      r0,r5
        0x00813330:    f002f839    ..9.    BL       tuya_ble_free ; 0x8153a6
;;;1796   
;;;1797       return 0;
        0x00813334:    2000        .       MOVS     r0,#0
;;;1798   }
        0x00813336:    e6c8        ..      B        0x8130ca ; tuya_ble_commData_send + 96
    tuya_ble_handle_dev_info_req
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_data_handler.c (422)
        0x00813338:    e92d43f0    -..C    PUSH     {r4-r9,lr}
        0x0081333c:    b099        ..      SUB      sp,sp,#0x64
        0x0081333e:    4604        .F      MOV      r4,r0
;;;423        uint8_t p_buf[90];
;;;424        uint8_t payload_len = 0;
;;;425        uint32_t ack_sn = 0;
;;;426        uint8_t encry_mode = 0;
;;;427        uint32_t version_temp_s,version_temp_h;
;;;428        
;;;429        memset(p_buf,0,sizeof(p_buf));
        0x00813340:    215c        \!      MOVS     r1,#0x5c
        0x00813342:    a801        ..      ADD      r0,sp,#4
        0x00813344:    f446f68c    F...    BL       __aeabi_memclr4 ; 0x5a060
;;;430    
;;;431        ack_sn  = recv_data[1]<<24;
        0x00813348:    7860        `x      LDRB     r0,[r4,#1]
        0x0081334a:    78a1        .x      LDRB     r1,[r4,#2]
        0x0081334c:    0600        ..      LSLS     r0,r0,#24
;;;432        ack_sn += recv_data[2]<<16;
        0x0081334e:    eb004001    ...@    ADD      r0,r0,r1,LSL #16
;;;433        ack_sn += recv_data[3]<<8;
        0x00813352:    78e1        .x      LDRB     r1,[r4,#3]
        0x00813354:    eb002001    ...     ADD      r0,r0,r1,LSL #8
;;;434        ack_sn += recv_data[4];
        0x00813358:    7921        !y      LDRB     r1,[r4,#4]
        0x0081335a:    180f        ..      ADDS     r7,r1,r0
;;;435    
;;;436        TUYA_BLE_LOG_DEBUG("get device infor-%d",tuya_ble_current_para.sys_settings.bound_flag);
        0x0081335c:    a0a1        ..      ADR      r0,{pc}+0x288 ; 0x8135e4
        0x0081335e:    f007fc24    ..$.    BL       get_args ; 0x81abaa
        0x00813362:    f8df815c    ..\.    LDR      r8,[pc,#348] ; [0x8134c0] = 0x2097d4
        0x00813366:    492d        -I      LDR      r1,[pc,#180] ; [0x81341c] = 0x8802790
        0x00813368:    4602        .F      MOV      r2,r0
        0x0081336a:    f898313c    ..<1    LDRB     r3,[r8,#0x13c]
        0x0081336e:    315c        \1      ADDS     r1,r1,#0x5c
        0x00813370:    4840        @H      LDR      r0,[pc,#256] ; [0x813474] = 0x21103002
        0x00813372:    f7f4db74    ..t.    BL       log_buffer ; 0x7a5e
;;;437    
;;;438        tuya_ble_rand_generator(tuya_ble_pair_rand,6);
        0x00813376:    2106        .!      MOVS     r1,#6
        0x00813378:    4850        PH      LDR      r0,[pc,#320] ; [0x8134bc] = 0x209120
        0x0081337a:    f007fabf    ....    BL       tuya_ble_rand_generator ; 0x81a8fc
;;;439        tuya_ble_pair_rand_valid = 1;
        0x0081337e:    4d4f        OM      LDR      r5,[pc,#316] ; [0x8134bc] = 0x209120
        0x00813380:    f04f0901    O...    MOV      r9,#1
        0x00813384:    3d1c        .=      SUBS     r5,r5,#0x1c
        0x00813386:    2600        .&      MOVS     r6,#0
        0x00813388:    f8859000    ....    STRB     r9,[r5,#0]
;;;440    
;;;441        if(TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;442        {
;;;443            version_temp_s = tuya_ble_firmware_version;
        0x0081338c:    88a9        ..      LDRH     r1,[r5,#4]
;;;444            version_temp_h = tuya_ble_hardware_version;
        0x0081338e:    8928        (.      LDRH     r0,[r5,#8]
;;;445            p_buf[4] = 0x00;
;;;446        }
;;;447        else
;;;448        {
;;;449            version_temp_s = tuya_ble_firmware_version>>8;
;;;450            version_temp_h = tuya_ble_hardware_version>>8;
;;;451            p_buf[4] = 0x05;
;;;452        }
;;;453        p_buf[0] = (version_temp_s>>8)&0xff;
        0x00813390:    0a0a        ..      LSRS     r2,r1,#8
        0x00813392:    f88d2004    ...     STRB     r2,[sp,#4]
;;;454        p_buf[1] = (version_temp_s&0xff);
        0x00813396:    f88d1005    ....    STRB     r1,[sp,#5]
;;;455        p_buf[2] = TUYA_BLE_PROTOCOL_VERSION_HIGN;
        0x0081339a:    2103        .!      MOVS     r1,#3
        0x0081339c:    f88d1006    ....    STRB     r1,[sp,#6]
        0x008133a0:    f88d6008    ...`    STRB     r6,[sp,#8]
;;;456        p_buf[3] = TUYA_BLE_PROTOCOL_VERSION_LOW;
        0x008133a4:    f88d1007    ....    STRB     r1,[sp,#7]
;;;457        if(TUYA_BLE_ADVANCED_ENCRYPTION_DEVICE==1)
;;;458        {
;;;459            p_buf[4] |= 0x02;
;;;460        }
;;;461    
;;;462        p_buf[5] = tuya_ble_current_para.sys_settings.bound_flag;
        0x008133a8:    f898113c    ..<.    LDRB     r1,[r8,#0x13c]
        0x008133ac:    f88d1009    ....    STRB     r1,[sp,#9]
;;;463        memcpy(&p_buf[6],tuya_ble_pair_rand,6);
        0x008133b0:    69e9        .i      LDR      r1,[r5,#0x1c]
        0x008133b2:    f8cd100a    ....    STR      r1,[sp,#0xa]
        0x008133b6:    8c29        ).      LDRH     r1,[r5,#0x20]
        0x008133b8:    f8ad100e    ....    STRH     r1,[sp,#0xe]
;;;464        p_buf[12] = (version_temp_h>>8)&0xff;
        0x008133bc:    0a01        ..      LSRS     r1,r0,#8
        0x008133be:    f88d1010    ....    STRB     r1,[sp,#0x10]
;;;465        p_buf[13] = (version_temp_h&0xff);
        0x008133c2:    f88d0011    ....    STRB     r0,[sp,#0x11]
;;;466        
;;;467        tuya_ble_register_key_generate(&p_buf[14],&tuya_ble_current_para);
        0x008133c6:    4641        AF      MOV      r1,r8
        0x008133c8:    f10d0012    ....    ADD      r0,sp,#0x12
        0x008133cc:    f008fdee    ....    BL       tuya_ble_register_key_generate ; 0x81bfac
;;;468    
;;;469        p_buf[46] = (tuya_ble_firmware_version>>16)&0xff;
        0x008133d0:    6868        hh      LDR      r0,[r5,#4]
        0x008133d2:    f88d0034    ..4.    STRB     r0,[sp,#0x34]
        0x008133d6:    0c01        ..      LSRS     r1,r0,#16
        0x008133d8:    f88d1032    ..2.    STRB     r1,[sp,#0x32]
;;;470        p_buf[47] = (tuya_ble_firmware_version>>8)&0xff;
        0x008133dc:    0a01        ..      LSRS     r1,r0,#8
        0x008133de:    f88d1033    ..3.    STRB     r1,[sp,#0x33]
;;;471        p_buf[48] = (tuya_ble_firmware_version&0xff);
;;;472        p_buf[49] = (tuya_ble_hardware_version>>16)&0xff;
        0x008133e2:    e111        ..      B        0x813608 ; tuya_ble_handle_dev_info_req + 720
    $d
        0x008133e4:    205d445b    [D]     DCD    542983259
        0x008133e8:    41595554    TUYA    DCD    1096373588
        0x008133ec:    454c425f    _BLE    DCD    1162625631
        0x008133f0:    4c42203a    : BL    DCD    1279402042
        0x008133f4:    56452045    E EV    DCD    1447370821
        0x008133f8:    20544e45    ENT     DCD    542395973
        0x008133fc:    444e4553    SEND    DCD    1145980243
        0x00813400:    444d432d    -CMD    DCD    1145914157
        0x00813404:    2578303a    :0x%    DCD    628633658
        0x00813408:    20783230    02x     DCD    544748080
        0x0081340c:    454c202d    - LE    DCD    1162616877
        0x00813410:    78303a4e    N:0x    DCD    2016426574
        0x00813414:    78323025    %02x    DCD    2016555045
        0x00813418:    00000000    ....    DCD    0
        0x0081341c:    08802790    .'..    DCD    142616464
        0x00813420:    205d455b    [E]     DCD    542983515
        0x00813424:    41595554    TUYA    DCD    1096373588
        0x00813428:    454c425f    _BLE    DCD    1162625631
        0x0081342c:    6c62203a    : bl    DCD    1818370106
        0x00813430:    76652065    e ev    DCD    1986338917
        0x00813434:    20746e65    ent     DCD    544501349
        0x00813438:    646e6573    send    DCD    1684956531
        0x0081343c:    69616620     fai    DCD    1767990816
        0x00813440:    0000216c    l!..    DCD    8556
        0x00813444:    205d455b    [E]     DCD    542983515
        0x00813448:    41595554    TUYA    DCD    1096373588
        0x0081344c:    454c425f    _BLE    DCD    1162625631
        0x00813450:    7974203a    : ty    DCD    2037653562
        0x00813454:    656c625f    _ble    DCD    1701601887
        0x00813458:    5f78725f    _rx_    DCD    1601729119
        0x0081345c:    636f7270    proc    DCD    1668248176
        0x00813460:    206f6e20     no     DCD    544173600
        0x00813464:    2e6d656d    mem.    DCD    778921325
        0x00813468:    00000000    ....    DCD    0
        0x0081346c:    0081d5e4    ....    DCD    8508900
        0x00813470:    088033b8    .3..    DCD    142619576
        0x00813474:    21103002    .0.!    DCD    554708994
        0x00813478:    0081d59c    ....    DCD    8508828
        0x0081347c:    00208130    0. .    DCD    2130224
        0x00813480:    205d445b    [D]     DCD    542983259
        0x00813484:    41595554    TUYA    DCD    1096373588
        0x00813488:    454c425f    _BLE    DCD    1162625631
        0x0081348c:    6c62203a    : bl    DCD    1818370106
        0x00813490:    6f635f65    e_co    DCD    1868783461
        0x00813494:    61446d6d    mmDa    DCD    1631874413
        0x00813498:    735f6174    ta_s    DCD    1935630708
        0x0081349c:    20646e65    end     DCD    543452773
        0x008134a0:    69616c70    plai    DCD    1767992432
        0x008134a4:    6164206e    n da    DCD    1633951854
        0x008134a8:    5b206174    ta [    DCD    1528848756
        0x008134ac:    3d6e656c    len=    DCD    1030645100
        0x008134b0:    205d6425    %d]     DCD    542991397
        0x008134b4:    0000003a    :...    DCD    58
        0x008134b8:    088034c8    .4..    DCD    142619848
        0x008134bc:    00209120     . .    DCD    2134304
        0x008134c0:    002097d4    .. .    DCD    2136020
        0x008134c4:    205d455b    [E]     DCD    542983515
        0x008134c8:    41595554    TUYA    DCD    1096373588
        0x008134cc:    454c425f    _BLE    DCD    1162625631
        0x008134d0:    6c62203a    : bl    DCD    1818370106
        0x008134d4:    6f635f65    e_co    DCD    1868783461
        0x008134d8:    61446d6d    mmDa    DCD    1631874413
        0x008134dc:    735f6174    ta_s    DCD    1935630708
        0x008134e0:    20646e65    end     DCD    543452773
        0x008134e4:    72636e65    encr    DCD    1919118949
        0x008134e8:    20646579    yed     DCD    543450489
        0x008134ec:    6c696166    fail    DCD    1818845542
        0x008134f0:    0000002e    ....    DCD    46
        0x008134f4:    205d455b    [E]     DCD    542983515
        0x008134f8:    41595554    TUYA    DCD    1096373588
        0x008134fc:    454c425f    _BLE    DCD    1162625631
        0x00813500:    6961203a    : ai    DCD    1767972922
        0x00813504:    65735f72    r_se    DCD    1702059890
        0x00813508:    705f646e    nd_p    DCD    1885299822
        0x0081350c:    656b6361    acke    DCD    1701536609
        0x00813510:    65732e74    t.se    DCD    1702047348
        0x00813514:    645f646e    nd_d    DCD    1683973230
        0x00813518:    20617461    ata     DCD    543257697
        0x0081351c:    6c6c616d    mall    DCD    1819042157
        0x00813520:    6620636f    oc f    DCD    1713398639
        0x00813524:    656c6961    aile    DCD    1701603681
        0x00813528:    65722064    d re    DCD    1701978212
        0x0081352c:    6e727574    turn    DCD    1852994932
        0x00813530:    002e3320     3..    DCD    3027744
        0x00813534:    205d455b    [E]     DCD    542983515
        0x00813538:    41595554    TUYA    DCD    1096373588
        0x0081353c:    454c425f    _BLE    DCD    1162625631
        0x00813540:    6961203a    : ai    DCD    1767972922
        0x00813544:    65735f72    r_se    DCD    1702059890
        0x00813548:    705f646e    nd_p    DCD    1885299822
        0x0081354c:    656b6361    acke    DCD    1701536609
        0x00813550:    6e652e74    t.en    DCD    1852124788
        0x00813554:    70797263    cryp    DCD    1887007331
        0x00813558:    61645f74    t_da    DCD    1633967988
        0x0081355c:    625f6174    ta_b    DCD    1650418036
        0x00813560:    6d206675    uf m    DCD    1830839925
        0x00813564:    6f6c6c61    allo    DCD    1869376609
        0x00813568:    61662063    c fa    DCD    1634082915
        0x0081356c:    64656c69    iled    DCD    1684368489
        0x00813570:    0000002e    ....    DCD    46
        0x00813574:    205d455b    [E]     DCD    542983515
        0x00813578:    41595554    TUYA    DCD    1096373588
        0x0081357c:    454c425f    _BLE    DCD    1162625631
        0x00813580:    6c62203a    : bl    DCD    1818370106
        0x00813584:    6f635f65    e_co    DCD    1868783461
        0x00813588:    61446d6d    mmDa    DCD    1631874413
        0x0081358c:    735f6174    ta_s    DCD    1935630708
        0x00813590:    20646e65    end     DCD    543452773
        0x00813594:    72636e65    encr    DCD    1919118949
        0x00813598:    20646579    yed     DCD    543450489
        0x0081359c:    6f727265    erro    DCD    1869771365
        0x008135a0:    00002e72    r...    DCD    11890
        0x008135a4:    205d445b    [D]     DCD    542983259
        0x008135a8:    41595554    TUYA    DCD    1096373588
        0x008135ac:    454c425f    _BLE    DCD    1162625631
        0x008135b0:    6c62203a    : bl    DCD    1818370106
        0x008135b4:    6f635f65    e_co    DCD    1868783461
        0x008135b8:    61446d6d    mmDa    DCD    1631874413
        0x008135bc:    735f6174    ta_s    DCD    1935630708
        0x008135c0:    20646e65    end     DCD    543452773
        0x008135c4:    72636e65    encr    DCD    1919118949
        0x008135c8:    64657079    yped    DCD    1684369529
        0x008135cc:    74616420     dat    DCD    1952539680
        0x008135d0:    6c5b2061    a [l    DCD    1817911393
        0x008135d4:    253d6e65    en=%    DCD    624782949
        0x008135d8:    3a205d64    d] :    DCD    975199588
        0x008135dc:    00000000    ....    DCD    0
        0x008135e0:    0081d634    4...    DCD    8508980
        0x008135e4:    205d445b    [D]     DCD    542983259
        0x008135e8:    41595554    TUYA    DCD    1096373588
        0x008135ec:    454c425f    _BLE    DCD    1162625631
        0x008135f0:    6567203a    : ge    DCD    1701257274
        0x008135f4:    65642074    t de    DCD    1701060724
        0x008135f8:    65636976    vice    DCD    1701013878
        0x008135fc:    666e6920     inf    DCD    1718511904
        0x00813600:    252d726f    or-%    DCD    623735407
        0x00813604:    00000064    d...    DCD    100
    $t
        0x00813608:    68a8        .h      LDR      r0,[r5,#8]
        0x0081360a:    f88d6038    ..8`    STRB     r6,[sp,#0x38]
        0x0081360e:    0c01        ..      LSRS     r1,r0,#16
        0x00813610:    f88d1035    ..5.    STRB     r1,[sp,#0x35]
;;;473        p_buf[50] = (tuya_ble_hardware_version>>8)&0xff;
        0x00813614:    0a01        ..      LSRS     r1,r0,#8
        0x00813616:    f88d1036    ..6.    STRB     r1,[sp,#0x36]
;;;474        p_buf[51] = (tuya_ble_hardware_version&0xff);
        0x0081361a:    f88d0037    ..7.    STRB     r0,[sp,#0x37]
;;;475    
;;;476        p_buf[52] = TUYA_BLE_DEVICE_COMMUNICATION_ABILITY>>8;
;;;477        p_buf[53] = TUYA_BLE_DEVICE_COMMUNICATION_ABILITY; //communication ability
        0x0081361e:    f88d9039    ..9.    STRB     r9,[sp,#0x39]
;;;478    
;;;479        p_buf[54] = 0x00;
        0x00813622:    f88d603a    ..:`    STRB     r6,[sp,#0x3a]
;;;480    
;;;481        memcpy(&p_buf[55],tuya_ble_current_para.sys_settings.device_virtual_id,DEVICE_VIRTUAL_ID_LEN);
        0x00813626:    2216        ."      MOVS     r2,#0x16
        0x00813628:    f5087190    ...q    ADD      r1,r8,#0x120
        0x0081362c:    f10d003b    ..;.    ADD      r0,sp,#0x3b
        0x00813630:    f446f433    F.3.    BL       __aeabi_memcpy ; 0x59e9a
;;;482    
;;;483        p_buf[77] = (tuya_ble_mcu_firmware_version>>16)&0xff;
        0x00813634:    68e8        .h      LDR      r0,[r5,#0xc]
        0x00813636:    2354        T#      MOVS     r3,#0x54
        0x00813638:    0c01        ..      LSRS     r1,r0,#16
        0x0081363a:    f88d1051    ..Q.    STRB     r1,[sp,#0x51]
;;;484        p_buf[78] = (tuya_ble_mcu_firmware_version>>8)&0xff;
        0x0081363e:    0a01        ..      LSRS     r1,r0,#8
        0x00813640:    f88d1052    ..R.    STRB     r1,[sp,#0x52]
;;;485        p_buf[79] = (tuya_ble_mcu_firmware_version&0xff);
        0x00813644:    f88d0053    ..S.    STRB     r0,[sp,#0x53]
;;;486        p_buf[80] = (tuya_ble_mcu_hardware_version>>16)&0xff;
        0x00813648:    6928        (i      LDR      r0,[r5,#0x10]
        0x0081364a:    aa01        ..      ADD      r2,sp,#4
        0x0081364c:    0c01        ..      LSRS     r1,r0,#16
        0x0081364e:    f88d1054    ..T.    STRB     r1,[sp,#0x54]
;;;487        p_buf[81] = (tuya_ble_mcu_hardware_version>>8)&0xff;
        0x00813652:    0a01        ..      LSRS     r1,r0,#8
        0x00813654:    f88d1055    ..U.    STRB     r1,[sp,#0x55]
;;;488        p_buf[82] = (tuya_ble_mcu_hardware_version&0xff);
        0x00813658:    f88d0056    ..V.    STRB     r0,[sp,#0x56]
;;;489        
;;;490        p_buf[83] = TUYA_BLE_WIFI_DEVICE_REGISTER_MODE;
        0x0081365c:    f88d6057    ..W`    STRB     r6,[sp,#0x57]
;;;491        
;;;492        payload_len = 84;
;;;493    
;;;494        encry_mode = recv_data[0];
        0x00813660:    7820         x      LDRB     r0,[r4,#0]
;;;495    
;;;496        if(tuya_ble_commData_send(FRM_QRY_DEV_INFO_RESP,ack_sn,p_buf,payload_len,encry_mode)==2)
        0x00813662:    9000        ..      STR      r0,[sp,#0]
        0x00813664:    4639        9F      MOV      r1,r7
        0x00813666:    2000        .       MOVS     r0,#0
        0x00813668:    f7fffcff    ....    BL       tuya_ble_commData_send ; 0x81306a
        0x0081366c:    2802        .(      CMP      r0,#2
        0x0081366e:    d101        ..      BNE      0x813674 ; tuya_ble_handle_dev_info_req + 828
;;;497        {
;;;498            tuya_ble_pair_rand_clear();
        0x00813670:    f7fff98d    ....    BL       tuya_ble_pair_rand_clear ; 0x81298e
;;;499        }
;;;500    }
        0x00813674:    b019        ..      ADD      sp,sp,#0x64
        0x00813676:    e8bd83f0    ....    POP      {r4-r9,pc}
    tuya_ble_handle_pair_req
;;;501    
;;;502    #else
;;;503    
;;;504    static void tuya_ble_handle_dev_info_req(uint8_t*recv_data,uint16_t recv_len)
;;;505    {
;;;506        uint8_t p_buf[90];
;;;507        uint8_t payload_len = 0;
;;;508        uint32_t ack_sn = 0;
;;;509        uint8_t encry_mode = 0;
;;;510        uint32_t version_temp_s,version_temp_h;
;;;511    
;;;512        ack_sn  = recv_data[1]<<24;
;;;513        ack_sn += recv_data[2]<<16;
;;;514        ack_sn += recv_data[3]<<8;
;;;515        ack_sn += recv_data[4];
;;;516    
;;;517        TUYA_BLE_LOG_DEBUG("get device infor-%d",tuya_ble_current_para.sys_settings.bound_flag);
;;;518    
;;;519        tuya_ble_rand_generator(tuya_ble_pair_rand,6);
;;;520        tuya_ble_pair_rand_valid = 1;
;;;521    
;;;522        if(TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;523        {
;;;524            version_temp_s = tuya_ble_firmware_version;
;;;525            version_temp_h = tuya_ble_hardware_version;
;;;526            p_buf[4] = 0x00;
;;;527        }
;;;528        else
;;;529        {
;;;530            version_temp_s = tuya_ble_firmware_version>>8;
;;;531            version_temp_h = tuya_ble_hardware_version>>8;
;;;532            p_buf[4] = 0x05;
;;;533        }
;;;534        p_buf[0] = (version_temp_s>>8)&0xff;
;;;535        p_buf[1] = (version_temp_s&0xff);
;;;536        p_buf[2] = TUYA_BLE_PROTOCOL_VERSION_HIGN;
;;;537        p_buf[3] = TUYA_BLE_PROTOCOL_VERSION_LOW;
;;;538        if(TUYA_BLE_ADVANCED_ENCRYPTION_DEVICE==1)
;;;539        {
;;;540            p_buf[4] |= 0x02;
;;;541        }
;;;542    
;;;543        p_buf[5] = tuya_ble_current_para.sys_settings.bound_flag;
;;;544        memcpy(&p_buf[6],tuya_ble_pair_rand,6);
;;;545        p_buf[12] = (version_temp_h>>8)&0xff;
;;;546        p_buf[13] = (version_temp_h&0xff);
;;;547        memcpy(&p_buf[14],tuya_ble_current_para.auth_settings.auth_key,AUTH_KEY_LEN);
;;;548    
;;;549        p_buf[46] = (tuya_ble_firmware_version>>16)&0xff;
;;;550        p_buf[47] = (tuya_ble_firmware_version>>8)&0xff;
;;;551        p_buf[48] = (tuya_ble_firmware_version&0xff);
;;;552        p_buf[49] = (tuya_ble_hardware_version>>16)&0xff;
;;;553        p_buf[50] = (tuya_ble_hardware_version>>8)&0xff;
;;;554        p_buf[51] = (tuya_ble_hardware_version&0xff);
;;;555    
;;;556        p_buf[52] = TUYA_BLE_DEVICE_COMMUNICATION_ABILITY>>8;
;;;557        p_buf[53] = TUYA_BLE_DEVICE_COMMUNICATION_ABILITY; //communication ability
;;;558    
;;;559        p_buf[54] = 0x00;
;;;560    
;;;561        memcpy(&p_buf[55],tuya_ble_current_para.sys_settings.device_virtual_id,DEVICE_VIRTUAL_ID_LEN);
;;;562    
;;;563        p_buf[77] = (tuya_ble_mcu_firmware_version>>16)&0xff;
;;;564        p_buf[78] = (tuya_ble_mcu_firmware_version>>8)&0xff;
;;;565        p_buf[79] = (tuya_ble_mcu_firmware_version&0xff);
;;;566        p_buf[80] = (tuya_ble_mcu_hardware_version>>16)&0xff;
;;;567        p_buf[81] = (tuya_ble_mcu_hardware_version>>8)&0xff;
;;;568        p_buf[82] = (tuya_ble_mcu_hardware_version&0xff);
;;;569    
;;;570        payload_len = 83;
;;;571    
;;;572        encry_mode = recv_data[0];
;;;573    
;;;574        if(tuya_ble_commData_send(FRM_QRY_DEV_INFO_RESP,ack_sn,p_buf,payload_len,encry_mode)==2)
;;;575        {
;;;576            tuya_ble_pair_rand_clear();
;;;577        }
;;;578    }
;;;579    
;;;580    #endif
;;;581    
;;;582    extern void tuya_ble_connect_monitor_timer_stop(void);
;;;583    static void tuya_ble_handle_pair_req(uint8_t*recv_data,uint16_t recv_len)
;;;584    {
        0x0081367a:    e92d4ff0    -..O    PUSH     {r4-r11,lr}
        0x0081367e:    4604        .F      MOV      r4,r0
;;;585        uint8_t p_buf[1];
;;;586        uint8_t encry_mode = 0;
;;;587        uint32_t ack_sn = 0;
;;;588        tuya_ble_cb_evt_param_t event;
;;;589    
;;;590        ack_sn  = recv_data[1]<<24;
        0x00813680:    7840        @x      LDRB     r0,[r0,#1]
        0x00813682:    78a1        .x      LDRB     r1,[r4,#2]
        0x00813684:    0600        ..      LSLS     r0,r0,#24
;;;591        ack_sn += recv_data[2]<<16;
        0x00813686:    eb004001    ...@    ADD      r0,r0,r1,LSL #16
;;;592        ack_sn += recv_data[3]<<8;
        0x0081368a:    78e1        .x      LDRB     r1,[r4,#3]
        0x0081368c:    b08b        ..      SUB      sp,sp,#0x2c
        0x0081368e:    eb002001    ...     ADD      r0,r0,r1,LSL #8
;;;593        ack_sn += recv_data[4];
        0x00813692:    7921        !y      LDRB     r1,[r4,#4]
        0x00813694:    2500        .%      MOVS     r5,#0
        0x00813696:    eb010b00    ....    ADD      r11,r1,r0
;;;594    
;;;595        if(0 == memcmp(&recv_data[13],tuya_ble_current_para.auth_settings.device_id,DEVICE_ID_LEN))
        0x0081369a:    2210        ."      MOVS     r2,#0x10
        0x0081369c:    49f1        .I      LDR      r1,[pc,#964] ; [0x813a64] = 0x2097ef
        0x0081369e:    f104000d    ....    ADD      r0,r4,#0xd
        0x008136a2:    f446f3af    F...    BL       memcmp ; 0x59e04
        0x008136a6:    f8df93c0    ....    LDR      r9,[pc,#960] ; [0x813a68] = 0x21103002
        0x008136aa:    f04f0801    O...    MOV      r8,#1
        0x008136ae:    b150        P.      CBZ      r0,0x8136c6 ; tuya_ble_handle_pair_req + 76
        0x008136b0:    a0ee        ..      ADR      r0,{pc}+0x3bc ; 0x813a6c
        0x008136b2:    f007fa7a    ..z.    BL       get_args ; 0x81abaa
        0x008136b6:    4602        .F      MOV      r2,r0
        0x008136b8:    49f7        .I      LDR      r1,[pc,#988] ; [0x813a98] = 0x880297c
        0x008136ba:    4648        HF      MOV      r0,r9
        0x008136bc:    f7f4d9cf    ....    BL       log_buffer ; 0x7a5e
        0x008136c0:    f88d8028    ..(.    STRB     r8,[sp,#0x28]
        0x008136c4:    e099        ..      B        0x8137fa ; tuya_ble_handle_pair_req + 384
;;;596        {
;;;597            tuya_ble_connect_monitor_timer_stop();
        0x008136c6:    f7fefd92    ....    BL       tuya_ble_connect_monitor_timer_stop ; 0x8121ee
;;;598            
;;;599            if(1==tuya_ble_get_adv_connect_request_bit_status())
        0x008136ca:    f001fcf5    ....    BL       tuya_ble_get_adv_connect_request_bit_status ; 0x8150b8
        0x008136ce:    2801        .(      CMP      r0,#1
        0x008136d0:    d109        ..      BNE      0x8136e6 ; tuya_ble_handle_pair_req + 108
;;;600            {
;;;601                TUYA_BLE_LOG_INFO("ble adv data update,because the last broadcast data connection request flag was set!");
        0x008136d2:    48f2        .H      LDR      r0,[pc,#968] ; [0x813a9c] = 0x81cf04
        0x008136d4:    f007fa69    ..i.    BL       get_args ; 0x81abaa
        0x008136d8:    4602        .F      MOV      r2,r0
        0x008136da:    49f1        .I      LDR      r1,[pc,#964] ; [0x813aa0] = 0x8802810
        0x008136dc:    4648        HF      MOV      r0,r9
        0x008136de:    f7f4d9be    ....    BL       log_buffer ; 0x7a5e
;;;602                tuya_ble_adv_change();
        0x008136e2:    f001fcee    ....    BL       tuya_ble_adv_change ; 0x8150c2
;;;603            }
;;;604    
;;;605            if(tuya_ble_current_para.sys_settings.bound_flag==1)
        0x008136e6:    4edf        .N      LDR      r6,[pc,#892] ; [0x813a64] = 0x2097ef
        0x008136e8:    3e1b        .>      SUBS     r6,r6,#0x1b
        0x008136ea:    f896013c    ..<.    LDRB     r0,[r6,#0x13c]
        0x008136ee:    2801        .(      CMP      r0,#1
        0x008136f0:    d042        B.      BEQ      0x813778 ; tuya_ble_handle_pair_req + 254
;;;606            {
;;;607                TUYA_BLE_LOG_INFO("PAIR_REQ already bound!");
;;;608                p_buf[0] = 2;
;;;609            }
;;;610            else
;;;611            {
;;;612    #if (TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;613                memcpy(tuya_ble_current_para.sys_settings.login_key,recv_data+29,LOGIN_KEY_LEN);
        0x008136f2:    4630        0F      MOV      r0,r6
        0x008136f4:    f1000780    ....    ADD      r7,r0,#0x80
        0x008136f8:    f8d4101d    ....    LDR      r1,[r4,#0x1d]
        0x008136fc:    f8401ffa    @...    STR      r1,[r0,#0xfa]!
        0x00813700:    f8b41021    ..!.    LDRH     r1,[r4,#0x21]
        0x00813704:    8081        ..      STRH     r1,[r0,#4]
;;;614                memcpy(tuya_ble_current_para.sys_settings.device_virtual_id,recv_data+29+LOGIN_KEY_LEN,DEVICE_VIRTUAL_ID_LEN);
        0x00813706:    f5067090    ...p    ADD      r0,r6,#0x120
        0x0081370a:    2216        ."      MOVS     r2,#0x16
        0x0081370c:    f1040123    ..#.    ADD      r1,r4,#0x23
        0x00813710:    4682        .F      MOV      r10,r0
        0x00813712:    f446f3c2    F...    BL       __aeabi_memcpy ; 0x59e9a
;;;615                tuya_ble_current_para.sys_settings.bound_flag = 1;
        0x00813716:    f886813c    ..<.    STRB     r8,[r6,#0x13c]
;;;616    
;;;617                tuya_ble_storage_save_sys_settings();
        0x0081371a:    f002f8b5    ....    BL       tuya_ble_storage_save_sys_settings ; 0x815888
;;;618    
;;;619                tuya_ble_adv_change();
        0x0081371e:    f001fcd0    ....    BL       tuya_ble_adv_change ; 0x8150c2
;;;620                TUYA_BLE_LOG_INFO("PAIR_REQ ok-%d",tuya_ble_current_para.sys_settings.bound_flag);
        0x00813722:    a0e0        ..      ADR      r0,{pc}+0x382 ; 0x813aa4
        0x00813724:    f007fa41    ..A.    BL       get_args ; 0x81abaa
        0x00813728:    49dd        .I      LDR      r1,[pc,#884] ; [0x813aa0] = 0x8802810
        0x0081372a:    4602        .F      MOV      r2,r0
        0x0081372c:    f896313c    ..<1    LDRB     r3,[r6,#0x13c]
        0x00813730:    318c        .1      ADDS     r1,r1,#0x8c
        0x00813732:    4648        HF      MOV      r0,r9
        0x00813734:    f7f4d993    ....    BL       log_buffer ; 0x7a5e
;;;621    
;;;622                event.evt = TUYA_BLE_CB_EVT_UPDATE_LOGIN_KEY_VID;
        0x00813738:    2050        P       MOVS     r0,#0x50
        0x0081373a:    f88d0004    ....    STRB     r0,[sp,#4]
;;;623                event.device_login_key_vid_data.login_key_len = LOGIN_KEY_LEN;
        0x0081373e:    2006        .       MOVS     r0,#6
        0x00813740:    f88d0008    ....    STRB     r0,[sp,#8]
;;;624                event.device_login_key_vid_data.vid_len = DEVICE_VIRTUAL_ID_LEN;
        0x00813744:    2016        .       MOVS     r0,#0x16
        0x00813746:    f88d0009    ....    STRB     r0,[sp,#9]
;;;625                memcpy( event.device_login_key_vid_data.login_key,tuya_ble_current_para.sys_settings.login_key,LOGIN_KEY_LEN);
        0x0081374a:    f8570f7a    W.z.    LDR      r0,[r7,#0x7a]!
        0x0081374e:    f8cd000a    ....    STR      r0,[sp,#0xa]
        0x00813752:    88b8        ..      LDRH     r0,[r7,#4]
        0x00813754:    f8ad000e    ....    STRH     r0,[sp,#0xe]
;;;626                memcpy( event.device_login_key_vid_data.vid,tuya_ble_current_para.sys_settings.device_virtual_id,DEVICE_VIRTUAL_ID_LEN);
        0x00813758:    2216        ."      MOVS     r2,#0x16
        0x0081375a:    4651        QF      MOV      r1,r10
        0x0081375c:    a804        ..      ADD      r0,sp,#0x10
        0x0081375e:    f446f423    F.#.    BL       __aeabi_memcpy4 ; 0x59fa8
;;;627                if(tuya_ble_cb_event_send(&event)!=0)
        0x00813762:    a801        ..      ADD      r0,sp,#4
        0x00813764:    f001fc9a    ....    BL       tuya_ble_cb_event_send ; 0x81509c
        0x00813768:    b188        ..      CBZ      r0,0x81378e ; tuya_ble_handle_pair_req + 276
;;;628                {
;;;629                    TUYA_BLE_LOG_ERROR("tuya ble send cb event failed.");
        0x0081376a:    a0d6        ..      ADR      r0,{pc}+0x35a ; 0x813ac4
        0x0081376c:    f007fa1d    ....    BL       get_args ; 0x81abaa
        0x00813770:    49cb        .I      LDR      r1,[pc,#812] ; [0x813aa0] = 0x8802810
        0x00813772:    4602        .F      MOV      r2,r0
        0x00813774:    31ac        .1      ADDS     r1,r1,#0xac
        0x00813776:    e010        ..      B        0x81379a ; tuya_ble_handle_pair_req + 288
        0x00813778:    a0de        ..      ADR      r0,{pc}+0x37c ; 0x813af4
        0x0081377a:    f007fa16    ....    BL       get_args ; 0x81abaa
        0x0081377e:    49c8        .I      LDR      r1,[pc,#800] ; [0x813aa0] = 0x8802810
        0x00813780:    4602        .F      MOV      r2,r0
        0x00813782:    3164        d1      ADDS     r1,r1,#0x64
        0x00813784:    4648        HF      MOV      r0,r9
        0x00813786:    f7f4d96a    ..j.    BL       log_buffer ; 0x7a5e
        0x0081378a:    2002        .       MOVS     r0,#2
        0x0081378c:    e009        ..      B        0x8137a2 ; tuya_ble_handle_pair_req + 296
;;;630                }
;;;631                else
;;;632                {
;;;633                    TUYA_BLE_LOG_DEBUG("tuya ble send cb event succeed.");
        0x0081378e:    a0e3        ..      ADR      r0,{pc}+0x38e ; 0x813b1c
        0x00813790:    f007fa0b    ....    BL       get_args ; 0x81abaa
        0x00813794:    49c0        .I      LDR      r1,[pc,#768] ; [0x813a98] = 0x880297c
        0x00813796:    4602        .F      MOV      r2,r0
        0x00813798:    3990        .9      SUBS     r1,r1,#0x90
        0x0081379a:    4648        HF      MOV      r0,r9
        0x0081379c:    f7f4d95f    .._.    BL       log_buffer ; 0x7a5e
;;;634                }
;;;635    
;;;636    
;;;637    #else
;;;638                tuya_ble_connect_status_set(UNBONDING_CONN);
;;;639    #endif
;;;640                p_buf[0] = 0x00;
        0x008137a0:    2000        .       MOVS     r0,#0
        0x008137a2:    f88d0028    ..(.    STRB     r0,[sp,#0x28]
;;;641            }
;;;642    
;;;643            if(tuya_ble_current_para.sys_settings.bound_flag==1)
        0x008137a6:    f896013c    ..<.    LDRB     r0,[r6,#0x13c]
        0x008137aa:    2801        .(      CMP      r0,#1
        0x008137ac:    d102        ..      BNE      0x8137b4 ; tuya_ble_handle_pair_req + 314
;;;644            {
;;;645                tuya_ble_connect_status_set(BONDING_CONN);
        0x008137ae:    2003        .       MOVS     r0,#3
        0x008137b0:    f001fc2e    ....    BL       tuya_ble_connect_status_set ; 0x815010
;;;646            }
;;;647            event.evt = TUYA_BLE_CB_EVT_CONNECTE_STATUS;
        0x008137b4:    2040        @       MOVS     r0,#0x40
        0x008137b6:    f88d0004    ....    STRB     r0,[sp,#4]
;;;648            event.connect_status = tuya_ble_connect_status_get();
        0x008137ba:    f001fc33    ..3.    BL       tuya_ble_connect_status_get ; 0x815024
        0x008137be:    f88d0008    ....    STRB     r0,[sp,#8]
;;;649            if(tuya_ble_cb_event_send(&event)!=0)
        0x008137c2:    a801        ..      ADD      r0,sp,#4
        0x008137c4:    f001fc6a    ..j.    BL       tuya_ble_cb_event_send ; 0x81509c
        0x008137c8:    b130        0.      CBZ      r0,0x8137d8 ; tuya_ble_handle_pair_req + 350
;;;650            {
;;;651                TUYA_BLE_LOG_ERROR("tuya ble send cb event failed.");
        0x008137ca:    a0be        ..      ADR      r0,{pc}+0x2fa ; 0x813ac4
        0x008137cc:    f007f9ed    ....    BL       get_args ; 0x81abaa
        0x008137d0:    49b1        .I      LDR      r1,[pc,#708] ; [0x813a98] = 0x880297c
        0x008137d2:    4602        .F      MOV      r2,r0
        0x008137d4:    3960        `9      SUBS     r1,r1,#0x60
        0x008137d6:    e005        ..      B        0x8137e4 ; tuya_ble_handle_pair_req + 362
        0x008137d8:    a0dc        ..      ADR      r0,{pc}+0x374 ; 0x813b4c
        0x008137da:    f007f9e6    ....    BL       get_args ; 0x81abaa
        0x008137de:    49ae        .I      LDR      r1,[pc,#696] ; [0x813a98] = 0x880297c
        0x008137e0:    4602        .F      MOV      r2,r0
        0x008137e2:    3930        09      SUBS     r1,r1,#0x30
        0x008137e4:    4648        HF      MOV      r0,r9
        0x008137e6:    f7f4d93a    ..:.    BL       log_buffer ; 0x7a5e
;;;652            }
;;;653            else
;;;654            {
;;;655                TUYA_BLE_LOG_INFO("tuya ble send cb event succeed.");
;;;656            }
;;;657    
;;;658    
;;;659        }
;;;660        else
;;;661        {
;;;662            TUYA_BLE_LOG_ERROR("PAIR_REQ device id not match!");  //ID not match ,and disconnected.
;;;663            p_buf[0] = 0x01;
;;;664    
;;;665        }
;;;666    
;;;667    
;;;668        if(p_buf[0]==0)
        0x008137ea:    f89d0028    ..(.    LDRB     r0,[sp,#0x28]
        0x008137ee:    b130        0.      CBZ      r0,0x8137fe ; tuya_ble_handle_pair_req + 388
;;;669        {
;;;670    #if (TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;671            encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;672    #else
;;;673            encry_mode = recv_data[0];
;;;674    #endif
;;;675        }
;;;676        else if(p_buf[0]==1)
        0x008137f0:    2801        .(      CMP      r0,#1
        0x008137f2:    d002        ..      BEQ      0x8137fa ; tuya_ble_handle_pair_req + 384
        0x008137f4:    2802        .(      CMP      r0,#2
        0x008137f6:    d002        ..      BEQ      0x8137fe ; tuya_ble_handle_pair_req + 388
        0x008137f8:    e002        ..      B        0x813800 ; tuya_ble_handle_pair_req + 390
;;;677        {
;;;678            encry_mode = recv_data[0];
        0x008137fa:    7825        %x      LDRB     r5,[r4,#0]
        0x008137fc:    e000        ..      B        0x813800 ; tuya_ble_handle_pair_req + 390
;;;679        }
;;;680        else if(p_buf[0]==2)
;;;681        {
;;;682            encry_mode = ENCRYPTION_MODE_SESSION_KEY;
        0x008137fe:    2505        .%      MOVS     r5,#5
;;;683        }
;;;684        else
;;;685        {
;;;686    
;;;687        }
;;;688    
;;;689        tuya_ble_commData_send(PAIR_RESP,ack_sn,p_buf,1,encry_mode);
        0x00813800:    2301        .#      MOVS     r3,#1
        0x00813802:    aa0a        ..      ADD      r2,sp,#0x28
        0x00813804:    4659        YF      MOV      r1,r11
        0x00813806:    4618        .F      MOV      r0,r3
        0x00813808:    9500        ..      STR      r5,[sp,#0]
        0x0081380a:    f7fffc2e    ....    BL       tuya_ble_commData_send ; 0x81306a
;;;690    
;;;691        if(encry_mode == ENCRYPTION_MODE_SESSION_KEY)
        0x0081380e:    2d05        .-      CMP      r5,#5
        0x00813810:    d110        ..      BNE      0x813834 ; tuya_ble_handle_pair_req + 442
;;;692        {
;;;693            tuya_ble_commData_send(FRM_GET_UNIX_TIME_CHAR_MS_REQ,0,NULL,0,encry_mode);
        0x00813812:    2300        .#      MOVS     r3,#0
        0x00813814:    461a        .F      MOV      r2,r3
        0x00813816:    4619        .F      MOV      r1,r3
        0x00813818:    f2480011    H...    MOV      r0,#0x8011
        0x0081381c:    9500        ..      STR      r5,[sp,#0]
        0x0081381e:    f7fffc24    ..$.    BL       tuya_ble_commData_send ; 0x81306a
;;;694            TUYA_BLE_LOG_INFO("send FRM_GET_UNIX_TIME_CHAR_MS_REQ cmd to app.\n");
        0x00813822:    a0d6        ..      ADR      r0,{pc}+0x35a ; 0x813b7c
        0x00813824:    f007f9c1    ....    BL       get_args ; 0x81abaa
        0x00813828:    499b        .I      LDR      r1,[pc,#620] ; [0x813a98] = 0x880297c
        0x0081382a:    4602        .F      MOV      r2,r0
        0x0081382c:    312c        ,1      ADDS     r1,r1,#0x2c
        0x0081382e:    4648        HF      MOV      r0,r9
        0x00813830:    f7f4d915    ....    BL       log_buffer ; 0x7a5e
;;;695        }
;;;696    
;;;697        if(p_buf[0]==1)
        0x00813834:    f89d0028    ..(.    LDRB     r0,[sp,#0x28]
        0x00813838:    2801        .(      CMP      r0,#1
        0x0081383a:    d101        ..      BNE      0x813840 ; tuya_ble_handle_pair_req + 454
;;;698        {
;;;699            tuya_ble_gap_disconnect();
        0x0081383c:    f007f818    ....    BL       tuya_ble_gap_disconnect ; 0x81a870
;;;700        }
;;;701    
;;;702    }
        0x00813840:    b00b        ..      ADD      sp,sp,#0x2c
        0x00813842:    e443        C.      B        0x8130cc ; tuya_ble_commData_send + 98
    tuya_ble_handle_net_config_info_req
;;;703    
;;;704    #endif
;;;705    
;;;706    #if (TUYA_BLE_PROTOCOL_VERSION_HIGN==2)
;;;707    
;;;708    static void tuya_ble_handle_dev_info_req(uint8_t*recv_data,uint16_t recv_len)
;;;709    {
;;;710        uint8_t p_buf[70];
;;;711        uint8_t payload_len = 0;
;;;712        uint32_t ack_sn = 0;
;;;713        uint8_t encry_mode = 0;
;;;714    
;;;715        ack_sn  = recv_data[1]<<24;
;;;716        ack_sn += recv_data[2]<<16;
;;;717        ack_sn += recv_data[3]<<8;
;;;718        ack_sn += recv_data[4];
;;;719    
;;;720        TUYA_BLE_LOG_INFO("get device infor-%d",tuya_ble_current_para.sys_settings.bound_flag);
;;;721    
;;;722        tuya_ble_rand_generator(tuya_ble_pair_rand,6);
;;;723        tuya_ble_pair_rand_valid = 1;
;;;724    
;;;725    
;;;726        p_buf[0] = (tuya_ble_firmware_version>>8)&0xff;
;;;727        p_buf[1] = (tuya_ble_firmware_version&0xff);
;;;728        p_buf[2] = TUYA_BLE_PROTOCOL_VERSION_HIGN;
;;;729        p_buf[3] = TUYA_BLE_PROTOCOL_VERSION_LOW;
;;;730        if(TUYA_BLE_ADVANCED_ENCRYPTION_DEVICE==1)
;;;731        {
;;;732            p_buf[4] = 0x02;
;;;733        }
;;;734        else
;;;735        {
;;;736            p_buf[4] = 0x00;
;;;737        }
;;;738        p_buf[5] = tuya_ble_current_para.sys_settings.bound_flag;
;;;739        memcpy(&p_buf[6],tuya_ble_pair_rand,6);
;;;740        p_buf[12] = (tuya_ble_hardware_version>>8)&0xff;
;;;741        p_buf[13] = (tuya_ble_hardware_version&0xff);
;;;742        memcpy(&p_buf[14],tuya_ble_current_para.auth_settings.auth_key,AUTH_KEY_LEN);
;;;743    
;;;744        payload_len = 46;
;;;745    
;;;746        encry_mode = recv_data[0];
;;;747    
;;;748        if(tuya_ble_commData_send(FRM_QRY_DEV_INFO_RESP,ack_sn,p_buf,payload_len,encry_mode)==2)
;;;749        {
;;;750            tuya_ble_pair_rand_clear();
;;;751        }
;;;752        
;;;753    }
;;;754    
;;;755    extern void tuya_ble_connect_monitor_timer_stop(void);
;;;756    static void tuya_ble_handle_pair_req(uint8_t*recv_data,uint16_t recv_len)
;;;757    {
;;;758        uint8_t p_buf[1];
;;;759        uint8_t encry_mode = 0;
;;;760        uint32_t ack_sn = 0;
;;;761        tuya_ble_cb_evt_param_t event;
;;;762    
;;;763        ack_sn  = recv_data[1]<<24;
;;;764        ack_sn += recv_data[2]<<16;
;;;765        ack_sn += recv_data[3]<<8;
;;;766        ack_sn += recv_data[4];
;;;767    
;;;768        if(0 == memcmp(&recv_data[13],tuya_ble_current_para.auth_settings.device_id,DEVICE_ID_LEN))
;;;769        {
;;;770            tuya_ble_connect_monitor_timer_stop();
;;;771            
;;;772            if(tuya_ble_current_para.sys_settings.bound_flag==1)
;;;773            {
;;;774                TUYA_BLE_LOG_ERROR("PAIR_REQ already bound!");
;;;775                p_buf[0] = 2;
;;;776            }
;;;777            else
;;;778            {
;;;779    
;;;780    #if (TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;781    
;;;782                memcpy(tuya_ble_current_para.sys_settings.login_key,recv_data+29,LOGIN_KEY_LEN);
;;;783                tuya_ble_current_para.sys_settings.bound_flag = 1;
;;;784                tuya_ble_storage_save_sys_settings();
;;;785                tuya_ble_adv_change();
;;;786                TUYA_BLE_LOG_INFO("PAIR_REQ ok-%d",tuya_ble_current_para.sys_settings.bound_flag);
;;;787                
;;;788                event.evt = TUYA_BLE_CB_EVT_UPDATE_LOGIN_KEY_VID;
;;;789                event.device_login_key_vid_data.login_key_len = LOGIN_KEY_LEN;
;;;790                event.device_login_key_vid_data.vid_len = 0;
;;;791                memcpy( event.device_login_key_vid_data.login_key,tuya_ble_current_para.sys_settings.login_key,LOGIN_KEY_LEN);
;;;792    
;;;793                if(tuya_ble_cb_event_send(&event)!=0)
;;;794                {
;;;795                    TUYA_BLE_LOG_ERROR("tuya ble send cb event failed.");
;;;796                }
;;;797                else
;;;798                {
;;;799                    TUYA_BLE_LOG_DEBUG("tuya ble send cb event succeed.");
;;;800                }
;;;801                
;;;802    #else
;;;803                tuya_ble_connect_status_set(UNBONDING_CONN);
;;;804    #endif
;;;805                p_buf[0] = 0x00;
;;;806    
;;;807            }
;;;808    
;;;809            if(tuya_ble_current_para.sys_settings.bound_flag==1)
;;;810            {
;;;811                tuya_ble_connect_status_set(BONDING_CONN);
;;;812            }
;;;813    
;;;814            event.evt = TUYA_BLE_CB_EVT_CONNECTE_STATUS;
;;;815            event.connect_status = tuya_ble_connect_status_get();
;;;816            if(tuya_ble_cb_event_send(&event)!=0)
;;;817            {
;;;818                TUYA_BLE_LOG_ERROR("tuya ble send cb event failed.");
;;;819            }
;;;820            else
;;;821            {
;;;822                TUYA_BLE_LOG_INFO("tuya ble send cb event succeed.");
;;;823            }
;;;824    
;;;825    
;;;826        }
;;;827        else
;;;828        {
;;;829            TUYA_BLE_LOG_ERROR("PAIR_REQ device id not match!");  //ID not match ,and disconnected.
;;;830            p_buf[0] = 0x01;
;;;831    
;;;832        }
;;;833    
;;;834    
;;;835        if(p_buf[0]==0)
;;;836        {
;;;837    #if (TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;838            encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;839    #else
;;;840            encry_mode = recv_data[0];
;;;841    #endif
;;;842        }
;;;843        else if(p_buf[0]==1)
;;;844        {
;;;845            encry_mode = recv_data[0];
;;;846        }
;;;847        else if(p_buf[0]==2)
;;;848        {
;;;849            encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;850        }
;;;851        else
;;;852        {
;;;853    
;;;854        }
;;;855    
;;;856        tuya_ble_commData_send(PAIR_RESP,ack_sn,p_buf,1,encry_mode);
;;;857    
;;;858        if(encry_mode == ENCRYPTION_MODE_SESSION_KEY)
;;;859        {
;;;860            tuya_ble_commData_send(FRM_GET_UNIX_TIME_CHAR_MS_REQ,0,NULL,0,encry_mode);
;;;861            TUYA_BLE_LOG_INFO("send FRM_GET_UNIX_TIME_CHAR_MS_REQ cmd to app.");
;;;862        }
;;;863    
;;;864        if(p_buf[0]==1)
;;;865        {
;;;866            tuya_ble_gap_disconnect();
;;;867        }
;;;868    
;;;869    }
;;;870    
;;;871    #endif
;;;872    
;;;873    static void tuya_ble_handle_net_config_info_req(uint8_t*recv_data,uint16_t recv_len)
;;;874    {
        0x00813844:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x00813848:    4604        .F      MOV      r4,r0
;;;875        uint8_t p_buf[1];
;;;876        uint8_t encry_mode = 0;
;;;877        uint32_t ack_sn = 0;
;;;878        tuya_ble_cb_evt_param_t event;
;;;879        uint16_t data_len;
;;;880    
;;;881    
;;;882        ack_sn  = recv_data[1]<<24;
        0x0081384a:    7840        @x      LDRB     r0,[r0,#1]
        0x0081384c:    78a1        .x      LDRB     r1,[r4,#2]
        0x0081384e:    0600        ..      LSLS     r0,r0,#24
;;;883        ack_sn += recv_data[2]<<16;
        0x00813850:    eb004001    ...@    ADD      r0,r0,r1,LSL #16
;;;884        ack_sn += recv_data[3]<<8;
        0x00813854:    78e1        .x      LDRB     r1,[r4,#3]
        0x00813856:    b08c        ..      SUB      sp,sp,#0x30
        0x00813858:    eb002001    ...     ADD      r0,r0,r1,LSL #8
;;;885        ack_sn += recv_data[4];
        0x0081385c:    7921        !y      LDRB     r1,[r4,#4]
        0x0081385e:    7825        %x      LDRB     r5,[r4,#0]
        0x00813860:    eb010a00    ....    ADD      r10,r1,r0
;;;886        data_len = (recv_data[11]<<8) + recv_data[12];
        0x00813864:    7b20         {      LDRB     r0,[r4,#0xc]
        0x00813866:    7ae1        .z      LDRB     r1,[r4,#0xb]
        0x00813868:    eb002001    ...     ADD      r0,r0,r1,LSL #8
        0x0081386c:    b287        ..      UXTH     r7,r0
;;;887        encry_mode = recv_data[0];
;;;888    
;;;889        event.evt = TUYA_BLE_CB_EVT_NETWORK_INFO;
        0x0081386e:    2044        D       MOVS     r0,#0x44
        0x00813870:    f88d0004    ....    STRB     r0,[sp,#4]
;;;890        uint8_t *ble_cb_evt_buffer=(uint8_t*)tuya_ble_malloc(data_len);
        0x00813874:    4638        8F      MOV      r0,r7
        0x00813876:    f001fd8b    ....    BL       tuya_ble_malloc ; 0x815390
        0x0081387a:    f8df91ec    ....    LDR      r9,[pc,#492] ; [0x813a68] = 0x21103002
        0x0081387e:    0006        ..      MOVS     r6,r0
        0x00813880:    f04f0801    O...    MOV      r8,#1
;;;891        if(ble_cb_evt_buffer==NULL)
        0x00813884:    d01f        ..      BEQ      0x8138c6 ; tuya_ble_handle_net_config_info_req + 130
;;;892        {
;;;893            p_buf[0]=1;
;;;894            TUYA_BLE_LOG_ERROR("ble_cb_evt_buffer malloc failed.");
;;;895            tuya_ble_commData_send(FRM_NET_CONFIG_INFO_RESP,ack_sn,p_buf,1,encry_mode);
;;;896            return;
;;;897        }
;;;898        else
;;;899        {
;;;900            memset(ble_cb_evt_buffer,0,data_len);
        0x00813886:    4639        9F      MOV      r1,r7
        0x00813888:    f446f3c8    F...    BL       __aeabi_memclr ; 0x5a01c
;;;901            memcpy(ble_cb_evt_buffer,&recv_data[13],data_len);
        0x0081388c:    463a        :F      MOV      r2,r7
        0x0081388e:    f104010d    ....    ADD      r1,r4,#0xd
        0x00813892:    4630        0F      MOV      r0,r6
        0x00813894:    f446f301    F...    BL       __aeabi_memcpy ; 0x59e9a
        0x00813898:    f8ad7008    ...p    STRH     r7,[sp,#8]
        0x0081389c:    a801        ..      ADD      r0,sp,#4
        0x0081389e:    9603        ..      STR      r6,[sp,#0xc]
        0x008138a0:    f001fbfc    ....    BL       tuya_ble_cb_event_send ; 0x81509c
        0x008138a4:    2800        .(      CMP      r0,#0
        0x008138a6:    d01a        ..      BEQ      0x8138de ; tuya_ble_handle_net_config_info_req + 154
;;;902        }
;;;903        event.network_data.data_len = data_len;
;;;904        event.network_data.p_data = ble_cb_evt_buffer;
;;;905    
;;;906        if(tuya_ble_cb_event_send(&event)!=0)
;;;907        {
;;;908            tuya_ble_free(ble_cb_evt_buffer);
        0x008138a8:    4630        0F      MOV      r0,r6
        0x008138aa:    f001fd7c    ..|.    BL       tuya_ble_free ; 0x8153a6
;;;909            TUYA_BLE_LOG_ERROR("tuya ble send cb event failed.");
        0x008138ae:    a085        ..      ADR      r0,{pc}+0x216 ; 0x813ac4
        0x008138b0:    f007f97b    ..{.    BL       get_args ; 0x81abaa
        0x008138b4:    4978        xI      LDR      r1,[pc,#480] ; [0x813a98] = 0x880297c
        0x008138b6:    4602        .F      MOV      r2,r0
        0x008138b8:    319c        .1      ADDS     r1,r1,#0x9c
        0x008138ba:    4648        HF      MOV      r0,r9
        0x008138bc:    f7f4d8cf    ....    BL       log_buffer ; 0x7a5e
;;;910            p_buf[0]=1;
        0x008138c0:    f88d8028    ..(.    STRB     r8,[sp,#0x28]
;;;911            tuya_ble_commData_send(FRM_NET_CONFIG_INFO_RESP,ack_sn,p_buf,1,encry_mode);
;;;912            return;
        0x008138c4:    e00e        ..      B        0x8138e4 ; tuya_ble_handle_net_config_info_req + 160
        0x008138c6:    f88d8028    ..(.    STRB     r8,[sp,#0x28]
        0x008138ca:    a0bc        ..      ADR      r0,{pc}+0x2f2 ; 0x813bbc
        0x008138cc:    f007f96d    ..m.    BL       get_args ; 0x81abaa
        0x008138d0:    4971        qI      LDR      r1,[pc,#452] ; [0x813a98] = 0x880297c
        0x008138d2:    4602        .F      MOV      r2,r0
        0x008138d4:    316c        l1      ADDS     r1,r1,#0x6c
        0x008138d6:    4648        HF      MOV      r0,r9
        0x008138d8:    f7f4d8c1    ....    BL       log_buffer ; 0x7a5e
        0x008138dc:    e002        ..      B        0x8138e4 ; tuya_ble_handle_net_config_info_req + 160
;;;913        }
;;;914        else
;;;915        {
;;;916            p_buf[0]=0;
        0x008138de:    2000        .       MOVS     r0,#0
        0x008138e0:    f88d0028    ..(.    STRB     r0,[sp,#0x28]
;;;917        }
;;;918    
;;;919        tuya_ble_commData_send(FRM_NET_CONFIG_INFO_RESP,ack_sn,p_buf,1,encry_mode);
        0x008138e4:    2301        .#      MOVS     r3,#1
        0x008138e6:    aa0a        ..      ADD      r2,sp,#0x28
        0x008138e8:    4651        QF      MOV      r1,r10
        0x008138ea:    2021        !       MOVS     r0,#0x21
        0x008138ec:    9500        ..      STR      r5,[sp,#0]
        0x008138ee:    f7fffbbc    ....    BL       tuya_ble_commData_send ; 0x81306a
;;;920    
;;;921    
;;;922    }
        0x008138f2:    b00c        ..      ADD      sp,sp,#0x30
        0x008138f4:    e8bd87f0    ....    POP      {r4-r10,pc}
    tuya_ble_handle_ota_req
;;;923    
;;;924    
;;;925    static void tuya_ble_handle_ble_passthrough_data_req(uint8_t*recv_data,uint16_t recv_len)
;;;926    {
;;;927        tuya_ble_cb_evt_param_t event;
;;;928        uint16_t data_len;
;;;929    
;;;930        data_len = (recv_data[11]<<8) + recv_data[12];
;;;931    
;;;932        event.evt = TUYA_BLE_CB_EVT_DATA_PASSTHROUGH;
;;;933    
;;;934        uint8_t *ble_cb_evt_buffer=(uint8_t*)tuya_ble_malloc(data_len);
;;;935        if(ble_cb_evt_buffer==NULL)
;;;936        {
;;;937            TUYA_BLE_LOG_ERROR("ble_cb_evt_buffer malloc failed.");
;;;938            return;
;;;939        }
;;;940        else
;;;941        {
;;;942            memcpy(ble_cb_evt_buffer,&recv_data[13],data_len);
;;;943        }
;;;944        event.ble_passthrough_data.data_len = data_len;
;;;945        event.ble_passthrough_data.p_data = ble_cb_evt_buffer;
;;;946    
;;;947        if(tuya_ble_cb_event_send(&event)!=0)
;;;948        {
;;;949            tuya_ble_free(ble_cb_evt_buffer);
;;;950            TUYA_BLE_LOG_ERROR("tuya ble send cb event failed.");
;;;951        }
;;;952        else
;;;953        {
;;;954    
;;;955        }
;;;956    
;;;957    }
;;;958    
;;;959    #include "tuya_ble_app_production_test.h"
;;;960    static void tuya_ble_handle_ble_factory_test_req(uint8_t*recv_data,uint16_t recv_len)
;;;961    {
;;;962        uint16_t data_len;
;;;963        uint32_t ack_sn;
;;;964        uint8_t sum;
;;;965        uint8_t encry_mode;
;;;966    
;;;967        data_len = (recv_data[11]<<8) + recv_data[12];
;;;968    
;;;969        if(data_len<7)
;;;970        {
;;;971            return;
;;;972        }
;;;973    
;;;974        ack_sn  = recv_data[1]<<24;
;;;975        ack_sn += recv_data[2]<<16;
;;;976        ack_sn += recv_data[3]<<8;
;;;977        ack_sn += recv_data[4];
;;;978    
;;;979        encry_mode = recv_data[0];
;;;980    
;;;981        if((recv_data[13]==0x66)&&(recv_data[14]==0xAA))
;;;982        {
;;;983            sum = tuya_ble_check_sum(&recv_data[13],data_len-1);
;;;984            if(sum==recv_data[13+data_len-1])
;;;985            {
;;;986                tuya_ble_app_production_test_process(1,&recv_data[13],data_len);
;;;987            }
;;;988        }
;;;989    
;;;990    }
;;;991    
;;;992    
;;;993    #include "tuya_ble_app_uart_common_handler.h"
;;;994    static void tuya_ble_handle_ota_req(uint16_t cmd,uint8_t*recv_data,uint32_t recv_len)
;;;995    {
        0x008138f8:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x008138fc:    4607        .F      MOV      r7,r0
        0x008138fe:    460c        .F      MOV      r4,r1
        0x00813900:    7b08        .{      LDRB     r0,[r1,#0xc]
        0x00813902:    7ac9        .z      LDRB     r1,[r1,#0xb]
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_data_handler.c (995)
        0x00813904:    b08a        ..      SUB      sp,sp,#0x28
        0x00813906:    eb002001    ...     ADD      r0,r0,r1,LSL #8
        0x0081390a:    0405        ..      LSLS     r5,r0,#16
        0x0081390c:    0c2d        -.      LSRS     r5,r5,#16
        0x0081390e:    d021        !.      BEQ      0x813954 ; tuya_ble_handle_ota_req + 92
;;;996        tuya_ble_cb_evt_param_t event;
;;;997        uint16_t data_len;
;;;998        tuya_ble_ota_data_type_t cmd_type;
;;;999    
;;;1000       data_len = (recv_data[11]<<8) + recv_data[12];
;;;1001   
;;;1002       if(data_len==0)
;;;1003       {
;;;1004           return;
;;;1005       }
;;;1006   
;;;1007       if(recv_data[13]==1)  //extern mcu ota
        0x00813910:    7b60        `{      LDRB     r0,[r4,#0xd]
        0x00813912:    2801        .(      CMP      r0,#1
        0x00813914:    d018        ..      BEQ      0x813948 ; tuya_ble_handle_ota_req + 80
;;;1008       {
;;;1009           tuya_ble_uart_common_mcu_ota_data_from_ble_handler(cmd,&recv_data[14],data_len-1);
;;;1010       }
;;;1011       else if(recv_data[13]==0)
        0x00813916:    2800        .(      CMP      r0,#0
        0x00813918:    d11c        ..      BNE      0x813954 ; tuya_ble_handle_ota_req + 92
;;;1012       {
;;;1013           event.evt = TUYA_BLE_CB_EVT_OTA_DATA;
        0x0081391a:    2043        C       MOVS     r0,#0x43
        0x0081391c:    f88d0000    ....    STRB     r0,[sp,#0]
;;;1014   
;;;1015           uint8_t *ble_cb_evt_buffer=(uint8_t*)tuya_ble_malloc(data_len);
        0x00813920:    4628        (F      MOV      r0,r5
        0x00813922:    f001fd35    ..5.    BL       tuya_ble_malloc ; 0x815390
        0x00813926:    f8df8140    ..@.    LDR      r8,[pc,#320] ; [0x813a68] = 0x21103002
        0x0081392a:    0006        ..      MOVS     r6,r0
;;;1016           if(ble_cb_evt_buffer==NULL)
        0x0081392c:    d015        ..      BEQ      0x81395a ; tuya_ble_handle_ota_req + 98
        0x0081392e:    462a        *F      MOV      r2,r5
        0x00813930:    f104010d    ....    ADD      r1,r4,#0xd
        0x00813934:    f446f2b1    F...    BL       __aeabi_memcpy ; 0x59e9a
        0x00813938:    3f0c        .?      SUBS     r7,r7,#0xc
        0x0081393a:    2f05        ./      CMP      r7,#5
        0x0081393c:    d21d        ..      BCS      0x81397a ; tuya_ble_handle_ota_req + 130
        0x0081393e:    e8dff007    ....    TBB      [pc,r7]
    $d
        0x00813942:    1412        ..      DCW    5138
        0x00813944:    001a1816    ....    DCD    1710102
    $t
        0x00813948:    1e6a        j.      SUBS     r2,r5,#1
        0x0081394a:    f104010e    ....    ADD      r1,r4,#0xe
        0x0081394e:    4638        8F      MOV      r0,r7
        0x00813950:    f003ff60    ..`.    BL       tuya_ble_uart_common_mcu_ota_data_from_ble_handler ; 0x817814
        0x00813954:    b00a        ..      ADD      sp,sp,#0x28
        0x00813956:    e8bd81f0    ....    POP      {r4-r8,pc}
;;;1017           {
;;;1018               TUYA_BLE_LOG_ERROR("ble_cb_evt_buffer malloc failed.");
        0x0081395a:    a098        ..      ADR      r0,{pc}+0x262 ; 0x813bbc
        0x0081395c:    f007f925    ..%.    BL       get_args ; 0x81abaa
        0x00813960:    4602        .F      MOV      r2,r0
        0x00813962:    49a2        .I      LDR      r1,[pc,#648] ; [0x813bec] = 0x8802aa8
;;;1019               return;
        0x00813964:    e01d        ..      B        0x8139a2 ; tuya_ble_handle_ota_req + 170
;;;1020           }
;;;1021           else
;;;1022           {
;;;1023               memcpy(ble_cb_evt_buffer,&recv_data[13],data_len);
;;;1024           }
;;;1025   
;;;1026           switch (cmd)
;;;1027           {
;;;1028           case FRM_OTA_START_REQ:
;;;1029               cmd_type = TUYA_BLE_OTA_REQ;
        0x00813966:    2000        .       MOVS     r0,#0
;;;1030               break;
        0x00813968:    e008        ..      B        0x81397c ; tuya_ble_handle_ota_req + 132
;;;1031           case FRM_OTA_FILE_INFOR_REQ:
;;;1032               cmd_type = TUYA_BLE_OTA_FILE_INFO;
        0x0081396a:    2001        .       MOVS     r0,#1
;;;1033               break;
        0x0081396c:    e006        ..      B        0x81397c ; tuya_ble_handle_ota_req + 132
;;;1034           case FRM_OTA_FILE_OFFSET_REQ:
;;;1035               cmd_type = TUYA_BLE_OTA_FILE_OFFSET_REQ;
        0x0081396e:    2002        .       MOVS     r0,#2
;;;1036               break;
        0x00813970:    e004        ..      B        0x81397c ; tuya_ble_handle_ota_req + 132
;;;1037           case FRM_OTA_DATA_REQ:
;;;1038               cmd_type = TUYA_BLE_OTA_DATA;
        0x00813972:    2003        .       MOVS     r0,#3
;;;1039               break;
        0x00813974:    e002        ..      B        0x81397c ; tuya_ble_handle_ota_req + 132
;;;1040           case FRM_OTA_END_REQ:
;;;1041               cmd_type = TUYA_BLE_OTA_END;
        0x00813976:    2004        .       MOVS     r0,#4
;;;1042               break;
        0x00813978:    e000        ..      B        0x81397c ; tuya_ble_handle_ota_req + 132
;;;1043           default:
;;;1044               cmd_type = TUYA_BLE_OTA_UNKONWN;
        0x0081397a:    2005        .       MOVS     r0,#5
;;;1045               break;
;;;1046           }
;;;1047   
;;;1048           event.ota_data.type = cmd_type;
        0x0081397c:    f88d0004    ....    STRB     r0,[sp,#4]
;;;1049           event.ota_data.data_len = data_len;
        0x00813980:    f8ad5006    ...P    STRH     r5,[sp,#6]
;;;1050           event.ota_data.p_data = ble_cb_evt_buffer;
;;;1051   
;;;1052           if(tuya_ble_cb_event_send(&event)!=0)
        0x00813984:    4668        hF      MOV      r0,sp
        0x00813986:    9602        ..      STR      r6,[sp,#8]
        0x00813988:    f001fb88    ....    BL       tuya_ble_cb_event_send ; 0x81509c
        0x0081398c:    2800        .(      CMP      r0,#0
        0x0081398e:    d0e1        ..      BEQ      0x813954 ; tuya_ble_handle_ota_req + 92
;;;1053           {
;;;1054               tuya_ble_free(ble_cb_evt_buffer);
        0x00813990:    4630        0F      MOV      r0,r6
        0x00813992:    f001fd08    ....    BL       tuya_ble_free ; 0x8153a6
;;;1055               TUYA_BLE_LOG_ERROR("tuya_ble_handle_ota_req-tuya ble send cb event failed.");
        0x00813996:    4896        .H      LDR      r0,[pc,#600] ; [0x813bf0] = 0x81d2f4
        0x00813998:    f007f907    ....    BL       get_args ; 0x81abaa
        0x0081399c:    4993        .I      LDR      r1,[pc,#588] ; [0x813bec] = 0x8802aa8
        0x0081399e:    4602        .F      MOV      r2,r0
        0x008139a0:    3130        01      ADDS     r1,r1,#0x30
        0x008139a2:    4640        @F      MOV      r0,r8
        0x008139a4:    f7f4d85b    ..[.    BL       log_buffer ; 0x7a5e
;;;1056           }
;;;1057           else
;;;1058           {
;;;1059   
;;;1060           }
;;;1061       }
;;;1062       else
;;;1063       {
;;;1064           
;;;1065       }
;;;1066   }
        0x008139a8:    e7d4        ..      B        0x813954 ; tuya_ble_handle_ota_req + 92
    tuya_ble_handle_unix_time_char_ms_resp
;;;1067   
;;;1068   static char current_timems_string[14] = "000000000000";
;;;1069   
;;;1070   static void tuya_ble_handle_unix_time_char_ms_resp(uint8_t*recv_data,uint16_t recv_len)
;;;1071   {
        0x008139aa:    b5f0        ..      PUSH     {r4-r7,lr}
        0x008139ac:    b089        ..      SUB      sp,sp,#0x24
        0x008139ae:    460d        .F      MOV      r5,r1
        0x008139b0:    4604        .F      MOV      r4,r0
;;;1072       int16_t zone_temp = 0;
;;;1073       uint64_t time_stamp_ms;
;;;1074       uint32_t time_stamp;
;;;1075       tuya_ble_cb_evt_param_t event;
;;;1076       
;;;1077       memset(&event,0,sizeof(tuya_ble_cb_evt_param_t));
        0x008139b2:    2124        $!      MOVS     r1,#0x24
        0x008139b4:    4668        hF      MOV      r0,sp
        0x008139b6:    f446f353    F.S.    BL       __aeabi_memclr4 ; 0x5a060
        0x008139ba:    4e2b        +N      LDR      r6,[pc,#172] ; [0x813a68] = 0x21103002
;;;1078   
;;;1079       if(recv_len<30)
        0x008139bc:    2d1e        .-      CMP      r5,#0x1e
        0x008139be:    d206        ..      BCS      0x8139ce ; tuya_ble_handle_unix_time_char_ms_resp + 36
;;;1080       {
;;;1081           TUYA_BLE_LOG_ERROR("received unix time char cmd data length error!");
        0x008139c0:    a08c        ..      ADR      r0,{pc}+0x234 ; 0x813bf4
        0x008139c2:    f007f8f2    ....    BL       get_args ; 0x81abaa
        0x008139c6:    4989        .I      LDR      r1,[pc,#548] ; [0x813bec] = 0x8802aa8
        0x008139c8:    4602        .F      MOV      r2,r0
        0x008139ca:    3178        x1      ADDS     r1,r1,#0x78
;;;1082           return;
        0x008139cc:    e045        E.      B        0x813a5a ; tuya_ble_handle_unix_time_char_ms_resp + 176
;;;1083       }
;;;1084   
;;;1085       if(!buffer_value_is_all_x(&recv_data[13],13,0))
        0x008139ce:    f104000d    ....    ADD      r0,r4,#0xd
        0x008139d2:    2200        ."      MOVS     r2,#0
        0x008139d4:    210d        .!      MOVS     r1,#0xd
        0x008139d6:    4605        .F      MOV      r5,r0
        0x008139d8:    f000fcc4    ....    BL       buffer_value_is_all_x ; 0x814364
        0x008139dc:    2800        .(      CMP      r0,#0
        0x008139de:    d13f        ?.      BNE      0x813a60 ; tuya_ble_handle_unix_time_char_ms_resp + 182
;;;1086       {
;;;1087           memcpy(current_timems_string,&recv_data[13],13);
        0x008139e0:    220d        ."      MOVS     r2,#0xd
        0x008139e2:    4629        )F      MOV      r1,r5
        0x008139e4:    4893        .H      LDR      r0,[pc,#588] ; [0x813c34] = 0x208134
        0x008139e6:    f446f258    F.X.    BL       __aeabi_memcpy ; 0x59e9a
;;;1088           zone_temp  = (int16_t)((recv_data[26]<<8)|recv_data[27]);
        0x008139ea:    8b60        `.      LDRH     r0,[r4,#0x1a]
        0x008139ec:    ba40        @.      REV16    r0,r0
        0x008139ee:    b204        ..      SXTH     r4,r0
;;;1089           time_stamp_ms = atoll(current_timems_string);
        0x008139f0:    4890        .H      LDR      r0,[pc,#576] ; [0x813c34] = 0x208134
        0x008139f2:    f007fc4d    ..M.    BL       atoll ; 0x81b290
        0x008139f6:    4605        .F      MOV      r5,r0
        0x008139f8:    460f        .F      MOV      r7,r1
;;;1090           TUYA_BLE_LOG_INFO("received unix time_zone = %d\n",zone_temp);
        0x008139fa:    a08f        ..      ADR      r0,{pc}+0x23e ; 0x813c38
        0x008139fc:    f007f8d5    ....    BL       get_args ; 0x81abaa
        0x00813a00:    497a        zI      LDR      r1,[pc,#488] ; [0x813bec] = 0x8802aa8
        0x00813a02:    4602        .F      MOV      r2,r0
        0x00813a04:    4623        #F      MOV      r3,r4
        0x00813a06:    31b8        .1      ADDS     r1,r1,#0xb8
        0x00813a08:    4630        0F      MOV      r0,r6
        0x00813a0a:    f7f4d828    ..(.    BL       log_buffer ; 0x7a5e
;;;1091           time_stamp = time_stamp_ms/1000;
        0x00813a0e:    f44f727a    O.zr    MOV      r2,#0x3e8
        0x00813a12:    2300        .#      MOVS     r3,#0
        0x00813a14:    4628        (F      MOV      r0,r5
        0x00813a16:    4639        9F      MOV      r1,r7
        0x00813a18:    f007fb12    ....    BL       __aeabi_uldivmod ; 0x81b040
;;;1092           if(time_stamp_ms%1000>=500)
        0x00813a1c:    f44f71fa    O..q    MOV      r1,#0x1f4
        0x00813a20:    1a51        Q.      SUBS     r1,r2,r1
        0x00813a22:    f1730100    s...    SBCS     r1,r3,#0
        0x00813a26:    d300        ..      BCC      0x813a2a ; tuya_ble_handle_unix_time_char_ms_resp + 128
        0x00813a28:    1c40        @.      ADDS     r0,r0,#1
;;;1093           {
;;;1094               time_stamp += 1;
;;;1095           }
;;;1096   
;;;1097           tuya_ble_rtc_set_timestamp(time_stamp,zone_temp);
        0x00813a2a:    4621        !F      MOV      r1,r4
        0x00813a2c:    f006ffab    ....    BL       tuya_ble_rtc_set_timestamp ; 0x81a986
;;;1098   
;;;1099           event.evt = TUYA_BLE_CB_EVT_TIME_STAMP;
        0x00813a30:    2046        F       MOVS     r0,#0x46
        0x00813a32:    f88d0000    ....    STRB     r0,[sp,#0]
;;;1100   
;;;1101           memcpy(event.timestamp_data.timestamp_string,current_timems_string,13);
        0x00813a36:    220d        ."      MOVS     r2,#0xd
        0x00813a38:    497e        ~I      LDR      r1,[pc,#504] ; [0x813c34] = 0x208134
        0x00813a3a:    a801        ..      ADD      r0,sp,#4
        0x00813a3c:    f446f2b4    F...    BL       __aeabi_memcpy4 ; 0x59fa8
;;;1102           event.timestamp_data.time_zone = zone_temp;
        0x00813a40:    f8ad4012    ...@    STRH     r4,[sp,#0x12]
;;;1103           if(tuya_ble_cb_event_send(&event)!=0)
        0x00813a44:    4668        hF      MOV      r0,sp
        0x00813a46:    f001fb29    ..).    BL       tuya_ble_cb_event_send ; 0x81509c
        0x00813a4a:    2800        .(      CMP      r0,#0
        0x00813a4c:    d008        ..      BEQ      0x813a60 ; tuya_ble_handle_unix_time_char_ms_resp + 182
;;;1104           {
;;;1105               TUYA_BLE_LOG_ERROR("tuya_ble_handle_unix_time_char_ms_resp-tuya ble send cb event failed.");
        0x00813a4e:    4885        .H      LDR      r0,[pc,#532] ; [0x813c64] = 0x81d2a0
        0x00813a50:    f007f8ab    ....    BL       get_args ; 0x81abaa
        0x00813a54:    4965        eI      LDR      r1,[pc,#404] ; [0x813bec] = 0x8802aa8
        0x00813a56:    4602        .F      MOV      r2,r0
        0x00813a58:    31e4        .1      ADDS     r1,r1,#0xe4
        0x00813a5a:    4630        0F      MOV      r0,r6
        0x00813a5c:    f7f3dfff    ....    BL       log_buffer ; 0x7a5e
;;;1106           }
;;;1107   
;;;1108       }
;;;1109   
;;;1110   }
        0x00813a60:    b009        ..      ADD      sp,sp,#0x24
        0x00813a62:    bdf0        ..      POP      {r4-r7,pc}
    $d
        0x00813a64:    002097ef    .. .    DCD    2136047
        0x00813a68:    21103002    .0.!    DCD    554708994
        0x00813a6c:    205d455b    [E]     DCD    542983515
        0x00813a70:    41595554    TUYA    DCD    1096373588
        0x00813a74:    454c425f    _BLE    DCD    1162625631
        0x00813a78:    4150203a    : PA    DCD    1095770170
        0x00813a7c:    525f5249    IR_R    DCD    1381978697
        0x00813a80:    64205145    EQ d    DCD    1679839557
        0x00813a84:    63697665    evic    DCD    1667855973
        0x00813a88:    64692065    e id    DCD    1684611173
        0x00813a8c:    746f6e20     not    DCD    1953459744
        0x00813a90:    74616d20     mat    DCD    1952541984
        0x00813a94:    00216863    ch!.    DCD    2189411
        0x00813a98:    0880297c    |)..    DCD    142616956
        0x00813a9c:    0081cf04    ....    DCD    8507140
        0x00813aa0:    08802810    .(..    DCD    142616592
        0x00813aa4:    205d495b    [I]     DCD    542984539
        0x00813aa8:    41595554    TUYA    DCD    1096373588
        0x00813aac:    454c425f    _BLE    DCD    1162625631
        0x00813ab0:    4150203a    : PA    DCD    1095770170
        0x00813ab4:    525f5249    IR_R    DCD    1381978697
        0x00813ab8:    6f205145    EQ o    DCD    1864388933
        0x00813abc:    64252d6b    k-%d    DCD    1680158059
        0x00813ac0:    00000000    ....    DCD    0
        0x00813ac4:    205d455b    [E]     DCD    542983515
        0x00813ac8:    41595554    TUYA    DCD    1096373588
        0x00813acc:    454c425f    _BLE    DCD    1162625631
        0x00813ad0:    7574203a    : tu    DCD    1970544698
        0x00813ad4:    62206179    ya b    DCD    1646289273
        0x00813ad8:    7320656c    le s    DCD    1931502956
        0x00813adc:    20646e65    end     DCD    543452773
        0x00813ae0:    65206263    cb e    DCD    1696621155
        0x00813ae4:    746e6576    vent    DCD    1953391990
        0x00813ae8:    69616620     fai    DCD    1767990816
        0x00813aec:    2e64656c    led.    DCD    778331500
        0x00813af0:    00000000    ....    DCD    0
        0x00813af4:    205d495b    [I]     DCD    542984539
        0x00813af8:    41595554    TUYA    DCD    1096373588
        0x00813afc:    454c425f    _BLE    DCD    1162625631
        0x00813b00:    4150203a    : PA    DCD    1095770170
        0x00813b04:    525f5249    IR_R    DCD    1381978697
        0x00813b08:    61205145    EQ a    DCD    1629507909
        0x00813b0c:    6165726c    lrea    DCD    1634038380
        0x00813b10:    62207964    dy b    DCD    1646295396
        0x00813b14:    646e756f    ound    DCD    1684960623
        0x00813b18:    00000021    !...    DCD    33
        0x00813b1c:    205d445b    [D]     DCD    542983259
        0x00813b20:    41595554    TUYA    DCD    1096373588
        0x00813b24:    454c425f    _BLE    DCD    1162625631
        0x00813b28:    7574203a    : tu    DCD    1970544698
        0x00813b2c:    62206179    ya b    DCD    1646289273
        0x00813b30:    7320656c    le s    DCD    1931502956
        0x00813b34:    20646e65    end     DCD    543452773
        0x00813b38:    65206263    cb e    DCD    1696621155
        0x00813b3c:    746e6576    vent    DCD    1953391990
        0x00813b40:    63757320     suc    DCD    1668641568
        0x00813b44:    64656563    ceed    DCD    1684366691
        0x00813b48:    0000002e    ....    DCD    46
        0x00813b4c:    205d495b    [I]     DCD    542984539
        0x00813b50:    41595554    TUYA    DCD    1096373588
        0x00813b54:    454c425f    _BLE    DCD    1162625631
        0x00813b58:    7574203a    : tu    DCD    1970544698
        0x00813b5c:    62206179    ya b    DCD    1646289273
        0x00813b60:    7320656c    le s    DCD    1931502956
        0x00813b64:    20646e65    end     DCD    543452773
        0x00813b68:    65206263    cb e    DCD    1696621155
        0x00813b6c:    746e6576    vent    DCD    1953391990
        0x00813b70:    63757320     suc    DCD    1668641568
        0x00813b74:    64656563    ceed    DCD    1684366691
        0x00813b78:    0000002e    ....    DCD    46
        0x00813b7c:    205d495b    [I]     DCD    542984539
        0x00813b80:    41595554    TUYA    DCD    1096373588
        0x00813b84:    454c425f    _BLE    DCD    1162625631
        0x00813b88:    6573203a    : se    DCD    1702043706
        0x00813b8c:    4620646e    nd F    DCD    1176527982
        0x00813b90:    475f4d52    RM_G    DCD    1197428050
        0x00813b94:    555f5445    ET_U    DCD    1432310853
        0x00813b98:    5f58494e    NIX_    DCD    1599621454
        0x00813b9c:    454d4954    TIME    DCD    1162692948
        0x00813ba0:    4148435f    _CHA    DCD    1095254879
        0x00813ba4:    534d5f52    R_MS    DCD    1397579602
        0x00813ba8:    5145525f    _REQ    DCD    1363497567
        0x00813bac:    646d6320     cmd    DCD    1684890400
        0x00813bb0:    206f7420     to     DCD    544175136
        0x00813bb4:    2e707061    app.    DCD    779120737
        0x00813bb8:    0000000a    ....    DCD    10
        0x00813bbc:    205d455b    [E]     DCD    542983515
        0x00813bc0:    41595554    TUYA    DCD    1096373588
        0x00813bc4:    454c425f    _BLE    DCD    1162625631
        0x00813bc8:    6c62203a    : bl    DCD    1818370106
        0x00813bcc:    62635f65    e_cb    DCD    1650679653
        0x00813bd0:    7476655f    _evt    DCD    1953916255
        0x00813bd4:    6675625f    _buf    DCD    1718968927
        0x00813bd8:    20726566    fer     DCD    544367974
        0x00813bdc:    6c6c616d    mall    DCD    1819042157
        0x00813be0:    6620636f    oc f    DCD    1713398639
        0x00813be4:    656c6961    aile    DCD    1701603681
        0x00813be8:    00002e64    d...    DCD    11876
        0x00813bec:    08802aa8    .*..    DCD    142617256
        0x00813bf0:    0081d2f4    ....    DCD    8508148
        0x00813bf4:    205d455b    [E]     DCD    542983515
        0x00813bf8:    41595554    TUYA    DCD    1096373588
        0x00813bfc:    454c425f    _BLE    DCD    1162625631
        0x00813c00:    6572203a    : re    DCD    1701978170
        0x00813c04:    76696563    ceiv    DCD    1986618723
        0x00813c08:    75206465    ed u    DCD    1965057125
        0x00813c0c:    2078696e    nix     DCD    544762222
        0x00813c10:    656d6974    time    DCD    1701669236
        0x00813c14:    61686320     cha    DCD    1634231072
        0x00813c18:    6d632072    r cm    DCD    1835212914
        0x00813c1c:    61642064    d da    DCD    1633951844
        0x00813c20:    6c206174    ta l    DCD    1814061428
        0x00813c24:    74676e65    engt    DCD    1952935525
        0x00813c28:    72652068    h er    DCD    1919230056
        0x00813c2c:    21726f72    ror!    DCD    561147762
        0x00813c30:    00000000    ....    DCD    0
        0x00813c34:    00208134    4. .    DCD    2130228
        0x00813c38:    205d495b    [I]     DCD    542984539
        0x00813c3c:    41595554    TUYA    DCD    1096373588
        0x00813c40:    454c425f    _BLE    DCD    1162625631
        0x00813c44:    6572203a    : re    DCD    1701978170
        0x00813c48:    76696563    ceiv    DCD    1986618723
        0x00813c4c:    75206465    ed u    DCD    1965057125
        0x00813c50:    2078696e    nix     DCD    544762222
        0x00813c54:    656d6974    time    DCD    1701669236
        0x00813c58:    6e6f7a5f    _zon    DCD    1852799583
        0x00813c5c:    203d2065    e =     DCD    540876901
        0x00813c60:    000a6425    %d..    DCD    680997
        0x00813c64:    0081d2a0    ....    DCD    8508064
    $t
    tuya_ble_handle_unix_time_date_resp
;;;1111   
;;;1112   
;;;1113   static void tuya_ble_handle_unix_time_date_resp(uint8_t*recv_data,uint16_t recv_len)
;;;1114   {
        0x00813c68:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00813c6a:    4eed        .N      LDR      r6,[pc,#948] ; [0x814020] = 0x21103002
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_data_handler.c (1114)
        0x00813c6c:    b08b        ..      SUB      sp,sp,#0x2c
        0x00813c6e:    4604        .F      MOV      r4,r0
        0x00813c70:    2918        .)      CMP      r1,#0x18
        0x00813c72:    d205        ..      BCS      0x813c80 ; tuya_ble_handle_unix_time_date_resp + 24
;;;1115       int16_t zone_temp = 0;
;;;1116       uint32_t time_stamp;
;;;1117       tuya_ble_cb_evt_param_t event;
;;;1118       tuya_ble_time_struct_data_t time_temp;
;;;1119   
;;;1120       if(recv_len<24)
;;;1121       {
;;;1122           TUYA_BLE_LOG_ERROR("received unix time date cmd data length error!");
        0x00813c74:    a0eb        ..      ADR      r0,{pc}+0x3b0 ; 0x814024
        0x00813c76:    f006ff98    ....    BL       get_args ; 0x81abaa
        0x00813c7a:    4602        .F      MOV      r2,r0
        0x00813c7c:    49f9        .I      LDR      r1,[pc,#996] ; [0x814064] = 0x8802be0
;;;1123           return;
        0x00813c7e:    e05d        ].      B        0x813d3c ; tuya_ble_handle_unix_time_date_resp + 212
;;;1124       }
;;;1125   
;;;1126       memset(&event,0,sizeof(tuya_ble_cb_evt_param_t));
        0x00813c80:    2124        $!      MOVS     r1,#0x24
        0x00813c82:    4668        hF      MOV      r0,sp
        0x00813c84:    f446f1ec    F...    BL       __aeabi_memclr4 ; 0x5a060
;;;1127       
;;;1128       if(!buffer_value_is_all_x(&recv_data[13],7,0))
        0x00813c88:    2200        ."      MOVS     r2,#0
        0x00813c8a:    2107        .!      MOVS     r1,#7
        0x00813c8c:    f104000d    ....    ADD      r0,r4,#0xd
        0x00813c90:    f000fb68    ..h.    BL       buffer_value_is_all_x ; 0x814364
        0x00813c94:    2800        .(      CMP      r0,#0
        0x00813c96:    d154        T.      BNE      0x813d42 ; tuya_ble_handle_unix_time_date_resp + 218
;;;1129       {
;;;1130           time_temp.nYear = 2000+recv_data[13];
        0x00813c98:    7b60        `{      LDRB     r0,[r4,#0xd]
        0x00813c9a:    2100        .!      MOVS     r1,#0
        0x00813c9c:    f50060fa    ...`    ADD      r0,r0,#0x7d0
        0x00813ca0:    f8ad0024    ..$.    STRH     r0,[sp,#0x24]
;;;1131           time_temp.nMonth = recv_data[14];
        0x00813ca4:    7ba0        .{      LDRB     r0,[r4,#0xe]
        0x00813ca6:    f88d0026    ..&.    STRB     r0,[sp,#0x26]
;;;1132           time_temp.nDay = recv_data[15];
        0x00813caa:    7be0        .{      LDRB     r0,[r4,#0xf]
        0x00813cac:    f88d0027    ..'.    STRB     r0,[sp,#0x27]
;;;1133           time_temp.nHour = recv_data[16];
        0x00813cb0:    7c20         |      LDRB     r0,[r4,#0x10]
        0x00813cb2:    f88d0028    ..(.    STRB     r0,[sp,#0x28]
;;;1134           time_temp.nMin = recv_data[17];
        0x00813cb6:    7c60        `|      LDRB     r0,[r4,#0x11]
        0x00813cb8:    f88d0029    ..).    STRB     r0,[sp,#0x29]
;;;1135           time_temp.nSec = recv_data[18];
        0x00813cbc:    7ca0        .|      LDRB     r0,[r4,#0x12]
        0x00813cbe:    f88d002a    ..*.    STRB     r0,[sp,#0x2a]
;;;1136           time_temp.DayIndex = recv_data[19];
        0x00813cc2:    7ce0        .|      LDRB     r0,[r4,#0x13]
        0x00813cc4:    f88d002b    ..+.    STRB     r0,[sp,#0x2b]
;;;1137   
;;;1138           time_stamp = tuya_ble_mytime_2_utc_sec(&time_temp,false);
        0x00813cc8:    a809        ..      ADD      r0,sp,#0x24
        0x00813cca:    f002fa20    .. .    BL       tuya_ble_mytime_2_utc_sec ; 0x81610e
        0x00813cce:    4607        .F      MOV      r7,r0
;;;1139   
;;;1140           zone_temp  = (int16_t)((recv_data[20]<<8)|recv_data[21]);
        0x00813cd0:    8aa0        ..      LDRH     r0,[r4,#0x14]
        0x00813cd2:    ba40        @.      REV16    r0,r0
        0x00813cd4:    b205        ..      SXTH     r5,r0
;;;1141   
;;;1142           TUYA_BLE_LOG_INFO("received unix time_zone = %d",zone_temp);
        0x00813cd6:    a0e4        ..      ADR      r0,{pc}+0x392 ; 0x814068
        0x00813cd8:    f006ff67    ..g.    BL       get_args ; 0x81abaa
        0x00813cdc:    49e1        .I      LDR      r1,[pc,#900] ; [0x814064] = 0x8802be0
        0x00813cde:    4602        .F      MOV      r2,r0
        0x00813ce0:    462b        +F      MOV      r3,r5
        0x00813ce2:    3140        @1      ADDS     r1,r1,#0x40
        0x00813ce4:    4630        0F      MOV      r0,r6
        0x00813ce6:    f7f3deba    ....    BL       log_buffer ; 0x7a5e
;;;1143   
;;;1144           tuya_ble_rtc_set_timestamp(time_stamp,zone_temp);
        0x00813cea:    4629        )F      MOV      r1,r5
        0x00813cec:    4638        8F      MOV      r0,r7
        0x00813cee:    f006fe4a    ..J.    BL       tuya_ble_rtc_set_timestamp ; 0x81a986
;;;1145   
;;;1146           event.evt = TUYA_BLE_CB_EVT_TIME_NORMAL;
        0x00813cf2:    2047        G       MOVS     r0,#0x47
        0x00813cf4:    f88d0000    ....    STRB     r0,[sp,#0]
;;;1147           event.time_normal_data.nYear = recv_data[13];
        0x00813cf8:    7b60        `{      LDRB     r0,[r4,#0xd]
        0x00813cfa:    f8ad0004    ....    STRH     r0,[sp,#4]
;;;1148           event.time_normal_data.nMonth = recv_data[14];
        0x00813cfe:    7ba0        .{      LDRB     r0,[r4,#0xe]
        0x00813d00:    f88d0006    ....    STRB     r0,[sp,#6]
;;;1149           event.time_normal_data.nDay = recv_data[15];
        0x00813d04:    7be0        .{      LDRB     r0,[r4,#0xf]
        0x00813d06:    f88d0007    ....    STRB     r0,[sp,#7]
;;;1150           event.time_normal_data.nHour = recv_data[16];
        0x00813d0a:    7c20         |      LDRB     r0,[r4,#0x10]
        0x00813d0c:    f88d0008    ....    STRB     r0,[sp,#8]
;;;1151           event.time_normal_data.nMin = recv_data[17];
        0x00813d10:    7c60        `|      LDRB     r0,[r4,#0x11]
        0x00813d12:    f88d0009    ....    STRB     r0,[sp,#9]
;;;1152           event.time_normal_data.nSec = recv_data[18];
        0x00813d16:    7ca0        .|      LDRB     r0,[r4,#0x12]
        0x00813d18:    f88d000a    ....    STRB     r0,[sp,#0xa]
;;;1153           event.time_normal_data.DayIndex = recv_data[19];
        0x00813d1c:    7ce0        .|      LDRB     r0,[r4,#0x13]
        0x00813d1e:    f88d000b    ....    STRB     r0,[sp,#0xb]
;;;1154           event.time_normal_data.time_zone = zone_temp;
        0x00813d22:    f8ad500c    ...P    STRH     r5,[sp,#0xc]
;;;1155   
;;;1156           if(tuya_ble_cb_event_send(&event)!=0)
        0x00813d26:    4668        hF      MOV      r0,sp
        0x00813d28:    f001f9b8    ....    BL       tuya_ble_cb_event_send ; 0x81509c
        0x00813d2c:    2800        .(      CMP      r0,#0
        0x00813d2e:    d008        ..      BEQ      0x813d42 ; tuya_ble_handle_unix_time_date_resp + 218
;;;1157           {
;;;1158               TUYA_BLE_LOG_ERROR("tuya_ble_handle_unix_time_date_resp-tuya ble send cb event failed.");
        0x00813d30:    48d8        .H      LDR      r0,[pc,#864] ; [0x814094] = 0x81d24c
        0x00813d32:    f006ff3a    ..:.    BL       get_args ; 0x81abaa
        0x00813d36:    49cb        .I      LDR      r1,[pc,#812] ; [0x814064] = 0x8802be0
        0x00813d38:    4602        .F      MOV      r2,r0
        0x00813d3a:    316c        l1      ADDS     r1,r1,#0x6c
        0x00813d3c:    4630        0F      MOV      r0,r6
        0x00813d3e:    f7f3de8e    ....    BL       log_buffer ; 0x7a5e
;;;1159           }
;;;1160   
;;;1161       }
;;;1162   
;;;1163   }
        0x00813d42:    b00b        ..      ADD      sp,sp,#0x2c
        0x00813d44:    e68d        ..      B        0x813a62 ; tuya_ble_handle_unix_time_char_ms_resp + 184
    tuya_ble_handle_dp_write_req
;;;1164   
;;;1165   static void tuya_ble_handle_dp_write_req(uint8_t*recv_data,uint16_t recv_len)
;;;1166   {
        0x00813d46:    e92d4ff0    -..O    PUSH     {r4-r11,lr}
        0x00813d4a:    b08d        ..      SUB      sp,sp,#0x34
        0x00813d4c:    f04f0a00    O...    MOV      r10,#0
        0x00813d50:    4604        .F      MOV      r4,r0
;;;1167       mtp_ret ret;
;;;1168       klv_node_s *list = NULL;
;;;1169       uint8_t p_buf[1];
;;;1170       uint16_t data_len = 0;
;;;1171       uint32_t ack_sn = 0;
;;;1172       tuya_ble_cb_evt_param_t event;
;;;1173   
;;;1174       ack_sn  = recv_data[1]<<24;
        0x00813d52:    f8cda02c    ..,.    STR      r10,[sp,#0x2c]
        0x00813d56:    7840        @x      LDRB     r0,[r0,#1]
        0x00813d58:    78a1        .x      LDRB     r1,[r4,#2]
        0x00813d5a:    0600        ..      LSLS     r0,r0,#24
;;;1175       ack_sn += recv_data[2]<<16;
        0x00813d5c:    eb004001    ...@    ADD      r0,r0,r1,LSL #16
;;;1176       ack_sn += recv_data[3]<<8;
        0x00813d60:    78e1        .x      LDRB     r1,[r4,#3]
        0x00813d62:    f8df82bc    ....    LDR      r8,[pc,#700] ; [0x814020] = 0x21103002
        0x00813d66:    eb002001    ...     ADD      r0,r0,r1,LSL #8
;;;1177       ack_sn += recv_data[4];
        0x00813d6a:    7921        !y      LDRB     r1,[r4,#4]
        0x00813d6c:    f04f0901    O...    MOV      r9,#1
        0x00813d70:    180f        ..      ADDS     r7,r1,r0
;;;1178   
;;;1179       data_len = (recv_data[11]<<8)|recv_data[12];
        0x00813d72:    f8b4000b    ....    LDRH     r0,[r4,#0xb]
        0x00813d76:    2605        .&      MOVS     r6,#5
        0x00813d78:    ba45        E.      REV16    r5,r0
        0x00813d7a:    b115        ..      CBZ      r5,0x813d82 ; tuya_ble_handle_dp_write_req + 60
;;;1180   
;;;1181       if((data_len==0)||(data_len>TUYA_BLE_RECEIVE_MAX_DP_DATA_LEN))
        0x00813d7c:    f5b57f81    ....    CMP      r5,#0x102
        0x00813d80:    d907        ..      BLS      0x813d92 ; tuya_ble_handle_dp_write_req + 76
;;;1182       {
;;;1183           TUYA_BLE_LOG_ERROR("cmd dp write receive data len == %d",data_len);
        0x00813d82:    a0c5        ..      ADR      r0,{pc}+0x316 ; 0x814098
        0x00813d84:    f006ff11    ....    BL       get_args ; 0x81abaa
        0x00813d88:    49b6        .I      LDR      r1,[pc,#728] ; [0x814064] = 0x8802be0
        0x00813d8a:    4602        .F      MOV      r2,r0
        0x00813d8c:    462b        +F      MOV      r3,r5
        0x00813d8e:    31c0        .1      ADDS     r1,r1,#0xc0
;;;1184           p_buf[0] = 0x01;
;;;1185           tuya_ble_commData_send(FRM_CMD_RESP,ack_sn,p_buf,1,ENCRYPTION_MODE_SESSION_KEY);
;;;1186           return;
        0x00813d90:    e028        (.      B        0x813de4 ; tuya_ble_handle_dp_write_req + 158
;;;1187       }
;;;1188       TUYA_BLE_LOG_HEXDUMP_DEBUG("cmd_dp_write data : ",recv_data+13,data_len);
        0x00813d92:    a0ce        ..      ADR      r0,{pc}+0x33a ; 0x8140cc
        0x00813d94:    f006ff09    ....    BL       get_args ; 0x81abaa
        0x00813d98:    49b2        .I      LDR      r1,[pc,#712] ; [0x814064] = 0x8802be0
        0x00813d9a:    4602        .F      MOV      r2,r0
        0x00813d9c:    462b        +F      MOV      r3,r5
        0x00813d9e:    31f4        .1      ADDS     r1,r1,#0xf4
        0x00813da0:    4640        @F      MOV      r0,r8
        0x00813da2:    f7f3de5c    ..\.    BL       log_buffer ; 0x7a5e
        0x00813da6:    f104020d    ....    ADD      r2,r4,#0xd
        0x00813daa:    462b        +F      MOV      r3,r5
        0x00813dac:    4693        .F      MOV      r11,r2
        0x00813dae:    2108        .!      MOVS     r1,#8
        0x00813db0:    a0ab        ..      ADR      r0,{pc}+0x2b0 ; 0x814060
        0x00813db2:    f006ff0e    ....    BL       log_hexdump ; 0x81abd2
        0x00813db6:    a0aa        ..      ADR      r0,{pc}+0x2aa ; 0x814060
        0x00813db8:    f006fef7    ....    BL       get_args ; 0x81abaa
        0x00813dbc:    4602        .F      MOV      r2,r0
        0x00813dbe:    49cf        .I      LDR      r1,[pc,#828] ; [0x8140fc] = 0x8802d04
        0x00813dc0:    4640        @F      MOV      r0,r8
        0x00813dc2:    f7f3de4c    ..L.    BL       log_buffer ; 0x7a5e
;;;1189       ret = data_2_klvlist(&recv_data[13],data_len,&list,0);
        0x00813dc6:    2300        .#      MOVS     r3,#0
        0x00813dc8:    aa0b        ..      ADD      r2,sp,#0x2c
        0x00813dca:    4629        )F      MOV      r1,r5
        0x00813dcc:    4658        XF      MOV      r0,r11
        0x00813dce:    f001fcb2    ....    BL       data_2_klvlist ; 0x815736
        0x00813dd2:    0004        ..      MOVS     r4,r0
;;;1190       if(MTP_OK != ret)
        0x00813dd4:    d015        ..      BEQ      0x813e02 ; tuya_ble_handle_dp_write_req + 188
;;;1191       {
;;;1192           TUYA_BLE_LOG_ERROR("cmd rx fail-%d",ret);
        0x00813dd6:    a0ca        ..      ADR      r0,{pc}+0x32a ; 0x814100
        0x00813dd8:    f006fee7    ....    BL       get_args ; 0x81abaa
        0x00813ddc:    49c7        .I      LDR      r1,[pc,#796] ; [0x8140fc] = 0x8802d04
        0x00813dde:    4602        .F      MOV      r2,r0
        0x00813de0:    4623        #F      MOV      r3,r4
        0x00813de2:    1d09        ..      ADDS     r1,r1,#4
        0x00813de4:    4640        @F      MOV      r0,r8
        0x00813de6:    f7f3de3a    ..:.    BL       log_buffer ; 0x7a5e
;;;1193           p_buf[0] = 0x01;
        0x00813dea:    f88d9028    ..(.    STRB     r9,[sp,#0x28]
;;;1194           tuya_ble_commData_send(FRM_CMD_RESP,ack_sn,p_buf,1,ENCRYPTION_MODE_SESSION_KEY);
        0x00813dee:    2301        .#      MOVS     r3,#1
        0x00813df0:    aa0a        ..      ADD      r2,sp,#0x28
        0x00813df2:    4639        9F      MOV      r1,r7
        0x00813df4:    2002        .       MOVS     r0,#2
        0x00813df6:    9600        ..      STR      r6,[sp,#0]
        0x00813df8:    f7fff937    ..7.    BL       tuya_ble_commData_send ; 0x81306a
        0x00813dfc:    b00d        ..      ADD      sp,sp,#0x34
        0x00813dfe:    e8bd8ff0    ....    POP      {r4-r11,pc}
;;;1195           return;
;;;1196       }
;;;1197   
;;;1198       free_klv_list(list);
        0x00813e02:    980b        ..      LDR      r0,[sp,#0x2c]
        0x00813e04:    f001fbf4    ....    BL       free_klv_list ; 0x8155f0
;;;1199       p_buf[0] = 0x00;
        0x00813e08:    f88da028    ..(.    STRB     r10,[sp,#0x28]
;;;1200   
;;;1201       tuya_ble_commData_send(FRM_CMD_RESP,ack_sn,p_buf,1,ENCRYPTION_MODE_SESSION_KEY);
        0x00813e0c:    2301        .#      MOVS     r3,#1
        0x00813e0e:    aa0a        ..      ADD      r2,sp,#0x28
        0x00813e10:    4639        9F      MOV      r1,r7
        0x00813e12:    2002        .       MOVS     r0,#2
        0x00813e14:    9600        ..      STR      r6,[sp,#0]
        0x00813e16:    f7fff928    ..(.    BL       tuya_ble_commData_send ; 0x81306a
;;;1202   
;;;1203       event.evt = TUYA_BLE_CB_EVT_DP_WRITE;
        0x00813e1a:    2041        A       MOVS     r0,#0x41
        0x00813e1c:    f88d0004    ....    STRB     r0,[sp,#4]
;;;1204   
;;;1205       uint8_t *ble_cb_evt_buffer=(uint8_t*)tuya_ble_malloc(data_len);
        0x00813e20:    4628        (F      MOV      r0,r5
        0x00813e22:    f001fab5    ....    BL       tuya_ble_malloc ; 0x815390
        0x00813e26:    0004        ..      MOVS     r4,r0
;;;1206       if(ble_cb_evt_buffer==NULL)
        0x00813e28:    d018        ..      BEQ      0x813e5c ; tuya_ble_handle_dp_write_req + 278
;;;1207       {
;;;1208           TUYA_BLE_LOG_ERROR("ble_cb_evt_buffer malloc failed.");
;;;1209           return;
;;;1210       }
;;;1211       else
;;;1212       {
;;;1213           memcpy(ble_cb_evt_buffer,&recv_data[13],data_len);
        0x00813e2a:    462a        *F      MOV      r2,r5
        0x00813e2c:    4659        YF      MOV      r1,r11
        0x00813e2e:    f446f034    F.4.    BL       __aeabi_memcpy ; 0x59e9a
        0x00813e32:    9402        ..      STR      r4,[sp,#8]
        0x00813e34:    f8ad500c    ...P    STRH     r5,[sp,#0xc]
        0x00813e38:    a801        ..      ADD      r0,sp,#4
        0x00813e3a:    f001f92f    ../.    BL       tuya_ble_cb_event_send ; 0x81509c
        0x00813e3e:    2800        .(      CMP      r0,#0
        0x00813e40:    d0dc        ..      BEQ      0x813dfc ; tuya_ble_handle_dp_write_req + 182
;;;1214       }
;;;1215       event.dp_write_data.p_data = ble_cb_evt_buffer;
;;;1216       event.dp_write_data.data_len = data_len;
;;;1217   
;;;1218       if(tuya_ble_cb_event_send(&event)!=0)
;;;1219       {
;;;1220           tuya_ble_free(ble_cb_evt_buffer);
        0x00813e42:    4620         F      MOV      r0,r4
        0x00813e44:    f001faaf    ....    BL       tuya_ble_free ; 0x8153a6
;;;1221           TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_write_req-tuya ble send cb event failed.");
        0x00813e48:    48b5        .H      LDR      r0,[pc,#724] ; [0x814120] = 0x81d33c
        0x00813e4a:    f006feae    ....    BL       get_args ; 0x81abaa
        0x00813e4e:    49ab        .I      LDR      r1,[pc,#684] ; [0x8140fc] = 0x8802d04
        0x00813e50:    4602        .F      MOV      r2,r0
        0x00813e52:    3154        T1      ADDS     r1,r1,#0x54
        0x00813e54:    4640        @F      MOV      r0,r8
        0x00813e56:    f7f3de02    ....    BL       log_buffer ; 0x7a5e
;;;1222       }
;;;1223       else
;;;1224       {
;;;1225   
;;;1226       }
;;;1227   
;;;1228   }
        0x00813e5a:    e7cf        ..      B        0x813dfc ; tuya_ble_handle_dp_write_req + 182
        0x00813e5c:    f2af20a4    ...     ADR      r0,{pc}-0x2a0 ; 0x813bbc
        0x00813e60:    f006fea3    ....    BL       get_args ; 0x81abaa
        0x00813e64:    49a5        .I      LDR      r1,[pc,#660] ; [0x8140fc] = 0x8802d04
        0x00813e66:    4602        .F      MOV      r2,r0
        0x00813e68:    3124        $1      ADDS     r1,r1,#0x24
        0x00813e6a:    e7f3        ..      B        0x813e54 ; tuya_ble_handle_dp_write_req + 270
    tuya_ble_device_unbond
;;;1229   
;;;1230   static void tuya_ble_handle_dp_query_req(uint8_t*recv_data,uint16_t recv_len)
;;;1231   {
;;;1232       uint8_t p_buf[1];
;;;1233       uint16_t dp_num = 0;
;;;1234       uint32_t ack_sn = 0;
;;;1235       tuya_ble_cb_evt_param_t event;
;;;1236       uint8_t *ble_cb_evt_buffer = NULL;
;;;1237   
;;;1238       ack_sn  = recv_data[1]<<24;
;;;1239       ack_sn += recv_data[2]<<16;
;;;1240       ack_sn += recv_data[3]<<8;
;;;1241       ack_sn += recv_data[4];
;;;1242   
;;;1243       dp_num = (recv_data[11]<<8)|recv_data[12];
;;;1244   
;;;1245       p_buf[0] = 0x00;
;;;1246   
;;;1247       tuya_ble_commData_send(FRM_STATE_QUERY_RESP,ack_sn,p_buf,1,ENCRYPTION_MODE_SESSION_KEY);
;;;1248   
;;;1249       event.evt = TUYA_BLE_CB_EVT_DP_QUERY;
;;;1250   
;;;1251       if(dp_num>0)
;;;1252       {
;;;1253           ble_cb_evt_buffer=(uint8_t*)tuya_ble_malloc(dp_num);
;;;1254           if(ble_cb_evt_buffer==NULL)
;;;1255           {
;;;1256               TUYA_BLE_LOG_ERROR("ble_cb_evt_buffer malloc failed.");
;;;1257               return;
;;;1258           }
;;;1259           else
;;;1260           {
;;;1261               memcpy(ble_cb_evt_buffer,&recv_data[13],dp_num);
;;;1262           }
;;;1263       }
;;;1264       event.dp_query_data.p_data = ble_cb_evt_buffer;
;;;1265       event.dp_query_data.data_len = dp_num;
;;;1266   
;;;1267       if(tuya_ble_cb_event_send(&event)!=0)
;;;1268       {
;;;1269           TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_query_req-tuya ble send cb event failed.");
;;;1270           if(dp_num>0)
;;;1271           {
;;;1272               tuya_ble_free(ble_cb_evt_buffer);
;;;1273           }
;;;1274       }
;;;1275       else
;;;1276       {
;;;1277   
;;;1278       }
;;;1279   }
;;;1280   
;;;1281   
;;;1282   void tuya_ble_device_unbond(void)
;;;1283   {
        0x00813e6c:    b510        ..      PUSH     {r4,lr}
;;;1284   
;;;1285       tuya_ble_gap_disconnect();
        0x00813e6e:    f006fcff    ....    BL       tuya_ble_gap_disconnect ; 0x81a870
;;;1286       memset(tuya_ble_current_para.sys_settings.login_key,0,LOGIN_KEY_LEN);
        0x00813e72:    49ac        .I      LDR      r1,[pc,#688] ; [0x814124] = 0x2097d4
        0x00813e74:    2000        .       MOVS     r0,#0
        0x00813e76:    4cab        .L      LDR      r4,[pc,#684] ; [0x814124] = 0x2097d4
        0x00813e78:    f8410ffa    A...    STR      r0,[r1,#0xfa]!
        0x00813e7c:    8088        ..      STRH     r0,[r1,#4]
;;;1287       tuya_ble_current_para.sys_settings.bound_flag= 0;
        0x00813e7e:    f884013c    ..<.    STRB     r0,[r4,#0x13c]
;;;1288       tuya_ble_storage_save_sys_settings();
        0x00813e82:    f001fd01    ....    BL       tuya_ble_storage_save_sys_settings ; 0x815888
;;;1289       tuya_ble_adv_change();
        0x00813e86:    f001f91c    ....    BL       tuya_ble_adv_change ; 0x8150c2
;;;1290       tuya_ble_connect_status_set(UNBONDING_UNCONN);
        0x00813e8a:    2000        .       MOVS     r0,#0
        0x00813e8c:    f001f8c0    ....    BL       tuya_ble_connect_status_set ; 0x815010
;;;1291       TUYA_BLE_LOG_INFO("tuya_ble_device_unbond current bound flag = %d",tuya_ble_current_para.sys_settings.bound_flag);
        0x00813e90:    a0a5        ..      ADR      r0,{pc}+0x298 ; 0x814128
        0x00813e92:    f006fe8a    ....    BL       get_args ; 0x81abaa
        0x00813e96:    f894313c    ..<1    LDRB     r3,[r4,#0x13c]
        0x00813e9a:    4602        .F      MOV      r2,r0
        0x00813e9c:    e8bd4010    ...@    POP      {r4,lr}
        0x00813ea0:    49b1        .I      LDR      r1,[pc,#708] ; [0x814168] = 0x8802e20
        0x00813ea2:    485f        _H      LDR      r0,[pc,#380] ; [0x814020] = 0x21103002
        0x00813ea4:    f7f39ddb    ....    B        log_buffer ; 0x7a5e
    tuya_ble_evt_process
;;;1292   }
;;;1293   
;;;1294   
;;;1295   
;;;1296   static void tuya_ble_handle_unbond_req(uint8_t*recv_data,uint16_t recv_len)
;;;1297   {
;;;1298       uint8_t p_buf[1];
;;;1299       uint8_t encry_mode = 0;
;;;1300       uint32_t ack_sn = 0;
;;;1301       tuya_ble_cb_evt_param_t event;
;;;1302   
;;;1303       event.evt = TUYA_BLE_CB_EVT_UNBOUND;
;;;1304       event.unbound_data.data = 0;
;;;1305   
;;;1306       if(tuya_ble_cb_event_send(&event)!=0)
;;;1307       {
;;;1308           TUYA_BLE_LOG_ERROR("tuya_ble_handle_unbond_req-tuya ble send cb event (unbound req) failed.");
;;;1309       }
;;;1310       else
;;;1311       {
;;;1312   
;;;1313       }
;;;1314   #if (TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;1315       ack_sn  = recv_data[1]<<24;
;;;1316       ack_sn += recv_data[2]<<16;
;;;1317       ack_sn += recv_data[3]<<8;
;;;1318       ack_sn += recv_data[4];
;;;1319   
;;;1320       encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;1321   
;;;1322       p_buf[0] = 0;
;;;1323   
;;;1324       tuya_ble_commData_send(FRM_UNBONDING_RESP,ack_sn,p_buf,1,encry_mode);
;;;1325       
;;;1326   #if (TUYA_BLE_DEVICE_UNBIND_MODE)    
;;;1327       tuya_ble_device_unbond();
;;;1328   
;;;1329       event.evt = TUYA_BLE_CB_EVT_CONNECTE_STATUS;
;;;1330       event.connect_status = tuya_ble_connect_status_get();
;;;1331   
;;;1332       if(tuya_ble_cb_event_send(&event)!=0)
;;;1333       {
;;;1334           TUYA_BLE_LOG_ERROR("tuya_ble_handle_unbond_req-tuya ble send cb event (connect status update) failed.");
;;;1335       }
;;;1336       else
;;;1337       {
;;;1338   
;;;1339       }
;;;1340   #else
;;;1341       tuya_ble_gap_disconnect();
;;;1342   #endif    
;;;1343       
;;;1344   #endif
;;;1345   }
;;;1346   
;;;1347   
;;;1348   static void tuya_ble_handle_anomaly_unbond_req(uint8_t*recv_data,uint16_t recv_len)
;;;1349   {
;;;1350       uint8_t p_buf[1];
;;;1351       uint8_t encry_mode = 0;
;;;1352       uint32_t ack_sn = 0;
;;;1353       tuya_ble_cb_evt_param_t event;
;;;1354   
;;;1355       event.evt = TUYA_BLE_CB_EVT_ANOMALY_UNBOUND;
;;;1356       event.anomaly_unbound_data.data = 0;
;;;1357   
;;;1358       if(tuya_ble_cb_event_send(&event)!=0)
;;;1359       {
;;;1360           TUYA_BLE_LOG_ERROR("tuya_ble_handle_anomaly_unbond_req-tuya ble send cb event (unbound req) failed.");
;;;1361       }
;;;1362       else
;;;1363       {
;;;1364   
;;;1365       }
;;;1366   
;;;1367   #if (TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;1368   
;;;1369       ack_sn  = recv_data[1]<<24;
;;;1370       ack_sn += recv_data[2]<<16;
;;;1371       ack_sn += recv_data[3]<<8;
;;;1372       ack_sn += recv_data[4];
;;;1373   
;;;1374       encry_mode = ENCRYPTION_MODE_KEY_1;
;;;1375   
;;;1376       p_buf[0] = 0;
;;;1377   
;;;1378       tuya_ble_commData_send(FRM_ANOMALY_UNBONDING_RESP,ack_sn,p_buf,1,encry_mode);
;;;1379       tuya_ble_device_unbond();
;;;1380   
;;;1381       event.evt = TUYA_BLE_CB_EVT_CONNECTE_STATUS;
;;;1382       event.connect_status = tuya_ble_connect_status_get();
;;;1383   
;;;1384       if(tuya_ble_cb_event_send(&event)!=0)
;;;1385       {
;;;1386           TUYA_BLE_LOG_ERROR("tuya_ble_handle_anomaly_unbond_req-tuya ble send cb event (connect status update) failed.");
;;;1387       }
;;;1388       else
;;;1389       {
;;;1390   
;;;1391       }
;;;1392   
;;;1393   #endif
;;;1394   }
;;;1395   
;;;1396   
;;;1397   static void tuya_ble_handle_device_reset_req(uint8_t*recv_data,uint16_t recv_len)
;;;1398   {
;;;1399       uint8_t p_buf[1];
;;;1400       uint8_t encry_mode = 0;
;;;1401       uint32_t ack_sn = 0;
;;;1402       tuya_ble_cb_evt_param_t event;
;;;1403   
;;;1404       event.evt = TUYA_BLE_CB_EVT_DEVICE_RESET;
;;;1405       event.device_reset_data.data = 0;
;;;1406   
;;;1407       if(tuya_ble_cb_event_send(&event)!=0)
;;;1408       {
;;;1409           TUYA_BLE_LOG_ERROR("tuya_ble_handle_device_reset_req-tuya ble send cb event device reset req failed.");
;;;1410       }
;;;1411       else
;;;1412       {
;;;1413   
;;;1414       }
;;;1415   
;;;1416   #if (TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;1417   
;;;1418       ack_sn  = recv_data[1]<<24;
;;;1419       ack_sn += recv_data[2]<<16;
;;;1420       ack_sn += recv_data[3]<<8;
;;;1421       ack_sn += recv_data[4];
;;;1422   
;;;1423       encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;1424   
;;;1425       p_buf[0] = 0;
;;;1426   
;;;1427       tuya_ble_commData_send(FRM_DEVICE_RESET_RESP,ack_sn,p_buf,1,encry_mode);
;;;1428       
;;;1429   #if (TUYA_BLE_DEVICE_UNBIND_MODE)    
;;;1430       memset(tuya_ble_current_para.sys_settings.device_virtual_id,0,DEVICE_VIRTUAL_ID_LEN);
;;;1431       tuya_ble_device_unbond();
;;;1432   
;;;1433       event.evt = TUYA_BLE_CB_EVT_CONNECTE_STATUS;
;;;1434       event.connect_status = tuya_ble_connect_status_get();
;;;1435   
;;;1436       if(tuya_ble_cb_event_send(&event)!=0)
;;;1437       {
;;;1438           TUYA_BLE_LOG_ERROR("tuya_ble_handle_device_reset_req-tuya ble send cb event (connect status update) failed.");
;;;1439       }
;;;1440       else
;;;1441       {
;;;1442   
;;;1443       }
;;;1444   #else
;;;1445       tuya_ble_gap_disconnect();
;;;1446   #endif    
;;;1447       
;;;1448   #endif
;;;1449   }
;;;1450   
;;;1451   static void tuya_ble_handle_dp_data_report_res(uint8_t*recv_data,uint16_t recv_len)
;;;1452   {
;;;1453       tuya_ble_cb_evt_param_t event;
;;;1454   
;;;1455       event.evt = TUYA_BLE_CB_EVT_DP_DATA_REPORT_RESPONSE;
;;;1456       event.dp_response_data.status = recv_data[13];
;;;1457   
;;;1458       if(tuya_ble_cb_event_send(&event)!=0)
;;;1459       {
;;;1460           TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_data_report_res-tuya ble send cb event failed.");
;;;1461       }
;;;1462       else
;;;1463       {
;;;1464   
;;;1465       }
;;;1466   }
;;;1467   
;;;1468   static void tuya_ble_handle_dp_data_with_time_report_res(uint8_t*recv_data,uint16_t recv_len)
;;;1469   {
;;;1470       tuya_ble_cb_evt_param_t event;
;;;1471   
;;;1472       event.evt = TUYA_BLE_CB_EVT_DP_DATA_WTTH_TIME_REPORT_RESPONSE;
;;;1473       event.dp_response_data.status = recv_data[13];
;;;1474   
;;;1475       if(tuya_ble_cb_event_send(&event)!=0)
;;;1476       {
;;;1477           TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_data_report_res-tuya ble send cb event failed.");
;;;1478       }
;;;1479       else
;;;1480       {
;;;1481   
;;;1482       }
;;;1483   }
;;;1484   
;;;1485   static void tuya_ble_handle_dp_data_with_flag_report_res(uint8_t*recv_data,uint16_t recv_len)
;;;1486   {
;;;1487       tuya_ble_cb_evt_param_t event;
;;;1488       uint16_t data_len = recv_data[11]<<8|recv_data[12];
;;;1489   
;;;1490       if(data_len!=4)
;;;1491       {
;;;1492           TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_data_with_flag_report_res- invalid data len received.");
;;;1493           return;
;;;1494       }
;;;1495   
;;;1496       event.evt = TUYA_BLE_CB_EVT_DP_DATA_WITH_FLAG_REPORT_RESPONSE;
;;;1497       event.dp_with_flag_response_data.sn = recv_data[13]<<8|recv_data[14];
;;;1498       event.dp_with_flag_response_data.mode = recv_data[15];
;;;1499       event.dp_with_flag_response_data.status = recv_data[16];
;;;1500   
;;;1501       if(tuya_ble_cb_event_send(&event)!=0)
;;;1502       {
;;;1503           TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_data_with_flag_report_res-tuya ble send cb event failed.");
;;;1504       }
;;;1505       else
;;;1506       {
;;;1507   
;;;1508       }
;;;1509   }
;;;1510   
;;;1511   static void tuya_ble_handle_dp_data_with_flag_and_time_report_res(uint8_t*recv_data,uint16_t recv_len)
;;;1512   {
;;;1513       tuya_ble_cb_evt_param_t event;
;;;1514       uint16_t data_len = recv_data[11]<<8|recv_data[12];
;;;1515   
;;;1516       if(data_len!=4)
;;;1517       {
;;;1518           TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_data_with_flag_and_time_report_res- invalid data len received.");
;;;1519           return;
;;;1520       }
;;;1521   
;;;1522       event.evt = TUYA_BLE_CB_EVT_DP_DATA_WITH_FLAG_AND_TIME_REPORT_RESPONSE;
;;;1523       event.dp_with_flag_and_time_response_data.sn = recv_data[13]<<8|recv_data[14];
;;;1524       event.dp_with_flag_and_time_response_data.mode = recv_data[15];
;;;1525       event.dp_with_flag_and_time_response_data.status = recv_data[16];
;;;1526   
;;;1527       if(tuya_ble_cb_event_send(&event)!=0)
;;;1528       {
;;;1529           TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_data_with_flag_and_time_report_res-tuya ble send cb event failed.");
;;;1530       }
;;;1531       else
;;;1532       {
;;;1533   
;;;1534       }
;;;1535   }
;;;1536   
;;;1537   /**
;;;1538   recv_data[0]为加密方式，1/2/3/4为SN
;;;1539   **/
;;;1540   
;;;1541   void tuya_ble_evt_process(uint16_t cmd,uint8_t*recv_data,uint32_t recv_len)
;;;1542   {
        0x00813ea8:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00813eaa:    4f5d        ]O      LDR      r7,[pc,#372] ; [0x814020] = 0x21103002
        0x00813eac:    b089        ..      SUB      sp,sp,#0x24
        0x00813eae:    460d        .F      MOV      r5,r1
        0x00813eb0:    4606        .F      MOV      r6,r0
        0x00813eb2:    4614        .F      MOV      r4,r2
        0x00813eb4:    2810        .(      CMP      r0,#0x10
        0x00813eb6:    d06d        m.      BEQ      0x813f94 ; tuya_ble_evt_process + 236
        0x00813eb8:    dc0b        ..      BGT      0x813ed2 ; tuya_ble_evt_process + 42
        0x00813eba:    2e10        ..      CMP      r6,#0x10
        0x00813ebc:    d236        6.      BCS      0x813f2c ; tuya_ble_evt_process + 132
        0x00813ebe:    e8dff006    ....    TBB      [pc,r6]
    $d
        0x00813ec2:    554e        NU      DCW    21838
        0x00813ec4:    89354741    AG5.    DCD    2301970241
        0x00813ec8:    353535ad    .555    DCD    892679597
        0x00813ecc:    69693535    55ii    DCD    1768502581
        0x00813ed0:    6969        ii      DCW    26985
    $t
        0x00813ed2:    f2480103    H...    MOV      r1,#0x8003
        0x00813ed6:    1a70        p.      SUBS     r0,r6,r1
        0x00813ed8:    428e        .B      CMP      r6,r1
        0x00813eda:    d073        s.      BEQ      0x813fc4 ; tuya_ble_evt_process + 284
        0x00813edc:    dc1e        ..      BGT      0x813f1c ; tuya_ble_evt_process + 116
        0x00813ede:    2e21        !.      CMP      r6,#0x21
        0x00813ee0:    d04b        K.      BEQ      0x813f7a ; tuya_ble_evt_process + 210
        0x00813ee2:    dc04        ..      BGT      0x813eee ; tuya_ble_evt_process + 70
        0x00813ee4:    2e12        ..      CMP      r6,#0x12
        0x00813ee6:    d06e        n.      BEQ      0x813fc6 ; tuya_ble_evt_process + 286
        0x00813ee8:    2e14        ..      CMP      r6,#0x14
        0x00813eea:    d11f        ..      BNE      0x813f2c ; tuya_ble_evt_process + 132
        0x00813eec:    e082        ..      B        0x813ff4 ; tuya_ble_evt_process + 332
        0x00813eee:    2e23        #.      CMP      r6,#0x23
        0x00813ef0:    d049        I.      BEQ      0x813f86 ; tuya_ble_evt_process + 222
        0x00813ef2:    f46f4000    o..@    MVN      r0,#0x8000
        0x00813ef6:    42c6        .B      CMN      r6,r0
        0x00813ef8:    d118        ..      BNE      0x813f2c ; tuya_ble_evt_process + 132
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_data_handler.c (1455)
        0x00813efa:    2049        I       MOVS     r0,#0x49
        0x00813efc:    f88d0000    ....    STRB     r0,[sp,#0]
;;;1456       event.dp_response_data.status = recv_data[13];
        0x00813f00:    7b68        h{      LDRB     r0,[r5,#0xd]
        0x00813f02:    f88d0004    ....    STRB     r0,[sp,#4]
;;;1457   
;;;1458       if(tuya_ble_cb_event_send(&event)!=0)
        0x00813f06:    4668        hF      MOV      r0,sp
        0x00813f08:    f001f8c8    ....    BL       tuya_ble_cb_event_send ; 0x81509c
        0x00813f0c:    2800        .(      CMP      r0,#0
        0x00813f0e:    d07d        }.      BEQ      0x81400c ; tuya_ble_evt_process + 356
;;;1459       {
;;;1460           TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_data_report_res-tuya ble send cb event failed.");
        0x00813f10:    4896        .H      LDR      r0,[pc,#600] ; [0x81416c] = 0x81d3d4
        0x00813f12:    f006fe4a    ..J.    BL       get_args ; 0x81abaa
        0x00813f16:    4602        .F      MOV      r2,r0
        0x00813f18:    4995        .I      LDR      r1,[pc,#596] ; [0x814170] = 0x88030a8
        0x00813f1a:    e1c6        ..      B        0x8142aa ; tuya_ble_evt_process + 1026
        0x00813f1c:    2801        .(      CMP      r0,#1
        0x00813f1e:    d076        v.      BEQ      0x81400e ; tuya_ble_evt_process + 358
        0x00813f20:    2802        .(      CMP      r0,#2
        0x00813f22:    d075        u.      BEQ      0x814010 ; tuya_ble_evt_process + 360
        0x00813f24:    280e        .(      CMP      r0,#0xe
        0x00813f26:    d047        G.      BEQ      0x813fb8 ; tuya_ble_evt_process + 272
        0x00813f28:    280f        .(      CMP      r0,#0xf
        0x00813f2a:    d04d        M.      BEQ      0x813fc8 ; tuya_ble_evt_process + 288
        0x00813f2c:    a091        ..      ADR      r0,{pc}+0x248 ; 0x814174
        0x00813f2e:    f006fe3c    ..<.    BL       get_args ; 0x81abaa
        0x00813f32:    4602        .F      MOV      r2,r0
        0x00813f34:    b009        ..      ADD      sp,sp,#0x24
        0x00813f36:    4633        3F      MOV      r3,r6
        0x00813f38:    4638        8F      MOV      r0,r7
        0x00813f3a:    e8bd40f0    ...@    POP      {r4-r7,lr}
        0x00813f3e:    499a        .I      LDR      r1,[pc,#616] ; [0x8141a8] = 0x8803384
        0x00813f40:    f7f39d8d    ....    B        log_buffer ; 0x7a5e
        0x00813f44:    b009        ..      ADD      sp,sp,#0x24
        0x00813f46:    4628        (F      MOV      r0,r5
        0x00813f48:    e8bd40f0    ...@    POP      {r4-r7,lr}
        0x00813f4c:    b291        ..      UXTH     r1,r2
        0x00813f4e:    e6fa        ..      B        tuya_ble_handle_dp_write_req ; 0x813d46
        0x00813f50:    b009        ..      ADD      sp,sp,#0x24
        0x00813f52:    4628        (F      MOV      r0,r5
        0x00813f54:    e8bd40f0    ...@    POP      {r4-r7,lr}
        0x00813f58:    b291        ..      UXTH     r1,r2
        0x00813f5a:    f000ba79    ..y.    B.W      tuya_ble_handle_dp_query_req ; 0x814450
        0x00813f5e:    b009        ..      ADD      sp,sp,#0x24
        0x00813f60:    4628        (F      MOV      r0,r5
        0x00813f62:    e8bd40f0    ...@    POP      {r4-r7,lr}
        0x00813f66:    b291        ..      UXTH     r1,r2
        0x00813f68:    f7ffb9e6    ....    B        tuya_ble_handle_dev_info_req ; 0x813338
        0x00813f6c:    b009        ..      ADD      sp,sp,#0x24
        0x00813f6e:    4628        (F      MOV      r0,r5
        0x00813f70:    e8bd40f0    ...@    POP      {r4-r7,lr}
        0x00813f74:    b291        ..      UXTH     r1,r2
        0x00813f76:    f7ffbb80    ....    B        tuya_ble_handle_pair_req ; 0x81367a
        0x00813f7a:    b009        ..      ADD      sp,sp,#0x24
        0x00813f7c:    4628        (F      MOV      r0,r5
        0x00813f7e:    e8bd40f0    ...@    POP      {r4-r7,lr}
        0x00813f82:    b291        ..      UXTH     r1,r2
        0x00813f84:    e45e        ^.      B        tuya_ble_handle_net_config_info_req ; 0x813844
        0x00813f86:    b009        ..      ADD      sp,sp,#0x24
        0x00813f88:    4628        (F      MOV      r0,r5
        0x00813f8a:    e8bd40f0    ...@    POP      {r4-r7,lr}
        0x00813f8e:    b291        ..      UXTH     r1,r2
        0x00813f90:    f000ba2d    ..-.    B.W      tuya_ble_handle_ble_passthrough_data_req ; 0x8143ee
        0x00813f94:    a085        ..      ADR      r0,{pc}+0x218 ; 0x8141ac
        0x00813f96:    f006fe08    ....    BL       get_args ; 0x81abaa
        0x00813f9a:    4983        .I      LDR      r1,[pc,#524] ; [0x8141a8] = 0x8803384
        0x00813f9c:    4602        .F      MOV      r2,r0
        0x00813f9e:    4633        3F      MOV      r3,r6
        0x00813fa0:    39c4        .9      SUBS     r1,r1,#0xc4
        0x00813fa2:    4638        8F      MOV      r0,r7
        0x00813fa4:    9400        ..      STR      r4,[sp,#0]
        0x00813fa6:    f7f3dd5a    ..Z.    BL       log_buffer ; 0x7a5e
        0x00813faa:    b009        ..      ADD      sp,sp,#0x24
        0x00813fac:    4622        "F      MOV      r2,r4
        0x00813fae:    4629        )F      MOV      r1,r5
        0x00813fb0:    4630        0F      MOV      r0,r6
        0x00813fb2:    e8bd40f0    ...@    POP      {r4-r7,lr}
        0x00813fb6:    e49f        ..      B        tuya_ble_handle_ota_req ; 0x8138f8
        0x00813fb8:    b009        ..      ADD      sp,sp,#0x24
        0x00813fba:    4628        (F      MOV      r0,r5
        0x00813fbc:    e8bd40f0    ...@    POP      {r4-r7,lr}
        0x00813fc0:    b291        ..      UXTH     r1,r2
        0x00813fc2:    e4f2        ..      B        tuya_ble_handle_unix_time_char_ms_resp ; 0x8139aa
        0x00813fc4:    e176        v.      B        0x8142b4 ; tuya_ble_evt_process + 1036
        0x00813fc6:    e1ad        ..      B        0x814324 ; tuya_ble_evt_process + 1148
        0x00813fc8:    b009        ..      ADD      sp,sp,#0x24
        0x00813fca:    4628        (F      MOV      r0,r5
        0x00813fcc:    e8bd40f0    ...@    POP      {r4-r7,lr}
        0x00813fd0:    b291        ..      UXTH     r1,r2
        0x00813fd2:    e649        I.      B        tuya_ble_handle_unix_time_date_resp ; 0x813c68
        0x00813fd4:    a083        ..      ADR      r0,{pc}+0x210 ; 0x8141e4
        0x00813fd6:    f006fde8    ....    BL       get_args ; 0x81abaa
        0x00813fda:    4973        sI      LDR      r1,[pc,#460] ; [0x8141a8] = 0x8803384
        0x00813fdc:    4602        .F      MOV      r2,r0
        0x00813fde:    398c        .9      SUBS     r1,r1,#0x8c
        0x00813fe0:    4638        8F      MOV      r0,r7
        0x00813fe2:    f7f3dd3c    ..<.    BL       log_buffer ; 0x7a5e
        0x00813fe6:    b009        ..      ADD      sp,sp,#0x24
        0x00813fe8:    b2a1        ..      UXTH     r1,r4
        0x00813fea:    4628        (F      MOV      r0,r5
        0x00813fec:    e8bd40f0    ...@    POP      {r4-r7,lr}
        0x00813ff0:    f000ba77    ..w.    B.W      tuya_ble_handle_unbond_req ; 0x8144e2
        0x00813ff4:    a086        ..      ADR      r0,{pc}+0x21c ; 0x814210
        0x00813ff6:    f006fdd8    ....    BL       get_args ; 0x81abaa
        0x00813ffa:    496b        kI      LDR      r1,[pc,#428] ; [0x8141a8] = 0x8803384
        0x00813ffc:    4602        .F      MOV      r2,r0
        0x00813ffe:    3960        `9      SUBS     r1,r1,#0x60
        0x00814000:    4638        8F      MOV      r0,r7
        0x00814002:    f7f3dd2c    ..,.    BL       log_buffer ; 0x7a5e
        0x00814006:    b2a1        ..      UXTH     r1,r4
        0x00814008:    4628        (F      MOV      r0,r5
        0x0081400a:    e002        ..      B        0x814012 ; tuya_ble_evt_process + 362
        0x0081400c:    e150        P.      B        0x8142b0 ; tuya_ble_evt_process + 1032
        0x0081400e:    e128        (.      B        0x814262 ; tuya_ble_evt_process + 954
        0x00814010:    e162        b.      B        0x8142d8 ; tuya_ble_evt_process + 1072
        0x00814012:    b009        ..      ADD      sp,sp,#0x24
        0x00814014:    e8bd40f0    ...@    POP      {r4-r7,lr}
        0x00814018:    f000baa5    ....    B.W      tuya_ble_handle_anomaly_unbond_req ; 0x814566
        0x0081401c:    e112        ..      B        0x814244 ; tuya_ble_evt_process + 924
    $d
        0x0081401e:    0000        ..      DCW    0
        0x00814020:    21103002    .0.!    DCD    554708994
        0x00814024:    205d455b    [E]     DCD    542983515
        0x00814028:    41595554    TUYA    DCD    1096373588
        0x0081402c:    454c425f    _BLE    DCD    1162625631
        0x00814030:    6572203a    : re    DCD    1701978170
        0x00814034:    76696563    ceiv    DCD    1986618723
        0x00814038:    75206465    ed u    DCD    1965057125
        0x0081403c:    2078696e    nix     DCD    544762222
        0x00814040:    656d6974    time    DCD    1701669236
        0x00814044:    74616420     dat    DCD    1952539680
        0x00814048:    6d632065    e cm    DCD    1835212901
        0x0081404c:    61642064    d da    DCD    1633951844
        0x00814050:    6c206174    ta l    DCD    1814061428
        0x00814054:    74676e65    engt    DCD    1952935525
        0x00814058:    72652068    h er    DCD    1919230056
        0x0081405c:    21726f72    ror!    DCD    561147762
        0x00814060:    00000000    ....    DCD    0
        0x00814064:    08802be0    .+..    DCD    142617568
        0x00814068:    205d495b    [I]     DCD    542984539
        0x0081406c:    41595554    TUYA    DCD    1096373588
        0x00814070:    454c425f    _BLE    DCD    1162625631
        0x00814074:    6572203a    : re    DCD    1701978170
        0x00814078:    76696563    ceiv    DCD    1986618723
        0x0081407c:    75206465    ed u    DCD    1965057125
        0x00814080:    2078696e    nix     DCD    544762222
        0x00814084:    656d6974    time    DCD    1701669236
        0x00814088:    6e6f7a5f    _zon    DCD    1852799583
        0x0081408c:    203d2065    e =     DCD    540876901
        0x00814090:    00006425    %d..    DCD    25637
        0x00814094:    0081d24c    L...    DCD    8507980
        0x00814098:    205d455b    [E]     DCD    542983515
        0x0081409c:    41595554    TUYA    DCD    1096373588
        0x008140a0:    454c425f    _BLE    DCD    1162625631
        0x008140a4:    6d63203a    : cm    DCD    1835212858
        0x008140a8:    70642064    d dp    DCD    1885610084
        0x008140ac:    69727720     wri    DCD    1769109280
        0x008140b0:    72206574    te r    DCD    1914725748
        0x008140b4:    69656365    ecei    DCD    1768252261
        0x008140b8:    64206576    ve d    DCD    1679844726
        0x008140bc:    20617461    ata     DCD    543257697
        0x008140c0:    206e656c    len     DCD    544105836
        0x008140c4:    25203d3d    == %    DCD    622869821
        0x008140c8:    00000064    d...    DCD    100
        0x008140cc:    205d445b    [D]     DCD    542983259
        0x008140d0:    41595554    TUYA    DCD    1096373588
        0x008140d4:    454c425f    _BLE    DCD    1162625631
        0x008140d8:    6d63203a    : cm    DCD    1835212858
        0x008140dc:    70645f64    d_dp    DCD    1885626212
        0x008140e0:    6972775f    _wri    DCD    1769109343
        0x008140e4:    64206574    te d    DCD    1679844724
        0x008140e8:    20617461    ata     DCD    543257697
        0x008140ec:    5b20203a    :  [    DCD    1528832058
        0x008140f0:    3d6e656c    len=    DCD    1030645100
        0x008140f4:    205d6425    %d]     DCD    542991397
        0x008140f8:    0000003a    :...    DCD    58
        0x008140fc:    08802d04    .-..    DCD    142617860
        0x00814100:    205d455b    [E]     DCD    542983515
        0x00814104:    41595554    TUYA    DCD    1096373588
        0x00814108:    454c425f    _BLE    DCD    1162625631
        0x0081410c:    6d63203a    : cm    DCD    1835212858
        0x00814110:    78722064    d rx    DCD    2020745316
        0x00814114:    69616620     fai    DCD    1767990816
        0x00814118:    64252d6c    l-%d    DCD    1680158060
        0x0081411c:    00000000    ....    DCD    0
        0x00814120:    0081d33c    <...    DCD    8508220
        0x00814124:    002097d4    .. .    DCD    2136020
        0x00814128:    205d495b    [I]     DCD    542984539
        0x0081412c:    41595554    TUYA    DCD    1096373588
        0x00814130:    454c425f    _BLE    DCD    1162625631
        0x00814134:    7574203a    : tu    DCD    1970544698
        0x00814138:    625f6179    ya_b    DCD    1650418041
        0x0081413c:    645f656c    le_d    DCD    1683973484
        0x00814140:    63697665    evic    DCD    1667855973
        0x00814144:    6e755f65    e_un    DCD    1853185893
        0x00814148:    646e6f62    bond    DCD    1684959074
        0x0081414c:    72756320     cur    DCD    1920295712
        0x00814150:    746e6572    rent    DCD    1953391986
        0x00814154:    756f6220     bou    DCD    1970233888
        0x00814158:    6620646e    nd f    DCD    1713398894
        0x0081415c:    2067616c    lag     DCD    543646060
        0x00814160:    6425203d    = %d    DCD    1680154685
        0x00814164:    00000000    ....    DCD    0
        0x00814168:    08802e20     ...    DCD    142618144
        0x0081416c:    0081d3d4    ....    DCD    8508372
        0x00814170:    088030a8    .0..    DCD    142618792
        0x00814174:    205d575b    [W]     DCD    542988123
        0x00814178:    41595554    TUYA    DCD    1096373588
        0x0081417c:    454c425f    _BLE    DCD    1162625631
        0x00814180:    4552203a    : RE    DCD    1163010106
        0x00814184:    56494543    CEIV    DCD    1447642435
        0x00814188:    55204445    ED U    DCD    1428177989
        0x0081418c:    4f4e4b4e    NKNO    DCD    1330531150
        0x00814190:    42204e57    WN B    DCD    1109413463
        0x00814194:    4520454c    LE E    DCD    1159742796
        0x00814198:    43205456    VT C    DCD    1126192214
        0x0081419c:    302d444d    MD-0    DCD    808272973
        0x008141a0:    34302578    x%04    DCD    875570552
        0x008141a4:    00000078    x...    DCD    120
        0x008141a8:    08803384    .3..    DCD    142619524
        0x008141ac:    205d495b    [I]     DCD    542984539
        0x008141b0:    41595554    TUYA    DCD    1096373588
        0x008141b4:    454c425f    _BLE    DCD    1162625631
        0x008141b8:    4552203a    : RE    DCD    1163010106
        0x008141bc:    56494543    CEIV    DCD    1447642435
        0x008141c0:    4f204445    ED O    DCD    1327514693
        0x008141c4:    43204154    TA C    DCD    1126187348
        0x008141c8:    303a444d    MD:0    DCD    809124941
        0x008141cc:    32302578    x%02    DCD    842016120
        0x008141d0:    41442078    x DA    DCD    1094983800
        0x008141d4:    4c204154    TA L    DCD    1277182292
        0x008141d8:    303a4e45    EN:0    DCD    809127493
        0x008141dc:    32302578    x%02    DCD    842016120
        0x008141e0:    00000078    x...    DCD    120
        0x008141e4:    205d495b    [I]     DCD    542984539
        0x008141e8:    41595554    TUYA    DCD    1096373588
        0x008141ec:    454c425f    _BLE    DCD    1162625631
        0x008141f0:    4552203a    : RE    DCD    1163010106
        0x008141f4:    56494543    CEIV    DCD    1447642435
        0x008141f8:    46204445    ED F    DCD    1176519749
        0x008141fc:    555f4d52    RM_U    DCD    1432309074
        0x00814200:    4e4f424e    NBON    DCD    1313817166
        0x00814204:    474e4944    DING    DCD    1196312900
        0x00814208:    5145525f    _REQ    DCD    1363497567
        0x0081420c:    00000000    ....    DCD    0
        0x00814210:    205d495b    [I]     DCD    542984539
        0x00814214:    41595554    TUYA    DCD    1096373588
        0x00814218:    454c425f    _BLE    DCD    1162625631
        0x0081421c:    4552203a    : RE    DCD    1163010106
        0x00814220:    56494543    CEIV    DCD    1447642435
        0x00814224:    46204445    ED F    DCD    1176519749
        0x00814228:    415f4d52    RM_A    DCD    1096764754
        0x0081422c:    414d4f4e    NOMA    DCD    1095585614
        0x00814230:    555f594c    LY_U    DCD    1432312140
        0x00814234:    4e4f424e    NBON    DCD    1313817166
        0x00814238:    474e4944    DING    DCD    1196312900
        0x0081423c:    5145525f    _REQ    DCD    1363497567
        0x00814240:    00000000    ....    DCD    0
    $t
        0x00814244:    a0f5        ..      ADR      r0,{pc}+0x3d8 ; 0x81461c
        0x00814246:    f006fcb0    ....    BL       get_args ; 0x81abaa
        0x0081424a:    4602        .F      MOV      r2,r0
        0x0081424c:    49fe        .I      LDR      r1,[pc,#1016] ; [0x814648] = 0x8803358
        0x0081424e:    4638        8F      MOV      r0,r7
        0x00814250:    f7f3dc05    ....    BL       log_buffer ; 0x7a5e
        0x00814254:    b009        ..      ADD      sp,sp,#0x24
        0x00814256:    b2a1        ..      UXTH     r1,r4
        0x00814258:    4628        (F      MOV      r0,r5
        0x0081425a:    e8bd40f0    ...@    POP      {r4-r7,lr}
        0x0081425e:    f000b9c3    ....    B.W      tuya_ble_handle_device_reset_req ; 0x8145e8
        0x00814262:    f8b5000b    ....    LDRH     r0,[r5,#0xb]
        0x00814266:    ba40        @.      REV16    r0,r0
        0x00814268:    2804        .(      CMP      r0,#4
        0x0081426a:    d005        ..      BEQ      0x814278 ; tuya_ble_evt_process + 976
        0x0081426c:    48f7        .H      LDR      r0,[pc,#988] ; [0x81464c] = 0x81d544
        0x0081426e:    f006fc9c    ....    BL       get_args ; 0x81abaa
        0x00814272:    4602        .F      MOV      r2,r0
        0x00814274:    49f6        .I      LDR      r1,[pc,#984] ; [0x814650] = 0x8803148
        0x00814276:    e018        ..      B        0x8142aa ; tuya_ble_evt_process + 1026
        0x00814278:    204b        K       MOVS     r0,#0x4b
        0x0081427a:    f88d0000    ....    STRB     r0,[sp,#0]
        0x0081427e:    f8b5000d    ....    LDRH     r0,[r5,#0xd]
        0x00814282:    ba40        @.      REV16    r0,r0
        0x00814284:    f8ad0004    ....    STRH     r0,[sp,#4]
        0x00814288:    7be8        .{      LDRB     r0,[r5,#0xf]
        0x0081428a:    f88d0006    ....    STRB     r0,[sp,#6]
        0x0081428e:    7c28        (|      LDRB     r0,[r5,#0x10]
        0x00814290:    f88d0007    ....    STRB     r0,[sp,#7]
        0x00814294:    4668        hF      MOV      r0,sp
        0x00814296:    f000ff01    ....    BL       tuya_ble_cb_event_send ; 0x81509c
        0x0081429a:    2800        .(      CMP      r0,#0
        0x0081429c:    d008        ..      BEQ      0x8142b0 ; tuya_ble_evt_process + 1032
        0x0081429e:    48ed        .H      LDR      r0,[pc,#948] ; [0x814654] = 0x81d488
        0x008142a0:    f006fc83    ....    BL       get_args ; 0x81abaa
        0x008142a4:    49ea        .I      LDR      r1,[pc,#936] ; [0x814650] = 0x8803148
        0x008142a6:    4602        .F      MOV      r2,r0
        0x008142a8:    3158        X1      ADDS     r1,r1,#0x58
        0x008142aa:    4638        8F      MOV      r0,r7
        0x008142ac:    f7f3dbd7    ....    BL       log_buffer ; 0x7a5e
        0x008142b0:    b009        ..      ADD      sp,sp,#0x24
        0x008142b2:    bdf0        ..      POP      {r4-r7,pc}
;;;1461       }
;;;1462       else
;;;1463       {
;;;1464   
;;;1465       }
;;;1466   }
;;;1467   
;;;1468   static void tuya_ble_handle_dp_data_with_time_report_res(uint8_t*recv_data,uint16_t recv_len)
;;;1469   {
;;;1470       tuya_ble_cb_evt_param_t event;
;;;1471   
;;;1472       event.evt = TUYA_BLE_CB_EVT_DP_DATA_WTTH_TIME_REPORT_RESPONSE;
        0x008142b4:    204a        J       MOVS     r0,#0x4a
        0x008142b6:    f88d0000    ....    STRB     r0,[sp,#0]
;;;1473       event.dp_response_data.status = recv_data[13];
        0x008142ba:    7b68        h{      LDRB     r0,[r5,#0xd]
        0x008142bc:    f88d0004    ....    STRB     r0,[sp,#4]
;;;1474   
;;;1475       if(tuya_ble_cb_event_send(&event)!=0)
        0x008142c0:    4668        hF      MOV      r0,sp
        0x008142c2:    f000feeb    ....    BL       tuya_ble_cb_event_send ; 0x81509c
        0x008142c6:    2800        .(      CMP      r0,#0
        0x008142c8:    d0f2        ..      BEQ      0x8142b0 ; tuya_ble_evt_process + 1032
;;;1476       {
;;;1477           TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_data_report_res-tuya ble send cb event failed.");
        0x008142ca:    48e3        .H      LDR      r0,[pc,#908] ; [0x814658] = 0x81d3d4
        0x008142cc:    f006fc6d    ..m.    BL       get_args ; 0x81abaa
        0x008142d0:    49df        .I      LDR      r1,[pc,#892] ; [0x814650] = 0x8803148
        0x008142d2:    4602        .F      MOV      r2,r0
        0x008142d4:    3950        P9      SUBS     r1,r1,#0x50
        0x008142d6:    e7e8        ..      B        0x8142aa ; tuya_ble_evt_process + 1026
;;;1478       }
;;;1479       else
;;;1480       {
;;;1481   
;;;1482       }
;;;1483   }
;;;1484   
;;;1485   static void tuya_ble_handle_dp_data_with_flag_report_res(uint8_t*recv_data,uint16_t recv_len)
;;;1486   {
;;;1487       tuya_ble_cb_evt_param_t event;
;;;1488       uint16_t data_len = recv_data[11]<<8|recv_data[12];
;;;1489   
;;;1490       if(data_len!=4)
;;;1491       {
;;;1492           TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_data_with_flag_report_res- invalid data len received.");
;;;1493           return;
;;;1494       }
;;;1495   
;;;1496       event.evt = TUYA_BLE_CB_EVT_DP_DATA_WITH_FLAG_REPORT_RESPONSE;
;;;1497       event.dp_with_flag_response_data.sn = recv_data[13]<<8|recv_data[14];
;;;1498       event.dp_with_flag_response_data.mode = recv_data[15];
;;;1499       event.dp_with_flag_response_data.status = recv_data[16];
;;;1500   
;;;1501       if(tuya_ble_cb_event_send(&event)!=0)
;;;1502       {
;;;1503           TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_data_with_flag_report_res-tuya ble send cb event failed.");
;;;1504       }
;;;1505       else
;;;1506       {
;;;1507   
;;;1508       }
;;;1509   }
;;;1510   
;;;1511   static void tuya_ble_handle_dp_data_with_flag_and_time_report_res(uint8_t*recv_data,uint16_t recv_len)
;;;1512   {
;;;1513       tuya_ble_cb_evt_param_t event;
;;;1514       uint16_t data_len = recv_data[11]<<8|recv_data[12];
        0x008142d8:    f8b5000b    ....    LDRH     r0,[r5,#0xb]
        0x008142dc:    ba40        @.      REV16    r0,r0
;;;1515   
;;;1516       if(data_len!=4)
        0x008142de:    2804        .(      CMP      r0,#4
        0x008142e0:    d006        ..      BEQ      0x8142f0 ; tuya_ble_evt_process + 1096
;;;1517       {
;;;1518           TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_data_with_flag_and_time_report_res- invalid data len received.");
        0x008142e2:    48de        .H      LDR      r0,[pc,#888] ; [0x81465c] = 0x81d4e4
        0x008142e4:    f006fc61    ..a.    BL       get_args ; 0x81abaa
        0x008142e8:    49d9        .I      LDR      r1,[pc,#868] ; [0x814650] = 0x8803148
        0x008142ea:    4602        .F      MOV      r2,r0
        0x008142ec:    31b4        .1      ADDS     r1,r1,#0xb4
;;;1519           return;
        0x008142ee:    e7dc        ..      B        0x8142aa ; tuya_ble_evt_process + 1026
;;;1520       }
;;;1521   
;;;1522       event.evt = TUYA_BLE_CB_EVT_DP_DATA_WITH_FLAG_AND_TIME_REPORT_RESPONSE;
        0x008142f0:    204c        L       MOVS     r0,#0x4c
        0x008142f2:    f88d0000    ....    STRB     r0,[sp,#0]
;;;1523       event.dp_with_flag_and_time_response_data.sn = recv_data[13]<<8|recv_data[14];
        0x008142f6:    f8b5000d    ....    LDRH     r0,[r5,#0xd]
        0x008142fa:    ba40        @.      REV16    r0,r0
        0x008142fc:    f8ad0004    ....    STRH     r0,[sp,#4]
;;;1524       event.dp_with_flag_and_time_response_data.mode = recv_data[15];
        0x00814300:    7be8        .{      LDRB     r0,[r5,#0xf]
        0x00814302:    f88d0006    ....    STRB     r0,[sp,#6]
;;;1525       event.dp_with_flag_and_time_response_data.status = recv_data[16];
        0x00814306:    7c28        (|      LDRB     r0,[r5,#0x10]
        0x00814308:    f88d0007    ....    STRB     r0,[sp,#7]
;;;1526   
;;;1527       if(tuya_ble_cb_event_send(&event)!=0)
        0x0081430c:    4668        hF      MOV      r0,sp
        0x0081430e:    f000fec5    ....    BL       tuya_ble_cb_event_send ; 0x81509c
        0x00814312:    2800        .(      CMP      r0,#0
        0x00814314:    d0cc        ..      BEQ      0x8142b0 ; tuya_ble_evt_process + 1032
;;;1528       {
;;;1529           TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_data_with_flag_and_time_report_res-tuya ble send cb event failed.");
        0x00814316:    48d2        .H      LDR      r0,[pc,#840] ; [0x814660] = 0x81d424
        0x00814318:    f006fc47    ..G.    BL       get_args ; 0x81abaa
        0x0081431c:    49ca        .I      LDR      r1,[pc,#808] ; [0x814648] = 0x8803358
        0x0081431e:    4602        .F      MOV      r2,r0
        0x00814320:    39fc        .9      SUBS     r1,r1,#0xfc
        0x00814322:    e7c2        ..      B        0x8142aa ; tuya_ble_evt_process + 1026
        0x00814324:    7b28        ({      LDRB     r0,[r5,#0xc]
        0x00814326:    7ae9        .z      LDRB     r1,[r5,#0xb]
        0x00814328:    eb002001    ...     ADD      r0,r0,r1,LSL #8
        0x0081432c:    b284        ..      UXTH     r4,r0
        0x0081432e:    2c07        .,      CMP      r4,#7
        0x00814330:    d3be        ..      BCC      0x8142b0 ; tuya_ble_evt_process + 1032
        0x00814332:    7b68        h{      LDRB     r0,[r5,#0xd]
        0x00814334:    2866        f(      CMP      r0,#0x66
        0x00814336:    d1bb        ..      BNE      0x8142b0 ; tuya_ble_evt_process + 1032
        0x00814338:    7ba8        .{      LDRB     r0,[r5,#0xe]
        0x0081433a:    28aa        .(      CMP      r0,#0xaa
        0x0081433c:    d1b8        ..      BNE      0x8142b0 ; tuya_ble_evt_process + 1032
        0x0081433e:    1e60        `.      SUBS     r0,r4,#1
        0x00814340:    b281        ..      UXTH     r1,r0
        0x00814342:    f105000d    ....    ADD      r0,r5,#0xd
        0x00814346:    4606        .F      MOV      r6,r0
        0x00814348:    f002f80b    ....    BL       tuya_ble_check_sum ; 0x816362
        0x0081434c:    1929        ).      ADDS     r1,r5,r4
        0x0081434e:    7b09        .{      LDRB     r1,[r1,#0xc]
        0x00814350:    4281        .B      CMP      r1,r0
        0x00814352:    d1ad        ..      BNE      0x8142b0 ; tuya_ble_evt_process + 1032
        0x00814354:    b009        ..      ADD      sp,sp,#0x24
        0x00814356:    4622        "F      MOV      r2,r4
        0x00814358:    4631        1F      MOV      r1,r6
        0x0081435a:    e8bd40f0    ...@    POP      {r4-r7,lr}
        0x0081435e:    2001        .       MOVS     r0,#1
        0x00814360:    f003b80e    ....    B.W      tuya_ble_app_production_test_process ; 0x817380
    buffer_value_is_all_x
        0x00814364:    b530        0.      PUSH     {r4,r5,lr}
        0x00814366:    2401        .$      MOVS     r4,#1
        0x00814368:    2300        .#      MOVS     r3,#0
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_data_handler.c (135)
        0x0081436a:    e006        ..      B        0x81437a ; buffer_value_is_all_x + 22
        0x0081436c:    5cc5        .\      LDRB     r5,[r0,r3]
        0x0081436e:    4295        .B      CMP      r5,r2
        0x00814370:    d001        ..      BEQ      0x814376 ; buffer_value_is_all_x + 18
        0x00814372:    2400        .$      MOVS     r4,#0
        0x00814374:    e003        ..      B        0x81437e ; buffer_value_is_all_x + 26
        0x00814376:    1c5b        [.      ADDS     r3,r3,#1
;;;136        bool ret = true;
;;;137        for(uint16_t i = 0; i<len; i++)
        0x00814378:    b29b        ..      UXTH     r3,r3
        0x0081437a:    428b        .B      CMP      r3,r1
        0x0081437c:    d3f6        ..      BCC      0x81436c ; buffer_value_is_all_x + 8
;;;138        {
;;;139            if(buffer[i]!= value)
;;;140            {
;;;141                ret = false;
;;;142                break;
;;;143            }
;;;144        }
;;;145        return ret;
        0x0081437e:    4620         F      MOV      r0,r4
;;;146    }
        0x00814380:    bd30        0.      POP      {r4,r5,pc}
    ble_cmd_data_crc_check
;;;147    
;;;148    void tuya_ble_air_recv_packet_free(void)
;;;149    {
;;;150        if(air_recv_packet.recv_data)
;;;151        {
;;;152            tuya_ble_free(air_recv_packet.recv_data);
;;;153            air_recv_packet.recv_data = NULL;
;;;154            air_recv_packet.recv_len_max = 0;
;;;155            air_recv_packet.recv_len = 0;
;;;156        }
;;;157    }
;;;158    
;;;159    static uint32_t ble_data_unpack(uint8_t *buf,uint32_t len)
;;;160    {
;;;161        static uint32_t offset = 0;
;;;162        mtp_ret ret;
;;;163    
;;;164        ret = trsmitr_recv_pkg_decode(&ty_trsmitr_proc, buf, len);
;;;165        if(MTP_OK != ret && MTP_TRSMITR_CONTINUE != ret)
;;;166        {
;;;167            air_recv_packet.recv_len_max = 0;
;;;168            air_recv_packet.recv_len = 0;
;;;169            if(air_recv_packet.recv_data)
;;;170            {
;;;171                tuya_ble_free(air_recv_packet.recv_data);
;;;172                air_recv_packet.recv_data = NULL;
;;;173            }
;;;174            
;;;175            return 1;
;;;176        }
;;;177    
;;;178        if(FRM_PKG_FIRST == ty_trsmitr_proc.pkg_desc)
;;;179        {
;;;180            if(air_recv_packet.recv_data)
;;;181            {
;;;182                tuya_ble_free(air_recv_packet.recv_data);
;;;183                air_recv_packet.recv_data = NULL;
;;;184            }
;;;185            air_recv_packet.recv_len_max = get_trsmitr_frame_total_len(&ty_trsmitr_proc);
;;;186            if((air_recv_packet.recv_len_max>TUYA_BLE_AIR_FRAME_MAX)||(air_recv_packet.recv_len_max==0))
;;;187            {
;;;188                air_recv_packet.recv_len_max = 0;
;;;189                air_recv_packet.recv_len = 0;
;;;190                TUYA_BLE_LOG_ERROR("ble_data_unpack total size [%d ]error.",air_recv_packet.recv_len_max);
;;;191                return 2;
;;;192            }
;;;193            air_recv_packet.recv_len = 0;
;;;194            air_recv_packet.recv_data = tuya_ble_malloc(air_recv_packet.recv_len_max);
;;;195            if(air_recv_packet.recv_data==NULL)
;;;196            {
;;;197                TUYA_BLE_LOG_ERROR("ble_data_unpack malloc failed.");
;;;198                return 2;
;;;199            }
;;;200            memset(air_recv_packet.recv_data,0,air_recv_packet.recv_len_max);
;;;201            offset = 0;
;;;202        }
;;;203        if((offset+get_trsmitr_subpkg_len(&ty_trsmitr_proc))<=air_recv_packet.recv_len_max)
;;;204        {
;;;205            if(air_recv_packet.recv_data)
;;;206            {
;;;207                memcpy(air_recv_packet.recv_data+offset,get_trsmitr_subpkg(&ty_trsmitr_proc),get_trsmitr_subpkg_len(&ty_trsmitr_proc));
;;;208                offset += get_trsmitr_subpkg_len(&ty_trsmitr_proc);
;;;209                air_recv_packet.recv_len = offset;
;;;210            }
;;;211            else
;;;212            {
;;;213                TUYA_BLE_LOG_ERROR("ble_data_unpack error.");
;;;214                air_recv_packet.recv_len_max = 0;
;;;215                air_recv_packet.recv_len = 0;
;;;216                return 2;
;;;217            }
;;;218        }
;;;219        else
;;;220        {
;;;221            ret = MTP_INVALID_PARAM;
;;;222            TUYA_BLE_LOG_ERROR("ble_data_unpack[%d] error:MTP_INVALID_PARAM");
;;;223            tuya_ble_air_recv_packet_free();
;;;224        }
;;;225    
;;;226        if(ret == MTP_OK)
;;;227        {
;;;228            offset=0;
;;;229            TUYA_BLE_LOG_DEBUG("ble_data_unpack[%d]",air_recv_packet.recv_len);
;;;230    
;;;231            return 0;
;;;232        }
;;;233        else
;;;234        {
;;;235            return 2;
;;;236        }
;;;237    }
;;;238    
;;;239    static uint8_t ble_cmd_data_crc_check(uint8_t *input,uint16_t len)
;;;240    {
        0x00814382:    b5f8        ..      PUSH     {r3-r7,lr}
        0x00814384:    4605        .F      MOV      r5,r0
;;;241        uint16_t data_len = 0;
;;;242        uint16_t crc16 = 0xFFFF;
        0x00814386:    f64f70ff    O..p    MOV      r0,#0xffff
        0x0081438a:    f8ad0000    ....    STRH     r0,[sp,#0]
;;;243        uint16_t crc16_cal = 0;
;;;244    
;;;245        data_len = (input[10]<<8)|input[11];
        0x0081438e:    8968        h.      LDRH     r0,[r5,#0xa]
        0x00814390:    ba44        D.      REV16    r4,r0
;;;246    
;;;247        if((13+data_len)>=TUYA_BLE_AIR_FRAME_MAX)
        0x00814392:    f104000d    ....    ADD      r0,r4,#0xd
        0x00814396:    f5b06f80    ...o    CMP      r0,#0x400
        0x0081439a:    d226        &.      BCS      0x8143ea ; ble_cmd_data_crc_check + 104
;;;248        {
;;;249            return 1;
;;;250        }
;;;251    
;;;252        crc16_cal = tuya_ble_crc16_compute(input,12+data_len, &crc16);
        0x0081439c:    1e40        @.      SUBS     r0,r0,#1
        0x0081439e:    b281        ..      UXTH     r1,r0
        0x008143a0:    466a        jF      MOV      r2,sp
        0x008143a2:    4628        (F      MOV      r0,r5
        0x008143a4:    f002f92a    ..*.    BL       tuya_ble_crc16_compute ; 0x8165fc
        0x008143a8:    4606        .F      MOV      r6,r0
;;;253    
;;;254        TUYA_BLE_LOG_DEBUG("crc16_cal[0x%04x]",crc16_cal);
        0x008143aa:    a0ae        ..      ADR      r0,{pc}+0x2ba ; 0x814664
        0x008143ac:    f006fbfd    ....    BL       get_args ; 0x81abaa
        0x008143b0:    4fb5        .O      LDR      r7,[pc,#724] ; [0x814688] = 0x21103002
        0x008143b2:    4602        .F      MOV      r2,r0
        0x008143b4:    4633        3F      MOV      r3,r6
        0x008143b6:    49b3        .I      LDR      r1,[pc,#716] ; [0x814684] = 0x88024bc
        0x008143b8:    4638        8F      MOV      r0,r7
        0x008143ba:    f7f3db50    ..P.    BL       log_buffer ; 0x7a5e
;;;255        crc16 = (input[12+data_len]<<8)|input[13+data_len];
        0x008143be:    1928        (.      ADDS     r0,r5,r4
        0x008143c0:    8980        ..      LDRH     r0,[r0,#0xc]
        0x008143c2:    ba40        @.      REV16    r0,r0
        0x008143c4:    f8ad0000    ....    STRH     r0,[sp,#0]
;;;256        TUYA_BLE_LOG_DEBUG("crc16[0x%04x]",crc16);
        0x008143c8:    a0b0        ..      ADR      r0,{pc}+0x2c4 ; 0x81468c
        0x008143ca:    f006fbee    ....    BL       get_args ; 0x81abaa
        0x008143ce:    49ad        .I      LDR      r1,[pc,#692] ; [0x814684] = 0x88024bc
        0x008143d0:    4602        .F      MOV      r2,r0
        0x008143d2:    f8bd3000    ...0    LDRH     r3,[sp,#0]
        0x008143d6:    3120         1      ADDS     r1,r1,#0x20
        0x008143d8:    4638        8F      MOV      r0,r7
        0x008143da:    f7f3db40    ..@.    BL       log_buffer ; 0x7a5e
;;;257        if(crc16==crc16_cal)
        0x008143de:    f8bd0000    ....    LDRH     r0,[sp,#0]
        0x008143e2:    42b0        .B      CMP      r0,r6
        0x008143e4:    d101        ..      BNE      0x8143ea ; ble_cmd_data_crc_check + 104
;;;258        {
;;;259            return 0;
        0x008143e6:    2000        .       MOVS     r0,#0
        0x008143e8:    bdf8        ..      POP      {r3-r7,pc}
;;;260        }
;;;261        else
;;;262        {
;;;263            return 1;
        0x008143ea:    2001        .       MOVS     r0,#1
;;;264        }
;;;265    }
        0x008143ec:    bdf8        ..      POP      {r3-r7,pc}
    tuya_ble_handle_ble_passthrough_data_req
;;;266    
;;;267    
;;;268    void tuya_ble_commonData_rx_proc(uint8_t *buf,uint16_t len)
;;;269    {
;;;270        uint8_t temp;
;;;271        uint32_t current_sn = 0;
;;;272        uint16_t current_cmd = 0;
;;;273        tuya_ble_evt_param_t evt;
;;;274        uint8_t *ble_evt_buffer=NULL;
;;;275        uint8_t current_encry_mode = 0;
;;;276        uint16_t p_version = 0;
;;;277    
;;;278        if(ble_data_unpack(buf,len))
;;;279        {
;;;280            return;      //
;;;281        }
;;;282    
;;;283        if(air_recv_packet.recv_len>TUYA_BLE_AIR_FRAME_MAX)
;;;284        {
;;;285            TUYA_BLE_LOG_ERROR("air_recv_packet.recv_len bigger than TUYA_BLE_AIR_FRAME_MAX.");
;;;286            tuya_ble_air_recv_packet_free();
;;;287            return;
;;;288        }
;;;289    
;;;290        if(ty_trsmitr_proc.version<2)  //协议主版本号低于2，不解析，返回。
;;;291        {
;;;292            TUYA_BLE_LOG_ERROR("ty_ble_rx_proc version not compatibility!");
;;;293            tuya_ble_air_recv_packet_free();
;;;294            return;
;;;295        }
;;;296    
;;;297    
;;;298        if(tuya_ble_current_para.sys_settings.bound_flag==1)//当前已绑定状态
;;;299        {
;;;300            if(ENCRYPTION_MODE_NONE==air_recv_packet.recv_data[0])
;;;301            {
;;;302                TUYA_BLE_LOG_ERROR("ty_ble_rx_proc data encryption mode error since bound_flag = 1.");
;;;303                tuya_ble_air_recv_packet_free();
;;;304                return;
;;;305            }
;;;306        }
;;;307    
;;;308        current_encry_mode = air_recv_packet.recv_data[0];
;;;309    
;;;310        TUYA_BLE_LOG_HEXDUMP_DEBUG("received encry data",(uint8_t*)air_recv_packet.recv_data,air_recv_packet.recv_len);//
;;;311    
;;;312        air_recv_packet.de_encrypt_buf = NULL;
;;;313        
;;;314        air_recv_packet.de_encrypt_buf = (uint8_t*)tuya_ble_malloc(air_recv_packet.recv_len);
;;;315        
;;;316        if(air_recv_packet.de_encrypt_buf==NULL)
;;;317        {
;;;318            TUYA_BLE_LOG_ERROR("air_recv_packet.de_encrypt_buf malloc failed.");
;;;319            tuya_ble_air_recv_packet_free();
;;;320            return;
;;;321        }
;;;322        else
;;;323        {
;;;324            p_version = (TUYA_BLE_PROTOCOL_VERSION_HIGN<<8) + TUYA_BLE_PROTOCOL_VERSION_LOW;
;;;325            air_recv_packet.decrypt_buf_len = 0;
;;;326            temp = tuya_ble_decryption(p_version,(uint8_t *)air_recv_packet.recv_data,air_recv_packet.recv_len,&air_recv_packet.decrypt_buf_len,
;;;327            (uint8_t *)air_recv_packet.de_encrypt_buf,&tuya_ble_current_para,tuya_ble_pair_rand);
;;;328            tuya_ble_air_recv_packet_free();
;;;329        }
;;;330        
;;;331       
;;;332        if(temp != 0) //解密失败
;;;333        {
;;;334            TUYA_BLE_LOG_ERROR("ble receive data decryption error code = %d",temp);
;;;335            tuya_ble_free(air_recv_packet.de_encrypt_buf);
;;;336            return;
;;;337        }
;;;338    
;;;339        TUYA_BLE_LOG_HEXDUMP_DEBUG("decryped data",(uint8_t*)air_recv_packet.de_encrypt_buf,air_recv_packet.decrypt_buf_len);//解密数据
;;;340        //指令数据crc验证
;;;341        if(ble_cmd_data_crc_check((uint8_t *)air_recv_packet.de_encrypt_buf,air_recv_packet.decrypt_buf_len)!=0)
;;;342        {
;;;343            TUYA_BLE_LOG_ERROR("ble receive data crc check error!");
;;;344            tuya_ble_free(air_recv_packet.de_encrypt_buf);
;;;345            return;
;;;346        }
;;;347    
;;;348        //SN验证
;;;349        current_sn  = air_recv_packet.de_encrypt_buf[0]<<24;
;;;350        current_sn += air_recv_packet.de_encrypt_buf[1]<<16;
;;;351        current_sn += air_recv_packet.de_encrypt_buf[2]<<8;
;;;352        current_sn += air_recv_packet.de_encrypt_buf[3];
;;;353    
;;;354        if(current_sn<=tuya_ble_receive_sn)
;;;355        {
;;;356            TUYA_BLE_LOG_ERROR("ble receive SN error!");
;;;357            tuya_ble_gap_disconnect();//SN错误，断开蓝牙连接
;;;358            tuya_ble_free(air_recv_packet.de_encrypt_buf);
;;;359            return;
;;;360        }
;;;361        else
;;;362        {
;;;363            set_ble_receive_sn(current_sn);
;;;364        }
;;;365    
;;;366        current_cmd = ((air_recv_packet.de_encrypt_buf[8]<<8)|air_recv_packet.de_encrypt_buf[9]);
;;;367    
;;;368    
;;;369        if((BONDING_CONN != tuya_ble_connect_status_get())&&(FRM_QRY_DEV_INFO_REQ != current_cmd)&&(PAIR_REQ != current_cmd)
;;;370                &&(FRM_LOGIN_KEY_REQ != current_cmd)&&(FRM_FACTORY_TEST_CMD != current_cmd)&&(FRM_NET_CONFIG_INFO_REQ != current_cmd)&&(FRM_ANOMALY_UNBONDING_REQ != current_cmd))
;;;371        {   //没有绑定前，不响应其它命令
;;;372            tuya_ble_free(air_recv_packet.de_encrypt_buf);
;;;373            TUYA_BLE_LOG_ERROR("ble receive cmd error on current bond state!");
;;;374            return;
;;;375        }
;;;376    
;;;377    
;;;378        if(tuya_ble_ota_status_get()!=TUYA_BLE_OTA_STATUS_NONE)
;;;379        {   //OTA状态下，不处理其它事件
;;;380            if(!((current_cmd>=FRM_OTA_START_REQ)&&(current_cmd<=FRM_OTA_END_REQ)))
;;;381            {
;;;382                tuya_ble_free(air_recv_packet.de_encrypt_buf);
;;;383                TUYA_BLE_LOG_ERROR("ble receive cmd error on ota state!");
;;;384                return;
;;;385            }
;;;386        }
;;;387    
;;;388        ble_evt_buffer=(uint8_t*)tuya_ble_malloc(air_recv_packet.decrypt_buf_len+1);
;;;389        if(ble_evt_buffer==NULL)
;;;390        {
;;;391            TUYA_BLE_LOG_ERROR("ty_ble_rx_proc no mem.");
;;;392            tuya_ble_free(air_recv_packet.de_encrypt_buf);
;;;393            return;
;;;394        }
;;;395        else
;;;396        {
;;;397            memset(ble_evt_buffer,0,air_recv_packet.decrypt_buf_len+1);
;;;398        }
;;;399        ble_evt_buffer[0] = current_encry_mode;     //首字节拷贝加密方式，便于后续使用
;;;400        memcpy(ble_evt_buffer+1,(uint8_t *)air_recv_packet.de_encrypt_buf,air_recv_packet.decrypt_buf_len);
;;;401        evt.hdr.event = TUYA_BLE_EVT_BLE_CMD;
;;;402        evt.ble_cmd_data.cmd = current_cmd;
;;;403        evt.ble_cmd_data.p_data = ble_evt_buffer;
;;;404        evt.ble_cmd_data.data_len = air_recv_packet.decrypt_buf_len+1;
;;;405        TUYA_BLE_LOG_DEBUG("BLE EVENT SEND-CMD:0x%02x - LEN:0x%02x",current_cmd,air_recv_packet.decrypt_buf_len+1);
;;;406    
;;;407        if(tuya_ble_event_send(&evt)!=0)
;;;408        {
;;;409            TUYA_BLE_LOG_ERROR("ble event send fail!");
;;;410            tuya_ble_free(ble_evt_buffer);
;;;411        }
;;;412        
;;;413        tuya_ble_free(air_recv_packet.de_encrypt_buf);
;;;414    
;;;415    }
;;;416    
;;;417    #if (TUYA_BLE_PROTOCOL_VERSION_HIGN==3)
;;;418    
;;;419    #if (TUYA_BLE_PROTOCOL_VERSION_LOW>=2)
;;;420    
;;;421    static void tuya_ble_handle_dev_info_req(uint8_t*recv_data,uint16_t recv_len)
;;;422    {
;;;423        uint8_t p_buf[90];
;;;424        uint8_t payload_len = 0;
;;;425        uint32_t ack_sn = 0;
;;;426        uint8_t encry_mode = 0;
;;;427        uint32_t version_temp_s,version_temp_h;
;;;428        
;;;429        memset(p_buf,0,sizeof(p_buf));
;;;430    
;;;431        ack_sn  = recv_data[1]<<24;
;;;432        ack_sn += recv_data[2]<<16;
;;;433        ack_sn += recv_data[3]<<8;
;;;434        ack_sn += recv_data[4];
;;;435    
;;;436        TUYA_BLE_LOG_DEBUG("get device infor-%d",tuya_ble_current_para.sys_settings.bound_flag);
;;;437    
;;;438        tuya_ble_rand_generator(tuya_ble_pair_rand,6);
;;;439        tuya_ble_pair_rand_valid = 1;
;;;440    
;;;441        if(TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;442        {
;;;443            version_temp_s = tuya_ble_firmware_version;
;;;444            version_temp_h = tuya_ble_hardware_version;
;;;445            p_buf[4] = 0x00;
;;;446        }
;;;447        else
;;;448        {
;;;449            version_temp_s = tuya_ble_firmware_version>>8;
;;;450            version_temp_h = tuya_ble_hardware_version>>8;
;;;451            p_buf[4] = 0x05;
;;;452        }
;;;453        p_buf[0] = (version_temp_s>>8)&0xff;
;;;454        p_buf[1] = (version_temp_s&0xff);
;;;455        p_buf[2] = TUYA_BLE_PROTOCOL_VERSION_HIGN;
;;;456        p_buf[3] = TUYA_BLE_PROTOCOL_VERSION_LOW;
;;;457        if(TUYA_BLE_ADVANCED_ENCRYPTION_DEVICE==1)
;;;458        {
;;;459            p_buf[4] |= 0x02;
;;;460        }
;;;461    
;;;462        p_buf[5] = tuya_ble_current_para.sys_settings.bound_flag;
;;;463        memcpy(&p_buf[6],tuya_ble_pair_rand,6);
;;;464        p_buf[12] = (version_temp_h>>8)&0xff;
;;;465        p_buf[13] = (version_temp_h&0xff);
;;;466        
;;;467        tuya_ble_register_key_generate(&p_buf[14],&tuya_ble_current_para);
;;;468    
;;;469        p_buf[46] = (tuya_ble_firmware_version>>16)&0xff;
;;;470        p_buf[47] = (tuya_ble_firmware_version>>8)&0xff;
;;;471        p_buf[48] = (tuya_ble_firmware_version&0xff);
;;;472        p_buf[49] = (tuya_ble_hardware_version>>16)&0xff;
;;;473        p_buf[50] = (tuya_ble_hardware_version>>8)&0xff;
;;;474        p_buf[51] = (tuya_ble_hardware_version&0xff);
;;;475    
;;;476        p_buf[52] = TUYA_BLE_DEVICE_COMMUNICATION_ABILITY>>8;
;;;477        p_buf[53] = TUYA_BLE_DEVICE_COMMUNICATION_ABILITY; //communication ability
;;;478    
;;;479        p_buf[54] = 0x00;
;;;480    
;;;481        memcpy(&p_buf[55],tuya_ble_current_para.sys_settings.device_virtual_id,DEVICE_VIRTUAL_ID_LEN);
;;;482    
;;;483        p_buf[77] = (tuya_ble_mcu_firmware_version>>16)&0xff;
;;;484        p_buf[78] = (tuya_ble_mcu_firmware_version>>8)&0xff;
;;;485        p_buf[79] = (tuya_ble_mcu_firmware_version&0xff);
;;;486        p_buf[80] = (tuya_ble_mcu_hardware_version>>16)&0xff;
;;;487        p_buf[81] = (tuya_ble_mcu_hardware_version>>8)&0xff;
;;;488        p_buf[82] = (tuya_ble_mcu_hardware_version&0xff);
;;;489        
;;;490        p_buf[83] = TUYA_BLE_WIFI_DEVICE_REGISTER_MODE;
;;;491        
;;;492        payload_len = 84;
;;;493    
;;;494        encry_mode = recv_data[0];
;;;495    
;;;496        if(tuya_ble_commData_send(FRM_QRY_DEV_INFO_RESP,ack_sn,p_buf,payload_len,encry_mode)==2)
;;;497        {
;;;498            tuya_ble_pair_rand_clear();
;;;499        }
;;;500    }
;;;501    
;;;502    #else
;;;503    
;;;504    static void tuya_ble_handle_dev_info_req(uint8_t*recv_data,uint16_t recv_len)
;;;505    {
;;;506        uint8_t p_buf[90];
;;;507        uint8_t payload_len = 0;
;;;508        uint32_t ack_sn = 0;
;;;509        uint8_t encry_mode = 0;
;;;510        uint32_t version_temp_s,version_temp_h;
;;;511    
;;;512        ack_sn  = recv_data[1]<<24;
;;;513        ack_sn += recv_data[2]<<16;
;;;514        ack_sn += recv_data[3]<<8;
;;;515        ack_sn += recv_data[4];
;;;516    
;;;517        TUYA_BLE_LOG_DEBUG("get device infor-%d",tuya_ble_current_para.sys_settings.bound_flag);
;;;518    
;;;519        tuya_ble_rand_generator(tuya_ble_pair_rand,6);
;;;520        tuya_ble_pair_rand_valid = 1;
;;;521    
;;;522        if(TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;523        {
;;;524            version_temp_s = tuya_ble_firmware_version;
;;;525            version_temp_h = tuya_ble_hardware_version;
;;;526            p_buf[4] = 0x00;
;;;527        }
;;;528        else
;;;529        {
;;;530            version_temp_s = tuya_ble_firmware_version>>8;
;;;531            version_temp_h = tuya_ble_hardware_version>>8;
;;;532            p_buf[4] = 0x05;
;;;533        }
;;;534        p_buf[0] = (version_temp_s>>8)&0xff;
;;;535        p_buf[1] = (version_temp_s&0xff);
;;;536        p_buf[2] = TUYA_BLE_PROTOCOL_VERSION_HIGN;
;;;537        p_buf[3] = TUYA_BLE_PROTOCOL_VERSION_LOW;
;;;538        if(TUYA_BLE_ADVANCED_ENCRYPTION_DEVICE==1)
;;;539        {
;;;540            p_buf[4] |= 0x02;
;;;541        }
;;;542    
;;;543        p_buf[5] = tuya_ble_current_para.sys_settings.bound_flag;
;;;544        memcpy(&p_buf[6],tuya_ble_pair_rand,6);
;;;545        p_buf[12] = (version_temp_h>>8)&0xff;
;;;546        p_buf[13] = (version_temp_h&0xff);
;;;547        memcpy(&p_buf[14],tuya_ble_current_para.auth_settings.auth_key,AUTH_KEY_LEN);
;;;548    
;;;549        p_buf[46] = (tuya_ble_firmware_version>>16)&0xff;
;;;550        p_buf[47] = (tuya_ble_firmware_version>>8)&0xff;
;;;551        p_buf[48] = (tuya_ble_firmware_version&0xff);
;;;552        p_buf[49] = (tuya_ble_hardware_version>>16)&0xff;
;;;553        p_buf[50] = (tuya_ble_hardware_version>>8)&0xff;
;;;554        p_buf[51] = (tuya_ble_hardware_version&0xff);
;;;555    
;;;556        p_buf[52] = TUYA_BLE_DEVICE_COMMUNICATION_ABILITY>>8;
;;;557        p_buf[53] = TUYA_BLE_DEVICE_COMMUNICATION_ABILITY; //communication ability
;;;558    
;;;559        p_buf[54] = 0x00;
;;;560    
;;;561        memcpy(&p_buf[55],tuya_ble_current_para.sys_settings.device_virtual_id,DEVICE_VIRTUAL_ID_LEN);
;;;562    
;;;563        p_buf[77] = (tuya_ble_mcu_firmware_version>>16)&0xff;
;;;564        p_buf[78] = (tuya_ble_mcu_firmware_version>>8)&0xff;
;;;565        p_buf[79] = (tuya_ble_mcu_firmware_version&0xff);
;;;566        p_buf[80] = (tuya_ble_mcu_hardware_version>>16)&0xff;
;;;567        p_buf[81] = (tuya_ble_mcu_hardware_version>>8)&0xff;
;;;568        p_buf[82] = (tuya_ble_mcu_hardware_version&0xff);
;;;569    
;;;570        payload_len = 83;
;;;571    
;;;572        encry_mode = recv_data[0];
;;;573    
;;;574        if(tuya_ble_commData_send(FRM_QRY_DEV_INFO_RESP,ack_sn,p_buf,payload_len,encry_mode)==2)
;;;575        {
;;;576            tuya_ble_pair_rand_clear();
;;;577        }
;;;578    }
;;;579    
;;;580    #endif
;;;581    
;;;582    extern void tuya_ble_connect_monitor_timer_stop(void);
;;;583    static void tuya_ble_handle_pair_req(uint8_t*recv_data,uint16_t recv_len)
;;;584    {
;;;585        uint8_t p_buf[1];
;;;586        uint8_t encry_mode = 0;
;;;587        uint32_t ack_sn = 0;
;;;588        tuya_ble_cb_evt_param_t event;
;;;589    
;;;590        ack_sn  = recv_data[1]<<24;
;;;591        ack_sn += recv_data[2]<<16;
;;;592        ack_sn += recv_data[3]<<8;
;;;593        ack_sn += recv_data[4];
;;;594    
;;;595        if(0 == memcmp(&recv_data[13],tuya_ble_current_para.auth_settings.device_id,DEVICE_ID_LEN))
;;;596        {
;;;597            tuya_ble_connect_monitor_timer_stop();
;;;598            
;;;599            if(1==tuya_ble_get_adv_connect_request_bit_status())
;;;600            {
;;;601                TUYA_BLE_LOG_INFO("ble adv data update,because the last broadcast data connection request flag was set!");
;;;602                tuya_ble_adv_change();
;;;603            }
;;;604    
;;;605            if(tuya_ble_current_para.sys_settings.bound_flag==1)
;;;606            {
;;;607                TUYA_BLE_LOG_INFO("PAIR_REQ already bound!");
;;;608                p_buf[0] = 2;
;;;609            }
;;;610            else
;;;611            {
;;;612    #if (TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;613                memcpy(tuya_ble_current_para.sys_settings.login_key,recv_data+29,LOGIN_KEY_LEN);
;;;614                memcpy(tuya_ble_current_para.sys_settings.device_virtual_id,recv_data+29+LOGIN_KEY_LEN,DEVICE_VIRTUAL_ID_LEN);
;;;615                tuya_ble_current_para.sys_settings.bound_flag = 1;
;;;616    
;;;617                tuya_ble_storage_save_sys_settings();
;;;618    
;;;619                tuya_ble_adv_change();
;;;620                TUYA_BLE_LOG_INFO("PAIR_REQ ok-%d",tuya_ble_current_para.sys_settings.bound_flag);
;;;621    
;;;622                event.evt = TUYA_BLE_CB_EVT_UPDATE_LOGIN_KEY_VID;
;;;623                event.device_login_key_vid_data.login_key_len = LOGIN_KEY_LEN;
;;;624                event.device_login_key_vid_data.vid_len = DEVICE_VIRTUAL_ID_LEN;
;;;625                memcpy( event.device_login_key_vid_data.login_key,tuya_ble_current_para.sys_settings.login_key,LOGIN_KEY_LEN);
;;;626                memcpy( event.device_login_key_vid_data.vid,tuya_ble_current_para.sys_settings.device_virtual_id,DEVICE_VIRTUAL_ID_LEN);
;;;627                if(tuya_ble_cb_event_send(&event)!=0)
;;;628                {
;;;629                    TUYA_BLE_LOG_ERROR("tuya ble send cb event failed.");
;;;630                }
;;;631                else
;;;632                {
;;;633                    TUYA_BLE_LOG_DEBUG("tuya ble send cb event succeed.");
;;;634                }
;;;635    
;;;636    
;;;637    #else
;;;638                tuya_ble_connect_status_set(UNBONDING_CONN);
;;;639    #endif
;;;640                p_buf[0] = 0x00;
;;;641            }
;;;642    
;;;643            if(tuya_ble_current_para.sys_settings.bound_flag==1)
;;;644            {
;;;645                tuya_ble_connect_status_set(BONDING_CONN);
;;;646            }
;;;647            event.evt = TUYA_BLE_CB_EVT_CONNECTE_STATUS;
;;;648            event.connect_status = tuya_ble_connect_status_get();
;;;649            if(tuya_ble_cb_event_send(&event)!=0)
;;;650            {
;;;651                TUYA_BLE_LOG_ERROR("tuya ble send cb event failed.");
;;;652            }
;;;653            else
;;;654            {
;;;655                TUYA_BLE_LOG_INFO("tuya ble send cb event succeed.");
;;;656            }
;;;657    
;;;658    
;;;659        }
;;;660        else
;;;661        {
;;;662            TUYA_BLE_LOG_ERROR("PAIR_REQ device id not match!");  //ID not match ,and disconnected.
;;;663            p_buf[0] = 0x01;
;;;664    
;;;665        }
;;;666    
;;;667    
;;;668        if(p_buf[0]==0)
;;;669        {
;;;670    #if (TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;671            encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;672    #else
;;;673            encry_mode = recv_data[0];
;;;674    #endif
;;;675        }
;;;676        else if(p_buf[0]==1)
;;;677        {
;;;678            encry_mode = recv_data[0];
;;;679        }
;;;680        else if(p_buf[0]==2)
;;;681        {
;;;682            encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;683        }
;;;684        else
;;;685        {
;;;686    
;;;687        }
;;;688    
;;;689        tuya_ble_commData_send(PAIR_RESP,ack_sn,p_buf,1,encry_mode);
;;;690    
;;;691        if(encry_mode == ENCRYPTION_MODE_SESSION_KEY)
;;;692        {
;;;693            tuya_ble_commData_send(FRM_GET_UNIX_TIME_CHAR_MS_REQ,0,NULL,0,encry_mode);
;;;694            TUYA_BLE_LOG_INFO("send FRM_GET_UNIX_TIME_CHAR_MS_REQ cmd to app.\n");
;;;695        }
;;;696    
;;;697        if(p_buf[0]==1)
;;;698        {
;;;699            tuya_ble_gap_disconnect();
;;;700        }
;;;701    
;;;702    }
;;;703    
;;;704    #endif
;;;705    
;;;706    #if (TUYA_BLE_PROTOCOL_VERSION_HIGN==2)
;;;707    
;;;708    static void tuya_ble_handle_dev_info_req(uint8_t*recv_data,uint16_t recv_len)
;;;709    {
;;;710        uint8_t p_buf[70];
;;;711        uint8_t payload_len = 0;
;;;712        uint32_t ack_sn = 0;
;;;713        uint8_t encry_mode = 0;
;;;714    
;;;715        ack_sn  = recv_data[1]<<24;
;;;716        ack_sn += recv_data[2]<<16;
;;;717        ack_sn += recv_data[3]<<8;
;;;718        ack_sn += recv_data[4];
;;;719    
;;;720        TUYA_BLE_LOG_INFO("get device infor-%d",tuya_ble_current_para.sys_settings.bound_flag);
;;;721    
;;;722        tuya_ble_rand_generator(tuya_ble_pair_rand,6);
;;;723        tuya_ble_pair_rand_valid = 1;
;;;724    
;;;725    
;;;726        p_buf[0] = (tuya_ble_firmware_version>>8)&0xff;
;;;727        p_buf[1] = (tuya_ble_firmware_version&0xff);
;;;728        p_buf[2] = TUYA_BLE_PROTOCOL_VERSION_HIGN;
;;;729        p_buf[3] = TUYA_BLE_PROTOCOL_VERSION_LOW;
;;;730        if(TUYA_BLE_ADVANCED_ENCRYPTION_DEVICE==1)
;;;731        {
;;;732            p_buf[4] = 0x02;
;;;733        }
;;;734        else
;;;735        {
;;;736            p_buf[4] = 0x00;
;;;737        }
;;;738        p_buf[5] = tuya_ble_current_para.sys_settings.bound_flag;
;;;739        memcpy(&p_buf[6],tuya_ble_pair_rand,6);
;;;740        p_buf[12] = (tuya_ble_hardware_version>>8)&0xff;
;;;741        p_buf[13] = (tuya_ble_hardware_version&0xff);
;;;742        memcpy(&p_buf[14],tuya_ble_current_para.auth_settings.auth_key,AUTH_KEY_LEN);
;;;743    
;;;744        payload_len = 46;
;;;745    
;;;746        encry_mode = recv_data[0];
;;;747    
;;;748        if(tuya_ble_commData_send(FRM_QRY_DEV_INFO_RESP,ack_sn,p_buf,payload_len,encry_mode)==2)
;;;749        {
;;;750            tuya_ble_pair_rand_clear();
;;;751        }
;;;752        
;;;753    }
;;;754    
;;;755    extern void tuya_ble_connect_monitor_timer_stop(void);
;;;756    static void tuya_ble_handle_pair_req(uint8_t*recv_data,uint16_t recv_len)
;;;757    {
;;;758        uint8_t p_buf[1];
;;;759        uint8_t encry_mode = 0;
;;;760        uint32_t ack_sn = 0;
;;;761        tuya_ble_cb_evt_param_t event;
;;;762    
;;;763        ack_sn  = recv_data[1]<<24;
;;;764        ack_sn += recv_data[2]<<16;
;;;765        ack_sn += recv_data[3]<<8;
;;;766        ack_sn += recv_data[4];
;;;767    
;;;768        if(0 == memcmp(&recv_data[13],tuya_ble_current_para.auth_settings.device_id,DEVICE_ID_LEN))
;;;769        {
;;;770            tuya_ble_connect_monitor_timer_stop();
;;;771            
;;;772            if(tuya_ble_current_para.sys_settings.bound_flag==1)
;;;773            {
;;;774                TUYA_BLE_LOG_ERROR("PAIR_REQ already bound!");
;;;775                p_buf[0] = 2;
;;;776            }
;;;777            else
;;;778            {
;;;779    
;;;780    #if (TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;781    
;;;782                memcpy(tuya_ble_current_para.sys_settings.login_key,recv_data+29,LOGIN_KEY_LEN);
;;;783                tuya_ble_current_para.sys_settings.bound_flag = 1;
;;;784                tuya_ble_storage_save_sys_settings();
;;;785                tuya_ble_adv_change();
;;;786                TUYA_BLE_LOG_INFO("PAIR_REQ ok-%d",tuya_ble_current_para.sys_settings.bound_flag);
;;;787                
;;;788                event.evt = TUYA_BLE_CB_EVT_UPDATE_LOGIN_KEY_VID;
;;;789                event.device_login_key_vid_data.login_key_len = LOGIN_KEY_LEN;
;;;790                event.device_login_key_vid_data.vid_len = 0;
;;;791                memcpy( event.device_login_key_vid_data.login_key,tuya_ble_current_para.sys_settings.login_key,LOGIN_KEY_LEN);
;;;792    
;;;793                if(tuya_ble_cb_event_send(&event)!=0)
;;;794                {
;;;795                    TUYA_BLE_LOG_ERROR("tuya ble send cb event failed.");
;;;796                }
;;;797                else
;;;798                {
;;;799                    TUYA_BLE_LOG_DEBUG("tuya ble send cb event succeed.");
;;;800                }
;;;801                
;;;802    #else
;;;803                tuya_ble_connect_status_set(UNBONDING_CONN);
;;;804    #endif
;;;805                p_buf[0] = 0x00;
;;;806    
;;;807            }
;;;808    
;;;809            if(tuya_ble_current_para.sys_settings.bound_flag==1)
;;;810            {
;;;811                tuya_ble_connect_status_set(BONDING_CONN);
;;;812            }
;;;813    
;;;814            event.evt = TUYA_BLE_CB_EVT_CONNECTE_STATUS;
;;;815            event.connect_status = tuya_ble_connect_status_get();
;;;816            if(tuya_ble_cb_event_send(&event)!=0)
;;;817            {
;;;818                TUYA_BLE_LOG_ERROR("tuya ble send cb event failed.");
;;;819            }
;;;820            else
;;;821            {
;;;822                TUYA_BLE_LOG_INFO("tuya ble send cb event succeed.");
;;;823            }
;;;824    
;;;825    
;;;826        }
;;;827        else
;;;828        {
;;;829            TUYA_BLE_LOG_ERROR("PAIR_REQ device id not match!");  //ID not match ,and disconnected.
;;;830            p_buf[0] = 0x01;
;;;831    
;;;832        }
;;;833    
;;;834    
;;;835        if(p_buf[0]==0)
;;;836        {
;;;837    #if (TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;838            encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;839    #else
;;;840            encry_mode = recv_data[0];
;;;841    #endif
;;;842        }
;;;843        else if(p_buf[0]==1)
;;;844        {
;;;845            encry_mode = recv_data[0];
;;;846        }
;;;847        else if(p_buf[0]==2)
;;;848        {
;;;849            encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;850        }
;;;851        else
;;;852        {
;;;853    
;;;854        }
;;;855    
;;;856        tuya_ble_commData_send(PAIR_RESP,ack_sn,p_buf,1,encry_mode);
;;;857    
;;;858        if(encry_mode == ENCRYPTION_MODE_SESSION_KEY)
;;;859        {
;;;860            tuya_ble_commData_send(FRM_GET_UNIX_TIME_CHAR_MS_REQ,0,NULL,0,encry_mode);
;;;861            TUYA_BLE_LOG_INFO("send FRM_GET_UNIX_TIME_CHAR_MS_REQ cmd to app.");
;;;862        }
;;;863    
;;;864        if(p_buf[0]==1)
;;;865        {
;;;866            tuya_ble_gap_disconnect();
;;;867        }
;;;868    
;;;869    }
;;;870    
;;;871    #endif
;;;872    
;;;873    static void tuya_ble_handle_net_config_info_req(uint8_t*recv_data,uint16_t recv_len)
;;;874    {
;;;875        uint8_t p_buf[1];
;;;876        uint8_t encry_mode = 0;
;;;877        uint32_t ack_sn = 0;
;;;878        tuya_ble_cb_evt_param_t event;
;;;879        uint16_t data_len;
;;;880    
;;;881    
;;;882        ack_sn  = recv_data[1]<<24;
;;;883        ack_sn += recv_data[2]<<16;
;;;884        ack_sn += recv_data[3]<<8;
;;;885        ack_sn += recv_data[4];
;;;886        data_len = (recv_data[11]<<8) + recv_data[12];
;;;887        encry_mode = recv_data[0];
;;;888    
;;;889        event.evt = TUYA_BLE_CB_EVT_NETWORK_INFO;
;;;890        uint8_t *ble_cb_evt_buffer=(uint8_t*)tuya_ble_malloc(data_len);
;;;891        if(ble_cb_evt_buffer==NULL)
;;;892        {
;;;893            p_buf[0]=1;
;;;894            TUYA_BLE_LOG_ERROR("ble_cb_evt_buffer malloc failed.");
;;;895            tuya_ble_commData_send(FRM_NET_CONFIG_INFO_RESP,ack_sn,p_buf,1,encry_mode);
;;;896            return;
;;;897        }
;;;898        else
;;;899        {
;;;900            memset(ble_cb_evt_buffer,0,data_len);
;;;901            memcpy(ble_cb_evt_buffer,&recv_data[13],data_len);
;;;902        }
;;;903        event.network_data.data_len = data_len;
;;;904        event.network_data.p_data = ble_cb_evt_buffer;
;;;905    
;;;906        if(tuya_ble_cb_event_send(&event)!=0)
;;;907        {
;;;908            tuya_ble_free(ble_cb_evt_buffer);
;;;909            TUYA_BLE_LOG_ERROR("tuya ble send cb event failed.");
;;;910            p_buf[0]=1;
;;;911            tuya_ble_commData_send(FRM_NET_CONFIG_INFO_RESP,ack_sn,p_buf,1,encry_mode);
;;;912            return;
;;;913        }
;;;914        else
;;;915        {
;;;916            p_buf[0]=0;
;;;917        }
;;;918    
;;;919        tuya_ble_commData_send(FRM_NET_CONFIG_INFO_RESP,ack_sn,p_buf,1,encry_mode);
;;;920    
;;;921    
;;;922    }
;;;923    
;;;924    
;;;925    static void tuya_ble_handle_ble_passthrough_data_req(uint8_t*recv_data,uint16_t recv_len)
;;;926    {
        0x008143ee:    b5f0        ..      PUSH     {r4-r7,lr}
        0x008143f0:    4604        .F      MOV      r4,r0
        0x008143f2:    7b00        .{      LDRB     r0,[r0,#0xc]
        0x008143f4:    7ae1        .z      LDRB     r1,[r4,#0xb]
        0x008143f6:    b089        ..      SUB      sp,sp,#0x24
;;;927        tuya_ble_cb_evt_param_t event;
;;;928        uint16_t data_len;
;;;929    
;;;930        data_len = (recv_data[11]<<8) + recv_data[12];
        0x008143f8:    eb002001    ...     ADD      r0,r0,r1,LSL #8
        0x008143fc:    b286        ..      UXTH     r6,r0
;;;931    
;;;932        event.evt = TUYA_BLE_CB_EVT_DATA_PASSTHROUGH;
        0x008143fe:    2048        H       MOVS     r0,#0x48
        0x00814400:    f88d0000    ....    STRB     r0,[sp,#0]
;;;933    
;;;934        uint8_t *ble_cb_evt_buffer=(uint8_t*)tuya_ble_malloc(data_len);
        0x00814404:    4630        0F      MOV      r0,r6
        0x00814406:    f000ffc3    ....    BL       tuya_ble_malloc ; 0x815390
        0x0081440a:    4f9f        .O      LDR      r7,[pc,#636] ; [0x814688] = 0x21103002
        0x0081440c:    0005        ..      MOVS     r5,r0
;;;935        if(ble_cb_evt_buffer==NULL)
        0x0081440e:    d018        ..      BEQ      0x814442 ; tuya_ble_handle_ble_passthrough_data_req + 84
;;;936        {
;;;937            TUYA_BLE_LOG_ERROR("ble_cb_evt_buffer malloc failed.");
;;;938            return;
;;;939        }
;;;940        else
;;;941        {
;;;942            memcpy(ble_cb_evt_buffer,&recv_data[13],data_len);
        0x00814410:    4632        2F      MOV      r2,r6
        0x00814412:    f104010d    ....    ADD      r1,r4,#0xd
        0x00814416:    f445f540    E.@.    BL       __aeabi_memcpy ; 0x59e9a
        0x0081441a:    f8ad6004    ...`    STRH     r6,[sp,#4]
        0x0081441e:    4668        hF      MOV      r0,sp
        0x00814420:    9502        ..      STR      r5,[sp,#8]
        0x00814422:    f000fe3b    ..;.    BL       tuya_ble_cb_event_send ; 0x81509c
        0x00814426:    2800        .(      CMP      r0,#0
        0x00814428:    d00a        ..      BEQ      0x814440 ; tuya_ble_handle_ble_passthrough_data_req + 82
;;;943        }
;;;944        event.ble_passthrough_data.data_len = data_len;
;;;945        event.ble_passthrough_data.p_data = ble_cb_evt_buffer;
;;;946    
;;;947        if(tuya_ble_cb_event_send(&event)!=0)
;;;948        {
;;;949            tuya_ble_free(ble_cb_evt_buffer);
        0x0081442a:    4628        (F      MOV      r0,r5
        0x0081442c:    f000ffbb    ....    BL       tuya_ble_free ; 0x8153a6
;;;950            TUYA_BLE_LOG_ERROR("tuya ble send cb event failed.");
        0x00814430:    a09d        ..      ADR      r0,{pc}+0x278 ; 0x8146a8
        0x00814432:    f006fbba    ....    BL       get_args ; 0x81abaa
        0x00814436:    49a8        .I      LDR      r1,[pc,#672] ; [0x8146d8] = 0x8802a78
        0x00814438:    4602        .F      MOV      r2,r0
        0x0081443a:    4638        8F      MOV      r0,r7
        0x0081443c:    f7f3db0f    ....    BL       log_buffer ; 0x7a5e
;;;951        }
;;;952        else
;;;953        {
;;;954    
;;;955        }
;;;956    
;;;957    }
        0x00814440:    e736        6.      B        0x8142b0 ; tuya_ble_evt_process + 1032
        0x00814442:    a0a6        ..      ADR      r0,{pc}+0x29a ; 0x8146dc
        0x00814444:    f006fbb1    ....    BL       get_args ; 0x81abaa
        0x00814448:    49a3        .I      LDR      r1,[pc,#652] ; [0x8146d8] = 0x8802a78
        0x0081444a:    4602        .F      MOV      r2,r0
        0x0081444c:    3930        09      SUBS     r1,r1,#0x30
        0x0081444e:    e7f4        ..      B        0x81443a ; tuya_ble_handle_ble_passthrough_data_req + 76
    tuya_ble_handle_dp_query_req
;;;958    
;;;959    #include "tuya_ble_app_production_test.h"
;;;960    static void tuya_ble_handle_ble_factory_test_req(uint8_t*recv_data,uint16_t recv_len)
;;;961    {
;;;962        uint16_t data_len;
;;;963        uint32_t ack_sn;
;;;964        uint8_t sum;
;;;965        uint8_t encry_mode;
;;;966    
;;;967        data_len = (recv_data[11]<<8) + recv_data[12];
;;;968    
;;;969        if(data_len<7)
;;;970        {
;;;971            return;
;;;972        }
;;;973    
;;;974        ack_sn  = recv_data[1]<<24;
;;;975        ack_sn += recv_data[2]<<16;
;;;976        ack_sn += recv_data[3]<<8;
;;;977        ack_sn += recv_data[4];
;;;978    
;;;979        encry_mode = recv_data[0];
;;;980    
;;;981        if((recv_data[13]==0x66)&&(recv_data[14]==0xAA))
;;;982        {
;;;983            sum = tuya_ble_check_sum(&recv_data[13],data_len-1);
;;;984            if(sum==recv_data[13+data_len-1])
;;;985            {
;;;986                tuya_ble_app_production_test_process(1,&recv_data[13],data_len);
;;;987            }
;;;988        }
;;;989    
;;;990    }
;;;991    
;;;992    
;;;993    #include "tuya_ble_app_uart_common_handler.h"
;;;994    static void tuya_ble_handle_ota_req(uint16_t cmd,uint8_t*recv_data,uint32_t recv_len)
;;;995    {
;;;996        tuya_ble_cb_evt_param_t event;
;;;997        uint16_t data_len;
;;;998        tuya_ble_ota_data_type_t cmd_type;
;;;999    
;;;1000       data_len = (recv_data[11]<<8) + recv_data[12];
;;;1001   
;;;1002       if(data_len==0)
;;;1003       {
;;;1004           return;
;;;1005       }
;;;1006   
;;;1007       if(recv_data[13]==1)  //extern mcu ota
;;;1008       {
;;;1009           tuya_ble_uart_common_mcu_ota_data_from_ble_handler(cmd,&recv_data[14],data_len-1);
;;;1010       }
;;;1011       else if(recv_data[13]==0)
;;;1012       {
;;;1013           event.evt = TUYA_BLE_CB_EVT_OTA_DATA;
;;;1014   
;;;1015           uint8_t *ble_cb_evt_buffer=(uint8_t*)tuya_ble_malloc(data_len);
;;;1016           if(ble_cb_evt_buffer==NULL)
;;;1017           {
;;;1018               TUYA_BLE_LOG_ERROR("ble_cb_evt_buffer malloc failed.");
;;;1019               return;
;;;1020           }
;;;1021           else
;;;1022           {
;;;1023               memcpy(ble_cb_evt_buffer,&recv_data[13],data_len);
;;;1024           }
;;;1025   
;;;1026           switch (cmd)
;;;1027           {
;;;1028           case FRM_OTA_START_REQ:
;;;1029               cmd_type = TUYA_BLE_OTA_REQ;
;;;1030               break;
;;;1031           case FRM_OTA_FILE_INFOR_REQ:
;;;1032               cmd_type = TUYA_BLE_OTA_FILE_INFO;
;;;1033               break;
;;;1034           case FRM_OTA_FILE_OFFSET_REQ:
;;;1035               cmd_type = TUYA_BLE_OTA_FILE_OFFSET_REQ;
;;;1036               break;
;;;1037           case FRM_OTA_DATA_REQ:
;;;1038               cmd_type = TUYA_BLE_OTA_DATA;
;;;1039               break;
;;;1040           case FRM_OTA_END_REQ:
;;;1041               cmd_type = TUYA_BLE_OTA_END;
;;;1042               break;
;;;1043           default:
;;;1044               cmd_type = TUYA_BLE_OTA_UNKONWN;
;;;1045               break;
;;;1046           }
;;;1047   
;;;1048           event.ota_data.type = cmd_type;
;;;1049           event.ota_data.data_len = data_len;
;;;1050           event.ota_data.p_data = ble_cb_evt_buffer;
;;;1051   
;;;1052           if(tuya_ble_cb_event_send(&event)!=0)
;;;1053           {
;;;1054               tuya_ble_free(ble_cb_evt_buffer);
;;;1055               TUYA_BLE_LOG_ERROR("tuya_ble_handle_ota_req-tuya ble send cb event failed.");
;;;1056           }
;;;1057           else
;;;1058           {
;;;1059   
;;;1060           }
;;;1061       }
;;;1062       else
;;;1063       {
;;;1064           
;;;1065       }
;;;1066   }
;;;1067   
;;;1068   static char current_timems_string[14] = "000000000000";
;;;1069   
;;;1070   static void tuya_ble_handle_unix_time_char_ms_resp(uint8_t*recv_data,uint16_t recv_len)
;;;1071   {
;;;1072       int16_t zone_temp = 0;
;;;1073       uint64_t time_stamp_ms;
;;;1074       uint32_t time_stamp;
;;;1075       tuya_ble_cb_evt_param_t event;
;;;1076       
;;;1077       memset(&event,0,sizeof(tuya_ble_cb_evt_param_t));
;;;1078   
;;;1079       if(recv_len<30)
;;;1080       {
;;;1081           TUYA_BLE_LOG_ERROR("received unix time char cmd data length error!");
;;;1082           return;
;;;1083       }
;;;1084   
;;;1085       if(!buffer_value_is_all_x(&recv_data[13],13,0))
;;;1086       {
;;;1087           memcpy(current_timems_string,&recv_data[13],13);
;;;1088           zone_temp  = (int16_t)((recv_data[26]<<8)|recv_data[27]);
;;;1089           time_stamp_ms = atoll(current_timems_string);
;;;1090           TUYA_BLE_LOG_INFO("received unix time_zone = %d\n",zone_temp);
;;;1091           time_stamp = time_stamp_ms/1000;
;;;1092           if(time_stamp_ms%1000>=500)
;;;1093           {
;;;1094               time_stamp += 1;
;;;1095           }
;;;1096   
;;;1097           tuya_ble_rtc_set_timestamp(time_stamp,zone_temp);
;;;1098   
;;;1099           event.evt = TUYA_BLE_CB_EVT_TIME_STAMP;
;;;1100   
;;;1101           memcpy(event.timestamp_data.timestamp_string,current_timems_string,13);
;;;1102           event.timestamp_data.time_zone = zone_temp;
;;;1103           if(tuya_ble_cb_event_send(&event)!=0)
;;;1104           {
;;;1105               TUYA_BLE_LOG_ERROR("tuya_ble_handle_unix_time_char_ms_resp-tuya ble send cb event failed.");
;;;1106           }
;;;1107   
;;;1108       }
;;;1109   
;;;1110   }
;;;1111   
;;;1112   
;;;1113   static void tuya_ble_handle_unix_time_date_resp(uint8_t*recv_data,uint16_t recv_len)
;;;1114   {
;;;1115       int16_t zone_temp = 0;
;;;1116       uint32_t time_stamp;
;;;1117       tuya_ble_cb_evt_param_t event;
;;;1118       tuya_ble_time_struct_data_t time_temp;
;;;1119   
;;;1120       if(recv_len<24)
;;;1121       {
;;;1122           TUYA_BLE_LOG_ERROR("received unix time date cmd data length error!");
;;;1123           return;
;;;1124       }
;;;1125   
;;;1126       memset(&event,0,sizeof(tuya_ble_cb_evt_param_t));
;;;1127       
;;;1128       if(!buffer_value_is_all_x(&recv_data[13],7,0))
;;;1129       {
;;;1130           time_temp.nYear = 2000+recv_data[13];
;;;1131           time_temp.nMonth = recv_data[14];
;;;1132           time_temp.nDay = recv_data[15];
;;;1133           time_temp.nHour = recv_data[16];
;;;1134           time_temp.nMin = recv_data[17];
;;;1135           time_temp.nSec = recv_data[18];
;;;1136           time_temp.DayIndex = recv_data[19];
;;;1137   
;;;1138           time_stamp = tuya_ble_mytime_2_utc_sec(&time_temp,false);
;;;1139   
;;;1140           zone_temp  = (int16_t)((recv_data[20]<<8)|recv_data[21]);
;;;1141   
;;;1142           TUYA_BLE_LOG_INFO("received unix time_zone = %d",zone_temp);
;;;1143   
;;;1144           tuya_ble_rtc_set_timestamp(time_stamp,zone_temp);
;;;1145   
;;;1146           event.evt = TUYA_BLE_CB_EVT_TIME_NORMAL;
;;;1147           event.time_normal_data.nYear = recv_data[13];
;;;1148           event.time_normal_data.nMonth = recv_data[14];
;;;1149           event.time_normal_data.nDay = recv_data[15];
;;;1150           event.time_normal_data.nHour = recv_data[16];
;;;1151           event.time_normal_data.nMin = recv_data[17];
;;;1152           event.time_normal_data.nSec = recv_data[18];
;;;1153           event.time_normal_data.DayIndex = recv_data[19];
;;;1154           event.time_normal_data.time_zone = zone_temp;
;;;1155   
;;;1156           if(tuya_ble_cb_event_send(&event)!=0)
;;;1157           {
;;;1158               TUYA_BLE_LOG_ERROR("tuya_ble_handle_unix_time_date_resp-tuya ble send cb event failed.");
;;;1159           }
;;;1160   
;;;1161       }
;;;1162   
;;;1163   }
;;;1164   
;;;1165   static void tuya_ble_handle_dp_write_req(uint8_t*recv_data,uint16_t recv_len)
;;;1166   {
;;;1167       mtp_ret ret;
;;;1168       klv_node_s *list = NULL;
;;;1169       uint8_t p_buf[1];
;;;1170       uint16_t data_len = 0;
;;;1171       uint32_t ack_sn = 0;
;;;1172       tuya_ble_cb_evt_param_t event;
;;;1173   
;;;1174       ack_sn  = recv_data[1]<<24;
;;;1175       ack_sn += recv_data[2]<<16;
;;;1176       ack_sn += recv_data[3]<<8;
;;;1177       ack_sn += recv_data[4];
;;;1178   
;;;1179       data_len = (recv_data[11]<<8)|recv_data[12];
;;;1180   
;;;1181       if((data_len==0)||(data_len>TUYA_BLE_RECEIVE_MAX_DP_DATA_LEN))
;;;1182       {
;;;1183           TUYA_BLE_LOG_ERROR("cmd dp write receive data len == %d",data_len);
;;;1184           p_buf[0] = 0x01;
;;;1185           tuya_ble_commData_send(FRM_CMD_RESP,ack_sn,p_buf,1,ENCRYPTION_MODE_SESSION_KEY);
;;;1186           return;
;;;1187       }
;;;1188       TUYA_BLE_LOG_HEXDUMP_DEBUG("cmd_dp_write data : ",recv_data+13,data_len);
;;;1189       ret = data_2_klvlist(&recv_data[13],data_len,&list,0);
;;;1190       if(MTP_OK != ret)
;;;1191       {
;;;1192           TUYA_BLE_LOG_ERROR("cmd rx fail-%d",ret);
;;;1193           p_buf[0] = 0x01;
;;;1194           tuya_ble_commData_send(FRM_CMD_RESP,ack_sn,p_buf,1,ENCRYPTION_MODE_SESSION_KEY);
;;;1195           return;
;;;1196       }
;;;1197   
;;;1198       free_klv_list(list);
;;;1199       p_buf[0] = 0x00;
;;;1200   
;;;1201       tuya_ble_commData_send(FRM_CMD_RESP,ack_sn,p_buf,1,ENCRYPTION_MODE_SESSION_KEY);
;;;1202   
;;;1203       event.evt = TUYA_BLE_CB_EVT_DP_WRITE;
;;;1204   
;;;1205       uint8_t *ble_cb_evt_buffer=(uint8_t*)tuya_ble_malloc(data_len);
;;;1206       if(ble_cb_evt_buffer==NULL)
;;;1207       {
;;;1208           TUYA_BLE_LOG_ERROR("ble_cb_evt_buffer malloc failed.");
;;;1209           return;
;;;1210       }
;;;1211       else
;;;1212       {
;;;1213           memcpy(ble_cb_evt_buffer,&recv_data[13],data_len);
;;;1214       }
;;;1215       event.dp_write_data.p_data = ble_cb_evt_buffer;
;;;1216       event.dp_write_data.data_len = data_len;
;;;1217   
;;;1218       if(tuya_ble_cb_event_send(&event)!=0)
;;;1219       {
;;;1220           tuya_ble_free(ble_cb_evt_buffer);
;;;1221           TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_write_req-tuya ble send cb event failed.");
;;;1222       }
;;;1223       else
;;;1224       {
;;;1225   
;;;1226       }
;;;1227   
;;;1228   }
;;;1229   
;;;1230   static void tuya_ble_handle_dp_query_req(uint8_t*recv_data,uint16_t recv_len)
;;;1231   {
        0x00814450:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00814452:    4604        .F      MOV      r4,r0
;;;1232       uint8_t p_buf[1];
;;;1233       uint16_t dp_num = 0;
;;;1234       uint32_t ack_sn = 0;
;;;1235       tuya_ble_cb_evt_param_t event;
;;;1236       uint8_t *ble_cb_evt_buffer = NULL;
;;;1237   
;;;1238       ack_sn  = recv_data[1]<<24;
        0x00814454:    7840        @x      LDRB     r0,[r0,#1]
        0x00814456:    78a1        .x      LDRB     r1,[r4,#2]
        0x00814458:    0600        ..      LSLS     r0,r0,#24
;;;1239       ack_sn += recv_data[2]<<16;
        0x0081445a:    eb004001    ...@    ADD      r0,r0,r1,LSL #16
;;;1240       ack_sn += recv_data[3]<<8;
        0x0081445e:    78e1        .x      LDRB     r1,[r4,#3]
        0x00814460:    b08b        ..      SUB      sp,sp,#0x2c
        0x00814462:    eb002001    ...     ADD      r0,r0,r1,LSL #8
;;;1241       ack_sn += recv_data[4];
        0x00814466:    7921        !y      LDRB     r1,[r4,#4]
        0x00814468:    2600        .&      MOVS     r6,#0
        0x0081446a:    4401        .D      ADD      r1,r1,r0
;;;1242   
;;;1243       dp_num = (recv_data[11]<<8)|recv_data[12];
        0x0081446c:    f8b4000b    ....    LDRH     r0,[r4,#0xb]
        0x00814470:    f88d6028    ..(`    STRB     r6,[sp,#0x28]
        0x00814474:    ba45        E.      REV16    r5,r0
;;;1244   
;;;1245       p_buf[0] = 0x00;
;;;1246   
;;;1247       tuya_ble_commData_send(FRM_STATE_QUERY_RESP,ack_sn,p_buf,1,ENCRYPTION_MODE_SESSION_KEY);
        0x00814476:    2005        .       MOVS     r0,#5
        0x00814478:    9000        ..      STR      r0,[sp,#0]
        0x0081447a:    2301        .#      MOVS     r3,#1
        0x0081447c:    aa0a        ..      ADD      r2,sp,#0x28
        0x0081447e:    2003        .       MOVS     r0,#3
        0x00814480:    f7fefdf3    ....    BL       tuya_ble_commData_send ; 0x81306a
;;;1248   
;;;1249       event.evt = TUYA_BLE_CB_EVT_DP_QUERY;
        0x00814484:    2042        B       MOVS     r0,#0x42
        0x00814486:    4f80        .O      LDR      r7,[pc,#512] ; [0x814688] = 0x21103002
        0x00814488:    f88d0004    ....    STRB     r0,[sp,#4]
;;;1250   
;;;1251       if(dp_num>0)
        0x0081448c:    b14d        M.      CBZ      r5,0x8144a2 ; tuya_ble_handle_dp_query_req + 82
;;;1252       {
;;;1253           ble_cb_evt_buffer=(uint8_t*)tuya_ble_malloc(dp_num);
        0x0081448e:    4628        (F      MOV      r0,r5
        0x00814490:    f000ff7e    ..~.    BL       tuya_ble_malloc ; 0x815390
        0x00814494:    0006        ..      MOVS     r6,r0
;;;1254           if(ble_cb_evt_buffer==NULL)
        0x00814496:    d01a        ..      BEQ      0x8144ce ; tuya_ble_handle_dp_query_req + 126
;;;1255           {
;;;1256               TUYA_BLE_LOG_ERROR("ble_cb_evt_buffer malloc failed.");
;;;1257               return;
;;;1258           }
;;;1259           else
;;;1260           {
;;;1261               memcpy(ble_cb_evt_buffer,&recv_data[13],dp_num);
        0x00814498:    462a        *F      MOV      r2,r5
        0x0081449a:    f104010d    ....    ADD      r1,r4,#0xd
        0x0081449e:    f445f4fc    E...    BL       __aeabi_memcpy ; 0x59e9a
;;;1262           }
;;;1263       }
;;;1264       event.dp_query_data.p_data = ble_cb_evt_buffer;
;;;1265       event.dp_query_data.data_len = dp_num;
        0x008144a2:    9602        ..      STR      r6,[sp,#8]
        0x008144a4:    f8ad500c    ...P    STRH     r5,[sp,#0xc]
;;;1266   
;;;1267       if(tuya_ble_cb_event_send(&event)!=0)
        0x008144a8:    a801        ..      ADD      r0,sp,#4
        0x008144aa:    f000fdf7    ....    BL       tuya_ble_cb_event_send ; 0x81509c
        0x008144ae:    2800        .(      CMP      r0,#0
        0x008144b0:    d00c        ..      BEQ      0x8144cc ; tuya_ble_handle_dp_query_req + 124
;;;1268       {
;;;1269           TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_query_req-tuya ble send cb event failed.");
        0x008144b2:    4896        .H      LDR      r0,[pc,#600] ; [0x81470c] = 0x81d388
        0x008144b4:    f006fb79    ..y.    BL       get_args ; 0x81abaa
        0x008144b8:    4602        .F      MOV      r2,r0
        0x008144ba:    4995        .I      LDR      r1,[pc,#596] ; [0x814710] = 0x8802dd4
        0x008144bc:    4638        8F      MOV      r0,r7
        0x008144be:    f7f3dace    ....    BL       log_buffer ; 0x7a5e
;;;1270           if(dp_num>0)
        0x008144c2:    2d00        .-      CMP      r5,#0
        0x008144c4:    d002        ..      BEQ      0x8144cc ; tuya_ble_handle_dp_query_req + 124
;;;1271           {
;;;1272               tuya_ble_free(ble_cb_evt_buffer);
        0x008144c6:    4630        0F      MOV      r0,r6
        0x008144c8:    f000ff6d    ..m.    BL       tuya_ble_free ; 0x8153a6
;;;1273           }
;;;1274       }
;;;1275       else
;;;1276       {
;;;1277   
;;;1278       }
;;;1279   }
        0x008144cc:    e439        9.      B        0x813d42 ; tuya_ble_handle_unix_time_date_resp + 218
        0x008144ce:    a083        ..      ADR      r0,{pc}+0x20e ; 0x8146dc
        0x008144d0:    f006fb6b    ..k.    BL       get_args ; 0x81abaa
        0x008144d4:    498e        .I      LDR      r1,[pc,#568] ; [0x814710] = 0x8802dd4
        0x008144d6:    4602        .F      MOV      r2,r0
        0x008144d8:    3930        09      SUBS     r1,r1,#0x30
        0x008144da:    4638        8F      MOV      r0,r7
        0x008144dc:    f7f3dabf    ....    BL       log_buffer ; 0x7a5e
        0x008144e0:    e42f        /.      B        0x813d42 ; tuya_ble_handle_unix_time_date_resp + 218
    tuya_ble_handle_unbond_req
;;;1280   
;;;1281   
;;;1282   void tuya_ble_device_unbond(void)
;;;1283   {
;;;1284   
;;;1285       tuya_ble_gap_disconnect();
;;;1286       memset(tuya_ble_current_para.sys_settings.login_key,0,LOGIN_KEY_LEN);
;;;1287       tuya_ble_current_para.sys_settings.bound_flag= 0;
;;;1288       tuya_ble_storage_save_sys_settings();
;;;1289       tuya_ble_adv_change();
;;;1290       tuya_ble_connect_status_set(UNBONDING_UNCONN);
;;;1291       TUYA_BLE_LOG_INFO("tuya_ble_device_unbond current bound flag = %d",tuya_ble_current_para.sys_settings.bound_flag);
;;;1292   }
;;;1293   
;;;1294   
;;;1295   
;;;1296   static void tuya_ble_handle_unbond_req(uint8_t*recv_data,uint16_t recv_len)
;;;1297   {
        0x008144e2:    b570        p.      PUSH     {r4-r6,lr}
        0x008144e4:    b08c        ..      SUB      sp,sp,#0x30
        0x008144e6:    4604        .F      MOV      r4,r0
;;;1298       uint8_t p_buf[1];
;;;1299       uint8_t encry_mode = 0;
;;;1300       uint32_t ack_sn = 0;
;;;1301       tuya_ble_cb_evt_param_t event;
;;;1302   
;;;1303       event.evt = TUYA_BLE_CB_EVT_UNBOUND;
        0x008144e8:    204d        M       MOVS     r0,#0x4d
        0x008144ea:    f88d0004    ....    STRB     r0,[sp,#4]
;;;1304       event.unbound_data.data = 0;
        0x008144ee:    2600        .&      MOVS     r6,#0
        0x008144f0:    f88d6008    ...`    STRB     r6,[sp,#8]
;;;1305   
;;;1306       if(tuya_ble_cb_event_send(&event)!=0)
        0x008144f4:    a801        ..      ADD      r0,sp,#4
        0x008144f6:    f000fdd1    ....    BL       tuya_ble_cb_event_send ; 0x81509c
        0x008144fa:    4d63        cM      LDR      r5,[pc,#396] ; [0x814688] = 0x21103002
        0x008144fc:    b140        @.      CBZ      r0,0x814510 ; tuya_ble_handle_unbond_req + 46
;;;1307       {
;;;1308           TUYA_BLE_LOG_ERROR("tuya_ble_handle_unbond_req-tuya ble send cb event (unbound req) failed.");
        0x008144fe:    4885        .H      LDR      r0,[pc,#532] ; [0x814714] = 0x81d134
        0x00814500:    f006fb53    ..S.    BL       get_args ; 0x81abaa
        0x00814504:    4982        .I      LDR      r1,[pc,#520] ; [0x814710] = 0x8802dd4
        0x00814506:    4602        .F      MOV      r2,r0
        0x00814508:    318c        .1      ADDS     r1,r1,#0x8c
        0x0081450a:    4628        (F      MOV      r0,r5
        0x0081450c:    f7f3daa7    ....    BL       log_buffer ; 0x7a5e
;;;1309       }
;;;1310       else
;;;1311       {
;;;1312   
;;;1313       }
;;;1314   #if (TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;1315       ack_sn  = recv_data[1]<<24;
        0x00814510:    7860        `x      LDRB     r0,[r4,#1]
        0x00814512:    78a1        .x      LDRB     r1,[r4,#2]
        0x00814514:    0600        ..      LSLS     r0,r0,#24
;;;1316       ack_sn += recv_data[2]<<16;
        0x00814516:    eb004001    ...@    ADD      r0,r0,r1,LSL #16
;;;1317       ack_sn += recv_data[3]<<8;
        0x0081451a:    78e1        .x      LDRB     r1,[r4,#3]
        0x0081451c:    2301        .#      MOVS     r3,#1
        0x0081451e:    eb002001    ...     ADD      r0,r0,r1,LSL #8
;;;1318       ack_sn += recv_data[4];
        0x00814522:    7921        !y      LDRB     r1,[r4,#4]
        0x00814524:    f88d6028    ..(`    STRB     r6,[sp,#0x28]
        0x00814528:    4401        .D      ADD      r1,r1,r0
;;;1319   
;;;1320       encry_mode = ENCRYPTION_MODE_SESSION_KEY;
        0x0081452a:    2005        .       MOVS     r0,#5
;;;1321   
;;;1322       p_buf[0] = 0;
;;;1323   
;;;1324       tuya_ble_commData_send(FRM_UNBONDING_RESP,ack_sn,p_buf,1,encry_mode);
        0x0081452c:    aa0a        ..      ADD      r2,sp,#0x28
        0x0081452e:    9000        ..      STR      r0,[sp,#0]
        0x00814530:    f7fefd9b    ....    BL       tuya_ble_commData_send ; 0x81306a
;;;1325       
;;;1326   #if (TUYA_BLE_DEVICE_UNBIND_MODE)    
;;;1327       tuya_ble_device_unbond();
        0x00814534:    f7fffc9a    ....    BL       tuya_ble_device_unbond ; 0x813e6c
;;;1328   
;;;1329       event.evt = TUYA_BLE_CB_EVT_CONNECTE_STATUS;
        0x00814538:    2040        @       MOVS     r0,#0x40
        0x0081453a:    f88d0004    ....    STRB     r0,[sp,#4]
;;;1330       event.connect_status = tuya_ble_connect_status_get();
        0x0081453e:    f000fd71    ..q.    BL       tuya_ble_connect_status_get ; 0x815024
        0x00814542:    f88d0008    ....    STRB     r0,[sp,#8]
;;;1331   
;;;1332       if(tuya_ble_cb_event_send(&event)!=0)
        0x00814546:    a801        ..      ADD      r0,sp,#4
        0x00814548:    f000fda8    ....    BL       tuya_ble_cb_event_send ; 0x81509c
        0x0081454c:    2800        .(      CMP      r0,#0
        0x0081454e:    d008        ..      BEQ      0x814562 ; tuya_ble_handle_unbond_req + 128
;;;1333       {
;;;1334           TUYA_BLE_LOG_ERROR("tuya_ble_handle_unbond_req-tuya ble send cb event (connect status update) failed.");
        0x00814550:    4871        qH      LDR      r0,[pc,#452] ; [0x814718] = 0x81d004
        0x00814552:    f006fb2a    ..*.    BL       get_args ; 0x81abaa
        0x00814556:    496e        nI      LDR      r1,[pc,#440] ; [0x814710] = 0x8802dd4
        0x00814558:    4602        .F      MOV      r2,r0
        0x0081455a:    31e4        .1      ADDS     r1,r1,#0xe4
        0x0081455c:    4628        (F      MOV      r0,r5
        0x0081455e:    f7f3da7e    ..~.    BL       log_buffer ; 0x7a5e
;;;1335       }
;;;1336       else
;;;1337       {
;;;1338   
;;;1339       }
;;;1340   #else
;;;1341       tuya_ble_gap_disconnect();
;;;1342   #endif    
;;;1343       
;;;1344   #endif
;;;1345   }
        0x00814562:    b00c        ..      ADD      sp,sp,#0x30
        0x00814564:    bd70        p.      POP      {r4-r6,pc}
    tuya_ble_handle_anomaly_unbond_req
;;;1346   
;;;1347   
;;;1348   static void tuya_ble_handle_anomaly_unbond_req(uint8_t*recv_data,uint16_t recv_len)
;;;1349   {
        0x00814566:    b570        p.      PUSH     {r4-r6,lr}
        0x00814568:    b08c        ..      SUB      sp,sp,#0x30
        0x0081456a:    4604        .F      MOV      r4,r0
;;;1350       uint8_t p_buf[1];
;;;1351       uint8_t encry_mode = 0;
;;;1352       uint32_t ack_sn = 0;
;;;1353       tuya_ble_cb_evt_param_t event;
;;;1354   
;;;1355       event.evt = TUYA_BLE_CB_EVT_ANOMALY_UNBOUND;
        0x0081456c:    204e        N       MOVS     r0,#0x4e
        0x0081456e:    f88d0004    ....    STRB     r0,[sp,#4]
;;;1356       event.anomaly_unbound_data.data = 0;
        0x00814572:    2600        .&      MOVS     r6,#0
        0x00814574:    f88d6008    ...`    STRB     r6,[sp,#8]
;;;1357   
;;;1358       if(tuya_ble_cb_event_send(&event)!=0)
        0x00814578:    a801        ..      ADD      r0,sp,#4
        0x0081457a:    f000fd8f    ....    BL       tuya_ble_cb_event_send ; 0x81509c
        0x0081457e:    4d42        BM      LDR      r5,[pc,#264] ; [0x814688] = 0x21103002
        0x00814580:    b138        8.      CBZ      r0,0x814592 ; tuya_ble_handle_anomaly_unbond_req + 44
;;;1359       {
;;;1360           TUYA_BLE_LOG_ERROR("tuya_ble_handle_anomaly_unbond_req-tuya ble send cb event (unbound req) failed.");
        0x00814582:    4866        fH      LDR      r0,[pc,#408] ; [0x81471c] = 0x81d18c
        0x00814584:    f006fb11    ....    BL       get_args ; 0x81abaa
        0x00814588:    4602        .F      MOV      r2,r0
        0x0081458a:    4965        eI      LDR      r1,[pc,#404] ; [0x814720] = 0x8802f18
        0x0081458c:    4628        (F      MOV      r0,r5
        0x0081458e:    f7f3da66    ..f.    BL       log_buffer ; 0x7a5e
;;;1361       }
;;;1362       else
;;;1363       {
;;;1364   
;;;1365       }
;;;1366   
;;;1367   #if (TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;1368   
;;;1369       ack_sn  = recv_data[1]<<24;
        0x00814592:    7860        `x      LDRB     r0,[r4,#1]
        0x00814594:    78a1        .x      LDRB     r1,[r4,#2]
        0x00814596:    0600        ..      LSLS     r0,r0,#24
;;;1370       ack_sn += recv_data[2]<<16;
        0x00814598:    eb004001    ...@    ADD      r0,r0,r1,LSL #16
;;;1371       ack_sn += recv_data[3]<<8;
        0x0081459c:    78e1        .x      LDRB     r1,[r4,#3]
        0x0081459e:    aa0a        ..      ADD      r2,sp,#0x28
        0x008145a0:    eb002001    ...     ADD      r0,r0,r1,LSL #8
;;;1372       ack_sn += recv_data[4];
        0x008145a4:    7921        !y      LDRB     r1,[r4,#4]
        0x008145a6:    f88d6028    ..(`    STRB     r6,[sp,#0x28]
        0x008145aa:    4401        .D      ADD      r1,r1,r0
;;;1373   
;;;1374       encry_mode = ENCRYPTION_MODE_KEY_1;
        0x008145ac:    2001        .       MOVS     r0,#1
;;;1375   
;;;1376       p_buf[0] = 0;
;;;1377   
;;;1378       tuya_ble_commData_send(FRM_ANOMALY_UNBONDING_RESP,ack_sn,p_buf,1,encry_mode);
        0x008145ae:    4603        .F      MOV      r3,r0
        0x008145b0:    9000        ..      STR      r0,[sp,#0]
        0x008145b2:    2014        .       MOVS     r0,#0x14
        0x008145b4:    f7fefd59    ..Y.    BL       tuya_ble_commData_send ; 0x81306a
;;;1379       tuya_ble_device_unbond();
        0x008145b8:    f7fffc58    ..X.    BL       tuya_ble_device_unbond ; 0x813e6c
;;;1380   
;;;1381       event.evt = TUYA_BLE_CB_EVT_CONNECTE_STATUS;
        0x008145bc:    2040        @       MOVS     r0,#0x40
        0x008145be:    f88d0004    ....    STRB     r0,[sp,#4]
;;;1382       event.connect_status = tuya_ble_connect_status_get();
        0x008145c2:    f000fd2f    ../.    BL       tuya_ble_connect_status_get ; 0x815024
        0x008145c6:    f88d0008    ....    STRB     r0,[sp,#8]
;;;1383   
;;;1384       if(tuya_ble_cb_event_send(&event)!=0)
        0x008145ca:    a801        ..      ADD      r0,sp,#4
        0x008145cc:    f000fd66    ..f.    BL       tuya_ble_cb_event_send ; 0x81509c
        0x008145d0:    2800        .(      CMP      r0,#0
        0x008145d2:    d0c6        ..      BEQ      0x814562 ; tuya_ble_handle_unbond_req + 128
;;;1385       {
;;;1386           TUYA_BLE_LOG_ERROR("tuya_ble_handle_anomaly_unbond_req-tuya ble send cb event (connect status update) failed.");
        0x008145d4:    4853        SH      LDR      r0,[pc,#332] ; [0x814724] = 0x81d064
        0x008145d6:    f006fae8    ....    BL       get_args ; 0x81abaa
        0x008145da:    4951        QI      LDR      r1,[pc,#324] ; [0x814720] = 0x8802f18
        0x008145dc:    4602        .F      MOV      r2,r0
        0x008145de:    3160        `1      ADDS     r1,r1,#0x60
        0x008145e0:    4628        (F      MOV      r0,r5
        0x008145e2:    f7f3da3c    ..<.    BL       log_buffer ; 0x7a5e
;;;1387       }
;;;1388       else
;;;1389       {
;;;1390   
;;;1391       }
;;;1392   
;;;1393   #endif
;;;1394   }
        0x008145e6:    e7bc        ..      B        0x814562 ; tuya_ble_handle_unbond_req + 128
    tuya_ble_handle_device_reset_req
;;;1395   
;;;1396   
;;;1397   static void tuya_ble_handle_device_reset_req(uint8_t*recv_data,uint16_t recv_len)
;;;1398   {
        0x008145e8:    b570        p.      PUSH     {r4-r6,lr}
        0x008145ea:    b08c        ..      SUB      sp,sp,#0x30
        0x008145ec:    4604        .F      MOV      r4,r0
;;;1399       uint8_t p_buf[1];
;;;1400       uint8_t encry_mode = 0;
;;;1401       uint32_t ack_sn = 0;
;;;1402       tuya_ble_cb_evt_param_t event;
;;;1403   
;;;1404       event.evt = TUYA_BLE_CB_EVT_DEVICE_RESET;
        0x008145ee:    204f        O       MOVS     r0,#0x4f
        0x008145f0:    f88d0004    ....    STRB     r0,[sp,#4]
;;;1405       event.device_reset_data.data = 0;
        0x008145f4:    2600        .&      MOVS     r6,#0
        0x008145f6:    f88d6008    ...`    STRB     r6,[sp,#8]
;;;1406   
;;;1407       if(tuya_ble_cb_event_send(&event)!=0)
        0x008145fa:    a801        ..      ADD      r0,sp,#4
        0x008145fc:    f000fd4e    ..N.    BL       tuya_ble_cb_event_send ; 0x81509c
        0x00814600:    4d21        !M      LDR      r5,[pc,#132] ; [0x814688] = 0x21103002
        0x00814602:    b140        @.      CBZ      r0,0x814616 ; tuya_ble_handle_device_reset_req + 46
;;;1408       {
;;;1409           TUYA_BLE_LOG_ERROR("tuya_ble_handle_device_reset_req-tuya ble send cb event device reset req failed.");
        0x00814604:    4848        HH      LDR      r0,[pc,#288] ; [0x814728] = 0x81d1ec
        0x00814606:    f006fad0    ....    BL       get_args ; 0x81abaa
        0x0081460a:    4945        EI      LDR      r1,[pc,#276] ; [0x814720] = 0x8802f18
        0x0081460c:    4602        .F      MOV      r2,r0
        0x0081460e:    31c8        .1      ADDS     r1,r1,#0xc8
        0x00814610:    4628        (F      MOV      r0,r5
        0x00814612:    f7f3da24    ..$.    BL       log_buffer ; 0x7a5e
;;;1410       }
;;;1411       else
;;;1412       {
;;;1413   
;;;1414       }
;;;1415   
;;;1416   #if (TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;1417   
;;;1418       ack_sn  = recv_data[1]<<24;
        0x00814616:    7860        `x      LDRB     r0,[r4,#1]
        0x00814618:    0600        ..      LSLS     r0,r0,#24
;;;1419       ack_sn += recv_data[2]<<16;
        0x0081461a:    e087        ..      B        0x81472c ; tuya_ble_handle_device_reset_req + 324
    $d
        0x0081461c:    205d495b    [I]     DCD    542984539
        0x00814620:    41595554    TUYA    DCD    1096373588
        0x00814624:    454c425f    _BLE    DCD    1162625631
        0x00814628:    4552203a    : RE    DCD    1163010106
        0x0081462c:    56494543    CEIV    DCD    1447642435
        0x00814630:    46204445    ED F    DCD    1176519749
        0x00814634:    445f4d52    RM_D    DCD    1147096402
        0x00814638:    43495645    EVIC    DCD    1128879685
        0x0081463c:    45525f45    E_RE    DCD    1163026245
        0x00814640:    5f544553    SET_    DCD    1599358291
        0x00814644:    00514552    REQ.    DCD    5326162
        0x00814648:    08803358    X3..    DCD    142619480
        0x0081464c:    0081d544    D...    DCD    8508740
        0x00814650:    08803148    H1..    DCD    142618952
        0x00814654:    0081d488    ....    DCD    8508552
        0x00814658:    0081d3d4    ....    DCD    8508372
        0x0081465c:    0081d4e4    ....    DCD    8508644
        0x00814660:    0081d424    $...    DCD    8508452
        0x00814664:    205d445b    [D]     DCD    542983259
        0x00814668:    41595554    TUYA    DCD    1096373588
        0x0081466c:    454c425f    _BLE    DCD    1162625631
        0x00814670:    7263203a    : cr    DCD    1919098938
        0x00814674:    5f363163    c16_    DCD    1597387107
        0x00814678:    5b6c6163    cal[    DCD    1533829475
        0x0081467c:    30257830    0x%0    DCD    807761968
        0x00814680:    005d7834    4x].    DCD    6125620
        0x00814684:    088024bc    .$..    DCD    142615740
        0x00814688:    21103002    .0.!    DCD    554708994
        0x0081468c:    205d445b    [D]     DCD    542983259
        0x00814690:    41595554    TUYA    DCD    1096373588
        0x00814694:    454c425f    _BLE    DCD    1162625631
        0x00814698:    7263203a    : cr    DCD    1919098938
        0x0081469c:    5b363163    c16[    DCD    1530278243
        0x008146a0:    30257830    0x%0    DCD    807761968
        0x008146a4:    005d7834    4x].    DCD    6125620
        0x008146a8:    205d455b    [E]     DCD    542983515
        0x008146ac:    41595554    TUYA    DCD    1096373588
        0x008146b0:    454c425f    _BLE    DCD    1162625631
        0x008146b4:    7574203a    : tu    DCD    1970544698
        0x008146b8:    62206179    ya b    DCD    1646289273
        0x008146bc:    7320656c    le s    DCD    1931502956
        0x008146c0:    20646e65    end     DCD    543452773
        0x008146c4:    65206263    cb e    DCD    1696621155
        0x008146c8:    746e6576    vent    DCD    1953391990
        0x008146cc:    69616620     fai    DCD    1767990816
        0x008146d0:    2e64656c    led.    DCD    778331500
        0x008146d4:    00000000    ....    DCD    0
        0x008146d8:    08802a78    x*..    DCD    142617208
        0x008146dc:    205d455b    [E]     DCD    542983515
        0x008146e0:    41595554    TUYA    DCD    1096373588
        0x008146e4:    454c425f    _BLE    DCD    1162625631
        0x008146e8:    6c62203a    : bl    DCD    1818370106
        0x008146ec:    62635f65    e_cb    DCD    1650679653
        0x008146f0:    7476655f    _evt    DCD    1953916255
        0x008146f4:    6675625f    _buf    DCD    1718968927
        0x008146f8:    20726566    fer     DCD    544367974
        0x008146fc:    6c6c616d    mall    DCD    1819042157
        0x00814700:    6620636f    oc f    DCD    1713398639
        0x00814704:    656c6961    aile    DCD    1701603681
        0x00814708:    00002e64    d...    DCD    11876
        0x0081470c:    0081d388    ....    DCD    8508296
        0x00814710:    08802dd4    .-..    DCD    142618068
        0x00814714:    0081d134    4...    DCD    8507700
        0x00814718:    0081d004    ....    DCD    8507396
        0x0081471c:    0081d18c    ....    DCD    8507788
        0x00814720:    08802f18    ./..    DCD    142618392
        0x00814724:    0081d064    d...    DCD    8507492
        0x00814728:    0081d1ec    ....    DCD    8507884
    $t
        0x0081472c:    78a1        .x      LDRB     r1,[r4,#2]
        0x0081472e:    2301        .#      MOVS     r3,#1
        0x00814730:    eb004001    ...@    ADD      r0,r0,r1,LSL #16
;;;1420       ack_sn += recv_data[3]<<8;
        0x00814734:    78e1        .x      LDRB     r1,[r4,#3]
        0x00814736:    aa0a        ..      ADD      r2,sp,#0x28
        0x00814738:    eb002001    ...     ADD      r0,r0,r1,LSL #8
;;;1421       ack_sn += recv_data[4];
        0x0081473c:    7921        !y      LDRB     r1,[r4,#4]
        0x0081473e:    f88d6028    ..(`    STRB     r6,[sp,#0x28]
        0x00814742:    4401        .D      ADD      r1,r1,r0
;;;1422   
;;;1423       encry_mode = ENCRYPTION_MODE_SESSION_KEY;
        0x00814744:    2005        .       MOVS     r0,#5
;;;1424   
;;;1425       p_buf[0] = 0;
;;;1426   
;;;1427       tuya_ble_commData_send(FRM_DEVICE_RESET_RESP,ack_sn,p_buf,1,encry_mode);
        0x00814746:    9000        ..      STR      r0,[sp,#0]
        0x00814748:    2006        .       MOVS     r0,#6
        0x0081474a:    f7fefc8e    ....    BL       tuya_ble_commData_send ; 0x81306a
;;;1428       
;;;1429   #if (TUYA_BLE_DEVICE_UNBIND_MODE)    
;;;1430       memset(tuya_ble_current_para.sys_settings.device_virtual_id,0,DEVICE_VIRTUAL_ID_LEN);
        0x0081474e:    2116        .!      MOVS     r1,#0x16
        0x00814750:    480c        .H      LDR      r0,[pc,#48] ; [0x814784] = 0x2098f4
        0x00814752:    f445f485    E...    BL       __aeabi_memclr4 ; 0x5a060
;;;1431       tuya_ble_device_unbond();
        0x00814756:    f7fffb89    ....    BL       tuya_ble_device_unbond ; 0x813e6c
;;;1432   
;;;1433       event.evt = TUYA_BLE_CB_EVT_CONNECTE_STATUS;
        0x0081475a:    2040        @       MOVS     r0,#0x40
        0x0081475c:    f88d0004    ....    STRB     r0,[sp,#4]
;;;1434       event.connect_status = tuya_ble_connect_status_get();
        0x00814760:    f000fc60    ..`.    BL       tuya_ble_connect_status_get ; 0x815024
        0x00814764:    f88d0008    ....    STRB     r0,[sp,#8]
;;;1435   
;;;1436       if(tuya_ble_cb_event_send(&event)!=0)
        0x00814768:    a801        ..      ADD      r0,sp,#4
        0x0081476a:    f000fc97    ....    BL       tuya_ble_cb_event_send ; 0x81509c
        0x0081476e:    2800        .(      CMP      r0,#0
        0x00814770:    d007        ..      BEQ      0x814782 ; tuya_ble_handle_device_reset_req + 410
;;;1437       {
;;;1438           TUYA_BLE_LOG_ERROR("tuya_ble_handle_device_reset_req-tuya ble send cb event (connect status update) failed.");
        0x00814772:    4805        .H      LDR      r0,[pc,#20] ; [0x814788] = 0x81d0cc
        0x00814774:    f006fa19    ....    BL       get_args ; 0x81abaa
        0x00814778:    4602        .F      MOV      r2,r0
        0x0081477a:    4904        .I      LDR      r1,[pc,#16] ; [0x81478c] = 0x8803040
        0x0081477c:    4628        (F      MOV      r0,r5
        0x0081477e:    f7f3d96e    ..n.    BL       log_buffer ; 0x7a5e
;;;1439       }
;;;1440       else
;;;1441       {
;;;1442   
;;;1443       }
;;;1444   #else
;;;1445       tuya_ble_gap_disconnect();
;;;1446   #endif    
;;;1447       
;;;1448   #endif
;;;1449   }
        0x00814782:    e6ee        ..      B        0x814562 ; tuya_ble_handle_unbond_req + 128
    $d
        0x00814784:    002098f4    .. .    DCD    2136308
        0x00814788:    0081d0cc    ....    DCD    8507596
        0x0081478c:    08803040    @0..    DCD    142618688
    $t
    .text
    tuya_ble_handle_device_info_update_evt
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_event_handler.c
;;;45     {
        0x00814790:    b510        ..      PUSH     {r4,lr}
        0x00814792:    4cff        .L      LDR      r4,[pc,#1020] ; [0x814b90] = 0x2097d4
        0x00814794:    7a02        .z      LDRB     r2,[r0,#8]
        0x00814796:    f100010a    ....    ADD      r1,r0,#0xa
        0x0081479a:    f50473e1    ...s    ADD      r3,r4,#0x1c2
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_event_handler.c (45)
        0x0081479e:    b10a        ..      CBZ      r2,0x8147a4 ; tuya_ble_handle_device_info_update_evt + 20
;;;46     #if (!TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;47         tuya_ble_cb_evt_param_t event;
;;;48         tuya_ble_connect_status_t current_connect_status;
;;;49     #endif   
;;;50         switch(evt->device_info_data.type)
        0x008147a0:    2a01        .*      CMP      r2,#1
        0x008147a2:    d10b        ..      BNE      0x8147bc ; tuya_ble_handle_device_info_update_evt + 44
;;;51         {
;;;52         case DEVICE_INFO_TYPE_PID:
;;;53             tuya_ble_current_para.pid_type = TUYA_BLE_PRODUCT_ID_TYPE_PID;
;;;54             tuya_ble_current_para.pid_len = evt->device_info_data.len;
;;;55             memcpy(tuya_ble_current_para.pid,evt->device_info_data.data,tuya_ble_current_para.pid_len);
;;;56             tuya_ble_adv_change();
;;;57             break;
;;;58     
;;;59         case DEVICE_INFO_TYPE_PRODUCT_KEY:
;;;60             tuya_ble_current_para.pid_type = TUYA_BLE_PRODUCT_ID_TYPE_PRODUCT_KEY;
        0x008147a4:    f88421c0    ...!    STRB     r2,[r4,#0x1c0]
;;;61             tuya_ble_current_para.pid_len = evt->device_info_data.len;
        0x008147a8:    7a42        Bz      LDRB     r2,[r0,#9]
        0x008147aa:    f88421c1    ...!    STRB     r2,[r4,#0x1c1]
        0x008147ae:    4618        .F      MOV      r0,r3
;;;62             memcpy(tuya_ble_current_para.pid,evt->device_info_data.data,tuya_ble_current_para.pid_len);
        0x008147b0:    f445f373    E.s.    BL       __aeabi_memcpy ; 0x59e9a
;;;63             tuya_ble_adv_change();
        0x008147b4:    e8bd4010    ...@    POP      {r4,lr}
        0x008147b8:    f000bc83    ....    B.W      tuya_ble_adv_change ; 0x8150c2
;;;64             break;
;;;65         case DEVICE_INFO_TYPE_LOGIN_KEY:
;;;66     #if (!TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;67             if(memcmp(tuya_ble_current_para.sys_settings.login_key,evt->device_info_data.data,LOGIN_KEY_LEN))
;;;68             {
;;;69                 memcpy(tuya_ble_current_para.sys_settings.login_key,evt->device_info_data.data,LOGIN_KEY_LEN);
;;;70     
;;;71             }
;;;72     #endif
;;;73             break;
;;;74         case DEVICE_INFO_TYPE_BOUND:
;;;75     
;;;76     #if (!TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;77             if(tuya_ble_current_para.sys_settings.bound_flag != evt->device_info_data.data[0])
;;;78             {
;;;79                 tuya_ble_current_para.sys_settings.bound_flag = evt->device_info_data.data[0];
;;;80     
;;;81                 tuya_ble_adv_change();
;;;82                 current_connect_status = tuya_ble_connect_status_get();
;;;83                 if(tuya_ble_current_para.sys_settings.bound_flag==1) //0->1
;;;84                 {
;;;85                     if(current_connect_status==UNBONDING_CONN)
;;;86                     {
;;;87                         tuya_ble_connect_status_set(BONDING_CONN);
;;;88                     }
;;;89                     else if(current_connect_status==UNBONDING_UNAUTH_CONN)
;;;90                     {
;;;91                         tuya_ble_connect_status_set(BONDING_UNAUTH_CONN);
;;;92                     }
;;;93                     else if(current_connect_status==UNBONDING_UNCONN)
;;;94                     {
;;;95                         tuya_ble_connect_status_set(BONDING_UNCONN);
;;;96                     }
;;;97                     else
;;;98                     {
;;;99     
;;;100                    }
;;;101    
;;;102                }
;;;103                else  //1->0
;;;104                {
;;;105                    if(current_connect_status==BONDING_CONN)
;;;106                    {
;;;107                        tuya_ble_connect_status_set(UNBONDING_CONN);
;;;108                    }
;;;109                    else if(current_connect_status==BONDING_UNAUTH_CONN)
;;;110                    {
;;;111                        tuya_ble_connect_status_set(UNBONDING_UNAUTH_CONN);
;;;112                    }
;;;113                    else if(current_connect_status==BONDING_UNCONN)
;;;114                    {
;;;115                        tuya_ble_connect_status_set(UNBONDING_UNCONN);
;;;116                    }
;;;117                    else
;;;118                    {
;;;119    
;;;120                    }
;;;121                }
;;;122    
;;;123                event.evt = TUYA_BLE_CB_EVT_CONNECTE_STATUS;
;;;124                event.connect_status = tuya_ble_connect_status_get();
;;;125                if(tuya_ble_cb_event_send(&event)!=0)
;;;126                {
;;;127                    TUYA_BLE_LOG_ERROR("tuya ble send cb event failed.");
;;;128                }
;;;129                else
;;;130                {
;;;131                    TUYA_BLE_LOG_ERROR("tuya ble send cb event succeed.");
;;;132                }
;;;133    
;;;134            }
;;;135    #endif
;;;136            break;
;;;137        default:
;;;138            break;
;;;139        }
;;;140    
;;;141    }
        0x008147bc:    bd10        ..      POP      {r4,pc}
    tuya_ble_handle_dp_data_reported_evt
;;;142    
;;;143    
;;;144    void tuya_ble_handle_dp_data_reported_evt(tuya_ble_evt_param_t *evt)
;;;145    {
        0x008147be:    b538        8.      PUSH     {r3-r5,lr}
        0x008147c0:    4604        .F      MOV      r4,r0
;;;146        uint8_t encry_mode = 0;
;;;147        if(tuya_ble_pair_rand_valid_get()==1)
        0x008147c2:    f7fef8f2    ....    BL       tuya_ble_pair_rand_valid_get ; 0x8129aa
        0x008147c6:    2801        .(      CMP      r0,#1
        0x008147c8:    d00f        ..      BEQ      0x8147ea ; tuya_ble_handle_dp_data_reported_evt + 44
;;;148        {
;;;149            encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;150        }
;;;151        else
;;;152        {
;;;153            encry_mode = ENCRYPTION_MODE_KEY_4;
        0x008147ca:    2004        .       MOVS     r0,#4
;;;154        }
;;;155        tuya_ble_commData_send(FRM_STAT_REPORT,0,evt->reported_data.p_data,evt->reported_data.data_len,encry_mode);
        0x008147cc:    9000        ..      STR      r0,[sp,#0]
        0x008147ce:    89a3        ..      LDRH     r3,[r4,#0xc]
        0x008147d0:    2100        .!      MOVS     r1,#0
        0x008147d2:    f2480001    H...    MOV      r0,#0x8001
        0x008147d6:    68a2        .h      LDR      r2,[r4,#8]
        0x008147d8:    f7fefc47    ..G.    BL       tuya_ble_commData_send ; 0x81306a
;;;156    
;;;157        if(evt->reported_data.p_data)
        0x008147dc:    68a0        .h      LDR      r0,[r4,#8]
        0x008147de:    2800        .(      CMP      r0,#0
        0x008147e0:    d005        ..      BEQ      0x8147ee ; tuya_ble_handle_dp_data_reported_evt + 48
;;;158        {
;;;159            tuya_ble_free(evt->reported_data.p_data);
        0x008147e2:    e8bd4038    ..8@    POP      {r3-r5,lr}
        0x008147e6:    f000bdde    ....    B.W      tuya_ble_free ; 0x8153a6
        0x008147ea:    2005        .       MOVS     r0,#5
        0x008147ec:    e7ee        ..      B        0x8147cc ; tuya_ble_handle_dp_data_reported_evt + 14
;;;160        }
;;;161    }
        0x008147ee:    bd38        8.      POP      {r3-r5,pc}
    tuya_ble_handle_dp_data_with_flag_reported_evt
;;;162    
;;;163    void tuya_ble_handle_dp_data_with_flag_reported_evt(tuya_ble_evt_param_t *evt)
;;;164    {
        0x008147f0:    b538        8.      PUSH     {r3-r5,lr}
        0x008147f2:    4604        .F      MOV      r4,r0
;;;165        uint8_t encry_mode = 0;
;;;166        if(tuya_ble_pair_rand_valid_get()==1)
        0x008147f4:    f7fef8d9    ....    BL       tuya_ble_pair_rand_valid_get ; 0x8129aa
        0x008147f8:    2801        .(      CMP      r0,#1
        0x008147fa:    d00f        ..      BEQ      0x81481c ; tuya_ble_handle_dp_data_with_flag_reported_evt + 44
;;;167        {
;;;168            encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;169        }
;;;170        else
;;;171        {
;;;172            encry_mode = ENCRYPTION_MODE_KEY_4;
        0x008147fc:    2004        .       MOVS     r0,#4
;;;173        }
;;;174    
;;;175        tuya_ble_commData_send(FRM_DATA_WITH_FLAG_REPORT,0,evt->flag_reported_data.p_data,evt->flag_reported_data.data_len,encry_mode);
        0x008147fe:    9000        ..      STR      r0,[sp,#0]
        0x00814800:    8a23        #.      LDRH     r3,[r4,#0x10]
        0x00814802:    2100        .!      MOVS     r1,#0
        0x00814804:    f2480004    H...    MOV      r0,#0x8004
        0x00814808:    68e2        .h      LDR      r2,[r4,#0xc]
        0x0081480a:    f7fefc2e    ....    BL       tuya_ble_commData_send ; 0x81306a
;;;176    
;;;177        if(evt->flag_reported_data.p_data)
        0x0081480e:    68e0        .h      LDR      r0,[r4,#0xc]
        0x00814810:    2800        .(      CMP      r0,#0
        0x00814812:    d005        ..      BEQ      0x814820 ; tuya_ble_handle_dp_data_with_flag_reported_evt + 48
;;;178        {
;;;179            tuya_ble_free(evt->flag_reported_data.p_data);
        0x00814814:    e8bd4038    ..8@    POP      {r3-r5,lr}
        0x00814818:    f000bdc5    ....    B.W      tuya_ble_free ; 0x8153a6
        0x0081481c:    2005        .       MOVS     r0,#5
        0x0081481e:    e7ee        ..      B        0x8147fe ; tuya_ble_handle_dp_data_with_flag_reported_evt + 14
;;;180        }
;;;181    }
        0x00814820:    bd38        8.      POP      {r3-r5,pc}
    tuya_ble_handle_dp_data_with_time_reported_evt
;;;182    
;;;183    void tuya_ble_handle_dp_data_with_time_reported_evt(tuya_ble_evt_param_t *evt)
;;;184    {
        0x00814822:    b5f8        ..      PUSH     {r3-r7,lr}
        0x00814824:    4604        .F      MOV      r4,r0
;;;185        uint8_t *data_buffer = NULL;
;;;186        uint16_t data_len;
;;;187        uint8_t encry_mode = 0;
;;;188    
;;;189        data_len = 5+evt->reported_with_time_data.data_len;
        0x00814826:    8a00        ..      LDRH     r0,[r0,#0x10]
        0x00814828:    1d40        @.      ADDS     r0,r0,#5
        0x0081482a:    b287        ..      UXTH     r7,r0
;;;190    
;;;191        data_buffer=(uint8_t*)tuya_ble_malloc(data_len);
        0x0081482c:    4638        8F      MOV      r0,r7
        0x0081482e:    f000fdaf    ....    BL       tuya_ble_malloc ; 0x815390
        0x00814832:    0005        ..      MOVS     r5,r0
;;;192        if(data_buffer==NULL)
        0x00814834:    d02b        +.      BEQ      0x81488e ; tuya_ble_handle_dp_data_with_time_reported_evt + 108
;;;193        {
;;;194            TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_data_with_time_reported_evt malloc failed.");
;;;195            if(evt->reported_with_time_data.p_data)
;;;196            {
;;;197                tuya_ble_free(evt->reported_with_time_data.p_data);
;;;198            }
;;;199            return;
;;;200        }
;;;201        else
;;;202        {
;;;203            memset(data_buffer,0,data_len);
        0x00814836:    4639        9F      MOV      r1,r7
        0x00814838:    f445f3f0    E...    BL       __aeabi_memclr ; 0x5a01c
        0x0081483c:    f7fef8b5    ....    BL       tuya_ble_pair_rand_valid_get ; 0x8129aa
        0x00814840:    2801        .(      CMP      r0,#1
        0x00814842:    d02d        -.      BEQ      0x8148a0 ; tuya_ble_handle_dp_data_with_time_reported_evt + 126
;;;204        }
;;;205    
;;;206        if(tuya_ble_pair_rand_valid_get()==1)
;;;207        {
;;;208            encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;209        }
;;;210        else
;;;211        {
;;;212            encry_mode = ENCRYPTION_MODE_KEY_4;
        0x00814844:    2604        .&      MOVS     r6,#4
;;;213        }
;;;214    
;;;215        data_buffer[0] = 1;
        0x00814846:    2001        .       MOVS     r0,#1
        0x00814848:    7028        (p      STRB     r0,[r5,#0]
;;;216        data_buffer[1] = evt->reported_with_time_data.timestamp>>24;
        0x0081484a:    68a0        .h      LDR      r0,[r4,#8]
        0x0081484c:    0e00        ..      LSRS     r0,r0,#24
        0x0081484e:    7068        hp      STRB     r0,[r5,#1]
;;;217        data_buffer[2] = evt->reported_with_time_data.timestamp>>16;
        0x00814850:    68a0        .h      LDR      r0,[r4,#8]
        0x00814852:    0c00        ..      LSRS     r0,r0,#16
        0x00814854:    70a8        .p      STRB     r0,[r5,#2]
;;;218        data_buffer[3] = evt->reported_with_time_data.timestamp>>8;
        0x00814856:    8920         .      LDRH     r0,[r4,#8]
        0x00814858:    0a00        ..      LSRS     r0,r0,#8
        0x0081485a:    70e8        .p      STRB     r0,[r5,#3]
;;;219        data_buffer[4] = evt->reported_with_time_data.timestamp;
        0x0081485c:    7a20         z      LDRB     r0,[r4,#8]
        0x0081485e:    7128        (q      STRB     r0,[r5,#4]
;;;220    
;;;221        memcpy(&data_buffer[5],evt->reported_with_time_data.p_data,evt->reported_with_time_data.data_len);
        0x00814860:    8a22        ".      LDRH     r2,[r4,#0x10]
        0x00814862:    1d68        h.      ADDS     r0,r5,#5
        0x00814864:    68e1        .h      LDR      r1,[r4,#0xc]
        0x00814866:    f445f318    E...    BL       __aeabi_memcpy ; 0x59e9a
;;;222    
;;;223        tuya_ble_commData_send(FRM_STAT_WITH_TIME_REPORT,0,data_buffer,data_len,encry_mode);
        0x0081486a:    463b        ;F      MOV      r3,r7
        0x0081486c:    462a        *F      MOV      r2,r5
        0x0081486e:    2100        .!      MOVS     r1,#0
        0x00814870:    f2480003    H...    MOV      r0,#0x8003
        0x00814874:    9600        ..      STR      r6,[sp,#0]
        0x00814876:    f7fefbf8    ....    BL       tuya_ble_commData_send ; 0x81306a
;;;224    
;;;225        tuya_ble_free(data_buffer);
        0x0081487a:    4628        (F      MOV      r0,r5
        0x0081487c:    f000fd93    ....    BL       tuya_ble_free ; 0x8153a6
        0x00814880:    68e0        .h      LDR      r0,[r4,#0xc]
        0x00814882:    2800        .(      CMP      r0,#0
        0x00814884:    d00e        ..      BEQ      0x8148a4 ; tuya_ble_handle_dp_data_with_time_reported_evt + 130
;;;226    
;;;227        if(evt->reported_with_time_data.p_data)
;;;228        {
;;;229            tuya_ble_free(evt->reported_with_time_data.p_data);
        0x00814886:    e8bd40f8    ...@    POP      {r3-r7,lr}
        0x0081488a:    f000bd8c    ....    B.W      tuya_ble_free ; 0x8153a6
        0x0081488e:    48c1        .H      LDR      r0,[pc,#772] ; [0x814b94] = 0x81d768
        0x00814890:    f006f98b    ....    BL       get_args ; 0x81abaa
        0x00814894:    4602        .F      MOV      r2,r0
        0x00814896:    49c0        .I      LDR      r1,[pc,#768] ; [0x814b98] = 0x8803620
        0x00814898:    48c0        .H      LDR      r0,[pc,#768] ; [0x814b9c] = 0x21103002
        0x0081489a:    f7f3d8e0    ....    BL       log_buffer ; 0x7a5e
        0x0081489e:    e7ef        ..      B        0x814880 ; tuya_ble_handle_dp_data_with_time_reported_evt + 94
        0x008148a0:    2605        .&      MOVS     r6,#5
        0x008148a2:    e7d0        ..      B        0x814846 ; tuya_ble_handle_dp_data_with_time_reported_evt + 36
;;;230        }
;;;231    }
        0x008148a4:    bdf8        ..      POP      {r3-r7,pc}
    tuya_ble_handle_dp_data_with_flag_and_time_reported_evt
;;;232    
;;;233    void tuya_ble_handle_dp_data_with_flag_and_time_reported_evt(tuya_ble_evt_param_t *evt)
;;;234    {
        0x008148a6:    b5f8        ..      PUSH     {r3-r7,lr}
        0x008148a8:    4604        .F      MOV      r4,r0
;;;235        uint8_t *data_buffer = NULL;
;;;236        uint16_t data_len;
;;;237        uint8_t encry_mode = 0;
;;;238    
;;;239        data_len = 8+evt->flag_reported_with_time_data.data_len;
        0x008148aa:    8a80        ..      LDRH     r0,[r0,#0x14]
        0x008148ac:    3008        .0      ADDS     r0,r0,#8
        0x008148ae:    b287        ..      UXTH     r7,r0
;;;240    
;;;241        data_buffer=(uint8_t*)tuya_ble_malloc(data_len);
        0x008148b0:    4638        8F      MOV      r0,r7
        0x008148b2:    f000fd6d    ..m.    BL       tuya_ble_malloc ; 0x815390
        0x008148b6:    0005        ..      MOVS     r5,r0
;;;242        if(data_buffer==NULL)
        0x008148b8:    d033        3.      BEQ      0x814922 ; tuya_ble_handle_dp_data_with_flag_and_time_reported_evt + 124
;;;243        {
;;;244            TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_data_with_flag_and_time_reported_evt malloc failed.");
;;;245            if(evt->flag_reported_with_time_data.p_data)
;;;246            {
;;;247                tuya_ble_free(evt->flag_reported_with_time_data.p_data);
;;;248            }
;;;249            return;
;;;250        }
;;;251        else
;;;252        {
;;;253            memset(data_buffer,0,data_len);
        0x008148ba:    4639        9F      MOV      r1,r7
        0x008148bc:    f445f3ae    E...    BL       __aeabi_memclr ; 0x5a01c
        0x008148c0:    f7fef873    ..s.    BL       tuya_ble_pair_rand_valid_get ; 0x8129aa
        0x008148c4:    2801        .(      CMP      r0,#1
        0x008148c6:    d036        6.      BEQ      0x814936 ; tuya_ble_handle_dp_data_with_flag_and_time_reported_evt + 144
;;;254        }
;;;255    
;;;256        if(tuya_ble_pair_rand_valid_get()==1)
;;;257        {
;;;258            encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;259        }
;;;260        else
;;;261        {
;;;262            encry_mode = ENCRYPTION_MODE_KEY_4;
        0x008148c8:    2604        .&      MOVS     r6,#4
;;;263        }
;;;264    
;;;265        data_buffer[0] = evt->flag_reported_with_time_data.sn>>8;
        0x008148ca:    8920         .      LDRH     r0,[r4,#8]
        0x008148cc:    0a00        ..      LSRS     r0,r0,#8
        0x008148ce:    7028        (p      STRB     r0,[r5,#0]
;;;266        data_buffer[1] = evt->flag_reported_with_time_data.sn;
        0x008148d0:    7a20         z      LDRB     r0,[r4,#8]
        0x008148d2:    7068        hp      STRB     r0,[r5,#1]
;;;267        data_buffer[2] = evt->flag_reported_with_time_data.mode;
        0x008148d4:    7aa0        .z      LDRB     r0,[r4,#0xa]
        0x008148d6:    70a8        .p      STRB     r0,[r5,#2]
;;;268        data_buffer[3] = 1;
        0x008148d8:    2001        .       MOVS     r0,#1
        0x008148da:    70e8        .p      STRB     r0,[r5,#3]
;;;269        data_buffer[4] = evt->flag_reported_with_time_data.timestamp>>24;
        0x008148dc:    68e0        .h      LDR      r0,[r4,#0xc]
        0x008148de:    0e00        ..      LSRS     r0,r0,#24
        0x008148e0:    7128        (q      STRB     r0,[r5,#4]
;;;270        data_buffer[5] = evt->flag_reported_with_time_data.timestamp>>16;
        0x008148e2:    68e0        .h      LDR      r0,[r4,#0xc]
        0x008148e4:    0c00        ..      LSRS     r0,r0,#16
        0x008148e6:    7168        hq      STRB     r0,[r5,#5]
;;;271        data_buffer[6] = evt->flag_reported_with_time_data.timestamp>>8;
        0x008148e8:    89a0        ..      LDRH     r0,[r4,#0xc]
        0x008148ea:    0a00        ..      LSRS     r0,r0,#8
        0x008148ec:    71a8        .q      STRB     r0,[r5,#6]
;;;272        data_buffer[7] = evt->flag_reported_with_time_data.timestamp;
        0x008148ee:    7b20         {      LDRB     r0,[r4,#0xc]
        0x008148f0:    71e8        .q      STRB     r0,[r5,#7]
;;;273    
;;;274        memcpy(&data_buffer[8],evt->flag_reported_with_time_data.p_data,evt->flag_reported_with_time_data.data_len);
        0x008148f2:    8aa2        ..      LDRH     r2,[r4,#0x14]
        0x008148f4:    f1050008    ....    ADD      r0,r5,#8
        0x008148f8:    6921        !i      LDR      r1,[r4,#0x10]
        0x008148fa:    f445f2ce    E...    BL       __aeabi_memcpy ; 0x59e9a
;;;275    
;;;276        tuya_ble_commData_send(FRM_DATA_WITH_FLAG_AND_TIME_REPORT,0,data_buffer,data_len,encry_mode);
        0x008148fe:    463b        ;F      MOV      r3,r7
        0x00814900:    462a        *F      MOV      r2,r5
        0x00814902:    2100        .!      MOVS     r1,#0
        0x00814904:    f2480005    H...    MOV      r0,#0x8005
        0x00814908:    9600        ..      STR      r6,[sp,#0]
        0x0081490a:    f7fefbae    ....    BL       tuya_ble_commData_send ; 0x81306a
;;;277    
;;;278        tuya_ble_free(data_buffer);
        0x0081490e:    4628        (F      MOV      r0,r5
        0x00814910:    f000fd49    ..I.    BL       tuya_ble_free ; 0x8153a6
        0x00814914:    6920         i      LDR      r0,[r4,#0x10]
        0x00814916:    2800        .(      CMP      r0,#0
        0x00814918:    d00f        ..      BEQ      0x81493a ; tuya_ble_handle_dp_data_with_flag_and_time_reported_evt + 148
;;;279    
;;;280        if(evt->flag_reported_with_time_data.p_data)
;;;281        {
;;;282            tuya_ble_free(evt->flag_reported_with_time_data.p_data);
        0x0081491a:    e8bd40f8    ...@    POP      {r3-r7,lr}
        0x0081491e:    f000bd42    ..B.    B.W      tuya_ble_free ; 0x8153a6
        0x00814922:    489f        .H      LDR      r0,[pc,#636] ; [0x814ba0] = 0x81d710
        0x00814924:    f006f941    ..A.    BL       get_args ; 0x81abaa
        0x00814928:    499b        .I      LDR      r1,[pc,#620] ; [0x814b98] = 0x8803620
        0x0081492a:    4602        .F      MOV      r2,r0
        0x0081492c:    314c        L1      ADDS     r1,r1,#0x4c
        0x0081492e:    489b        .H      LDR      r0,[pc,#620] ; [0x814b9c] = 0x21103002
        0x00814930:    f7f3d895    ....    BL       log_buffer ; 0x7a5e
        0x00814934:    e7ee        ..      B        0x814914 ; tuya_ble_handle_dp_data_with_flag_and_time_reported_evt + 110
        0x00814936:    2605        .&      MOVS     r6,#5
        0x00814938:    e7c7        ..      B        0x8148ca ; tuya_ble_handle_dp_data_with_flag_and_time_reported_evt + 36
;;;283        }
;;;284    }
        0x0081493a:    bdf8        ..      POP      {r3-r7,pc}
    tuya_ble_handle_dp_data_with_time_string_reported_evt
;;;285    
;;;286    void tuya_ble_handle_dp_data_with_time_string_reported_evt(tuya_ble_evt_param_t *evt)
;;;287    {
        0x0081493c:    b5f8        ..      PUSH     {r3-r7,lr}
        0x0081493e:    4604        .F      MOV      r4,r0
;;;288        uint8_t *data_buffer = NULL;
;;;289        uint16_t data_len;
;;;290        uint8_t encry_mode = 0;
;;;291    
;;;292        data_len = 14+evt->reported_with_time_string_data.data_len;
        0x00814940:    8b80        ..      LDRH     r0,[r0,#0x1c]
        0x00814942:    300e        .0      ADDS     r0,r0,#0xe
        0x00814944:    b287        ..      UXTH     r7,r0
;;;293    
;;;294        data_buffer=(uint8_t*)tuya_ble_malloc(data_len);
        0x00814946:    4638        8F      MOV      r0,r7
        0x00814948:    f000fd22    ..".    BL       tuya_ble_malloc ; 0x815390
        0x0081494c:    0005        ..      MOVS     r5,r0
;;;295        if(data_buffer==NULL)
        0x0081494e:    d027        '.      BEQ      0x8149a0 ; tuya_ble_handle_dp_data_with_time_string_reported_evt + 100
;;;296        {
;;;297            TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_data_with_time_string_reported_evt malloc failed.");
;;;298            if(evt->reported_with_time_string_data.p_data)
;;;299            {
;;;300                tuya_ble_free(evt->reported_with_time_string_data.p_data);
;;;301            }
;;;302            return;
;;;303        }
;;;304        else
;;;305        {
;;;306            memset(data_buffer,0,data_len);
        0x00814950:    4639        9F      MOV      r1,r7
        0x00814952:    f445f363    E.c.    BL       __aeabi_memclr ; 0x5a01c
        0x00814956:    f7fef828    ..(.    BL       tuya_ble_pair_rand_valid_get ; 0x8129aa
        0x0081495a:    2801        .(      CMP      r0,#1
        0x0081495c:    d02a        *.      BEQ      0x8149b4 ; tuya_ble_handle_dp_data_with_time_string_reported_evt + 120
;;;307        }
;;;308    
;;;309        if(tuya_ble_pair_rand_valid_get()==1)
;;;310        {
;;;311            encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;312        }
;;;313        else
;;;314        {
;;;315            encry_mode = ENCRYPTION_MODE_KEY_4;
        0x0081495e:    2604        .&      MOVS     r6,#4
;;;316        }
;;;317    
;;;318        data_buffer[0] = 0;
        0x00814960:    2000        .       MOVS     r0,#0
        0x00814962:    7028        (p      STRB     r0,[r5,#0]
;;;319    
;;;320        memcpy(&data_buffer[1],evt->reported_with_time_string_data.time_string,13);
        0x00814964:    220d        ."      MOVS     r2,#0xd
        0x00814966:    f1040108    ....    ADD      r1,r4,#8
        0x0081496a:    1c68        h.      ADDS     r0,r5,#1
        0x0081496c:    f445f295    E...    BL       __aeabi_memcpy ; 0x59e9a
;;;321    
;;;322        memcpy(&data_buffer[14],evt->reported_with_time_string_data.p_data,evt->reported_with_time_string_data.data_len);
        0x00814970:    8ba2        ..      LDRH     r2,[r4,#0x1c]
        0x00814972:    f105000e    ....    ADD      r0,r5,#0xe
        0x00814976:    69a1        .i      LDR      r1,[r4,#0x18]
        0x00814978:    f445f28f    E...    BL       __aeabi_memcpy ; 0x59e9a
;;;323    
;;;324        tuya_ble_commData_send(FRM_STAT_WITH_TIME_REPORT,0,data_buffer,data_len,encry_mode);
        0x0081497c:    463b        ;F      MOV      r3,r7
        0x0081497e:    462a        *F      MOV      r2,r5
        0x00814980:    2100        .!      MOVS     r1,#0
        0x00814982:    f2480003    H...    MOV      r0,#0x8003
        0x00814986:    9600        ..      STR      r6,[sp,#0]
        0x00814988:    f7fefb6f    ..o.    BL       tuya_ble_commData_send ; 0x81306a
;;;325    
;;;326        tuya_ble_free(data_buffer);
        0x0081498c:    4628        (F      MOV      r0,r5
        0x0081498e:    f000fd0a    ....    BL       tuya_ble_free ; 0x8153a6
        0x00814992:    69a0        .i      LDR      r0,[r4,#0x18]
        0x00814994:    2800        .(      CMP      r0,#0
        0x00814996:    d00f        ..      BEQ      0x8149b8 ; tuya_ble_handle_dp_data_with_time_string_reported_evt + 124
;;;327    
;;;328        if(evt->reported_with_time_string_data.p_data)
;;;329        {
;;;330            tuya_ble_free(evt->reported_with_time_string_data.p_data);
        0x00814998:    e8bd40f8    ...@    POP      {r3-r7,lr}
        0x0081499c:    f000bd03    ....    B.W      tuya_ble_free ; 0x8153a6
        0x008149a0:    4880        .H      LDR      r0,[pc,#512] ; [0x814ba4] = 0x81d810
        0x008149a2:    f006f902    ....    BL       get_args ; 0x81abaa
        0x008149a6:    497c        |I      LDR      r1,[pc,#496] ; [0x814b98] = 0x8803620
        0x008149a8:    4602        .F      MOV      r2,r0
        0x008149aa:    31a4        .1      ADDS     r1,r1,#0xa4
        0x008149ac:    487b        {H      LDR      r0,[pc,#492] ; [0x814b9c] = 0x21103002
        0x008149ae:    f7f3d856    ..V.    BL       log_buffer ; 0x7a5e
        0x008149b2:    e7ee        ..      B        0x814992 ; tuya_ble_handle_dp_data_with_time_string_reported_evt + 86
        0x008149b4:    2605        .&      MOVS     r6,#5
        0x008149b6:    e7d3        ..      B        0x814960 ; tuya_ble_handle_dp_data_with_time_string_reported_evt + 36
;;;331        }
;;;332    }
        0x008149b8:    bdf8        ..      POP      {r3-r7,pc}
    tuya_ble_handle_dp_data_with_flag_and_time_string_reported_evt
;;;333    
;;;334    void tuya_ble_handle_dp_data_with_flag_and_time_string_reported_evt(tuya_ble_evt_param_t *evt)
;;;335    {
        0x008149ba:    b5f8        ..      PUSH     {r3-r7,lr}
        0x008149bc:    4604        .F      MOV      r4,r0
;;;336        uint8_t *data_buffer = NULL;
;;;337        uint16_t data_len;
;;;338        uint8_t encry_mode = 0;
;;;339    
;;;340        data_len = 17+evt->flag_reported_with_time_string_data.data_len;
        0x008149be:    8c00        ..      LDRH     r0,[r0,#0x20]
        0x008149c0:    3011        .0      ADDS     r0,r0,#0x11
        0x008149c2:    b287        ..      UXTH     r7,r0
;;;341    
;;;342        data_buffer=(uint8_t*)tuya_ble_malloc(data_len);
        0x008149c4:    4638        8F      MOV      r0,r7
        0x008149c6:    f000fce3    ....    BL       tuya_ble_malloc ; 0x815390
        0x008149ca:    0005        ..      MOVS     r5,r0
;;;343        if(data_buffer==NULL)
        0x008149cc:    d02e        ..      BEQ      0x814a2c ; tuya_ble_handle_dp_data_with_flag_and_time_string_reported_evt + 114
;;;344        {
;;;345            TUYA_BLE_LOG_ERROR("tuya_ble_handle_dp_data_with_flag_and_time_string_reported_evt malloc failed.");
;;;346            if(evt->flag_reported_with_time_string_data.p_data)
;;;347            {
;;;348                tuya_ble_free(evt->flag_reported_with_time_string_data.p_data);
;;;349            }
;;;350            return;
;;;351        }
;;;352        else
;;;353        {
;;;354            memset(data_buffer,0,data_len);
        0x008149ce:    4639        9F      MOV      r1,r7
        0x008149d0:    f445f324    E.$.    BL       __aeabi_memclr ; 0x5a01c
        0x008149d4:    f7fdffe9    ....    BL       tuya_ble_pair_rand_valid_get ; 0x8129aa
        0x008149d8:    2801        .(      CMP      r0,#1
        0x008149da:    d031        1.      BEQ      0x814a40 ; tuya_ble_handle_dp_data_with_flag_and_time_string_reported_evt + 134
;;;355        }
;;;356    
;;;357        if(tuya_ble_pair_rand_valid_get()==1)
;;;358        {
;;;359            encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;360        }
;;;361        else
;;;362        {
;;;363            encry_mode = ENCRYPTION_MODE_KEY_4;
        0x008149dc:    2604        .&      MOVS     r6,#4
;;;364        }
;;;365    
;;;366        data_buffer[0] = evt->flag_reported_with_time_string_data.sn>>8;
        0x008149de:    8920         .      LDRH     r0,[r4,#8]
        0x008149e0:    220d        ."      MOVS     r2,#0xd
        0x008149e2:    0a00        ..      LSRS     r0,r0,#8
        0x008149e4:    7028        (p      STRB     r0,[r5,#0]
;;;367        data_buffer[1] = evt->flag_reported_with_time_string_data.sn;
        0x008149e6:    7a20         z      LDRB     r0,[r4,#8]
        0x008149e8:    7068        hp      STRB     r0,[r5,#1]
;;;368        data_buffer[2] = evt->flag_reported_with_time_string_data.mode;
        0x008149ea:    7aa0        .z      LDRB     r0,[r4,#0xa]
        0x008149ec:    70a8        .p      STRB     r0,[r5,#2]
;;;369        data_buffer[3] = 0;
        0x008149ee:    2000        .       MOVS     r0,#0
        0x008149f0:    70e8        .p      STRB     r0,[r5,#3]
;;;370        memcpy(&data_buffer[4],evt->flag_reported_with_time_string_data.time_string,13);
        0x008149f2:    f104010b    ....    ADD      r1,r4,#0xb
        0x008149f6:    1d28        (.      ADDS     r0,r5,#4
        0x008149f8:    f445f24f    E.O.    BL       __aeabi_memcpy ; 0x59e9a
;;;371    
;;;372        memcpy(&data_buffer[17],evt->flag_reported_with_time_string_data.p_data,evt->flag_reported_with_time_string_data.data_len);
        0x008149fc:    8c22        ".      LDRH     r2,[r4,#0x20]
        0x008149fe:    f1050011    ....    ADD      r0,r5,#0x11
        0x00814a02:    69e1        .i      LDR      r1,[r4,#0x1c]
        0x00814a04:    f445f249    E.I.    BL       __aeabi_memcpy ; 0x59e9a
;;;373    
;;;374        tuya_ble_commData_send(FRM_DATA_WITH_FLAG_AND_TIME_REPORT,0,data_buffer,data_len,encry_mode);
        0x00814a08:    463b        ;F      MOV      r3,r7
        0x00814a0a:    462a        *F      MOV      r2,r5
        0x00814a0c:    2100        .!      MOVS     r1,#0
        0x00814a0e:    f2480005    H...    MOV      r0,#0x8005
        0x00814a12:    9600        ..      STR      r6,[sp,#0]
        0x00814a14:    f7fefb29    ..).    BL       tuya_ble_commData_send ; 0x81306a
;;;375    
;;;376        tuya_ble_free(data_buffer);
        0x00814a18:    4628        (F      MOV      r0,r5
        0x00814a1a:    f000fcc4    ....    BL       tuya_ble_free ; 0x8153a6
        0x00814a1e:    69e0        .i      LDR      r0,[r4,#0x1c]
        0x00814a20:    2800        .(      CMP      r0,#0
        0x00814a22:    d00f        ..      BEQ      0x814a44 ; tuya_ble_handle_dp_data_with_flag_and_time_string_reported_evt + 138
;;;377    
;;;378        if(evt->flag_reported_with_time_string_data.p_data)
;;;379        {
;;;380            tuya_ble_free(evt->flag_reported_with_time_string_data.p_data);
        0x00814a24:    e8bd40f8    ...@    POP      {r3-r7,lr}
        0x00814a28:    f000bcbd    ....    B.W      tuya_ble_free ; 0x8153a6
        0x00814a2c:    485e        ^H      LDR      r0,[pc,#376] ; [0x814ba8] = 0x81d7b4
        0x00814a2e:    f006f8bc    ....    BL       get_args ; 0x81abaa
        0x00814a32:    4959        YI      LDR      r1,[pc,#356] ; [0x814b98] = 0x8803620
        0x00814a34:    4602        .F      MOV      r2,r0
        0x00814a36:    31f8        .1      ADDS     r1,r1,#0xf8
        0x00814a38:    4858        XH      LDR      r0,[pc,#352] ; [0x814b9c] = 0x21103002
        0x00814a3a:    f7f3d810    ....    BL       log_buffer ; 0x7a5e
        0x00814a3e:    e7ee        ..      B        0x814a1e ; tuya_ble_handle_dp_data_with_flag_and_time_string_reported_evt + 100
        0x00814a40:    2605        .&      MOVS     r6,#5
        0x00814a42:    e7cc        ..      B        0x8149de ; tuya_ble_handle_dp_data_with_flag_and_time_string_reported_evt + 36
;;;381        }
;;;382    }
        0x00814a44:    bdf8        ..      POP      {r3-r7,pc}
    tuya_ble_handle_factory_reset_evt
;;;383    
;;;384    void tuya_ble_handle_factory_reset_evt(tuya_ble_evt_param_t *evt)
;;;385    {
        0x00814a46:    b500        ..      PUSH     {lr}
        0x00814a48:    b089        ..      SUB      sp,sp,#0x24
;;;386        tuya_ble_cb_evt_param_t event;
;;;387    
;;;388        memset(tuya_ble_current_para.sys_settings.device_virtual_id,0,DEVICE_VIRTUAL_ID_LEN);
        0x00814a4a:    2116        .!      MOVS     r1,#0x16
        0x00814a4c:    4857        WH      LDR      r0,[pc,#348] ; [0x814bac] = 0x2098f4
        0x00814a4e:    f445f307    E...    BL       __aeabi_memclr4 ; 0x5a060
;;;389        tuya_ble_device_unbond();
        0x00814a52:    f7fffa0b    ....    BL       tuya_ble_device_unbond ; 0x813e6c
;;;390    
;;;391        event.evt = TUYA_BLE_CB_EVT_CONNECTE_STATUS;
        0x00814a56:    2040        @       MOVS     r0,#0x40
        0x00814a58:    f88d0000    ....    STRB     r0,[sp,#0]
;;;392        event.connect_status = tuya_ble_connect_status_get();
        0x00814a5c:    f000fae2    ....    BL       tuya_ble_connect_status_get ; 0x815024
        0x00814a60:    f88d0004    ....    STRB     r0,[sp,#4]
;;;393    
;;;394        if(tuya_ble_cb_event_send(&event)!=0)
        0x00814a64:    4668        hF      MOV      r0,sp
        0x00814a66:    f000fb19    ....    BL       tuya_ble_cb_event_send ; 0x81509c
        0x00814a6a:    2800        .(      CMP      r0,#0
        0x00814a6c:    d007        ..      BEQ      0x814a7e ; tuya_ble_handle_factory_reset_evt + 56
;;;395        {
;;;396            TUYA_BLE_LOG_ERROR("tuya_ble_handle_factory_reset_evt-tuya ble send cb event (connect status update) failed.");
        0x00814a6e:    4850        PH      LDR      r0,[pc,#320] ; [0x814bb0] = 0x81d6a8
        0x00814a70:    f006f89b    ....    BL       get_args ; 0x81abaa
        0x00814a74:    4602        .F      MOV      r2,r0
        0x00814a76:    494f        OI      LDR      r1,[pc,#316] ; [0x814bb4] = 0x8803774
        0x00814a78:    4848        HH      LDR      r0,[pc,#288] ; [0x814b9c] = 0x21103002
        0x00814a7a:    f7f2dff0    ....    BL       log_buffer ; 0x7a5e
;;;397        }
;;;398        else
;;;399        {
;;;400    
;;;401        }
;;;402    }
        0x00814a7e:    b009        ..      ADD      sp,sp,#0x24
        0x00814a80:    bd00        ..      POP      {pc}
    tuya_ble_handle_ota_response_evt
;;;403    
;;;404    
;;;405    void tuya_ble_handle_ota_response_evt(tuya_ble_evt_param_t *evt)
;;;406    {
        0x00814a82:    b538        8.      PUSH     {r3-r5,lr}
        0x00814a84:    4605        .F      MOV      r5,r0
;;;407        uint16_t ota_cmd_type = 0;
        0x00814a86:    2400        .$      MOVS     r4,#0
;;;408    
;;;409        uint8_t encry_mode = 0;
;;;410        if(tuya_ble_pair_rand_valid_get()==1)
        0x00814a88:    f7fdff8f    ....    BL       tuya_ble_pair_rand_valid_get ; 0x8129aa
        0x00814a8c:    2801        .(      CMP      r0,#1
        0x00814a8e:    d008        ..      BEQ      0x814aa2 ; tuya_ble_handle_ota_response_evt + 32
        0x00814a90:    2004        .       MOVS     r0,#4
        0x00814a92:    7a29        )z      LDRB     r1,[r5,#8]
        0x00814a94:    2905        .)      CMP      r1,#5
        0x00814a96:    d210        ..      BCS      0x814aba ; tuya_ble_handle_ota_response_evt + 56
        0x00814a98:    e8dff001    ....    TBB      [pc,r1]
    $d
        0x00814a9c:    0b090705    ....    DCD    185140997
        0x00814aa0:    000d        ..      DCW    13
    $t
;;;411        {
;;;412            encry_mode = ENCRYPTION_MODE_SESSION_KEY;
        0x00814aa2:    2005        .       MOVS     r0,#5
        0x00814aa4:    e7f5        ..      B        0x814a92 ; tuya_ble_handle_ota_response_evt + 16
;;;413        }
;;;414        else
;;;415        {
;;;416            encry_mode = ENCRYPTION_MODE_KEY_4;
;;;417        }
;;;418    
;;;419        switch (evt->ota_response_data.type)
;;;420        {
;;;421        case TUYA_BLE_OTA_REQ:
;;;422            ota_cmd_type = FRM_OTA_START_REQ;
        0x00814aa6:    240c        .$      MOVS     r4,#0xc
;;;423            break;
        0x00814aa8:    e008        ..      B        0x814abc ; tuya_ble_handle_ota_response_evt + 58
;;;424        case TUYA_BLE_OTA_FILE_INFO:
;;;425            ota_cmd_type = FRM_OTA_FILE_INFOR_REQ;
        0x00814aaa:    240d        .$      MOVS     r4,#0xd
;;;426            break;
        0x00814aac:    e006        ..      B        0x814abc ; tuya_ble_handle_ota_response_evt + 58
;;;427        case TUYA_BLE_OTA_FILE_OFFSET_REQ :
;;;428            ota_cmd_type = FRM_OTA_FILE_OFFSET_REQ;
        0x00814aae:    240e        .$      MOVS     r4,#0xe
;;;429            break;
        0x00814ab0:    e004        ..      B        0x814abc ; tuya_ble_handle_ota_response_evt + 58
;;;430        case TUYA_BLE_OTA_DATA :
;;;431            ota_cmd_type = FRM_OTA_DATA_REQ;
        0x00814ab2:    240f        .$      MOVS     r4,#0xf
;;;432            break;
        0x00814ab4:    e002        ..      B        0x814abc ; tuya_ble_handle_ota_response_evt + 58
;;;433        case TUYA_BLE_OTA_END :
;;;434            ota_cmd_type = FRM_OTA_END_REQ;
        0x00814ab6:    2410        .$      MOVS     r4,#0x10
;;;435            break;
        0x00814ab8:    e000        ..      B        0x814abc ; tuya_ble_handle_ota_response_evt + 58
;;;436        default:
;;;437            break;
;;;438        }
;;;439    
;;;440        if(ota_cmd_type!=0)
        0x00814aba:    b134        4.      CBZ      r4,0x814aca ; tuya_ble_handle_ota_response_evt + 72
;;;441        {
;;;442            tuya_ble_commData_send(ota_cmd_type,0,evt->ota_response_data.p_data,evt->ota_response_data.data_len,encry_mode);
        0x00814abc:    9000        ..      STR      r0,[sp,#0]
        0x00814abe:    896b        k.      LDRH     r3,[r5,#0xa]
        0x00814ac0:    2100        .!      MOVS     r1,#0
        0x00814ac2:    4620         F      MOV      r0,r4
        0x00814ac4:    68ea        .h      LDR      r2,[r5,#0xc]
        0x00814ac6:    f7fefad0    ....    BL       tuya_ble_commData_send ; 0x81306a
;;;443        }
;;;444    
;;;445        if(evt->ota_response_data.p_data)
        0x00814aca:    68e8        .h      LDR      r0,[r5,#0xc]
        0x00814acc:    2800        .(      CMP      r0,#0
        0x00814ace:    d003        ..      BEQ      0x814ad8 ; tuya_ble_handle_ota_response_evt + 86
;;;446        {
;;;447            tuya_ble_free(evt->ota_response_data.p_data);
        0x00814ad0:    e8bd4038    ..8@    POP      {r3-r5,lr}
        0x00814ad4:    f000bc67    ..g.    B.W      tuya_ble_free ; 0x8153a6
;;;448        }
;;;449    }
        0x00814ad8:    bd38        8.      POP      {r3-r5,pc}
    tuya_ble_handle_data_passthrough_evt
;;;450    
;;;451    
;;;452    void tuya_ble_handle_data_passthrough_evt(tuya_ble_evt_param_t *evt)
;;;453    {
        0x00814ada:    b538        8.      PUSH     {r3-r5,lr}
        0x00814adc:    4604        .F      MOV      r4,r0
        0x00814ade:    482c        ,H      LDR      r0,[pc,#176] ; [0x814b90] = 0x2097d4
        0x00814ae0:    f890013c    ..<.    LDRB     r0,[r0,#0x13c]
        0x00814ae4:    b138        8.      CBZ      r0,0x814af6 ; tuya_ble_handle_data_passthrough_evt + 28
;;;454        uint8_t encry_mode = 0;
;;;455    
;;;456        if(tuya_ble_current_para.sys_settings.bound_flag)
;;;457        {
;;;458            if(tuya_ble_pair_rand_valid_get()==1)
        0x00814ae6:    f7fdff60    ..`.    BL       tuya_ble_pair_rand_valid_get ; 0x8129aa
        0x00814aea:    2801        .(      CMP      r0,#1
        0x00814aec:    d001        ..      BEQ      0x814af2 ; tuya_ble_handle_data_passthrough_evt + 24
        0x00814aee:    2104        .!      MOVS     r1,#4
        0x00814af0:    e002        ..      B        0x814af8 ; tuya_ble_handle_data_passthrough_evt + 30
;;;459            {
;;;460                encry_mode = ENCRYPTION_MODE_SESSION_KEY;
        0x00814af2:    2105        .!      MOVS     r1,#5
        0x00814af4:    e000        ..      B        0x814af8 ; tuya_ble_handle_data_passthrough_evt + 30
;;;461            }
;;;462            else
;;;463            {
;;;464                encry_mode = ENCRYPTION_MODE_KEY_4;
;;;465            }
;;;466        }
;;;467        else
;;;468        {
;;;469            encry_mode = ENCRYPTION_MODE_KEY_2;
        0x00814af6:    2102        .!      MOVS     r1,#2
;;;470        }
;;;471    
;;;472        tuya_ble_commData_send(FRM_DATA_PASSTHROUGH_REQ,0,evt->passthrough_data.p_data,evt->passthrough_data.data_len,encry_mode);
        0x00814af8:    9100        ..      STR      r1,[sp,#0]
        0x00814afa:    8923        #.      LDRH     r3,[r4,#8]
        0x00814afc:    2100        .!      MOVS     r1,#0
        0x00814afe:    2023        #       MOVS     r0,#0x23
        0x00814b00:    68e2        .h      LDR      r2,[r4,#0xc]
        0x00814b02:    f7fefab2    ....    BL       tuya_ble_commData_send ; 0x81306a
;;;473    
;;;474        if(evt->passthrough_data.p_data)
        0x00814b06:    68e0        .h      LDR      r0,[r4,#0xc]
        0x00814b08:    2800        .(      CMP      r0,#0
        0x00814b0a:    d003        ..      BEQ      0x814b14 ; tuya_ble_handle_data_passthrough_evt + 58
;;;475        {
;;;476            tuya_ble_free(evt->passthrough_data.p_data);
        0x00814b0c:    e8bd4038    ..8@    POP      {r3-r5,lr}
        0x00814b10:    f000bc49    ..I.    B.W      tuya_ble_free ; 0x8153a6
;;;477        }
;;;478    }
        0x00814b14:    bd38        8.      POP      {r3-r5,pc}
    tuya_ble_handle_data_prod_test_response_evt
;;;479    
;;;480    
;;;481    void tuya_ble_handle_data_prod_test_response_evt(tuya_ble_evt_param_t *evt)
;;;482    {
        0x00814b16:    b538        8.      PUSH     {r3-r5,lr}
        0x00814b18:    4604        .F      MOV      r4,r0
        0x00814b1a:    7a00        .z      LDRB     r0,[r0,#8]
        0x00814b1c:    2500        .%      MOVS     r5,#0
        0x00814b1e:    b110        ..      CBZ      r0,0x814b26 ; tuya_ble_handle_data_prod_test_response_evt + 16
        0x00814b20:    2801        .(      CMP      r0,#1
        0x00814b22:    d005        ..      BEQ      0x814b30 ; tuya_ble_handle_data_prod_test_response_evt + 26
        0x00814b24:    e010        ..      B        0x814b48 ; tuya_ble_handle_data_prod_test_response_evt + 50
;;;483        uint8_t encry_mode = 0;
;;;484        tuya_ble_connect_status_t connect_status;
;;;485    
;;;486        if(evt->prod_test_res_data.channel==0)
;;;487        {
;;;488            tuya_ble_common_uart_send_data(evt->prod_test_res_data.p_data,evt->prod_test_res_data.data_len);
        0x00814b26:    8961        a.      LDRH     r1,[r4,#0xa]
        0x00814b28:    68e0        .h      LDR      r0,[r4,#0xc]
        0x00814b2a:    f005feb3    ....    BL       tuya_ble_common_uart_send_data ; 0x81a894
        0x00814b2e:    e00b        ..      B        0x814b48 ; tuya_ble_handle_data_prod_test_response_evt + 50
;;;489        }
;;;490        else if(evt->prod_test_res_data.channel==1)
;;;491        {
;;;492            connect_status = tuya_ble_connect_status_get();
        0x00814b30:    f000fa78    ..x.    BL       tuya_ble_connect_status_get ; 0x815024
;;;493            if(connect_status==BONDING_CONN)
        0x00814b34:    2803        .(      CMP      r0,#3
        0x00814b36:    d100        ..      BNE      0x814b3a ; tuya_ble_handle_data_prod_test_response_evt + 36
;;;494            {
;;;495                encry_mode = ENCRYPTION_MODE_SESSION_KEY;
        0x00814b38:    2505        .%      MOVS     r5,#5
;;;496            }
;;;497            else
;;;498            {
;;;499                encry_mode = 0;
;;;500            }
;;;501    
;;;502            tuya_ble_commData_send(FRM_FACTORY_TEST_RESP,0,evt->prod_test_res_data.p_data,evt->prod_test_res_data.data_len,encry_mode);
        0x00814b3a:    9500        ..      STR      r5,[sp,#0]
        0x00814b3c:    8963        c.      LDRH     r3,[r4,#0xa]
        0x00814b3e:    2100        .!      MOVS     r1,#0
        0x00814b40:    2012        .       MOVS     r0,#0x12
        0x00814b42:    68e2        .h      LDR      r2,[r4,#0xc]
        0x00814b44:    f7fefa91    ....    BL       tuya_ble_commData_send ; 0x81306a
;;;503        }
;;;504    
;;;505        if(evt->prod_test_res_data.p_data)
        0x00814b48:    68e0        .h      LDR      r0,[r4,#0xc]
        0x00814b4a:    2800        .(      CMP      r0,#0
        0x00814b4c:    d003        ..      BEQ      0x814b56 ; tuya_ble_handle_data_prod_test_response_evt + 64
;;;506        {
;;;507            tuya_ble_free(evt->prod_test_res_data.p_data);
        0x00814b4e:    e8bd4038    ..8@    POP      {r3-r5,lr}
        0x00814b52:    f000bc28    ..(.    B.W      tuya_ble_free ; 0x8153a6
;;;508        }
;;;509    
;;;510    }
        0x00814b56:    bd38        8.      POP      {r3-r5,pc}
    tuya_ble_handle_uart_cmd_evt
;;;511    
;;;512    
;;;513    void tuya_ble_handle_uart_cmd_evt(tuya_ble_evt_param_t *evt)
;;;514    {
        0x00814b58:    b5f8        ..      PUSH     {r3-r7,lr}
        0x00814b5a:    4604        .F      MOV      r4,r0
;;;515        uint8_t sum;
;;;516        uint8_t *uart_send_buffer;
;;;517        uint16_t uart_send_len;
;;;518    
;;;519        TUYA_BLE_LOG_HEXDUMP_DEBUG("received uart cmd data",(uint8_t*)evt->uart_cmd_data.p_data,evt->uart_cmd_data.data_len);//
        0x00814b5c:    a016        ..      ADR      r0,{pc}+0x5c ; 0x814bb8
        0x00814b5e:    f006f824    ..$.    BL       get_args ; 0x81abaa
        0x00814b62:    4914        .I      LDR      r1,[pc,#80] ; [0x814bb4] = 0x8803774
        0x00814b64:    4e0d        .N      LDR      r6,[pc,#52] ; [0x814b9c] = 0x21103002
        0x00814b66:    4602        .F      MOV      r2,r0
        0x00814b68:    89a3        ..      LDRH     r3,[r4,#0xc]
        0x00814b6a:    3168        h1      ADDS     r1,r1,#0x68
        0x00814b6c:    4630        0F      MOV      r0,r6
        0x00814b6e:    f7f2df76    ..v.    BL       log_buffer ; 0x7a5e
        0x00814b72:    89a3        ..      LDRH     r3,[r4,#0xc]
        0x00814b74:    2108        .!      MOVS     r1,#8
        0x00814b76:    a01c        ..      ADR      r0,{pc}+0x72 ; 0x814be8
        0x00814b78:    6922        "i      LDR      r2,[r4,#0x10]
        0x00814b7a:    f006f82a    ..*.    BL       log_hexdump ; 0x81abd2
        0x00814b7e:    a01a        ..      ADR      r0,{pc}+0x6a ; 0x814be8
        0x00814b80:    f006f813    ....    BL       get_args ; 0x81abaa
        0x00814b84:    490b        .I      LDR      r1,[pc,#44] ; [0x814bb4] = 0x8803774
        0x00814b86:    4602        .F      MOV      r2,r0
        0x00814b88:    3198        .1      ADDS     r1,r1,#0x98
        0x00814b8a:    4630        0F      MOV      r0,r6
        0x00814b8c:    e02e        ..      B        0x814bec ; tuya_ble_handle_uart_cmd_evt + 148
    $d
        0x00814b8e:    0000        ..      DCW    0
        0x00814b90:    002097d4    .. .    DCD    2136020
        0x00814b94:    0081d768    h...    DCD    8509288
        0x00814b98:    08803620     6..    DCD    142620192
        0x00814b9c:    21103002    .0.!    DCD    554708994
        0x00814ba0:    0081d710    ....    DCD    8509200
        0x00814ba4:    0081d810    ....    DCD    8509456
        0x00814ba8:    0081d7b4    ....    DCD    8509364
        0x00814bac:    002098f4    .. .    DCD    2136308
        0x00814bb0:    0081d6a8    ....    DCD    8509096
        0x00814bb4:    08803774    t7..    DCD    142620532
        0x00814bb8:    205d445b    [D]     DCD    542983259
        0x00814bbc:    41595554    TUYA    DCD    1096373588
        0x00814bc0:    454c425f    _BLE    DCD    1162625631
        0x00814bc4:    6572203a    : re    DCD    1701978170
        0x00814bc8:    76696563    ceiv    DCD    1986618723
        0x00814bcc:    75206465    ed u    DCD    1965057125
        0x00814bd0:    20747261    art     DCD    544502369
        0x00814bd4:    20646d63    cmd     DCD    543452515
        0x00814bd8:    61746164    data    DCD    1635017060
        0x00814bdc:    656c5b20     [le    DCD    1701600032
        0x00814be0:    64253d6e    n=%d    DCD    1680162158
        0x00814be4:    003a205d    ] :.    DCD    3809373
        0x00814be8:    00000000    ....    DCD    0
    $t
        0x00814bec:    f7f2df37    ..7.    BL       log_buffer ; 0x7a5e
;;;520    
;;;521    #if (TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;522    
;;;523        if(evt->uart_cmd_data.data_len>0)
        0x00814bf0:    89a0        ..      LDRH     r0,[r4,#0xc]
        0x00814bf2:    b348        H.      CBZ      r0,0x814c48 ; tuya_ble_handle_uart_cmd_evt + 240
        0x00814bf4:    1e40        @.      SUBS     r0,r0,#1
;;;524        {
;;;525            sum = tuya_ble_check_sum(evt->uart_cmd_data.p_data,evt->uart_cmd_data.data_len-1);
        0x00814bf6:    b281        ..      UXTH     r1,r0
        0x00814bf8:    6920         i      LDR      r0,[r4,#0x10]
        0x00814bfa:    f001fbb2    ....    BL       tuya_ble_check_sum ; 0x816362
        0x00814bfe:    4605        .F      MOV      r5,r0
;;;526            if(sum==evt->uart_cmd_data.p_data[evt->uart_cmd_data.data_len-1])
        0x00814c00:    89a1        ..      LDRH     r1,[r4,#0xc]
        0x00814c02:    6920         i      LDR      r0,[r4,#0x10]
        0x00814c04:    1842        B.      ADDS     r2,r0,r1
        0x00814c06:    f8122c01    ...,    LDRB     r2,[r2,#-1]
        0x00814c0a:    42aa        .B      CMP      r2,r5
        0x00814c0c:    d10e        ..      BNE      0x814c2c ; tuya_ble_handle_uart_cmd_evt + 212
;;;527            {
;;;528    
;;;529                switch(evt->uart_cmd_data.p_data[0])
        0x00814c0e:    7802        .x      LDRB     r2,[r0,#0]
        0x00814c10:    2a55        U*      CMP      r2,#0x55
        0x00814c12:    d002        ..      BEQ      0x814c1a ; tuya_ble_handle_uart_cmd_evt + 194
        0x00814c14:    2a66        f*      CMP      r2,#0x66
        0x00814c16:    d117        ..      BNE      0x814c48 ; tuya_ble_handle_uart_cmd_evt + 240
        0x00814c18:    e002        ..      B        0x814c20 ; tuya_ble_handle_uart_cmd_evt + 200
;;;530                {
;;;531                case 0x55:
;;;532                    tuya_ble_uart_common_process(evt->uart_cmd_data.p_data,evt->uart_cmd_data.data_len);
        0x00814c1a:    f002fef4    ....    BL       tuya_ble_uart_common_process ; 0x817a06
;;;533                    break;
        0x00814c1e:    e013        ..      B        0x814c48 ; tuya_ble_handle_uart_cmd_evt + 240
        0x00814c20:    460a        .F      MOV      r2,r1
        0x00814c22:    4601        .F      MOV      r1,r0
;;;534                case 0x66:
;;;535                    tuya_ble_app_production_test_process(0,evt->uart_cmd_data.p_data,evt->uart_cmd_data.data_len);
        0x00814c24:    2000        .       MOVS     r0,#0
        0x00814c26:    f002fbab    ....    BL       tuya_ble_app_production_test_process ; 0x817380
;;;536                    break;
        0x00814c2a:    e00d        ..      B        0x814c48 ; tuya_ble_handle_uart_cmd_evt + 240
;;;537                default:
;;;538                    break;
;;;539                };
;;;540    
;;;541            }
;;;542            else
;;;543            {
;;;544                TUYA_BLE_LOG_ERROR("uart receive data check_sum error , receive sum = 0x%02x ; cal sum = 0x%02x",evt->uart_cmd_data.p_data[evt->uart_cmd_data.data_len-1],sum);
        0x00814c2c:    4866        fH      LDR      r0,[pc,#408] ; [0x814dc8] = 0x81d864
        0x00814c2e:    f005ffbc    ....    BL       get_args ; 0x81abaa
        0x00814c32:    9500        ..      STR      r5,[sp,#0]
        0x00814c34:    4602        .F      MOV      r2,r0
        0x00814c36:    89a1        ..      LDRH     r1,[r4,#0xc]
        0x00814c38:    6920         i      LDR      r0,[r4,#0x10]
        0x00814c3a:    4408        .D      ADD      r0,r0,r1
        0x00814c3c:    4963        cI      LDR      r1,[pc,#396] ; [0x814dcc] = 0x8803810
        0x00814c3e:    f8103c01    ...<    LDRB     r3,[r0,#-1]
        0x00814c42:    4630        0F      MOV      r0,r6
        0x00814c44:    f7f2df0b    ....    BL       log_buffer ; 0x7a5e
;;;545            }
;;;546        }
;;;547    
;;;548    #endif
;;;549    
;;;550        if(evt->uart_cmd_data.p_data)
        0x00814c48:    6920         i      LDR      r0,[r4,#0x10]
        0x00814c4a:    2800        .(      CMP      r0,#0
        0x00814c4c:    d003        ..      BEQ      0x814c56 ; tuya_ble_handle_uart_cmd_evt + 254
;;;551        {
;;;552            tuya_ble_free(evt->uart_cmd_data.p_data);
        0x00814c4e:    e8bd40f8    ...@    POP      {r3-r7,lr}
        0x00814c52:    f000bba8    ....    B.W      tuya_ble_free ; 0x8153a6
;;;553        }
;;;554    }
        0x00814c56:    bdf8        ..      POP      {r3-r7,pc}
    tuya_ble_handle_ble_cmd_evt
;;;555    
;;;556    
;;;557    void tuya_ble_handle_ble_cmd_evt(tuya_ble_evt_param_t *evt)
;;;558    {
        0x00814c58:    b510        ..      PUSH     {r4,lr}
        0x00814c5a:    4604        .F      MOV      r4,r0
;;;559    
;;;560        tuya_ble_evt_process(evt->ble_cmd_data.cmd,evt->ble_cmd_data.p_data,evt->ble_cmd_data.data_len);
        0x00814c5c:    8982        ..      LDRH     r2,[r0,#0xc]
        0x00814c5e:    6901        .i      LDR      r1,[r0,#0x10]
        0x00814c60:    8900        ..      LDRH     r0,[r0,#8]
        0x00814c62:    b280        ..      UXTH     r0,r0
        0x00814c64:    f7fff920    .. .    BL       tuya_ble_evt_process ; 0x813ea8
;;;561        if(evt->ble_cmd_data.p_data)
        0x00814c68:    6920         i      LDR      r0,[r4,#0x10]
        0x00814c6a:    2800        .(      CMP      r0,#0
        0x00814c6c:    d003        ..      BEQ      0x814c76 ; tuya_ble_handle_ble_cmd_evt + 30
;;;562        {
;;;563            tuya_ble_free(evt->ble_cmd_data.p_data);
        0x00814c6e:    e8bd4010    ...@    POP      {r4,lr}
        0x00814c72:    f000bb98    ....    B.W      tuya_ble_free ; 0x8153a6
;;;564        }
;;;565    }
        0x00814c76:    bd10        ..      POP      {r4,pc}
    tuya_ble_handle_net_config_response_evt
;;;566    
;;;567    
;;;568    void tuya_ble_handle_net_config_response_evt(tuya_ble_evt_param_t *evt)
;;;569    {
        0x00814c78:    b51c        ..      PUSH     {r2-r4,lr}
        0x00814c7a:    4604        .F      MOV      r4,r0
;;;570        uint8_t encry_mode = 0;
;;;571        uint8_t data[2];
;;;572    
;;;573        if(tuya_ble_pair_rand_valid_get()==1)
        0x00814c7c:    f7fdfe95    ....    BL       tuya_ble_pair_rand_valid_get ; 0x8129aa
        0x00814c80:    2801        .(      CMP      r0,#1
        0x00814c82:    d00e        ..      BEQ      0x814ca2 ; tuya_ble_handle_net_config_response_evt + 42
;;;574        {
;;;575            encry_mode = ENCRYPTION_MODE_KEY_2;
;;;576        }
;;;577        else
;;;578        {
;;;579            encry_mode = ENCRYPTION_MODE_KEY_1;
        0x00814c84:    2001        .       MOVS     r0,#1
;;;580        }
;;;581    
;;;582    
;;;583        data[0] = ((int16_t)(evt->net_config_response_data.result_code))>>8;
        0x00814c86:    8921        !.      LDRH     r1,[r4,#8]
        0x00814c88:    9000        ..      STR      r0,[sp,#0]
        0x00814c8a:    0a0a        ..      LSRS     r2,r1,#8
        0x00814c8c:    f88d2004    ...     STRB     r2,[sp,#4]
;;;584        data[1] = (int16_t)(evt->net_config_response_data.result_code);
        0x00814c90:    f88d1005    ....    STRB     r1,[sp,#5]
;;;585    
;;;586        tuya_ble_commData_send(FRM_NET_CONFIG_RESPONSE_REPORT_REQ,0,data,2,encry_mode);
        0x00814c94:    2302        .#      MOVS     r3,#2
        0x00814c96:    aa01        ..      ADD      r2,sp,#4
        0x00814c98:    2100        .!      MOVS     r1,#0
        0x00814c9a:    2022        "       MOVS     r0,#0x22
        0x00814c9c:    f7fef9e5    ....    BL       tuya_ble_commData_send ; 0x81306a
;;;587    
;;;588    }
        0x00814ca0:    bd1c        ..      POP      {r2-r4,pc}
        0x00814ca2:    2002        .       MOVS     r0,#2
        0x00814ca4:    e7ef        ..      B        0x814c86 ; tuya_ble_handle_net_config_response_evt + 14
    tuya_ble_handle_time_request_evt
;;;589    
;;;590    
;;;591    void tuya_ble_handle_time_request_evt(tuya_ble_evt_param_t *evt)
;;;592    {
        0x00814ca6:    b538        8.      PUSH     {r3-r5,lr}
        0x00814ca8:    4604        .F      MOV      r4,r0
;;;593        uint8_t encry_mode = 0;
;;;594        uint16_t cmd;
;;;595        if(tuya_ble_pair_rand_valid_get()==1)
        0x00814caa:    f7fdfe7e    ..~.    BL       tuya_ble_pair_rand_valid_get ; 0x8129aa
        0x00814cae:    2801        .(      CMP      r0,#1
        0x00814cb0:    d00b        ..      BEQ      0x814cca ; tuya_ble_handle_time_request_evt + 36
;;;596        {
;;;597            encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;598        }
;;;599        else
;;;600        {
;;;601            encry_mode = ENCRYPTION_MODE_KEY_4;
        0x00814cb2:    2104        .!      MOVS     r1,#4
;;;602        }
;;;603    
;;;604        if(evt->time_req_data.time_type==0)
        0x00814cb4:    7a20         z      LDRB     r0,[r4,#8]
        0x00814cb6:    b150        P.      CBZ      r0,0x814cce ; tuya_ble_handle_time_request_evt + 40
;;;605        {
;;;606            cmd = FRM_GET_UNIX_TIME_CHAR_MS_REQ;
;;;607        }
;;;608        else
;;;609        {
;;;610            cmd = FRM_GET_UNIX_TIME_CHAR_DATE_REQ;
        0x00814cb8:    f2480012    H...    MOV      r0,#0x8012
;;;611        }
;;;612    
;;;613        tuya_ble_commData_send(cmd,0,NULL,0,encry_mode);
        0x00814cbc:    2300        .#      MOVS     r3,#0
        0x00814cbe:    9100        ..      STR      r1,[sp,#0]
        0x00814cc0:    461a        .F      MOV      r2,r3
        0x00814cc2:    4619        .F      MOV      r1,r3
        0x00814cc4:    f7fef9d1    ....    BL       tuya_ble_commData_send ; 0x81306a
;;;614    
;;;615    }
        0x00814cc8:    bd38        8.      POP      {r3-r5,pc}
        0x00814cca:    2105        .!      MOVS     r1,#5
        0x00814ccc:    e7f2        ..      B        0x814cb4 ; tuya_ble_handle_time_request_evt + 14
        0x00814cce:    f2480011    H...    MOV      r0,#0x8011
        0x00814cd2:    e7f3        ..      B        0x814cbc ; tuya_ble_handle_time_request_evt + 22
    tuya_ble_handle_unbound_response_evt
;;;616    
;;;617    
;;;618    
;;;619    
;;;620    void tuya_ble_handle_unbound_response_evt(tuya_ble_evt_param_t *evt)
;;;621    {
;;;622    #if (!TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;623        uint8_t encry_mode = 0;
;;;624        uint8_t result;
;;;625    
;;;626        encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;627    
;;;628        result = evt->ubound_res_data.result_code;
;;;629    
;;;630        tuya_ble_commData_send(FRM_UNBONDING_RESP,0,&result,1,encry_mode);
;;;631    #else
;;;632        return;
;;;633    #endif
;;;634    }
        0x00814cd4:    4770        pG      BX       lr
    tuya_ble_handle_anomaly_unbound_response_evt
;;;635    
;;;636    void tuya_ble_handle_anomaly_unbound_response_evt(tuya_ble_evt_param_t *evt)
;;;637    {
;;;638    #if (!TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;639    
;;;640        uint8_t encry_mode = 0;
;;;641        uint8_t result;
;;;642    
;;;643        encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;644    
;;;645        result = evt->anomaly_ubound_res_data.result_code;
;;;646    
;;;647        tuya_ble_commData_send(FRM_ANOMALY_UNBONDING_RESP,0,&result,1,encry_mode);
;;;648    
;;;649    #else
;;;650        return;
;;;651    #endif
;;;652    
;;;653    }
        0x00814cd6:    4770        pG      BX       lr
    tuya_ble_handle_device_reset_response_evt
;;;654    
;;;655    void tuya_ble_handle_device_reset_response_evt(tuya_ble_evt_param_t *evt)
;;;656    {
;;;657    #if (!TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;658        uint8_t encry_mode = 0;
;;;659        uint8_t result;
;;;660    
;;;661        encry_mode = ENCRYPTION_MODE_SESSION_KEY;
;;;662    
;;;663        result = evt->device_reset_res_data.result_code;
;;;664    
;;;665        tuya_ble_commData_send(FRM_DEVICE_RESET_RESP,0,&result,1,encry_mode);
;;;666    #else
;;;667        return;
;;;668    #endif
;;;669    }
        0x00814cd8:    4770        pG      BX       lr
    tuya_ble_handle_connecting_request_evt
;;;670    
;;;671    #if (TUYA_BLE_PROTOCOL_VERSION_HIGN >= 3) 
;;;672    void tuya_ble_handle_connecting_request_evt(tuya_ble_evt_param_t *evt)
;;;673    {
        0x00814cda:    b510        ..      PUSH     {r4,lr}
        0x00814cdc:    4604        .F      MOV      r4,r0
;;;674        tuya_ble_connect_status_t currnet_connect_status;
;;;675        currnet_connect_status = tuya_ble_connect_status_get();
        0x00814cde:    f000f9a1    ....    BL       tuya_ble_connect_status_get ; 0x815024
;;;676        if((currnet_connect_status != BONDING_UNCONN)&&(currnet_connect_status!= UNBONDING_UNCONN))
        0x00814ce2:    2802        .(      CMP      r0,#2
        0x00814ce4:    d001        ..      BEQ      0x814cea ; tuya_ble_handle_connecting_request_evt + 16
        0x00814ce6:    2800        .(      CMP      r0,#0
        0x00814ce8:    d109        ..      BNE      0x814cfe ; tuya_ble_handle_connecting_request_evt + 36
;;;677        {
;;;678            return;
;;;679        }
;;;680        if(evt->connecting_request_data.cmd==0)
        0x00814cea:    7a20         z      LDRB     r0,[r4,#8]
        0x00814cec:    b118        ..      CBZ      r0,0x814cf6 ; tuya_ble_handle_connecting_request_evt + 28
        0x00814cee:    e8bd4010    ...@    POP      {r4,lr}
        0x00814cf2:    f000ba84    ....    B.W      tuya_ble_adv_change_with_connecting_request ; 0x8151fe
;;;681        {
;;;682            tuya_ble_adv_change();
        0x00814cf6:    e8bd4010    ...@    POP      {r4,lr}
        0x00814cfa:    f000b9e2    ....    B.W      tuya_ble_adv_change ; 0x8150c2
;;;683        }
;;;684        else
;;;685        {      
;;;686            tuya_ble_adv_change_with_connecting_request();      
;;;687        }
;;;688    
;;;689    }
        0x00814cfe:    bd10        ..      POP      {r4,pc}
    tuya_ble_handle_connect_change_evt
;;;690    #endif
;;;691    
;;;692    extern void tuya_ble_connect_monitor_timer_start(void);
;;;693    void tuya_ble_handle_connect_change_evt(tuya_ble_evt_param_t *evt)
;;;694    {
        0x00814d00:    b530        0.      PUSH     {r4,r5,lr}
        0x00814d02:    7a00        .z      LDRB     r0,[r0,#8]
        0x00814d04:    4d32        2M      LDR      r5,[pc,#200] ; [0x814dd0] = 0x2097d4
        0x00814d06:    4c33        3L      LDR      r4,[pc,#204] ; [0x814dd4] = 0x21103002
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_event_handler.c (694)
        0x00814d08:    b089        ..      SUB      sp,sp,#0x24
        0x00814d0a:    2800        .(      CMP      r0,#0
        0x00814d0c:    d01d        ..      BEQ      0x814d4a ; tuya_ble_handle_connect_change_evt + 74
        0x00814d0e:    2801        .(      CMP      r0,#1
        0x00814d10:    d034        4.      BEQ      0x814d7c ; tuya_ble_handle_connect_change_evt + 124
        0x00814d12:    a031        1.      ADR      r0,{pc}+0xc6 ; 0x814dd8
        0x00814d14:    f005ff49    ..I.    BL       get_args ; 0x81abaa
        0x00814d18:    492c        ,I      LDR      r1,[pc,#176] ; [0x814dcc] = 0x8803810
        0x00814d1a:    4602        .F      MOV      r2,r0
        0x00814d1c:    3194        .1      ADDS     r1,r1,#0x94
        0x00814d1e:    4620         F      MOV      r0,r4
        0x00814d20:    f7f2de9d    ....    BL       log_buffer ; 0x7a5e
        0x00814d24:    2040        @       MOVS     r0,#0x40
        0x00814d26:    f88d0000    ....    STRB     r0,[sp,#0]
        0x00814d2a:    f000f97b    ..{.    BL       tuya_ble_connect_status_get ; 0x815024
        0x00814d2e:    f88d0004    ....    STRB     r0,[sp,#4]
        0x00814d32:    4668        hF      MOV      r0,sp
        0x00814d34:    f000f9b2    ....    BL       tuya_ble_cb_event_send ; 0x81509c
        0x00814d38:    2800        .(      CMP      r0,#0
        0x00814d3a:    d038        8.      BEQ      0x814dae ; tuya_ble_handle_connect_change_evt + 174
        0x00814d3c:    a031        1.      ADR      r0,{pc}+0xc8 ; 0x814e04
        0x00814d3e:    f005ff34    ..4.    BL       get_args ; 0x81abaa
        0x00814d42:    4922        "I      LDR      r1,[pc,#136] ; [0x814dcc] = 0x8803810
        0x00814d44:    4602        .F      MOV      r2,r0
        0x00814d46:    31c0        .1      ADDS     r1,r1,#0xc0
        0x00814d48:    e037        7.      B        0x814dba ; tuya_ble_handle_connect_change_evt + 186
;;;695        tuya_ble_cb_evt_param_t event;
;;;696        uint8_t send_cb_flag = 1;
;;;697    
;;;698        if(evt->connect_change_evt==TUYA_BLE_CONNECTED)
;;;699        {
;;;700            TUYA_BLE_LOG_INFO("Connected!");
        0x00814d4a:    a03a        :.      ADR      r0,{pc}+0xea ; 0x814e34
        0x00814d4c:    f005ff2d    ..-.    BL       get_args ; 0x81abaa
        0x00814d50:    491e        .I      LDR      r1,[pc,#120] ; [0x814dcc] = 0x8803810
        0x00814d52:    4602        .F      MOV      r2,r0
        0x00814d54:    315c        \1      ADDS     r1,r1,#0x5c
        0x00814d56:    4620         F      MOV      r0,r4
        0x00814d58:    f7f2de81    ....    BL       log_buffer ; 0x7a5e
;;;701            tuya_ble_reset_ble_sn();
        0x00814d5c:    f7fdfdf4    ....    BL       tuya_ble_reset_ble_sn ; 0x812948
;;;702            if(tuya_ble_current_para.sys_settings.bound_flag!=1)
        0x00814d60:    f895013c    ..<.    LDRB     r0,[r5,#0x13c]
        0x00814d64:    2801        .(      CMP      r0,#1
        0x00814d66:    d001        ..      BEQ      0x814d6c ; tuya_ble_handle_connect_change_evt + 108
;;;703            {
;;;704                tuya_ble_connect_status_set(UNBONDING_UNAUTH_CONN);
        0x00814d68:    2005        .       MOVS     r0,#5
        0x00814d6a:    e000        ..      B        0x814d6e ; tuya_ble_handle_connect_change_evt + 110
;;;705            }
;;;706            else
;;;707            {
;;;708                tuya_ble_connect_status_set(BONDING_UNAUTH_CONN);
        0x00814d6c:    2004        .       MOVS     r0,#4
        0x00814d6e:    f000f94f    ..O.    BL       tuya_ble_connect_status_set ; 0x815010
;;;709            }
;;;710    
;;;711            tuya_ble_connect_monitor_timer_start();
        0x00814d72:    f7fdfa29    ..).    BL       tuya_ble_connect_monitor_timer_start ; 0x8121c8
;;;712    
;;;713    #if (TUYA_BLE_DEVICE_REGISTER_FROM_BLE&&TUYA_BLE_DEVICE_AUTH_DATA_STORE)
;;;714    
;;;715            tuya_ble_internal_production_test_with_ble_flag_clear();
        0x00814d76:    f001fe2f    ../.    BL       tuya_ble_internal_production_test_with_ble_flag_clear ; 0x8169d8
        0x00814d7a:    e7d3        ..      B        0x814d24 ; tuya_ble_handle_connect_change_evt + 36
;;;716    
;;;717    #endif
;;;718    
;;;719        }
;;;720        else if(evt->connect_change_evt==TUYA_BLE_DISCONNECTED)
;;;721        {
;;;722            TUYA_BLE_LOG_INFO("Disonnected");
        0x00814d7c:    a034        4.      ADR      r0,{pc}+0xd4 ; 0x814e50
        0x00814d7e:    f005ff14    ....    BL       get_args ; 0x81abaa
        0x00814d82:    4912        .I      LDR      r1,[pc,#72] ; [0x814dcc] = 0x8803810
        0x00814d84:    4602        .F      MOV      r2,r0
        0x00814d86:    3178        x1      ADDS     r1,r1,#0x78
        0x00814d88:    4620         F      MOV      r0,r4
        0x00814d8a:    f7f2de68    ..h.    BL       log_buffer ; 0x7a5e
;;;723    
;;;724            tuya_ble_reset_ble_sn();
        0x00814d8e:    f7fdfddb    ....    BL       tuya_ble_reset_ble_sn ; 0x812948
;;;725    
;;;726            tuya_ble_pair_rand_clear();
        0x00814d92:    f7fdfdfc    ....    BL       tuya_ble_pair_rand_clear ; 0x81298e
;;;727    
;;;728            tuya_ble_air_recv_packet_free();
        0x00814d96:    f7fdfe0b    ....    BL       tuya_ble_air_recv_packet_free ; 0x8129b0
;;;729    
;;;730            if(tuya_ble_current_para.sys_settings.bound_flag==1)
        0x00814d9a:    f895013c    ..<.    LDRB     r0,[r5,#0x13c]
        0x00814d9e:    2801        .(      CMP      r0,#1
        0x00814da0:    d003        ..      BEQ      0x814daa ; tuya_ble_handle_connect_change_evt + 170
        0x00814da2:    2000        .       MOVS     r0,#0
;;;731            {
;;;732                tuya_ble_connect_status_set(BONDING_UNCONN);
        0x00814da4:    f000f934    ..4.    BL       tuya_ble_connect_status_set ; 0x815010
        0x00814da8:    e7bc        ..      B        0x814d24 ; tuya_ble_handle_connect_change_evt + 36
        0x00814daa:    2002        .       MOVS     r0,#2
        0x00814dac:    e7fa        ..      B        0x814da4 ; tuya_ble_handle_connect_change_evt + 164
;;;733            }
;;;734            else
;;;735            {
;;;736                tuya_ble_connect_status_set(UNBONDING_UNCONN);
;;;737            }
;;;738        }
;;;739        else
;;;740        {
;;;741            TUYA_BLE_LOG_WARNING("unknown connect_change_evt!");
;;;742        }
;;;743    
;;;744        if(send_cb_flag)
;;;745        {
;;;746            event.evt = TUYA_BLE_CB_EVT_CONNECTE_STATUS;
;;;747            event.connect_status = tuya_ble_connect_status_get();
;;;748            if(tuya_ble_cb_event_send(&event)!=0)
;;;749            {
;;;750                TUYA_BLE_LOG_ERROR("tuya ble send cb event failed.");
;;;751            }
;;;752            else
;;;753            {
;;;754                TUYA_BLE_LOG_DEBUG("tuya ble send cb event succeed.");
        0x00814dae:    a02f        /.      ADR      r0,{pc}+0xbe ; 0x814e6c
        0x00814db0:    f005fefb    ....    BL       get_args ; 0x81abaa
        0x00814db4:    4905        .I      LDR      r1,[pc,#20] ; [0x814dcc] = 0x8803810
        0x00814db6:    4602        .F      MOV      r2,r0
        0x00814db8:    31f0        .1      ADDS     r1,r1,#0xf0
        0x00814dba:    4620         F      MOV      r0,r4
        0x00814dbc:    f7f2de4f    ..O.    BL       log_buffer ; 0x7a5e
;;;755            }
;;;756    
;;;757        }
;;;758    
;;;759    }
        0x00814dc0:    b009        ..      ADD      sp,sp,#0x24
        0x00814dc2:    bd30        0.      POP      {r4,r5,pc}
    tuya_ble_handle_ble_data_evt
;;;760    
;;;761    
;;;762    void tuya_ble_handle_ble_data_evt(uint8_t *buf,uint16_t len)
;;;763    {
;;;764        tuya_ble_commonData_rx_proc(buf,len);
        0x00814dc4:    f7fdbea1    ....    B        tuya_ble_commonData_rx_proc ; 0x812b0a
    $d
        0x00814dc8:    0081d864    d...    DCD    8509540
        0x00814dcc:    08803810    .8..    DCD    142620688
        0x00814dd0:    002097d4    .. .    DCD    2136020
        0x00814dd4:    21103002    .0.!    DCD    554708994
        0x00814dd8:    205d575b    [W]     DCD    542988123
        0x00814ddc:    41595554    TUYA    DCD    1096373588
        0x00814de0:    454c425f    _BLE    DCD    1162625631
        0x00814de4:    6e75203a    : un    DCD    1853169722
        0x00814de8:    776f6e6b    know    DCD    2003791467
        0x00814dec:    6f63206e    n co    DCD    1868767342
        0x00814df0:    63656e6e    nnec    DCD    1667591790
        0x00814df4:    68635f74    t_ch    DCD    1751342964
        0x00814df8:    65676e61    ange    DCD    1701277281
        0x00814dfc:    7476655f    _evt    DCD    1953916255
        0x00814e00:    00000021    !...    DCD    33
        0x00814e04:    205d455b    [E]     DCD    542983515
        0x00814e08:    41595554    TUYA    DCD    1096373588
        0x00814e0c:    454c425f    _BLE    DCD    1162625631
        0x00814e10:    7574203a    : tu    DCD    1970544698
        0x00814e14:    62206179    ya b    DCD    1646289273
        0x00814e18:    7320656c    le s    DCD    1931502956
        0x00814e1c:    20646e65    end     DCD    543452773
        0x00814e20:    65206263    cb e    DCD    1696621155
        0x00814e24:    746e6576    vent    DCD    1953391990
        0x00814e28:    69616620     fai    DCD    1767990816
        0x00814e2c:    2e64656c    led.    DCD    778331500
        0x00814e30:    00000000    ....    DCD    0
        0x00814e34:    205d495b    [I]     DCD    542984539
        0x00814e38:    41595554    TUYA    DCD    1096373588
        0x00814e3c:    454c425f    _BLE    DCD    1162625631
        0x00814e40:    6f43203a    : Co    DCD    1866670138
        0x00814e44:    63656e6e    nnec    DCD    1667591790
        0x00814e48:    21646574    ted!    DCD    560227700
        0x00814e4c:    00000000    ....    DCD    0
        0x00814e50:    205d495b    [I]     DCD    542984539
        0x00814e54:    41595554    TUYA    DCD    1096373588
        0x00814e58:    454c425f    _BLE    DCD    1162625631
        0x00814e5c:    6944203a    : Di    DCD    1766072378
        0x00814e60:    6e6e6f73    sonn    DCD    1852731251
        0x00814e64:    65746365    ecte    DCD    1702126437
        0x00814e68:    00000064    d...    DCD    100
        0x00814e6c:    205d445b    [D]     DCD    542983259
        0x00814e70:    41595554    TUYA    DCD    1096373588
        0x00814e74:    454c425f    _BLE    DCD    1162625631
        0x00814e78:    7574203a    : tu    DCD    1970544698
        0x00814e7c:    62206179    ya b    DCD    1646289273
        0x00814e80:    7320656c    le s    DCD    1931502956
        0x00814e84:    20646e65    end     DCD    543452773
        0x00814e88:    65206263    cb e    DCD    1696621155
        0x00814e8c:    746e6576    vent    DCD    1953391990
        0x00814e90:    63757320     suc    DCD    1668641568
        0x00814e94:    64656563    ceed    DCD    1684366691
        0x00814e98:    0000002e    ....    DCD    46
    $t
    .text
    prvInsertBlockIntoFreeList
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_heap.c
;;;355    {
        0x00814e9c:    b530        0.      PUSH     {r4,r5,lr}
        0x00814e9e:    495b        [I      LDR      r1,[pc,#364] ; [0x81500c] = 0x20919c
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_heap.c (355)
        0x00814ea0:    e000        ..      B        0x814ea4 ; prvInsertBlockIntoFreeList + 8
        0x00814ea2:    4611        .F      MOV      r1,r2
;;;356        BlockLink_t *pxIterator;
;;;357        uint8_t *puc;
;;;358    
;;;359        /* Iterate through the list until a block is found that has a higher address
;;;360        than the block being inserted. */
;;;361        for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
        0x00814ea4:    680a        .h      LDR      r2,[r1,#0]
        0x00814ea6:    4282        .B      CMP      r2,r0
        0x00814ea8:    d3fb        ..      BCC      0x814ea2 ; prvInsertBlockIntoFreeList + 6
;;;362        {
;;;363            /* Nothing to do here, just iterate to the right position. */
;;;364        }
;;;365    
;;;366        /* Do the block being inserted, and the block it is being inserted after
;;;367        make a contiguous block of memory? */
;;;368        puc = ( uint8_t * ) pxIterator;
;;;369        if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
        0x00814eaa:    684b        Kh      LDR      r3,[r1,#4]
        0x00814eac:    185c        \.      ADDS     r4,r3,r1
        0x00814eae:    4284        .B      CMP      r4,r0
        0x00814eb0:    d103        ..      BNE      0x814eba ; prvInsertBlockIntoFreeList + 30
;;;370        {
;;;371            pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
        0x00814eb2:    6840        @h      LDR      r0,[r0,#4]
        0x00814eb4:    4418        .D      ADD      r0,r0,r3
;;;372            pxBlockToInsert = pxIterator;
        0x00814eb6:    6048        H`      STR      r0,[r1,#4]
        0x00814eb8:    4608        .F      MOV      r0,r1
;;;373        }
;;;374        else
;;;375        {
;;;376            tuyaCOVERAGE_TEST_MARKER();
;;;377        }
;;;378    
;;;379        /* Do the block being inserted, and the block it is being inserted before
;;;380        make a contiguous block of memory? */
;;;381        puc = ( uint8_t * ) pxBlockToInsert;
;;;382        if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
        0x00814eba:    6843        Ch      LDR      r3,[r0,#4]
        0x00814ebc:    181c        ..      ADDS     r4,r3,r0
        0x00814ebe:    4294        .B      CMP      r4,r2
        0x00814ec0:    d109        ..      BNE      0x814ed6 ; prvInsertBlockIntoFreeList + 58
;;;383        {
;;;384            if( pxIterator->pxNextFreeBlock != pxEnd )
        0x00814ec2:    4c52        RL      LDR      r4,[pc,#328] ; [0x81500c] = 0x20919c
        0x00814ec4:    3c10        .<      SUBS     r4,r4,#0x10
        0x00814ec6:    6824        $h      LDR      r4,[r4,#0]
        0x00814ec8:    42a2        .B      CMP      r2,r4
        0x00814eca:    d009        ..      BEQ      0x814ee0 ; prvInsertBlockIntoFreeList + 68
;;;385            {
;;;386                /* Form one big block from the two blocks. */
;;;387                pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
        0x00814ecc:    6852        Rh      LDR      r2,[r2,#4]
        0x00814ece:    441a        .D      ADD      r2,r2,r3
;;;388                pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
        0x00814ed0:    6042        B`      STR      r2,[r0,#4]
        0x00814ed2:    680a        .h      LDR      r2,[r1,#0]
        0x00814ed4:    6812        .h      LDR      r2,[r2,#0]
;;;389            }
;;;390            else
;;;391            {
;;;392                pxBlockToInsert->pxNextFreeBlock = pxEnd;
;;;393            }
;;;394        }
;;;395        else
;;;396        {
;;;397            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
        0x00814ed6:    6002        .`      STR      r2,[r0,#0]
;;;398        }
;;;399    
;;;400        /* If the block being inserted plugged a gab, so was merged with the block
;;;401        before and the block after, then it's pxNextFreeBlock pointer will have
;;;402        already been set, and should not be set here as that would make it point
;;;403        to itself. */
;;;404        if( pxIterator != pxBlockToInsert )
        0x00814ed8:    4281        .B      CMP      r1,r0
        0x00814eda:    d000        ..      BEQ      0x814ede ; prvInsertBlockIntoFreeList + 66
;;;405        {
;;;406            pxIterator->pxNextFreeBlock = pxBlockToInsert;
        0x00814edc:    6008        .`      STR      r0,[r1,#0]
;;;407        }
;;;408        else
;;;409        {
;;;410            tuyaCOVERAGE_TEST_MARKER();
;;;411        }
;;;412    }
        0x00814ede:    bd30        0.      POP      {r4,r5,pc}
        0x00814ee0:    6004        .`      STR      r4,[r0,#0]
        0x00814ee2:    e7f9        ..      B        0x814ed8 ; prvInsertBlockIntoFreeList + 60
    pvTuyaPortMalloc
        0x00814ee4:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x00814ee8:    4605        .F      MOV      r5,r0
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_heap.c (93)
        0x00814eea:    2600        .&      MOVS     r6,#0
;;;94     
;;;95         tuya_ble_device_enter_critical();
        0x00814eec:    f005fd3c    ..<.    BL       tuya_ble_device_enter_critical ; 0x81a968
;;;96         {
;;;97             /* If this is the first call to malloc then the heap will require
;;;98             initialisation to setup the list of free blocks. */
;;;99             if( pxEnd == NULL )
        0x00814ef0:    4f46        FO      LDR      r7,[pc,#280] ; [0x81500c] = 0x20919c
        0x00814ef2:    3f10        .?      SUBS     r7,r7,#0x10
        0x00814ef4:    6838        8h      LDR      r0,[r7,#0]
        0x00814ef6:    b908        ..      CBNZ     r0,0x814efc ; pvTuyaPortMalloc + 24
;;;100            {
;;;101                prvHeapInit();
        0x00814ef8:    f000f865    ..e.    BL       prvHeapInit ; 0x814fc6
;;;102            }
;;;103            else
;;;104            {
;;;105                tuyaCOVERAGE_TEST_MARKER();
;;;106            }
;;;107    
;;;108            /* Check the requested block size is not so large that the top bit is
;;;109            set.  The top bit of the block size member of the BlockLink_t structure
;;;110            is used to determine who owns the block - the application or the
;;;111            kernel, so it must be free. */
;;;112            if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        0x00814efc:    68f8        .h      LDR      r0,[r7,#0xc]
        0x00814efe:    4205        .B      TST      r5,r0
        0x00814f00:    d135        5.      BNE      0x814f6e ; pvTuyaPortMalloc + 138
;;;113            {
;;;114                /* The wanted size is increased so it can contain a BlockLink_t
;;;115                structure in addition to the requested amount of bytes. */
;;;116                if( xWantedSize > 0 )
        0x00814f02:    b3a5        ..      CBZ      r5,0x814f6e ; pvTuyaPortMalloc + 138
        0x00814f04:    3508        .5      ADDS     r5,r5,#8
;;;117                {
;;;118                    xWantedSize += xHeapStructSize;
;;;119    
;;;120                    /* Ensure that blocks are always aligned to the required number
;;;121                    of bytes. */
;;;122                    if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
        0x00814f06:    0768        h.      LSLS     r0,r5,#29
        0x00814f08:    d004        ..      BEQ      0x814f14 ; pvTuyaPortMalloc + 48
;;;123                    {
;;;124                        /* Byte alignment required. */
;;;125                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
        0x00814f0a:    f0050007    ....    AND      r0,r5,#7
        0x00814f0e:    f1c00008    ....    RSB      r0,r0,#8
        0x00814f12:    4405        .D      ADD      r5,r5,r0
;;;126                        tuyaASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
;;;127                    }
;;;128                    else
;;;129                    {
;;;130                        tuyaCOVERAGE_TEST_MARKER();
;;;131                    }
;;;132                }
;;;133                else
;;;134                {
;;;135                    tuyaCOVERAGE_TEST_MARKER();
;;;136                }
;;;137    
;;;138                if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
        0x00814f14:    b35d        ].      CBZ      r5,0x814f6e ; pvTuyaPortMalloc + 138
        0x00814f16:    6878        xh      LDR      r0,[r7,#4]
        0x00814f18:    4285        .B      CMP      r5,r0
        0x00814f1a:    d828        (.      BHI      0x814f6e ; pvTuyaPortMalloc + 138
;;;139                {
;;;140                    /* Traverse the list from the start	(lowest address) block until
;;;141                    one	of adequate size is found. */
;;;142                    pxPreviousBlock = &xStart;
        0x00814f1c:    493b        ;I      LDR      r1,[pc,#236] ; [0x81500c] = 0x20919c
;;;143                    pxBlock = xStart.pxNextFreeBlock;
        0x00814f1e:    4608        .F      MOV      r0,r1
;;;144                    while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
        0x00814f20:    6804        .h      LDR      r4,[r0,#0]
        0x00814f22:    e001        ..      B        0x814f28 ; pvTuyaPortMalloc + 68
        0x00814f24:    4621        !F      MOV      r1,r4
        0x00814f26:    4604        .F      MOV      r4,r0
        0x00814f28:    6860        `h      LDR      r0,[r4,#4]
        0x00814f2a:    42a8        .B      CMP      r0,r5
        0x00814f2c:    d202        ..      BCS      0x814f34 ; pvTuyaPortMalloc + 80
        0x00814f2e:    6820         h      LDR      r0,[r4,#0]
        0x00814f30:    2800        .(      CMP      r0,#0
        0x00814f32:    d1f7        ..      BNE      0x814f24 ; pvTuyaPortMalloc + 64
;;;145                    {
;;;146                        pxPreviousBlock = pxBlock;
;;;147                        pxBlock = pxBlock->pxNextFreeBlock;
;;;148                    }
;;;149    
;;;150                    /* If the end marker was reached then a block of adequate size
;;;151                    was	not found. */
;;;152                    if( pxBlock != pxEnd )
        0x00814f34:    6838        8h      LDR      r0,[r7,#0]
        0x00814f36:    4284        .B      CMP      r4,r0
        0x00814f38:    d019        ..      BEQ      0x814f6e ; pvTuyaPortMalloc + 138
;;;153                    {
;;;154                        /* Return the memory space pointed to - jumping over the
;;;155                        BlockLink_t structure at its start. */
;;;156                        pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
;;;157    
;;;158                        /* This block is being returned for use so must be taken out
;;;159                        of the list of free blocks. */
;;;160                        pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
        0x00814f3a:    680e        .h      LDR      r6,[r1,#0]
        0x00814f3c:    6820         h      LDR      r0,[r4,#0]
;;;161    
;;;162                        /* If the block is larger than required it can be split into
;;;163                        two. */
;;;164                        if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
        0x00814f3e:    6008        .`      STR      r0,[r1,#0]
        0x00814f40:    6860        `h      LDR      r0,[r4,#4]
        0x00814f42:    3608        .6      ADDS     r6,r6,#8
        0x00814f44:    1b41        A.      SUBS     r1,r0,r5
        0x00814f46:    2910        .)      CMP      r1,#0x10
        0x00814f48:    d904        ..      BLS      0x814f54 ; pvTuyaPortMalloc + 112
;;;165                        {
;;;166                            /* This block is to be split into two.  Create a new
;;;167                            block following the number of bytes requested. The void
;;;168                            cast is used to prevent byte alignment warnings from the
;;;169                            compiler. */
;;;170                            pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
        0x00814f4a:    1960        `.      ADDS     r0,r4,r5
;;;171                            tuyaASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
;;;172    
;;;173                            /* Calculate the sizes of two blocks split from the
;;;174                            single block. */
;;;175                            pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
;;;176                            pxBlock->xBlockSize = xWantedSize;
        0x00814f4c:    6041        A`      STR      r1,[r0,#4]
;;;177    
;;;178                            /* Insert the new block into the list of free blocks. */
;;;179                            prvInsertBlockIntoFreeList( pxNewBlockLink );
        0x00814f4e:    6065        e`      STR      r5,[r4,#4]
        0x00814f50:    f7ffffa4    ....    BL       prvInsertBlockIntoFreeList ; 0x814e9c
;;;180                        }
;;;181                        else
;;;182                        {
;;;183                            tuyaCOVERAGE_TEST_MARKER();
;;;184                        }
;;;185    
;;;186                        xFreeBytesRemaining -= pxBlock->xBlockSize;
        0x00814f54:    6861        ah      LDR      r1,[r4,#4]
        0x00814f56:    6878        xh      LDR      r0,[r7,#4]
        0x00814f58:    1a40        @.      SUBS     r0,r0,r1
;;;187    
;;;188                        if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
        0x00814f5a:    6078        x`      STR      r0,[r7,#4]
        0x00814f5c:    68ba        .h      LDR      r2,[r7,#8]
        0x00814f5e:    4290        .B      CMP      r0,r2
        0x00814f60:    d200        ..      BCS      0x814f64 ; pvTuyaPortMalloc + 128
;;;189                        {
;;;190                            xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
        0x00814f62:    60b8        .`      STR      r0,[r7,#8]
;;;191                        }
;;;192                        else
;;;193                        {
;;;194                            tuyaCOVERAGE_TEST_MARKER();
;;;195                        }
;;;196    
;;;197                        /* The block is being returned - it is allocated and owned
;;;198                        by the application and has no "next" block. */
;;;199                        pxBlock->xBlockSize |= xBlockAllocatedBit;
        0x00814f64:    68f8        .h      LDR      r0,[r7,#0xc]
        0x00814f66:    4301        .C      ORRS     r1,r1,r0
;;;200                        pxBlock->pxNextFreeBlock = NULL;
        0x00814f68:    2000        .       MOVS     r0,#0
        0x00814f6a:    e9c40100    ....    STRD     r0,r1,[r4,#0]
;;;201                    }
;;;202                    else
;;;203                    {
;;;204                        tuyaCOVERAGE_TEST_MARKER();
;;;205                    }
;;;206                }
;;;207                else
;;;208                {
;;;209                    tuyaCOVERAGE_TEST_MARKER();
;;;210                }
;;;211            }
;;;212            else
;;;213            {
;;;214                tuyaCOVERAGE_TEST_MARKER();
;;;215            }
;;;216    
;;;217            tuya_traceMALLOC( pvReturn, xWantedSize );
;;;218        }
;;;219        ( void ) tuya_ble_device_exit_critical();
        0x00814f6e:    f005fd01    ....    BL       tuya_ble_device_exit_critical ; 0x81a974
;;;220    
;;;221    #if( tuyaUSE_MALLOC_FAILED_HOOK == 1 )
;;;222        {
;;;223            if( pvReturn == NULL )
;;;224            {
;;;225                extern void vApplicationMallocFailedHook( void );
;;;226                vApplicationMallocFailedHook();
;;;227            }
;;;228            else
;;;229            {
;;;230                tuyaCOVERAGE_TEST_MARKER();
;;;231            }
;;;232        }
;;;233    #endif
;;;234    
;;;235        tuyaASSERT( ( ( ( uint32_t ) pvReturn ) & ( uint32_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
;;;236        return pvReturn;
        0x00814f72:    4630        0F      MOV      r0,r6
;;;237    }
        0x00814f74:    e8bd81f0    ....    POP      {r4-r8,pc}
    vTuyaPortFree
;;;238    /*-----------------------------------------------------------*/
;;;239    
;;;240    void vTuyaPortFree( void *pv )
;;;241    {
        0x00814f78:    b570        p.      PUSH     {r4-r6,lr}
        0x00814f7a:    2800        .(      CMP      r0,#0
        0x00814f7c:    d019        ..      BEQ      0x814fb2 ; vTuyaPortFree + 58
        0x00814f7e:    4d23        #M      LDR      r5,[pc,#140] ; [0x81500c] = 0x20919c
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_heap.c (241)
        0x00814f80:    f1a00408    ....    SUB      r4,r0,#8
;;;242        uint8_t *puc = ( uint8_t * ) pv;
;;;243        BlockLink_t *pxLink;
;;;244    
;;;245        if( pv != NULL )
;;;246        {
;;;247            /* The memory being freed will have an BlockLink_t structure immediately
;;;248            before it. */
;;;249            puc -= xHeapStructSize;
;;;250    
;;;251            /* This casting is to keep the compiler from issuing warnings. */
;;;252            pxLink = ( void * ) puc;
;;;253    
;;;254            /* Check the block is actually allocated. */
;;;255            tuyaASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
;;;256            tuyaASSERT( pxLink->pxNextFreeBlock == NULL );
;;;257    
;;;258            if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
        0x00814f84:    3d10        .=      SUBS     r5,r5,#0x10
        0x00814f86:    6860        `h      LDR      r0,[r4,#4]
        0x00814f88:    68e9        .h      LDR      r1,[r5,#0xc]
        0x00814f8a:    4208        .B      TST      r0,r1
        0x00814f8c:    d011        ..      BEQ      0x814fb2 ; vTuyaPortFree + 58
;;;259            {
;;;260                if( pxLink->pxNextFreeBlock == NULL )
        0x00814f8e:    6822        "h      LDR      r2,[r4,#0]
        0x00814f90:    2a00        .*      CMP      r2,#0
        0x00814f92:    d10e        ..      BNE      0x814fb2 ; vTuyaPortFree + 58
;;;261                {
;;;262                    /* The block is being returned to the heap - it is no longer
;;;263                    allocated. */
;;;264                    pxLink->xBlockSize &= ~xBlockAllocatedBit;
        0x00814f94:    4388        .C      BICS     r0,r0,r1
;;;265    
;;;266                    tuya_ble_device_enter_critical();
        0x00814f96:    6060        ``      STR      r0,[r4,#4]
        0x00814f98:    f005fce6    ....    BL       tuya_ble_device_enter_critical ; 0x81a968
;;;267                    {
;;;268                        /* Add this block to the list of free blocks. */
;;;269                        xFreeBytesRemaining += pxLink->xBlockSize;
        0x00814f9c:    6860        `h      LDR      r0,[r4,#4]
        0x00814f9e:    6869        ih      LDR      r1,[r5,#4]
        0x00814fa0:    4408        .D      ADD      r0,r0,r1
;;;270                        tuya_traceFREE( pv, pxLink->xBlockSize );
;;;271                        prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
        0x00814fa2:    6068        h`      STR      r0,[r5,#4]
        0x00814fa4:    4620         F      MOV      r0,r4
        0x00814fa6:    f7ffff79    ..y.    BL       prvInsertBlockIntoFreeList ; 0x814e9c
;;;272                    }
;;;273                    ( void ) tuya_ble_device_exit_critical();
        0x00814faa:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x00814fae:    f005bce1    ....    B.W      tuya_ble_device_exit_critical ; 0x81a974
;;;274                }
;;;275                else
;;;276                {
;;;277                    tuyaCOVERAGE_TEST_MARKER();
;;;278                }
;;;279            }
;;;280            else
;;;281            {
;;;282                tuyaCOVERAGE_TEST_MARKER();
;;;283            }
;;;284        }
;;;285    }
        0x00814fb2:    bd70        p.      POP      {r4-r6,pc}
    xTuyaPortGetFreeHeapSize
;;;286    /*-----------------------------------------------------------*/
;;;287    
;;;288    uint32_t xTuyaPortGetFreeHeapSize( void )
;;;289    {
;;;290        return xFreeBytesRemaining;
        0x00814fb4:    4815        .H      LDR      r0,[pc,#84] ; [0x81500c] = 0x20919c
        0x00814fb6:    3810        .8      SUBS     r0,r0,#0x10
        0x00814fb8:    6840        @h      LDR      r0,[r0,#4]
;;;291    }
        0x00814fba:    4770        pG      BX       lr
    xTuyaPortGetMinimumEverFreeHeapSize
;;;292    /*-----------------------------------------------------------*/
;;;293    
;;;294    uint32_t xTuyaPortGetMinimumEverFreeHeapSize( void )
;;;295    {
;;;296        return xMinimumEverFreeBytesRemaining;
        0x00814fbc:    4813        .H      LDR      r0,[pc,#76] ; [0x81500c] = 0x20919c
        0x00814fbe:    3810        .8      SUBS     r0,r0,#0x10
        0x00814fc0:    6880        .h      LDR      r0,[r0,#8]
;;;297    }
        0x00814fc2:    4770        pG      BX       lr
    vTuyaPortInitialiseBlocks
;;;298    /*-----------------------------------------------------------*/
;;;299    
;;;300    void vTuyaPortInitialiseBlocks( void )
;;;301    {
;;;302        /* This just exists to keep the linker quiet. */
;;;303    }
        0x00814fc4:    4770        pG      BX       lr
    prvHeapInit
        0x00814fc6:    4811        .H      LDR      r0,[pc,#68] ; [0x81500c] = 0x20919c
;;;304    /*-----------------------------------------------------------*/
;;;305    
;;;306    static void prvHeapInit( void )
;;;307    {
;;;308        BlockLink_t *pxFirstFreeBlock;
;;;309        uint8_t *pucAlignedHeap;
;;;310        uint32_t uxAddress;
;;;311        uint32_t xTotalHeapSize = TUYA_BLE_TOTAL_HEAP_SIZE;
        0x00814fc8:    f44f61c0    O..a    MOV      r1,#0x600
;;;312    
;;;313        /* Ensure the heap starts on a correctly aligned boundary. */
;;;314        uxAddress = ( uint32_t ) ucHeap;
        0x00814fcc:    3008        .0      ADDS     r0,r0,#8
;;;315    
;;;316        if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
        0x00814fce:    0742        B.      LSLS     r2,r0,#29
        0x00814fd0:    d007        ..      BEQ      0x814fe2 ; prvHeapInit + 28
;;;317        {
;;;318            uxAddress += ( portBYTE_ALIGNMENT - 1 );
;;;319            uxAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
;;;320            xTotalHeapSize -= uxAddress - ( uint32_t ) ucHeap;
        0x00814fd2:    490e        .I      LDR      r1,[pc,#56] ; [0x81500c] = 0x20919c
        0x00814fd4:    1dc0        ..      ADDS     r0,r0,#7
        0x00814fd6:    f0200007     ...    BIC      r0,r0,#7
        0x00814fda:    3108        .1      ADDS     r1,r1,#8
        0x00814fdc:    1a41        A.      SUBS     r1,r0,r1
        0x00814fde:    f5c161c0    ...a    RSB      r1,r1,#0x600
;;;321        }
;;;322    
;;;323        pucAlignedHeap = ( uint8_t * ) uxAddress;
;;;324    
;;;325        /* xStart is used to hold a pointer to the first item in the list of free
;;;326        blocks.  The void cast is used to prevent compiler warnings. */
;;;327        xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
        0x00814fe2:    4a0a        .J      LDR      r2,[pc,#40] ; [0x81500c] = 0x20919c
;;;328        xStart.xBlockSize = ( uint32_t ) 0;
        0x00814fe4:    2300        .#      MOVS     r3,#0
        0x00814fe6:    4401        .D      ADD      r1,r1,r0
        0x00814fe8:    e9c20300    ....    STRD     r0,r3,[r2,#0]
;;;329    
;;;330        /* pxEnd is used to mark the end of the list of free blocks and is inserted
;;;331        at the end of the heap space. */
;;;332        uxAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
        0x00814fec:    3908        .9      SUBS     r1,r1,#8
        0x00814fee:    3a10        .:      SUBS     r2,r2,#0x10
;;;333        uxAddress -= xHeapStructSize;
;;;334        uxAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
        0x00814ff0:    f0210107    !...    BIC      r1,r1,#7
;;;335        pxEnd = ( void * ) uxAddress;
;;;336        pxEnd->xBlockSize = 0;
        0x00814ff4:    6011        .`      STR      r1,[r2,#0]
;;;337        pxEnd->pxNextFreeBlock = NULL;
        0x00814ff6:    604b        K`      STR      r3,[r1,#4]
;;;338    
;;;339        /* To start with there is a single free block that is sized to take up the
;;;340        entire heap space, minus the space taken by pxEnd. */
;;;341        pxFirstFreeBlock = ( void * ) pucAlignedHeap;
;;;342        pxFirstFreeBlock->xBlockSize = uxAddress - ( uint32_t ) pxFirstFreeBlock;
        0x00814ff8:    600b        .`      STR      r3,[r1,#0]
        0x00814ffa:    1a0b        ..      SUBS     r3,r1,r0
        0x00814ffc:    e9c01300    ....    STRD     r1,r3,[r0,#0]
;;;343        pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
;;;344    
;;;345        /* Only one block exists - and it covers the entire usable heap space. */
;;;346        xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
;;;347        xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
        0x00815000:    6093        .`      STR      r3,[r2,#8]
;;;348    
;;;349        /* Work out the position of the top bit in a size_t variable. */
;;;350        xBlockAllocatedBit = ( ( uint32_t ) 1 ) << ( ( sizeof( uint32_t ) * heapBITS_PER_BYTE ) - 1 );
        0x00815002:    f04f4000    O..@    MOV      r0,#0x80000000
        0x00815006:    6053        S`      STR      r3,[r2,#4]
        0x00815008:    60d0        .`      STR      r0,[r2,#0xc]
;;;351    }
        0x0081500a:    4770        pG      BX       lr
    $d
        0x0081500c:    0020919c    .. .    DCD    2134428
    $t
    .text
    tuya_ble_connect_status_set
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_main.c
;;;58     {
        0x00815010:    b510        ..      PUSH     {r4,lr}
        0x00815012:    4604        .F      MOV      r4,r0
;;;59         tuya_ble_device_enter_critical();
        0x00815014:    f005fca8    ....    BL       tuya_ble_device_enter_critical ; 0x81a968
;;;60         tuya_ble_connect_status = status;
        0x00815018:    48c8        .H      LDR      r0,[pc,#800] ; [0x81533c] = 0x208142
        0x0081501a:    7004        .p      STRB     r4,[r0,#0]
;;;61         tuya_ble_device_exit_critical();
        0x0081501c:    e8bd4010    ...@    POP      {r4,lr}
        0x00815020:    f005bca8    ....    B.W      tuya_ble_device_exit_critical ; 0x81a974
    tuya_ble_connect_status_get
;;;62     
;;;63     }
;;;64     
;;;65     tuya_ble_connect_status_t tuya_ble_connect_status_get(void)
;;;66     {
;;;67         return  tuya_ble_connect_status;
        0x00815024:    48c5        .H      LDR      r0,[pc,#788] ; [0x81533c] = 0x208142
        0x00815026:    7800        .x      LDRB     r0,[r0,#0]
;;;68     }
        0x00815028:    4770        pG      BX       lr
    tuya_ble_event_init
;;;69     
;;;70     
;;;71     
;;;72     
;;;73     
;;;74     #if TUYA_BLE_USE_OS
;;;75     
;;;76     #if TUYA_BLE_SELF_BUILT_TASK
;;;77     void *tuya_ble_task_handle;   //!< APP Task handle
;;;78     void *tuya_ble_queue_handle;  //!< Event queue handle
;;;79     
;;;80     static void tuya_ble_main_task(void *p_param)
;;;81     {
;;;82         tuya_ble_evt_param_t tuya_ble_evt;
;;;83         uint32_t i = 0;
;;;84     
;;;85         while (true)
;;;86         {
;;;87             if (tuya_ble_os_msg_queue_recv(tuya_ble_queue_handle, &tuya_ble_evt, 0xFFFFFFFF) == true)
;;;88             {
;;;89                 tuya_ble_event_process(&tuya_ble_evt);
;;;90     
;;;91             }
;;;92     
;;;93         }
;;;94     
;;;95     }
;;;96     #endif
;;;97     
;;;98     #else
;;;99     
;;;100    void tuya_ble_main_tasks_exec(void)
;;;101    {
;;;102        tuya_sched_execute();
;;;103    }
;;;104    #endif
;;;105    
;;;106    
;;;107    
;;;108    
;;;109    void tuya_ble_event_init(void)
;;;110    {
;;;111    #if TUYA_BLE_USE_OS
;;;112        
;;;113    #if TUYA_BLE_SELF_BUILT_TASK
;;;114        tuya_ble_os_task_create(&tuya_ble_task_handle, "tuya", tuya_ble_main_task, 0, TUYA_BLE_TASK_STACK_SIZE,TUYA_BLE_TASK_PRIORITY);
;;;115        tuya_ble_os_msg_queue_create(&tuya_ble_queue_handle, MAX_NUMBER_OF_TUYA_MESSAGE, sizeof(tuya_ble_evt_param_t));
;;;116    #endif
;;;117        
;;;118    #else
;;;119        tuya_ble_event_queue_init();
;;;120    #endif
;;;121    
;;;122    #if TUYA_BLE_USE_OS
;;;123        for(uint8_t i= 0; i<TUYA_BLE_MAX_CALLBACKS; i++)
        0x0081502a:    2000        .       MOVS     r0,#0
        0x0081502c:    4ac4        .J      LDR      r2,[pc,#784] ; [0x815340] = 0x2097a4
        0x0081502e:    4601        .F      MOV      r1,r0
        0x00815030:    f8421020    B. .    STR      r1,[r2,r0,LSL #2]
        0x00815034:    1c40        @.      ADDS     r0,r0,#1
        0x00815036:    f01000ff    ....    ANDS     r0,r0,#0xff
        0x0081503a:    d0f9        ..      BEQ      0x815030 ; tuya_ble_event_init + 6
;;;124        {
;;;125            m_cb_queue_table[i] = 0;
;;;126        }
;;;127         
;;;128    #else
;;;129        for(uint8_t i= 0; i<TUYA_BLE_MAX_CALLBACKS; i++)
;;;130        {
;;;131            m_cb_table[i] = NULL;
;;;132        }
;;;133    #endif
;;;134    
;;;135    }
        0x0081503c:    4770        pG      BX       lr
    tuya_ble_event_send
;;;136    
;;;137    
;;;138    uint8_t tuya_ble_event_send(tuya_ble_evt_param_t *evt)
;;;139    {
        0x0081503e:    b510        ..      PUSH     {r4,lr}
;;;140    #if TUYA_BLE_USE_OS
;;;141    
;;;142    #if TUYA_BLE_SELF_BUILT_TASK    
;;;143        if(tuya_ble_os_msg_queue_send(tuya_ble_queue_handle, evt, 0))
;;;144        {
;;;145            return 0;
;;;146        }
;;;147        else
;;;148        {
;;;149            return 1;
;;;150        }
;;;151    #else
;;;152       if(tuya_ble_event_queue_send_port(evt,0))
        0x00815040:    2100        .!      MOVS     r1,#0
        0x00815042:    f005fcf0    ....    BL       tuya_ble_event_queue_send_port ; 0x81aa26
        0x00815046:    b108        ..      CBZ      r0,0x81504c ; tuya_ble_event_send + 14
;;;153       {
;;;154           return 0;
        0x00815048:    2000        .       MOVS     r0,#0
        0x0081504a:    bd10        ..      POP      {r4,pc}
;;;155       }
;;;156       else
;;;157       {
;;;158           return 1;
        0x0081504c:    2001        .       MOVS     r0,#1
;;;159       }   
;;;160    #endif
;;;161        
;;;162    #else
;;;163        if(tuya_ble_message_send(evt)==TUYA_BLE_SUCCESS)
;;;164        {
;;;165            return 0;
;;;166        }
;;;167        else
;;;168        {
;;;169            return 1;
;;;170        }
;;;171    #endif
;;;172    }
        0x0081504e:    bd10        ..      POP      {r4,pc}
    tuya_ble_custom_event_send
;;;173    
;;;174    
;;;175    uint8_t tuya_ble_custom_event_send(tuya_ble_custom_evt_t evt)
;;;176    {
        0x00815050:    b510        ..      PUSH     {r4,lr}
;;;177        static tuya_ble_evt_param_t event;
;;;178        uint8_t ret = 0;
;;;179    
;;;180    #if TUYA_BLE_USE_OS
;;;181        event.hdr.event = TUYA_BLE_EVT_CUSTOM;
        0x00815052:    4cbb        .L      LDR      r4,[pc,#748] ; [0x815340] = 0x2097a4
        0x00815054:    230f        .#      MOVS     r3,#0xf
        0x00815056:    1d24        $.      ADDS     r4,r4,#4
        0x00815058:    7023        #p      STRB     r3,[r4,#0]
;;;182        event.custom_evt = evt;
        0x0081505a:    f1040308    ....    ADD      r3,r4,#8
        0x0081505e:    e8830007    ....    STM      r3,{r0-r2}
;;;183        
;;;184    #if TUYA_BLE_SELT_BUILT_TASK    
;;;185        if(tuya_ble_os_msg_queue_send(tuya_ble_queue_handle, &event, 0))
;;;186        {
;;;187            return 0;
;;;188        }
;;;189        else
;;;190        {
;;;191            return 1;
;;;192        }
;;;193    #else
;;;194       if(tuya_ble_event_queue_send_port(&event,0))
        0x00815062:    2100        .!      MOVS     r1,#0
        0x00815064:    4620         F      MOV      r0,r4
        0x00815066:    f005fcde    ....    BL       tuya_ble_event_queue_send_port ; 0x81aa26
        0x0081506a:    b108        ..      CBZ      r0,0x815070 ; tuya_ble_custom_event_send + 32
;;;195       {
;;;196           return 0;
        0x0081506c:    2000        .       MOVS     r0,#0
        0x0081506e:    bd10        ..      POP      {r4,pc}
;;;197       }
;;;198       else
;;;199       {
;;;200           return 1;
        0x00815070:    2001        .       MOVS     r0,#1
;;;201       }   
;;;202    #endif  
;;;203        
;;;204    #else
;;;205        tuya_ble_device_enter_critical();
;;;206        event.hdr.event = TUYA_BLE_EVT_CUSTOM;
;;;207        event.custom_evt = evt;
;;;208    
;;;209        if(tuya_ble_message_send(&event)==TUYA_BLE_SUCCESS)
;;;210        {
;;;211            ret = 0;
;;;212        }
;;;213        else
;;;214        {        
;;;215            ret = 1;
;;;216        }    
;;;217        tuya_ble_device_exit_critical();
;;;218        return ret;
;;;219    #endif
;;;220    }
        0x00815072:    bd10        ..      POP      {r4,pc}
    tuya_ble_inter_event_response
;;;221    
;;;222    
;;;223    
;;;224    tuya_ble_status_t tuya_ble_inter_event_response(tuya_ble_cb_evt_param_t *param)
;;;225    {
        0x00815074:    b510        ..      PUSH     {r4,lr}
;;;226    
;;;227        switch (param->evt)
        0x00815076:    7801        .x      LDRB     r1,[r0,#0]
        0x00815078:    3940        @9      SUBS     r1,r1,#0x40
        0x0081507a:    2909        .)      CMP      r1,#9
        0x0081507c:    d20c        ..      BCS      0x815098 ; tuya_ble_inter_event_response + 36
        0x0081507e:    e8dff001    ....    TBB      [pc,r1]
    $d
        0x00815082:    050b        ..      DCW    1291
        0x00815084:    07070705    ....    DCD    117901061
        0x00815088:    00070b0b    ....    DCD    461579
    $t
;;;228        {
;;;229        case TUYA_BLE_CB_EVT_CONNECTE_STATUS:
;;;230            break;
;;;231        case TUYA_BLE_CB_EVT_DP_WRITE:
;;;232            if(param->dp_write_data.p_data)
        0x0081508c:    6840        @h      LDR      r0,[r0,#4]
        0x0081508e:    e000        ..      B        0x815092 ; tuya_ble_inter_event_response + 30
;;;233            {
;;;234                tuya_ble_free(param->dp_write_data.p_data);
;;;235            }
;;;236            break;
;;;237        case TUYA_BLE_CB_EVT_DP_QUERY:
;;;238            if(param->dp_query_data.p_data)
;;;239            {
;;;240                tuya_ble_free(param->dp_query_data.p_data);
;;;241            }
;;;242            break;
;;;243        case TUYA_BLE_CB_EVT_OTA_DATA:
;;;244            if(param->ota_data.p_data)
;;;245            {
;;;246                tuya_ble_free(param->ota_data.p_data);
;;;247            }
;;;248            break;
;;;249        case TUYA_BLE_CB_EVT_NETWORK_INFO:
;;;250            if(param->network_data.p_data)
;;;251            {
;;;252                tuya_ble_free(param->network_data.p_data);
;;;253            }
;;;254            break;
;;;255        case TUYA_BLE_CB_EVT_WIFI_SSID:
;;;256            if(param->wifi_info_data.p_data)
;;;257            {
;;;258                tuya_ble_free(param->wifi_info_data.p_data);
;;;259            }
;;;260            break;
;;;261        case TUYA_BLE_CB_EVT_TIME_STAMP:
;;;262            break;
;;;263        case TUYA_BLE_CB_EVT_TIME_NORMAL:
;;;264            break;
;;;265        case TUYA_BLE_CB_EVT_DATA_PASSTHROUGH:
;;;266    
;;;267            if(param->ble_passthrough_data.p_data)
        0x00815090:    6880        .h      LDR      r0,[r0,#8]
        0x00815092:    b108        ..      CBZ      r0,0x815098 ; tuya_ble_inter_event_response + 36
;;;268            {
;;;269                tuya_ble_free(param->ble_passthrough_data.p_data);
        0x00815094:    f000f987    ....    BL       tuya_ble_free ; 0x8153a6
;;;270            }
;;;271            break;
;;;272        default:
;;;273            break;
;;;274        }
;;;275    
;;;276        return TUYA_BLE_SUCCESS;
        0x00815098:    2000        .       MOVS     r0,#0
;;;277    }
        0x0081509a:    bd10        ..      POP      {r4,pc}
    tuya_ble_cb_event_send
;;;278    
;;;279    
;;;280    
;;;281    uint8_t tuya_ble_cb_event_send(tuya_ble_cb_evt_param_t *evt)
;;;282    {
        0x0081509c:    4601        .F      MOV      r1,r0
        0x0081509e:    48a8        .H      LDR      r0,[pc,#672] ; [0x815340] = 0x2097a4
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_main.c (282)
        0x008150a0:    b510        ..      PUSH     {r4,lr}
        0x008150a2:    6800        .h      LDR      r0,[r0,#0]
        0x008150a4:    2800        .(      CMP      r0,#0
        0x008150a6:    d004        ..      BEQ      0x8150b2 ; tuya_ble_cb_event_send + 22
;;;283    #if TUYA_BLE_USE_OS
;;;284        if(m_cb_queue_table[0])
;;;285        {
;;;286            if(tuya_ble_os_msg_queue_send((void *)m_cb_queue_table[0], evt, 0))
        0x008150a8:    2200        ."      MOVS     r2,#0
        0x008150aa:    f005fcaa    ....    BL       tuya_ble_os_msg_queue_send ; 0x81aa02
        0x008150ae:    b108        ..      CBZ      r0,0x8150b4 ; tuya_ble_cb_event_send + 24
;;;287            {
;;;288                return 0;
        0x008150b0:    2000        .       MOVS     r0,#0
        0x008150b2:    bd10        ..      POP      {r4,pc}
;;;289            }
;;;290            else
;;;291            {
;;;292                return 1;
        0x008150b4:    2001        .       MOVS     r0,#1
;;;293            }
;;;294        }
;;;295    #else
;;;296        tuya_ble_callback_t fun;
;;;297        if(m_cb_table[0])
;;;298        {
;;;299            fun = m_cb_table[0];
;;;300            fun(evt);
;;;301            tuya_ble_inter_event_response(evt);
;;;302        }
;;;303    #endif
;;;304        return 0;
;;;305    
;;;306    }
        0x008150b6:    bd10        ..      POP      {r4,pc}
    tuya_ble_get_adv_connect_request_bit_status
;;;307    
;;;308    
;;;309    #if (TUYA_BLE_PROTOCOL_VERSION_HIGN==3)
;;;310    
;;;311    /** @brief  GAP - Advertisement data (max size = 31 bytes, best kept short to conserve power) */
;;;312    
;;;313    #define TUYA_BLE_ADV_DATA_LEN  (12+TUYA_BLE_PRODUCT_ID_MAX_LEN)
;;;314    
;;;315    static const uint8_t adv_data_const[TUYA_BLE_ADV_DATA_LEN] =
;;;316    {
;;;317        0x02,
;;;318        0x01,
;;;319        0x06,
;;;320        0x03,
;;;321        0x02,
;;;322        0x01, 0xA2,
;;;323        0x14,
;;;324        0x16,
;;;325        0x01, 0xA2,
;;;326        0x00,         //id type 00-pid 01-product key
;;;327        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
;;;328    };
;;;329    
;;;330    
;;;331    #define TUYA_BLE_SCAN_RSP_DATA_LEN  30
;;;332    static const uint8_t scan_rsp_data_const[TUYA_BLE_SCAN_RSP_DATA_LEN] =
;;;333    {
;;;334        0x03,
;;;335        0x09,
;;;336        0x54, 0x59,
;;;337        0x19,             // length 
;;;338        0xFF,
;;;339        0xD0,
;;;340        0x07,
;;;341        0x00, //bond flag bit7 （8）
;;;342        0x03, //protocol version
;;;343        0x01, //Encry Mode （10）
;;;344        0x00,0x00, //communication way bit0-mesh bit1-wifi bit2-zigbee bit3-NB
;;;345        0x00, //data type
;;;346        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
;;;347    };
;;;348    
;;;349    static uint8_t adv_data[TUYA_BLE_ADV_DATA_LEN];
;;;350    static uint8_t scan_rsp_data[TUYA_BLE_SCAN_RSP_DATA_LEN];
;;;351    
;;;352    uint8_t tuya_ble_get_adv_connect_request_bit_status(void)
;;;353    {
;;;354        return (scan_rsp_data[8]&0x01);
        0x008150b8:    48a2        .H      LDR      r0,[pc,#648] ; [0x815344] = 0x2099c4
        0x008150ba:    7a00        .z      LDRB     r0,[r0,#8]
        0x008150bc:    f0000001    ....    AND      r0,r0,#1
;;;355    }
        0x008150c0:    4770        pG      BX       lr
    tuya_ble_adv_change
;;;356    
;;;357    void tuya_ble_adv_change(void)
;;;358    {
        0x008150c2:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x008150c6:    489f        .H      LDR      r0,[pc,#636] ; [0x815344] = 0x2099c4
        0x008150c8:    b08a        ..      SUB      sp,sp,#0x28
;;;359        uint8_t *aes_buf = NULL;
;;;360        uint8_t aes_key[16];
;;;361        uint8_t encry_device_id[DEVICE_ID_LEN];
;;;362    
;;;363        memcpy(adv_data,adv_data_const,TUYA_BLE_ADV_DATA_LEN);
        0x008150ca:    221c        ."      MOVS     r2,#0x1c
        0x008150cc:    499e        .I      LDR      r1,[pc,#632] ; [0x815348] = 0x81c2ca
        0x008150ce:    381c        .8      SUBS     r0,r0,#0x1c
        0x008150d0:    f444f6e3    D...    BL       __aeabi_memcpy ; 0x59e9a
;;;364        memcpy(&scan_rsp_data,scan_rsp_data_const,TUYA_BLE_SCAN_RSP_DATA_LEN);
        0x008150d4:    499c        .I      LDR      r1,[pc,#624] ; [0x815348] = 0x81c2ca
        0x008150d6:    221e        ."      MOVS     r2,#0x1e
        0x008150d8:    311c        .1      ADDS     r1,r1,#0x1c
        0x008150da:    489a        .H      LDR      r0,[pc,#616] ; [0x815344] = 0x2099c4
        0x008150dc:    f444f6dd    D...    BL       __aeabi_memcpy ; 0x59e9a
;;;365    
;;;366        adv_data[7] = 4+tuya_ble_current_para.pid_len;
        0x008150e0:    4d97        .M      LDR      r5,[pc,#604] ; [0x815340] = 0x2097a4
        0x008150e2:    2303        .#      MOVS     r3,#3
        0x008150e4:    3530        05      ADDS     r5,r5,#0x30
        0x008150e6:    f50571ea    ...q    ADD      r1,r5,#0x1d4
        0x008150ea:    f89521c1    ...!    LDRB     r2,[r5,#0x1c1]
        0x008150ee:    2600        .&      MOVS     r6,#0
        0x008150f0:    1d10        ..      ADDS     r0,r2,#4
        0x008150f2:    71c8        .q      STRB     r0,[r1,#7]
;;;367        adv_data[11] = tuya_ble_current_para.pid_type;
        0x008150f4:    f89501c0    ....    LDRB     r0,[r5,#0x1c0]
        0x008150f8:    72c8        .r      STRB     r0,[r1,#0xb]
;;;368        
;;;369        if(TUYA_BLE_DEVICE_SHARED)
;;;370        {
;;;371            scan_rsp_data[8] |=0x02 ;
;;;372        }
;;;373        else
;;;374        {
;;;375            scan_rsp_data[8] &=(~0x02);
        0x008150fa:    4892        .H      LDR      r0,[pc,#584] ; [0x815344] = 0x2099c4
        0x008150fc:    af05        ..      ADD      r7,sp,#0x14
        0x008150fe:    f1000a0e    ....    ADD      r10,r0,#0xe
        0x00815102:    7a01        .z      LDRB     r1,[r0,#8]
        0x00815104:    f2a019d5    ....    SUB      r9,r0,#0x1d5
;;;376        }
;;;377            
;;;378        scan_rsp_data[8] &=(~0x01);
        0x00815108:    f0210103    !...    BIC      r1,r1,#3
        0x0081510c:    7201        .r      STRB     r1,[r0,#8]
;;;379    
;;;380        scan_rsp_data[9] = TUYA_BLE_PROTOCOL_VERSION_HIGN;
        0x0081510e:    7243        Cr      STRB     r3,[r0,#9]
;;;381    
;;;382        scan_rsp_data[10] = TUYA_BLE_SECURE_CONNECTION_TYPE;
        0x00815110:    7286        .r      STRB     r6,[r0,#0xa]
;;;383    
;;;384        scan_rsp_data[11] = TUYA_BLE_DEVICE_COMMUNICATION_ABILITY>>8;
        0x00815112:    72c6        .r      STRB     r6,[r0,#0xb]
;;;385        scan_rsp_data[12] = TUYA_BLE_DEVICE_COMMUNICATION_ABILITY;
        0x00815114:    2301        .#      MOVS     r3,#1
        0x00815116:    7303        .s      STRB     r3,[r0,#0xc]
;;;386    
;;;387        if(tuya_ble_current_para.sys_settings.bound_flag == 1)
        0x00815118:    f895413c    ..<A    LDRB     r4,[r5,#0x13c]
        0x0081511c:    f1a00310    ....    SUB      r3,r0,#0x10
        0x00815120:    4698        .F      MOV      r8,r3
        0x00815122:    2c01        .,      CMP      r4,#1
        0x00815124:    d00f        ..      BEQ      0x815146 ; tuya_ble_adv_change + 132
        0x00815126:    f0210180    !...    BIC      r1,r1,#0x80
        0x0081512a:    7201        .r      STRB     r1,[r0,#8]
        0x0081512c:    f1a0012e    ....    SUB      r1,r0,#0x2e
        0x00815130:    460c        .F      MOV      r4,r1
        0x00815132:    4618        .F      MOV      r0,r3
        0x00815134:    f444f6b1    D...    BL       __aeabi_memcpy ; 0x59e9a
        0x00815138:    9700        ..      STR      r7,[sp,#0]
        0x0081513a:    f89511c1    ....    LDRB     r1,[r5,#0x1c1]
        0x0081513e:    2310        .#      MOVS     r3,#0x10
        0x00815140:    464a        JF      MOV      r2,r9
        0x00815142:    4620         F      MOV      r0,r4
        0x00815144:    e03b        ;.      B        0x8151be ; tuya_ble_adv_change + 252
;;;388        {
;;;389            scan_rsp_data[8] |=0x80 ;
        0x00815146:    f0410180    A...    ORR      r1,r1,#0x80
        0x0081514a:    7201        .r      STRB     r1,[r0,#8]
;;;390            //
;;;391            memcpy(aes_key,tuya_ble_current_para.sys_settings.login_key,LOGIN_KEY_LEN);
        0x0081514c:    487f        .H      LDR      r0,[pc,#508] ; [0x81534c] = 0x2098a4
        0x0081514e:    f8d0102a    ..*.    LDR      r1,[r0,#0x2a]
        0x00815152:    9101        ..      STR      r1,[sp,#4]
        0x00815154:    8dc0        ..      LDRH     r0,[r0,#0x2e]
        0x00815156:    f8ad0008    ....    STRH     r0,[sp,#8]
;;;392            memcpy(aes_key+LOGIN_KEY_LEN,tuya_ble_current_para.auth_settings.device_id,16-LOGIN_KEY_LEN);
        0x0081515a:    4879        yH      LDR      r0,[pc,#484] ; [0x815340] = 0x2097a4
        0x0081515c:    f8501f4b    P.K.    LDR      r1,[r0,#0x4b]!
        0x00815160:    f8cd100a    ....    STR      r1,[sp,#0xa]
        0x00815164:    6841        Ah      LDR      r1,[r0,#4]
        0x00815166:    f8cd100e    ....    STR      r1,[sp,#0xe]
        0x0081516a:    8900        ..      LDRH     r0,[r0,#8]
        0x0081516c:    f8ad0012    ....    STRH     r0,[sp,#0x12]
;;;393    
;;;394            aes_buf = tuya_ble_malloc(200);
        0x00815170:    20c8        .       MOVS     r0,#0xc8
        0x00815172:    f000f90d    ....    BL       tuya_ble_malloc ; 0x815390
        0x00815176:    0004        ..      MOVS     r4,r0
;;;395    
;;;396            if(aes_buf==NULL)
        0x00815178:    d03e        >.      BEQ      0x8151f8 ; tuya_ble_adv_change + 310
;;;397            {
;;;398                return;
;;;399            }
;;;400            else
;;;401            {
;;;402                memset(aes_buf,0,200);
        0x0081517a:    21c8        .!      MOVS     r1,#0xc8
        0x0081517c:    f444f74e    D.N.    BL       __aeabi_memclr ; 0x5a01c
;;;403            }
;;;404    
;;;405            tuya_ble_encrypt_old_with_key(aes_key,tuya_ble_current_para.auth_settings.device_id,DEVICE_ID_LEN,aes_buf);
        0x00815180:    4623        #F      MOV      r3,r4
        0x00815182:    2210        ."      MOVS     r2,#0x10
        0x00815184:    4649        IF      MOV      r1,r9
        0x00815186:    a801        ..      ADD      r0,sp,#4
        0x00815188:    f006fd1b    ....    BL       tuya_ble_encrypt_old_with_key ; 0x81bbc2
;;;406    
;;;407            memcpy(&adv_data[12],(uint8_t *)(aes_buf+1),tuya_ble_current_para.pid_len);
        0x0081518c:    f89521c1    ...!    LDRB     r2,[r5,#0x1c1]
        0x00815190:    1c61        a.      ADDS     r1,r4,#1
        0x00815192:    4640        @F      MOV      r0,r8
        0x00815194:    f444f681    D...    BL       __aeabi_memcpy ; 0x59e9a
;;;408    
;;;409            tuya_ble_free(aes_buf);
        0x00815198:    4620         F      MOV      r0,r4
        0x0081519a:    f000f904    ....    BL       tuya_ble_free ; 0x8153a6
;;;410    
;;;411            memset(aes_key,0,sizeof(aes_key));
        0x0081519e:    9601        ..      STR      r6,[sp,#4]
        0x008151a0:    9602        ..      STR      r6,[sp,#8]
        0x008151a2:    9603        ..      STR      r6,[sp,#0xc]
;;;412            memcpy(aes_key,&adv_data[12],tuya_ble_current_para.pid_len);
        0x008151a4:    9604        ..      STR      r6,[sp,#0x10]
        0x008151a6:    f89521c1    ...!    LDRB     r2,[r5,#0x1c1]
        0x008151aa:    4641        AF      MOV      r1,r8
        0x008151ac:    a801        ..      ADD      r0,sp,#4
        0x008151ae:    f444f6fb    D...    BL       __aeabi_memcpy4 ; 0x59fa8
;;;413    
;;;414            tuya_ble_device_id_encrypt(aes_key,tuya_ble_current_para.pid_len,tuya_ble_current_para.auth_settings.device_id,DEVICE_ID_LEN,encry_device_id);
        0x008151b2:    9700        ..      STR      r7,[sp,#0]
        0x008151b4:    f89511c1    ....    LDRB     r1,[r5,#0x1c1]
        0x008151b8:    2310        .#      MOVS     r3,#0x10
        0x008151ba:    464a        JF      MOV      r2,r9
        0x008151bc:    a801        ..      ADD      r0,sp,#4
        0x008151be:    f006fcb5    ....    BL       tuya_ble_device_id_encrypt ; 0x81bb2c
;;;415    
;;;416            memcpy(&scan_rsp_data[14],encry_device_id,DEVICE_ID_LEN);
        0x008151c2:    2210        ."      MOVS     r2,#0x10
        0x008151c4:    a905        ..      ADD      r1,sp,#0x14
        0x008151c6:    4650        PF      MOV      r0,r10
        0x008151c8:    f444f667    D.g.    BL       __aeabi_memcpy ; 0x59e9a
;;;417    
;;;418        }
;;;419        else
;;;420        {
;;;421            scan_rsp_data[8] &=(~0x80);
;;;422    
;;;423            memcpy(&adv_data[12],tuya_ble_current_para.pid,tuya_ble_current_para.pid_len);
;;;424            tuya_ble_device_id_encrypt(tuya_ble_current_para.pid,tuya_ble_current_para.pid_len,tuya_ble_current_para.auth_settings.device_id,DEVICE_ID_LEN,encry_device_id);
;;;425    
;;;426            memcpy(&scan_rsp_data[14],encry_device_id,DEVICE_ID_LEN);
;;;427        }
;;;428        TUYA_BLE_LOG_INFO("adv data changed ,current bound flag = %d",tuya_ble_current_para.sys_settings.bound_flag);
        0x008151cc:    a060        `.      ADR      r0,{pc}+0x184 ; 0x815350
        0x008151ce:    f005fcec    ....    BL       get_args ; 0x81abaa
        0x008151d2:    4602        .F      MOV      r2,r0
        0x008151d4:    f895313c    ..<1    LDRB     r3,[r5,#0x13c]
        0x008151d8:    496b        kI      LDR      r1,[pc,#428] ; [0x815388] = 0x8803930
        0x008151da:    486c        lH      LDR      r0,[pc,#432] ; [0x81538c] = 0x21103002
        0x008151dc:    f7f2dc3f    ..?.    BL       log_buffer ; 0x7a5e
;;;429        tuya_ble_gap_advertising_adv_data_update(adv_data,tuya_ble_current_para.pid_len+12);
        0x008151e0:    f89501c1    ....    LDRB     r0,[r5,#0x1c1]
        0x008151e4:    300c        .0      ADDS     r0,r0,#0xc
        0x008151e6:    b2c1        ..      UXTB     r1,r0
        0x008151e8:    4856        VH      LDR      r0,[pc,#344] ; [0x815344] = 0x2099c4
        0x008151ea:    381c        .8      SUBS     r0,r0,#0x1c
        0x008151ec:    f005fb2c    ..,.    BL       tuya_ble_gap_advertising_adv_data_update ; 0x81a848
;;;430        tuya_ble_gap_advertising_scan_rsp_data_update(scan_rsp_data,sizeof(scan_rsp_data));
        0x008151f0:    211e        .!      MOVS     r1,#0x1e
        0x008151f2:    4854        TH      LDR      r0,[pc,#336] ; [0x815344] = 0x2099c4
        0x008151f4:    f005fb32    ..2.    BL       tuya_ble_gap_advertising_scan_rsp_data_update ; 0x81a85c
;;;431    
;;;432    }
        0x008151f8:    b00a        ..      ADD      sp,sp,#0x28
        0x008151fa:    e8bd87f0    ....    POP      {r4-r10,pc}
    tuya_ble_adv_change_with_connecting_request
;;;433    
;;;434    void tuya_ble_adv_change_with_connecting_request(void)
;;;435    {
        0x008151fe:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x00815202:    4850        PH      LDR      r0,[pc,#320] ; [0x815344] = 0x2099c4
        0x00815204:    b08a        ..      SUB      sp,sp,#0x28
;;;436        uint8_t *aes_buf = NULL;
;;;437        uint8_t aes_key[16];
;;;438        uint8_t encry_device_id[DEVICE_ID_LEN];
;;;439    
;;;440        memcpy(adv_data,adv_data_const,TUYA_BLE_ADV_DATA_LEN);
        0x00815206:    221c        ."      MOVS     r2,#0x1c
        0x00815208:    494f        OI      LDR      r1,[pc,#316] ; [0x815348] = 0x81c2ca
        0x0081520a:    381c        .8      SUBS     r0,r0,#0x1c
        0x0081520c:    f444f645    D.E.    BL       __aeabi_memcpy ; 0x59e9a
;;;441        memcpy(&scan_rsp_data,scan_rsp_data_const,TUYA_BLE_SCAN_RSP_DATA_LEN);
        0x00815210:    494d        MI      LDR      r1,[pc,#308] ; [0x815348] = 0x81c2ca
        0x00815212:    221e        ."      MOVS     r2,#0x1e
        0x00815214:    311c        .1      ADDS     r1,r1,#0x1c
        0x00815216:    484b        KH      LDR      r0,[pc,#300] ; [0x815344] = 0x2099c4
        0x00815218:    f444f63f    D.?.    BL       __aeabi_memcpy ; 0x59e9a
;;;442    
;;;443        adv_data[7] = 4+tuya_ble_current_para.pid_len;
        0x0081521c:    4d48        HM      LDR      r5,[pc,#288] ; [0x815340] = 0x2097a4
        0x0081521e:    2303        .#      MOVS     r3,#3
        0x00815220:    3530        05      ADDS     r5,r5,#0x30
        0x00815222:    f50571ea    ...q    ADD      r1,r5,#0x1d4
        0x00815226:    f89521c1    ...!    LDRB     r2,[r5,#0x1c1]
        0x0081522a:    2600        .&      MOVS     r6,#0
        0x0081522c:    1d10        ..      ADDS     r0,r2,#4
        0x0081522e:    71c8        .q      STRB     r0,[r1,#7]
;;;444        adv_data[11] = tuya_ble_current_para.pid_type;
        0x00815230:    f89501c0    ....    LDRB     r0,[r5,#0x1c0]
        0x00815234:    72c8        .r      STRB     r0,[r1,#0xb]
;;;445    
;;;446        if(TUYA_BLE_DEVICE_SHARED)
;;;447        {
;;;448            scan_rsp_data[8] |=0x02 ;
;;;449        }
;;;450        else
;;;451        {
;;;452            scan_rsp_data[8] &=(~0x02);
        0x00815236:    4843        CH      LDR      r0,[pc,#268] ; [0x815344] = 0x2099c4
        0x00815238:    af05        ..      ADD      r7,sp,#0x14
        0x0081523a:    f1000a0e    ....    ADD      r10,r0,#0xe
        0x0081523e:    7a01        .z      LDRB     r1,[r0,#8]
        0x00815240:    f2a019d5    ....    SUB      r9,r0,#0x1d5
        0x00815244:    f0210102    !...    BIC      r1,r1,#2
;;;453        }
;;;454        
;;;455        scan_rsp_data[8] |= 0x01 ;
        0x00815248:    f0410101    A...    ORR      r1,r1,#1
        0x0081524c:    7201        .r      STRB     r1,[r0,#8]
;;;456        
;;;457        scan_rsp_data[9] = TUYA_BLE_PROTOCOL_VERSION_HIGN;
        0x0081524e:    7243        Cr      STRB     r3,[r0,#9]
;;;458    
;;;459        scan_rsp_data[10] = TUYA_BLE_SECURE_CONNECTION_TYPE;
        0x00815250:    7286        .r      STRB     r6,[r0,#0xa]
;;;460    
;;;461        scan_rsp_data[11] = TUYA_BLE_DEVICE_COMMUNICATION_ABILITY>>8;
        0x00815252:    72c6        .r      STRB     r6,[r0,#0xb]
;;;462        scan_rsp_data[12] = TUYA_BLE_DEVICE_COMMUNICATION_ABILITY;
        0x00815254:    2301        .#      MOVS     r3,#1
        0x00815256:    7303        .s      STRB     r3,[r0,#0xc]
;;;463    
;;;464        if(tuya_ble_current_para.sys_settings.bound_flag == 1)
        0x00815258:    f895413c    ..<A    LDRB     r4,[r5,#0x13c]
        0x0081525c:    f1a00310    ....    SUB      r3,r0,#0x10
        0x00815260:    4698        .F      MOV      r8,r3
        0x00815262:    2c01        .,      CMP      r4,#1
        0x00815264:    d00f        ..      BEQ      0x815286 ; tuya_ble_adv_change_with_connecting_request + 136
        0x00815266:    f0210180    !...    BIC      r1,r1,#0x80
        0x0081526a:    7201        .r      STRB     r1,[r0,#8]
        0x0081526c:    f1a0012e    ....    SUB      r1,r0,#0x2e
        0x00815270:    460c        .F      MOV      r4,r1
        0x00815272:    4618        .F      MOV      r0,r3
        0x00815274:    f444f611    D...    BL       __aeabi_memcpy ; 0x59e9a
        0x00815278:    9700        ..      STR      r7,[sp,#0]
        0x0081527a:    f89511c1    ....    LDRB     r1,[r5,#0x1c1]
        0x0081527e:    2310        .#      MOVS     r3,#0x10
        0x00815280:    464a        JF      MOV      r2,r9
        0x00815282:    4620         F      MOV      r0,r4
        0x00815284:    e03b        ;.      B        0x8152fe ; tuya_ble_adv_change_with_connecting_request + 256
;;;465        {
;;;466            scan_rsp_data[8] |=0x80 ;
        0x00815286:    f0410180    A...    ORR      r1,r1,#0x80
        0x0081528a:    7201        .r      STRB     r1,[r0,#8]
;;;467            //
;;;468            memcpy(aes_key,tuya_ble_current_para.sys_settings.login_key,LOGIN_KEY_LEN);
        0x0081528c:    482f        /H      LDR      r0,[pc,#188] ; [0x81534c] = 0x2098a4
        0x0081528e:    f8d0102a    ..*.    LDR      r1,[r0,#0x2a]
        0x00815292:    9101        ..      STR      r1,[sp,#4]
        0x00815294:    8dc0        ..      LDRH     r0,[r0,#0x2e]
        0x00815296:    f8ad0008    ....    STRH     r0,[sp,#8]
;;;469            memcpy(aes_key+LOGIN_KEY_LEN,tuya_ble_current_para.auth_settings.device_id,16-LOGIN_KEY_LEN);
        0x0081529a:    4829        )H      LDR      r0,[pc,#164] ; [0x815340] = 0x2097a4
        0x0081529c:    f8501f4b    P.K.    LDR      r1,[r0,#0x4b]!
        0x008152a0:    f8cd100a    ....    STR      r1,[sp,#0xa]
        0x008152a4:    6841        Ah      LDR      r1,[r0,#4]
        0x008152a6:    f8cd100e    ....    STR      r1,[sp,#0xe]
        0x008152aa:    8900        ..      LDRH     r0,[r0,#8]
        0x008152ac:    f8ad0012    ....    STRH     r0,[sp,#0x12]
;;;470    
;;;471            aes_buf = tuya_ble_malloc(200);
        0x008152b0:    20c8        .       MOVS     r0,#0xc8
        0x008152b2:    f000f86d    ..m.    BL       tuya_ble_malloc ; 0x815390
        0x008152b6:    0004        ..      MOVS     r4,r0
;;;472    
;;;473            if(aes_buf==NULL)
        0x008152b8:    d09e        ..      BEQ      0x8151f8 ; tuya_ble_adv_change + 310
;;;474            {
;;;475                return;
;;;476            }
;;;477            else
;;;478            {
;;;479                memset(aes_buf,0,200);
        0x008152ba:    21c8        .!      MOVS     r1,#0xc8
        0x008152bc:    f444f6ae    D...    BL       __aeabi_memclr ; 0x5a01c
;;;480            }
;;;481    
;;;482            tuya_ble_encrypt_old_with_key(aes_key,tuya_ble_current_para.auth_settings.device_id,DEVICE_ID_LEN,aes_buf);
        0x008152c0:    4623        #F      MOV      r3,r4
        0x008152c2:    2210        ."      MOVS     r2,#0x10
        0x008152c4:    4649        IF      MOV      r1,r9
        0x008152c6:    a801        ..      ADD      r0,sp,#4
        0x008152c8:    f006fc7b    ..{.    BL       tuya_ble_encrypt_old_with_key ; 0x81bbc2
;;;483    
;;;484            memcpy(&adv_data[12],(uint8_t *)(aes_buf+1),tuya_ble_current_para.pid_len);
        0x008152cc:    f89521c1    ...!    LDRB     r2,[r5,#0x1c1]
        0x008152d0:    1c61        a.      ADDS     r1,r4,#1
        0x008152d2:    4640        @F      MOV      r0,r8
        0x008152d4:    f444f5e1    D...    BL       __aeabi_memcpy ; 0x59e9a
;;;485    
;;;486            tuya_ble_free(aes_buf);
        0x008152d8:    4620         F      MOV      r0,r4
        0x008152da:    f000f864    ..d.    BL       tuya_ble_free ; 0x8153a6
;;;487    
;;;488            memset(aes_key,0,sizeof(aes_key));
        0x008152de:    9601        ..      STR      r6,[sp,#4]
        0x008152e0:    9602        ..      STR      r6,[sp,#8]
        0x008152e2:    9603        ..      STR      r6,[sp,#0xc]
;;;489            memcpy(aes_key,&adv_data[12],tuya_ble_current_para.pid_len);
        0x008152e4:    9604        ..      STR      r6,[sp,#0x10]
        0x008152e6:    f89521c1    ...!    LDRB     r2,[r5,#0x1c1]
        0x008152ea:    4641        AF      MOV      r1,r8
        0x008152ec:    a801        ..      ADD      r0,sp,#4
        0x008152ee:    f444f65b    D.[.    BL       __aeabi_memcpy4 ; 0x59fa8
;;;490    
;;;491            tuya_ble_device_id_encrypt(aes_key,tuya_ble_current_para.pid_len,tuya_ble_current_para.auth_settings.device_id,DEVICE_ID_LEN,encry_device_id);
        0x008152f2:    9700        ..      STR      r7,[sp,#0]
        0x008152f4:    f89511c1    ....    LDRB     r1,[r5,#0x1c1]
        0x008152f8:    2310        .#      MOVS     r3,#0x10
        0x008152fa:    464a        JF      MOV      r2,r9
        0x008152fc:    a801        ..      ADD      r0,sp,#4
        0x008152fe:    f006fc15    ....    BL       tuya_ble_device_id_encrypt ; 0x81bb2c
;;;492    
;;;493            memcpy(&scan_rsp_data[14],encry_device_id,DEVICE_ID_LEN);
        0x00815302:    2210        ."      MOVS     r2,#0x10
        0x00815304:    a905        ..      ADD      r1,sp,#0x14
        0x00815306:    4650        PF      MOV      r0,r10
        0x00815308:    f444f5c7    D...    BL       __aeabi_memcpy ; 0x59e9a
;;;494    
;;;495        }
;;;496        else
;;;497        {
;;;498            scan_rsp_data[8] &=(~0x80);
;;;499    
;;;500            memcpy(&adv_data[12],tuya_ble_current_para.pid,tuya_ble_current_para.pid_len);
;;;501            tuya_ble_device_id_encrypt(tuya_ble_current_para.pid,tuya_ble_current_para.pid_len,tuya_ble_current_para.auth_settings.device_id,DEVICE_ID_LEN,encry_device_id);
;;;502    
;;;503    
;;;504            memcpy(&scan_rsp_data[14],encry_device_id,DEVICE_ID_LEN);
;;;505        }
;;;506        TUYA_BLE_LOG_INFO("adv data changed ,current bound flag = %d",tuya_ble_current_para.sys_settings.bound_flag);
        0x0081530c:    a010        ..      ADR      r0,{pc}+0x44 ; 0x815350
        0x0081530e:    f005fc4c    ..L.    BL       get_args ; 0x81abaa
        0x00815312:    491d        .I      LDR      r1,[pc,#116] ; [0x815388] = 0x8803930
        0x00815314:    4602        .F      MOV      r2,r0
        0x00815316:    f895313c    ..<1    LDRB     r3,[r5,#0x13c]
        0x0081531a:    3138        81      ADDS     r1,r1,#0x38
        0x0081531c:    481b        .H      LDR      r0,[pc,#108] ; [0x81538c] = 0x21103002
        0x0081531e:    f7f2db9e    ....    BL       log_buffer ; 0x7a5e
;;;507        tuya_ble_gap_advertising_adv_data_update(adv_data,tuya_ble_current_para.pid_len+12);
        0x00815322:    f89501c1    ....    LDRB     r0,[r5,#0x1c1]
        0x00815326:    300c        .0      ADDS     r0,r0,#0xc
        0x00815328:    b2c1        ..      UXTB     r1,r0
        0x0081532a:    4806        .H      LDR      r0,[pc,#24] ; [0x815344] = 0x2099c4
        0x0081532c:    381c        .8      SUBS     r0,r0,#0x1c
        0x0081532e:    f005fa8b    ....    BL       tuya_ble_gap_advertising_adv_data_update ; 0x81a848
;;;508        tuya_ble_gap_advertising_scan_rsp_data_update(scan_rsp_data,sizeof(scan_rsp_data));
        0x00815332:    211e        .!      MOVS     r1,#0x1e
        0x00815334:    4803        .H      LDR      r0,[pc,#12] ; [0x815344] = 0x2099c4
        0x00815336:    f005fa91    ....    BL       tuya_ble_gap_advertising_scan_rsp_data_update ; 0x81a85c
;;;509    
;;;510    }
        0x0081533a:    e75d        ].      B        0x8151f8 ; tuya_ble_adv_change + 310
    $d
        0x0081533c:    00208142    B. .    DCD    2130242
        0x00815340:    002097a4    .. .    DCD    2135972
        0x00815344:    002099c4    .. .    DCD    2136516
        0x00815348:    0081c2ca    ....    DCD    8504010
        0x0081534c:    002098a4    .. .    DCD    2136228
        0x00815350:    205d495b    [I]     DCD    542984539
        0x00815354:    41595554    TUYA    DCD    1096373588
        0x00815358:    454c425f    _BLE    DCD    1162625631
        0x0081535c:    6461203a    : ad    DCD    1684086842
        0x00815360:    61642076    v da    DCD    1633951862
        0x00815364:    63206174    ta c    DCD    1663066484
        0x00815368:    676e6168    hang    DCD    1735287144
        0x0081536c:    2c206465    ed ,    DCD    740320357
        0x00815370:    72727563    curr    DCD    1920103779
        0x00815374:    20746e65    ent     DCD    544501349
        0x00815378:    6e756f62    boun    DCD    1853189986
        0x0081537c:    6c662064    d fl    DCD    1818632292
        0x00815380:    3d206761    ag =    DCD    1025533793
        0x00815384:    00642520     %d.    DCD    6563104
        0x00815388:    08803930    09..    DCD    142620976
        0x0081538c:    21103002    .0.!    DCD    554708994
    $t
    .text
    tuya_ble_malloc
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_mem.c
;;;42     {
        0x00815390:    b570        p.      PUSH     {r4-r6,lr}
        0x00815392:    4605        .F      MOV      r5,r0
;;;43         uint8_t *ptr = pvTuyaPortMalloc(size);
        0x00815394:    f7fffda6    ....    BL       pvTuyaPortMalloc ; 0x814ee4
        0x00815398:    0004        ..      MOVS     r4,r0
;;;44         if(ptr)
        0x0081539a:    d002        ..      BEQ      0x8153a2 ; tuya_ble_malloc + 18
;;;45         {
;;;46             memset(ptr,0x0,size);//allocate buffer need init
        0x0081539c:    4629        )F      MOV      r1,r5
        0x0081539e:    f444f63d    D.=.    BL       __aeabi_memclr ; 0x5a01c
;;;47         }
;;;48         return ptr;
        0x008153a2:    4620         F      MOV      r0,r4
;;;49     }
        0x008153a4:    bd70        p.      POP      {r4-r6,pc}
    tuya_ble_free
;;;50     
;;;51     
;;;52     /*
;;;53      *@brief    Free a memory block that had been allocated.
;;;54      *@param[in] ptr    The address of memory block being freed.
;;;55      *        
;;;56      *@note     
;;;57      *           
;;;58      * */
;;;59     tuya_ble_status_t tuya_ble_free(uint8_t *ptr)
;;;60     {
        0x008153a6:    b510        ..      PUSH     {r4,lr}
        0x008153a8:    2800        .(      CMP      r0,#0
        0x008153aa:    d002        ..      BEQ      0x8153b2 ; tuya_ble_free + 12
;;;61         if(ptr==NULL) 
;;;62             return TUYA_BLE_SUCCESS;
;;;63     
;;;64         vTuyaPortFree(ptr);
        0x008153ac:    f7fffde4    ....    BL       vTuyaPortFree ; 0x814f78
;;;65         return TUYA_BLE_SUCCESS;
        0x008153b0:    2000        .       MOVS     r0,#0
;;;66     }
        0x008153b2:    bd10        ..      POP      {r4,pc}
    tuya_ble_calloc_n
;;;67     
;;;68     
;;;69     /*
;;;70      *@brief    
;;;71      *@param    
;;;72      *        
;;;73      *@note     
;;;74      *           
;;;75      * */
;;;76     void *tuya_ble_calloc_n(uint32_t n,uint32_t size)
;;;77     {
        0x008153b4:    b570        p.      PUSH     {r4-r6,lr}
;;;78         void *ptr = NULL;
;;;79         ptr = pvTuyaPortMalloc(n * size);
        0x008153b6:    4348        HC      MULS     r0,r1,r0
        0x008153b8:    4604        .F      MOV      r4,r0
        0x008153ba:    f7fffd93    ....    BL       pvTuyaPortMalloc ; 0x814ee4
        0x008153be:    0005        ..      MOVS     r5,r0
;;;80         if(ptr != NULL)
        0x008153c0:    d002        ..      BEQ      0x8153c8 ; tuya_ble_calloc_n + 20
        0x008153c2:    4621        !F      MOV      r1,r4
;;;81         {
;;;82             memset(ptr,0,n * size);
        0x008153c4:    f444f62a    D.*.    BL       __aeabi_memclr ; 0x5a01c
;;;83         }
;;;84         return ptr;
        0x008153c8:    4628        (F      MOV      r0,r5
;;;85     }
        0x008153ca:    bd70        p.      POP      {r4-r6,pc}
    tuya_ble_free_n
;;;86     
;;;87     
;;;88     /*
;;;89      *@brief    
;;;90      *@param    
;;;91      *        
;;;92      *@note     
;;;93      *           
;;;94      * */
;;;95     void tuya_ble_free_n(void *ptr)
;;;96     {
;;;97         vTuyaPortFree(ptr);
        0x008153cc:    f7ffbdd4    ....    B.W      vTuyaPortFree ; 0x814f78
    .text
    create_trsmitr_init
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_mutli_tsf_protocol.c
;;;70     {
        0x008153d0:    b510        ..      PUSH     {r4,lr}
;;;71         frm_trsmitr_proc_s *frm_trsmitr = NULL;
;;;72     
;;;73         frm_trsmitr = (frm_trsmitr_proc_s *)tuya_ble_malloc(sizeof(frm_trsmitr_proc_s));
        0x008153d2:    2028        (       MOVS     r0,#0x28
        0x008153d4:    f7ffffdc    ....    BL       tuya_ble_malloc ; 0x815390
        0x008153d8:    0004        ..      MOVS     r4,r0
;;;74         if ((void *)0 == frm_trsmitr) {
        0x008153da:    d004        ..      BEQ      0x8153e6 ; create_trsmitr_init + 22
;;;75             return (void *)0;
;;;76         }
;;;77         memset(frm_trsmitr, 0, sizeof(frm_trsmitr_proc_s));
        0x008153dc:    2128        (!      MOVS     r1,#0x28
        0x008153de:    f444f63f    D.?.    BL       __aeabi_memclr4 ; 0x5a060
;;;78     
;;;79         return frm_trsmitr;
        0x008153e2:    4620         F      MOV      r0,r4
;;;80     }
        0x008153e4:    bd10        ..      POP      {r4,pc}
        0x008153e6:    2000        .       MOVS     r0,#0
        0x008153e8:    bd10        ..      POP      {r4,pc}
    trsmitr_init
;;;81     
;;;82     /***********************************************************
;;;83     *  Function: trsmitr_init
;;;84     *  description: init a transmitter
;;;85     *  Input: transmitter handle
;;;86     *  Output:
;;;87     *  Return:
;;;88     ***********************************************************/
;;;89     void trsmitr_init(frm_trsmitr_proc_s *frm_trsmitr)
;;;90     {
;;;91         memset(frm_trsmitr, 0, sizeof(frm_trsmitr_proc_s));
        0x008153ea:    2128        (!      MOVS     r1,#0x28
        0x008153ec:    f444b638    D.8.    B        __aeabi_memclr4 ; 0x5a060
    delete_trsmitr
;;;92     }
;;;93     
;;;94     /***********************************************************
;;;95     *  Function: delete_trsmitr
;;;96     *  description: delete transmitter
;;;97     *  Input: transmitter handle
;;;98     *  Output:
;;;99     *  Return:
;;;100    ***********************************************************/
;;;101    void delete_trsmitr(frm_trsmitr_proc_s *frm_trsmitr)
;;;102    {
;;;103        //free(frm_trsmitr);
;;;104        tuya_ble_free((uint8_t *)frm_trsmitr);
        0x008153f0:    f7ffbfd9    ....    B.W      tuya_ble_free ; 0x8153a6
    get_trsmitr_frame_total_len
;;;105    }
;;;106    
;;;107    /***********************************************************
;;;108    *  Function: get_trsmitr_frame_total_len
;;;109    *  description: get a transmitter total data len
;;;110    *  Input: transmitter handle
;;;111    *  Output:
;;;112    *  Return: frame_total_t
;;;113    ***********************************************************/
;;;114    frame_total_t get_trsmitr_frame_total_len(frm_trsmitr_proc_s *frm_trsmitr)
;;;115    {
;;;116        return frm_trsmitr->total;
        0x008153f4:    6800        .h      LDR      r0,[r0,#0]
;;;117    }
        0x008153f6:    4770        pG      BX       lr
    get_trsmitr_frame_version
;;;118    
;;;119    /***********************************************************
;;;120    *  Function: get_trsmitr_frame_version
;;;121    *  description:
;;;122    *  Input: transmitter handle
;;;123    *  Output:
;;;124    *  Return:
;;;125    ***********************************************************/
;;;126    uint8_t get_trsmitr_frame_version(frm_trsmitr_proc_s *frm_trsmitr)
;;;127    {
;;;128        return frm_trsmitr->version;
        0x008153f8:    7900        .y      LDRB     r0,[r0,#4]
;;;129    }
        0x008153fa:    4770        pG      BX       lr
    get_trsmitr_frame_seq
;;;130    
;;;131    /***********************************************************
;;;132    *  Function: get_trsmitr_frame_seq
;;;133    *  description:
;;;134    *  Input: transmitter handle
;;;135    *  Output:
;;;136    *  Return: frame_seq_t
;;;137    ***********************************************************/
;;;138    frame_seq_t get_trsmitr_frame_seq(frm_trsmitr_proc_s *frm_trsmitr)
;;;139    {
;;;140        return frm_trsmitr->seq;
        0x008153fc:    7940        @y      LDRB     r0,[r0,#5]
;;;141    }
        0x008153fe:    4770        pG      BX       lr
    get_trsmitr_subpkg_len
;;;142    
;;;143    /***********************************************************
;;;144    *  Function: get_trsmitr_subpkg_len
;;;145    *  description:
;;;146    *  Input: transmitter handle
;;;147    *  Output:
;;;148    *  Return: frame_subpkg_len_t
;;;149    ***********************************************************/
;;;150    frame_subpkg_len_t get_trsmitr_subpkg_len(frm_trsmitr_proc_s *frm_trsmitr)
;;;151    {
;;;152        return frm_trsmitr->subpkg_len;
        0x00815400:    7c00        .|      LDRB     r0,[r0,#0x10]
;;;153    }
        0x00815402:    4770        pG      BX       lr
    get_trsmitr_subpkg
;;;154    
;;;155    /***********************************************************
;;;156    *  Function: get_trsmitr_subpkg
;;;157    *  description:
;;;158    *  Input: transmitter handle
;;;159    *  Output:
;;;160    *  Return: subpackage buf
;;;161    ***********************************************************/
;;;162    uint8_t *get_trsmitr_subpkg(frm_trsmitr_proc_s *frm_trsmitr)
;;;163    {
        0x00815404:    3011        .0      ADDS     r0,r0,#0x11
;;;164        return frm_trsmitr->subpkg;
;;;165    }
        0x00815406:    4770        pG      BX       lr
    trsmitr_send_pkg_encode
;;;166    
;;;167    static frame_seq_t get_frame_seq(void) //由于暂时没有使用该类型数据，所以暂时可用于多线程
;;;168    {
;;;169        return (frame_seq >= FRAME_SEQ_LMT) ? 0 : frame_seq++;
;;;170    }
;;;171    
;;;172    /***********************************************************
;;;173    *  Function: trsmitr_send_pkg_encode
;;;174    *  description: frm_trsmitr->transmitter handle
;;;175    *               type->frame type
;;;176    *               buf->data buf
;;;177    *               len->data len
;;;178    *  Input:
;;;179    *  Output:
;;;180    *  Return: MTP_OK->buf send up
;;;181    *          MTP_TRSMITR_CONTINUE->need call again to be continue
;;;182    *          other->error
;;;183    *  Note: could get from encode data len and encode data by calling method
;;;184             get_trsmitr_subpkg_len() and get_trsmitr_subpkg()
;;;185    ***********************************************************/
;;;186    mtp_ret trsmitr_send_pkg_encode(frm_trsmitr_proc_s *frm_trsmitr, uint8_t version, uint8_t *buf, uint32_t len)
;;;187    {
        0x00815408:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0081540c:    0004        ..      MOVS     r4,r0
        0x0081540e:    d00b        ..      BEQ      0x815428 ; trsmitr_send_pkg_encode + 32
        0x00815410:    79a0        .y      LDRB     r0,[r4,#6]
        0x00815412:    f04f5580    O..U    MOV      r5,#0x10000000
        0x00815416:    b148        H.      CBZ      r0,0x81542c ; trsmitr_send_pkg_encode + 36
        0x00815418:    68a0        .h      LDR      r0,[r4,#8]
        0x0081541a:    42a8        .B      CMP      r0,r5
        0x0081541c:    d201        ..      BCS      0x815422 ; trsmitr_send_pkg_encode + 26
        0x0081541e:    42ab        .B      CMP      r3,r5
        0x00815420:    d313        ..      BCC      0x81544a ; trsmitr_send_pkg_encode + 66
        0x00815422:    2002        .       MOVS     r0,#2
        0x00815424:    e8bd81f0    ....    POP      {r4-r8,pc}
        0x00815428:    2001        .       MOVS     r0,#1
        0x0081542a:    e7fb        ..      B        0x815424 ; trsmitr_send_pkg_encode + 28
        0x0081542c:    6023        #`      STR      r3,[r4,#0]
        0x0081542e:    7121        !q      STRB     r1,[r4,#4]
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_mutli_tsf_protocol.c (169)
        0x00815430:    49f7        .I      LDR      r1,[pc,#988] ; [0x815810] = 0x2099e2
        0x00815432:    7808        .x      LDRB     r0,[r1,#0]
        0x00815434:    2810        .(      CMP      r0,#0x10
        0x00815436:    d301        ..      BCC      0x81543c ; trsmitr_send_pkg_encode + 52
        0x00815438:    2000        .       MOVS     r0,#0
        0x0081543a:    e001        ..      B        0x815440 ; trsmitr_send_pkg_encode + 56
        0x0081543c:    1c46        F.      ADDS     r6,r0,#1
        0x0081543e:    700e        .p      STRB     r6,[r1,#0]
;;;170    }
;;;171    
;;;172    /***********************************************************
;;;173    *  Function: trsmitr_send_pkg_encode
;;;174    *  description: frm_trsmitr->transmitter handle
;;;175    *               type->frame type
;;;176    *               buf->data buf
;;;177    *               len->data len
;;;178    *  Input:
;;;179    *  Output:
;;;180    *  Return: MTP_OK->buf send up
;;;181    *          MTP_TRSMITR_CONTINUE->need call again to be continue
;;;182    *          other->error
;;;183    *  Note: could get from encode data len and encode data by calling method
;;;184             get_trsmitr_subpkg_len() and get_trsmitr_subpkg()
;;;185    ***********************************************************/
;;;186    mtp_ret trsmitr_send_pkg_encode(frm_trsmitr_proc_s *frm_trsmitr, uint8_t version, uint8_t *buf, uint32_t len)
;;;187    {
;;;188        if (((void *)0) == frm_trsmitr) {
;;;189            return MTP_INVALID_PARAM;
;;;190        }
;;;191    
;;;192        if (FRM_PKG_INIT == frm_trsmitr->pkg_desc) {
;;;193            frm_trsmitr->total = len;
;;;194            frm_trsmitr->version = version;
;;;195            frm_trsmitr->seq = get_frame_seq();
        0x00815440:    7160        `q      STRB     r0,[r4,#5]
;;;196            frm_trsmitr->subpkg_num = 0;
        0x00815442:    2000        .       MOVS     r0,#0
;;;197            frm_trsmitr->pkg_trsmitr_cnt = 0;
        0x00815444:    60a0        .`      STR      r0,[r4,#8]
        0x00815446:    60e0        .`      STR      r0,[r4,#0xc]
        0x00815448:    e7e9        ..      B        0x81541e ; trsmitr_send_pkg_encode + 22
;;;198        }
;;;199    
;;;200        if (frm_trsmitr->subpkg_num >= 0x10000000 || len >= 0x10000000) {
;;;201            return MTP_COM_ERROR;
;;;202        }
;;;203    
;;;204        uint8_t sunpkg_offset = 0;
        0x0081544a:    2500        .%      MOVS     r5,#0
;;;205    
;;;206        // package code
;;;207        // subpackage num encode
;;;208        int32_t i;
;;;209        uint32_t tmp = 0;
;;;210        tmp = frm_trsmitr->subpkg_num;
;;;211        for (i = 0; i < 4; i++)
        0x0081544c:    68a0        .h      LDR      r0,[r4,#8]
        0x0081544e:    4629        )F      MOV      r1,r5
;;;212        {
;;;213            frm_trsmitr->subpkg[sunpkg_offset] = tmp % 0x80;
        0x00815450:    1967        g.      ADDS     r7,r4,r5
        0x00815452:    f000067f    ....    AND      r6,r0,#0x7f
        0x00815456:    747e        ~t      STRB     r6,[r7,#0x11]
;;;214            if ((tmp / 0x80))
        0x00815458:    2880        .(      CMP      r0,#0x80
        0x0081545a:    d302        ..      BCC      0x815462 ; trsmitr_send_pkg_encode + 90
;;;215            {
;;;216                frm_trsmitr->subpkg[sunpkg_offset] |= 0x80;
        0x0081545c:    f0460680    F...    ORR      r6,r6,#0x80
        0x00815460:    747e        ~t      STRB     r6,[r7,#0x11]
        0x00815462:    1c6d        m.      ADDS     r5,r5,#1
;;;217            }
;;;218            sunpkg_offset++;
        0x00815464:    b2ed        ..      UXTB     r5,r5
;;;219            tmp /= 0x80;
        0x00815466:    09c0        ..      LSRS     r0,r0,#7
;;;220            if(0 == tmp)
        0x00815468:    d002        ..      BEQ      0x815470 ; trsmitr_send_pkg_encode + 104
        0x0081546a:    1c49        I.      ADDS     r1,r1,#1
        0x0081546c:    2904        .)      CMP      r1,#4
        0x0081546e:    dbef        ..      BLT      0x815450 ; trsmitr_send_pkg_encode + 72
;;;221            {
;;;222                break;
;;;223            }
;;;224        }
;;;225    
;;;226        // the first package include the frame total len
;;;227        if (0 == frm_trsmitr->subpkg_num) {
        0x00815470:    68a0        .h      LDR      r0,[r4,#8]
        0x00815472:    b9c8        ..      CBNZ     r0,0x8154a8 ; trsmitr_send_pkg_encode + 160
;;;228            // frame len encode
;;;229            tmp = len;
        0x00815474:    461e        .F      MOV      r6,r3
;;;230            for (i = 0; i < 4; i++) {
        0x00815476:    2000        .       MOVS     r0,#0
;;;231                frm_trsmitr->subpkg[sunpkg_offset] = tmp % 0x80;
        0x00815478:    1967        g.      ADDS     r7,r4,r5
        0x0081547a:    f006017f    ....    AND      r1,r6,#0x7f
        0x0081547e:    7479        yt      STRB     r1,[r7,#0x11]
;;;232                if ((tmp / 0x80)) {
        0x00815480:    2e80        ..      CMP      r6,#0x80
        0x00815482:    d302        ..      BCC      0x81548a ; trsmitr_send_pkg_encode + 130
;;;233                    frm_trsmitr->subpkg[sunpkg_offset] |= 0x80;
        0x00815484:    f0410180    A...    ORR      r1,r1,#0x80
        0x00815488:    7479        yt      STRB     r1,[r7,#0x11]
        0x0081548a:    1c6d        m.      ADDS     r5,r5,#1
;;;234                }
;;;235                sunpkg_offset++;
        0x0081548c:    b2ed        ..      UXTB     r5,r5
;;;236                tmp /= 0x80;
        0x0081548e:    09f6        ..      LSRS     r6,r6,#7
;;;237                if(0 == tmp) {
        0x00815490:    d002        ..      BEQ      0x815498 ; trsmitr_send_pkg_encode + 144
        0x00815492:    1c40        @.      ADDS     r0,r0,#1
        0x00815494:    2804        .(      CMP      r0,#4
        0x00815496:    dbef        ..      BLT      0x815478 ; trsmitr_send_pkg_encode + 112
;;;238                    break;
;;;239                }
;;;240            }
;;;241    
;;;242            // frame type and frame seq
;;;243            frm_trsmitr->subpkg[sunpkg_offset++] = (frm_trsmitr->version << 0x04) | (frm_trsmitr->seq & 0x0f);
        0x00815498:    7921        !y      LDRB     r1,[r4,#4]
        0x0081549a:    7960        `y      LDRB     r0,[r4,#5]
        0x0081549c:    f361101f    a...    BFI      r0,r1,#4,#28
        0x008154a0:    1961        a.      ADDS     r1,r4,r5
        0x008154a2:    1c6d        m.      ADDS     r5,r5,#1
        0x008154a4:    7448        Ht      STRB     r0,[r1,#0x11]
        0x008154a6:    b2ed        ..      UXTB     r5,r5
;;;244        }
;;;245    
;;;246        // frame data transfer
;;;247        uint8_t send_data = (SNGL_PKG_TRSFR_LMT - sunpkg_offset);
        0x008154a8:    f1c50014    ....    RSB      r0,r5,#0x14
        0x008154ac:    68e1        .h      LDR      r1,[r4,#0xc]
        0x008154ae:    b2c7        ..      UXTB     r7,r0
;;;248        if ((len - frm_trsmitr->pkg_trsmitr_cnt) < send_data) {
        0x008154b0:    1a58        X.      SUBS     r0,r3,r1
        0x008154b2:    42b8        .B      CMP      r0,r7
        0x008154b4:    d200        ..      BCS      0x8154b8 ; trsmitr_send_pkg_encode + 176
;;;249            send_data = len - frm_trsmitr->pkg_trsmitr_cnt;
        0x008154b6:    b2c7        ..      UXTB     r7,r0
;;;250        }
;;;251    
;;;252        memcpy(&(frm_trsmitr->subpkg[sunpkg_offset]), buf + frm_trsmitr->pkg_trsmitr_cnt, send_data);
        0x008154b8:    4411        .D      ADD      r1,r1,r2
        0x008154ba:    1960        `.      ADDS     r0,r4,r5
        0x008154bc:    463a        :F      MOV      r2,r7
        0x008154be:    3011        .0      ADDS     r0,r0,#0x11
        0x008154c0:    f444f4eb    D...    BL       __aeabi_memcpy ; 0x59e9a
;;;253        frm_trsmitr->subpkg_len = sunpkg_offset+send_data;
        0x008154c4:    19e8        ..      ADDS     r0,r5,r7
        0x008154c6:    7420         t      STRB     r0,[r4,#0x10]
;;;254    
;;;255        frm_trsmitr->pkg_trsmitr_cnt += send_data;
        0x008154c8:    68e0        .h      LDR      r0,[r4,#0xc]
        0x008154ca:    19c1        ..      ADDS     r1,r0,r7
;;;256        if (0 == frm_trsmitr->subpkg_num) {
        0x008154cc:    60e1        .`      STR      r1,[r4,#0xc]
        0x008154ce:    68a0        .h      LDR      r0,[r4,#8]
        0x008154d0:    b140        @.      CBZ      r0,0x8154e4 ; trsmitr_send_pkg_encode + 220
        0x008154d2:    2202        ."      MOVS     r2,#2
        0x008154d4:    71a2        .q      STRB     r2,[r4,#6]
        0x008154d6:    6822        "h      LDR      r2,[r4,#0]
        0x008154d8:    4291        .B      CMP      r1,r2
        0x008154da:    d205        ..      BCS      0x8154e8 ; trsmitr_send_pkg_encode + 224
        0x008154dc:    1c40        @.      ADDS     r0,r0,#1
        0x008154de:    60a0        .`      STR      r0,[r4,#8]
        0x008154e0:    2003        .       MOVS     r0,#3
        0x008154e2:    e79f        ..      B        0x815424 ; trsmitr_send_pkg_encode + 28
;;;257            frm_trsmitr->pkg_desc = FRM_PKG_FIRST;
        0x008154e4:    2201        ."      MOVS     r2,#1
        0x008154e6:    e7f5        ..      B        0x8154d4 ; trsmitr_send_pkg_encode + 204
;;;258        } else {
;;;259            frm_trsmitr->pkg_desc = FRM_PKG_MIDDLE;
;;;260        }
;;;261    
;;;262        if (frm_trsmitr->pkg_trsmitr_cnt < frm_trsmitr->total) {
;;;263            frm_trsmitr->subpkg_num++;
;;;264            return MTP_TRSMITR_CONTINUE;
;;;265        }
;;;266    
;;;267        frm_trsmitr->pkg_desc = FRM_PKG_END;
        0x008154e8:    2003        .       MOVS     r0,#3
        0x008154ea:    71a0        .q      STRB     r0,[r4,#6]
;;;268        return MTP_OK;
        0x008154ec:    2000        .       MOVS     r0,#0
;;;269    }
        0x008154ee:    e799        ..      B        0x815424 ; trsmitr_send_pkg_encode + 28
    trsmitr_recv_pkg_decode
;;;270    
;;;271    
;;;272    
;;;273    mtp_ret trsmitr_recv_pkg_decode(frm_trsmitr_proc_s *frm_trsmitr, uint8_t *raw_data, uint8_t raw_data_len)
;;;274    {
        0x008154f0:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x008154f4:    4604        .F      MOV      r4,r0
        0x008154f6:    b139        9.      CBZ      r1,0x815508 ; trsmitr_recv_pkg_decode + 24
;;;275        if (NULL == raw_data || \
;;;276                (raw_data_len > SNGL_PKG_TRSFR_LMT) || \
        0x008154f8:    2a14        .*      CMP      r2,#0x14
        0x008154fa:    d805        ..      BHI      0x815508 ; trsmitr_recv_pkg_decode + 24
;;;277                NULL == frm_trsmitr) {
        0x008154fc:    b124        $.      CBZ      r4,0x815508 ; trsmitr_recv_pkg_decode + 24
        0x008154fe:    79a0        .y      LDRB     r0,[r4,#6]
        0x00815500:    f04f0e00    O...    MOV      lr,#0
        0x00815504:    b110        ..      CBZ      r0,0x81550c ; trsmitr_recv_pkg_decode + 28
        0x00815506:    e009        ..      B        0x81551c ; trsmitr_recv_pkg_decode + 44
;;;278            return MTP_INVALID_PARAM;
        0x00815508:    2001        .       MOVS     r0,#1
        0x0081550a:    e78b        ..      B        0x815424 ; trsmitr_send_pkg_encode + 28
;;;279        }
;;;280    
;;;281        if (FRM_PKG_INIT == frm_trsmitr->pkg_desc) {
;;;282            frm_trsmitr->total = 0;
;;;283            frm_trsmitr->version = 0;
        0x0081550c:    f8c4e000    ....    STR      lr,[r4,#0]
        0x00815510:    f884e004    ....    STRB     lr,[r4,#4]
;;;284            frm_trsmitr->seq = 0;
        0x00815514:    f884e005    ....    STRB     lr,[r4,#5]
;;;285            frm_trsmitr->pkg_trsmitr_cnt = 0;
        0x00815518:    f8c4e00c    ....    STR      lr,[r4,#0xc]
;;;286        }
;;;287    
;;;288        uint8_t sunpkg_offset = 0;
        0x0081551c:    2000        .       MOVS     r0,#0
;;;289        // package code
;;;290        // subpackage num decode
;;;291        int32_t i;
;;;292        uint32_t multiplier = 1;
        0x0081551e:    2601        .&      MOVS     r6,#1
;;;293        uint8_t digit;
;;;294        frame_subpkg_num_t subpkg_num = 0;
        0x00815520:    4603        .F      MOV      r3,r0
;;;295    //Package number
;;;296        for (i = 0; i < 4; i++) {
        0x00815522:    4605        .F      MOV      r5,r0
;;;297            digit = raw_data[sunpkg_offset++];
        0x00815524:    5c0f        .\      LDRB     r7,[r1,r0]
        0x00815526:    1c40        @.      ADDS     r0,r0,#1
        0x00815528:    f0070c7f    ....    AND      r12,r7,#0x7f
        0x0081552c:    fb0c3306    ...3    MLA      r3,r12,r6,r3
        0x00815530:    01f6        ..      LSLS     r6,r6,#7
        0x00815532:    b2c0        ..      UXTB     r0,r0
;;;298            subpkg_num += (digit & 0x7f) * multiplier;
;;;299            multiplier *= 0x80;
;;;300    
;;;301            if (0 == (digit & 0x80)) {
        0x00815534:    063f        ?.      LSLS     r7,r7,#24
        0x00815536:    d502        ..      BPL      0x81553e ; trsmitr_recv_pkg_decode + 78
        0x00815538:    1c6d        m.      ADDS     r5,r5,#1
        0x0081553a:    2d04        .-      CMP      r5,#4
        0x0081553c:    dbf2        ..      BLT      0x815524 ; trsmitr_recv_pkg_decode + 52
;;;302                break;
;;;303            }
;;;304        }
;;;305    
;;;306        if(0 == subpkg_num)
        0x0081553e:    b193        ..      CBZ      r3,0x815566 ; trsmitr_recv_pkg_decode + 118
        0x00815540:    2502        .%      MOVS     r5,#2
        0x00815542:    71a5        .q      STRB     r5,[r4,#6]
        0x00815544:    68a5        .h      LDR      r5,[r4,#8]
        0x00815546:    f04f5780    O..W    MOV      r7,#0x10000000
        0x0081554a:    42bd        .B      CMP      r5,r7
        0x0081554c:    d22c        ,.      BCS      0x8155a8 ; trsmitr_recv_pkg_decode + 184
        0x0081554e:    79a6        .y      LDRB     r6,[r4,#6]
        0x00815550:    2e01        ..      CMP      r6,#1
        0x00815552:    d012        ..      BEQ      0x81557a ; trsmitr_recv_pkg_decode + 138
        0x00815554:    429d        .B      CMP      r5,r3
        0x00815556:    d804        ..      BHI      0x815562 ; trsmitr_recv_pkg_decode + 114
        0x00815558:    d046        F.      BEQ      0x8155e8 ; trsmitr_recv_pkg_decode + 248
        0x0081555a:    eba30505    ....    SUB      r5,r3,r5
        0x0081555e:    2d01        .-      CMP      r5,#1
        0x00815560:    d90b        ..      BLS      0x81557a ; trsmitr_recv_pkg_decode + 138
        0x00815562:    2004        .       MOVS     r0,#4
        0x00815564:    e75e        ^.      B        0x815424 ; trsmitr_send_pkg_encode + 28
;;;307        {
;;;308            frm_trsmitr->total = 0;
;;;309            frm_trsmitr->version = 0;
        0x00815566:    f8c4e000    ....    STR      lr,[r4,#0]
        0x0081556a:    f884e004    ....    STRB     lr,[r4,#4]
;;;310            frm_trsmitr->seq = 0;
        0x0081556e:    f884e005    ....    STRB     lr,[r4,#5]
;;;311            frm_trsmitr->pkg_trsmitr_cnt = 0;
;;;312            frm_trsmitr->pkg_desc = FRM_PKG_FIRST;
        0x00815572:    2501        .%      MOVS     r5,#1
        0x00815574:    f8c4e00c    ....    STR      lr,[r4,#0xc]
        0x00815578:    e7e3        ..      B        0x815542 ; trsmitr_recv_pkg_decode + 82
;;;313        }
;;;314        else
;;;315        {
;;;316            frm_trsmitr->pkg_desc = FRM_PKG_MIDDLE;
;;;317        }
;;;318    
;;;319        if (frm_trsmitr->subpkg_num >= 0x10000000)
;;;320        {
;;;321            return MTP_COM_ERROR;
;;;322        }
;;;323        // is receive the subpackage num valid?
;;;324        if (frm_trsmitr->pkg_desc != FRM_PKG_FIRST)
;;;325        {
;;;326            if (subpkg_num < frm_trsmitr->subpkg_num)
;;;327            {
;;;328                return MTP_TRSMITR_ERROR;
;;;329            }
;;;330            else if (subpkg_num == frm_trsmitr->subpkg_num)
;;;331            {
;;;332                return MTP_TRSMITR_CONTINUE;
;;;333            }
;;;334    
;;;335            if (subpkg_num - frm_trsmitr->subpkg_num > 1) {
;;;336                return MTP_TRSMITR_ERROR;
;;;337            }
;;;338        }
;;;339        frm_trsmitr->subpkg_num = subpkg_num;
;;;340    
;;;341        if (0 == frm_trsmitr->subpkg_num)
        0x0081557a:    60a3        .`      STR      r3,[r4,#8]
        0x0081557c:    b9fb        ..      CBNZ     r3,0x8155be ; trsmitr_recv_pkg_decode + 206
;;;342        {
;;;343            // frame len decode
;;;344            multiplier = 1;
        0x0081557e:    2501        .%      MOVS     r5,#1
;;;345            for (i = 0; i < 4; i++)
        0x00815580:    2300        .#      MOVS     r3,#0
;;;346            {
;;;347                digit = raw_data[sunpkg_offset++];
        0x00815582:    5c0e        .\      LDRB     r6,[r1,r0]
        0x00815584:    f8d4c000    ....    LDR      r12,[r4,#0]
        0x00815588:    f0060e7f    ....    AND      lr,r6,#0x7f
        0x0081558c:    fb0ecc05    ....    MLA      r12,lr,r5,r12
        0x00815590:    1c40        @.      ADDS     r0,r0,#1
        0x00815592:    01ed        ..      LSLS     r5,r5,#7
        0x00815594:    b2c0        ..      UXTB     r0,r0
;;;348                frm_trsmitr->total += (digit & 0x7f) * multiplier;
;;;349                multiplier *= 0x80;
;;;350    
;;;351                if (0 == (digit & 0x80))
        0x00815596:    f8c4c000    ....    STR      r12,[r4,#0]
        0x0081559a:    0636        6.      LSLS     r6,r6,#24
        0x0081559c:    d502        ..      BPL      0x8155a4 ; trsmitr_recv_pkg_decode + 180
        0x0081559e:    1c5b        [.      ADDS     r3,r3,#1
        0x008155a0:    2b04        .+      CMP      r3,#4
        0x008155a2:    dbee        ..      BLT      0x815582 ; trsmitr_recv_pkg_decode + 146
;;;352                {
;;;353                    break;
;;;354                }
;;;355            }
;;;356    
;;;357            if (frm_trsmitr->total >= 0x10000000)
        0x008155a4:    45bc        .E      CMP      r12,r7
        0x008155a6:    d301        ..      BCC      0x8155ac ; trsmitr_recv_pkg_decode + 188
;;;358            {
;;;359                return MTP_COM_ERROR;
        0x008155a8:    2002        .       MOVS     r0,#2
        0x008155aa:    e73b        ;.      B        0x815424 ; trsmitr_send_pkg_encode + 28
;;;360            }
;;;361    
;;;362            // frame type and frame seq decode
;;;363            frm_trsmitr->version = (raw_data[sunpkg_offset] & FRM_VERSION_OFFSET) >> 4;
        0x008155ac:    5c0b        .\      LDRB     r3,[r1,r0]
        0x008155ae:    091b        ..      LSRS     r3,r3,#4
        0x008155b0:    7123        #q      STRB     r3,[r4,#4]
;;;364            frm_trsmitr->seq = raw_data[sunpkg_offset++] & FRM_SEQ_OFFSET;
        0x008155b2:    5c0b        .\      LDRB     r3,[r1,r0]
        0x008155b4:    1c40        @.      ADDS     r0,r0,#1
        0x008155b6:    f003030f    ....    AND      r3,r3,#0xf
        0x008155ba:    7163        cq      STRB     r3,[r4,#5]
        0x008155bc:    b2c0        ..      UXTB     r0,r0
;;;365        }
;;;366    
;;;367        uint8_t recv_data = raw_data_len - sunpkg_offset;
        0x008155be:    1a12        ..      SUBS     r2,r2,r0
        0x008155c0:    b2d5        ..      UXTB     r5,r2
;;;368        if((frm_trsmitr->total - frm_trsmitr->pkg_trsmitr_cnt) < recv_data)
        0x008155c2:    68e3        .h      LDR      r3,[r4,#0xc]
        0x008155c4:    6822        "h      LDR      r2,[r4,#0]
        0x008155c6:    1ad2        ..      SUBS     r2,r2,r3
        0x008155c8:    42aa        .B      CMP      r2,r5
        0x008155ca:    d200        ..      BCS      0x8155ce ; trsmitr_recv_pkg_decode + 222
;;;369        {
;;;370            recv_data = frm_trsmitr->total - frm_trsmitr->pkg_trsmitr_cnt;
        0x008155cc:    b2d5        ..      UXTB     r5,r2
;;;371        }
;;;372    
;;;373        // decode data cp to transmitter subpackage buf
;;;374        memcpy(frm_trsmitr->subpkg, &raw_data[sunpkg_offset], recv_data);
        0x008155ce:    4401        .D      ADD      r1,r1,r0
        0x008155d0:    462a        *F      MOV      r2,r5
        0x008155d2:    f1040011    ....    ADD      r0,r4,#0x11
        0x008155d6:    f444f460    D.`.    BL       __aeabi_memcpy ; 0x59e9a
;;;375        frm_trsmitr->subpkg_len = recv_data;
        0x008155da:    7425        %t      STRB     r5,[r4,#0x10]
;;;376        frm_trsmitr->pkg_trsmitr_cnt += recv_data;
        0x008155dc:    68e0        .h      LDR      r0,[r4,#0xc]
        0x008155de:    4428        (D      ADD      r0,r0,r5
;;;377    
;;;378        if (frm_trsmitr->pkg_trsmitr_cnt < frm_trsmitr->total)
        0x008155e0:    60e0        .`      STR      r0,[r4,#0xc]
        0x008155e2:    6821        !h      LDR      r1,[r4,#0]
        0x008155e4:    4288        .B      CMP      r0,r1
        0x008155e6:    d201        ..      BCS      0x8155ec ; trsmitr_recv_pkg_decode + 252
;;;379        {
;;;380            return MTP_TRSMITR_CONTINUE;
        0x008155e8:    2003        .       MOVS     r0,#3
        0x008155ea:    e71b        ..      B        0x815424 ; trsmitr_send_pkg_encode + 28
;;;381        }
;;;382        //frm_trsmitr->pkg_desc = FRM_PKG_END;
;;;383        return MTP_OK;
        0x008155ec:    2000        .       MOVS     r0,#0
;;;384    }
        0x008155ee:    e719        ..      B        0x815424 ; trsmitr_send_pkg_encode + 28
    free_klv_list
;;;385    /***********************************************************
;;;386    *  Function: free_klv_list
;;;387    *  description:
;;;388    *  Input: list
;;;389    *  Output:
;;;390    *  Return:
;;;391    ***********************************************************/
;;;392    void free_klv_list(klv_node_s *list)
;;;393    {
        0x008155f0:    b570        p.      PUSH     {r4-r6,lr}
        0x008155f2:    2800        .(      CMP      r0,#0
        0x008155f4:    d009        ..      BEQ      0x81560a ; free_klv_list + 26
;;;394        if (NULL == list)
;;;395        {
;;;396            return;
;;;397        }
;;;398    
;;;399        klv_node_s *node = list;
        0x008155f6:    4604        .F      MOV      r4,r0
;;;400        klv_node_s *next_node = NULL;
;;;401    
;;;402        do
;;;403        {
;;;404            next_node = node->next;
;;;405            //free(node);
;;;406            tuya_ble_free((uint8_t*)(node->data));
        0x008155f8:    6825        %h      LDR      r5,[r4,#0]
        0x008155fa:    68a0        .h      LDR      r0,[r4,#8]
        0x008155fc:    f7fffed3    ....    BL       tuya_ble_free ; 0x8153a6
;;;407    
;;;408            tuya_ble_free((uint8_t*)node);
        0x00815600:    4620         F      MOV      r0,r4
        0x00815602:    f7fffed0    ....    BL       tuya_ble_free ; 0x8153a6
;;;409            node = next_node;
        0x00815606:    002c        ,.      MOVS     r4,r5
;;;410        } while (node);
        0x00815608:    d1f6        ..      BNE      0x8155f8 ; free_klv_list + 8
;;;411    }
        0x0081560a:    bd70        p.      POP      {r4-r6,pc}
    make_klv_list
;;;412    
;;;413    /***********************************************************
;;;414    *  Function: make_klv_list
;;;415    *  description:
;;;416    *  Input:
;;;417    *  Output:
;;;418    *  Return:
;;;419    ***********************************************************/
;;;420    klv_node_s *make_klv_list(klv_node_s *list,uint8_t id,dp_type type,\
;;;421                              void *data,uint8_t len)
;;;422    {
        0x0081560c:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x00815610:    001f        ..      MOVS     r7,r3
        0x00815612:    9e08        ..      LDR      r6,[sp,#0x20]
        0x00815614:    4615        .F      MOV      r5,r2
        0x00815616:    4688        .F      MOV      r8,r1
        0x00815618:    4681        .F      MOV      r9,r0
        0x0081561a:    d001        ..      BEQ      0x815620 ; make_klv_list + 20
;;;423        klv_node_s *node;
;;;424    
;;;425        if(NULL == data || type >= DT_LMT) {
        0x0081561c:    2d0a        .-      CMP      r5,#0xa
        0x0081561e:    d302        ..      BCC      0x815626 ; make_klv_list + 26
;;;426            return NULL;
        0x00815620:    2000        .       MOVS     r0,#0
        0x00815622:    e8bd87f0    ....    POP      {r4-r10,pc}
;;;427        }
;;;428    
;;;429        if(DT_VALUE == type && DT_VALUE_LEN != len) {
        0x00815626:    2d02        .-      CMP      r5,#2
        0x00815628:    d026        &.      BEQ      0x815678 ; make_klv_list + 108
;;;430            goto err_ret;
;;;431        } else if(DT_BITMAP == type && len > DT_BITMAP_MAX) {
        0x0081562a:    2d05        .-      CMP      r5,#5
        0x0081562c:    d027        '.      BEQ      0x81567e ; make_klv_list + 114
;;;432            goto err_ret;
;;;433        } else if(DT_BOOL == type && DT_BOOL_LEN != len) {
        0x0081562e:    2d01        .-      CMP      r5,#1
        0x00815630:    d028        (.      BEQ      0x815684 ; make_klv_list + 120
;;;434            goto err_ret;
;;;435        } else if(DT_ENUM == type && DT_ENUM_LEN != len) {
        0x00815632:    2d04        .-      CMP      r5,#4
        0x00815634:    d026        &.      BEQ      0x815684 ; make_klv_list + 120
;;;436            goto err_ret;
;;;437        }
;;;438    
;;;439    
;;;440        node = (klv_node_s *)tuya_ble_malloc(sizeof(klv_node_s));
        0x00815636:    200c        .       MOVS     r0,#0xc
        0x00815638:    f7fffeaa    ....    BL       tuya_ble_malloc ; 0x815390
        0x0081563c:    0004        ..      MOVS     r4,r0
;;;441    
;;;442        if(NULL == node)
        0x0081563e:    d029        ).      BEQ      0x815694 ; make_klv_list + 136
;;;443        {
;;;444            goto err_ret;
;;;445        }
;;;446        memset(node, 0, sizeof(klv_node_s));
        0x00815640:    2000        .       MOVS     r0,#0
        0x00815642:    6020         `      STR      r0,[r4,#0]
        0x00815644:    6060        ``      STR      r0,[r4,#4]
;;;447        if(len>0)
        0x00815646:    60a0        .`      STR      r0,[r4,#8]
        0x00815648:    b126        &.      CBZ      r6,0x815654 ; make_klv_list + 72
;;;448        {
;;;449            node->data =tuya_ble_malloc(len);
        0x0081564a:    4630        0F      MOV      r0,r6
        0x0081564c:    f7fffea0    ....    BL       tuya_ble_malloc ; 0x815390
;;;450            if (node->data==NULL)
        0x00815650:    60a0        .`      STR      r0,[r4,#8]
        0x00815652:    b1d0        ..      CBZ      r0,0x81568a ; make_klv_list + 126
;;;451            {
;;;452                tuya_ble_free(node->data);
;;;453                tuya_ble_free((uint8_t*)node);
;;;454                goto err_ret;
;;;455            }
;;;456        }
;;;457        node->id = id;
        0x00815654:    f8848004    ....    STRB     r8,[r4,#4]
;;;458        node->len = len;
        0x00815658:    80e6        ..      STRH     r6,[r4,#6]
;;;459        node->type = type;
        0x0081565a:    7165        eq      STRB     r5,[r4,#5]
;;;460    
;;;461        if(DT_VALUE == type || \
        0x0081565c:    2d02        .-      CMP      r5,#2
        0x0081565e:    d01d        ..      BEQ      0x81569c ; make_klv_list + 144
;;;462                DT_BITMAP == type)
        0x00815660:    2d05        .-      CMP      r5,#5
        0x00815662:    d01b        ..      BEQ      0x81569c ; make_klv_list + 144
;;;463        {   // change to big-end
;;;464            uint32_t tmp = *(uint32_t *)data;
;;;465            // unsigned char shift = 0;
;;;466            node->data[0] = (tmp >> 24) & 0xff;
;;;467            node->data[1] = (tmp >> 16) & 0xff;
;;;468            node->data[2] = (tmp >> 8) & 0xff;
;;;469            node->data[3] = (tmp >> 0) & 0xff;
;;;470        }
;;;471        else
;;;472        {
;;;473            if(len>0)
        0x00815664:    b126        &.      CBZ      r6,0x815670 ; make_klv_list + 100
;;;474                memcpy((void *)node->data,(uint8_t*)data,len);
        0x00815666:    4632        2F      MOV      r2,r6
        0x00815668:    4639        9F      MOV      r1,r7
        0x0081566a:    68a0        .h      LDR      r0,[r4,#8]
        0x0081566c:    f444f415    D...    BL       __aeabi_memcpy ; 0x59e9a
;;;475        }
;;;476        node->next = list;
;;;477        return node;
        0x00815670:    4620         F      MOV      r0,r4
        0x00815672:    f8c49000    ....    STR      r9,[r4,#0]
;;;478    
;;;479    err_ret:
;;;480        free_klv_list(list);
;;;481        return NULL;
;;;482    }
        0x00815676:    e7d4        ..      B        0x815622 ; make_klv_list + 22
        0x00815678:    2e04        ..      CMP      r6,#4
        0x0081567a:    d10b        ..      BNE      0x815694 ; make_klv_list + 136
        0x0081567c:    e7db        ..      B        0x815636 ; make_klv_list + 42
        0x0081567e:    2e04        ..      CMP      r6,#4
        0x00815680:    d808        ..      BHI      0x815694 ; make_klv_list + 136
        0x00815682:    e7d8        ..      B        0x815636 ; make_klv_list + 42
        0x00815684:    2e01        ..      CMP      r6,#1
        0x00815686:    d105        ..      BNE      0x815694 ; make_klv_list + 136
        0x00815688:    e7d5        ..      B        0x815636 ; make_klv_list + 42
        0x0081568a:    f7fffe8c    ....    BL       tuya_ble_free ; 0x8153a6
        0x0081568e:    4620         F      MOV      r0,r4
        0x00815690:    f7fffe89    ....    BL       tuya_ble_free ; 0x8153a6
        0x00815694:    4648        HF      MOV      r0,r9
        0x00815696:    f7ffffab    ....    BL       free_klv_list ; 0x8155f0
        0x0081569a:    e7c1        ..      B        0x815620 ; make_klv_list + 20
        0x0081569c:    6838        8h      LDR      r0,[r7,#0]
        0x0081569e:    68a2        .h      LDR      r2,[r4,#8]
        0x008156a0:    0e01        ..      LSRS     r1,r0,#24
        0x008156a2:    7011        .p      STRB     r1,[r2,#0]
        0x008156a4:    68a2        .h      LDR      r2,[r4,#8]
        0x008156a6:    0c01        ..      LSRS     r1,r0,#16
        0x008156a8:    7051        Qp      STRB     r1,[r2,#1]
        0x008156aa:    68a2        .h      LDR      r2,[r4,#8]
        0x008156ac:    0a01        ..      LSRS     r1,r0,#8
        0x008156ae:    7091        .p      STRB     r1,[r2,#2]
        0x008156b0:    68a1        .h      LDR      r1,[r4,#8]
        0x008156b2:    70c8        .p      STRB     r0,[r1,#3]
        0x008156b4:    e7dc        ..      B        0x815670 ; make_klv_list + 100
    klvlist_2_data
;;;483    
;;;484    /***********************************************************
;;;485    *  Function: klvlist_2_data
;;;486    *  description:
;;;487    *  Input: type:0-data中len占1个字节，1-data中len占两个字节
;;;488    *  Output:
;;;489    *  Return:
;;;490    ***********************************************************/
;;;491    mtp_ret klvlist_2_data(klv_node_s *list,uint8_t **data,uint32_t *len,uint8_t type)
;;;492    {
        0x008156b6:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x008156ba:    4699        .F      MOV      r9,r3
        0x008156bc:    4617        .F      MOV      r7,r2
        0x008156be:    4688        .F      MOV      r8,r1
        0x008156c0:    0004        ..      MOVS     r4,r0
        0x008156c2:    d012        ..      BEQ      0x8156ea ; klvlist_2_data + 52
;;;493        if(NULL == list || NULL == data || NULL == len)
        0x008156c4:    f1b80f00    ....    CMP      r8,#0
        0x008156c8:    d00f        ..      BEQ      0x8156ea ; klvlist_2_data + 52
        0x008156ca:    b177        w.      CBZ      r7,0x8156ea ; klvlist_2_data + 52
;;;494        {
;;;495            return MTP_INVALID_PARAM;
;;;496        }
;;;497    
;;;498        klv_node_s *node = list;
        0x008156cc:    4620         F      MOV      r0,r4
;;;499    
;;;500        // count data len
;;;501        uint32_t mk_data_len = 0;
        0x008156ce:    2100        .!      MOVS     r1,#0
;;;502        while(node)
;;;503        {
;;;504            mk_data_len += sizeof(klv_node_s)+node->len-sizeof(struct s_klv_node *);
        0x008156d0:    88c2        ..      LDRH     r2,[r0,#6]
        0x008156d2:    3108        .1      ADDS     r1,r1,#8
        0x008156d4:    6800        .h      LDR      r0,[r0,#0]
        0x008156d6:    4411        .D      ADD      r1,r1,r2
;;;505            node = node->next;
        0x008156d8:    2800        .(      CMP      r0,#0
        0x008156da:    d1f9        ..      BNE      0x8156d0 ; klvlist_2_data + 26
;;;506        }
;;;507    
;;;508        uint8_t *mk_data = (uint8_t *)tuya_ble_malloc(mk_data_len);
        0x008156dc:    b288        ..      UXTH     r0,r1
        0x008156de:    f7fffe57    ..W.    BL       tuya_ble_malloc ; 0x815390
        0x008156e2:    0005        ..      MOVS     r5,r0
;;;509        if(NULL == mk_data)
        0x008156e4:    d003        ..      BEQ      0x8156ee ; klvlist_2_data + 56
;;;510        {
;;;511            return MTP_MALLOC_ERR;
;;;512        }
;;;513    
;;;514        // fill data
;;;515        uint32_t offset = 0;
        0x008156e6:    2600        .&      MOVS     r6,#0
;;;516        node = list;
;;;517        while(node)
        0x008156e8:    e018        ..      B        0x81571c ; klvlist_2_data + 102
        0x008156ea:    2001        .       MOVS     r0,#1
        0x008156ec:    e799        ..      B        0x815622 ; make_klv_list + 22
        0x008156ee:    2005        .       MOVS     r0,#5
        0x008156f0:    e797        ..      B        0x815622 ; make_klv_list + 22
;;;518        {
;;;519            mk_data[offset++] = node->id;
        0x008156f2:    7920         y      LDRB     r0,[r4,#4]
        0x008156f4:    55a8        .U      STRB     r0,[r5,r6]
;;;520            mk_data[offset++] = node->type;
        0x008156f6:    1c76        v.      ADDS     r6,r6,#1
        0x008156f8:    7960        `y      LDRB     r0,[r4,#5]
        0x008156fa:    55a8        .U      STRB     r0,[r5,r6]
        0x008156fc:    1c76        v.      ADDS     r6,r6,#1
;;;521            if(1 == type)
        0x008156fe:    f1b90f01    ....    CMP      r9,#1
        0x00815702:    d012        ..      BEQ      0x81572a ; klvlist_2_data + 116
;;;522            {
;;;523                mk_data[offset++] = node->len>>8;
;;;524                mk_data[offset++] = node->len;
;;;525            }
;;;526            else
;;;527            {
;;;528                mk_data[offset++] = node->len;
        0x00815704:    79a0        .y      LDRB     r0,[r4,#6]
        0x00815706:    55a8        .U      STRB     r0,[r5,r6]
        0x00815708:    88e2        ..      LDRH     r2,[r4,#6]
        0x0081570a:    1c76        v.      ADDS     r6,r6,#1
;;;529            }
;;;530            if(node->len>0)
        0x0081570c:    b11a        ..      CBZ      r2,0x815716 ; klvlist_2_data + 96
;;;531            {
;;;532                memcpy(&mk_data[offset],node->data,node->len);
        0x0081570e:    19a8        ..      ADDS     r0,r5,r6
        0x00815710:    68a1        .h      LDR      r1,[r4,#8]
        0x00815712:    f444f3c2    D...    BL       __aeabi_memcpy ; 0x59e9a
;;;533            }
;;;534            offset += node->len;
        0x00815716:    88e0        ..      LDRH     r0,[r4,#6]
        0x00815718:    6824        $h      LDR      r4,[r4,#0]
        0x0081571a:    4406        .D      ADD      r6,r6,r0
        0x0081571c:    2c00        .,      CMP      r4,#0
        0x0081571e:    d1e8        ..      BNE      0x8156f2 ; klvlist_2_data + 60
;;;535            node = node->next;
;;;536        }
;;;537        *len = offset;
;;;538        *data = mk_data;
        0x00815720:    603e        >`      STR      r6,[r7,#0]
;;;539    
;;;540        return MTP_OK;
        0x00815722:    2000        .       MOVS     r0,#0
        0x00815724:    f8c85000    ...P    STR      r5,[r8,#0]
;;;541    }
        0x00815728:    e77b        {.      B        0x815622 ; make_klv_list + 22
        0x0081572a:    88e0        ..      LDRH     r0,[r4,#6]
        0x0081572c:    0a00        ..      LSRS     r0,r0,#8
        0x0081572e:    55a8        .U      STRB     r0,[r5,r6]
        0x00815730:    79a0        .y      LDRB     r0,[r4,#6]
        0x00815732:    1c76        v.      ADDS     r6,r6,#1
        0x00815734:    e7e7        ..      B        0x815706 ; klvlist_2_data + 80
    data_2_klvlist
;;;542    
;;;543    /***********************************************************
;;;544    *  Function: data_2_klvlist
;;;545    *  description:
;;;546    *  Input:   type:0-data中len占1个字节，1-data中len占两个字节
;;;547    *  Output:
;;;548    *  Return:
;;;549    ***********************************************************/
;;;550    mtp_ret data_2_klvlist(uint8_t *data,uint32_t len,klv_node_s **list,uint8_t type)
;;;551    {
        0x00815736:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x0081573a:    4699        .F      MOV      r9,r3
        0x0081573c:    4692        .F      MOV      r10,r2
        0x0081573e:    4688        .F      MOV      r8,r1
        0x00815740:    0006        ..      MOVS     r6,r0
        0x00815742:    d010        ..      BEQ      0x815766 ; data_2_klvlist + 48
;;;552        uint16_t dp_len = 0;
;;;553        //数据拆分成dp点列表  dpid+dp_tp+len+data
;;;554        if(NULL == data || NULL == list)
        0x00815744:    f1ba0f00    ....    CMP      r10,#0
        0x00815748:    d00d        ..      BEQ      0x815766 ; data_2_klvlist + 48
;;;555        {
;;;556            return MTP_INVALID_PARAM;
;;;557        }
;;;558    
;;;559        uint32_t offset = 0;
        0x0081574a:    2500        .%      MOVS     r5,#0
;;;560        klv_node_s *klv_list = NULL;
        0x0081574c:    462f        /F      MOV      r7,r5
;;;561        klv_node_s *node = NULL;
;;;562        do
;;;563        {
;;;564            // not full klv
;;;565            if(type == 1)
        0x0081574e:    f1b90f01    ....    CMP      r9,#1
        0x00815752:    eba80005    ....    SUB      r0,r8,r5
        0x00815756:    d008        ..      BEQ      0x81576a ; data_2_klvlist + 52
        0x00815758:    2803        .(      CMP      r0,#3
        0x0081575a:    d208        ..      BCS      0x81576e ; data_2_klvlist + 56
        0x0081575c:    4638        8F      MOV      r0,r7
        0x0081575e:    f7ffff47    ..G.    BL       free_klv_list ; 0x8155f0
        0x00815762:    2002        .       MOVS     r0,#2
        0x00815764:    e75d        ].      B        0x815622 ; make_klv_list + 22
        0x00815766:    2001        .       MOVS     r0,#1
        0x00815768:    e75b        [.      B        0x815622 ; make_klv_list + 22
;;;566            {
;;;567                if((len-offset) < 4)
        0x0081576a:    2804        .(      CMP      r0,#4
        0x0081576c:    d3f6        ..      BCC      0x81575c ; data_2_klvlist + 38
;;;568                {
;;;569                    free_klv_list(klv_list);
;;;570                    return MTP_COM_ERROR;
;;;571                }
;;;572            }
;;;573            else
;;;574            {
;;;575                if((len-offset) < 3)
;;;576                {
;;;577                    free_klv_list(klv_list);
;;;578                    return MTP_COM_ERROR;
;;;579                }
;;;580            }
;;;581    
;;;582            node = (klv_node_s *)tuya_ble_malloc(sizeof(klv_node_s));
        0x0081576e:    200c        .       MOVS     r0,#0xc
        0x00815770:    f7fffe0e    ....    BL       tuya_ble_malloc ; 0x815390
        0x00815774:    0004        ..      MOVS     r4,r0
;;;583            if(NULL == node)
        0x00815776:    d017        ..      BEQ      0x8157a8 ; data_2_klvlist + 114
;;;584            {
;;;585                free_klv_list(klv_list);
;;;586                return MTP_MALLOC_ERR;
;;;587            }
;;;588            memset(node,0,sizeof(sizeof(klv_node_s)));
        0x00815778:    2000        .       MOVS     r0,#0
;;;589            if(1 == type)
        0x0081577a:    6020         `      STR      r0,[r4,#0]
        0x0081577c:    f1b90f01    ....    CMP      r9,#1
        0x00815780:    eb060005    ....    ADD      r0,r6,r5
        0x00815784:    d015        ..      BEQ      0x8157b2 ; data_2_klvlist + 124
        0x00815786:    7880        .x      LDRB     r0,[r0,#2]
        0x00815788:    b118        ..      CBZ      r0,0x815792 ; data_2_klvlist + 92
        0x0081578a:    f7fffe01    ....    BL       tuya_ble_malloc ; 0x815390
        0x0081578e:    60a0        .`      STR      r0,[r4,#8]
        0x00815790:    b1a8        ..      CBZ      r0,0x8157be ; data_2_klvlist + 136
        0x00815792:    5d70        p]      LDRB     r0,[r6,r5]
        0x00815794:    1c6d        m.      ADDS     r5,r5,#1
        0x00815796:    7120         q      STRB     r0,[r4,#4]
        0x00815798:    5d70        p]      LDRB     r0,[r6,r5]
        0x0081579a:    1c6d        m.      ADDS     r5,r5,#1
        0x0081579c:    7160        `q      STRB     r0,[r4,#5]
        0x0081579e:    5d70        p]      LDRB     r0,[r6,r5]
        0x008157a0:    f1b90f01    ....    CMP      r9,#1
        0x008157a4:    d011        ..      BEQ      0x8157ca ; data_2_klvlist + 148
        0x008157a6:    e015        ..      B        0x8157d4 ; data_2_klvlist + 158
        0x008157a8:    4638        8F      MOV      r0,r7
        0x008157aa:    f7ffff21    ..!.    BL       free_klv_list ; 0x8155f0
        0x008157ae:    2005        .       MOVS     r0,#5
        0x008157b0:    e737        7.      B        0x815622 ; make_klv_list + 22
;;;590            {
;;;591                dp_len = (data[2+offset]<<8) + data[3+offset];
        0x008157b2:    78c1        .x      LDRB     r1,[r0,#3]
        0x008157b4:    7880        .x      LDRB     r0,[r0,#2]
        0x008157b6:    eb012000    ...     ADD      r0,r1,r0,LSL #8
        0x008157ba:    b280        ..      UXTH     r0,r0
        0x008157bc:    e7e4        ..      B        0x815788 ; data_2_klvlist + 82
;;;592            }
;;;593            else
;;;594            {
;;;595                dp_len = data[2+offset];
;;;596            }
;;;597    
;;;598            if(dp_len>0)
;;;599            {
;;;600                node->data=tuya_ble_malloc(dp_len);
;;;601                if(node->data==NULL)
;;;602                {
;;;603                    tuya_ble_free(node->data);
        0x008157be:    f7fffdf2    ....    BL       tuya_ble_free ; 0x8153a6
;;;604                    tuya_ble_free((uint8_t*)node);
        0x008157c2:    4620         F      MOV      r0,r4
        0x008157c4:    f7fffdef    ....    BL       tuya_ble_free ; 0x8153a6
;;;605                    free_klv_list(klv_list);
;;;606                    return MTP_MALLOC_ERR;
        0x008157c8:    e7ee        ..      B        0x8157a8 ; data_2_klvlist + 114
;;;607                }
;;;608            }
;;;609            node->id = data[offset++];
;;;610            node->type = data[offset++];
;;;611            if(1 == type)
;;;612            {
;;;613                //offset++;
;;;614                node->len = data[offset++];
        0x008157ca:    1c6d        m.      ADDS     r5,r5,#1
        0x008157cc:    80e0        ..      STRH     r0,[r4,#6]
;;;615                node->len = (node->len<<8) + data[offset++];
        0x008157ce:    5d71        q]      LDRB     r1,[r6,r5]
        0x008157d0:    eb012000    ...     ADD      r0,r1,r0,LSL #8
;;;616            }
;;;617            else
;;;618            {
;;;619                node->len = data[offset++];
        0x008157d4:    80e0        ..      STRH     r0,[r4,#6]
        0x008157d6:    1c6d        m.      ADDS     r5,r5,#1
;;;620            }
;;;621            if((len-offset) < node->len)
        0x008157d8:    88e2        ..      LDRH     r2,[r4,#6]
        0x008157da:    eba80005    ....    SUB      r0,r8,r5
        0x008157de:    4290        .B      CMP      r0,r2
        0x008157e0:    d206        ..      BCS      0x8157f0 ; data_2_klvlist + 186
;;;622            {   // is remain data len enougn?
;;;623                tuya_ble_free(node->data);
        0x008157e2:    68a0        .h      LDR      r0,[r4,#8]
        0x008157e4:    f7fffddf    ....    BL       tuya_ble_free ; 0x8153a6
;;;624                tuya_ble_free((uint8_t*)node);
        0x008157e8:    4620         F      MOV      r0,r4
        0x008157ea:    f7fffddc    ....    BL       tuya_ble_free ; 0x8153a6
;;;625                free_klv_list(klv_list);
;;;626                return MTP_COM_ERROR;
        0x008157ee:    e7b5        ..      B        0x81575c ; data_2_klvlist + 38
;;;627            }
;;;628            if(node->len>0)
        0x008157f0:    b11a        ..      CBZ      r2,0x8157fa ; data_2_klvlist + 196
;;;629                memcpy(node->data,&data[offset],node->len);
        0x008157f2:    1971        q.      ADDS     r1,r6,r5
        0x008157f4:    68a0        .h      LDR      r0,[r4,#8]
        0x008157f6:    f444f350    D.P.    BL       __aeabi_memcpy ; 0x59e9a
;;;630            
;;;631            offset += node->len;
        0x008157fa:    88e0        ..      LDRH     r0,[r4,#6]
        0x008157fc:    6027        '`      STR      r7,[r4,#0]
        0x008157fe:    4405        .D      ADD      r5,r5,r0
;;;632    
;;;633            node->next = klv_list;
;;;634            klv_list = node;
        0x00815800:    4627        'F      MOV      r7,r4
;;;635        } while(offset < len);
        0x00815802:    4545        EE      CMP      r5,r8
        0x00815804:    d3a3        ..      BCC      0x81574e ; data_2_klvlist + 24
;;;636    
;;;637        if(NULL == klv_list)
;;;638        {
;;;639            return MTP_COM_ERROR;
;;;640        }
;;;641        *list = klv_list;
;;;642        return MTP_OK;
        0x00815806:    2000        .       MOVS     r0,#0
        0x00815808:    f8ca4000    ...@    STR      r4,[r10,#0]
;;;643    }
        0x0081580c:    e709        ..      B        0x815622 ; make_klv_list + 22
    $d
        0x0081580e:    0000        ..      DCW    0
        0x00815810:    002099e2    .. .    DCD    2136546
    $t
    .text
    auth_settings_crc_ok
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_storage.c
;;;100    {
        0x00815814:    b570        p.      PUSH     {r4-r6,lr}
        0x00815816:    4604        .F      MOV      r4,r0
        0x00815818:    6800        .h      LDR      r0,[r0,#0]
        0x0081581a:    460d        .F      MOV      r5,r1
        0x0081581c:    1c40        @.      ADDS     r0,r0,#1
        0x0081581e:    d014        ..      BEQ      0x81584a ; auth_settings_crc_ok + 54
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_storage.c (96)
        0x00815820:    2200        ."      MOVS     r2,#0
        0x00815822:    21dc        .!      MOVS     r1,#0xdc
        0x00815824:    1d20         .      ADDS     r0,r4,#4
        0x00815826:    f000ff05    ....    BL       tuya_ble_crc32_compute ; 0x816634
;;;97     }
;;;98     
;;;99     static bool auth_settings_crc_ok(tuya_ble_auth_settings_t const * p_settings,uint8_t *flash_update)
;;;100    {
;;;101        uint32_t crc,crc_old;
;;;102        if (p_settings->crc != 0xFFFFFFFF)
;;;103        {
;;;104            // CRC is set. Content must be valid
;;;105            crc = auth_settings_crc_get(p_settings);
;;;106            if (crc == p_settings->crc)
        0x0081582a:    6821        !h      LDR      r1,[r4,#0]
        0x0081582c:    4281        .B      CMP      r1,r0
        0x0081582e:    d101        ..      BNE      0x815834 ; auth_settings_crc_ok + 32
;;;107            {
;;;108                return true;
        0x00815830:    2001        .       MOVS     r0,#1
        0x00815832:    bd70        p.      POP      {r4-r6,pc}
;;;109            }
;;;110            else
;;;111            {
;;;112                crc_old = tuya_ble_crc32_compute((uint8_t*)(p_settings) + 4, sizeof(tuya_ble_auth_settings_old_t) - 4, NULL);
        0x00815834:    2200        ."      MOVS     r2,#0
        0x00815836:    2150        P!      MOVS     r1,#0x50
        0x00815838:    1d20         .      ADDS     r0,r4,#4
        0x0081583a:    f000fefb    ....    BL       tuya_ble_crc32_compute ; 0x816634
;;;113                if(crc_old == p_settings->crc)
        0x0081583e:    6821        !h      LDR      r1,[r4,#0]
        0x00815840:    4281        .B      CMP      r1,r0
        0x00815842:    d102        ..      BNE      0x81584a ; auth_settings_crc_ok + 54
;;;114                {
;;;115                    *flash_update = 1;
        0x00815844:    2001        .       MOVS     r0,#1
        0x00815846:    7028        (p      STRB     r0,[r5,#0]
;;;116                    return true;
        0x00815848:    e7f2        ..      B        0x815830 ; auth_settings_crc_ok + 28
;;;117                }
;;;118            }
;;;119        }
;;;120        return false;
        0x0081584a:    2000        .       MOVS     r0,#0
;;;121    }
        0x0081584c:    bd70        p.      POP      {r4-r6,pc}
    sys_settings_crc_ok
;;;122    
;;;123    
;;;124    static uint32_t sys_settings_crc_get(tuya_ble_sys_settings_t const * p_settings)
;;;125    {
;;;126        // The crc is calculated from the s_dfu_settings struct, except the crc itself and the init command
;;;127        return tuya_ble_crc32_compute((uint8_t*)(p_settings) + 4, sizeof(tuya_ble_sys_settings_t) - 4, NULL);
;;;128    }
;;;129    
;;;130    
;;;131    
;;;132    static bool sys_settings_crc_ok(tuya_ble_sys_settings_t  const* p_settings,uint8_t *flash_update)
;;;133    {
        0x0081584e:    b570        p.      PUSH     {r4-r6,lr}
        0x00815850:    4604        .F      MOV      r4,r0
        0x00815852:    6800        .h      LDR      r0,[r0,#0]
        0x00815854:    460d        .F      MOV      r5,r1
        0x00815856:    1c40        @.      ADDS     r0,r0,#1
        0x00815858:    d014        ..      BEQ      0x815884 ; sys_settings_crc_ok + 54
        0x0081585a:    2200        ."      MOVS     r2,#0
        0x0081585c:    21dc        .!      MOVS     r1,#0xdc
        0x0081585e:    1d20         .      ADDS     r0,r4,#4
        0x00815860:    f000fee8    ....    BL       tuya_ble_crc32_compute ; 0x816634
;;;134        uint32_t crc,crc_old;
;;;135        if (p_settings->crc != 0xFFFFFFFF)
;;;136        {
;;;137            // CRC is set. Content must be valid
;;;138            crc = sys_settings_crc_get(p_settings);
;;;139            if (crc == p_settings->crc)
        0x00815864:    6821        !h      LDR      r1,[r4,#0]
        0x00815866:    4281        .B      CMP      r1,r0
        0x00815868:    d101        ..      BNE      0x81586e ; sys_settings_crc_ok + 32
;;;140            {
;;;141                return true;
        0x0081586a:    2001        .       MOVS     r0,#1
        0x0081586c:    bd70        p.      POP      {r4-r6,pc}
;;;142            }
;;;143            else
;;;144            {
;;;145                crc_old = tuya_ble_crc32_compute((uint8_t*)(p_settings) + 4, sizeof(tuya_ble_sys_settings_old_t) - 4, NULL);
        0x0081586e:    2200        ."      MOVS     r2,#0
        0x00815870:    215c        \!      MOVS     r1,#0x5c
        0x00815872:    1d20         .      ADDS     r0,r4,#4
        0x00815874:    f000fede    ....    BL       tuya_ble_crc32_compute ; 0x816634
;;;146                if(crc_old == p_settings->crc)
        0x00815878:    6821        !h      LDR      r1,[r4,#0]
        0x0081587a:    4281        .B      CMP      r1,r0
        0x0081587c:    d102        ..      BNE      0x815884 ; sys_settings_crc_ok + 54
;;;147                {
;;;148                    *flash_update = 1;
        0x0081587e:    2001        .       MOVS     r0,#1
        0x00815880:    7028        (p      STRB     r0,[r5,#0]
;;;149                    return true;
        0x00815882:    e7f2        ..      B        0x81586a ; sys_settings_crc_ok + 28
;;;150                }
;;;151            }
;;;152        }
;;;153        return false;
        0x00815884:    2000        .       MOVS     r0,#0
;;;154    }
        0x00815886:    bd70        p.      POP      {r4-r6,pc}
    tuya_ble_storage_save_sys_settings
;;;155    
;;;156    
;;;157    uint32_t tuya_ble_storage_load_settings(void)
;;;158    {
;;;159        uint32_t err_code = 0;
;;;160        bool settings_valid ;
;;;161        bool settings_backup_valid;
;;;162        uint8_t auth_settings_flag = 1;
;;;163        uint8_t sys_settings_flag = 1;
;;;164        uint8_t auth_settings_update = 0;
;;;165        uint8_t sys_settings_update = 0;
;;;166        tuya_ble_storage_auth_settings_t *p_storage_settings_auth = NULL;
;;;167        tuya_ble_storage_sys_settings_t *p_storage_settings_sys = NULL;
;;;168    
;;;169        p_storage_settings_auth = (tuya_ble_storage_auth_settings_t*)tuya_ble_malloc(sizeof(tuya_ble_storage_auth_settings_t));
;;;170    
;;;171        if(p_storage_settings_auth==NULL)
;;;172        {
;;;173            TUYA_BLE_LOG_ERROR("p_storage_settings_auth malloc failed.");
;;;174            memset(&tuya_ble_current_para.auth_settings,0,sizeof(tuya_ble_auth_settings_t));
;;;175            auth_settings_flag = 0;
;;;176        }
;;;177        else
;;;178        {
;;;179            memset(p_storage_settings_auth,0,sizeof(tuya_ble_storage_auth_settings_t));
;;;180        }
;;;181    
;;;182        if(auth_settings_flag==1)
;;;183        {
;;;184            tuya_ble_nv_read(TUYA_BLE_AUTH_FLASH_ADDR,(uint8_t *)&p_storage_settings_auth->flash_settings_auth,sizeof(tuya_ble_auth_settings_t));
;;;185            tuya_ble_nv_read(TUYA_BLE_AUTH_FLASH_BACKUP_ADDR,(uint8_t *)&p_storage_settings_auth->flash_settings_auth_backup,sizeof(tuya_ble_auth_settings_t));
;;;186    
;;;187            settings_valid = auth_settings_crc_ok(&p_storage_settings_auth->flash_settings_auth,&auth_settings_update);
;;;188            settings_backup_valid = auth_settings_crc_ok(&p_storage_settings_auth->flash_settings_auth_backup,&auth_settings_update);
;;;189    
;;;190            if(settings_valid)
;;;191            {
;;;192                memcpy(&tuya_ble_current_para.auth_settings,&p_storage_settings_auth->flash_settings_auth,sizeof(tuya_ble_auth_settings_t));
;;;193            }
;;;194            else if(settings_backup_valid)
;;;195            {
;;;196                memcpy(&tuya_ble_current_para.auth_settings,&p_storage_settings_auth->flash_settings_auth_backup,sizeof(tuya_ble_auth_settings_t));
;;;197            }
;;;198            else
;;;199            {
;;;200                memset(&tuya_ble_current_para.auth_settings,0,sizeof(tuya_ble_auth_settings_t));
;;;201                auth_settings_flag = 0;
;;;202            }
;;;203            if(auth_settings_update==1)
;;;204            {
;;;205                tuya_ble_storage_save_auth_settings();
;;;206                auth_settings_update = 0;
;;;207            }
;;;208    
;;;209            tuya_ble_free((uint8_t *)p_storage_settings_auth);
;;;210    
;;;211        }
;;;212    
;;;213        p_storage_settings_sys = (tuya_ble_storage_sys_settings_t*)tuya_ble_malloc(sizeof(tuya_ble_storage_sys_settings_t));
;;;214    
;;;215        if(p_storage_settings_sys==NULL)
;;;216        {
;;;217            TUYA_BLE_LOG_ERROR("p_storage_settings_sys malloc failed.");
;;;218            memset(&tuya_ble_current_para.sys_settings,0,sizeof(tuya_ble_sys_settings_t));
;;;219            sys_settings_flag = 0;
;;;220        }
;;;221        else
;;;222        {
;;;223            memset(p_storage_settings_sys,0,sizeof(tuya_ble_storage_sys_settings_t));
;;;224        }
;;;225    
;;;226        if(sys_settings_flag==1)
;;;227        {
;;;228            tuya_ble_nv_read(TUYA_BLE_SYS_FLASH_ADDR,(uint8_t *)&p_storage_settings_sys->flash_settings_sys,sizeof(tuya_ble_sys_settings_t));
;;;229            tuya_ble_nv_read(TUYA_BLE_SYS_FLASH_BACKUP_ADDR,(uint8_t *)&p_storage_settings_sys->flash_settings_sys_backup,sizeof(tuya_ble_sys_settings_t));
;;;230    
;;;231            settings_valid = sys_settings_crc_ok(&p_storage_settings_sys->flash_settings_sys ,&sys_settings_update);
;;;232            settings_backup_valid = sys_settings_crc_ok(&p_storage_settings_sys->flash_settings_sys_backup,&sys_settings_update);
;;;233    
;;;234            if(settings_valid)
;;;235            {
;;;236                memcpy(&tuya_ble_current_para.sys_settings,&p_storage_settings_sys->flash_settings_sys,sizeof(tuya_ble_sys_settings_t));
;;;237            }
;;;238            else if(settings_backup_valid)
;;;239            {
;;;240                memcpy(&tuya_ble_current_para.sys_settings,&p_storage_settings_sys->flash_settings_sys_backup,sizeof(tuya_ble_sys_settings_t));
;;;241            }
;;;242            else
;;;243            {
;;;244                memset(&tuya_ble_current_para.sys_settings,0,sizeof(tuya_ble_sys_settings_t));
;;;245                tuya_ble_current_para.sys_settings.factory_test_flag = 0xFF;
;;;246                sys_settings_flag = 0;
;;;247            }
;;;248    
;;;249            if(sys_settings_update==1)
;;;250            {
;;;251                tuya_ble_current_para.sys_settings.factory_test_flag = 0xFF;
;;;252                tuya_ble_storage_save_sys_settings();
;;;253                sys_settings_update = 0;
;;;254            }
;;;255    
;;;256            tuya_ble_free((uint8_t *)p_storage_settings_sys);
;;;257    
;;;258        }
;;;259    
;;;260        tuya_ble_current_para.pid_type = tuya_ble_current_para.sys_settings.pid_type;
;;;261        tuya_ble_current_para.pid_len = tuya_ble_current_para.sys_settings.pid_len;
;;;262        memcpy(tuya_ble_current_para.pid,tuya_ble_current_para.sys_settings.common_pid,tuya_ble_current_para.pid_len);
;;;263    
;;;264    
;;;265        return err_code;
;;;266    }
;;;267    
;;;268    
;;;269    uint32_t tuya_ble_storage_save_auth_settings(void)
;;;270    {
;;;271        uint32_t err_code=0;
;;;272    
;;;273        tuya_ble_current_para.auth_settings.crc = tuya_ble_crc32_compute((uint8_t *)&tuya_ble_current_para.auth_settings+4,sizeof(tuya_ble_current_para.auth_settings)-4,NULL);
;;;274    
;;;275        if(tuya_ble_nv_erase(TUYA_BLE_AUTH_FLASH_ADDR,TUYA_NV_ERASE_MIN_SIZE)==TUYA_BLE_SUCCESS)
;;;276        {
;;;277            err_code = tuya_ble_nv_write(TUYA_BLE_AUTH_FLASH_ADDR,(uint8_t *)&tuya_ble_current_para.auth_settings,sizeof(tuya_ble_auth_settings_t));
;;;278    
;;;279            if(err_code == TUYA_BLE_SUCCESS)
;;;280            {
;;;281                TUYA_BLE_LOG_DEBUG("write flash_settings_auth data succeed!");
;;;282    
;;;283                if(tuya_ble_nv_erase(TUYA_BLE_AUTH_FLASH_BACKUP_ADDR,TUYA_NV_ERASE_MIN_SIZE)==TUYA_BLE_SUCCESS)
;;;284                {
;;;285                    if(tuya_ble_nv_write(TUYA_BLE_AUTH_FLASH_BACKUP_ADDR,(uint8_t *)&tuya_ble_current_para.auth_settings,sizeof(tuya_ble_auth_settings_t))!=TUYA_BLE_SUCCESS)
;;;286                    {
;;;287                        TUYA_BLE_LOG_ERROR("write flash_settings_auth data backup failed!");
;;;288                        err_code = 1;
;;;289                    }
;;;290                }
;;;291                else
;;;292                {
;;;293                    TUYA_BLE_LOG_ERROR("erase flash_settings_auth data backup failed!");
;;;294                    err_code = 1;
;;;295                }
;;;296            }
;;;297            else
;;;298            {
;;;299                TUYA_BLE_LOG_ERROR("write flash_settings_auth data failed!");
;;;300                err_code = 1;
;;;301            }
;;;302        }
;;;303        else
;;;304        {
;;;305            TUYA_BLE_LOG_ERROR("erase flash_settings_auth data failed!");
;;;306            err_code = 1;
;;;307        }
;;;308        return err_code;
;;;309    
;;;310    }
;;;311    
;;;312    uint32_t tuya_ble_storage_save_sys_settings(void)
;;;313    {
        0x00815888:    e92d41f0    -..A    PUSH     {r4-r8,lr}
;;;314        uint32_t err_code=0;
;;;315    
;;;316    #if (TUYA_BLE_DEVICE_AUTH_DATA_STORE)
;;;317        
;;;318        tuya_ble_current_para.sys_settings.crc = tuya_ble_crc32_compute((uint8_t *)&tuya_ble_current_para.sys_settings+4,sizeof(tuya_ble_sys_settings_t)-4,NULL);
        0x0081588c:    2200        ."      MOVS     r2,#0
        0x0081588e:    21dc        .!      MOVS     r1,#0xdc
        0x00815890:    48c3        .H      LDR      r0,[pc,#780] ; [0x815ba0] = 0x2098b8
        0x00815892:    f000fecf    ....    BL       tuya_ble_crc32_compute ; 0x816634
        0x00815896:    49c2        .I      LDR      r1,[pc,#776] ; [0x815ba0] = 0x2098b8
        0x00815898:    f44f7680    O..v    MOV      r6,#0x100
        0x0081589c:    39e4        .9      SUBS     r1,r1,#0xe4
;;;319        
;;;320        if(tuya_ble_nv_erase(TUYA_BLE_SYS_FLASH_ADDR,TUYA_NV_ERASE_MIN_SIZE)==TUYA_BLE_SUCCESS)
        0x0081589e:    0074        t.      LSLS     r4,r6,#1
        0x008158a0:    f8c100e0    ....    STR      r0,[r1,#0xe0]
        0x008158a4:    4631        1F      MOV      r1,r6
        0x008158a6:    4620         F      MOV      r0,r4
        0x008158a8:    f005f871    ..q.    BL       tuya_ble_nv_erase ; 0x81a98e
        0x008158ac:    4dbd        .M      LDR      r5,[pc,#756] ; [0x815ba4] = 0x21103002
        0x008158ae:    b128        (.      CBZ      r0,0x8158bc ; tuya_ble_storage_save_sys_settings + 52
        0x008158b0:    a0bd        ..      ADR      r0,{pc}+0x2f8 ; 0x815ba8
        0x008158b2:    f005f97a    ..z.    BL       get_args ; 0x81abaa
        0x008158b6:    4602        .F      MOV      r2,r0
        0x008158b8:    49c8        .I      LDR      r1,[pc,#800] ; [0x815bdc] = 0x8803c10
        0x008158ba:    e032        2.      B        0x815922 ; tuya_ble_storage_save_sys_settings + 154
;;;321        {
;;;322            err_code = tuya_ble_nv_write(TUYA_BLE_SYS_FLASH_ADDR,(uint8_t *)&tuya_ble_current_para.sys_settings,sizeof(tuya_ble_sys_settings_t));
        0x008158bc:    49b8        .I      LDR      r1,[pc,#736] ; [0x815ba0] = 0x2098b8
        0x008158be:    22e0        ."      MOVS     r2,#0xe0
        0x008158c0:    1f09        ..      SUBS     r1,r1,#4
        0x008158c2:    460f        .F      MOV      r7,r1
        0x008158c4:    4620         F      MOV      r0,r4
        0x008158c6:    f005f864    ..d.    BL       tuya_ble_nv_write ; 0x81a992
        0x008158ca:    0004        ..      MOVS     r4,r0
;;;323    
;;;324            if(err_code == TUYA_BLE_SUCCESS)
        0x008158cc:    d006        ..      BEQ      0x8158dc ; tuya_ble_storage_save_sys_settings + 84
        0x008158ce:    a0c4        ..      ADR      r0,{pc}+0x312 ; 0x815be0
        0x008158d0:    f005f96b    ..k.    BL       get_args ; 0x81abaa
        0x008158d4:    49c1        .I      LDR      r1,[pc,#772] ; [0x815bdc] = 0x8803c10
        0x008158d6:    4602        .F      MOV      r2,r0
        0x008158d8:    3934        49      SUBS     r1,r1,#0x34
        0x008158da:    e022        ".      B        0x815922 ; tuya_ble_storage_save_sys_settings + 154
;;;325            {
;;;326                TUYA_BLE_LOG_INFO("write flash_settings_sys data succeed!");
        0x008158dc:    a0cd        ..      ADR      r0,{pc}+0x338 ; 0x815c14
        0x008158de:    f005f964    ..d.    BL       get_args ; 0x81abaa
        0x008158e2:    49be        .I      LDR      r1,[pc,#760] ; [0x815bdc] = 0x8803c10
        0x008158e4:    4602        .F      MOV      r2,r0
        0x008158e6:    39e4        .9      SUBS     r1,r1,#0xe4
        0x008158e8:    4628        (F      MOV      r0,r5
        0x008158ea:    f7f2d8b8    ....    BL       log_buffer ; 0x7a5e
;;;327    
;;;328                if(tuya_ble_nv_erase(TUYA_BLE_SYS_FLASH_BACKUP_ADDR,TUYA_NV_ERASE_MIN_SIZE)==TUYA_BLE_SUCCESS)
        0x008158ee:    4631        1F      MOV      r1,r6
        0x008158f0:    f44f7640    O.@v    MOV      r6,#0x300
        0x008158f4:    4630        0F      MOV      r0,r6
        0x008158f6:    f005f84a    ..J.    BL       tuya_ble_nv_erase ; 0x81a98e
        0x008158fa:    b130        0.      CBZ      r0,0x81590a ; tuya_ble_storage_save_sys_settings + 130
        0x008158fc:    a0d3        ..      ADR      r0,{pc}+0x350 ; 0x815c4c
        0x008158fe:    f005f954    ..T.    BL       get_args ; 0x81abaa
        0x00815902:    49b6        .I      LDR      r1,[pc,#728] ; [0x815bdc] = 0x8803c10
        0x00815904:    4602        .F      MOV      r2,r0
        0x00815906:    3970        p9      SUBS     r1,r1,#0x70
        0x00815908:    e00b        ..      B        0x815922 ; tuya_ble_storage_save_sys_settings + 154
;;;329                {
;;;330                    if(tuya_ble_nv_write(TUYA_BLE_SYS_FLASH_BACKUP_ADDR,(uint8_t *)&tuya_ble_current_para.sys_settings,sizeof(tuya_ble_sys_settings_t))!=TUYA_BLE_SUCCESS)
        0x0081590a:    22e0        ."      MOVS     r2,#0xe0
        0x0081590c:    4639        9F      MOV      r1,r7
        0x0081590e:    4630        0F      MOV      r0,r6
        0x00815910:    f005f83f    ..?.    BL       tuya_ble_nv_write ; 0x81a992
        0x00815914:    b148        H.      CBZ      r0,0x81592a ; tuya_ble_storage_save_sys_settings + 162
;;;331                    {
;;;332                        TUYA_BLE_LOG_ERROR("write flash_settings_sys data backup failed!");
        0x00815916:    a0dc        ..      ADR      r0,{pc}+0x372 ; 0x815c88
        0x00815918:    f005f947    ..G.    BL       get_args ; 0x81abaa
        0x0081591c:    49af        .I      LDR      r1,[pc,#700] ; [0x815bdc] = 0x8803c10
        0x0081591e:    4602        .F      MOV      r2,r0
        0x00815920:    39ac        .9      SUBS     r1,r1,#0xac
;;;333                        err_code = 1;
;;;334                    }
;;;335                }
;;;336                else
;;;337                {
;;;338                    TUYA_BLE_LOG_ERROR("erase flash_settings_sys data backup failed!");
;;;339                    err_code = 1;
;;;340                }
;;;341    
;;;342            }
;;;343            else
;;;344            {
;;;345                TUYA_BLE_LOG_ERROR("write flash_settings_sys data failed!");
        0x00815922:    4628        (F      MOV      r0,r5
        0x00815924:    f7f2d89b    ....    BL       log_buffer ; 0x7a5e
;;;346                err_code = 1;
        0x00815928:    2401        .$      MOVS     r4,#1
;;;347            }
;;;348        }
;;;349        else
;;;350        {
;;;351            TUYA_BLE_LOG_ERROR("erase flash_settings_sys data failed!");
;;;352            err_code = 1;
;;;353        }
;;;354    
;;;355    #endif
;;;356    
;;;357        return err_code;
        0x0081592a:    4620         F      MOV      r0,r4
;;;358    }
        0x0081592c:    e8bd81f0    ....    POP      {r4-r8,pc}
    tuya_ble_storage_save_auth_settings
        0x00815930:    b570        p.      PUSH     {r4-r6,lr}
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_storage.c (273)
        0x00815932:    4c9b        .L      LDR      r4,[pc,#620] ; [0x815ba0] = 0x2098b8
        0x00815934:    2200        ."      MOVS     r2,#0
        0x00815936:    3ce4        .<      SUBS     r4,r4,#0xe4
        0x00815938:    21dc        .!      MOVS     r1,#0xdc
        0x0081593a:    1d20         .      ADDS     r0,r4,#4
        0x0081593c:    f000fe7a    ..z.    BL       tuya_ble_crc32_compute ; 0x816634
;;;274    
;;;275        if(tuya_ble_nv_erase(TUYA_BLE_AUTH_FLASH_ADDR,TUYA_NV_ERASE_MIN_SIZE)==TUYA_BLE_SUCCESS)
        0x00815940:    f44f7680    O..v    MOV      r6,#0x100
        0x00815944:    6020         `      STR      r0,[r4,#0]
        0x00815946:    4631        1F      MOV      r1,r6
        0x00815948:    2000        .       MOVS     r0,#0
        0x0081594a:    f005f820    .. .    BL       tuya_ble_nv_erase ; 0x81a98e
        0x0081594e:    4d95        .M      LDR      r5,[pc,#596] ; [0x815ba4] = 0x21103002
        0x00815950:    b128        (.      CBZ      r0,0x81595e ; tuya_ble_storage_save_auth_settings + 46
        0x00815952:    a0dc        ..      ADR      r0,{pc}+0x372 ; 0x815cc4
        0x00815954:    f005f929    ..).    BL       get_args ; 0x81abaa
        0x00815958:    4602        .F      MOV      r2,r0
        0x0081595a:    49e8        .I      LDR      r1,[pc,#928] ; [0x815cfc] = 0x8803af4
        0x0081595c:    e030        0.      B        0x8159c0 ; tuya_ble_storage_save_auth_settings + 144
;;;276        {
;;;277            err_code = tuya_ble_nv_write(TUYA_BLE_AUTH_FLASH_ADDR,(uint8_t *)&tuya_ble_current_para.auth_settings,sizeof(tuya_ble_auth_settings_t));
        0x0081595e:    4990        .I      LDR      r1,[pc,#576] ; [0x815ba0] = 0x2098b8
        0x00815960:    22e0        ."      MOVS     r2,#0xe0
        0x00815962:    39e4        .9      SUBS     r1,r1,#0xe4
        0x00815964:    2000        .       MOVS     r0,#0
        0x00815966:    f005f814    ....    BL       tuya_ble_nv_write ; 0x81a992
        0x0081596a:    0004        ..      MOVS     r4,r0
;;;278    
;;;279            if(err_code == TUYA_BLE_SUCCESS)
        0x0081596c:    d006        ..      BEQ      0x81597c ; tuya_ble_storage_save_auth_settings + 76
        0x0081596e:    a0e4        ..      ADR      r0,{pc}+0x392 ; 0x815d00
        0x00815970:    f005f91b    ....    BL       get_args ; 0x81abaa
        0x00815974:    49e1        .I      LDR      r1,[pc,#900] ; [0x815cfc] = 0x8803af4
        0x00815976:    4602        .F      MOV      r2,r0
        0x00815978:    3938        89      SUBS     r1,r1,#0x38
        0x0081597a:    e021        !.      B        0x8159c0 ; tuya_ble_storage_save_auth_settings + 144
;;;280            {
;;;281                TUYA_BLE_LOG_DEBUG("write flash_settings_auth data succeed!");
        0x0081597c:    a0ee        ..      ADR      r0,{pc}+0x3bc ; 0x815d38
        0x0081597e:    f005f914    ....    BL       get_args ; 0x81abaa
        0x00815982:    49de        .I      LDR      r1,[pc,#888] ; [0x815cfc] = 0x8803af4
        0x00815984:    4602        .F      MOV      r2,r0
        0x00815986:    39e8        .9      SUBS     r1,r1,#0xe8
        0x00815988:    4628        (F      MOV      r0,r5
        0x0081598a:    f7f2d868    ..h.    BL       log_buffer ; 0x7a5e
;;;282    
;;;283                if(tuya_ble_nv_erase(TUYA_BLE_AUTH_FLASH_BACKUP_ADDR,TUYA_NV_ERASE_MIN_SIZE)==TUYA_BLE_SUCCESS)
        0x0081598e:    4630        0F      MOV      r0,r6
        0x00815990:    4631        1F      MOV      r1,r6
        0x00815992:    f004fffc    ....    BL       tuya_ble_nv_erase ; 0x81a98e
        0x00815996:    b130        0.      CBZ      r0,0x8159a6 ; tuya_ble_storage_save_auth_settings + 118
        0x00815998:    a0f5        ..      ADR      r0,{pc}+0x3d8 ; 0x815d70
        0x0081599a:    f005f906    ....    BL       get_args ; 0x81abaa
        0x0081599e:    49d7        .I      LDR      r1,[pc,#860] ; [0x815cfc] = 0x8803af4
        0x008159a0:    4602        .F      MOV      r2,r0
        0x008159a2:    3974        t9      SUBS     r1,r1,#0x74
        0x008159a4:    e00c        ..      B        0x8159c0 ; tuya_ble_storage_save_auth_settings + 144
;;;284                {
;;;285                    if(tuya_ble_nv_write(TUYA_BLE_AUTH_FLASH_BACKUP_ADDR,(uint8_t *)&tuya_ble_current_para.auth_settings,sizeof(tuya_ble_auth_settings_t))!=TUYA_BLE_SUCCESS)
        0x008159a6:    497e        ~I      LDR      r1,[pc,#504] ; [0x815ba0] = 0x2098b8
        0x008159a8:    22e0        ."      MOVS     r2,#0xe0
        0x008159aa:    39e4        .9      SUBS     r1,r1,#0xe4
        0x008159ac:    4630        0F      MOV      r0,r6
        0x008159ae:    f004fff0    ....    BL       tuya_ble_nv_write ; 0x81a992
        0x008159b2:    b148        H.      CBZ      r0,0x8159c8 ; tuya_ble_storage_save_auth_settings + 152
;;;286                    {
;;;287                        TUYA_BLE_LOG_ERROR("write flash_settings_auth data backup failed!");
        0x008159b4:    a0fd        ..      ADR      r0,{pc}+0x3f8 ; 0x815dac
        0x008159b6:    f005f8f8    ....    BL       get_args ; 0x81abaa
        0x008159ba:    49d0        .I      LDR      r1,[pc,#832] ; [0x815cfc] = 0x8803af4
        0x008159bc:    4602        .F      MOV      r2,r0
        0x008159be:    39b0        .9      SUBS     r1,r1,#0xb0
;;;288                        err_code = 1;
;;;289                    }
;;;290                }
;;;291                else
;;;292                {
;;;293                    TUYA_BLE_LOG_ERROR("erase flash_settings_auth data backup failed!");
;;;294                    err_code = 1;
;;;295                }
;;;296            }
;;;297            else
;;;298            {
;;;299                TUYA_BLE_LOG_ERROR("write flash_settings_auth data failed!");
        0x008159c0:    4628        (F      MOV      r0,r5
        0x008159c2:    f7f2d84c    ..L.    BL       log_buffer ; 0x7a5e
;;;300                err_code = 1;
        0x008159c6:    2401        .$      MOVS     r4,#1
;;;301            }
;;;302        }
;;;303        else
;;;304        {
;;;305            TUYA_BLE_LOG_ERROR("erase flash_settings_auth data failed!");
;;;306            err_code = 1;
;;;307        }
;;;308        return err_code;
        0x008159c8:    4620         F      MOV      r0,r4
;;;309    
;;;310    }
        0x008159ca:    bd70        p.      POP      {r4-r6,pc}
    tuya_ble_storage_load_settings
        0x008159cc:    e92d5ffc    -.._    PUSH     {r2-r12,lr}
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_storage.c (159)
        0x008159d0:    f04f0a00    O...    MOV      r10,#0
        0x008159d4:    f44f75e0    O..u    MOV      r5,#0x1c0
;;;160        bool settings_valid ;
;;;161        bool settings_backup_valid;
;;;162        uint8_t auth_settings_flag = 1;
;;;163        uint8_t sys_settings_flag = 1;
;;;164        uint8_t auth_settings_update = 0;
        0x008159d8:    4656        VF      MOV      r6,r10
        0x008159da:    f88da000    ....    STRB     r10,[sp,#0]
;;;165        uint8_t sys_settings_update = 0;
        0x008159de:    f88da004    ....    STRB     r10,[sp,#4]
;;;166        tuya_ble_storage_auth_settings_t *p_storage_settings_auth = NULL;
;;;167        tuya_ble_storage_sys_settings_t *p_storage_settings_sys = NULL;
;;;168    
;;;169        p_storage_settings_auth = (tuya_ble_storage_auth_settings_t*)tuya_ble_malloc(sizeof(tuya_ble_storage_auth_settings_t));
        0x008159e2:    4628        (F      MOV      r0,r5
        0x008159e4:    f7fffcd4    ....    BL       tuya_ble_malloc ; 0x815390
        0x008159e8:    f8df91b8    ....    LDR      r9,[pc,#440] ; [0x815ba4] = 0x21103002
        0x008159ec:    0004        ..      MOVS     r4,r0
;;;170    
;;;171        if(p_storage_settings_auth==NULL)
        0x008159ee:    d01e        ..      BEQ      0x815a2e ; tuya_ble_storage_load_settings + 98
;;;172        {
;;;173            TUYA_BLE_LOG_ERROR("p_storage_settings_auth malloc failed.");
;;;174            memset(&tuya_ble_current_para.auth_settings,0,sizeof(tuya_ble_auth_settings_t));
;;;175            auth_settings_flag = 0;
;;;176        }
;;;177        else
;;;178        {
;;;179            memset(p_storage_settings_auth,0,sizeof(tuya_ble_storage_auth_settings_t));
        0x008159f0:    4629        )F      MOV      r1,r5
        0x008159f2:    f444f335    D.5.    BL       __aeabi_memclr4 ; 0x5a060
;;;180        }
;;;181    
;;;182        if(auth_settings_flag==1)
;;;183        {
;;;184            tuya_ble_nv_read(TUYA_BLE_AUTH_FLASH_ADDR,(uint8_t *)&p_storage_settings_auth->flash_settings_auth,sizeof(tuya_ble_auth_settings_t));
        0x008159f6:    22e0        ."      MOVS     r2,#0xe0
        0x008159f8:    4621        !F      MOV      r1,r4
        0x008159fa:    2000        .       MOVS     r0,#0
        0x008159fc:    f004ffd4    ....    BL       tuya_ble_nv_read ; 0x81a9a8
;;;185            tuya_ble_nv_read(TUYA_BLE_AUTH_FLASH_BACKUP_ADDR,(uint8_t *)&p_storage_settings_auth->flash_settings_auth_backup,sizeof(tuya_ble_auth_settings_t));
        0x00815a00:    f10401e0    ....    ADD      r1,r4,#0xe0
        0x00815a04:    22e0        ."      MOVS     r2,#0xe0
        0x00815a06:    460f        .F      MOV      r7,r1
        0x00815a08:    f44f7080    O..p    MOV      r0,#0x100
        0x00815a0c:    f004ffcc    ....    BL       tuya_ble_nv_read ; 0x81a9a8
;;;186    
;;;187            settings_valid = auth_settings_crc_ok(&p_storage_settings_auth->flash_settings_auth,&auth_settings_update);
        0x00815a10:    4669        iF      MOV      r1,sp
        0x00815a12:    4620         F      MOV      r0,r4
        0x00815a14:    f7fffefe    ....    BL       auth_settings_crc_ok ; 0x815814
        0x00815a18:    4680        .F      MOV      r8,r0
;;;188            settings_backup_valid = auth_settings_crc_ok(&p_storage_settings_auth->flash_settings_auth_backup,&auth_settings_update);
        0x00815a1a:    4669        iF      MOV      r1,sp
        0x00815a1c:    4638        8F      MOV      r0,r7
        0x00815a1e:    f7fffef9    ....    BL       auth_settings_crc_ok ; 0x815814
;;;189    
;;;190            if(settings_valid)
        0x00815a22:    f1b80f00    ....    CMP      r8,#0
        0x00815a26:    d010        ..      BEQ      0x815a4a ; tuya_ble_storage_load_settings + 126
;;;191            {
;;;192                memcpy(&tuya_ble_current_para.auth_settings,&p_storage_settings_auth->flash_settings_auth,sizeof(tuya_ble_auth_settings_t));
        0x00815a28:    22e0        ."      MOVS     r2,#0xe0
        0x00815a2a:    4621        !F      MOV      r1,r4
        0x00815a2c:    e010        ..      B        0x815a50 ; tuya_ble_storage_load_settings + 132
        0x00815a2e:    a0ee        ..      ADR      r0,{pc}+0x3ba ; 0x815de8
        0x00815a30:    f005f8bb    ....    BL       get_args ; 0x81abaa
        0x00815a34:    4602        .F      MOV      r2,r0
        0x00815a36:    49fa        .I      LDR      r1,[pc,#1000] ; [0x815e20] = 0x88039a0
        0x00815a38:    4648        HF      MOV      r0,r9
        0x00815a3a:    f7f2d810    ....    BL       log_buffer ; 0x7a5e
        0x00815a3e:    4858        XH      LDR      r0,[pc,#352] ; [0x815ba0] = 0x2098b8
        0x00815a40:    21e0        .!      MOVS     r1,#0xe0
        0x00815a42:    38e4        .8      SUBS     r0,r0,#0xe4
        0x00815a44:    f444f30c    D...    BL       __aeabi_memclr4 ; 0x5a060
        0x00815a48:    e017        ..      B        0x815a7a ; tuya_ble_storage_load_settings + 174
;;;193            }
;;;194            else if(settings_backup_valid)
        0x00815a4a:    b130        0.      CBZ      r0,0x815a5a ; tuya_ble_storage_load_settings + 142
;;;195            {
;;;196                memcpy(&tuya_ble_current_para.auth_settings,&p_storage_settings_auth->flash_settings_auth_backup,sizeof(tuya_ble_auth_settings_t));
        0x00815a4c:    22e0        ."      MOVS     r2,#0xe0
        0x00815a4e:    4639        9F      MOV      r1,r7
        0x00815a50:    4853        SH      LDR      r0,[pc,#332] ; [0x815ba0] = 0x2098b8
        0x00815a52:    38e4        .8      SUBS     r0,r0,#0xe4
        0x00815a54:    f444f2a8    D...    BL       __aeabi_memcpy4 ; 0x59fa8
        0x00815a58:    e004        ..      B        0x815a64 ; tuya_ble_storage_load_settings + 152
;;;197            }
;;;198            else
;;;199            {
;;;200                memset(&tuya_ble_current_para.auth_settings,0,sizeof(tuya_ble_auth_settings_t));
        0x00815a5a:    4851        QH      LDR      r0,[pc,#324] ; [0x815ba0] = 0x2098b8
        0x00815a5c:    21e0        .!      MOVS     r1,#0xe0
        0x00815a5e:    38e4        .8      SUBS     r0,r0,#0xe4
        0x00815a60:    f444f2fe    D...    BL       __aeabi_memclr4 ; 0x5a060
;;;201                auth_settings_flag = 0;
;;;202            }
;;;203            if(auth_settings_update==1)
        0x00815a64:    f89d0000    ....    LDRB     r0,[sp,#0]
        0x00815a68:    2801        .(      CMP      r0,#1
        0x00815a6a:    d103        ..      BNE      0x815a74 ; tuya_ble_storage_load_settings + 168
;;;204            {
;;;205                tuya_ble_storage_save_auth_settings();
        0x00815a6c:    f7ffff60    ..`.    BL       tuya_ble_storage_save_auth_settings ; 0x815930
;;;206                auth_settings_update = 0;
        0x00815a70:    f88d6000    ...`    STRB     r6,[sp,#0]
;;;207            }
;;;208    
;;;209            tuya_ble_free((uint8_t *)p_storage_settings_auth);
        0x00815a74:    4620         F      MOV      r0,r4
        0x00815a76:    f7fffc96    ....    BL       tuya_ble_free ; 0x8153a6
;;;210    
;;;211        }
;;;212    
;;;213        p_storage_settings_sys = (tuya_ble_storage_sys_settings_t*)tuya_ble_malloc(sizeof(tuya_ble_storage_sys_settings_t));
        0x00815a7a:    46a8        .F      MOV      r8,r5
        0x00815a7c:    4628        (F      MOV      r0,r5
        0x00815a7e:    f7fffc87    ....    BL       tuya_ble_malloc ; 0x815390
        0x00815a82:    4d47        GM      LDR      r5,[pc,#284] ; [0x815ba0] = 0x2098b8
        0x00815a84:    0004        ..      MOVS     r4,r0
        0x00815a86:    f1a505e4    ....    SUB      r5,r5,#0xe4
        0x00815a8a:    f10507e0    ....    ADD      r7,r5,#0xe0
;;;214    
;;;215        if(p_storage_settings_sys==NULL)
        0x00815a8e:    d022        ".      BEQ      0x815ad6 ; tuya_ble_storage_load_settings + 266
;;;216        {
;;;217            TUYA_BLE_LOG_ERROR("p_storage_settings_sys malloc failed.");
;;;218            memset(&tuya_ble_current_para.sys_settings,0,sizeof(tuya_ble_sys_settings_t));
;;;219            sys_settings_flag = 0;
;;;220        }
;;;221        else
;;;222        {
;;;223            memset(p_storage_settings_sys,0,sizeof(tuya_ble_storage_sys_settings_t));
        0x00815a90:    4641        AF      MOV      r1,r8
        0x00815a92:    f444f2e5    D...    BL       __aeabi_memclr4 ; 0x5a060
;;;224        }
;;;225    
;;;226        if(sys_settings_flag==1)
;;;227        {
;;;228            tuya_ble_nv_read(TUYA_BLE_SYS_FLASH_ADDR,(uint8_t *)&p_storage_settings_sys->flash_settings_sys,sizeof(tuya_ble_sys_settings_t));
        0x00815a96:    22e0        ."      MOVS     r2,#0xe0
        0x00815a98:    4621        !F      MOV      r1,r4
        0x00815a9a:    f44f7000    O..p    MOV      r0,#0x200
        0x00815a9e:    f004ff83    ....    BL       tuya_ble_nv_read ; 0x81a9a8
;;;229            tuya_ble_nv_read(TUYA_BLE_SYS_FLASH_BACKUP_ADDR,(uint8_t *)&p_storage_settings_sys->flash_settings_sys_backup,sizeof(tuya_ble_sys_settings_t));
        0x00815aa2:    f10401e0    ....    ADD      r1,r4,#0xe0
        0x00815aa6:    468b        .F      MOV      r11,r1
        0x00815aa8:    22e0        ."      MOVS     r2,#0xe0
        0x00815aaa:    46d8        .F      MOV      r8,r11
        0x00815aac:    f44f7040    O.@p    MOV      r0,#0x300
        0x00815ab0:    f004ff7a    ..z.    BL       tuya_ble_nv_read ; 0x81a9a8
;;;230    
;;;231            settings_valid = sys_settings_crc_ok(&p_storage_settings_sys->flash_settings_sys ,&sys_settings_update);
        0x00815ab4:    a901        ..      ADD      r1,sp,#4
        0x00815ab6:    4620         F      MOV      r0,r4
        0x00815ab8:    f7fffec9    ....    BL       sys_settings_crc_ok ; 0x81584e
        0x00815abc:    4681        .F      MOV      r9,r0
;;;232            settings_backup_valid = sys_settings_crc_ok(&p_storage_settings_sys->flash_settings_sys_backup,&sys_settings_update);
        0x00815abe:    a901        ..      ADD      r1,sp,#4
        0x00815ac0:    4640        @F      MOV      r0,r8
        0x00815ac2:    f7fffec4    ....    BL       sys_settings_crc_ok ; 0x81584e
        0x00815ac6:    f04f08ff    O...    MOV      r8,#0xff
;;;233    
;;;234            if(settings_valid)
        0x00815aca:    f1b90f00    ....    CMP      r9,#0
        0x00815ace:    d010        ..      BEQ      0x815af2 ; tuya_ble_storage_load_settings + 294
;;;235            {
;;;236                memcpy(&tuya_ble_current_para.sys_settings,&p_storage_settings_sys->flash_settings_sys,sizeof(tuya_ble_sys_settings_t));
        0x00815ad0:    22e0        ."      MOVS     r2,#0xe0
        0x00815ad2:    4621        !F      MOV      r1,r4
        0x00815ad4:    e010        ..      B        0x815af8 ; tuya_ble_storage_load_settings + 300
        0x00815ad6:    a0d3        ..      ADR      r0,{pc}+0x34e ; 0x815e24
        0x00815ad8:    f005f867    ..g.    BL       get_args ; 0x81abaa
        0x00815adc:    49d0        .I      LDR      r1,[pc,#832] ; [0x815e20] = 0x88039a0
        0x00815ade:    4602        .F      MOV      r2,r0
        0x00815ae0:    3138        81      ADDS     r1,r1,#0x38
        0x00815ae2:    4648        HF      MOV      r0,r9
        0x00815ae4:    f7f1dfbb    ....    BL       log_buffer ; 0x7a5e
        0x00815ae8:    21e0        .!      MOVS     r1,#0xe0
        0x00815aea:    4638        8F      MOV      r0,r7
        0x00815aec:    f444f2b8    D...    BL       __aeabi_memclr4 ; 0x5a060
        0x00815af0:    e019        ..      B        0x815b26 ; tuya_ble_storage_load_settings + 346
;;;237            }
;;;238            else if(settings_backup_valid)
        0x00815af2:    b128        (.      CBZ      r0,0x815b00 ; tuya_ble_storage_load_settings + 308
;;;239            {
;;;240                memcpy(&tuya_ble_current_para.sys_settings,&p_storage_settings_sys->flash_settings_sys_backup,sizeof(tuya_ble_sys_settings_t));
        0x00815af4:    22e0        ."      MOVS     r2,#0xe0
        0x00815af6:    4659        YF      MOV      r1,r11
        0x00815af8:    4638        8F      MOV      r0,r7
        0x00815afa:    f444f255    D.U.    BL       __aeabi_memcpy4 ; 0x59fa8
        0x00815afe:    e005        ..      B        0x815b0c ; tuya_ble_storage_load_settings + 320
;;;241            }
;;;242            else
;;;243            {
;;;244                memset(&tuya_ble_current_para.sys_settings,0,sizeof(tuya_ble_sys_settings_t));
        0x00815b00:    21e0        .!      MOVS     r1,#0xe0
        0x00815b02:    4638        8F      MOV      r0,r7
        0x00815b04:    f444f2ac    D...    BL       __aeabi_memclr4 ; 0x5a060
;;;245                tuya_ble_current_para.sys_settings.factory_test_flag = 0xFF;
        0x00815b08:    f885813d    ..=.    STRB     r8,[r5,#0x13d]
;;;246                sys_settings_flag = 0;
;;;247            }
;;;248    
;;;249            if(sys_settings_update==1)
        0x00815b0c:    f89d0004    ....    LDRB     r0,[sp,#4]
        0x00815b10:    2801        .(      CMP      r0,#1
        0x00815b12:    d105        ..      BNE      0x815b20 ; tuya_ble_storage_load_settings + 340
;;;250            {
;;;251                tuya_ble_current_para.sys_settings.factory_test_flag = 0xFF;
        0x00815b14:    f885813d    ..=.    STRB     r8,[r5,#0x13d]
;;;252                tuya_ble_storage_save_sys_settings();
        0x00815b18:    f7fffeb6    ....    BL       tuya_ble_storage_save_sys_settings ; 0x815888
;;;253                sys_settings_update = 0;
        0x00815b1c:    f88d6004    ...`    STRB     r6,[sp,#4]
;;;254            }
;;;255    
;;;256            tuya_ble_free((uint8_t *)p_storage_settings_sys);
        0x00815b20:    4620         F      MOV      r0,r4
        0x00815b22:    f7fffc40    ..@.    BL       tuya_ble_free ; 0x8153a6
;;;257    
;;;258        }
;;;259    
;;;260        tuya_ble_current_para.pid_type = tuya_ble_current_para.sys_settings.pid_type;
        0x00815b26:    f8150fe8    ....    LDRB     r0,[r5,#0xe8]!
        0x00815b2a:    491d        .I      LDR      r1,[pc,#116] ; [0x815ba0] = 0x2098b8
        0x00815b2c:    f88500d8    ....    STRB     r0,[r5,#0xd8]
;;;261        tuya_ble_current_para.pid_len = tuya_ble_current_para.sys_settings.pid_len;
        0x00815b30:    786a        jx      LDRB     r2,[r5,#1]
        0x00815b32:    1d89        ..      ADDS     r1,r1,#6
        0x00815b34:    f88520d9    ...     STRB     r2,[r5,#0xd9]
;;;262        memcpy(tuya_ble_current_para.pid,tuya_ble_current_para.sys_settings.common_pid,tuya_ble_current_para.pid_len);
        0x00815b38:    f10100d8    ....    ADD      r0,r1,#0xd8
        0x00815b3c:    f444f1ad    D...    BL       __aeabi_memcpy ; 0x59e9a
;;;263    
;;;264    
;;;265        return err_code;
        0x00815b40:    4650        PF      MOV      r0,r10
;;;266    }
        0x00815b42:    e8bd9ffc    ....    POP      {r2-r12,pc}
    tuya_ble_storage_init
;;;267    
;;;268    
;;;269    uint32_t tuya_ble_storage_save_auth_settings(void)
;;;270    {
;;;271        uint32_t err_code=0;
;;;272    
;;;273        tuya_ble_current_para.auth_settings.crc = tuya_ble_crc32_compute((uint8_t *)&tuya_ble_current_para.auth_settings+4,sizeof(tuya_ble_current_para.auth_settings)-4,NULL);
;;;274    
;;;275        if(tuya_ble_nv_erase(TUYA_BLE_AUTH_FLASH_ADDR,TUYA_NV_ERASE_MIN_SIZE)==TUYA_BLE_SUCCESS)
;;;276        {
;;;277            err_code = tuya_ble_nv_write(TUYA_BLE_AUTH_FLASH_ADDR,(uint8_t *)&tuya_ble_current_para.auth_settings,sizeof(tuya_ble_auth_settings_t));
;;;278    
;;;279            if(err_code == TUYA_BLE_SUCCESS)
;;;280            {
;;;281                TUYA_BLE_LOG_DEBUG("write flash_settings_auth data succeed!");
;;;282    
;;;283                if(tuya_ble_nv_erase(TUYA_BLE_AUTH_FLASH_BACKUP_ADDR,TUYA_NV_ERASE_MIN_SIZE)==TUYA_BLE_SUCCESS)
;;;284                {
;;;285                    if(tuya_ble_nv_write(TUYA_BLE_AUTH_FLASH_BACKUP_ADDR,(uint8_t *)&tuya_ble_current_para.auth_settings,sizeof(tuya_ble_auth_settings_t))!=TUYA_BLE_SUCCESS)
;;;286                    {
;;;287                        TUYA_BLE_LOG_ERROR("write flash_settings_auth data backup failed!");
;;;288                        err_code = 1;
;;;289                    }
;;;290                }
;;;291                else
;;;292                {
;;;293                    TUYA_BLE_LOG_ERROR("erase flash_settings_auth data backup failed!");
;;;294                    err_code = 1;
;;;295                }
;;;296            }
;;;297            else
;;;298            {
;;;299                TUYA_BLE_LOG_ERROR("write flash_settings_auth data failed!");
;;;300                err_code = 1;
;;;301            }
;;;302        }
;;;303        else
;;;304        {
;;;305            TUYA_BLE_LOG_ERROR("erase flash_settings_auth data failed!");
;;;306            err_code = 1;
;;;307        }
;;;308        return err_code;
;;;309    
;;;310    }
;;;311    
;;;312    uint32_t tuya_ble_storage_save_sys_settings(void)
;;;313    {
;;;314        uint32_t err_code=0;
;;;315    
;;;316    #if (TUYA_BLE_DEVICE_AUTH_DATA_STORE)
;;;317        
;;;318        tuya_ble_current_para.sys_settings.crc = tuya_ble_crc32_compute((uint8_t *)&tuya_ble_current_para.sys_settings+4,sizeof(tuya_ble_sys_settings_t)-4,NULL);
;;;319        
;;;320        if(tuya_ble_nv_erase(TUYA_BLE_SYS_FLASH_ADDR,TUYA_NV_ERASE_MIN_SIZE)==TUYA_BLE_SUCCESS)
;;;321        {
;;;322            err_code = tuya_ble_nv_write(TUYA_BLE_SYS_FLASH_ADDR,(uint8_t *)&tuya_ble_current_para.sys_settings,sizeof(tuya_ble_sys_settings_t));
;;;323    
;;;324            if(err_code == TUYA_BLE_SUCCESS)
;;;325            {
;;;326                TUYA_BLE_LOG_INFO("write flash_settings_sys data succeed!");
;;;327    
;;;328                if(tuya_ble_nv_erase(TUYA_BLE_SYS_FLASH_BACKUP_ADDR,TUYA_NV_ERASE_MIN_SIZE)==TUYA_BLE_SUCCESS)
;;;329                {
;;;330                    if(tuya_ble_nv_write(TUYA_BLE_SYS_FLASH_BACKUP_ADDR,(uint8_t *)&tuya_ble_current_para.sys_settings,sizeof(tuya_ble_sys_settings_t))!=TUYA_BLE_SUCCESS)
;;;331                    {
;;;332                        TUYA_BLE_LOG_ERROR("write flash_settings_sys data backup failed!");
;;;333                        err_code = 1;
;;;334                    }
;;;335                }
;;;336                else
;;;337                {
;;;338                    TUYA_BLE_LOG_ERROR("erase flash_settings_sys data backup failed!");
;;;339                    err_code = 1;
;;;340                }
;;;341    
;;;342            }
;;;343            else
;;;344            {
;;;345                TUYA_BLE_LOG_ERROR("write flash_settings_sys data failed!");
;;;346                err_code = 1;
;;;347            }
;;;348        }
;;;349        else
;;;350        {
;;;351            TUYA_BLE_LOG_ERROR("erase flash_settings_sys data failed!");
;;;352            err_code = 1;
;;;353        }
;;;354    
;;;355    #endif
;;;356    
;;;357        return err_code;
;;;358    }
;;;359    
;;;360    
;;;361    
;;;362    uint32_t tuya_ble_storage_init(void)
;;;363    {
        0x00815b46:    b510        ..      PUSH     {r4,lr}
;;;364        uint32_t err=0;
        0x00815b48:    2400        .$      MOVS     r4,#0
;;;365        
;;;366        tuya_ble_nv_init();
        0x00815b4a:    f004ff1e    ....    BL       tuya_ble_nv_init ; 0x81a98a
;;;367    
;;;368    #if (TUYA_BLE_DEVICE_AUTH_DATA_STORE)
;;;369    
;;;370        tuya_ble_storage_load_settings();
        0x00815b4e:    f7ffff3d    ..=.    BL       tuya_ble_storage_load_settings ; 0x8159cc
;;;371    
;;;372    #endif
;;;373        return err;
        0x00815b52:    4620         F      MOV      r0,r4
;;;374    }
        0x00815b54:    bd10        ..      POP      {r4,pc}
    tuya_ble_storage_write_pid
;;;375    
;;;376    #if (TUYA_BLE_DEVICE_AUTH_DATA_STORE)
;;;377    /**
;;;378     * @brief   Function for write pid to nv
;;;379     *
;;;380     * @note
;;;381     *
;;;382     * */
;;;383    tuya_ble_status_t tuya_ble_storage_write_pid(tuya_ble_product_id_type_t pid_type,uint8_t pid_len,uint8_t *pid)
;;;384    {
        0x00815b56:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x00815b5a:    4692        .F      MOV      r10,r2
        0x00815b5c:    460c        .F      MOV      r4,r1
        0x00815b5e:    4605        .F      MOV      r5,r0
        0x00815b60:    f04f0800    O...    MOV      r8,#0
        0x00815b64:    2910        .)      CMP      r1,#0x10
        0x00815b66:    d902        ..      BLS      0x815b6e ; tuya_ble_storage_write_pid + 24
;;;385        tuya_ble_status_t ret = TUYA_BLE_SUCCESS;
;;;386        uint8_t is_write = 0;
;;;387    
;;;388        if(pid_len>TUYA_BLE_PRODUCT_ID_MAX_LEN)
;;;389        {
;;;390            return TUYA_BLE_ERR_INVALID_PARAM;
        0x00815b68:    2006        .       MOVS     r0,#6
        0x00815b6a:    e8bd87f0    ....    POP      {r4-r10,pc}
;;;391        }
;;;392    
;;;393        if((pid_type!=tuya_ble_current_para.pid_type)||(pid_len!=tuya_ble_current_para.pid_len))
        0x00815b6e:    4e0c        .N      LDR      r6,[pc,#48] ; [0x815ba0] = 0x2098b8
        0x00815b70:    3ee4        .>      SUBS     r6,r6,#0xe4
        0x00815b72:    4637        7F      MOV      r7,r6
        0x00815b74:    f89611c0    ....    LDRB     r1,[r6,#0x1c0]
        0x00815b78:    f10709ea    ....    ADD      r9,r7,#0xea
        0x00815b7c:    f50777e1    ...w    ADD      r7,r7,#0x1c2
        0x00815b80:    42a9        .B      CMP      r1,r5
        0x00815b82:    d109        ..      BNE      0x815b98 ; tuya_ble_storage_write_pid + 66
        0x00815b84:    f89601c1    ....    LDRB     r0,[r6,#0x1c1]
        0x00815b88:    42a0        .B      CMP      r0,r4
        0x00815b8a:    d105        ..      BNE      0x815b98 ; tuya_ble_storage_write_pid + 66
        0x00815b8c:    4622        "F      MOV      r2,r4
        0x00815b8e:    4639        9F      MOV      r1,r7
        0x00815b90:    4650        PF      MOV      r0,r10
        0x00815b92:    f444f137    D.7.    BL       memcmp ; 0x59e04
        0x00815b96:    b110        ..      CBZ      r0,0x815b9e ; tuya_ble_storage_write_pid + 72
;;;394        {
;;;395            tuya_ble_current_para.pid_type = pid_type;
        0x00815b98:    f88651c0    ...Q    STRB     r5,[r6,#0x1c0]
;;;396            tuya_ble_current_para.pid_len = pid_len;
        0x00815b9c:    e15c        \.      B        0x815e58 ; tuya_ble_storage_write_pid + 770
        0x00815b9e:    e16f        o.      B        0x815e80 ; tuya_ble_storage_write_pid + 810
    $d
        0x00815ba0:    002098b8    .. .    DCD    2136248
        0x00815ba4:    21103002    .0.!    DCD    554708994
        0x00815ba8:    205d455b    [E]     DCD    542983515
        0x00815bac:    41595554    TUYA    DCD    1096373588
        0x00815bb0:    454c425f    _BLE    DCD    1162625631
        0x00815bb4:    7265203a    : er    DCD    1919230010
        0x00815bb8:    20657361    ase     DCD    543519585
        0x00815bbc:    73616c66    flas    DCD    1935764582
        0x00815bc0:    65735f68    h_se    DCD    1702059880
        0x00815bc4:    6e697474    ttin    DCD    1852404852
        0x00815bc8:    735f7367    gs_s    DCD    1935635303
        0x00815bcc:    64207379    ys d    DCD    1679848313
        0x00815bd0:    20617461    ata     DCD    543257697
        0x00815bd4:    6c696166    fail    DCD    1818845542
        0x00815bd8:    00216465    ed!.    DCD    2188389
        0x00815bdc:    08803c10    .<..    DCD    142621712
        0x00815be0:    205d455b    [E]     DCD    542983515
        0x00815be4:    41595554    TUYA    DCD    1096373588
        0x00815be8:    454c425f    _BLE    DCD    1162625631
        0x00815bec:    7277203a    : wr    DCD    1920409658
        0x00815bf0:    20657469    ite     DCD    543519849
        0x00815bf4:    73616c66    flas    DCD    1935764582
        0x00815bf8:    65735f68    h_se    DCD    1702059880
        0x00815bfc:    6e697474    ttin    DCD    1852404852
        0x00815c00:    735f7367    gs_s    DCD    1935635303
        0x00815c04:    64207379    ys d    DCD    1679848313
        0x00815c08:    20617461    ata     DCD    543257697
        0x00815c0c:    6c696166    fail    DCD    1818845542
        0x00815c10:    00216465    ed!.    DCD    2188389
        0x00815c14:    205d495b    [I]     DCD    542984539
        0x00815c18:    41595554    TUYA    DCD    1096373588
        0x00815c1c:    454c425f    _BLE    DCD    1162625631
        0x00815c20:    7277203a    : wr    DCD    1920409658
        0x00815c24:    20657469    ite     DCD    543519849
        0x00815c28:    73616c66    flas    DCD    1935764582
        0x00815c2c:    65735f68    h_se    DCD    1702059880
        0x00815c30:    6e697474    ttin    DCD    1852404852
        0x00815c34:    735f7367    gs_s    DCD    1935635303
        0x00815c38:    64207379    ys d    DCD    1679848313
        0x00815c3c:    20617461    ata     DCD    543257697
        0x00815c40:    63637573    succ    DCD    1667462515
        0x00815c44:    21646565    eed!    DCD    560227685
        0x00815c48:    00000000    ....    DCD    0
        0x00815c4c:    205d455b    [E]     DCD    542983515
        0x00815c50:    41595554    TUYA    DCD    1096373588
        0x00815c54:    454c425f    _BLE    DCD    1162625631
        0x00815c58:    7265203a    : er    DCD    1919230010
        0x00815c5c:    20657361    ase     DCD    543519585
        0x00815c60:    73616c66    flas    DCD    1935764582
        0x00815c64:    65735f68    h_se    DCD    1702059880
        0x00815c68:    6e697474    ttin    DCD    1852404852
        0x00815c6c:    735f7367    gs_s    DCD    1935635303
        0x00815c70:    64207379    ys d    DCD    1679848313
        0x00815c74:    20617461    ata     DCD    543257697
        0x00815c78:    6b636162    back    DCD    1801675106
        0x00815c7c:    66207075    up f    DCD    1713401973
        0x00815c80:    656c6961    aile    DCD    1701603681
        0x00815c84:    00002164    d!..    DCD    8548
        0x00815c88:    205d455b    [E]     DCD    542983515
        0x00815c8c:    41595554    TUYA    DCD    1096373588
        0x00815c90:    454c425f    _BLE    DCD    1162625631
        0x00815c94:    7277203a    : wr    DCD    1920409658
        0x00815c98:    20657469    ite     DCD    543519849
        0x00815c9c:    73616c66    flas    DCD    1935764582
        0x00815ca0:    65735f68    h_se    DCD    1702059880
        0x00815ca4:    6e697474    ttin    DCD    1852404852
        0x00815ca8:    735f7367    gs_s    DCD    1935635303
        0x00815cac:    64207379    ys d    DCD    1679848313
        0x00815cb0:    20617461    ata     DCD    543257697
        0x00815cb4:    6b636162    back    DCD    1801675106
        0x00815cb8:    66207075    up f    DCD    1713401973
        0x00815cbc:    656c6961    aile    DCD    1701603681
        0x00815cc0:    00002164    d!..    DCD    8548
        0x00815cc4:    205d455b    [E]     DCD    542983515
        0x00815cc8:    41595554    TUYA    DCD    1096373588
        0x00815ccc:    454c425f    _BLE    DCD    1162625631
        0x00815cd0:    7265203a    : er    DCD    1919230010
        0x00815cd4:    20657361    ase     DCD    543519585
        0x00815cd8:    73616c66    flas    DCD    1935764582
        0x00815cdc:    65735f68    h_se    DCD    1702059880
        0x00815ce0:    6e697474    ttin    DCD    1852404852
        0x00815ce4:    615f7367    gs_a    DCD    1633645415
        0x00815ce8:    20687475    uth     DCD    543716469
        0x00815cec:    61746164    data    DCD    1635017060
        0x00815cf0:    69616620     fai    DCD    1767990816
        0x00815cf4:    2164656c    led!    DCD    560227692
        0x00815cf8:    00000000    ....    DCD    0
        0x00815cfc:    08803af4    .:..    DCD    142621428
        0x00815d00:    205d455b    [E]     DCD    542983515
        0x00815d04:    41595554    TUYA    DCD    1096373588
        0x00815d08:    454c425f    _BLE    DCD    1162625631
        0x00815d0c:    7277203a    : wr    DCD    1920409658
        0x00815d10:    20657469    ite     DCD    543519849
        0x00815d14:    73616c66    flas    DCD    1935764582
        0x00815d18:    65735f68    h_se    DCD    1702059880
        0x00815d1c:    6e697474    ttin    DCD    1852404852
        0x00815d20:    615f7367    gs_a    DCD    1633645415
        0x00815d24:    20687475    uth     DCD    543716469
        0x00815d28:    61746164    data    DCD    1635017060
        0x00815d2c:    69616620     fai    DCD    1767990816
        0x00815d30:    2164656c    led!    DCD    560227692
        0x00815d34:    00000000    ....    DCD    0
        0x00815d38:    205d445b    [D]     DCD    542983259
        0x00815d3c:    41595554    TUYA    DCD    1096373588
        0x00815d40:    454c425f    _BLE    DCD    1162625631
        0x00815d44:    7277203a    : wr    DCD    1920409658
        0x00815d48:    20657469    ite     DCD    543519849
        0x00815d4c:    73616c66    flas    DCD    1935764582
        0x00815d50:    65735f68    h_se    DCD    1702059880
        0x00815d54:    6e697474    ttin    DCD    1852404852
        0x00815d58:    615f7367    gs_a    DCD    1633645415
        0x00815d5c:    20687475    uth     DCD    543716469
        0x00815d60:    61746164    data    DCD    1635017060
        0x00815d64:    63757320     suc    DCD    1668641568
        0x00815d68:    64656563    ceed    DCD    1684366691
        0x00815d6c:    00000021    !...    DCD    33
        0x00815d70:    205d455b    [E]     DCD    542983515
        0x00815d74:    41595554    TUYA    DCD    1096373588
        0x00815d78:    454c425f    _BLE    DCD    1162625631
        0x00815d7c:    7265203a    : er    DCD    1919230010
        0x00815d80:    20657361    ase     DCD    543519585
        0x00815d84:    73616c66    flas    DCD    1935764582
        0x00815d88:    65735f68    h_se    DCD    1702059880
        0x00815d8c:    6e697474    ttin    DCD    1852404852
        0x00815d90:    615f7367    gs_a    DCD    1633645415
        0x00815d94:    20687475    uth     DCD    543716469
        0x00815d98:    61746164    data    DCD    1635017060
        0x00815d9c:    63616220     bac    DCD    1667326496
        0x00815da0:    2070756b    kup     DCD    544241003
        0x00815da4:    6c696166    fail    DCD    1818845542
        0x00815da8:    00216465    ed!.    DCD    2188389
        0x00815dac:    205d455b    [E]     DCD    542983515
        0x00815db0:    41595554    TUYA    DCD    1096373588
        0x00815db4:    454c425f    _BLE    DCD    1162625631
        0x00815db8:    7277203a    : wr    DCD    1920409658
        0x00815dbc:    20657469    ite     DCD    543519849
        0x00815dc0:    73616c66    flas    DCD    1935764582
        0x00815dc4:    65735f68    h_se    DCD    1702059880
        0x00815dc8:    6e697474    ttin    DCD    1852404852
        0x00815dcc:    615f7367    gs_a    DCD    1633645415
        0x00815dd0:    20687475    uth     DCD    543716469
        0x00815dd4:    61746164    data    DCD    1635017060
        0x00815dd8:    63616220     bac    DCD    1667326496
        0x00815ddc:    2070756b    kup     DCD    544241003
        0x00815de0:    6c696166    fail    DCD    1818845542
        0x00815de4:    00216465    ed!.    DCD    2188389
        0x00815de8:    205d455b    [E]     DCD    542983515
        0x00815dec:    41595554    TUYA    DCD    1096373588
        0x00815df0:    454c425f    _BLE    DCD    1162625631
        0x00815df4:    5f70203a    : p_    DCD    1601183802
        0x00815df8:    726f7473    stor    DCD    1919906931
        0x00815dfc:    5f656761    age_    DCD    1600481121
        0x00815e00:    74746573    sett    DCD    1953785203
        0x00815e04:    73676e69    ings    DCD    1936158313
        0x00815e08:    7475615f    _aut    DCD    1953849695
        0x00815e0c:    616d2068    h ma    DCD    1634541672
        0x00815e10:    636f6c6c    lloc    DCD    1668246636
        0x00815e14:    69616620     fai    DCD    1767990816
        0x00815e18:    2e64656c    led.    DCD    778331500
        0x00815e1c:    00000000    ....    DCD    0
        0x00815e20:    088039a0    .9..    DCD    142621088
        0x00815e24:    205d455b    [E]     DCD    542983515
        0x00815e28:    41595554    TUYA    DCD    1096373588
        0x00815e2c:    454c425f    _BLE    DCD    1162625631
        0x00815e30:    5f70203a    : p_    DCD    1601183802
        0x00815e34:    726f7473    stor    DCD    1919906931
        0x00815e38:    5f656761    age_    DCD    1600481121
        0x00815e3c:    74746573    sett    DCD    1953785203
        0x00815e40:    73676e69    ings    DCD    1936158313
        0x00815e44:    7379735f    _sys    DCD    1937339231
        0x00815e48:    6c616d20     mal    DCD    1818324256
        0x00815e4c:    20636f6c    loc     DCD    543387500
        0x00815e50:    6c696166    fail    DCD    1818845542
        0x00815e54:    002e6465    ed..    DCD    3040357
    $t
        0x00815e58:    f88641c1    ...A    STRB     r4,[r6,#0x1c1]
;;;397            memcpy(tuya_ble_current_para.pid,pid,pid_len);
        0x00815e5c:    4622        "F      MOV      r2,r4
        0x00815e5e:    4651        QF      MOV      r1,r10
        0x00815e60:    4638        8F      MOV      r0,r7
        0x00815e62:    36e8        .6      ADDS     r6,r6,#0xe8
        0x00815e64:    f444f019    D...    BL       __aeabi_memcpy ; 0x59e9a
;;;398            tuya_ble_current_para.sys_settings.pid_type = pid_type;
        0x00815e68:    7035        5p      STRB     r5,[r6,#0]
;;;399            tuya_ble_current_para.sys_settings.pid_len = pid_len;
        0x00815e6a:    7074        tp      STRB     r4,[r6,#1]
;;;400            memcpy(tuya_ble_current_para.sys_settings.common_pid,pid,pid_len);
        0x00815e6c:    4622        "F      MOV      r2,r4
        0x00815e6e:    4651        QF      MOV      r1,r10
        0x00815e70:    4648        HF      MOV      r0,r9
        0x00815e72:    f444f012    D...    BL       __aeabi_memcpy ; 0x59e9a
;;;401            is_write = 1;
;;;402        }
;;;403        else if(memcmp(pid,tuya_ble_current_para.pid,pid_len)!=0)
;;;404        {
;;;405            tuya_ble_current_para.pid_type = pid_type;
;;;406            tuya_ble_current_para.pid_len = pid_len;
;;;407            memcpy(tuya_ble_current_para.pid,pid,pid_len);
;;;408            tuya_ble_current_para.sys_settings.pid_type = pid_type;
;;;409            tuya_ble_current_para.sys_settings.pid_len = pid_len;
;;;410            memcpy(tuya_ble_current_para.sys_settings.common_pid,pid,pid_len);
;;;411            is_write = 1;
;;;412        }
;;;413        else
;;;414        {
;;;415    
;;;416        }
;;;417        if(is_write==1)
;;;418        {
;;;419            if(tuya_ble_storage_save_sys_settings())
        0x00815e76:    f7fffd07    ....    BL       tuya_ble_storage_save_sys_settings ; 0x815888
        0x00815e7a:    b108        ..      CBZ      r0,0x815e80 ; tuya_ble_storage_write_pid + 810
;;;420            {
;;;421                ret = TUYA_BLE_ERR_BUSY;
        0x00815e7c:    f04f080b    O...    MOV      r8,#0xb
;;;422            }
;;;423        }
;;;424    
;;;425        return ret;
        0x00815e80:    4640        @F      MOV      r0,r8
;;;426    }
        0x00815e82:    e672        r.      B        0x815b6a ; tuya_ble_storage_write_pid + 20
    tuya_ble_storage_write_hid
;;;427    
;;;428    
;;;429    /**
;;;430     * @brief   Function for write hid to nv
;;;431     *
;;;432     * @note
;;;433     *
;;;434     * */
;;;435    tuya_ble_status_t tuya_ble_storage_write_hid(uint8_t *hid,uint8_t len)
;;;436    {
        0x00815e84:    b570        p.      PUSH     {r4-r6,lr}
        0x00815e86:    2400        .$      MOVS     r4,#0
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_storage.c (436)
        0x00815e88:    4605        .F      MOV      r5,r0
        0x00815e8a:    2913        .)      CMP      r1,#0x13
        0x00815e8c:    d001        ..      BEQ      0x815e92 ; tuya_ble_storage_write_hid + 14
;;;437        tuya_ble_status_t ret = TUYA_BLE_SUCCESS;
;;;438    
;;;439        if(len!=H_ID_LEN)
;;;440        {
;;;441            ret = TUYA_BLE_ERR_INVALID_PARAM;
        0x00815e8e:    2406        .$      MOVS     r4,#6
        0x00815e90:    e00e        ..      B        0x815eb0 ; tuya_ble_storage_write_hid + 44
;;;442        }
;;;443        else
;;;444        {
;;;445            if(memcmp(hid,tuya_ble_current_para.auth_settings.h_id,H_ID_LEN)!=0)
        0x00815e92:    495f        _I      LDR      r1,[pc,#380] ; [0x816010] = 0x2097dc
        0x00815e94:    2213        ."      MOVS     r2,#0x13
        0x00815e96:    460e        .F      MOV      r6,r1
        0x00815e98:    f443f7b4    C...    BL       memcmp ; 0x59e04
        0x00815e9c:    b140        @.      CBZ      r0,0x815eb0 ; tuya_ble_storage_write_hid + 44
;;;446            {
;;;447                memcpy(tuya_ble_current_para.auth_settings.h_id,hid,H_ID_LEN);
        0x00815e9e:    2213        ."      MOVS     r2,#0x13
        0x00815ea0:    4629        )F      MOV      r1,r5
        0x00815ea2:    4630        0F      MOV      r0,r6
        0x00815ea4:    f443f7f9    C...    BL       __aeabi_memcpy ; 0x59e9a
;;;448                if(tuya_ble_storage_save_auth_settings())
        0x00815ea8:    f7fffd42    ..B.    BL       tuya_ble_storage_save_auth_settings ; 0x815930
        0x00815eac:    b100        ..      CBZ      r0,0x815eb0 ; tuya_ble_storage_write_hid + 44
;;;449                {
;;;450                    ret = TUYA_BLE_ERR_BUSY;
        0x00815eae:    240b        .$      MOVS     r4,#0xb
;;;451                }
;;;452            }
;;;453        }
;;;454    
;;;455        return ret;
        0x00815eb0:    4620         F      MOV      r0,r4
;;;456    }
        0x00815eb2:    bd70        p.      POP      {r4-r6,pc}
    tuya_ble_storage_read_id_info
;;;457    
;;;458    /**
;;;459     * @brief   Function for read id parameters
;;;460     *
;;;461     * @note
;;;462     *
;;;463     * */
;;;464    tuya_ble_status_t tuya_ble_storage_read_id_info(tuya_ble_factory_id_data_t *id)
;;;465    {
        0x00815eb4:    b570        p.      PUSH     {r4-r6,lr}
        0x00815eb6:    4d56        VM      LDR      r5,[pc,#344] ; [0x816010] = 0x2097dc
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_storage.c (465)
        0x00815eb8:    4604        .F      MOV      r4,r0
;;;466        tuya_ble_status_t ret = TUYA_BLE_SUCCESS;
;;;467    
;;;468        id->pid_type = tuya_ble_current_para.pid_type;
        0x00815eba:    3d08        .=      SUBS     r5,r5,#8
        0x00815ebc:    f50571e1    ...q    ADD      r1,r5,#0x1c2
        0x00815ec0:    f89501c0    ....    LDRB     r0,[r5,#0x1c0]
        0x00815ec4:    7020         p      STRB     r0,[r4,#0]
;;;469        id->pid_len = tuya_ble_current_para.pid_len;
        0x00815ec6:    f89501c1    ....    LDRB     r0,[r5,#0x1c1]
        0x00815eca:    7060        `p      STRB     r0,[r4,#1]
;;;470        memcpy(id->pid,tuya_ble_current_para.pid,tuya_ble_current_para.pid_len);
        0x00815ecc:    f89521c1    ...!    LDRB     r2,[r5,#0x1c1]
        0x00815ed0:    2600        .&      MOVS     r6,#0
        0x00815ed2:    1ca0        ..      ADDS     r0,r4,#2
        0x00815ed4:    352b        +5      ADDS     r5,r5,#0x2b
        0x00815ed6:    f443f7e0    C...    BL       __aeabi_memcpy ; 0x59e9a
;;;471    
;;;472        memcpy(id->h_id,tuya_ble_current_para.auth_settings.h_id,H_ID_LEN);
        0x00815eda:    2213        ."      MOVS     r2,#0x13
        0x00815edc:    494c        LI      LDR      r1,[pc,#304] ; [0x816010] = 0x2097dc
        0x00815ede:    f1040012    ....    ADD      r0,r4,#0x12
        0x00815ee2:    f443f7da    C...    BL       __aeabi_memcpy ; 0x59e9a
;;;473        memcpy(id->device_id,tuya_ble_current_para.auth_settings.device_id,DEVICE_ID_LEN);
        0x00815ee6:    2210        ."      MOVS     r2,#0x10
        0x00815ee8:    f1a50110    ....    SUB      r1,r5,#0x10
        0x00815eec:    f1040025    ..%.    ADD      r0,r4,#0x25
        0x00815ef0:    f443f7d3    C...    BL       __aeabi_memcpy ; 0x59e9a
;;;474        memcpy(id->mac,tuya_ble_current_para.auth_settings.mac,MAC_LEN);
        0x00815ef4:    6828        (h      LDR      r0,[r5,#0]
        0x00815ef6:    f8c40035    ..5.    STR      r0,[r4,#0x35]
        0x00815efa:    88a8        ..      LDRH     r0,[r5,#4]
        0x00815efc:    f8a40039    ..9.    STRH     r0,[r4,#0x39]
;;;475        memcpy(id->auth_key,tuya_ble_current_para.auth_settings.auth_key,AUTH_KEY_LEN);
        0x00815f00:    2220         "      MOVS     r2,#0x20
        0x00815f02:    1da9        ..      ADDS     r1,r5,#6
        0x00815f04:    f104003b    ..;.    ADD      r0,r4,#0x3b
        0x00815f08:    f443f7c7    C...    BL       __aeabi_memcpy ; 0x59e9a
;;;476    
;;;477        return ret;
        0x00815f0c:    4630        0F      MOV      r0,r6
;;;478    }
        0x00815f0e:    bd70        p.      POP      {r4-r6,pc}
    tuya_ble_storage_write_auth_key_device_id_mac
;;;479    
;;;480    
;;;481    /**
;;;482     * @brief   Function for write auth key/uuid/mac
;;;483     *
;;;484     * @note  If the id length is 0, the corresponding id will not be written.
;;;485     *
;;;486     * */
;;;487    tuya_ble_status_t tuya_ble_storage_write_auth_key_device_id_mac(uint8_t *auth_key,uint8_t auth_key_len,uint8_t *device_id,uint8_t device_id_len,
;;;488            uint8_t *mac,uint8_t mac_len,uint8_t *mac_string,uint8_t mac_string_len)
;;;489    {
        0x00815f10:    e92d4ff8    -..O    PUSH     {r3-r11,lr}
        0x00815f14:    2600        .&      MOVS     r6,#0
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_storage.c (489)
        0x00815f16:    e9dd870a    ....    LDRD     r8,r7,[sp,#0x28]
        0x00815f1a:    f8dd9030    ..0.    LDR      r9,[sp,#0x30]
        0x00815f1e:    461d        .F      MOV      r5,r3
        0x00815f20:    4693        .F      MOV      r11,r2
        0x00815f22:    4682        .F      MOV      r10,r0
        0x00815f24:    4634        4F      MOV      r4,r6
        0x00815f26:    2920         )      CMP      r1,#0x20
        0x00815f28:    d000        ..      BEQ      0x815f2c ; tuya_ble_storage_write_auth_key_device_id_mac + 28
;;;490        tuya_ble_status_t ret = TUYA_BLE_SUCCESS;
;;;491        uint8_t is_write = 0;
;;;492    
;;;493        if(((auth_key_len!=AUTH_KEY_LEN)&&(auth_key_len!=0))||((device_id_len!=DEVICE_ID_LEN)&&(device_id_len!=0))||((mac_len!=MAC_LEN)&&(mac_len!=0)))
        0x00815f2a:    b929        ).      CBNZ     r1,0x815f38 ; tuya_ble_storage_write_auth_key_device_id_mac + 40
        0x00815f2c:    2d10        .-      CMP      r5,#0x10
        0x00815f2e:    d000        ..      BEQ      0x815f32 ; tuya_ble_storage_write_auth_key_device_id_mac + 34
        0x00815f30:    b915        ..      CBNZ     r5,0x815f38 ; tuya_ble_storage_write_auth_key_device_id_mac + 40
        0x00815f32:    2f06        ./      CMP      r7,#6
        0x00815f34:    d002        ..      BEQ      0x815f3c ; tuya_ble_storage_write_auth_key_device_id_mac + 44
        0x00815f36:    b10f        ..      CBZ      r7,0x815f3c ; tuya_ble_storage_write_auth_key_device_id_mac + 44
;;;494        {
;;;495            ret = TUYA_BLE_ERR_INVALID_PARAM;
        0x00815f38:    2606        .&      MOVS     r6,#6
        0x00815f3a:    e066        f.      B        0x81600a ; tuya_ble_storage_write_auth_key_device_id_mac + 250
;;;496        }
;;;497        else
;;;498        {
;;;499            if(auth_key_len==AUTH_KEY_LEN)
        0x00815f3c:    2920         )      CMP      r1,#0x20
        0x00815f3e:    d10d        ..      BNE      0x815f5c ; tuya_ble_storage_write_auth_key_device_id_mac + 76
;;;500            {
;;;501                if(memcmp(tuya_ble_current_para.auth_settings.auth_key,auth_key,AUTH_KEY_LEN)!=0)
        0x00815f40:    4601        .F      MOV      r1,r0
        0x00815f42:    4833        3H      LDR      r0,[pc,#204] ; [0x816010] = 0x2097dc
        0x00815f44:    2220         "      MOVS     r2,#0x20
        0x00815f46:    3029        )0      ADDS     r0,r0,#0x29
        0x00815f48:    9000        ..      STR      r0,[sp,#0]
        0x00815f4a:    f443f75b    C.[.    BL       memcmp ; 0x59e04
        0x00815f4e:    b128        (.      CBZ      r0,0x815f5c ; tuya_ble_storage_write_auth_key_device_id_mac + 76
;;;502                {
;;;503                    memcpy(tuya_ble_current_para.auth_settings.auth_key,auth_key,AUTH_KEY_LEN);
        0x00815f50:    2220         "      MOVS     r2,#0x20
        0x00815f52:    4651        QF      MOV      r1,r10
        0x00815f54:    9800        ..      LDR      r0,[sp,#0]
        0x00815f56:    f443f7a0    C...    BL       __aeabi_memcpy ; 0x59e9a
;;;504                    is_write = 1;
        0x00815f5a:    2401        .$      MOVS     r4,#1
;;;505                }
;;;506            }
;;;507            if(device_id_len==DEVICE_ID_LEN)
        0x00815f5c:    2d10        .-      CMP      r5,#0x10
        0x00815f5e:    d10d        ..      BNE      0x815f7c ; tuya_ble_storage_write_auth_key_device_id_mac + 108
;;;508            {
;;;509                if(memcmp(tuya_ble_current_para.auth_settings.device_id,device_id,DEVICE_ID_LEN)!=0)
        0x00815f60:    482b        +H      LDR      r0,[pc,#172] ; [0x816010] = 0x2097dc
        0x00815f62:    2210        ."      MOVS     r2,#0x10
        0x00815f64:    3013        .0      ADDS     r0,r0,#0x13
        0x00815f66:    4659        YF      MOV      r1,r11
        0x00815f68:    4605        .F      MOV      r5,r0
        0x00815f6a:    f443f74b    C.K.    BL       memcmp ; 0x59e04
        0x00815f6e:    b128        (.      CBZ      r0,0x815f7c ; tuya_ble_storage_write_auth_key_device_id_mac + 108
;;;510                {
;;;511                    memcpy(tuya_ble_current_para.auth_settings.device_id,device_id,DEVICE_ID_LEN);
        0x00815f70:    2210        ."      MOVS     r2,#0x10
        0x00815f72:    4659        YF      MOV      r1,r11
        0x00815f74:    4628        (F      MOV      r0,r5
        0x00815f76:    f443f790    C...    BL       __aeabi_memcpy ; 0x59e9a
;;;512                    is_write = 1;
        0x00815f7a:    2401        .$      MOVS     r4,#1
        0x00815f7c:    4d24        $M      LDR      r5,[pc,#144] ; [0x816010] = 0x2097dc
        0x00815f7e:    3d08        .=      SUBS     r5,r5,#8
;;;513                }
;;;514            }
;;;515            if(mac_len==MAC_LEN)
        0x00815f80:    2f06        ./      CMP      r7,#6
        0x00815f82:    d11b        ..      BNE      0x815fbc ; tuya_ble_storage_write_auth_key_device_id_mac + 172
;;;516            {
;;;517                if(memcmp(tuya_ble_current_para.auth_settings.mac,mac,MAC_LEN)!=0)
        0x00815f84:    2206        ."      MOVS     r2,#6
        0x00815f86:    4641        AF      MOV      r1,r8
        0x00815f88:    f105002b    ..+.    ADD      r0,r5,#0x2b
        0x00815f8c:    f443f73a    C.:.    BL       memcmp ; 0x59e04
        0x00815f90:    b1a0        ..      CBZ      r0,0x815fbc ; tuya_ble_storage_write_auth_key_device_id_mac + 172
;;;518                {
;;;519                    memcpy(tuya_ble_current_para.auth_settings.mac,mac,MAC_LEN);
        0x00815f92:    f8d81000    ....    LDR      r1,[r8,#0]
        0x00815f96:    f8c5102b    ..+.    STR      r1,[r5,#0x2b]
        0x00815f9a:    f8b80004    ....    LDRH     r0,[r8,#4]
        0x00815f9e:    f8a5002f    ../.    STRH     r0,[r5,#0x2f]
;;;520                    memcpy(tuya_ble_current_para.auth_settings.mac_string,mac_string,MAC_LEN*2);
        0x00815fa2:    f8d91000    ....    LDR      r1,[r9,#0]
        0x00815fa6:    f8c51051    ..Q.    STR      r1,[r5,#0x51]
        0x00815faa:    f8d91004    ....    LDR      r1,[r9,#4]
        0x00815fae:    f8c51055    ..U.    STR      r1,[r5,#0x55]
        0x00815fb2:    f8d90008    ....    LDR      r0,[r9,#8]
        0x00815fb6:    f8c50059    ..Y.    STR      r0,[r5,#0x59]
;;;521                    is_write = 1;
        0x00815fba:    e000        ..      B        0x815fbe ; tuya_ble_storage_write_auth_key_device_id_mac + 174
;;;522                }
;;;523            }
;;;524    
;;;525            if(is_write==1)
        0x00815fbc:    b32c        ,.      CBZ      r4,0x81600a ; tuya_ble_storage_write_auth_key_device_id_mac + 250
;;;526            {
;;;527                if(tuya_ble_storage_save_auth_settings())
        0x00815fbe:    f7fffcb7    ....    BL       tuya_ble_storage_save_auth_settings ; 0x815930
        0x00815fc2:    b108        ..      CBZ      r0,0x815fc8 ; tuya_ble_storage_write_auth_key_device_id_mac + 184
;;;528                {
;;;529                    ret = TUYA_BLE_ERR_BUSY;
        0x00815fc4:    260b        .&      MOVS     r6,#0xb
        0x00815fc6:    e020         .      B        0x81600a ; tuya_ble_storage_write_auth_key_device_id_mac + 250
;;;530                }
;;;531                else
;;;532                {
;;;533                    if(tuya_ble_current_para.sys_settings.bound_flag==1)
        0x00815fc8:    f895013c    ..<.    LDRB     r0,[r5,#0x13c]
        0x00815fcc:    2801        .(      CMP      r0,#1
        0x00815fce:    d11c        ..      BNE      0x81600a ; tuya_ble_storage_write_auth_key_device_id_mac + 250
;;;534                    {
;;;535                        memset(tuya_ble_current_para.sys_settings.device_virtual_id,0,DEVICE_VIRTUAL_ID_LEN);
        0x00815fd0:    2116        .!      MOVS     r1,#0x16
        0x00815fd2:    4810        .H      LDR      r0,[pc,#64] ; [0x816014] = 0x2098f4
        0x00815fd4:    f444f044    D.D.    BL       __aeabi_memclr4 ; 0x5a060
;;;536                        memset(tuya_ble_current_para.sys_settings.login_key,0,LOGIN_KEY_LEN);
        0x00815fd8:    490d        .I      LDR      r1,[pc,#52] ; [0x816010] = 0x2097dc
        0x00815fda:    2000        .       MOVS     r0,#0
        0x00815fdc:    3908        .9      SUBS     r1,r1,#8
        0x00815fde:    f8410ffa    A...    STR      r0,[r1,#0xfa]!
        0x00815fe2:    8088        ..      STRH     r0,[r1,#4]
;;;537                        tuya_ble_current_para.sys_settings.bound_flag= 0;
        0x00815fe4:    f885013c    ..<.    STRB     r0,[r5,#0x13c]
;;;538                        tuya_ble_storage_save_sys_settings();
        0x00815fe8:    f7fffc4e    ..N.    BL       tuya_ble_storage_save_sys_settings ; 0x815888
;;;539                        tuya_ble_adv_change();
        0x00815fec:    f7fff869    ..i.    BL       tuya_ble_adv_change ; 0x8150c2
;;;540                        tuya_ble_connect_status_set(UNBONDING_UNCONN);
        0x00815ff0:    2000        .       MOVS     r0,#0
        0x00815ff2:    f7fff80d    ....    BL       tuya_ble_connect_status_set ; 0x815010
;;;541                        TUYA_BLE_LOG_INFO("The state has changed, current bound flag = %d",tuya_ble_current_para.sys_settings.bound_flag);
        0x00815ff6:    a008        ..      ADR      r0,{pc}+0x22 ; 0x816018
        0x00815ff8:    f004fdd7    ....    BL       get_args ; 0x81abaa
        0x00815ffc:    4602        .F      MOV      r2,r0
        0x00815ffe:    f895313c    ..<1    LDRB     r3,[r5,#0x13c]
        0x00816002:    4915        .I      LDR      r1,[pc,#84] ; [0x816058] = 0x8803c44
        0x00816004:    4815        .H      LDR      r0,[pc,#84] ; [0x81605c] = 0x21103002
        0x00816006:    f7f1dd2a    ..*.    BL       log_buffer ; 0x7a5e
;;;542                    }
;;;543                }
;;;544            }
;;;545    
;;;546        }
;;;547    
;;;548        return ret;
        0x0081600a:    4630        0F      MOV      r0,r6
;;;549    }
        0x0081600c:    e8bd8ff8    ....    POP      {r3-r11,pc}
    $d
        0x00816010:    002097dc    .. .    DCD    2136028
        0x00816014:    002098f4    .. .    DCD    2136308
        0x00816018:    205d495b    [I]     DCD    542984539
        0x0081601c:    41595554    TUYA    DCD    1096373588
        0x00816020:    454c425f    _BLE    DCD    1162625631
        0x00816024:    6854203a    : Th    DCD    1750343738
        0x00816028:    74732065    e st    DCD    1953701989
        0x0081602c:    20657461    ate     DCD    543519841
        0x00816030:    20736168    has     DCD    544432488
        0x00816034:    6e616863    chan    DCD    1851877475
        0x00816038:    2c646567    ged,    DCD    744777063
        0x0081603c:    72756320     cur    DCD    1920295712
        0x00816040:    746e6572    rent    DCD    1953391986
        0x00816044:    756f6220     bou    DCD    1970233888
        0x00816048:    6620646e    nd f    DCD    1713398894
        0x0081604c:    2067616c    lag     DCD    543646060
        0x00816050:    6425203d    = %d    DCD    1680154685
        0x00816054:    00000000    ....    DCD    0
        0x00816058:    08803c44    D<..    DCD    142621764
        0x0081605c:    21103002    .0.!    DCD    554708994
    $t
    .text
    applib_dt_last_day_of_mon
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_unix_time.c
;;;79     {
        0x00816060:    b510        ..      PUSH     {r4,lr}
        0x00816062:    b140        @.      CBZ      r0,0x816076 ; applib_dt_last_day_of_mon + 22
;;;80         /*----------------------------------------------------------------*/
;;;81         /* Local Variables                                                */
;;;82         /*----------------------------------------------------------------*/
;;;83     
;;;84         /*----------------------------------------------------------------*/
;;;85         /* Code Body                                                      */
;;;86         /*----------------------------------------------------------------*/
;;;87         if ((month == 0) || (month > 12)) {
        0x00816064:    280c        .(      CMP      r0,#0xc
        0x00816066:    d806        ..      BHI      0x816076 ; applib_dt_last_day_of_mon + 22
;;;88             return g_day_per_mon[1] + applib_dt_is_leap_year(year);
;;;89         }
;;;90     
;;;91         if (month != 2) {
        0x00816068:    2802        .(      CMP      r0,#2
        0x0081606a:    d004        ..      BEQ      0x816076 ; applib_dt_last_day_of_mon + 22
;;;92             return g_day_per_mon[month - 1];
        0x0081606c:    49ac        .I      LDR      r1,[pc,#688] ; [0x816320] = 0x81c304
        0x0081606e:    4408        .D      ADD      r0,r0,r1
        0x00816070:    f8100c01    ....    LDRB     r0,[r0,#-1]
        0x00816074:    bd10        ..      POP      {r4,pc}
;;;93         } else {
;;;94             return g_day_per_mon[1] + applib_dt_is_leap_year(year);
        0x00816076:    4608        .F      MOV      r0,r1
        0x00816078:    f000f904    ....    BL       applib_dt_is_leap_year ; 0x816284
        0x0081607c:    301c        .0      ADDS     r0,r0,#0x1c
        0x0081607e:    b2c0        ..      UXTB     r0,r0
;;;95         }
;;;96     }
        0x00816080:    bd10        ..      POP      {r4,pc}
    tuya_ble_utc_sec_2_mytime
;;;97     
;;;98     
;;;99     /**
;;;100     * @brief   Function for get the corresponding week based on the given date.
;;;101     *
;;;102     * @return  
;;;103     * @note    0-Sunday  6-Saturday
;;;104     *.
;;;105     * */
;;;106    static uint8_t applib_dt_dayindex(uint16_t year, uint8_t month, uint8_t day)
;;;107    {
;;;108        int8_t century_code, year_code, month_code, day_code;
;;;109        int32_t week = 0;
;;;110    
;;;111        century_code = year_code = month_code = day_code = 0;
;;;112    
;;;113        if (month == 1 || month == 2) {
;;;114            century_code = (year - 1) / 100;
;;;115            year_code = (year - 1) % 100;
;;;116            month_code = month + 12;
;;;117            day_code = day;
;;;118        } else {
;;;119            century_code = year / 100;
;;;120            year_code = year % 100;
;;;121            month_code = month;
;;;122            day_code = day;
;;;123        }
;;;124    
;;;125        week = year_code + year_code / 4 + century_code / 4 - 2 * century_code + 26 * ( month_code + 1 ) / 10 + day_code - 1;
;;;126        week = week > 0 ? (week % 7) : ((week % 7) + 7);
;;;127    
;;;128        return week;
;;;129    }
;;;130    
;;;131    
;;;132    /**
;;;133     * @brief   Function for Get the corresponding date according to the UTC timestamp.
;;;134     *
;;;135     * @param[in] daylightSaving:daylight saving time
;;;136     * @return  
;;;137     * @note    
;;;138     *.
;;;139     * */
;;;140    void tuya_ble_utc_sec_2_mytime(uint32_t utc_sec, tuya_ble_time_struct_data_t *result, bool daylightSaving)
;;;141    {
        0x00816082:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x00816086:    460e        .F      MOV      r6,r1
        0x00816088:    b10a        ..      CBZ      r2,0x81608e ; tuya_ble_utc_sec_2_mytime + 12
        0x0081608a:    f5006061    ..a`    ADD      r0,r0,#0xe10
;;;142        /*----------------------------------------------------------------*/
;;;143        /* Local Variables                                                */
;;;144        /*----------------------------------------------------------------*/
;;;145        int32_t sec, day;
;;;146        uint16_t y;
;;;147        uint8_t m;
;;;148        uint16_t d;
;;;149       // uint8_t dst;
;;;150    
;;;151        /*----------------------------------------------------------------*/
;;;152        /* Code Body                                                      */
;;;153        /*----------------------------------------------------------------*/
;;;154    
;;;155        if (daylightSaving) {
;;;156            utc_sec += SEC_PER_HOUR;
;;;157        }
;;;158    
;;;159        /* hour, min, sec */
;;;160        /* hour */
;;;161        sec = utc_sec % SEC_PER_DAY;
        0x0081608e:    4ba5        .K      LDR      r3,[pc,#660] ; [0x816324] = 0x15180
        0x00816090:    f44f6261    O.ab    MOV      r2,#0xe10
        0x00816094:    fbb0f1f3    ....    UDIV     r1,r0,r3
        0x00816098:    fb030111    ....    MLS      r1,r3,r1,r0
;;;162        result->nHour = sec / SEC_PER_HOUR;
        0x0081609c:    fb91f4f2    ....    SDIV     r4,r1,r2
        0x008160a0:    7134        4q      STRB     r4,[r6,#4]
;;;163    
;;;164        /* min */
;;;165        sec %= SEC_PER_HOUR;
        0x008160a2:    fb91f4f2    ....    SDIV     r4,r1,r2
        0x008160a6:    fb021114    ....    MLS      r1,r2,r4,r1
;;;166        result->nMin = sec / SEC_PER_MIN;
        0x008160aa:    223c        <"      MOVS     r2,#0x3c
        0x008160ac:    fb91f4f2    ....    SDIV     r4,r1,r2
        0x008160b0:    7174        tq      STRB     r4,[r6,#5]
;;;167    
;;;168        /* sec */
;;;169        result->nSec = sec % SEC_PER_MIN;
        0x008160b2:    fb91f4f2    ....    SDIV     r4,r1,r2
        0x008160b6:    fb021114    ....    MLS      r1,r2,r4,r1
        0x008160ba:    fbb0f4f3    ....    UDIV     r4,r0,r3
        0x008160be:    71b1        .q      STRB     r1,[r6,#6]
;;;170    
;;;171        /* year, month, day */
;;;172        /* year */
;;;173        /* year */
;;;174        day = utc_sec / SEC_PER_DAY;
;;;175        for (y = UTC_BASE_YEAR; day > 0; y++) {
        0x008160c0:    f24077b2    @..w    MOV      r7,#0x7b2
        0x008160c4:    e009        ..      B        0x8160da ; tuya_ble_utc_sec_2_mytime + 88
        0x008160c6:    4638        8F      MOV      r0,r7
        0x008160c8:    f000f8dc    ....    BL       applib_dt_is_leap_year ; 0x816284
        0x008160cc:    f200106d    ..m.    ADD      r0,r0,#0x16d
        0x008160d0:    4284        .B      CMP      r4,r0
        0x008160d2:    db04        ..      BLT      0x8160de ; tuya_ble_utc_sec_2_mytime + 92
        0x008160d4:    1a24        $.      SUBS     r4,r4,r0
        0x008160d6:    1c7f        ..      ADDS     r7,r7,#1
        0x008160d8:    b2bf        ..      UXTH     r7,r7
        0x008160da:    2c00        .,      CMP      r4,#0
        0x008160dc:    dcf3        ..      BGT      0x8160c6 ; tuya_ble_utc_sec_2_mytime + 68
;;;176            d = (DAY_PER_YEAR + applib_dt_is_leap_year(y));
;;;177            if (day >= d)
;;;178            {
;;;179                day -= d;
;;;180            }
;;;181            else
;;;182            {
;;;183                break;
;;;184            }
;;;185        }
;;;186    
;;;187        result->nYear = y;
        0x008160de:    8037        7.      STRH     r7,[r6,#0]
;;;188    
;;;189        for (m = 1; m < MONTH_PER_YEAR; m++) {
        0x008160e0:    2501        .%      MOVS     r5,#1
        0x008160e2:    4639        9F      MOV      r1,r7
        0x008160e4:    4628        (F      MOV      r0,r5
        0x008160e6:    f7ffffbb    ....    BL       applib_dt_last_day_of_mon ; 0x816060
        0x008160ea:    4284        .B      CMP      r4,r0
        0x008160ec:    db04        ..      BLT      0x8160f8 ; tuya_ble_utc_sec_2_mytime + 118
        0x008160ee:    1c6d        m.      ADDS     r5,r5,#1
        0x008160f0:    1a24        $.      SUBS     r4,r4,r0
        0x008160f2:    b2ed        ..      UXTB     r5,r5
        0x008160f4:    2d0c        .-      CMP      r5,#0xc
;;;190            d = applib_dt_last_day_of_mon(m, y);
;;;191            if (day >= d) {
;;;192                day -= d;
        0x008160f6:    d3f4        ..      BCC      0x8160e2 ; tuya_ble_utc_sec_2_mytime + 96
;;;193            } else {
;;;194                break;
;;;195            }
;;;196        }
;;;197    
;;;198        result->nMonth = m;
        0x008160f8:    1c64        d.      ADDS     r4,r4,#1
        0x008160fa:    70b5        .p      STRB     r5,[r6,#2]
;;;199        result->nDay = (uint8_t) (day + 1);
        0x008160fc:    b2e2        ..      UXTB     r2,r4
        0x008160fe:    70f2        .p      STRB     r2,[r6,#3]
;;;200      
;;;201        result->DayIndex = applib_dt_dayindex(result->nYear, result->nMonth, result->nDay);
        0x00816100:    4629        )F      MOV      r1,r5
        0x00816102:    8830        0.      LDRH     r0,[r6,#0]
        0x00816104:    f000f8d1    ....    BL       applib_dt_dayindex ; 0x8162aa
        0x00816108:    71f0        .q      STRB     r0,[r6,#7]
;;;202    }
        0x0081610a:    e8bd81f0    ....    POP      {r4-r8,pc}
    tuya_ble_mytime_2_utc_sec
;;;203    
;;;204    /**
;;;205     * @brief   Function for Get the UTC timestamp according to  corresponding date .
;;;206     *
;;;207     * @param[in] daylightSaving:daylight saving time
;;;208     * @return  
;;;209     * @note    
;;;210     *.
;;;211     * */
;;;212    uint32_t tuya_ble_mytime_2_utc_sec(tuya_ble_time_struct_data_t *currTime, bool daylightSaving)
;;;213    {
        0x0081610e:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x00816112:    4604        .F      MOV      r4,r0
        0x00816114:    8800        ..      LDRH     r0,[r0,#0]
;;;214        /*----------------------------------------------------------------*/
;;;215        /* Local Variables                                                */
;;;216        /*----------------------------------------------------------------*/
;;;217        uint16_t i;
;;;218        uint32_t no_of_days = 0;
        0x00816116:    2500        .%      MOVS     r5,#0
;;;219        uint32_t utc_time;
;;;220        uint8_t dst = 1;
        0x00816118:    2701        .'      MOVS     r7,#1
;;;221    
;;;222        /*----------------------------------------------------------------*/
;;;223        /* Code Body                                                      */
;;;224        /*----------------------------------------------------------------*/
;;;225        if (currTime->nYear < UTC_BASE_YEAR) {
        0x0081611a:    f24076b2    @..v    MOV      r6,#0x7b2
        0x0081611e:    4688        .F      MOV      r8,r1
        0x00816120:    42b0        .B      CMP      r0,r6
        0x00816122:    d209        ..      BCS      0x816138 ; tuya_ble_mytime_2_utc_sec + 42
;;;226            return 0;
        0x00816124:    2000        .       MOVS     r0,#0
        0x00816126:    e7f0        ..      B        0x81610a ; tuya_ble_utc_sec_2_mytime + 136
        0x00816128:    4630        0F      MOV      r0,r6
        0x0081612a:    f000f8ab    ....    BL       applib_dt_is_leap_year ; 0x816284
        0x0081612e:    4405        .D      ADD      r5,r5,r0
        0x00816130:    1c76        v.      ADDS     r6,r6,#1
;;;227        }
;;;228    
;;;229        /* year */
;;;230        for (i = UTC_BASE_YEAR; i < currTime->nYear; i++) {
        0x00816132:    b2b6        ..      UXTH     r6,r6
        0x00816134:    f205156d    ..m.    ADD      r5,r5,#0x16d
        0x00816138:    8820         .      LDRH     r0,[r4,#0]
        0x0081613a:    42b0        .B      CMP      r0,r6
        0x0081613c:    d8f4        ..      BHI      0x816128 ; tuya_ble_mytime_2_utc_sec + 26
;;;231            no_of_days += (DAY_PER_YEAR + applib_dt_is_leap_year(i));
;;;232        }
;;;233    
;;;234        /* month */
;;;235        for (i = 1; i < currTime->nMonth; i++) {
        0x0081613e:    2601        .&      MOVS     r6,#1
        0x00816140:    e006        ..      B        0x816150 ; tuya_ble_mytime_2_utc_sec + 66
        0x00816142:    8821        !.      LDRH     r1,[r4,#0]
        0x00816144:    b2f0        ..      UXTB     r0,r6
        0x00816146:    f7ffff8b    ....    BL       applib_dt_last_day_of_mon ; 0x816060
        0x0081614a:    1c76        v.      ADDS     r6,r6,#1
        0x0081614c:    4405        .D      ADD      r5,r5,r0
        0x0081614e:    b2b6        ..      UXTH     r6,r6
        0x00816150:    78a0        .x      LDRB     r0,[r4,#2]
        0x00816152:    42b0        .B      CMP      r0,r6
        0x00816154:    d8f5        ..      BHI      0x816142 ; tuya_ble_mytime_2_utc_sec + 52
;;;236            no_of_days += applib_dt_last_day_of_mon((unsigned char) i, currTime->nYear);
;;;237        }
;;;238    
;;;239        /* day */
;;;240        no_of_days += (currTime->nDay - 1);
        0x00816156:    78e0        .x      LDRB     r0,[r4,#3]
        0x00816158:    1e6d        m.      SUBS     r5,r5,#1
        0x0081615a:    4428        (D      ADD      r0,r0,r5
;;;241    
;;;242        /* sec */
;;;243        utc_time = (unsigned int) no_of_days * SEC_PER_DAY + (unsigned int) (currTime->nHour * SEC_PER_HOUR +
        0x0081615c:    79a1        .y      LDRB     r1,[r4,#6]
        0x0081615e:    f24022a3    @.."    MOV      r2,#0x2a3
        0x00816162:    4350        PC      MULS     r0,r2,r0
        0x00816164:    eb0111c0    ....    ADD      r1,r1,r0,LSL #7
        0x00816168:    7920         y      LDRB     r0,[r4,#4]
        0x0081616a:    f44f6261    O.ab    MOV      r2,#0xe10
        0x0081616e:    fb10f202    ....    SMULBB   r2,r0,r2
        0x00816172:    7960        `y      LDRB     r0,[r4,#5]
        0x00816174:    2f00        ./      CMP      r7,#0
        0x00816176:    ebc01000    ....    RSB      r0,r0,r0,LSL #4
        0x0081617a:    eb020080    ....    ADD      r0,r2,r0,LSL #2
        0x0081617e:    4408        .D      ADD      r0,r0,r1
;;;244                                                                    currTime->nMin * SEC_PER_MIN + currTime->nSec);
;;;245    
;;;246        if (dst && daylightSaving) {
        0x00816180:    d0c3        ..      BEQ      0x81610a ; tuya_ble_utc_sec_2_mytime + 136
        0x00816182:    f1b80f00    ....    CMP      r8,#0
        0x00816186:    d0c0        ..      BEQ      0x81610a ; tuya_ble_utc_sec_2_mytime + 136
        0x00816188:    f5a06061    ..a`    SUB      r0,r0,#0xe10
;;;247            utc_time -= SEC_PER_HOUR;
;;;248        }
;;;249    
;;;250        return utc_time;
;;;251    }
        0x0081618c:    e7bd        ..      B        0x81610a ; tuya_ble_utc_sec_2_mytime + 136
    tuya_ble_utc_sec_2_mytime_string
;;;252    
;;;253    
;;;254    void tuya_ble_utc_sec_2_mytime_string(uint32_t utc_sec, bool daylightSaving,char *s)
;;;255    {
        0x0081618e:    b57c        |.      PUSH     {r2-r6,lr}
        0x00816190:    4614        .F      MOV      r4,r2
;;;256    	tuya_ble_time_struct_data_t rtc_time={0};
        0x00816192:    2500        .%      MOVS     r5,#0
        0x00816194:    460a        .F      MOV      r2,r1
        0x00816196:    9500        ..      STR      r5,[sp,#0]
;;;257    	uint32_t temp = 0;
;;;258    
;;;259    	tuya_ble_utc_sec_2_mytime(utc_sec,&rtc_time,daylightSaving);
        0x00816198:    4669        iF      MOV      r1,sp
        0x0081619a:    9501        ..      STR      r5,[sp,#4]
        0x0081619c:    f7ffff71    ..q.    BL       tuya_ble_utc_sec_2_mytime ; 0x816082
;;;260    
;;;261    	temp = rtc_time.nYear;
        0x008161a0:    f8bd1000    ....    LDRH     r1,[sp,#0]
;;;262    	s[0]=temp/1000 + 0x30;
        0x008161a4:    f44f707a    O.zp    MOV      r0,#0x3e8
        0x008161a8:    fbb1f1f0    ....    UDIV     r1,r1,r0
        0x008161ac:    3130        01      ADDS     r1,r1,#0x30
        0x008161ae:    7021        !p      STRB     r1,[r4,#0]
;;;263    	temp = rtc_time.nYear%1000;
        0x008161b0:    f8bd1000    ....    LDRH     r1,[sp,#0]
        0x008161b4:    fbb1f2f0    ....    UDIV     r2,r1,r0
        0x008161b8:    fb001012    ....    MLS      r0,r0,r2,r1
;;;264    	s[1] = temp/100 + 0x30;
        0x008161bc:    2164        d!      MOVS     r1,#0x64
        0x008161be:    fbb0f2f1    ....    UDIV     r2,r0,r1
        0x008161c2:    3230        02      ADDS     r2,r2,#0x30
        0x008161c4:    7062        bp      STRB     r2,[r4,#1]
;;;265    	temp = temp%100;
        0x008161c6:    fbb0f2f1    ....    UDIV     r2,r0,r1
        0x008161ca:    fb010112    ....    MLS      r1,r1,r2,r0
;;;266    	s[2] = temp/10 + 0x30;
        0x008161ce:    200a        .       MOVS     r0,#0xa
        0x008161d0:    fbb1f2f0    ....    UDIV     r2,r1,r0
        0x008161d4:    3230        02      ADDS     r2,r2,#0x30
        0x008161d6:    70a2        .p      STRB     r2,[r4,#2]
;;;267    	s[3] = temp%10 + 0x30;
        0x008161d8:    fbb1f2f0    ....    UDIV     r2,r1,r0
        0x008161dc:    fb001112    ....    MLS      r1,r0,r2,r1
        0x008161e0:    3130        01      ADDS     r1,r1,#0x30
        0x008161e2:    70e1        .p      STRB     r1,[r4,#3]
;;;268    	s[4] = '-';
        0x008161e4:    222d        -"      MOVS     r2,#0x2d
        0x008161e6:    7122        "q      STRB     r2,[r4,#4]
;;;269    	s[5] = rtc_time.nMonth/10 + 0x30;
        0x008161e8:    f89d1002    ....    LDRB     r1,[sp,#2]
        0x008161ec:    fbb1f1f0    ....    UDIV     r1,r1,r0
        0x008161f0:    3130        01      ADDS     r1,r1,#0x30
        0x008161f2:    7161        aq      STRB     r1,[r4,#5]
;;;270    	s[6] = rtc_time.nMonth%10 + 0x30;
        0x008161f4:    f89d1002    ....    LDRB     r1,[sp,#2]
        0x008161f8:    fbb1f3f0    ....    UDIV     r3,r1,r0
        0x008161fc:    fb001113    ....    MLS      r1,r0,r3,r1
        0x00816200:    3130        01      ADDS     r1,r1,#0x30
        0x00816202:    71a1        .q      STRB     r1,[r4,#6]
;;;271    	s[7] = '-';
        0x00816204:    71e2        .q      STRB     r2,[r4,#7]
;;;272    	s[8] = rtc_time.nDay/10 + 0x30;
        0x00816206:    f89d1003    ....    LDRB     r1,[sp,#3]
        0x0081620a:    fbb1f1f0    ....    UDIV     r1,r1,r0
        0x0081620e:    3130        01      ADDS     r1,r1,#0x30
        0x00816210:    7221        !r      STRB     r1,[r4,#8]
;;;273    	s[9] = rtc_time.nDay%10 + 0x30;
        0x00816212:    f89d1003    ....    LDRB     r1,[sp,#3]
        0x00816216:    fbb1f2f0    ....    UDIV     r2,r1,r0
        0x0081621a:    fb001112    ....    MLS      r1,r0,r2,r1
        0x0081621e:    3130        01      ADDS     r1,r1,#0x30
        0x00816220:    7261        ar      STRB     r1,[r4,#9]
;;;274    	s[10] = ' ';
        0x00816222:    2120         !      MOVS     r1,#0x20
        0x00816224:    72a1        .r      STRB     r1,[r4,#0xa]
;;;275    	s[11] = rtc_time.nHour/10 + 0x30;
        0x00816226:    f89d1004    ....    LDRB     r1,[sp,#4]
        0x0081622a:    fbb1f1f0    ....    UDIV     r1,r1,r0
        0x0081622e:    3130        01      ADDS     r1,r1,#0x30
        0x00816230:    72e1        .r      STRB     r1,[r4,#0xb]
;;;276    	s[12] = rtc_time.nHour%10 + 0x30;
        0x00816232:    f89d1004    ....    LDRB     r1,[sp,#4]
        0x00816236:    fbb1f2f0    ....    UDIV     r2,r1,r0
        0x0081623a:    fb001112    ....    MLS      r1,r0,r2,r1
        0x0081623e:    3130        01      ADDS     r1,r1,#0x30
        0x00816240:    7321        !s      STRB     r1,[r4,#0xc]
;;;277    	s[13] = ':';
        0x00816242:    223a        :"      MOVS     r2,#0x3a
        0x00816244:    7362        bs      STRB     r2,[r4,#0xd]
;;;278    	s[14] = rtc_time.nMin/10 + 0x30;
        0x00816246:    f89d1005    ....    LDRB     r1,[sp,#5]
        0x0081624a:    fbb1f1f0    ....    UDIV     r1,r1,r0
        0x0081624e:    3130        01      ADDS     r1,r1,#0x30
        0x00816250:    73a1        .s      STRB     r1,[r4,#0xe]
;;;279    	s[15] = rtc_time.nMin%10 + 0x30;
        0x00816252:    f89d1005    ....    LDRB     r1,[sp,#5]
        0x00816256:    fbb1f3f0    ....    UDIV     r3,r1,r0
        0x0081625a:    fb001113    ....    MLS      r1,r0,r3,r1
        0x0081625e:    3130        01      ADDS     r1,r1,#0x30
        0x00816260:    73e1        .s      STRB     r1,[r4,#0xf]
;;;280    	s[16] = ':';
        0x00816262:    7422        "t      STRB     r2,[r4,#0x10]
;;;281    	s[17] = rtc_time.nSec/10 + 0x30;
        0x00816264:    f89d1006    ....    LDRB     r1,[sp,#6]
        0x00816268:    fbb1f1f0    ....    UDIV     r1,r1,r0
        0x0081626c:    3130        01      ADDS     r1,r1,#0x30
        0x0081626e:    7461        at      STRB     r1,[r4,#0x11]
;;;282    	s[18] = rtc_time.nSec%10 + 0x30;
        0x00816270:    f89d1006    ....    LDRB     r1,[sp,#6]
        0x00816274:    fbb1f2f0    ....    UDIV     r2,r1,r0
        0x00816278:    fb001012    ....    MLS      r0,r0,r2,r1
        0x0081627c:    3030        00      ADDS     r0,r0,#0x30
        0x0081627e:    74a0        .t      STRB     r0,[r4,#0x12]
;;;283    	s[19] = '\0';
        0x00816280:    74e5        .t      STRB     r5,[r4,#0x13]
;;;284    }
        0x00816282:    bd7c        |.      POP      {r2-r6,pc}
    applib_dt_is_leap_year
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_unix_time.c (59)
        0x00816284:    f44f71c8    O..q    MOV      r1,#0x190
        0x00816288:    fbb0f2f1    ....    UDIV     r2,r0,r1
        0x0081628c:    fb010112    ....    MLS      r1,r1,r2,r0
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_unix_time.c (51)
        0x00816290:    b149        I.      CBZ      r1,0x8162a6 ; applib_dt_is_leap_year + 34
;;;52         /*----------------------------------------------------------------*/
;;;53         /* Local Variables                                                */
;;;54         /*----------------------------------------------------------------*/
;;;55     
;;;56         /*----------------------------------------------------------------*/
;;;57         /* Code Body                                                      */
;;;58         /*----------------------------------------------------------------*/
;;;59         if ((year % 400) == 0) {
;;;60             return 1;
;;;61         } else if ((year % 100) == 0) {
        0x00816292:    2164        d!      MOVS     r1,#0x64
        0x00816294:    fbb0f2f1    ....    UDIV     r2,r0,r1
        0x00816298:    fb010112    ....    MLS      r1,r1,r2,r0
        0x0081629c:    b109        ..      CBZ      r1,0x8162a2 ; applib_dt_is_leap_year + 30
;;;62             return 0;
;;;63         } else if ((year % 4) == 0) {
        0x0081629e:    0780        ..      LSLS     r0,r0,#30
        0x008162a0:    d001        ..      BEQ      0x8162a6 ; applib_dt_is_leap_year + 34
        0x008162a2:    2000        .       MOVS     r0,#0
        0x008162a4:    4770        pG      BX       lr
;;;64             return 1;
        0x008162a6:    2001        .       MOVS     r0,#1
;;;65         } else {
;;;66             return 0;
;;;67         }
;;;68     }
        0x008162a8:    4770        pG      BX       lr
    applib_dt_dayindex
;;;69     
;;;70     
;;;71     /**
;;;72      * @brief   Function for obtain the days of month.
;;;73      *
;;;74      * @return  days
;;;75      * @note    
;;;76      *.
;;;77      * */
;;;78     static uint8_t applib_dt_last_day_of_mon(uint8_t month, uint16_t year)
;;;79     {
;;;80         /*----------------------------------------------------------------*/
;;;81         /* Local Variables                                                */
;;;82         /*----------------------------------------------------------------*/
;;;83     
;;;84         /*----------------------------------------------------------------*/
;;;85         /* Code Body                                                      */
;;;86         /*----------------------------------------------------------------*/
;;;87         if ((month == 0) || (month > 12)) {
;;;88             return g_day_per_mon[1] + applib_dt_is_leap_year(year);
;;;89         }
;;;90     
;;;91         if (month != 2) {
;;;92             return g_day_per_mon[month - 1];
;;;93         } else {
;;;94             return g_day_per_mon[1] + applib_dt_is_leap_year(year);
;;;95         }
;;;96     }
;;;97     
;;;98     
;;;99     /**
;;;100     * @brief   Function for get the corresponding week based on the given date.
;;;101     *
;;;102     * @return  
;;;103     * @note    0-Sunday  6-Saturday
;;;104     *.
;;;105     * */
;;;106    static uint8_t applib_dt_dayindex(uint16_t year, uint8_t month, uint8_t day)
;;;107    {
        0x008162aa:    b530        0.      PUSH     {r4,r5,lr}
        0x008162ac:    2464        d$      MOVS     r4,#0x64
        0x008162ae:    b253        S.      SXTB     r3,r2
        0x008162b0:    2901        .)      CMP      r1,#1
        0x008162b2:    d02a        *.      BEQ      0x81630a ; applib_dt_dayindex + 96
;;;108        int8_t century_code, year_code, month_code, day_code;
;;;109        int32_t week = 0;
;;;110    
;;;111        century_code = year_code = month_code = day_code = 0;
;;;112    
;;;113        if (month == 1 || month == 2) {
        0x008162b4:    2902        .)      CMP      r1,#2
        0x008162b6:    d028        (.      BEQ      0x81630a ; applib_dt_dayindex + 96
;;;114            century_code = (year - 1) / 100;
;;;115            year_code = (year - 1) % 100;
;;;116            month_code = month + 12;
;;;117            day_code = day;
;;;118        } else {
;;;119            century_code = year / 100;
        0x008162b8:    fbb0f2f4    ....    UDIV     r2,r0,r4
        0x008162bc:    fbb0f5f4    ....    UDIV     r5,r0,r4
        0x008162c0:    fb040015    ....    MLS      r0,r4,r5,r0
        0x008162c4:    b252        R.      SXTB     r2,r2
;;;120            year_code = year % 100;
;;;121            month_code = month;
        0x008162c6:    b249        I.      SXTB     r1,r1
;;;122            day_code = day;
;;;123        }
;;;124    
;;;125        week = year_code + year_code / 4 + century_code / 4 - 2 * century_code + 26 * ( month_code + 1 ) / 10 + day_code - 1;
        0x008162c8:    241a        .$      MOVS     r4,#0x1a
        0x008162ca:    1c49        I.      ADDS     r1,r1,#1
        0x008162cc:    fb11f104    ....    SMULBB   r1,r1,r4
        0x008162d0:    240a        .$      MOVS     r4,#0xa
        0x008162d2:    fb91f1f4    ....    SDIV     r1,r1,r4
        0x008162d6:    17c4        ..      ASRS     r4,r0,#31
        0x008162d8:    eb007494    ...t    ADD      r4,r0,r4,LSR #30
        0x008162dc:    eb0000a4    ....    ADD      r0,r0,r4,ASR #2
        0x008162e0:    17d4        ..      ASRS     r4,r2,#31
        0x008162e2:    eb027494    ...t    ADD      r4,r2,r4,LSR #30
        0x008162e6:    eb0000a4    ....    ADD      r0,r0,r4,ASR #2
        0x008162ea:    4252        RB      RSBS     r2,r2,#0
        0x008162ec:    eb000042    ..B.    ADD      r0,r0,r2,LSL #1
        0x008162f0:    4408        .D      ADD      r0,r0,r1
        0x008162f2:    4418        .D      ADD      r0,r0,r3
;;;126        week = week > 0 ? (week % 7) : ((week % 7) + 7);
        0x008162f4:    2107        .!      MOVS     r1,#7
        0x008162f6:    1e40        @.      SUBS     r0,r0,#1
        0x008162f8:    fb90f2f1    ....    SDIV     r2,r0,r1
        0x008162fc:    2800        .(      CMP      r0,#0
        0x008162fe:    fb010012    ....    MLS      r0,r1,r2,r0
        0x00816302:    dc00        ..      BGT      0x816306 ; applib_dt_dayindex + 92
        0x00816304:    1dc0        ..      ADDS     r0,r0,#7
;;;127    
;;;128        return week;
        0x00816306:    b2c0        ..      UXTB     r0,r0
;;;129    }
        0x00816308:    bd30        0.      POP      {r4,r5,pc}
        0x0081630a:    1e40        @.      SUBS     r0,r0,#1
        0x0081630c:    fb90f2f4    ....    SDIV     r2,r0,r4
        0x00816310:    fb90f5f4    ....    SDIV     r5,r0,r4
        0x00816314:    fb040015    ....    MLS      r0,r4,r5,r0
        0x00816318:    b252        R.      SXTB     r2,r2
        0x0081631a:    b240        @.      SXTB     r0,r0
        0x0081631c:    310c        .1      ADDS     r1,r1,#0xc
        0x0081631e:    e7d2        ..      B        0x8162c6 ; applib_dt_dayindex + 28
    $d
        0x00816320:    0081c304    ....    DCD    8504068
        0x00816324:    00015180    .Q..    DCD    86400
    $t
    .text
    tuya_ble_inverted_array
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_utils.c
;;;31     {
        0x00816328:    b510        ..      PUSH     {r4,lr}
;;;32         uint8_t temp;
;;;33         uint16_t i,j;
;;;34         for (i = 0,j=length-1; i<j; i++,j--)
        0x0081632a:    2200        ."      MOVS     r2,#0
        0x0081632c:    1e49        I.      SUBS     r1,r1,#1
        0x0081632e:    b289        ..      UXTH     r1,r1
        0x00816330:    428a        .B      CMP      r2,r1
        0x00816332:    d206        ..      BCS      0x816342 ; tuya_ble_inverted_array + 26
        0x00816334:    5c83        .\      LDRB     r3,[r0,r2]
        0x00816336:    5c44        D\      LDRB     r4,[r0,r1]
        0x00816338:    5484        .T      STRB     r4,[r0,r2]
        0x0081633a:    1c52        R.      ADDS     r2,r2,#1
        0x0081633c:    5443        CT      STRB     r3,[r0,r1]
        0x0081633e:    b292        ..      UXTH     r2,r2
        0x00816340:    e7f4        ..      B        0x81632c ; tuya_ble_inverted_array + 4
;;;35         {
;;;36             temp=array[i];
;;;37             array[i]=array[j];
;;;38             array[j]=temp;
;;;39         }
;;;40     }
        0x00816342:    bd10        ..      POP      {r4,pc}
    tuya_ble_buffer_value_is_all_x
;;;41     
;;;42     bool tuya_ble_buffer_value_is_all_x(uint8_t *buffer,uint16_t len,uint8_t value)
;;;43     {
        0x00816344:    b530        0.      PUSH     {r4,r5,lr}
        0x00816346:    2401        .$      MOVS     r4,#1
        0x00816348:    2300        .#      MOVS     r3,#0
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_utils.c (43)
        0x0081634a:    e006        ..      B        0x81635a ; tuya_ble_buffer_value_is_all_x + 22
        0x0081634c:    5cc5        .\      LDRB     r5,[r0,r3]
        0x0081634e:    4295        .B      CMP      r5,r2
        0x00816350:    d001        ..      BEQ      0x816356 ; tuya_ble_buffer_value_is_all_x + 18
        0x00816352:    2400        .$      MOVS     r4,#0
        0x00816354:    e003        ..      B        0x81635e ; tuya_ble_buffer_value_is_all_x + 26
        0x00816356:    1c5b        [.      ADDS     r3,r3,#1
;;;44         bool ret = true;
;;;45         for(uint16_t i = 0; i<len; i++)
        0x00816358:    b29b        ..      UXTH     r3,r3
        0x0081635a:    428b        .B      CMP      r3,r1
        0x0081635c:    d3f6        ..      BCC      0x81634c ; tuya_ble_buffer_value_is_all_x + 8
;;;46         {
;;;47             if(buffer[i]!= value)
;;;48             {
;;;49                 ret = false;
;;;50                 break;
;;;51             }
;;;52         }
;;;53         return ret;
        0x0081635e:    4620         F      MOV      r0,r4
;;;54     }
        0x00816360:    bd30        0.      POP      {r4,r5,pc}
    tuya_ble_check_sum
;;;55     
;;;56     
;;;57     uint8_t tuya_ble_check_sum(uint8_t *pbuf,uint16_t len)
;;;58     {
        0x00816362:    b510        ..      PUSH     {r4,lr}
        0x00816364:    2200        ."      MOVS     r2,#0
        0x00816366:    4613        .F      MOV      r3,r2
        0x00816368:    e002        ..      B        0x816370 ; tuya_ble_check_sum + 14
        0x0081636a:    5c84        .\      LDRB     r4,[r0,r2]
        0x0081636c:    1c52        R.      ADDS     r2,r2,#1
        0x0081636e:    4423        #D      ADD      r3,r3,r4
;;;59         uint32_t i = 0,ck_sum = 0;
;;;60     
;;;61         for(i = 0; i<len ; i++)
        0x00816370:    428a        .B      CMP      r2,r1
        0x00816372:    d3fa        ..      BCC      0x81636a ; tuya_ble_check_sum + 8
;;;62             ck_sum += pbuf[i];
;;;63         return (uint8_t)ck_sum;
        0x00816374:    b2d8        ..      UXTB     r0,r3
;;;64     }
        0x00816376:    bd10        ..      POP      {r4,pc}
    tuya_ble_check_num
;;;65     
;;;66     uint8_t tuya_ble_check_num(uint8_t *buf,uint8_t num)
;;;67     {
        0x00816378:    b510        ..      PUSH     {r4,lr}
        0x0081637a:    2200        ."      MOVS     r2,#0
        0x0081637c:    7803        .x      LDRB     r3,[r0,#0]
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_utils.c (67)
        0x0081637e:    e007        ..      B        0x816390 ; tuya_ble_check_num + 24
        0x00816380:    1884        ..      ADDS     r4,r0,r2
        0x00816382:    7864        dx      LDRB     r4,[r4,#1]
        0x00816384:    428c        .B      CMP      r4,r1
        0x00816386:    d101        ..      BNE      0x81638c ; tuya_ble_check_num + 20
        0x00816388:    2001        .       MOVS     r0,#1
        0x0081638a:    bd10        ..      POP      {r4,pc}
        0x0081638c:    1c52        R.      ADDS     r2,r2,#1
;;;68         uint8_t i = 0;
;;;69     
;;;70         for(; i < buf[0]; i++) {
        0x0081638e:    b2d2        ..      UXTB     r2,r2
        0x00816390:    4293        .B      CMP      r3,r2
        0x00816392:    d8f5        ..      BHI      0x816380 ; tuya_ble_check_num + 8
;;;71             if(buf[i+1] == num) {
;;;72                 return 1;
;;;73             }
;;;74         }
;;;75         return 0;
        0x00816394:    2000        .       MOVS     r0,#0
;;;76     }
        0x00816396:    bd10        ..      POP      {r4,pc}
    tuya_ble_hextoascii
;;;77     
;;;78     void tuya_ble_hextoascii(uint8_t *hexbuf,uint8_t len,uint8_t *ascbuf)
;;;79     {
        0x00816398:    b530        0.      PUSH     {r4,r5,lr}
        0x0081639a:    2300        .#      MOVS     r3,#0
        0x0081639c:    461c        .F      MOV      r4,r3
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_utils.c (79)
        0x0081639e:    e016        ..      B        0x8163ce ; tuya_ble_hextoascii + 54
;;;80         uint8_t i =0,j =0,temp = 0;
;;;81     
;;;82         for(i = 0; i<len; i++) {
;;;83             temp = (hexbuf[i]>>4)&0xf;
        0x008163a0:    5cc5        .\      LDRB     r5,[r0,r3]
        0x008163a2:    092d        -.      LSRS     r5,r5,#4
;;;84             if(temp <=9) {
        0x008163a4:    2d09        .-      CMP      r5,#9
        0x008163a6:    d801        ..      BHI      0x8163ac ; tuya_ble_hextoascii + 20
        0x008163a8:    3530        05      ADDS     r5,r5,#0x30
;;;85                 ascbuf[j] = temp + 0x30;
        0x008163aa:    e000        ..      B        0x8163ae ; tuya_ble_hextoascii + 22
        0x008163ac:    3557        W5      ADDS     r5,r5,#0x57
;;;86             }
;;;87             else {
;;;88                 ascbuf[j] = temp + 87;
        0x008163ae:    5515        .U      STRB     r5,[r2,r4]
        0x008163b0:    1c64        d.      ADDS     r4,r4,#1
;;;89             }
;;;90             j++;
        0x008163b2:    b2e5        ..      UXTB     r5,r4
;;;91             temp = (hexbuf[i])&0xf;
        0x008163b4:    5cc4        .\      LDRB     r4,[r0,r3]
        0x008163b6:    f004040f    ....    AND      r4,r4,#0xf
;;;92             if(temp <=9) {
        0x008163ba:    2c09        .,      CMP      r4,#9
        0x008163bc:    d801        ..      BHI      0x8163c2 ; tuya_ble_hextoascii + 42
        0x008163be:    3430        04      ADDS     r4,r4,#0x30
;;;93                 ascbuf[j] = temp + 0x30;
        0x008163c0:    e000        ..      B        0x8163c4 ; tuya_ble_hextoascii + 44
        0x008163c2:    3457        W4      ADDS     r4,r4,#0x57
;;;94             }
;;;95             else {
;;;96                 ascbuf[j] = temp + 87;
        0x008163c4:    5554        TU      STRB     r4,[r2,r5]
        0x008163c6:    1c6d        m.      ADDS     r5,r5,#1
;;;97             }
;;;98             j++;
        0x008163c8:    1c5b        [.      ADDS     r3,r3,#1
        0x008163ca:    b2ec        ..      UXTB     r4,r5
        0x008163cc:    b2db        ..      UXTB     r3,r3
        0x008163ce:    428b        .B      CMP      r3,r1
        0x008163d0:    d3e6        ..      BCC      0x8163a0 ; tuya_ble_hextoascii + 8
;;;99         }
;;;100        ascbuf[j] = 0x0;
        0x008163d2:    2000        .       MOVS     r0,#0
        0x008163d4:    5510        .U      STRB     r0,[r2,r4]
;;;101    }
        0x008163d6:    bd30        0.      POP      {r4,r5,pc}
    tuya_ble_asciitohex
;;;102    
;;;103    void tuya_ble_asciitohex(uint8_t *ascbuf,uint8_t *hexbuf)
;;;104    {
        0x008163d8:    b530        0.      PUSH     {r4,r5,lr}
        0x008163da:    2400        .$      MOVS     r4,#0
        0x008163dc:    4622        "F      MOV      r2,r4
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_utils.c (104)
        0x008163de:    e033        3.      B        0x816448 ; tuya_ble_asciitohex + 112
        0x008163e0:    1c52        R.      ADDS     r2,r2,#1
        0x008163e2:    f1a30530    ..0.    SUB      r5,r3,#0x30
;;;105        uint8_t i =0,j =0;
;;;106    
;;;107        while(ascbuf[i]) {
;;;108            j++;
        0x008163e6:    b2d2        ..      UXTB     r2,r2
;;;109            if((ascbuf[i] >= 0x30)&&(ascbuf[i] <= 0x39)) {
        0x008163e8:    2d09        .-      CMP      r5,#9
        0x008163ea:    d801        ..      BHI      0x8163f0 ; tuya_ble_asciitohex + 24
;;;110                hexbuf[j] = ((ascbuf[i] - 0x30)<<4);
        0x008163ec:    011b        ..      LSLS     r3,r3,#4
        0x008163ee:    e00e        ..      B        0x81640e ; tuya_ble_asciitohex + 54
;;;111            }
;;;112            else if((ascbuf[i] >= 65)&&(ascbuf[i] <= 70)) {
        0x008163f0:    f1a30541    ..A.    SUB      r5,r3,#0x41
        0x008163f4:    2d05        .-      CMP      r5,#5
        0x008163f6:    d803        ..      BHI      0x816400 ; tuya_ble_asciitohex + 40
;;;113                hexbuf[j] = ((ascbuf[i] - 55)<<4);
        0x008163f8:    011b        ..      LSLS     r3,r3,#4
        0x008163fa:    f5a3735c    ..\s    SUB      r3,r3,#0x370
        0x008163fe:    e006        ..      B        0x81640e ; tuya_ble_asciitohex + 54
;;;114            }
;;;115            else if((ascbuf[i] >= 97)&&(ascbuf[i] <= 102)) {
        0x00816400:    f1a30561    ..a.    SUB      r5,r3,#0x61
        0x00816404:    2d05        .-      CMP      r5,#5
        0x00816406:    d803        ..      BHI      0x816410 ; tuya_ble_asciitohex + 56
;;;116                hexbuf[j] = ((ascbuf[i] - 87)<<4);
        0x00816408:    011b        ..      LSLS     r3,r3,#4
        0x0081640a:    f5a363ae    ...c    SUB      r3,r3,#0x570
        0x0081640e:    548b        .T      STRB     r3,[r1,r2]
        0x00816410:    1c64        d.      ADDS     r4,r4,#1
;;;117            }
;;;118            i++;
        0x00816412:    b2e4        ..      UXTB     r4,r4
;;;119            if((ascbuf[i] >= 0x30)&&(ascbuf[i] <= 0x39)) {
        0x00816414:    5d03        .]      LDRB     r3,[r0,r4]
        0x00816416:    f1a30530    ..0.    SUB      r5,r3,#0x30
        0x0081641a:    2d09        .-      CMP      r5,#9
        0x0081641c:    d803        ..      BHI      0x816426 ; tuya_ble_asciitohex + 78
;;;120                hexbuf[j] |= (ascbuf[i] - 0x30);
        0x0081641e:    5c8b        .\      LDRB     r3,[r1,r2]
        0x00816420:    432b        +C      ORRS     r3,r3,r5
        0x00816422:    548b        .T      STRB     r3,[r1,r2]
        0x00816424:    e00e        ..      B        0x816444 ; tuya_ble_asciitohex + 108
;;;121            }
;;;122            else if((ascbuf[i] >= 65)&&(ascbuf[i] <= 70)) {
        0x00816426:    f1a30541    ..A.    SUB      r5,r3,#0x41
        0x0081642a:    2d05        .-      CMP      r5,#5
        0x0081642c:    d802        ..      BHI      0x816434 ; tuya_ble_asciitohex + 92
;;;123                hexbuf[j] |= (ascbuf[i] - 55);
        0x0081642e:    5c8d        .\      LDRB     r5,[r1,r2]
        0x00816430:    3b37        7;      SUBS     r3,r3,#0x37
        0x00816432:    e005        ..      B        0x816440 ; tuya_ble_asciitohex + 104
;;;124            }
;;;125            else if((ascbuf[i] >= 97)&&(ascbuf[i] <= 102)) {
        0x00816434:    f1a30561    ..a.    SUB      r5,r3,#0x61
        0x00816438:    2d05        .-      CMP      r5,#5
        0x0081643a:    d803        ..      BHI      0x816444 ; tuya_ble_asciitohex + 108
;;;126                hexbuf[j] |= (ascbuf[i] - 87);
        0x0081643c:    5c8d        .\      LDRB     r5,[r1,r2]
        0x0081643e:    3b57        W;      SUBS     r3,r3,#0x57
        0x00816440:    431d        .C      ORRS     r5,r5,r3
        0x00816442:    548d        .T      STRB     r5,[r1,r2]
        0x00816444:    1c64        d.      ADDS     r4,r4,#1
;;;127            }
;;;128            i++;
        0x00816446:    b2e4        ..      UXTB     r4,r4
        0x00816448:    5d03        .]      LDRB     r3,[r0,r4]
        0x0081644a:    2b00        .+      CMP      r3,#0
        0x0081644c:    d1c8        ..      BNE      0x8163e0 ; tuya_ble_asciitohex + 8
;;;129        }
;;;130        hexbuf[0] = j;
        0x0081644e:    700a        .p      STRB     r2,[r1,#0]
;;;131    }
        0x00816450:    bd30        0.      POP      {r4,r5,pc}
    tuya_ble_char_2_ascii
        0x00816452:    21ff        .!      MOVS     r1,#0xff
        0x00816454:    f1a00230    ..0.    SUB      r2,r0,#0x30
        0x00816458:    2a09        .*      CMP      r2,#9
;;;132    
;;;133    
;;;134    
;;;135    uint8_t tuya_ble_char_2_ascii(uint8_t data)
;;;136    {
        0x0081645a:    d801        ..      BHI      0x816460 ; tuya_ble_char_2_ascii + 14
;;;137        uint8_t ret = 0xff;
;;;138    
;;;139        if((data >= 48)&&(data <= 57)) {
;;;140            ret = data - 48;
        0x0081645c:    b2d1        ..      UXTB     r1,r2
        0x0081645e:    e00b        ..      B        0x816478 ; tuya_ble_char_2_ascii + 38
;;;141        }
;;;142        else if((data >= 65)&&(data <= 70)) {
        0x00816460:    f1a00241    ..A.    SUB      r2,r0,#0x41
        0x00816464:    2a05        .*      CMP      r2,#5
        0x00816466:    d801        ..      BHI      0x81646c ; tuya_ble_char_2_ascii + 26
        0x00816468:    3837        78      SUBS     r0,r0,#0x37
;;;143            ret = data - 55;
        0x0081646a:    e004        ..      B        0x816476 ; tuya_ble_char_2_ascii + 36
;;;144        }
;;;145        else if((data >= 97)&&(data <= 102)) {
        0x0081646c:    f1a00261    ..a.    SUB      r2,r0,#0x61
        0x00816470:    2a05        .*      CMP      r2,#5
        0x00816472:    d801        ..      BHI      0x816478 ; tuya_ble_char_2_ascii + 38
        0x00816474:    3857        W8      SUBS     r0,r0,#0x57
;;;146            ret = data - 87;
        0x00816476:    b2c1        ..      UXTB     r1,r0
;;;147        }
;;;148        return ret;
        0x00816478:    4608        .F      MOV      r0,r1
;;;149    }
        0x0081647a:    4770        pG      BX       lr
    tuya_ble_str_to_hex
;;;150    
;;;151    void tuya_ble_str_to_hex(uint8_t *str_buf,uint8_t str_len,uint8_t *hex_buf)
;;;152    {
        0x0081647c:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0081647e:    2300        .#      MOVS     r3,#0
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_utils.c (152)
        0x00816480:    4615        .F      MOV      r5,r2
        0x00816482:    460f        .F      MOV      r7,r1
        0x00816484:    4606        .F      MOV      r6,r0
        0x00816486:    461c        .F      MOV      r4,r3
        0x00816488:    e014        ..      B        0x8164b4 ; tuya_ble_str_to_hex + 56
;;;153        uint8_t data_tmp = 0,i = 0,j = 0;
;;;154    
;;;155        for(j = 0 ; j < str_len ; j++) {
;;;156            data_tmp = tuya_ble_char_2_ascii(str_buf[j]);
        0x0081648a:    5d30        0]      LDRB     r0,[r6,r4]
        0x0081648c:    f7ffffe1    ....    BL       tuya_ble_char_2_ascii ; 0x816452
;;;157            if(data_tmp != 0xff) {
        0x00816490:    28ff        .(      CMP      r0,#0xff
        0x00816492:    d011        ..      BEQ      0x8164b8 ; tuya_ble_str_to_hex + 60
;;;158                hex_buf[i] = (data_tmp << 4);
        0x00816494:    1c64        d.      ADDS     r4,r4,#1
        0x00816496:    0100        ..      LSLS     r0,r0,#4
        0x00816498:    b2e4        ..      UXTB     r4,r4
        0x0081649a:    54e8        .T      STRB     r0,[r5,r3]
        0x0081649c:    5d30        0]      LDRB     r0,[r6,r4]
        0x0081649e:    f7ffffd8    ....    BL       tuya_ble_char_2_ascii ; 0x816452
        0x008164a2:    28ff        .(      CMP      r0,#0xff
        0x008164a4:    d008        ..      BEQ      0x8164b8 ; tuya_ble_str_to_hex + 60
;;;159            }
;;;160            else {
;;;161                return;
;;;162            }
;;;163            j++;
;;;164            data_tmp = tuya_ble_char_2_ascii(str_buf[j]);
;;;165            if(data_tmp != 0xff) {
;;;166                hex_buf[i] += data_tmp;
        0x008164a6:    5ce9        .\      LDRB     r1,[r5,r3]
        0x008164a8:    4408        .D      ADD      r0,r0,r1
        0x008164aa:    54e8        .T      STRB     r0,[r5,r3]
        0x008164ac:    1c5b        [.      ADDS     r3,r3,#1
;;;167            }
;;;168            else {
;;;169                return;
;;;170            }
;;;171            i++;
        0x008164ae:    1c64        d.      ADDS     r4,r4,#1
        0x008164b0:    b2db        ..      UXTB     r3,r3
        0x008164b2:    b2e4        ..      UXTB     r4,r4
        0x008164b4:    42bc        .B      CMP      r4,r7
        0x008164b6:    d3e8        ..      BCC      0x81648a ; tuya_ble_str_to_hex + 14
;;;172        }
;;;173    }
        0x008164b8:    bdf0        ..      POP      {r4-r7,pc}
    tuya_ble_swap
;;;174    
;;;175    void tuya_ble_swap(int16_t *a, int16_t *b)
;;;176    {
;;;177        int16_t    temp;
;;;178        temp = *a;
        0x008164ba:    8802        ..      LDRH     r2,[r0,#0]
;;;179        *a = *b;
        0x008164bc:    880b        ..      LDRH     r3,[r1,#0]
        0x008164be:    8003        ..      STRH     r3,[r0,#0]
;;;180        *b = temp;
        0x008164c0:    800a        ..      STRH     r2,[r1,#0]
;;;181    }
        0x008164c2:    4770        pG      BX       lr
    tuya_ble_hex2int
;;;182    
;;;183    
;;;184    int32_t tuya_ble_hex2int(uint8_t mhex)
;;;185    {
;;;186        switch(mhex) {
        0x008164c4:    2842        B(      CMP      r0,#0x42
        0x008164c6:    d040        @.      BEQ      0x81654a ; tuya_ble_hex2int + 134
        0x008164c8:    dc0e        ..      BGT      0x8164e8 ; tuya_ble_hex2int + 36
        0x008164ca:    f1a00030    ..0.    SUB      r0,r0,#0x30
        0x008164ce:    2812        .(      CMP      r0,#0x12
        0x008164d0:    d222        ".      BCS      0x816518 ; tuya_ble_hex2int + 84
        0x008164d2:    e8dff000    ....    TBB      [pc,r0]
    $d
        0x008164d6:    2624        $&      DCW    9764
        0x008164d8:    2e2c2a28    (*,.    DCD    774646312
        0x008164dc:    36343230    0246    DCD    909390384
        0x008164e0:    21212121    !!!!    DCD    555819297
        0x008164e4:    38212121    !!!8    DCD    941695265
    $t
        0x008164e8:    2862        b(      CMP      r0,#0x62
        0x008164ea:    d02e        ..      BEQ      0x81654a ; tuya_ble_hex2int + 134
        0x008164ec:    dc0c        ..      BGT      0x816508 ; tuya_ble_hex2int + 68
        0x008164ee:    2845        E(      CMP      r0,#0x45
        0x008164f0:    d031        1.      BEQ      0x816556 ; tuya_ble_hex2int + 146
        0x008164f2:    dc04        ..      BGT      0x8164fe ; tuya_ble_hex2int + 58
        0x008164f4:    2843        C(      CMP      r0,#0x43
        0x008164f6:    d02a        *.      BEQ      0x81654e ; tuya_ble_hex2int + 138
        0x008164f8:    2844        D(      CMP      r0,#0x44
        0x008164fa:    d10d        ..      BNE      0x816518 ; tuya_ble_hex2int + 84
        0x008164fc:    e029        ).      B        0x816552 ; tuya_ble_hex2int + 142
        0x008164fe:    2846        F(      CMP      r0,#0x46
        0x00816500:    d02b        +.      BEQ      0x81655a ; tuya_ble_hex2int + 150
        0x00816502:    2861        a(      CMP      r0,#0x61
        0x00816504:    d108        ..      BNE      0x816518 ; tuya_ble_hex2int + 84
        0x00816506:    e01e        ..      B        0x816546 ; tuya_ble_hex2int + 130
        0x00816508:    2863        c(      CMP      r0,#0x63
        0x0081650a:    d020         .      BEQ      0x81654e ; tuya_ble_hex2int + 138
        0x0081650c:    2864        d(      CMP      r0,#0x64
        0x0081650e:    d020         .      BEQ      0x816552 ; tuya_ble_hex2int + 142
        0x00816510:    2865        e(      CMP      r0,#0x65
        0x00816512:    d020         .      BEQ      0x816556 ; tuya_ble_hex2int + 146
        0x00816514:    2866        f(      CMP      r0,#0x66
        0x00816516:    d020         .      BEQ      0x81655a ; tuya_ble_hex2int + 150
        0x00816518:    f04f30ff    O..0    MOV      r0,#0xffffffff
        0x0081651c:    4770        pG      BX       lr
;;;187        case '0':
;;;188            return 0;
        0x0081651e:    2000        .       MOVS     r0,#0
        0x00816520:    4770        pG      BX       lr
;;;189        case '1':
;;;190            return 1;
        0x00816522:    2001        .       MOVS     r0,#1
        0x00816524:    4770        pG      BX       lr
;;;191        case '2':
;;;192            return 2;
        0x00816526:    2002        .       MOVS     r0,#2
        0x00816528:    4770        pG      BX       lr
;;;193        case '3':
;;;194            return 3;
        0x0081652a:    2003        .       MOVS     r0,#3
        0x0081652c:    4770        pG      BX       lr
;;;195        case '4':
;;;196            return 4;
        0x0081652e:    2004        .       MOVS     r0,#4
        0x00816530:    4770        pG      BX       lr
;;;197        case '5':
;;;198            return 5;
        0x00816532:    2005        .       MOVS     r0,#5
        0x00816534:    4770        pG      BX       lr
;;;199        case '6':
;;;200            return 6;
        0x00816536:    2006        .       MOVS     r0,#6
        0x00816538:    4770        pG      BX       lr
;;;201        case '7':
;;;202            return 7;
        0x0081653a:    2007        .       MOVS     r0,#7
        0x0081653c:    4770        pG      BX       lr
;;;203        case '8':
;;;204            return 8;
        0x0081653e:    2008        .       MOVS     r0,#8
        0x00816540:    4770        pG      BX       lr
;;;205        case '9':
;;;206            return 9;
        0x00816542:    2009        .       MOVS     r0,#9
        0x00816544:    4770        pG      BX       lr
;;;207        case 'a':
;;;208        case 'A':
;;;209            return 10;
        0x00816546:    200a        .       MOVS     r0,#0xa
        0x00816548:    4770        pG      BX       lr
;;;210        case 'b':
;;;211        case 'B':
;;;212            return 11;
        0x0081654a:    200b        .       MOVS     r0,#0xb
        0x0081654c:    4770        pG      BX       lr
;;;213        case 'c':
;;;214        case 'C':
;;;215            return 12;
        0x0081654e:    200c        .       MOVS     r0,#0xc
        0x00816550:    4770        pG      BX       lr
;;;216        case 'd':
;;;217        case 'D':
;;;218            return 13;
        0x00816552:    200d        .       MOVS     r0,#0xd
        0x00816554:    4770        pG      BX       lr
;;;219        case 'e':
;;;220        case 'E':
;;;221            return 14;
        0x00816556:    200e        .       MOVS     r0,#0xe
        0x00816558:    4770        pG      BX       lr
;;;222        case 'f':
;;;223        case 'F':
;;;224            return 15;
        0x0081655a:    200f        .       MOVS     r0,#0xf
;;;225        default:
;;;226            return -1;
;;;227        }
;;;228    }
        0x0081655c:    4770        pG      BX       lr
    tuya_ble_hexstr2int
;;;229    char tuya_ble_hexstr2int(uint8_t *hexstr,int len,uint8_t *sum)
;;;230    {
        0x0081655e:    b570        p.      PUSH     {r4-r6,lr}
        0x00816560:    4606        .F      MOV      r6,r0
        0x00816562:    2000        .       MOVS     r0,#0
        0x00816564:    460d        .F      MOV      r5,r1
        0x00816566:    7010        .p      STRB     r0,[r2,#0]
        0x00816568:    4603        .F      MOV      r3,r0
        0x0081656a:    e009        ..      B        0x816580 ; tuya_ble_hexstr2int + 34
;;;231        *sum = 0;
;;;232        int value;
;;;233        for(int i=0; i<len; i++) {
;;;234            value = tuya_ble_hex2int(hexstr[i]);
        0x0081656c:    5cf0        .\      LDRB     r0,[r6,r3]
        0x0081656e:    f7ffffa9    ....    BL       tuya_ble_hex2int ; 0x8164c4
;;;235            if(value == -1)return 0;
        0x00816572:    1c41        A.      ADDS     r1,r0,#1
        0x00816574:    d008        ..      BEQ      0x816588 ; tuya_ble_hexstr2int + 42
;;;236            (*sum)=(*sum)<<4;
        0x00816576:    7811        .x      LDRB     r1,[r2,#0]
;;;237            (*sum)+=value;
        0x00816578:    1c5b        [.      ADDS     r3,r3,#1
        0x0081657a:    eb001001    ....    ADD      r0,r0,r1,LSL #4
        0x0081657e:    7010        .p      STRB     r0,[r2,#0]
        0x00816580:    42ab        .B      CMP      r3,r5
        0x00816582:    dbf3        ..      BLT      0x81656c ; tuya_ble_hexstr2int + 14
;;;238        }
;;;239        return 1;
        0x00816584:    2001        .       MOVS     r0,#1
;;;240    }
        0x00816586:    bd70        p.      POP      {r4-r6,pc}
        0x00816588:    2000        .       MOVS     r0,#0
        0x0081658a:    bd70        p.      POP      {r4-r6,pc}
    tuya_ble_hexstr2hex
;;;241    char tuya_ble_hexstr2hex(uint8_t *hexstr,int len,uint8_t *hex)
;;;242    {
        0x0081658c:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0081658e:    4615        .F      MOV      r5,r2
        0x00816590:    460e        .F      MOV      r6,r1
        0x00816592:    4607        .F      MOV      r7,r0
        0x00816594:    2400        .$      MOVS     r4,#0
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_utils.c (242)
        0x00816596:    e009        ..      B        0x8165ac ; tuya_ble_hexstr2hex + 32
        0x00816598:    eb050254    ..T.    ADD      r2,r5,r4,LSR #1
        0x0081659c:    1938        8.      ADDS     r0,r7,r4
        0x0081659e:    2102        .!      MOVS     r1,#2
        0x008165a0:    f7ffffdd    ....    BL       tuya_ble_hexstr2int ; 0x81655e
        0x008165a4:    2800        .(      CMP      r0,#0
        0x008165a6:    d004        ..      BEQ      0x8165b2 ; tuya_ble_hexstr2hex + 38
        0x008165a8:    1ca4        ..      ADDS     r4,r4,#2
;;;243        for(uint8_t i=0; i<len; i+=2) {
        0x008165aa:    b2e4        ..      UXTB     r4,r4
        0x008165ac:    42b4        .B      CMP      r4,r6
        0x008165ae:    dbf3        ..      BLT      0x816598 ; tuya_ble_hexstr2hex + 12
;;;244            if(tuya_ble_hexstr2int(&hexstr[i],2,&hex[i/2]) == 0)
;;;245                return 0;
;;;246        }
;;;247        return 1;
        0x008165b0:    2001        .       MOVS     r0,#1
;;;248    }
        0x008165b2:    bdf0        ..      POP      {r4-r7,pc}
    tuya_ble_swap24
;;;249    
;;;250    
;;;251    static void swapX(const uint8_t *src, uint8_t *dst, int len)
;;;252    {
;;;253        int i;
;;;254        for (i = 0; i < len; i++)
;;;255            dst[len - 1 - i] = src[i];
;;;256    }
;;;257    
;;;258    void tuya_ble_swap24(uint8_t dst[3], const uint8_t src[3])
;;;259    {
        0x008165b4:    460b        .F      MOV      r3,r1
;;;260        swapX(src, dst, 3);
        0x008165b6:    4601        .F      MOV      r1,r0
        0x008165b8:    2203        ."      MOVS     r2,#3
        0x008165ba:    4618        .F      MOV      r0,r3
        0x008165bc:    f000b8ea    ....    B.W      swapX ; 0x816794
    tuya_ble_swap32
;;;261    }
;;;262    
;;;263    void tuya_ble_swap32(uint8_t dst[4], const uint8_t src[4])
;;;264    {
        0x008165c0:    460b        .F      MOV      r3,r1
;;;265        swapX(src, dst, 4);
        0x008165c2:    4601        .F      MOV      r1,r0
        0x008165c4:    2204        ."      MOVS     r2,#4
        0x008165c6:    4618        .F      MOV      r0,r3
        0x008165c8:    f000b8e4    ....    B.W      swapX ; 0x816794
    tuya_ble_swap48
;;;266    }
;;;267    
;;;268    void tuya_ble_swap48(uint8_t dst[7], const uint8_t src[7])
;;;269    {
        0x008165cc:    460b        .F      MOV      r3,r1
;;;270        swapX(src, dst, 6);
        0x008165ce:    4601        .F      MOV      r1,r0
        0x008165d0:    2206        ."      MOVS     r2,#6
        0x008165d2:    4618        .F      MOV      r0,r3
        0x008165d4:    f000b8de    ....    B.W      swapX ; 0x816794
    tuya_ble_swap56
;;;271    }
;;;272    
;;;273    void tuya_ble_swap56(uint8_t dst[7], const uint8_t src[7])
;;;274    {
        0x008165d8:    460b        .F      MOV      r3,r1
;;;275        swapX(src, dst, 7);
        0x008165da:    4601        .F      MOV      r1,r0
        0x008165dc:    2207        ."      MOVS     r2,#7
        0x008165de:    4618        .F      MOV      r0,r3
        0x008165e0:    f000b8d8    ....    B.W      swapX ; 0x816794
    tuya_ble_swap64
;;;276    }
;;;277    
;;;278    void tuya_ble_swap64(uint8_t dst[8], const uint8_t src[8])
;;;279    {
        0x008165e4:    460b        .F      MOV      r3,r1
;;;280        swapX(src, dst, 8);
        0x008165e6:    4601        .F      MOV      r1,r0
        0x008165e8:    2208        ."      MOVS     r2,#8
        0x008165ea:    4618        .F      MOV      r0,r3
        0x008165ec:    f000b8d2    ....    B.W      swapX ; 0x816794
    tuya_ble_swap128
;;;281    }
;;;282    
;;;283    void tuya_ble_swap128(uint8_t dst[16], const uint8_t src[16])
;;;284    {
        0x008165f0:    460b        .F      MOV      r3,r1
;;;285        swapX(src, dst, 16);
        0x008165f2:    4601        .F      MOV      r1,r0
        0x008165f4:    2210        ."      MOVS     r2,#0x10
        0x008165f6:    4618        .F      MOV      r0,r3
        0x008165f8:    f000b8cc    ....    B.W      swapX ; 0x816794
    tuya_ble_crc16_compute
;;;286    }
;;;287    
;;;288    
;;;289    
;;;290    uint16_t tuya_ble_crc16_compute(uint8_t * p_data, uint16_t size, uint16_t * p_crc) {
        0x008165fc:    b578        x.      PUSH     {r3-r6,lr}
        0x008165fe:    4604        .F      MOV      r4,r0
;;;291    
;;;292        uint16_t poly[2] = {0, 0xa001};            //0x8005 <==> 0xa001
        0x00816600:    486a        jH      LDR      r0,[pc,#424] ; [0x8167ac] = 0x81c310
        0x00816602:    466d        mF      MOV      r5,sp
        0x00816604:    6800        .h      LDR      r0,[r0,#0]
;;;293        uint16_t crc = 0xffff;
        0x00816606:    9000        ..      STR      r0,[sp,#0]
        0x00816608:    f64f70ff    O..p    MOV      r0,#0xffff
        0x0081660c:    e00f        ..      B        0x81662e ; tuya_ble_crc16_compute + 50
;;;294    
;;;295        int i, j;
;;;296    
;;;297        for(j = size; j > 0; j--) {
;;;298            unsigned char ds = *p_data++;
        0x0081660e:    f8142b01    ...+    LDRB     r2,[r4],#1
;;;299    
;;;300            for(i = 0; i < 8; i++) {
        0x00816612:    2300        .#      MOVS     r3,#0
        0x00816614:    ea800602    ....    EOR      r6,r0,r2
        0x00816618:    f0060601    ....    AND      r6,r6,#1
        0x0081661c:    0852        R.      LSRS     r2,r2,#1
        0x0081661e:    f8356016    5..`    LDRH     r6,[r5,r6,LSL #1]
        0x00816622:    1c5b        [.      ADDS     r3,r3,#1
        0x00816624:    ea860050    ..P.    EOR      r0,r6,r0,LSR #1
        0x00816628:    2b08        .+      CMP      r3,#8
        0x0081662a:    dbf3        ..      BLT      0x816614 ; tuya_ble_crc16_compute + 24
        0x0081662c:    1e49        I.      SUBS     r1,r1,#1
        0x0081662e:    2900        .)      CMP      r1,#0
        0x00816630:    dced        ..      BGT      0x81660e ; tuya_ble_crc16_compute + 18
;;;301                crc = (crc >> 1) ^ poly[(crc ^ ds) & 1];
;;;302                ds = ds >> 1;
;;;303            }
;;;304        }
;;;305    
;;;306        return crc;
;;;307    }
        0x00816632:    bd78        x.      POP      {r3-r6,pc}
    tuya_ble_crc32_compute
;;;308    
;;;309    
;;;310    uint32_t tuya_ble_crc32_compute(uint8_t const * p_data, uint32_t size, uint32_t const * p_crc)
;;;311    {
        0x00816634:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00816636:    f04f37ff    O..7    MOV      r7,#0xffffffff
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_utils.c (311)
        0x0081663a:    b122        ".      CBZ      r2,0x816646 ; tuya_ble_crc32_compute + 18
;;;312        uint32_t crc;
;;;313        crc = (p_crc == NULL) ? 0xFFFFFFFF : ~(*p_crc);
        0x0081663c:    6812        .h      LDR      r2,[r2,#0]
        0x0081663e:    43d2        .C      MVNS     r2,r2
        0x00816640:    2400        .$      MOVS     r4,#0
        0x00816642:    4e5b        [N      LDR      r6,[pc,#364] ; [0x8167b0] = 0xedb88320
        0x00816644:    e00d        ..      B        0x816662 ; tuya_ble_crc32_compute + 46
        0x00816646:    463a        :F      MOV      r2,r7
        0x00816648:    e7fa        ..      B        0x816640 ; tuya_ble_crc32_compute + 12
;;;314        for (uint32_t i = 0; i < size; i++)
;;;315        {
;;;316            crc = crc ^ p_data[i];
        0x0081664a:    5d03        .]      LDRB     r3,[r0,r4]
        0x0081664c:    405a        Z@      EORS     r2,r2,r3
;;;317            for (uint32_t j = 8; j > 0; j--)
        0x0081664e:    2308        .#      MOVS     r3,#8
        0x00816650:    07d5        ..      LSLS     r5,r2,#31
        0x00816652:    d000        ..      BEQ      0x816656 ; tuya_ble_crc32_compute + 34
        0x00816654:    463d        =F      MOV      r5,r7
        0x00816656:    4035        5@      ANDS     r5,r5,r6
        0x00816658:    ea850252    ..R.    EOR      r2,r5,r2,LSR #1
        0x0081665c:    1e5b        [.      SUBS     r3,r3,#1
        0x0081665e:    d1f7        ..      BNE      0x816650 ; tuya_ble_crc32_compute + 28
        0x00816660:    1c64        d.      ADDS     r4,r4,#1
        0x00816662:    428c        .B      CMP      r4,r1
        0x00816664:    d3f1        ..      BCC      0x81664a ; tuya_ble_crc32_compute + 22
;;;318            {
;;;319                crc = (crc >> 1) ^ (0xEDB88320U & ((crc & 1) ? 0xFFFFFFFF : 0));
;;;320            }
;;;321        }
;;;322        return ~crc;
        0x00816666:    43d0        .C      MVNS     r0,r2
;;;323    }
        0x00816668:    bdf0        ..      POP      {r4-r7,pc}
    tuya_ble_is_word_aligned_tuya
        0x0081666a:    0780        ..      LSLS     r0,r0,#30
;;;324    
;;;325    
;;;326    
;;;327    /**@brief Function for checking if a pointer value is aligned to a 4 byte boundary.
;;;328     *
;;;329     * @param[in]   p   Pointer value to be checked.
;;;330     *
;;;331     * @return      TRUE if pointer is aligned to a 4 byte boundary, FALSE otherwise.
;;;332     */
;;;333    bool tuya_ble_is_word_aligned_tuya(void const* p)
;;;334    {
        0x0081666c:    d001        ..      BEQ      0x816672 ; tuya_ble_is_word_aligned_tuya + 8
;;;335        return (((uintptr_t)p & 0x03) == 0);
        0x0081666e:    2000        .       MOVS     r0,#0
        0x00816670:    4770        pG      BX       lr
        0x00816672:    2001        .       MOVS     r0,#1
;;;336    }
        0x00816674:    4770        pG      BX       lr
    tuya_ble_device_id_20_to_16
;;;337    
;;;338    
;;;339    
;;;340    void tuya_ble_device_id_20_to_16(uint8_t *in,uint8_t *out)
;;;341    {
        0x00816676:    b5f8        ..      PUSH     {r3-r7,lr}
        0x00816678:    2300        .#      MOVS     r3,#0
;;;342        uint8_t i,j;
;;;343        uint8_t temp[4];
        0x0081667a:    466f        oF      MOV      r7,sp
;;;344        for(i=0; i<5; i++)
;;;345        {
;;;346            for(j=i*4; j<(i*4+4); j++)
        0x0081667c:    f04f0c04    O...    MOV      r12,#4
        0x00816680:    069a        ..      LSLS     r2,r3,#26
        0x00816682:    0e12        ..      LSRS     r2,r2,#24
        0x00816684:    eb0c0683    ....    ADD      r6,r12,r3,LSL #2
        0x00816688:    e01d        ..      B        0x8166c6 ; tuya_ble_device_id_20_to_16 + 80
;;;347            {
;;;348                if((in[j] >= 0x30)&&(in[j] <= 0x39))
        0x0081668a:    5c84        .\      LDRB     r4,[r0,r2]
        0x0081668c:    f1a40530    ..0.    SUB      r5,r4,#0x30
        0x00816690:    2d09        .-      CMP      r5,#9
        0x00816692:    d804        ..      BHI      0x81669e ; tuya_ble_device_id_20_to_16 + 40
;;;349                {
;;;350                    temp[j-i*4] = in[j] - 0x30;
        0x00816694:    425c        \B      RSBS     r4,r3,#0
        0x00816696:    eb020484    ....    ADD      r4,r2,r4,LSL #2
        0x0081669a:    553d        =U      STRB     r5,[r7,r4]
        0x0081669c:    e011        ..      B        0x8166c2 ; tuya_ble_device_id_20_to_16 + 76
;;;351                }
;;;352                else if((in[j] >= 0x41)&&(in[j] <= 0x5A))
        0x0081669e:    f1a40541    ..A.    SUB      r5,r4,#0x41
        0x008166a2:    2d19        .-      CMP      r5,#0x19
        0x008166a4:    d804        ..      BHI      0x8166b0 ; tuya_ble_device_id_20_to_16 + 58
;;;353                {
;;;354                    temp[j-i*4] = in[j] - 0x41 + 36;
        0x008166a6:    425d        ]B      RSBS     r5,r3,#0
        0x008166a8:    eb020585    ....    ADD      r5,r2,r5,LSL #2
        0x008166ac:    3c1d        .<      SUBS     r4,r4,#0x1d
        0x008166ae:    e007        ..      B        0x8166c0 ; tuya_ble_device_id_20_to_16 + 74
;;;355                }
;;;356                else if((in[j] >= 0x61)&&(in[j] <= 0x7A))
        0x008166b0:    f1a40561    ..a.    SUB      r5,r4,#0x61
        0x008166b4:    2d19        .-      CMP      r5,#0x19
        0x008166b6:    d804        ..      BHI      0x8166c2 ; tuya_ble_device_id_20_to_16 + 76
;;;357                {
;;;358                    temp[j-i*4] = in[j] - 0x61 + 10;
        0x008166b8:    425d        ]B      RSBS     r5,r3,#0
        0x008166ba:    eb020585    ....    ADD      r5,r2,r5,LSL #2
        0x008166be:    3c57        W<      SUBS     r4,r4,#0x57
        0x008166c0:    557c        |U      STRB     r4,[r7,r5]
        0x008166c2:    1c52        R.      ADDS     r2,r2,#1
        0x008166c4:    b2d2        ..      UXTB     r2,r2
        0x008166c6:    4296        .B      CMP      r6,r2
        0x008166c8:    d8df        ..      BHI      0x81668a ; tuya_ble_device_id_20_to_16 + 20
;;;359                }
;;;360                else
;;;361                {
;;;362                    
;;;363                }
;;;364            }
;;;365            
;;;366            out[i*3] = temp[0]&0x3F;
        0x008166ca:    f89d4000    ...@    LDRB     r4,[sp,#0]
        0x008166ce:    eb030243    ..C.    ADD      r2,r3,r3,LSL #1
;;;367            out[i*3] <<= 2;
        0x008166d2:    00a5        ..      LSLS     r5,r4,#2
;;;368            out[i*3] |= ((temp[1]>>4)&0x03);
        0x008166d4:    f89d4001    ...@    LDRB     r4,[sp,#1]
        0x008166d8:    1c5b        [.      ADDS     r3,r3,#1
        0x008166da:    f3c41601    ....    UBFX     r6,r4,#4,#2
        0x008166de:    4335        5C      ORRS     r5,r5,r6
        0x008166e0:    548d        .T      STRB     r5,[r1,r2]
        0x008166e2:    0125        %.      LSLS     r5,r4,#4
        0x008166e4:    f89d4002    ...@    LDRB     r4,[sp,#2]
;;;369            
;;;370            out[i*3+1] = temp[1]&0x0F;
        0x008166e8:    440a        .D      ADD      r2,r2,r1
;;;371            out[i*3+1] <<= 4;
;;;372            out[i*3+1] |= ((temp[2]>>2)&0x0F);
        0x008166ea:    f3c40683    ....    UBFX     r6,r4,#2,#4
        0x008166ee:    4335        5C      ORRS     r5,r5,r6
        0x008166f0:    7055        Up      STRB     r5,[r2,#1]
;;;373            
;;;374            out[i*3+2] = temp[2]&0x03;
;;;375            out[i*3+2] <<= 6;
;;;376            out[i*3+2] |= temp[3]&0x3F;
        0x008166f2:    f89d5003    ...P    LDRB     r5,[sp,#3]
        0x008166f6:    b2db        ..      UXTB     r3,r3
        0x008166f8:    f005053f    ..?.    AND      r5,r5,#0x3f
        0x008166fc:    ea451484    E...    ORR      r4,r5,r4,LSL #6
        0x00816700:    7094        .p      STRB     r4,[r2,#2]
        0x00816702:    2b05        .+      CMP      r3,#5
        0x00816704:    d3bc        ..      BCC      0x816680 ; tuya_ble_device_id_20_to_16 + 10
;;;377            
;;;378        }
;;;379        
;;;380        out[15] = 0xFF;
        0x00816706:    20ff        .       MOVS     r0,#0xff
        0x00816708:    73c8        .s      STRB     r0,[r1,#0xf]
;;;381    }
        0x0081670a:    bdf8        ..      POP      {r3-r7,pc}
    tuya_ble_device_id_16_to_20
;;;382    
;;;383    void tuya_ble_device_id_16_to_20(uint8_t *in,uint8_t *out)
;;;384    {
        0x0081670c:    b5f8        ..      PUSH     {r3-r7,lr}
        0x0081670e:    2200        ."      MOVS     r2,#0
;;;385        uint8_t i,j;
;;;386        uint8_t temp[4];
        0x00816710:    466d        mF      MOV      r5,sp
        0x00816712:    f04f0c04    O...    MOV      r12,#4
;;;387        for(i=0; i<5; i++)
;;;388        {
;;;389            j = i*3;   
        0x00816716:    eb020342    ..B.    ADD      r3,r2,r2,LSL #1
        0x0081671a:    b2db        ..      UXTB     r3,r3
;;;390            temp[j-i*3] = (in[j]>>2)&0x3F;
        0x0081671c:    eba20482    ....    SUB      r4,r2,r2,LSL #2
        0x00816720:    5cc6        .\      LDRB     r6,[r0,r3]
        0x00816722:    441c        .D      ADD      r4,r4,r3
        0x00816724:    08b7        ..      LSRS     r7,r6,#2
        0x00816726:    552f        /U      STRB     r7,[r5,r4]
;;;391            temp[j-i*3+1] = in[j]&0x03;
        0x00816728:    f0060603    ....    AND      r6,r6,#3
        0x0081672c:    442c        ,D      ADD      r4,r4,r5
;;;392            temp[j-i*3+1] <<= 4;
        0x0081672e:    0136        6.      LSLS     r6,r6,#4
        0x00816730:    18c7        ..      ADDS     r7,r0,r3
        0x00816732:    7066        fp      STRB     r6,[r4,#1]
;;;393            temp[j-i*3+1] |= (in[j+1]>>4)&0x0F;
        0x00816734:    787b        {x      LDRB     r3,[r7,#1]
        0x00816736:    ea461613    F...    ORR      r6,r6,r3,LSR #4
        0x0081673a:    071b        ..      LSLS     r3,r3,#28
        0x0081673c:    7066        fp      STRB     r6,[r4,#1]
;;;394            temp[j-i*3+2] = (in[j+1]&0x0F)<<2;
        0x0081673e:    0e9b        ..      LSRS     r3,r3,#26
        0x00816740:    70a3        .p      STRB     r3,[r4,#2]
;;;395            temp[j-i*3+2] |= ((in[j+2]&0xC0)>>6)&0x03;
        0x00816742:    78be        .x      LDRB     r6,[r7,#2]
        0x00816744:    ea431396    C...    ORR      r3,r3,r6,LSR #6
        0x00816748:    70a3        .p      STRB     r3,[r4,#2]
;;;396            temp[j-i*3+3] = in[j+2]&0x3F;
        0x0081674a:    f006033f    ..?.    AND      r3,r6,#0x3f
        0x0081674e:    70e3        .p      STRB     r3,[r4,#3]
;;;397            
;;;398            for(j=i*4; j<(i*4+4); j++)
        0x00816750:    0693        ..      LSLS     r3,r2,#26
        0x00816752:    0e1b        ..      LSRS     r3,r3,#24
        0x00816754:    eb0c0682    ....    ADD      r6,r12,r2,LSL #2
        0x00816758:    e015        ..      B        0x816786 ; tuya_ble_device_id_16_to_20 + 122
;;;399            {
;;;400                if((temp[j-i*4] >= 0)&&(temp[j-i*4] <= 9))
        0x0081675a:    4254        TB      RSBS     r4,r2,#0
        0x0081675c:    eb030484    ....    ADD      r4,r3,r4,LSL #2
        0x00816760:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x00816762:    2c09        .,      CMP      r4,#9
        0x00816764:    d801        ..      BHI      0x81676a ; tuya_ble_device_id_16_to_20 + 94
        0x00816766:    3430        04      ADDS     r4,r4,#0x30
;;;401                {
;;;402                    out[j] = temp[j-i*4]+0x30;
        0x00816768:    e00a        ..      B        0x816780 ; tuya_ble_device_id_16_to_20 + 116
;;;403                }
;;;404                else if((temp[j-i*4] >= 10)&&(temp[j-i*4] <= 35))
        0x0081676a:    f1a4070a    ....    SUB      r7,r4,#0xa
        0x0081676e:    2f19        ./      CMP      r7,#0x19
        0x00816770:    d801        ..      BHI      0x816776 ; tuya_ble_device_id_16_to_20 + 106
        0x00816772:    3457        W4      ADDS     r4,r4,#0x57
;;;405                {
;;;406                    out[j] = temp[j-i*4] + 87;
        0x00816774:    e004        ..      B        0x816780 ; tuya_ble_device_id_16_to_20 + 116
;;;407                }
;;;408                else if((temp[j-i*4] >= 36)&&(temp[j-i*4] <= 61))
        0x00816776:    f1a40724    ..$.    SUB      r7,r4,#0x24
        0x0081677a:    2f19        ./      CMP      r7,#0x19
        0x0081677c:    d801        ..      BHI      0x816782 ; tuya_ble_device_id_16_to_20 + 118
        0x0081677e:    341d        .4      ADDS     r4,r4,#0x1d
;;;409                {
;;;410                    out[j] = temp[j-i*4] + 29;
        0x00816780:    54cc        .T      STRB     r4,[r1,r3]
        0x00816782:    1c5b        [.      ADDS     r3,r3,#1
        0x00816784:    b2db        ..      UXTB     r3,r3
        0x00816786:    429e        .B      CMP      r6,r3
        0x00816788:    d8e7        ..      BHI      0x81675a ; tuya_ble_device_id_16_to_20 + 78
        0x0081678a:    1c52        R.      ADDS     r2,r2,#1
        0x0081678c:    b2d2        ..      UXTB     r2,r2
        0x0081678e:    2a05        .*      CMP      r2,#5
        0x00816790:    d3c1        ..      BCC      0x816716 ; tuya_ble_device_id_16_to_20 + 10
;;;411                }
;;;412                else
;;;413                {
;;;414                    
;;;415                }
;;;416            }
;;;417           
;;;418            
;;;419        }
;;;420        
;;;421    }
        0x00816792:    bdf8        ..      POP      {r3-r7,pc}
    swapX
        0x00816794:    b530        0.      PUSH     {r4,r5,lr}
        0x00816796:    2300        .#      MOVS     r3,#0
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_utils.c (252)
        0x00816798:    e005        ..      B        0x8167a6 ; swapX + 18
        0x0081679a:    1ad5        ..      SUBS     r5,r2,r3
        0x0081679c:    5cc4        .\      LDRB     r4,[r0,r3]
        0x0081679e:    440d        .D      ADD      r5,r5,r1
        0x008167a0:    1c5b        [.      ADDS     r3,r3,#1
        0x008167a2:    f8054c01    ...L    STRB     r4,[r5,#-1]
;;;253        int i;
;;;254        for (i = 0; i < len; i++)
        0x008167a6:    4293        .B      CMP      r3,r2
        0x008167a8:    dbf7        ..      BLT      0x81679a ; swapX + 6
;;;255            dst[len - 1 - i] = src[i];
;;;256    }
        0x008167aa:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x008167ac:    0081c310    ....    DCD    8504080
        0x008167b0:    edb88320     ...    DCD    3988292384
    $t
    .text
    tuya_ble_queue_init
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_queue.c
;;;30     {
        0x008167b4:    b149        I.      CBZ      r1,0x8167ca ; tuya_ble_queue_init + 22
;;;31         if (buf == NULL || q == NULL)
        0x008167b6:    b140        @.      CBZ      r0,0x8167ca ; tuya_ble_queue_init + 22
;;;32             return TUYA_BLE_ERR_INVALID_PARAM;
;;;33     
;;;34         q->buf = buf;
;;;35         q->size = queue_size;
        0x008167b8:    6001        .`      STR      r1,[r0,#0]
        0x008167ba:    7102        .q      STRB     r2,[r0,#4]
;;;36         q->offset = elem_size;
        0x008167bc:    7143        Cq      STRB     r3,[r0,#5]
;;;37         q->rd_ptr = 0;
        0x008167be:    2100        .!      MOVS     r1,#0
        0x008167c0:    7181        .q      STRB     r1,[r0,#6]
;;;38         q->wr_ptr = 0;
        0x008167c2:    71c1        .q      STRB     r1,[r0,#7]
;;;39         q->used = 0;
        0x008167c4:    7201        .r      STRB     r1,[r0,#8]
;;;40     
;;;41         return TUYA_BLE_SUCCESS;
        0x008167c6:    4608        .F      MOV      r0,r1
;;;42     }
        0x008167c8:    4770        pG      BX       lr
        0x008167ca:    2006        .       MOVS     r0,#6
        0x008167cc:    4770        pG      BX       lr
    tuya_ble_enqueue
;;;43     
;;;44     tuya_ble_status_t tuya_ble_enqueue(tuya_ble_queue_t *q, void *in)
;;;45     {
        0x008167ce:    b510        ..      PUSH     {r4,lr}
        0x008167d0:    4604        .F      MOV      r4,r0
        0x008167d2:    7a00        .z      LDRB     r0,[r0,#8]
        0x008167d4:    7922        "y      LDRB     r2,[r4,#4]
        0x008167d6:    4290        .B      CMP      r0,r2
        0x008167d8:    d101        ..      BNE      0x8167de ; tuya_ble_enqueue + 16
;;;46         if (q->used == q->size) 
;;;47         {
;;;48             return TUYA_BLE_ERR_NO_MEM;
        0x008167da:    2004        .       MOVS     r0,#4
        0x008167dc:    bd10        ..      POP      {r4,pc}
;;;49         }
;;;50         
;;;51         memcpy((uint8_t*)q->buf + q->wr_ptr * q->offset, in, q->offset);
        0x008167de:    79e3        .y      LDRB     r3,[r4,#7]
        0x008167e0:    7962        by      LDRB     r2,[r4,#5]
        0x008167e2:    6820         h      LDR      r0,[r4,#0]
        0x008167e4:    fb130002    ....    SMLABB   r0,r3,r2,r0
        0x008167e8:    f443f357    C.W.    BL       __aeabi_memcpy ; 0x59e9a
;;;52         q->wr_ptr = (q->wr_ptr + 1) % q->size;
        0x008167ec:    79e0        .y      LDRB     r0,[r4,#7]
        0x008167ee:    7921        !y      LDRB     r1,[r4,#4]
        0x008167f0:    1c40        @.      ADDS     r0,r0,#1
        0x008167f2:    fbb0f2f1    ....    UDIV     r2,r0,r1
        0x008167f6:    fb010012    ....    MLS      r0,r1,r2,r0
        0x008167fa:    71e0        .q      STRB     r0,[r4,#7]
;;;53         q->used++;
        0x008167fc:    7a20         z      LDRB     r0,[r4,#8]
        0x008167fe:    1c40        @.      ADDS     r0,r0,#1
        0x00816800:    7220         r      STRB     r0,[r4,#8]
;;;54         
;;;55         return TUYA_BLE_SUCCESS;
        0x00816802:    2000        .       MOVS     r0,#0
;;;56     }
        0x00816804:    bd10        ..      POP      {r4,pc}
    tuya_ble_queue_get
;;;57     
;;;58     tuya_ble_status_t tuya_ble_queue_get(tuya_ble_queue_t *q, void *out)
;;;59     {
        0x00816806:    b510        ..      PUSH     {r4,lr}
        0x00816808:    460b        .F      MOV      r3,r1
        0x0081680a:    7a01        .z      LDRB     r1,[r0,#8]
        0x0081680c:    b149        I.      CBZ      r1,0x816822 ; tuya_ble_queue_get + 28
;;;60         if (q->used > 0) 
;;;61     	{
;;;62             memcpy(out, (uint8_t*)q->buf + q->rd_ptr * q->offset, q->offset);
        0x0081680e:    7984        .y      LDRB     r4,[r0,#6]
        0x00816810:    7942        By      LDRB     r2,[r0,#5]
        0x00816812:    6801        .h      LDR      r1,[r0,#0]
        0x00816814:    fb141102    ....    SMLABB   r1,r4,r2,r1
        0x00816818:    4618        .F      MOV      r0,r3
        0x0081681a:    f443f33e    C.>.    BL       __aeabi_memcpy ; 0x59e9a
;;;63             return TUYA_BLE_SUCCESS;
        0x0081681e:    2000        .       MOVS     r0,#0
        0x00816820:    bd10        ..      POP      {r4,pc}
;;;64         } 
;;;65     	else
;;;66     	{
;;;67             return TUYA_BLE_ERR_NOT_FOUND;
        0x00816822:    2002        .       MOVS     r0,#2
;;;68     	}
;;;69     }
        0x00816824:    bd10        ..      POP      {r4,pc}
    tuya_ble_dequeue
;;;70     
;;;71     tuya_ble_status_t tuya_ble_dequeue(tuya_ble_queue_t *q, void *out)
;;;72     {
        0x00816826:    b510        ..      PUSH     {r4,lr}
        0x00816828:    4604        .F      MOV      r4,r0
        0x0081682a:    7a00        .z      LDRB     r0,[r0,#8]
        0x0081682c:    460b        .F      MOV      r3,r1
        0x0081682e:    b1a0        ..      CBZ      r0,0x81685a ; tuya_ble_dequeue + 52
;;;73         if (q->used > 0) 
;;;74     	{
;;;75             memcpy(out, (uint8_t*)q->buf + q->rd_ptr * q->offset, q->offset);
        0x00816830:    79a1        .y      LDRB     r1,[r4,#6]
        0x00816832:    7962        by      LDRB     r2,[r4,#5]
        0x00816834:    6820         h      LDR      r0,[r4,#0]
        0x00816836:    fb110102    ....    SMLABB   r1,r1,r2,r0
        0x0081683a:    4618        .F      MOV      r0,r3
        0x0081683c:    f443f32d    C.-.    BL       __aeabi_memcpy ; 0x59e9a
;;;76             q->rd_ptr = (q->rd_ptr + 1) % q->size;
        0x00816840:    79a0        .y      LDRB     r0,[r4,#6]
        0x00816842:    7921        !y      LDRB     r1,[r4,#4]
        0x00816844:    1c40        @.      ADDS     r0,r0,#1
        0x00816846:    fbb0f2f1    ....    UDIV     r2,r0,r1
        0x0081684a:    fb010012    ....    MLS      r0,r1,r2,r0
        0x0081684e:    71a0        .q      STRB     r0,[r4,#6]
;;;77             q->used--;
        0x00816850:    7a20         z      LDRB     r0,[r4,#8]
        0x00816852:    1e40        @.      SUBS     r0,r0,#1
        0x00816854:    7220         r      STRB     r0,[r4,#8]
;;;78             return TUYA_BLE_SUCCESS;
        0x00816856:    2000        .       MOVS     r0,#0
        0x00816858:    bd10        ..      POP      {r4,pc}
;;;79         } 
;;;80     	else
;;;81     	{
;;;82             return TUYA_BLE_ERR_NOT_FOUND;
        0x0081685a:    2002        .       MOVS     r0,#2
;;;83     	}
;;;84     }
        0x0081685c:    bd10        ..      POP      {r4,pc}
    tuya_ble_queue_decrease
;;;85     
;;;86     void tuya_ble_queue_decrease(tuya_ble_queue_t *q)
;;;87     {
        0x0081685e:    b510        ..      PUSH     {r4,lr}
        0x00816860:    7a01        .z      LDRB     r1,[r0,#8]
        0x00816862:    2900        .)      CMP      r1,#0
        0x00816864:    d009        ..      BEQ      0x81687a ; tuya_ble_queue_decrease + 28
;;;88         if (q->used > 0) 
;;;89     	{
;;;90             q->rd_ptr = (q->rd_ptr + 1) % q->size;
        0x00816866:    7982        .y      LDRB     r2,[r0,#6]
        0x00816868:    7903        .y      LDRB     r3,[r0,#4]
        0x0081686a:    1c52        R.      ADDS     r2,r2,#1
        0x0081686c:    fbb2f4f3    ....    UDIV     r4,r2,r3
        0x00816870:    fb032214    ..."    MLS      r2,r3,r4,r2
        0x00816874:    7182        .q      STRB     r2,[r0,#6]
        0x00816876:    1e49        I.      SUBS     r1,r1,#1
;;;91             q->used--;
        0x00816878:    7201        .r      STRB     r1,[r0,#8]
;;;92         } 
;;;93     }
        0x0081687a:    bd10        ..      POP      {r4,pc}
    tuya_ble_queue_flush
;;;94     
;;;95     
;;;96     void tuya_ble_queue_flush(tuya_ble_queue_t *q)
;;;97     {
;;;98         q->rd_ptr = 0;
        0x0081687c:    2100        .!      MOVS     r1,#0
        0x0081687e:    7181        .q      STRB     r1,[r0,#6]
;;;99         q->wr_ptr = 0;
        0x00816880:    71c1        .q      STRB     r1,[r0,#7]
;;;100        q->used = 0;
        0x00816882:    7201        .r      STRB     r1,[r0,#8]
;;;101    }
        0x00816884:    4770        pG      BX       lr
    tuya_ble_get_queue_used
;;;102    
;;;103    uint8_t tuya_ble_get_queue_used(tuya_ble_queue_t *q)
;;;104    {
;;;105    	return q->used;
        0x00816886:    7a00        .z      LDRB     r0,[r0,#8]
;;;106    }
        0x00816888:    4770        pG      BX       lr
        0x0081688a:    0000        ..      MOVS     r0,r0
    .text
    tuya_ble_gatt_send_queue_init
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_gatt_send_queue.c
;;;41     	gatt_queue_flag = 0;
        0x0081688c:    4942        BI      LDR      r1,[pc,#264] ; [0x816998] = 0x2099e4
        0x0081688e:    2000        .       MOVS     r0,#0
        0x00816890:    2308        .#      MOVS     r3,#8
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_gatt_send_queue.c (41)
        0x00816892:    7008        .p      STRB     r0,[r1,#0]
;;;42         tuya_ble_queue_init(&gatt_send_queue, (void*) send_buf, TUYA_BLE_GATT_SEND_DATA_QUEUE_SIZE, sizeof(tuya_ble_gatt_send_data_t));
        0x00816894:    2214        ."      MOVS     r2,#0x14
        0x00816896:    3110        .1      ADDS     r1,r1,#0x10
        0x00816898:    f1a1000c    ....    SUB      r0,r1,#0xc
        0x0081689c:    f7ffbf8a    ....    B.W      tuya_ble_queue_init ; 0x8167b4
    tuya_ble_gatt_send_queue_free
;;;43     }
;;;44     
;;;45     static void tuya_ble_gatt_send_queue_free(void)
;;;46     {
        0x008168a0:    b51c        ..      PUSH     {r2-r4,lr}
        0x008168a2:    2400        .$      MOVS     r4,#0
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_gatt_send_queue.c (46)
        0x008168a4:    e003        ..      B        0x8168ae ; tuya_ble_gatt_send_queue_free + 14
        0x008168a6:    9800        ..      LDR      r0,[sp,#0]
        0x008168a8:    b108        ..      CBZ      r0,0x8168ae ; tuya_ble_gatt_send_queue_free + 14
        0x008168aa:    f7fefd7c    ..|.    BL       tuya_ble_free ; 0x8153a6
;;;47     	 tuya_ble_gatt_send_data_t data   = {0};
;;;48          memset(&data,0,sizeof(tuya_ble_gatt_send_data_t));
;;;49     	 while(tuya_ble_dequeue(&gatt_send_queue,&data)==TUYA_BLE_SUCCESS)
        0x008168ae:    483a        :H      LDR      r0,[pc,#232] ; [0x816998] = 0x2099e4
        0x008168b0:    9400        ..      STR      r4,[sp,#0]
        0x008168b2:    4669        iF      MOV      r1,sp
        0x008168b4:    1d00        ..      ADDS     r0,r0,#4
        0x008168b6:    9401        ..      STR      r4,[sp,#4]
        0x008168b8:    f7ffffb5    ....    BL       tuya_ble_dequeue ; 0x816826
        0x008168bc:    2800        .(      CMP      r0,#0
        0x008168be:    d0f2        ..      BEQ      0x8168a6 ; tuya_ble_gatt_send_queue_free + 6
;;;50     	 {
;;;51     		 if(data.buf)
;;;52     		 {
;;;53     			tuya_ble_free(data.buf);
;;;54     		 }
;;;55     		 memset(&data,0,sizeof(tuya_ble_gatt_send_data_t));
;;;56     	 }	
;;;57     }
        0x008168c0:    bd1c        ..      POP      {r2-r4,pc}
    tuya_ble_gatt_send_data_handle
;;;58     
;;;59     void tuya_ble_gatt_send_data_handle(void *evt)
;;;60     {
        0x008168c2:    b510        ..      PUSH     {r4,lr}
        0x008168c4:    b08e        ..      SUB      sp,sp,#0x38
        0x008168c6:    2400        .$      MOVS     r4,#0
        0x008168c8:    940b        ..      STR      r4,[sp,#0x2c]
        0x008168ca:    940c        ..      STR      r4,[sp,#0x30]
        0x008168cc:    e029        ).      B        0x816922 ; tuya_ble_gatt_send_data_handle + 96
;;;61     	tuya_ble_gatt_send_data_t data   = {0};
;;;62     	tuya_ble_evt_param_t event;
;;;63     	tuya_ble_connect_status_t currnet_connect_status;
;;;64     	
;;;65     	while (tuya_ble_queue_get(&gatt_send_queue, &data) == TUYA_BLE_SUCCESS) 
;;;66     	{   
;;;67     		currnet_connect_status = tuya_ble_connect_status_get();
        0x008168ce:    f7fefba9    ....    BL       tuya_ble_connect_status_get ; 0x815024
;;;68     		if((currnet_connect_status == BONDING_UNCONN)||(currnet_connect_status== UNBONDING_UNCONN))
        0x008168d2:    2802        .(      CMP      r0,#2
        0x008168d4:    d01b        ..      BEQ      0x81690e ; tuya_ble_gatt_send_data_handle + 76
        0x008168d6:    b1d0        ..      CBZ      r0,0x81690e ; tuya_ble_gatt_send_data_handle + 76
        0x008168d8:    f89d1030    ..0.    LDRB     r1,[sp,#0x30]
        0x008168dc:    980b        ..      LDR      r0,[sp,#0x2c]
        0x008168de:    f003ffce    ....    BL       tuya_ble_gatt_send_data ; 0x81a87e
        0x008168e2:    b1b8        ..      CBZ      r0,0x816914 ; tuya_ble_gatt_send_data_handle + 82
        0x008168e4:    2015        .       MOVS     r0,#0x15
        0x008168e6:    f88d0000    ....    STRB     r0,[sp,#0]
        0x008168ea:    f2af0029    ..).    ADR      r0,{pc}-0x27 ; 0x8168c3
        0x008168ee:    9001        ..      STR      r0,[sp,#4]
        0x008168f0:    4668        hF      MOV      r0,sp
        0x008168f2:    f7fefba4    ....    BL       tuya_ble_event_send ; 0x81503e
        0x008168f6:    b1d8        ..      CBZ      r0,0x816930 ; tuya_ble_gatt_send_data_handle + 110
        0x008168f8:    f7ffffd2    ....    BL       tuya_ble_gatt_send_queue_free ; 0x8168a0
        0x008168fc:    a027        '.      ADR      r0,{pc}+0xa0 ; 0x81699c
        0x008168fe:    f004f954    ..T.    BL       get_args ; 0x81abaa
        0x00816902:    4602        .F      MOV      r2,r0
        0x00816904:    4932        2I      LDR      r1,[pc,#200] ; [0x8169d0] = 0x8803c84
        0x00816906:    4833        3H      LDR      r0,[pc,#204] ; [0x8169d4] = 0x21103002
        0x00816908:    f7f1d8a9    ....    BL       log_buffer ; 0x7a5e
        0x0081690c:    e010        ..      B        0x816930 ; tuya_ble_gatt_send_data_handle + 110
;;;69     		{
;;;70     			tuya_ble_gatt_send_queue_free();
        0x0081690e:    f7ffffc7    ....    BL       tuya_ble_gatt_send_queue_free ; 0x8168a0
;;;71     			break;
        0x00816912:    e00d        ..      B        0x816930 ; tuya_ble_gatt_send_data_handle + 110
;;;72     		}
;;;73     		
;;;74             if(tuya_ble_gatt_send_data(data.buf,data.size) == TUYA_BLE_SUCCESS)
;;;75             {
;;;76     			tuya_ble_free(data.buf);
        0x00816914:    980b        ..      LDR      r0,[sp,#0x2c]
        0x00816916:    f7fefd46    ..F.    BL       tuya_ble_free ; 0x8153a6
;;;77     			tuya_ble_queue_decrease(&gatt_send_queue);
        0x0081691a:    481f        .H      LDR      r0,[pc,#124] ; [0x816998] = 0x2099e4
        0x0081691c:    1d00        ..      ADDS     r0,r0,#4
        0x0081691e:    f7ffff9e    ....    BL       tuya_ble_queue_decrease ; 0x81685e
        0x00816922:    481d        .H      LDR      r0,[pc,#116] ; [0x816998] = 0x2099e4
        0x00816924:    a90b        ..      ADD      r1,sp,#0x2c
        0x00816926:    1d00        ..      ADDS     r0,r0,#4
        0x00816928:    f7ffff6d    ..m.    BL       tuya_ble_queue_get ; 0x816806
        0x0081692c:    2800        .(      CMP      r0,#0
        0x0081692e:    d0ce        ..      BEQ      0x8168ce ; tuya_ble_gatt_send_data_handle + 12
;;;78             }
;;;79     		else
;;;80     		{	  
;;;81     			event.hdr.event = TUYA_BLE_EVT_GATT_SEND_DATA;
;;;82     			event.hdr.event_handler = tuya_ble_gatt_send_data_handle;
;;;83                 if(tuya_ble_event_send(&event)!=0)
;;;84                 {
;;;85     				tuya_ble_gatt_send_queue_free();
;;;86     				TUYA_BLE_LOG_ERROR("TUYA_BLE_EVT_GATT_SEND_DATA  error.");
;;;87                 }
;;;88     
;;;89     		    break;
;;;90     
;;;91     		}
;;;92         }
;;;93         if(tuya_ble_get_queue_used(&gatt_send_queue)==0)
        0x00816930:    4819        .H      LDR      r0,[pc,#100] ; [0x816998] = 0x2099e4
        0x00816932:    1d00        ..      ADDS     r0,r0,#4
        0x00816934:    f7ffffa7    ....    BL       tuya_ble_get_queue_used ; 0x816886
        0x00816938:    2800        .(      CMP      r0,#0
        0x0081693a:    d105        ..      BNE      0x816948 ; tuya_ble_gatt_send_data_handle + 134
;;;94         {
;;;95     		tuya_ble_queue_flush(&gatt_send_queue);
        0x0081693c:    4816        .H      LDR      r0,[pc,#88] ; [0x816998] = 0x2099e4
        0x0081693e:    1d00        ..      ADDS     r0,r0,#4
        0x00816940:    f7ffff9c    ....    BL       tuya_ble_queue_flush ; 0x81687c
;;;96     		gatt_queue_flag = 0;	
        0x00816944:    4814        .H      LDR      r0,[pc,#80] ; [0x816998] = 0x2099e4
        0x00816946:    7004        .p      STRB     r4,[r0,#0]
;;;97     	}
;;;98     	
;;;99     }
        0x00816948:    b00e        ..      ADD      sp,sp,#0x38
        0x0081694a:    bd10        ..      POP      {r4,pc}
    tuya_ble_gatt_send_data_enqueue
;;;100    
;;;101    
;;;102    
;;;103    tuya_ble_status_t tuya_ble_gatt_send_data_enqueue(uint8_t *p_data, uint8_t data_len)
;;;104    {
        0x0081694c:    b57c        |.      PUSH     {r2-r6,lr}
        0x0081694e:    4605        .F      MOV      r5,r0
        0x00816950:    2000        .       MOVS     r0,#0
        0x00816952:    9000        ..      STR      r0,[sp,#0]
        0x00816954:    9001        ..      STR      r0,[sp,#4]
;;; .\sample\tuya_ble_sdk\sdk\src\tuya_ble_gatt_send_queue.c (104)
        0x00816956:    460c        .F      MOV      r4,r1
;;;105    	tuya_ble_gatt_send_data_t data   = {0};
;;;106    	
;;;107    	data.buf = tuya_ble_malloc(data_len);
        0x00816958:    4608        .F      MOV      r0,r1
        0x0081695a:    f7fefd19    ....    BL       tuya_ble_malloc ; 0x815390
;;;108    	
;;;109    	if(data.buf)
        0x0081695e:    9000        ..      STR      r0,[sp,#0]
        0x00816960:    b170        p.      CBZ      r0,0x816980 ; tuya_ble_gatt_send_data_enqueue + 52
;;;110    	{
;;;111    		memcpy(data.buf,p_data,data_len);
        0x00816962:    4622        "F      MOV      r2,r4
        0x00816964:    4629        )F      MOV      r1,r5
        0x00816966:    f443f298    C...    BL       __aeabi_memcpy ; 0x59e9a
        0x0081696a:    480b        .H      LDR      r0,[pc,#44] ; [0x816998] = 0x2099e4
;;;112    		data.size = data_len;
        0x0081696c:    f88d4004    ...@    STRB     r4,[sp,#4]
;;;113    		if(tuya_ble_enqueue(&gatt_send_queue,&data)==TUYA_BLE_SUCCESS)
        0x00816970:    4669        iF      MOV      r1,sp
        0x00816972:    1d00        ..      ADDS     r0,r0,#4
        0x00816974:    f7ffff2b    ..+.    BL       tuya_ble_enqueue ; 0x8167ce
        0x00816978:    b120         .      CBZ      r0,0x816984 ; tuya_ble_gatt_send_data_enqueue + 56
        0x0081697a:    9800        ..      LDR      r0,[sp,#0]
        0x0081697c:    f7fefd13    ....    BL       tuya_ble_free ; 0x8153a6
        0x00816980:    2004        .       MOVS     r0,#4
        0x00816982:    bd7c        |.      POP      {r2-r6,pc}
;;;114    		{
;;;115    			if(gatt_queue_flag==0)
        0x00816984:    4804        .H      LDR      r0,[pc,#16] ; [0x816998] = 0x2099e4
        0x00816986:    7801        .x      LDRB     r1,[r0,#0]
        0x00816988:    b921        !.      CBNZ     r1,0x816994 ; tuya_ble_gatt_send_data_enqueue + 72
;;;116    			{
;;;117    				gatt_queue_flag = 1;
        0x0081698a:    2101        .!      MOVS     r1,#1
        0x0081698c:    7001        .p      STRB     r1,[r0,#0]
;;;118    				tuya_ble_gatt_send_data_handle(NULL);
        0x0081698e:    2000        .       MOVS     r0,#0
        0x00816990:    f7ffff97    ....    BL       tuya_ble_gatt_send_data_handle ; 0x8168c2
;;;119    			}			
;;;120    			return TUYA_BLE_SUCCESS;
        0x00816994:    2000        .       MOVS     r0,#0
;;;121    		}
;;;122    	    else
;;;123    		{
;;;124    			tuya_ble_free(data.buf);
;;;125    			return TUYA_BLE_ERR_NO_MEM;
;;;126    		}
;;;127    	}
;;;128    	else
;;;129    	{
;;;130    		return TUYA_BLE_ERR_NO_MEM;
;;;131    	}
;;;132    	
;;;133    }
        0x00816996:    bd7c        |.      POP      {r2-r6,pc}
    $d
        0x00816998:    002099e4    .. .    DCD    2136548
        0x0081699c:    205d455b    [E]     DCD    542983515
        0x008169a0:    41595554    TUYA    DCD    1096373588
        0x008169a4:    454c425f    _BLE    DCD    1162625631
        0x008169a8:    5554203a    : TU    DCD    1431576634
        0x008169ac:    425f4159    YA_B    DCD    1113538905
        0x008169b0:    455f454c    LE_E    DCD    1163871564
        0x008169b4:    475f5456    VT_G    DCD    1197429846
        0x008169b8:    5f545441    ATT_    DCD    1599362113
        0x008169bc:    444e4553    SEND    DCD    1145980243
        0x008169c0:    5441445f    _DAT    DCD    1413563487
        0x008169c4:    65202041    A  e    DCD    1696604225
        0x008169c8:    726f7272    rror    DCD    1919906418
        0x008169cc:    0000002e    ....    DCD    46
        0x008169d0:    08803c84    .<..    DCD    142621828
        0x008169d4:    21103002    .0.!    DCD    554708994
    $t
    .text
    tuya_ble_internal_production_test_with_ble_flag_clear
;;; sample\tuya_ble_sdk\app\product_test\tuya_ble_app_production_test.c
;;;62         tuya_ble_production_test_with_ble_flag = 0;
        0x008169d8:    2000        .       MOVS     r0,#0
        0x008169da:    49fe        .I      LDR      r1,[pc,#1016] ; [0x816dd4] = 0x209a94
        0x008169dc:    7048        Hp      STRB     r0,[r1,#1]
;;;63     }
        0x008169de:    4770        pG      BX       lr
    tuya_ble_vtimer_prod_monitor_callback
;;;64     
;;;65     
;;;66     static void tuya_ble_vtimer_prod_monitor_callback(tuya_ble_timer_t pxTimer)
;;;67     {
        0x008169e0:    b510        ..      PUSH     {r4,lr}
;;;68         tuya_ble_device_delay_ms(1000);
        0x008169e2:    f44f707a    O.zp    MOV      r0,#0x3e8
        0x008169e6:    f003ff87    ....    BL       tuya_ble_device_delay_ms ; 0x81a8f8
;;;69         tuya_ble_device_reset();
        0x008169ea:    e8bd4010    ...@    POP      {r4,lr}
        0x008169ee:    f003bf9e    ....    B.W      tuya_ble_device_reset ; 0x81a92e
    tuya_ble_uart_prod_send
;;;70     
;;;71     }
;;;72     
;;;73     static void tuya_ble_prod_monitor_timer_init(void)
;;;74     {
;;;75         if(tuya_ble_timer_create(&tuya_ble_xTimer_prod_monitor,tuya_ble_prod_monitor_timeout_ms, TUYA_BLE_TIMER_SINGLE_SHOT,tuya_ble_vtimer_prod_monitor_callback) != TUYA_BLE_SUCCESS)
;;;76         {
;;;77             TUYA_BLE_LOG_ERROR("tuya_ble_xTimer_prod_monitor creat failed");
;;;78         }
;;;79     
;;;80     }
;;;81     
;;;82     
;;;83     static void tuya_ble_prod_monitor_timer_start(void)
;;;84     {
;;;85         if(tuya_ble_timer_start(tuya_ble_xTimer_prod_monitor) != TUYA_BLE_SUCCESS)
;;;86         {
;;;87             TUYA_BLE_LOG_ERROR("tuya_ble_xTimer_prod_monitor start failed");
;;;88         }
;;;89     
;;;90     }
;;;91     
;;;92     static void tuya_ble_prod_monitor_timer_stop(void)
;;;93     {
;;;94     
;;;95         if(tuya_ble_timer_stop(tuya_ble_xTimer_prod_monitor) != TUYA_BLE_SUCCESS)
;;;96         {
;;;97             TUYA_BLE_LOG_ERROR("tuya_ble_xTimer_prod_monitor stop failed");
;;;98         }
;;;99         
;;;100    }
;;;101    
;;;102    
;;;103    static uint32_t tuya_ble_uart_prod_send(uint8_t type,uint8_t *pdata,uint8_t len)
;;;104    {
        0x008169f2:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x008169f6:    4606        .F      MOV      r6,r0
        0x008169f8:    1dd0        ..      ADDS     r0,r2,#7
        0x008169fa:    4615        .F      MOV      r5,r2
        0x008169fc:    460f        .F      MOV      r7,r1
;;;105        uint8_t uart_send_len = 7+len;
        0x008169fe:    b2c0        ..      UXTB     r0,r0
;;;106        uint8_t *uart_send_buffer = NULL;
;;;107        
;;;108        uart_send_buffer=(uint8_t *)tuya_ble_malloc(uart_send_len);
        0x00816a00:    f7fefcc6    ....    BL       tuya_ble_malloc ; 0x815390
        0x00816a04:    0004        ..      MOVS     r4,r0
;;;109        if(uart_send_buffer!=NULL)
        0x00816a06:    d01d        ..      BEQ      0x816a44 ; tuya_ble_uart_prod_send + 82
;;;110        {
;;;111            uart_send_buffer[0] = 0x66;
        0x00816a08:    2066        f       MOVS     r0,#0x66
        0x00816a0a:    7020         p      STRB     r0,[r4,#0]
;;;112            uart_send_buffer[1] = 0xAA;
        0x00816a0c:    20aa        .       MOVS     r0,#0xaa
        0x00816a0e:    7060        `p      STRB     r0,[r4,#1]
;;;113            uart_send_buffer[2] = 0x00;
        0x00816a10:    2000        .       MOVS     r0,#0
        0x00816a12:    70a0        .p      STRB     r0,[r4,#2]
;;;114            uart_send_buffer[3] = type;
        0x00816a14:    70e6        .p      STRB     r6,[r4,#3]
;;;115            uart_send_buffer[4] = 0;
        0x00816a16:    7120         q      STRB     r0,[r4,#4]
;;;116            uart_send_buffer[5] = len;        
        0x00816a18:    7165        eq      STRB     r5,[r4,#5]
;;;117            memcpy(uart_send_buffer+6,pdata,len);
        0x00816a1a:    462a        *F      MOV      r2,r5
        0x00816a1c:    4639        9F      MOV      r1,r7
        0x00816a1e:    1da0        ..      ADDS     r0,r4,#6
        0x00816a20:    f443f23b    C.;.    BL       __aeabi_memcpy ; 0x59e9a
;;;118            uart_send_buffer[6+len] = tuya_ble_check_sum(uart_send_buffer,6+len);
        0x00816a24:    1da9        ..      ADDS     r1,r5,#6
        0x00816a26:    4620         F      MOV      r0,r4
        0x00816a28:    f7fffc9b    ....    BL       tuya_ble_check_sum ; 0x816362
        0x00816a2c:    1961        a.      ADDS     r1,r4,r5
        0x00816a2e:    7188        .q      STRB     r0,[r1,#6]
;;;119            tuya_ble_common_uart_send_data(uart_send_buffer,7+len);
        0x00816a30:    1de9        ..      ADDS     r1,r5,#7
        0x00816a32:    4620         F      MOV      r0,r4
        0x00816a34:    f003ff2e    ....    BL       tuya_ble_common_uart_send_data ; 0x81a894
;;;120            tuya_ble_free(uart_send_buffer);
        0x00816a38:    4620         F      MOV      r0,r4
        0x00816a3a:    f7fefcb4    ....    BL       tuya_ble_free ; 0x8153a6
        0x00816a3e:    2000        .       MOVS     r0,#0
        0x00816a40:    e8bd81f0    ....    POP      {r4-r8,pc}
;;;121        }
;;;122        else
;;;123        {
;;;124            TUYA_BLE_LOG_ERROR("uart prod send buffer malloc failed.");    
        0x00816a44:    a0e4        ..      ADR      r0,{pc}+0x394 ; 0x816dd8
        0x00816a46:    f004f8b0    ....    BL       get_args ; 0x81abaa
        0x00816a4a:    4602        .F      MOV      r2,r0
        0x00816a4c:    49ef        .I      LDR      r1,[pc,#956] ; [0x816e0c] = 0x8803d28
        0x00816a4e:    48f0        .H      LDR      r0,[pc,#960] ; [0x816e10] = 0x21103002
        0x00816a50:    f7f1d805    ....    BL       log_buffer ; 0x7a5e
;;;125            return 1;        
        0x00816a54:    2001        .       MOVS     r0,#1
;;;126        }
;;;127    
;;;128        return 0;
;;;129    }
        0x00816a56:    e7f3        ..      B        0x816a40 ; tuya_ble_uart_prod_send + 78
;;;130    
;;;131    
;;;132    __TUYA_BLE_WEAK tuya_ble_status_t tuya_ble_prod_beacon_scan_start(void)
;;;133    {
;;;134        return TUYA_BLE_SUCCESS;
        0x00816a58:    2000        .       MOVS     r0,#0
;;;135    }
        0x00816a5a:    4770        pG      BX       lr
;;;136    
;;;137    __TUYA_BLE_WEAK tuya_ble_status_t tuya_ble_prod_beacon_scan_stop(void)
;;;138    {
;;;139        return TUYA_BLE_SUCCESS;
        0x00816a5c:    2000        .       MOVS     r0,#0
;;;140    }
        0x00816a5e:    4770        pG      BX       lr
;;;141    
;;;142    __TUYA_BLE_WEAK tuya_ble_status_t tuya_ble_prod_beacon_get_rssi_avg(int8_t *rssi)
;;;143    {
;;;144        *rssi = -20;
        0x00816a60:    21ec        .!      MOVS     r1,#0xec
        0x00816a62:    7001        .p      STRB     r1,[r0,#0]
;;;145        return TUYA_BLE_SUCCESS;
        0x00816a64:    2000        .       MOVS     r0,#0
;;;146    }
        0x00816a66:    4770        pG      BX       lr
    tuya_ble_auc_enter
;;;147    
;;;148    
;;;149    static void tuya_ble_auc_enter(uint8_t *para, uint16_t len)
;;;150    {
        0x00816a68:    b5f8        ..      PUSH     {r3-r7,lr}
        0x00816a6a:    a0ea        ..      ADR      r0,{pc}+0x3aa ; 0x816e14
        0x00816a6c:    f004f89d    ....    BL       get_args ; 0x81abaa
        0x00816a70:    49e6        .I      LDR      r1,[pc,#920] ; [0x816e0c] = 0x8803d28
        0x00816a72:    4ee7        .N      LDR      r6,[pc,#924] ; [0x816e10] = 0x21103002
        0x00816a74:    4602        .F      MOV      r2,r0
        0x00816a76:    3134        41      ADDS     r1,r1,#0x34
        0x00816a78:    4630        0F      MOV      r0,r6
        0x00816a7a:    f7f0dff0    ....    BL       log_buffer ; 0x7a5e
        0x00816a7e:    4cd5        .L      LDR      r4,[pc,#852] ; [0x816dd4] = 0x209a94
        0x00816a80:    2501        .%      MOVS     r5,#1
        0x00816a82:    f88d5000    ...P    STRB     r5,[sp,#0]
        0x00816a86:    7820         x      LDRB     r0,[r4,#0]
        0x00816a88:    2801        .(      CMP      r0,#1
        0x00816a8a:    d020         .      BEQ      0x816ace ; tuya_ble_auc_enter + 102
;;; sample\tuya_ble_sdk\app\product_test\tuya_ble_app_production_test.c (75)
        0x00816a8c:    4be8        .K      LDR      r3,[pc,#928] ; [0x816e30] = 0x8169e1
        0x00816a8e:    2200        ."      MOVS     r2,#0
        0x00816a90:    f64e2160    N.`!    MOV      r1,#0xea60
        0x00816a94:    1d20         .      ADDS     r0,r4,#4
        0x00816a96:    f003ff05    ....    BL       tuya_ble_timer_create ; 0x81a8a4
        0x00816a9a:    b140        @.      CBZ      r0,0x816aae ; tuya_ble_auc_enter + 70
;;;76         {
;;;77             TUYA_BLE_LOG_ERROR("tuya_ble_xTimer_prod_monitor creat failed");
        0x00816a9c:    a0e5        ..      ADR      r0,{pc}+0x398 ; 0x816e34
        0x00816a9e:    f004f884    ....    BL       get_args ; 0x81abaa
        0x00816aa2:    49da        .I      LDR      r1,[pc,#872] ; [0x816e0c] = 0x8803d28
        0x00816aa4:    4602        .F      MOV      r2,r0
        0x00816aa6:    3970        p9      SUBS     r1,r1,#0x70
        0x00816aa8:    4630        0F      MOV      r0,r6
        0x00816aaa:    f7f0dfd8    ....    BL       log_buffer ; 0x7a5e
;;;78         }
;;;79     
;;;80     }
;;;81     
;;;82     
;;;83     static void tuya_ble_prod_monitor_timer_start(void)
;;;84     {
;;;85         if(tuya_ble_timer_start(tuya_ble_xTimer_prod_monitor) != TUYA_BLE_SUCCESS)
        0x00816aae:    6860        `h      LDR      r0,[r4,#4]
        0x00816ab0:    f003ff10    ....    BL       tuya_ble_timer_start ; 0x81a8d4
        0x00816ab4:    b140        @.      CBZ      r0,0x816ac8 ; tuya_ble_auc_enter + 96
;;;86         {
;;;87             TUYA_BLE_LOG_ERROR("tuya_ble_xTimer_prod_monitor start failed");
        0x00816ab6:    a0ed        ..      ADR      r0,{pc}+0x3b6 ; 0x816e6c
        0x00816ab8:    f004f877    ..w.    BL       get_args ; 0x81abaa
        0x00816abc:    49d3        .I      LDR      r1,[pc,#844] ; [0x816e0c] = 0x8803d28
        0x00816abe:    4602        .F      MOV      r2,r0
        0x00816ac0:    3938        89      SUBS     r1,r1,#0x38
        0x00816ac2:    4630        0F      MOV      r0,r6
        0x00816ac4:    f7f0dfcb    ....    BL       log_buffer ; 0x7a5e
        0x00816ac8:    f7fafe32    ..2.    BL       tuya_ble_prod_beacon_scan_start ; 0x811730
        0x00816acc:    7025        %p      STRB     r5,[r4,#0]
;;;88         }
;;;89     
;;;90     }
;;;91     
;;;92     static void tuya_ble_prod_monitor_timer_stop(void)
;;;93     {
;;;94     
;;;95         if(tuya_ble_timer_stop(tuya_ble_xTimer_prod_monitor) != TUYA_BLE_SUCCESS)
;;;96         {
;;;97             TUYA_BLE_LOG_ERROR("tuya_ble_xTimer_prod_monitor stop failed");
;;;98         }
;;;99         
;;;100    }
;;;101    
;;;102    
;;;103    static uint32_t tuya_ble_uart_prod_send(uint8_t type,uint8_t *pdata,uint8_t len)
;;;104    {
;;;105        uint8_t uart_send_len = 7+len;
;;;106        uint8_t *uart_send_buffer = NULL;
;;;107        
;;;108        uart_send_buffer=(uint8_t *)tuya_ble_malloc(uart_send_len);
;;;109        if(uart_send_buffer!=NULL)
;;;110        {
;;;111            uart_send_buffer[0] = 0x66;
;;;112            uart_send_buffer[1] = 0xAA;
;;;113            uart_send_buffer[2] = 0x00;
;;;114            uart_send_buffer[3] = type;
;;;115            uart_send_buffer[4] = 0;
;;;116            uart_send_buffer[5] = len;        
;;;117            memcpy(uart_send_buffer+6,pdata,len);
;;;118            uart_send_buffer[6+len] = tuya_ble_check_sum(uart_send_buffer,6+len);
;;;119            tuya_ble_common_uart_send_data(uart_send_buffer,7+len);
;;;120            tuya_ble_free(uart_send_buffer);
;;;121        }
;;;122        else
;;;123        {
;;;124            TUYA_BLE_LOG_ERROR("uart prod send buffer malloc failed.");    
;;;125            return 1;        
;;;126        }
;;;127    
;;;128        return 0;
;;;129    }
;;;130    
;;;131    
;;;132    __TUYA_BLE_WEAK tuya_ble_status_t tuya_ble_prod_beacon_scan_start(void)
;;;133    {
;;;134        return TUYA_BLE_SUCCESS;
;;;135    }
;;;136    
;;;137    __TUYA_BLE_WEAK tuya_ble_status_t tuya_ble_prod_beacon_scan_stop(void)
;;;138    {
;;;139        return TUYA_BLE_SUCCESS;
;;;140    }
;;;141    
;;;142    __TUYA_BLE_WEAK tuya_ble_status_t tuya_ble_prod_beacon_get_rssi_avg(int8_t *rssi)
;;;143    {
;;;144        *rssi = -20;
;;;145        return TUYA_BLE_SUCCESS;
;;;146    }
;;;147    
;;;148    
;;;149    static void tuya_ble_auc_enter(uint8_t *para, uint16_t len)
;;;150    {
;;;151        uint8_t buf[1];
;;;152    
;;;153        TUYA_BLE_LOG_DEBUG("AUC ENTER!");
;;;154        
;;;155        buf[0] = (TUYA_BLE_AUC_FINGERPRINT_VER<<TUYA_BLE_AUC_FW_FINGERPRINT_POS)|(TUYA_BLE_AUC_WRITE_PID<<TUYA_BLE_AUC_WRITE_PID_POS);
;;;156    
;;;157        if(tuya_ble_production_test_flag == 1)
;;;158        {
;;;159            //tuya_ble_stop_escan();
;;;160            tuya_ble_uart_prod_send(TUYA_BLE_AUC_CMD_ENTER,buf,1);
        0x00816ace:    2201        ."      MOVS     r2,#1
        0x00816ad0:    4669        iF      MOV      r1,sp
        0x00816ad2:    2000        .       MOVS     r0,#0
        0x00816ad4:    f7ffff8d    ....    BL       tuya_ble_uart_prod_send ; 0x8169f2
;;;161            return;
;;;162        }
;;;163        tuya_ble_prod_monitor_timer_init();
;;;164        
;;;165        tuya_ble_prod_monitor_timer_start();
;;;166        
;;;167        tuya_ble_prod_beacon_scan_start();
;;;168    
;;;169        tuya_ble_production_test_flag = 1;
;;;170    
;;;171        tuya_ble_uart_prod_send(TUYA_BLE_AUC_CMD_ENTER,buf,1);
;;;172    }
        0x00816ad8:    bdf8        ..      POP      {r3-r7,pc}
    tuya_ble_auc_query_hid
;;;173    
;;;174    
;;;175    static  void tuya_ble_auc_query_hid(uint8_t *para, uint16_t len)
;;;176    {
        0x00816ada:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00816adc:    48bd        .H      LDR      r0,[pc,#756] ; [0x816dd4] = 0x209a94
        0x00816ade:    b093        ..      SUB      sp,sp,#0x4c
        0x00816ae0:    7800        .x      LDRB     r0,[r0,#0]
        0x00816ae2:    2801        .(      CMP      r0,#1
        0x00816ae4:    d154        T.      BNE      0x816b90 ; tuya_ble_auc_query_hid + 182
;;;177        if(tuya_ble_production_test_flag != 1)
;;;178        {
;;;179            return;
;;;180        }
;;;181    
;;;182        TUYA_BLE_LOG_DEBUG("AUC QUERY HID!");
        0x00816ae6:    a0ef        ..      ADR      r0,{pc}+0x3be ; 0x816ea4
        0x00816ae8:    f004f85f    .._.    BL       get_args ; 0x81abaa
        0x00816aec:    49c7        .I      LDR      r1,[pc,#796] ; [0x816e0c] = 0x8803d28
        0x00816aee:    4ec8        .N      LDR      r6,[pc,#800] ; [0x816e10] = 0x21103002
        0x00816af0:    4602        .F      MOV      r2,r0
        0x00816af2:    3150        P1      ADDS     r1,r1,#0x50
        0x00816af4:    4630        0F      MOV      r0,r6
        0x00816af6:    f7f0dfb2    ....    BL       log_buffer ; 0x7a5e
;;;183        char buf[70] = "{\"ret\":true,\"hid\":\"\"}";
        0x00816afa:    2248        H"      MOVS     r2,#0x48
        0x00816afc:    49f1        .I      LDR      r1,[pc,#964] ; [0x816ec4] = 0x81c314
        0x00816afe:    4668        hF      MOV      r0,sp
        0x00816b00:    f443f252    C.R.    BL       __aeabi_memcpy4 ; 0x59fa8
;;;184    
;;;185    
;;;186        if(tuya_ble_buffer_value_is_all_x(tuya_ble_current_para.auth_settings.h_id,H_ID_LEN,0xFF))
        0x00816b04:    48f0        .H      LDR      r0,[pc,#960] ; [0x816ec8] = 0x2097dc
        0x00816b06:    22ff        ."      MOVS     r2,#0xff
        0x00816b08:    2113        .!      MOVS     r1,#0x13
        0x00816b0a:    4607        .F      MOV      r7,r0
        0x00816b0c:    f7fffc1a    ....    BL       tuya_ble_buffer_value_is_all_x ; 0x816344
        0x00816b10:    2422        "$      MOVS     r4,#0x22
        0x00816b12:    257d        }%      MOVS     r5,#0x7d
        0x00816b14:    b928        (.      CBNZ     r0,0x816b22 ; tuya_ble_auc_query_hid + 72
;;;187        {
;;;188            buf[19] = '\"';
;;;189            buf[20] = '}';
;;;190        }
;;;191        else if(tuya_ble_buffer_value_is_all_x(tuya_ble_current_para.auth_settings.h_id,H_ID_LEN,0))
        0x00816b16:    2200        ."      MOVS     r2,#0
        0x00816b18:    2113        .!      MOVS     r1,#0x13
        0x00816b1a:    4638        8F      MOV      r0,r7
        0x00816b1c:    f7fffc12    ....    BL       tuya_ble_buffer_value_is_all_x ; 0x816344
        0x00816b20:    b120         .      CBZ      r0,0x816b2c ; tuya_ble_auc_query_hid + 82
;;;192        {
;;;193            buf[19] = '\"';
        0x00816b22:    f88d4013    ...@    STRB     r4,[sp,#0x13]
;;;194            buf[20] = '}';
        0x00816b26:    f88d5014    ...P    STRB     r5,[sp,#0x14]
        0x00816b2a:    e009        ..      B        0x816b40 ; tuya_ble_auc_query_hid + 102
;;;195        }
;;;196        else
;;;197        {
;;;198            memcpy(&buf[19],tuya_ble_current_para.auth_settings.h_id,H_ID_LEN);
        0x00816b2c:    2213        ."      MOVS     r2,#0x13
        0x00816b2e:    4639        9F      MOV      r1,r7
        0x00816b30:    f10d0013    ....    ADD      r0,sp,#0x13
        0x00816b34:    f443f1b1    C...    BL       __aeabi_memcpy ; 0x59e9a
;;;199            buf[38] = '\"';
        0x00816b38:    f88d4026    ..&@    STRB     r4,[sp,#0x26]
;;;200            buf[39] = '}';
        0x00816b3c:    f88d5027    ..'P    STRB     r5,[sp,#0x27]
;;;201        }
;;;202    
;;;203        tuya_ble_uart_prod_send(TUYA_BLE_AUC_CMD_QUERY_HID,(uint8_t *)buf,strlen(buf));
        0x00816b40:    4668        hF      MOV      r0,sp
        0x00816b42:    f443f18b    C...    BL       strlen ; 0x59e5c
        0x00816b46:    b2c2        ..      UXTB     r2,r0
        0x00816b48:    4669        iF      MOV      r1,sp
        0x00816b4a:    2001        .       MOVS     r0,#1
        0x00816b4c:    f7ffff51    ..Q.    BL       tuya_ble_uart_prod_send ; 0x8169f2
;;;204        
;;;205        TUYA_BLE_LOG_HEXDUMP_DEBUG("AUC QUERY HID response data : ",(uint8_t *)buf,strlen(buf));
        0x00816b50:    a0de        ..      ADR      r0,{pc}+0x37c ; 0x816ecc
        0x00816b52:    f004f82a    ..*.    BL       get_args ; 0x81abaa
        0x00816b56:    4604        .F      MOV      r4,r0
        0x00816b58:    4668        hF      MOV      r0,sp
        0x00816b5a:    f443f17f    C...    BL       strlen ; 0x59e5c
        0x00816b5e:    49ab        .I      LDR      r1,[pc,#684] ; [0x816e0c] = 0x8803d28
        0x00816b60:    4603        .F      MOV      r3,r0
        0x00816b62:    4622        "F      MOV      r2,r4
        0x00816b64:    3170        p1      ADDS     r1,r1,#0x70
        0x00816b66:    4630        0F      MOV      r0,r6
        0x00816b68:    f7f0df79    ..y.    BL       log_buffer ; 0x7a5e
        0x00816b6c:    4668        hF      MOV      r0,sp
        0x00816b6e:    f443f175    C.u.    BL       strlen ; 0x59e5c
        0x00816b72:    b283        ..      UXTH     r3,r0
        0x00816b74:    466a        jF      MOV      r2,sp
        0x00816b76:    2108        .!      MOVS     r1,#8
        0x00816b78:    a0ac        ..      ADR      r0,{pc}+0x2b4 ; 0x816e2c
        0x00816b7a:    f004f82a    ..*.    BL       log_hexdump ; 0x81abd2
        0x00816b7e:    a0ab        ..      ADR      r0,{pc}+0x2ae ; 0x816e2c
        0x00816b80:    f004f813    ....    BL       get_args ; 0x81abaa
        0x00816b84:    49a1        .I      LDR      r1,[pc,#644] ; [0x816e0c] = 0x8803d28
        0x00816b86:    4602        .F      MOV      r2,r0
        0x00816b88:    31a8        .1      ADDS     r1,r1,#0xa8
        0x00816b8a:    4630        0F      MOV      r0,r6
        0x00816b8c:    f7f0df67    ..g.    BL       log_buffer ; 0x7a5e
;;;206    }
        0x00816b90:    b013        ..      ADD      sp,sp,#0x4c
        0x00816b92:    bdf0        ..      POP      {r4-r7,pc}
;;;207    
;;;208    
;;;209    
;;;210    __TUYA_BLE_WEAK tuya_ble_status_t tuya_ble_prod_gpio_test(void)
;;;211    {
;;;212        return TUYA_BLE_SUCCESS;
        0x00816b94:    2000        .       MOVS     r0,#0
;;;213    }
        0x00816b96:    4770        pG      BX       lr
    tuya_ble_auc_gpio_test
;;;214    
;;;215    
;;;216    static void tuya_ble_auc_gpio_test(uint8_t *para, uint16_t len)
;;;217    {
        0x00816b98:    b510        ..      PUSH     {r4,lr}
        0x00816b9a:    a0da        ..      ADR      r0,{pc}+0x36a ; 0x816f04
;;; sample\tuya_ble_sdk\app\product_test\tuya_ble_app_production_test.c (217)
        0x00816b9c:    b088        ..      SUB      sp,sp,#0x20
;;;218        char ture_buf[] = "{\"ret\":true}";
        0x00816b9e:    c80f        ..      LDM      r0,{r0-r3}
        0x00816ba0:    e88d000f    ....    STM      sp,{r0-r3}
;;;219        char false_buf[] = "{\"ret\":false}";
        0x00816ba4:    a0db        ..      ADR      r0,{pc}+0x370 ; 0x816f14
        0x00816ba6:    ac04        ..      ADD      r4,sp,#0x10
        0x00816ba8:    c80f        ..      LDM      r0,{r0-r3}
        0x00816baa:    e884000f    ....    STM      r4,{r0-r3}
;;;220        if(tuya_ble_production_test_flag != 1)
        0x00816bae:    4889        .H      LDR      r0,[pc,#548] ; [0x816dd4] = 0x209a94
        0x00816bb0:    7800        .x      LDRB     r0,[r0,#0]
        0x00816bb2:    2801        .(      CMP      r0,#1
        0x00816bb4:    d11d        ..      BNE      0x816bf2 ; tuya_ble_auc_gpio_test + 90
;;;221        {
;;;222            return;
;;;223        }
;;;224    
;;;225        TUYA_BLE_LOG_DEBUG("AUC GPIO TEST!");
        0x00816bb6:    a0db        ..      ADR      r0,{pc}+0x36e ; 0x816f24
        0x00816bb8:    f003fff7    ....    BL       get_args ; 0x81abaa
        0x00816bbc:    4993        .I      LDR      r1,[pc,#588] ; [0x816e0c] = 0x8803d28
        0x00816bbe:    4c94        .L      LDR      r4,[pc,#592] ; [0x816e10] = 0x21103002
        0x00816bc0:    4602        .F      MOV      r2,r0
        0x00816bc2:    31ac        .1      ADDS     r1,r1,#0xac
        0x00816bc4:    4620         F      MOV      r0,r4
        0x00816bc6:    f7f0df4a    ..J.    BL       log_buffer ; 0x7a5e
;;;226    
;;;227        if(tuya_ble_prod_gpio_test() == TUYA_BLE_SUCCESS)
        0x00816bca:    f7fafdb9    ....    BL       tuya_ble_prod_gpio_test ; 0x811740
        0x00816bce:    b190        ..      CBZ      r0,0x816bf6 ; tuya_ble_auc_gpio_test + 94
        0x00816bd0:    a804        ..      ADD      r0,sp,#0x10
        0x00816bd2:    f443f143    C.C.    BL       strlen ; 0x59e5c
        0x00816bd6:    b2c2        ..      UXTB     r2,r0
        0x00816bd8:    a904        ..      ADD      r1,sp,#0x10
        0x00816bda:    2002        .       MOVS     r0,#2
        0x00816bdc:    f7ffff09    ....    BL       tuya_ble_uart_prod_send ; 0x8169f2
        0x00816be0:    a0d8        ..      ADR      r0,{pc}+0x364 ; 0x816f44
        0x00816be2:    f003ffe2    ....    BL       get_args ; 0x81abaa
        0x00816be6:    4989        .I      LDR      r1,[pc,#548] ; [0x816e0c] = 0x8803d28
        0x00816be8:    4602        .F      MOV      r2,r0
        0x00816bea:    31f4        .1      ADDS     r1,r1,#0xf4
        0x00816bec:    4620         F      MOV      r0,r4
        0x00816bee:    f7f0df36    ..6.    BL       log_buffer ; 0x7a5e
        0x00816bf2:    b008        ..      ADD      sp,sp,#0x20
        0x00816bf4:    bd10        ..      POP      {r4,pc}
;;;228        {
;;;229            tuya_ble_uart_prod_send(TUYA_BLE_AUC_CMD_GPIO_TEST,(uint8_t *)ture_buf,strlen(ture_buf));
        0x00816bf6:    4668        hF      MOV      r0,sp
        0x00816bf8:    f443f130    C.0.    BL       strlen ; 0x59e5c
        0x00816bfc:    b2c2        ..      UXTB     r2,r0
        0x00816bfe:    4669        iF      MOV      r1,sp
        0x00816c00:    2002        .       MOVS     r0,#2
        0x00816c02:    f7fffef6    ....    BL       tuya_ble_uart_prod_send ; 0x8169f2
;;;230            TUYA_BLE_LOG_DEBUG("AUC GPIO TEST successed!");
        0x00816c06:    a0d8        ..      ADR      r0,{pc}+0x362 ; 0x816f68
        0x00816c08:    f003ffcf    ....    BL       get_args ; 0x81abaa
        0x00816c0c:    497f        .I      LDR      r1,[pc,#508] ; [0x816e0c] = 0x8803d28
        0x00816c0e:    4602        .F      MOV      r2,r0
        0x00816c10:    31cc        .1      ADDS     r1,r1,#0xcc
        0x00816c12:    e7eb        ..      B        0x816bec ; tuya_ble_auc_gpio_test + 84
    tuya_ble_auc_write_auth_info
;;;231        }
;;;232        else
;;;233        {
;;;234            tuya_ble_uart_prod_send(TUYA_BLE_AUC_CMD_GPIO_TEST,(uint8_t *)false_buf,strlen(false_buf));
;;;235            TUYA_BLE_LOG_ERROR("AUC GPIO TEST failed!");
;;;236        }
;;;237    
;;;238    }
;;;239    
;;;240    
;;;241    static void tuya_ble_prod_asciitohex(uint8_t *ascbuf,uint8_t len,uint8_t *hexbuf)
;;;242    {
;;;243        uint8_t i =0,j =0;
;;;244    
;;;245        for(j = 0; j<(len/2); j++)
;;;246        {       
;;;247            if((ascbuf[i] >= 0x30)&&(ascbuf[i] <= 0x39)) {
;;;248                hexbuf[j] = ((ascbuf[i] - 0x30)<<4);
;;;249            }
;;;250            else if((ascbuf[i] >= 65)&&(ascbuf[i] <= 70)) {
;;;251                hexbuf[j] = ((ascbuf[i] - 55)<<4);
;;;252            }
;;;253            else if((ascbuf[i] >= 97)&&(ascbuf[i] <= 102)) {
;;;254                hexbuf[j] = ((ascbuf[i] - 87)<<4);
;;;255            }
;;;256            i++;
;;;257            if((ascbuf[i] >= 0x30)&&(ascbuf[i] <= 0x39)) {
;;;258                hexbuf[j] |= (ascbuf[i] - 0x30);
;;;259            }
;;;260            else if((ascbuf[i] >= 65)&&(ascbuf[i] <= 70)) {
;;;261                hexbuf[j] |= (ascbuf[i] - 55);
;;;262            }
;;;263            else if((ascbuf[i] >= 97)&&(ascbuf[i] <= 102)) {
;;;264                hexbuf[j] |= (ascbuf[i] - 87);
;;;265            }
;;;266            i++;
;;;267            
;;;268        }
;;;269        
;;;270    }
;;;271    
;;;272    static  void tuya_ble_auc_write_auth_info(uint8_t *para, uint16_t len)
;;;273    {
        0x00816c14:    b570        p.      PUSH     {r4-r6,lr}
        0x00816c16:    4604        .F      MOV      r4,r0
        0x00816c18:    a0ba        ..      ADR      r0,{pc}+0x2ec ; 0x816f04
;;; sample\tuya_ble_sdk\app\product_test\tuya_ble_app_production_test.c (273)
        0x00816c1a:    460d        .F      MOV      r5,r1
        0x00816c1c:    c80f        ..      LDM      r0,{r0-r3}
        0x00816c1e:    b092        ..      SUB      sp,sp,#0x48
;;;274        uint8_t mac_temp[6];
;;;275        uint8_t mac_char[13];
;;;276        char true_buf[] = "{\"ret\":true}";
        0x00816c20:    ae08        ..      ADD      r6,sp,#0x20
        0x00816c22:    e886000f    ....    STM      r6,{r0-r3}
;;;277        char false_buf[] = "{\"ret\":false}";
        0x00816c26:    a0bb        ..      ADR      r0,{pc}+0x2ee ; 0x816f14
        0x00816c28:    ae04        ..      ADD      r6,sp,#0x10
        0x00816c2a:    c80f        ..      LDM      r0,{r0-r3}
        0x00816c2c:    e886000f    ....    STM      r6,{r0-r3}
;;;278        
;;;279        if(tuya_ble_production_test_flag != 1)
        0x00816c30:    4868        hH      LDR      r0,[pc,#416] ; [0x816dd4] = 0x209a94
        0x00816c32:    7800        .x      LDRB     r0,[r0,#0]
        0x00816c34:    2801        .(      CMP      r0,#1
        0x00816c36:    d16a        j.      BNE      0x816d0e ; tuya_ble_auc_write_auth_info + 250
;;;280        {
;;;281            return;
;;;282        }
;;;283        
;;;284        TUYA_BLE_LOG_DEBUG("AUC WRITE AUTH INFO!");    
        0x00816c38:    a0d5        ..      ADR      r0,{pc}+0x358 ; 0x816f90
        0x00816c3a:    f003ffb6    ....    BL       get_args ; 0x81abaa
        0x00816c3e:    4e74        tN      LDR      r6,[pc,#464] ; [0x816e10] = 0x21103002
        0x00816c40:    4602        .F      MOV      r2,r0
        0x00816c42:    49dc        .I      LDR      r1,[pc,#880] ; [0x816fb4] = 0x8803e40
        0x00816c44:    4630        0F      MOV      r0,r6
        0x00816c46:    f7f0df0a    ....    BL       log_buffer ; 0x7a5e
;;;285            
;;;286        /*
;;;287          {
;;;288          "auzkey":"xxxx",    //"6":"32",         7   +  6+4
;;;289          "uuid":"xxxx",      //"4":"16",         7   +6+32+6   +    4+4
;;;290          "mac":"xxxxxx",     //"3":"12",
;;;291          "prod_test":"xxxx"    //"9":"4/5"
;;;292          }
;;;293          */
;;;294       
;;;295        if(len<100)
        0x00816c4a:    2d64        d-      CMP      r5,#0x64
        0x00816c4c:    d20e        ..      BCS      0x816c6c ; tuya_ble_auc_write_auth_info + 88
;;;296        {
;;;297            tuya_ble_uart_prod_send(TUYA_BLE_AUC_CMD_WRITE_AUTH_INFO,(uint8_t *)false_buf,strlen(false_buf));
        0x00816c4e:    a804        ..      ADD      r0,sp,#0x10
        0x00816c50:    f443f104    C...    BL       strlen ; 0x59e5c
        0x00816c54:    b2c2        ..      UXTB     r2,r0
        0x00816c56:    a904        ..      ADD      r1,sp,#0x10
        0x00816c58:    2003        .       MOVS     r0,#3
        0x00816c5a:    f7fffeca    ....    BL       tuya_ble_uart_prod_send ; 0x8169f2
;;;298            TUYA_BLE_LOG_ERROR("AUC_CMD_WRITE_AUTH_INFO error ,since Invalid length!");
        0x00816c5e:    48d6        .H      LDR      r0,[pc,#856] ; [0x816fb8] = 0x81d8c0
        0x00816c60:    f003ffa3    ....    BL       get_args ; 0x81abaa
        0x00816c64:    49d3        .I      LDR      r1,[pc,#844] ; [0x816fb4] = 0x8803e40
        0x00816c66:    4602        .F      MOV      r2,r0
        0x00816c68:    3124        $1      ADDS     r1,r1,#0x24
;;;299            return;
        0x00816c6a:    e04d        M.      B        0x816d08 ; tuya_ble_auc_write_auth_info + 244
;;;300        }
;;;301        
;;;302        if((memcmp(&para[2],"auzkey",6)!=0)||(memcmp(&para[46],"uuid",4)!=0)||(memcmp(&para[72],"mac",3)!=0))
        0x00816c6c:    2206        ."      MOVS     r2,#6
        0x00816c6e:    a1d3        ..      ADR      r1,{pc}+0x34e ; 0x816fbc
        0x00816c70:    1ca0        ..      ADDS     r0,r4,#2
        0x00816c72:    f443f0c7    C...    BL       memcmp ; 0x59e04
        0x00816c76:    b968        h.      CBNZ     r0,0x816c94 ; tuya_ble_auc_write_auth_info + 128
        0x00816c78:    2204        ."      MOVS     r2,#4
        0x00816c7a:    a1d2        ..      ADR      r1,{pc}+0x34a ; 0x816fc4
        0x00816c7c:    f104002e    ....    ADD      r0,r4,#0x2e
        0x00816c80:    f443f0c0    C...    BL       memcmp ; 0x59e04
        0x00816c84:    b930        0.      CBNZ     r0,0x816c94 ; tuya_ble_auc_write_auth_info + 128
        0x00816c86:    2203        ."      MOVS     r2,#3
        0x00816c88:    a1d0        ..      ADR      r1,{pc}+0x344 ; 0x816fcc
        0x00816c8a:    f1040048    ..H.    ADD      r0,r4,#0x48
        0x00816c8e:    f443f0b9    C...    BL       memcmp ; 0x59e04
        0x00816c92:    b170        p.      CBZ      r0,0x816cb2 ; tuya_ble_auc_write_auth_info + 158
;;;303        {
;;;304            tuya_ble_uart_prod_send(TUYA_BLE_AUC_CMD_WRITE_AUTH_INFO,(uint8_t *)false_buf,strlen(false_buf));
        0x00816c94:    a804        ..      ADD      r0,sp,#0x10
        0x00816c96:    f443f0e1    C...    BL       strlen ; 0x59e5c
        0x00816c9a:    b2c2        ..      UXTB     r2,r0
        0x00816c9c:    a904        ..      ADD      r1,sp,#0x10
        0x00816c9e:    2003        .       MOVS     r0,#3
        0x00816ca0:    f7fffea7    ....    BL       tuya_ble_uart_prod_send ; 0x8169f2
;;;305            TUYA_BLE_LOG_ERROR("AUC_CMD_WRITE_AUTH_INFO error ,since Invalid paras");
        0x00816ca4:    48ca        .H      LDR      r0,[pc,#808] ; [0x816fd0] = 0x81d95c
        0x00816ca6:    f003ff80    ....    BL       get_args ; 0x81abaa
        0x00816caa:    49c2        .I      LDR      r1,[pc,#776] ; [0x816fb4] = 0x8803e40
        0x00816cac:    4602        .F      MOV      r2,r0
        0x00816cae:    3168        h1      ADDS     r1,r1,#0x68
;;;306            return;
        0x00816cb0:    e02a        *.      B        0x816d08 ; tuya_ble_auc_write_auth_info + 244
;;;307        }
;;;308        
;;;309        memcpy(mac_char,&para[78],12);
        0x00816cb2:    f8d4004e    ..N.    LDR      r0,[r4,#0x4e]
        0x00816cb6:    900c        ..      STR      r0,[sp,#0x30]
        0x00816cb8:    f8d40052    ..R.    LDR      r0,[r4,#0x52]
        0x00816cbc:    900d        ..      STR      r0,[sp,#0x34]
        0x00816cbe:    f8d40056    ..V.    LDR      r0,[r4,#0x56]
;;;310        tuya_ble_prod_asciitohex(mac_char,12,mac_temp);
        0x00816cc2:    900e        ..      STR      r0,[sp,#0x38]
        0x00816cc4:    aa10        ..      ADD      r2,sp,#0x40
        0x00816cc6:    210c        .!      MOVS     r1,#0xc
        0x00816cc8:    a80c        ..      ADD      r0,sp,#0x30
        0x00816cca:    f000fd29    ..).    BL       tuya_ble_prod_asciitohex ; 0x817720
;;;311    
;;;312        if(tuya_ble_storage_write_auth_key_device_id_mac(&para[11],AUTH_KEY_LEN,&para[53],DEVICE_ID_LEN,mac_temp,MAC_LEN,mac_char,MAC_LEN*2)==TUYA_BLE_SUCCESS)
        0x00816cce:    230c        .#      MOVS     r3,#0xc
        0x00816cd0:    aa0c        ..      ADD      r2,sp,#0x30
        0x00816cd2:    2106        .!      MOVS     r1,#6
        0x00816cd4:    a810        ..      ADD      r0,sp,#0x40
        0x00816cd6:    e88d000f    ....    STM      sp,{r0-r3}
        0x00816cda:    2310        .#      MOVS     r3,#0x10
        0x00816cdc:    f1040235    ..5.    ADD      r2,r4,#0x35
        0x00816ce0:    2120         !      MOVS     r1,#0x20
        0x00816ce2:    f104000b    ....    ADD      r0,r4,#0xb
        0x00816ce6:    f7fff913    ....    BL       tuya_ble_storage_write_auth_key_device_id_mac ; 0x815f10
        0x00816cea:    b190        ..      CBZ      r0,0x816d12 ; tuya_ble_auc_write_auth_info + 254
        0x00816cec:    a804        ..      ADD      r0,sp,#0x10
        0x00816cee:    f443f0b5    C...    BL       strlen ; 0x59e5c
        0x00816cf2:    b2c2        ..      UXTB     r2,r0
        0x00816cf4:    a904        ..      ADD      r1,sp,#0x10
        0x00816cf6:    2003        .       MOVS     r0,#3
        0x00816cf8:    f7fffe7b    ..{.    BL       tuya_ble_uart_prod_send ; 0x8169f2
        0x00816cfc:    a0b5        ..      ADR      r0,{pc}+0x2d8 ; 0x816fd4
        0x00816cfe:    f003ff54    ..T.    BL       get_args ; 0x81abaa
        0x00816d02:    49ac        .I      LDR      r1,[pc,#688] ; [0x816fb4] = 0x8803e40
        0x00816d04:    4602        .F      MOV      r2,r0
        0x00816d06:    31dc        .1      ADDS     r1,r1,#0xdc
        0x00816d08:    4630        0F      MOV      r0,r6
        0x00816d0a:    f7f0dea8    ....    BL       log_buffer ; 0x7a5e
        0x00816d0e:    b012        ..      ADD      sp,sp,#0x48
        0x00816d10:    bd70        p.      POP      {r4-r6,pc}
;;;313        {
;;;314            tuya_ble_uart_prod_send(TUYA_BLE_AUC_CMD_WRITE_AUTH_INFO,(uint8_t *)true_buf,strlen(true_buf));
        0x00816d12:    a808        ..      ADD      r0,sp,#0x20
        0x00816d14:    f443f0a2    C...    BL       strlen ; 0x59e5c
        0x00816d18:    b2c2        ..      UXTB     r2,r0
        0x00816d1a:    a908        ..      ADD      r1,sp,#0x20
        0x00816d1c:    2003        .       MOVS     r0,#3
        0x00816d1e:    f7fffe68    ..h.    BL       tuya_ble_uart_prod_send ; 0x8169f2
;;;315            TUYA_BLE_LOG_DEBUG("AUC WRITE AUTH INFO successed!"); 
        0x00816d22:    a0b8        ..      ADR      r0,{pc}+0x2e2 ; 0x817004
        0x00816d24:    f003ff41    ..A.    BL       get_args ; 0x81abaa
        0x00816d28:    49a2        .I      LDR      r1,[pc,#648] ; [0x816fb4] = 0x8803e40
        0x00816d2a:    4602        .F      MOV      r2,r0
        0x00816d2c:    31ac        .1      ADDS     r1,r1,#0xac
        0x00816d2e:    e7eb        ..      B        0x816d08 ; tuya_ble_auc_write_auth_info + 244
    tuya_ble_auc_query_info
;;;316        }
;;;317        else
;;;318        {
;;;319            tuya_ble_uart_prod_send(TUYA_BLE_AUC_CMD_WRITE_AUTH_INFO,(uint8_t *)false_buf,strlen(false_buf));
;;;320            TUYA_BLE_LOG_ERROR("AUC_CMD_WRITE_AUTH_INFO failed!");
;;;321        }
;;;322               
;;;323    }
;;;324    
;;;325    
;;;326    
;;;327    
;;;328    static void tuya_ble_auc_query_info(uint8_t *para, uint16_t len)
;;;329    {
        0x00816d30:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x00816d34:    4827        'H      LDR      r0,[pc,#156] ; [0x816dd4] = 0x209a94
        0x00816d36:    7800        .x      LDRB     r0,[r0,#0]
        0x00816d38:    2801        .(      CMP      r0,#1
;;; sample\tuya_ble_sdk\app\product_test\tuya_ble_app_production_test.c (329)
        0x00816d3a:    d149        I.      BNE      0x816dd0 ; tuya_ble_auc_query_info + 160
;;;330        
;;;331        uint8_t i=0;
;;;332        uint8_t mac_temp[13];
;;;333        uint8_t *alloc_buf = NULL;
;;;334        
;;;335        if(tuya_ble_production_test_flag != 1)
;;;336        {
;;;337            return;
;;;338        }    
;;;339           
;;;340        TUYA_BLE_LOG_DEBUG("AUC QUERY INFO!"); 
        0x00816d3c:    a0bd        ..      ADR      r0,{pc}+0x2f8 ; 0x817034
        0x00816d3e:    f003ff34    ..4.    BL       get_args ; 0x81abaa
        0x00816d42:    f8df80cc    ....    LDR      r8,[pc,#204] ; [0x816e10] = 0x21103002
        0x00816d46:    4602        .F      MOV      r2,r0
        0x00816d48:    49c2        .I      LDR      r1,[pc,#776] ; [0x817054] = 0x8803f4c
        0x00816d4a:    4640        @F      MOV      r0,r8
        0x00816d4c:    f7f0de87    ....    BL       log_buffer ; 0x7a5e
;;;341    
;;;342        alloc_buf = (uint8_t *)tuya_ble_malloc(256);
        0x00816d50:    f44f7580    O..u    MOV      r5,#0x100
        0x00816d54:    4628        (F      MOV      r0,r5
        0x00816d56:    f7fefb1b    ....    BL       tuya_ble_malloc ; 0x815390
        0x00816d5a:    0004        ..      MOVS     r4,r0
;;;343        
;;;344        if(alloc_buf)
        0x00816d5c:    d039        9.      BEQ      0x816dd2 ; tuya_ble_auc_query_info + 162
;;;345        {
;;;346            memset(alloc_buf,0,256);  
        0x00816d5e:    4629        )F      MOV      r1,r5
        0x00816d60:    f443f15c    C.\.    BL       __aeabi_memclr ; 0x5a01c
;;;347        }   
;;;348        else
;;;349        {
;;;350            TUYA_BLE_LOG_ERROR("AUC QUERY INFO alloc buf malloc failed."); 
;;;351            return;
;;;352        }        
;;;353        
;;;354        alloc_buf[i++] = '{';
        0x00816d64:    207b        {       MOVS     r0,#0x7b
        0x00816d66:    7020         p      STRB     r0,[r4,#0]
;;;355        alloc_buf[i++] = '\"';
        0x00816d68:    2522        "%      MOVS     r5,#0x22
        0x00816d6a:    a0bb        ..      ADR      r0,{pc}+0x2ee ; 0x817058
        0x00816d6c:    7065        ep      STRB     r5,[r4,#1]
;;;356        memcpy(&alloc_buf[i],"ret",3);
        0x00816d6e:    8800        ..      LDRH     r0,[r0,#0]
        0x00816d70:    8060        `.      STRH     r0,[r4,#2]
        0x00816d72:    2074        t       MOVS     r0,#0x74
        0x00816d74:    7120         q      STRB     r0,[r4,#4]
;;;357        i += 3;
;;;358        alloc_buf[i++] = '\"';
        0x00816d76:    7165        eq      STRB     r5,[r4,#5]
;;;359    
;;;360        alloc_buf[i++] = ':';
        0x00816d78:    263a        :&      MOVS     r6,#0x3a
        0x00816d7a:    a0b8        ..      ADR      r0,{pc}+0x2e2 ; 0x81705c
        0x00816d7c:    71a6        .q      STRB     r6,[r4,#6]
;;;361        memcpy(&alloc_buf[i],"true",4);
        0x00816d7e:    6800        .h      LDR      r0,[r0,#0]
        0x00816d80:    f8c40007    ....    STR      r0,[r4,#7]
;;;362        i += 4;
;;;363    
;;;364        alloc_buf[i++] = ',';
        0x00816d84:    272c        ,'      MOVS     r7,#0x2c
        0x00816d86:    72e7        .r      STRB     r7,[r4,#0xb]
        0x00816d88:    a0b6        ..      ADR      r0,{pc}+0x2dc ; 0x817064
;;;365        alloc_buf[i++] = '\"';
        0x00816d8a:    7325        %s      STRB     r5,[r4,#0xc]
;;;366        memcpy(&alloc_buf[i],"auzKey",6);
        0x00816d8c:    6801        .h      LDR      r1,[r0,#0]
        0x00816d8e:    f8c4100d    ....    STR      r1,[r4,#0xd]
        0x00816d92:    8880        ..      LDRH     r0,[r0,#4]
        0x00816d94:    f8a40011    ....    STRH     r0,[r4,#0x11]
;;;367        i += 6;
;;;368        alloc_buf[i++] = '\"';
        0x00816d98:    74e5        .t      STRB     r5,[r4,#0x13]
        0x00816d9a:    494b        KI      LDR      r1,[pc,#300] ; [0x816ec8] = 0x2097dc
;;;369        alloc_buf[i++] = ':';
        0x00816d9c:    7526        &u      STRB     r6,[r4,#0x14]
;;;370        alloc_buf[i++] = '\"';
        0x00816d9e:    7565        eu      STRB     r5,[r4,#0x15]
;;;371        memcpy(&alloc_buf[i],tuya_ble_current_para.auth_settings.auth_key,AUTH_KEY_LEN);
        0x00816da0:    f1040016    ....    ADD      r0,r4,#0x16
        0x00816da4:    2220         "      MOVS     r2,#0x20
        0x00816da6:    3129        )1      ADDS     r1,r1,#0x29
        0x00816da8:    f443f077    C.w.    BL       __aeabi_memcpy ; 0x59e9a
;;;372        i += AUTH_KEY_LEN;
;;;373        
;;;374        alloc_buf[i++] = '\"';
        0x00816dac:    f8845036    ..6P    STRB     r5,[r4,#0x36]
;;;375    
;;;376        alloc_buf[i++] = ',';
        0x00816db0:    f8847037    ..7p    STRB     r7,[r4,#0x37]
        0x00816db4:    a0ad        ..      ADR      r0,{pc}+0x2b8 ; 0x81706c
;;;377        alloc_buf[i++] = '\"';
        0x00816db6:    f8845038    ..8P    STRB     r5,[r4,#0x38]
;;;378        memcpy(&alloc_buf[i],"hid",3);
        0x00816dba:    8800        ..      LDRH     r0,[r0,#0]
        0x00816dbc:    f8a40039    ..9.    STRH     r0,[r4,#0x39]
        0x00816dc0:    2064        d       MOVS     r0,#0x64
        0x00816dc2:    f884003b    ..;.    STRB     r0,[r4,#0x3b]
;;;379        i += 3;
;;;380        alloc_buf[i++] = '\"';
        0x00816dc6:    f884503c    ..<P    STRB     r5,[r4,#0x3c]
;;;381        alloc_buf[i++] = ':';
        0x00816dca:    f884603d    ..=`    STRB     r6,[r4,#0x3d]
;;;382        alloc_buf[i++] = '\"';
        0x00816dce:    e14f        O.      B        0x817070 ; tuya_ble_auc_query_info + 832
        0x00816dd0:    e1e5        ..      B        0x81719e ; tuya_ble_auc_query_info + 1134
        0x00816dd2:    e1d9        ..      B        0x817188 ; tuya_ble_auc_query_info + 1112
    $d
        0x00816dd4:    00209a94    .. .    DCD    2136724
        0x00816dd8:    205d455b    [E]     DCD    542983515
        0x00816ddc:    41595554    TUYA    DCD    1096373588
        0x00816de0:    454c425f    _BLE    DCD    1162625631
        0x00816de4:    6175203a    : ua    DCD    1635065914
        0x00816de8:    70207472    rt p    DCD    1881175154
        0x00816dec:    20646f72    rod     DCD    543453042
        0x00816df0:    646e6573    send    DCD    1684956531
        0x00816df4:    66756220     buf    DCD    1718968864
        0x00816df8:    20726566    fer     DCD    544367974
        0x00816dfc:    6c6c616d    mall    DCD    1819042157
        0x00816e00:    6620636f    oc f    DCD    1713398639
        0x00816e04:    656c6961    aile    DCD    1701603681
        0x00816e08:    00002e64    d...    DCD    11876
        0x00816e0c:    08803d28    (=..    DCD    142621992
        0x00816e10:    21103002    .0.!    DCD    554708994
        0x00816e14:    205d445b    [D]     DCD    542983259
        0x00816e18:    41595554    TUYA    DCD    1096373588
        0x00816e1c:    454c425f    _BLE    DCD    1162625631
        0x00816e20:    5541203a    : AU    DCD    1430331450
        0x00816e24:    4e452043    C EN    DCD    1313153091
        0x00816e28:    21524554    TER!    DCD    559039828
        0x00816e2c:    00000000    ....    DCD    0
        0x00816e30:    008169e1    .i..    DCD    8481249
        0x00816e34:    205d455b    [E]     DCD    542983515
        0x00816e38:    41595554    TUYA    DCD    1096373588
        0x00816e3c:    454c425f    _BLE    DCD    1162625631
        0x00816e40:    7574203a    : tu    DCD    1970544698
        0x00816e44:    625f6179    ya_b    DCD    1650418041
        0x00816e48:    785f656c    le_x    DCD    2019517804
        0x00816e4c:    656d6954    Time    DCD    1701669204
        0x00816e50:    72705f72    r_pr    DCD    1919967090
        0x00816e54:    6d5f646f    od_m    DCD    1834968175
        0x00816e58:    74696e6f    onit    DCD    1953066607
        0x00816e5c:    6320726f    or c    DCD    1663070831
        0x00816e60:    74616572    reat    DCD    1952540018
        0x00816e64:    69616620     fai    DCD    1767990816
        0x00816e68:    0064656c    led.    DCD    6579564
        0x00816e6c:    205d455b    [E]     DCD    542983515
        0x00816e70:    41595554    TUYA    DCD    1096373588
        0x00816e74:    454c425f    _BLE    DCD    1162625631
        0x00816e78:    7574203a    : tu    DCD    1970544698
        0x00816e7c:    625f6179    ya_b    DCD    1650418041
        0x00816e80:    785f656c    le_x    DCD    2019517804
        0x00816e84:    656d6954    Time    DCD    1701669204
        0x00816e88:    72705f72    r_pr    DCD    1919967090
        0x00816e8c:    6d5f646f    od_m    DCD    1834968175
        0x00816e90:    74696e6f    onit    DCD    1953066607
        0x00816e94:    7320726f    or s    DCD    1931506287
        0x00816e98:    74726174    tart    DCD    1953653108
        0x00816e9c:    69616620     fai    DCD    1767990816
        0x00816ea0:    0064656c    led.    DCD    6579564
        0x00816ea4:    205d445b    [D]     DCD    542983259
        0x00816ea8:    41595554    TUYA    DCD    1096373588
        0x00816eac:    454c425f    _BLE    DCD    1162625631
        0x00816eb0:    5541203a    : AU    DCD    1430331450
        0x00816eb4:    55512043    C QU    DCD    1431380035
        0x00816eb8:    20595245    ERY     DCD    542724677
        0x00816ebc:    21444948    HID!    DCD    558123336
        0x00816ec0:    00000000    ....    DCD    0
        0x00816ec4:    0081c314    ....    DCD    8504084
        0x00816ec8:    002097dc    .. .    DCD    2136028
        0x00816ecc:    205d445b    [D]     DCD    542983259
        0x00816ed0:    41595554    TUYA    DCD    1096373588
        0x00816ed4:    454c425f    _BLE    DCD    1162625631
        0x00816ed8:    5541203a    : AU    DCD    1430331450
        0x00816edc:    55512043    C QU    DCD    1431380035
        0x00816ee0:    20595245    ERY     DCD    542724677
        0x00816ee4:    20444948    HID     DCD    541346120
        0x00816ee8:    70736572    resp    DCD    1886610802
        0x00816eec:    65736e6f    onse    DCD    1702063727
        0x00816ef0:    74616420     dat    DCD    1952539680
        0x00816ef4:    203a2061    a :     DCD    540680289
        0x00816ef8:    656c5b20     [le    DCD    1701600032
        0x00816efc:    64253d6e    n=%d    DCD    1680162158
        0x00816f00:    003a205d    ] :.    DCD    3809373
        0x00816f04:    6572227b    {"re    DCD    1701978747
        0x00816f08:    743a2274    t":t    DCD    1949966964
        0x00816f0c:    7d657572    rue}    DCD    2103801202
        0x00816f10:    00000000    ....    DCD    0
        0x00816f14:    6572227b    {"re    DCD    1701978747
        0x00816f18:    663a2274    t":f    DCD    1715085940
        0x00816f1c:    65736c61    alse    DCD    1702063201
        0x00816f20:    0000007d    }...    DCD    125
        0x00816f24:    205d445b    [D]     DCD    542983259
        0x00816f28:    41595554    TUYA    DCD    1096373588
        0x00816f2c:    454c425f    _BLE    DCD    1162625631
        0x00816f30:    5541203a    : AU    DCD    1430331450
        0x00816f34:    50472043    C GP    DCD    1346838595
        0x00816f38:    54204f49    IO T    DCD    1411403593
        0x00816f3c:    21545345    EST!    DCD    559174469
        0x00816f40:    00000000    ....    DCD    0
        0x00816f44:    205d455b    [E]     DCD    542983515
        0x00816f48:    41595554    TUYA    DCD    1096373588
        0x00816f4c:    454c425f    _BLE    DCD    1162625631
        0x00816f50:    5541203a    : AU    DCD    1430331450
        0x00816f54:    50472043    C GP    DCD    1346838595
        0x00816f58:    54204f49    IO T    DCD    1411403593
        0x00816f5c:    20545345    EST     DCD    542397253
        0x00816f60:    6c696166    fail    DCD    1818845542
        0x00816f64:    00216465    ed!.    DCD    2188389
        0x00816f68:    205d445b    [D]     DCD    542983259
        0x00816f6c:    41595554    TUYA    DCD    1096373588
        0x00816f70:    454c425f    _BLE    DCD    1162625631
        0x00816f74:    5541203a    : AU    DCD    1430331450
        0x00816f78:    50472043    C GP    DCD    1346838595
        0x00816f7c:    54204f49    IO T    DCD    1411403593
        0x00816f80:    20545345    EST     DCD    542397253
        0x00816f84:    63637573    succ    DCD    1667462515
        0x00816f88:    65737365    esse    DCD    1702064997
        0x00816f8c:    00002164    d!..    DCD    8548
        0x00816f90:    205d445b    [D]     DCD    542983259
        0x00816f94:    41595554    TUYA    DCD    1096373588
        0x00816f98:    454c425f    _BLE    DCD    1162625631
        0x00816f9c:    5541203a    : AU    DCD    1430331450
        0x00816fa0:    52572043    C WR    DCD    1381441603
        0x00816fa4:    20455449    ITE     DCD    541414473
        0x00816fa8:    48545541    AUTH    DCD    1213486401
        0x00816fac:    464e4920     INF    DCD    1179535648
        0x00816fb0:    0000214f    O!..    DCD    8527
        0x00816fb4:    08803e40    @>..    DCD    142622272
        0x00816fb8:    0081d8c0    ....    DCD    8509632
        0x00816fbc:    6b7a7561    auzk    DCD    1803187553
        0x00816fc0:    00007965    ey..    DCD    31077
        0x00816fc4:    64697575    uuid    DCD    1684632949
        0x00816fc8:    00000000    ....    DCD    0
        0x00816fcc:    0063616d    mac.    DCD    6513005
        0x00816fd0:    0081d95c    \...    DCD    8509788
        0x00816fd4:    205d455b    [E]     DCD    542983515
        0x00816fd8:    41595554    TUYA    DCD    1096373588
        0x00816fdc:    454c425f    _BLE    DCD    1162625631
        0x00816fe0:    5541203a    : AU    DCD    1430331450
        0x00816fe4:    4d435f43    C_CM    DCD    1296260931
        0x00816fe8:    52575f44    D_WR    DCD    1381457732
        0x00816fec:    5f455449    ITE_    DCD    1598379081
        0x00816ff0:    48545541    AUTH    DCD    1213486401
        0x00816ff4:    464e495f    _INF    DCD    1179535711
        0x00816ff8:    6166204f    O fa    DCD    1634082895
        0x00816ffc:    64656c69    iled    DCD    1684368489
        0x00817000:    00000021    !...    DCD    33
        0x00817004:    205d445b    [D]     DCD    542983259
        0x00817008:    41595554    TUYA    DCD    1096373588
        0x0081700c:    454c425f    _BLE    DCD    1162625631
        0x00817010:    5541203a    : AU    DCD    1430331450
        0x00817014:    52572043    C WR    DCD    1381441603
        0x00817018:    20455449    ITE     DCD    541414473
        0x0081701c:    48545541    AUTH    DCD    1213486401
        0x00817020:    464e4920     INF    DCD    1179535648
        0x00817024:    7573204f    O su    DCD    1970479183
        0x00817028:    73656363    cces    DCD    1936024419
        0x0081702c:    21646573    sed!    DCD    560227699
        0x00817030:    00000000    ....    DCD    0
        0x00817034:    205d445b    [D]     DCD    542983259
        0x00817038:    41595554    TUYA    DCD    1096373588
        0x0081703c:    454c425f    _BLE    DCD    1162625631
        0x00817040:    5541203a    : AU    DCD    1430331450
        0x00817044:    55512043    C QU    DCD    1431380035
        0x00817048:    20595245    ERY     DCD    542724677
        0x0081704c:    4f464e49    INFO    DCD    1330007625
        0x00817050:    00000021    !...    DCD    33
        0x00817054:    08803f4c    L?..    DCD    142622540
        0x00817058:    00746572    ret.    DCD    7628146
        0x0081705c:    65757274    true    DCD    1702195828
        0x00817060:    00000000    ....    DCD    0
        0x00817064:    4b7a7561    auzK    DCD    1266316641
        0x00817068:    00007965    ey..    DCD    31077
        0x0081706c:    00646968    hid.    DCD    6580584
    $t
        0x00817070:    f884503e    ..>P    STRB     r5,[r4,#0x3e]
;;;383        memcpy( &alloc_buf[i],tuya_ble_current_para.auth_settings.h_id,H_ID_LEN);
        0x00817074:    f104003f    ..?.    ADD      r0,r4,#0x3f
        0x00817078:    2213        ."      MOVS     r2,#0x13
        0x0081707a:    49f7        .I      LDR      r1,[pc,#988] ; [0x817458] = 0x2097dc
        0x0081707c:    f442f70d    B...    BL       __aeabi_memcpy ; 0x59e9a
;;;384        i += 19;
;;;385        alloc_buf[i++] = '\"';
        0x00817080:    f8845052    ..RP    STRB     r5,[r4,#0x52]
;;;386    
;;;387        alloc_buf[i++] = ',';
        0x00817084:    f8847053    ..Sp    STRB     r7,[r4,#0x53]
;;;388        alloc_buf[i++] = '\"';
        0x00817088:    f8845054    ..TP    STRB     r5,[r4,#0x54]
;;;389        memcpy(&alloc_buf[i],"uuid",4);
        0x0081708c:    f2af00cc    ....    ADR      r0,{pc}-0xc8 ; 0x816fc4
        0x00817090:    6800        .h      LDR      r0,[r0,#0]
        0x00817092:    f8c40055    ..U.    STR      r0,[r4,#0x55]
;;;390        i += 4;
;;;391        alloc_buf[i++] = '\"';
        0x00817096:    f8845059    ..YP    STRB     r5,[r4,#0x59]
        0x0081709a:    49ef        .I      LDR      r1,[pc,#956] ; [0x817458] = 0x2097dc
;;;392        alloc_buf[i++] = ':';
        0x0081709c:    f884605a    ..Z`    STRB     r6,[r4,#0x5a]
;;;393        alloc_buf[i++] = '\"';
        0x008170a0:    f884505b    ..[P    STRB     r5,[r4,#0x5b]
;;;394        memcpy( &alloc_buf[i],tuya_ble_current_para.auth_settings.device_id,DEVICE_ID_LEN);
        0x008170a4:    f104005c    ..\.    ADD      r0,r4,#0x5c
        0x008170a8:    2210        ."      MOVS     r2,#0x10
        0x008170aa:    3113        .1      ADDS     r1,r1,#0x13
        0x008170ac:    f442f6f5    B...    BL       __aeabi_memcpy ; 0x59e9a
;;;395        i += DEVICE_ID_LEN;
;;;396        alloc_buf[i++] = '\"';
        0x008170b0:    f884506c    ..lP    STRB     r5,[r4,#0x6c]
;;;397    
;;;398        alloc_buf[i++] = ',';
        0x008170b4:    f8047f6d    ..m.    STRB     r7,[r4,#0x6d]!
;;;399        alloc_buf[i++] = '\"';
        0x008170b8:    7065        ep      STRB     r5,[r4,#1]
;;;400        memcpy(&alloc_buf[i],"mac",3);
        0x008170ba:    f2af00f0    ....    ADR      r0,{pc}-0xee ; 0x816fcc
        0x008170be:    8800        ..      LDRH     r0,[r0,#0]
        0x008170c0:    8060        `.      STRH     r0,[r4,#2]
        0x008170c2:    2063        c       MOVS     r0,#0x63
        0x008170c4:    7120         q      STRB     r0,[r4,#4]
        0x008170c6:    48e4        .H      LDR      r0,[pc,#912] ; [0x817458] = 0x2097dc
;;;401        i += 3;
;;;402        alloc_buf[i++] = '\"';
        0x008170c8:    7165        eq      STRB     r5,[r4,#5]
;;;403        alloc_buf[i++] = ':';
        0x008170ca:    71a6        .q      STRB     r6,[r4,#6]
        0x008170cc:    3808        .8      SUBS     r0,r0,#8
;;;404        alloc_buf[i++] = '\"';
        0x008170ce:    71e5        .q      STRB     r5,[r4,#7]
;;;405    
;;;406        memcpy( &alloc_buf[i],tuya_ble_current_para.auth_settings.mac_string,MAC_LEN*2);
        0x008170d0:    f8501f51    P.Q.    LDR      r1,[r0,#0x51]!
        0x008170d4:    60a1        .`      STR      r1,[r4,#8]
        0x008170d6:    6841        Ah      LDR      r1,[r0,#4]
        0x008170d8:    60e1        .`      STR      r1,[r4,#0xc]
        0x008170da:    6880        .h      LDR      r0,[r0,#8]
        0x008170dc:    6120         a      STR      r0,[r4,#0x10]
;;;407        i += MAC_LEN*2;
;;;408        alloc_buf[i++] = '\"';
        0x008170de:    7525        %u      STRB     r5,[r4,#0x14]
;;;409    
;;;410        alloc_buf[i++] = ',';
        0x008170e0:    7567        gu      STRB     r7,[r4,#0x15]
        0x008170e2:    a0de        ..      ADR      r0,{pc}+0x37a ; 0x81745c
;;;411        alloc_buf[i++] = '\"';
        0x008170e4:    75a5        .u      STRB     r5,[r4,#0x16]
;;;412        memcpy(&alloc_buf[i],"firmName",8);
        0x008170e6:    6801        .h      LDR      r1,[r0,#0]
        0x008170e8:    f8c41017    ....    STR      r1,[r4,#0x17]
        0x008170ec:    6840        @h      LDR      r0,[r0,#4]
        0x008170ee:    f8c4001b    ....    STR      r0,[r4,#0x1b]
;;;413        i += 8;
;;;414        alloc_buf[i++] = '\"';
        0x008170f2:    77e5        .w      STRB     r5,[r4,#0x1f]
;;;415        alloc_buf[i++] = ':';
        0x008170f4:    f8846020    .. `    STRB     r6,[r4,#0x20]
;;;416        alloc_buf[i++] = '\"';
        0x008170f8:    f8045f21    ..!_    STRB     r5,[r4,#0x21]!
;;;417        memcpy(&alloc_buf[i],TUYA_BLE_APP_BUILD_FIRMNAME_STRING,strlen(TUYA_BLE_APP_BUILD_FIRMNAME_STRING));
        0x008170fc:    1c60        `.      ADDS     r0,r4,#1
        0x008170fe:    2221        !"      MOVS     r2,#0x21
        0x00817100:    a1d9        ..      ADR      r1,{pc}+0x368 ; 0x817468
        0x00817102:    3c8e        .<      SUBS     r4,r4,#0x8e
        0x00817104:    f442f6c9    B...    BL       __aeabi_memcpy ; 0x59e9a
;;;418        i+=strlen(TUYA_BLE_APP_BUILD_FIRMNAME_STRING);
;;;419        alloc_buf[i++] = '\"';
        0x00817108:    f88450b0    ...P    STRB     r5,[r4,#0xb0]
;;;420    
;;;421        alloc_buf[i++] = ',';
        0x0081710c:    f88470b1    ...p    STRB     r7,[r4,#0xb1]
        0x00817110:    a0de        ..      ADR      r0,{pc}+0x37c ; 0x81748c
;;;422        alloc_buf[i++] = '\"';
        0x00817112:    f88450b2    ...P    STRB     r5,[r4,#0xb2]
;;;423        memcpy(&alloc_buf[i],"firmVer",7);
        0x00817116:    6801        .h      LDR      r1,[r0,#0]
        0x00817118:    f8c410b3    ....    STR      r1,[r4,#0xb3]
        0x0081711c:    8880        ..      LDRH     r0,[r0,#4]
        0x0081711e:    f8240fb7    $...    STRH     r0,[r4,#0xb7]!
        0x00817122:    2072        r       MOVS     r0,#0x72
        0x00817124:    70a0        .p      STRB     r0,[r4,#2]
;;;424        i+=7;
;;;425        alloc_buf[i++] = '\"';
        0x00817126:    70e5        .p      STRB     r5,[r4,#3]
;;;426        alloc_buf[i++] = ':';
        0x00817128:    7126        &q      STRB     r6,[r4,#4]
        0x0081712a:    a0da        ..      ADR      r0,{pc}+0x36a ; 0x817494
;;;427        alloc_buf[i++] = '\"';
        0x0081712c:    7165        eq      STRB     r5,[r4,#5]
;;;428        memcpy(&alloc_buf[i],TUYA_BLE_APP_VERSION_STRING,strlen(TUYA_BLE_APP_VERSION_STRING));
        0x0081712e:    8800        ..      LDRH     r0,[r0,#0]
        0x00817130:    80e0        ..      STRH     r0,[r4,#6]
        0x00817132:    2030        0       MOVS     r0,#0x30
        0x00817134:    7220         r      STRB     r0,[r4,#8]
;;;429        i+=strlen(TUYA_BLE_APP_VERSION_STRING);
;;;430        alloc_buf[i++] = '\"';
        0x00817136:    7265        er      STRB     r5,[r4,#9]
;;;431    
;;;432        alloc_buf[i++] = ',';
        0x00817138:    72a7        .r      STRB     r7,[r4,#0xa]
        0x0081713a:    a0d7        ..      ADR      r0,{pc}+0x35e ; 0x817498
;;;433        alloc_buf[i++] = '\"';
        0x0081713c:    72e5        .r      STRB     r5,[r4,#0xb]
;;;434        memcpy(&alloc_buf[i],"prod_test",9);
        0x0081713e:    6801        .h      LDR      r1,[r0,#0]
        0x00817140:    60e1        .`      STR      r1,[r4,#0xc]
        0x00817142:    6840        @h      LDR      r0,[r0,#4]
        0x00817144:    6120         a      STR      r0,[r4,#0x10]
        0x00817146:    2074        t       MOVS     r0,#0x74
        0x00817148:    7520         u      STRB     r0,[r4,#0x14]
;;;435        i+=9;
;;;436        alloc_buf[i++] = '\"';
        0x0081714a:    7565        eu      STRB     r5,[r4,#0x15]
        0x0081714c:    a0d5        ..      ADR      r0,{pc}+0x358 ; 0x8174a4
;;;437        alloc_buf[i++] = ':';
        0x0081714e:    75a6        .u      STRB     r6,[r4,#0x16]
;;;438    
;;;439        memcpy(&alloc_buf[i],"false",5);
        0x00817150:    6800        .h      LDR      r0,[r0,#0]
        0x00817152:    f8c40017    ....    STR      r0,[r4,#0x17]
        0x00817156:    2065        e       MOVS     r0,#0x65
        0x00817158:    76e0        .v      STRB     r0,[r4,#0x1b]
;;;440        i += 5;
;;;441    
;;;442        alloc_buf[i++] = '}';
        0x0081715a:    207d        }       MOVS     r0,#0x7d
        0x0081715c:    7720         w      STRB     r0,[r4,#0x1c]
;;;443        
;;;444        alloc_buf[i++] = 0;
        0x0081715e:    2000        .       MOVS     r0,#0
        0x00817160:    7760        `w      STRB     r0,[r4,#0x1d]
;;;445    
;;;446        tuya_ble_uart_prod_send(TUYA_BLE_AUC_CMD_QUERY_INFO,(uint8_t *)alloc_buf,i-1);
        0x00817162:    3cb7        .<      SUBS     r4,r4,#0xb7
        0x00817164:    22d4        ."      MOVS     r2,#0xd4
        0x00817166:    4621        !F      MOV      r1,r4
        0x00817168:    2004        .       MOVS     r0,#4
        0x0081716a:    f7fffc42    ..B.    BL       tuya_ble_uart_prod_send ; 0x8169f2
;;;447        
;;;448        TUYA_BLE_LOG_DEBUG("AUC_CMD_QUERY_INFO RESPONSE!");
        0x0081716e:    a0cf        ..      ADR      r0,{pc}+0x33e ; 0x8174ac
        0x00817170:    f003fd1b    ....    BL       get_args ; 0x81abaa
        0x00817174:    4602        .F      MOV      r2,r0
        0x00817176:    49d8        .I      LDR      r1,[pc,#864] ; [0x8174d8] = 0x8803fa4
        0x00817178:    4640        @F      MOV      r0,r8
        0x0081717a:    f7f0dc70    ..p.    BL       log_buffer ; 0x7a5e
;;;449        
;;;450        tuya_ble_free(alloc_buf);
        0x0081717e:    4620         F      MOV      r0,r4
        0x00817180:    e8bd41f0    ...A    POP      {r4-r8,lr}
        0x00817184:    f7feb90f    ....    B        tuya_ble_free ; 0x8153a6
        0x00817188:    a0d4        ..      ADR      r0,{pc}+0x354 ; 0x8174dc
        0x0081718a:    f003fd0e    ....    BL       get_args ; 0x81abaa
        0x0081718e:    4602        .F      MOV      r2,r0
        0x00817190:    4640        @F      MOV      r0,r8
        0x00817192:    e8bd41f0    ...A    POP      {r4-r8,lr}
        0x00817196:    49d0        .I      LDR      r1,[pc,#832] ; [0x8174d8] = 0x8803fa4
        0x00817198:    3938        89      SUBS     r1,r1,#0x38
        0x0081719a:    f7f09c60    ..`.    B        log_buffer ; 0x7a5e
;;;451    }
        0x0081719e:    e44f        O.      B        0x816a40 ; tuya_ble_uart_prod_send + 78
    tuya_ble_auc_write_hid
;;;452    
;;;453    
;;;454    static void tuya_ble_auc_reset(uint8_t *para, uint16_t len)
;;;455    {
;;;456        char buf[] = "{\"ret\":true}";
;;;457        if(tuya_ble_production_test_flag != 1)
;;;458        {
;;;459            return;
;;;460        }  
;;;461        TUYA_BLE_LOG_DEBUG("auc RESET!");   
;;;462        
;;;463        tuya_ble_uart_prod_send(TUYA_BLE_AUC_CMD_RESET,(uint8_t *)buf,strlen(buf));
;;;464        
;;;465        tuya_ble_device_delay_ms(1000);
;;;466        
;;;467        tuya_ble_device_reset();
;;;468        
;;;469    }
;;;470    
;;;471    
;;;472    static  void tuya_ble_auc_write_hid(uint8_t *para, uint16_t len)
;;;473    {
        0x008171a0:    b570        p.      PUSH     {r4-r6,lr}
        0x008171a2:    b08e        ..      SUB      sp,sp,#0x38
        0x008171a4:    460d        .F      MOV      r5,r1
        0x008171a6:    4604        .F      MOV      r4,r0
;;;474        uint8_t hid[19];
;;;475        char true_buf[] = "{\"ret\":true}";
        0x008171a8:    f2af20a8    ...     ADR      r0,{pc}-0x2a4 ; 0x816f04
        0x008171ac:    c80f        ..      LDM      r0,{r0-r3}
        0x008171ae:    ae04        ..      ADD      r6,sp,#0x10
        0x008171b0:    e886000f    ....    STM      r6,{r0-r3}
;;;476        char false_buf[] = "{\"ret\":false}";
        0x008171b4:    f2af20a4    ...     ADR      r0,{pc}-0x2a0 ; 0x816f14
        0x008171b8:    c80f        ..      LDM      r0,{r0-r3}
        0x008171ba:    e88d000f    ....    STM      sp,{r0-r3}
;;;477        
;;;478        if(tuya_ble_production_test_flag != 1)
        0x008171be:    48d5        .H      LDR      r0,[pc,#852] ; [0x817514] = 0x209a94
        0x008171c0:    7800        .x      LDRB     r0,[r0,#0]
        0x008171c2:    2801        .(      CMP      r0,#1
        0x008171c4:    d14c        L.      BNE      0x817260 ; tuya_ble_auc_write_hid + 192
;;;479        {
;;;480            return;
;;;481        }
;;;482        
;;;483        TUYA_BLE_LOG_DEBUG("AUC WRITE AUTH HID!");    
        0x008171c6:    a0d4        ..      ADR      r0,{pc}+0x352 ; 0x817518
        0x008171c8:    f003fcef    ....    BL       get_args ; 0x81abaa
        0x008171cc:    49c2        .I      LDR      r1,[pc,#776] ; [0x8174d8] = 0x8803fa4
        0x008171ce:    4edb        .N      LDR      r6,[pc,#876] ; [0x81753c] = 0x21103002
        0x008171d0:    4602        .F      MOV      r2,r0
        0x008171d2:    3148        H1      ADDS     r1,r1,#0x48
        0x008171d4:    4630        0F      MOV      r0,r6
        0x008171d6:    f7f0dc42    ..B.    BL       log_buffer ; 0x7a5e
;;;484        
;;;485        if(len<27)
        0x008171da:    2d1b        .-      CMP      r5,#0x1b
        0x008171dc:    d20e        ..      BCS      0x8171fc ; tuya_ble_auc_write_hid + 92
;;;486        {
;;;487            tuya_ble_uart_prod_send(TUYA_BLE_AUC_CMD_WRITE_HID,(uint8_t *)false_buf,strlen(false_buf));
        0x008171de:    4668        hF      MOV      r0,sp
        0x008171e0:    f442f63c    B.<.    BL       strlen ; 0x59e5c
        0x008171e4:    b2c2        ..      UXTB     r2,r0
        0x008171e6:    4669        iF      MOV      r1,sp
        0x008171e8:    2007        .       MOVS     r0,#7
        0x008171ea:    f7fffc02    ....    BL       tuya_ble_uart_prod_send ; 0x8169f2
;;;488            TUYA_BLE_LOG_ERROR("WRITE AUTH HID para length error!"); 
        0x008171ee:    a0d4        ..      ADR      r0,{pc}+0x352 ; 0x817540
        0x008171f0:    f003fcdb    ....    BL       get_args ; 0x81abaa
        0x008171f4:    49b8        .I      LDR      r1,[pc,#736] ; [0x8174d8] = 0x8803fa4
        0x008171f6:    4602        .F      MOV      r2,r0
        0x008171f8:    316c        l1      ADDS     r1,r1,#0x6c
;;;489            return;
        0x008171fa:    e02e        ..      B        0x81725a ; tuya_ble_auc_write_hid + 186
;;;490        }
;;;491        
;;;492        if(memcmp(&para[2],"hid",3)!=0)
        0x008171fc:    2203        ."      MOVS     r2,#3
        0x008171fe:    f2af1194    ....    ADR      r1,{pc}-0x192 ; 0x81706c
        0x00817202:    1ca0        ..      ADDS     r0,r4,#2
        0x00817204:    f442f5fe    B...    BL       memcmp ; 0x59e04
        0x00817208:    b170        p.      CBZ      r0,0x817228 ; tuya_ble_auc_write_hid + 136
;;;493        {
;;;494            tuya_ble_uart_prod_send(TUYA_BLE_AUC_CMD_WRITE_HID,(uint8_t *)false_buf,strlen(false_buf));
        0x0081720a:    4668        hF      MOV      r0,sp
        0x0081720c:    f442f626    B.&.    BL       strlen ; 0x59e5c
        0x00817210:    b2c2        ..      UXTB     r2,r0
        0x00817212:    4669        iF      MOV      r1,sp
        0x00817214:    2007        .       MOVS     r0,#7
        0x00817216:    f7fffbec    ....    BL       tuya_ble_uart_prod_send ; 0x8169f2
;;;495            TUYA_BLE_LOG_ERROR("WRITE AUTH HID para error!"); 
        0x0081721a:    a0d5        ..      ADR      r0,{pc}+0x356 ; 0x817570
        0x0081721c:    f003fcc5    ....    BL       get_args ; 0x81abaa
        0x00817220:    49ad        .I      LDR      r1,[pc,#692] ; [0x8174d8] = 0x8803fa4
        0x00817222:    4602        .F      MOV      r2,r0
        0x00817224:    319c        .1      ADDS     r1,r1,#0x9c
;;;496            return;
        0x00817226:    e018        ..      B        0x81725a ; tuya_ble_auc_write_hid + 186
;;;497        }
;;;498               
;;;499    	memcpy(hid,&para[8],H_ID_LEN);
        0x00817228:    2213        ."      MOVS     r2,#0x13
        0x0081722a:    f1040108    ....    ADD      r1,r4,#8
        0x0081722e:    a808        ..      ADD      r0,sp,#0x20
        0x00817230:    f442f633    B.3.    BL       __aeabi_memcpy ; 0x59e9a
;;;500    	
;;;501        if(tuya_ble_storage_write_hid(hid,H_ID_LEN)==TUYA_BLE_SUCCESS)
        0x00817234:    2113        .!      MOVS     r1,#0x13
        0x00817236:    a808        ..      ADD      r0,sp,#0x20
        0x00817238:    f7fefe24    ..$.    BL       tuya_ble_storage_write_hid ; 0x815e84
        0x0081723c:    b190        ..      CBZ      r0,0x817264 ; tuya_ble_auc_write_hid + 196
        0x0081723e:    4668        hF      MOV      r0,sp
        0x00817240:    f442f60c    B...    BL       strlen ; 0x59e5c
        0x00817244:    b2c2        ..      UXTB     r2,r0
        0x00817246:    4669        iF      MOV      r1,sp
        0x00817248:    2007        .       MOVS     r0,#7
        0x0081724a:    f7fffbd2    ....    BL       tuya_ble_uart_prod_send ; 0x8169f2
        0x0081724e:    a0d3        ..      ADR      r0,{pc}+0x34e ; 0x81759c
        0x00817250:    f003fcab    ....    BL       get_args ; 0x81abaa
        0x00817254:    49a0        .I      LDR      r1,[pc,#640] ; [0x8174d8] = 0x8803fa4
        0x00817256:    4602        .F      MOV      r2,r0
        0x00817258:    31f0        .1      ADDS     r1,r1,#0xf0
        0x0081725a:    4630        0F      MOV      r0,r6
        0x0081725c:    f7f0dbff    ....    BL       log_buffer ; 0x7a5e
        0x00817260:    b00e        ..      ADD      sp,sp,#0x38
        0x00817262:    bd70        p.      POP      {r4-r6,pc}
;;;502        {
;;;503            tuya_ble_uart_prod_send(TUYA_BLE_AUC_CMD_WRITE_HID,(uint8_t *)true_buf,strlen(true_buf));
        0x00817264:    a804        ..      ADD      r0,sp,#0x10
        0x00817266:    f442f5f9    B...    BL       strlen ; 0x59e5c
        0x0081726a:    b2c2        ..      UXTB     r2,r0
        0x0081726c:    a904        ..      ADD      r1,sp,#0x10
        0x0081726e:    2007        .       MOVS     r0,#7
        0x00817270:    f7fffbbf    ....    BL       tuya_ble_uart_prod_send ; 0x8169f2
;;;504            TUYA_BLE_LOG_DEBUG("WRITE AUTH HID successed."); 
        0x00817274:    a0d3        ..      ADR      r0,{pc}+0x350 ; 0x8175c4
        0x00817276:    f003fc98    ....    BL       get_args ; 0x81abaa
        0x0081727a:    4997        .I      LDR      r1,[pc,#604] ; [0x8174d8] = 0x8803fa4
        0x0081727c:    4602        .F      MOV      r2,r0
        0x0081727e:    31c8        .1      ADDS     r1,r1,#0xc8
        0x00817280:    e7eb        ..      B        0x81725a ; tuya_ble_auc_write_hid + 186
    tuya_ble_auc_query_fingerprint
;;;505        }
;;;506        else
;;;507        {
;;;508            tuya_ble_uart_prod_send(TUYA_BLE_AUC_CMD_WRITE_HID,(uint8_t *)false_buf,strlen(false_buf));
;;;509            TUYA_BLE_LOG_ERROR("WRITE AUTH HID failed."); 
;;;510        }
;;;511        
;;;512        
;;;513        
;;;514    }
;;;515    
;;;516    
;;;517    static void tuya_ble_auc_query_fingerprint(uint8_t *para, uint16_t len)
;;;518    {   
        0x00817282:    b570        p.      PUSH     {r4-r6,lr}
        0x00817284:    48a3        .H      LDR      r0,[pc,#652] ; [0x817514] = 0x209a94
        0x00817286:    7800        .x      LDRB     r0,[r0,#0]
        0x00817288:    2801        .(      CMP      r0,#1
        0x0081728a:    d132        2.      BNE      0x8172f2 ; tuya_ble_auc_query_fingerprint + 112
;;;519        int32_t length = 0;
;;;520        uint8_t *alloc_buf = NULL;
;;;521        
;;;522        if(tuya_ble_production_test_flag != 1)
;;;523        {
;;;524            return;
;;;525        }    
;;;526        
;;;527        TUYA_BLE_LOG_DEBUG("AUC QUERY FINGERPRINT!");
        0x0081728c:    a0d7        ..      ADR      r0,{pc}+0x360 ; 0x8175ec
        0x0081728e:    f003fc8c    ....    BL       get_args ; 0x81abaa
        0x00817292:    4daa        .M      LDR      r5,[pc,#680] ; [0x81753c] = 0x21103002
        0x00817294:    4602        .F      MOV      r2,r0
        0x00817296:    49df        .I      LDR      r1,[pc,#892] ; [0x817614] = 0x88040bc
        0x00817298:    4628        (F      MOV      r0,r5
        0x0081729a:    f7f0dbe0    ....    BL       log_buffer ; 0x7a5e
;;;528        
;;;529        alloc_buf = (uint8_t *)tuya_ble_malloc(256);
        0x0081729e:    f44f7680    O..v    MOV      r6,#0x100
        0x008172a2:    4630        0F      MOV      r0,r6
        0x008172a4:    f7fef874    ..t.    BL       tuya_ble_malloc ; 0x815390
        0x008172a8:    0004        ..      MOVS     r4,r0
;;;530        
;;;531        if(alloc_buf)
        0x008172aa:    d017        ..      BEQ      0x8172dc ; tuya_ble_auc_query_fingerprint + 90
;;;532        {
;;;533            memset(alloc_buf,0,256);  
        0x008172ac:    4631        1F      MOV      r1,r6
        0x008172ae:    f442f6b5    B...    BL       __aeabi_memclr ; 0x5a01c
;;;534        }   
;;;535        else
;;;536        {
;;;537            TUYA_BLE_LOG_ERROR("AUC QUERY INFO alloc buf malloc failed."); 
;;;538            return;
;;;539        } 
;;;540            
;;;541        length = sprintf((char *)alloc_buf,"{\"ret\":true,\"firmName\":\"%s\",\"firmVer\":\"%s\"}",TUYA_BLE_APP_BUILD_FIRMNAME_STRING,TUYA_BLE_APP_VERSION_STRING);
        0x008172b2:    a378        x.      ADR      r3,{pc}+0x1e2 ; 0x817494
        0x008172b4:    a26c        l.      ADR      r2,{pc}+0x1b4 ; 0x817468
        0x008172b6:    a1d8        ..      ADR      r1,{pc}+0x362 ; 0x817618
        0x008172b8:    4620         F      MOV      r0,r4
        0x008172ba:    f003ff39    ..9.    BL       __2sprintf ; 0x81b130
;;;542        
;;;543        tuya_ble_uart_prod_send(TUYA_BLE_AUC_CMD_QUERY_FINGERPRINT,alloc_buf,length);
        0x008172be:    b2c2        ..      UXTB     r2,r0
        0x008172c0:    4621        !F      MOV      r1,r4
        0x008172c2:    2006        .       MOVS     r0,#6
        0x008172c4:    f7fffb95    ....    BL       tuya_ble_uart_prod_send ; 0x8169f2
;;;544        
;;;545        tuya_ble_free(alloc_buf);
        0x008172c8:    4620         F      MOV      r0,r4
        0x008172ca:    f7fef86c    ..l.    BL       tuya_ble_free ; 0x8153a6
;;;546        
;;;547        TUYA_BLE_LOG_DEBUG("AUC_CMD_QUERY_FINGERPRINT responsed."); 
        0x008172ce:    a0dd        ..      ADR      r0,{pc}+0x376 ; 0x817644
        0x008172d0:    f003fc6b    ..k.    BL       get_args ; 0x81abaa
        0x008172d4:    49cf        .I      LDR      r1,[pc,#828] ; [0x817614] = 0x88040bc
        0x008172d6:    4602        .F      MOV      r2,r0
        0x008172d8:    3160        `1      ADDS     r1,r1,#0x60
        0x008172da:    e005        ..      B        0x8172e8 ; tuya_ble_auc_query_fingerprint + 102
        0x008172dc:    a07f        ..      ADR      r0,{pc}+0x200 ; 0x8174dc
        0x008172de:    f003fc64    ..d.    BL       get_args ; 0x81abaa
        0x008172e2:    49cc        .I      LDR      r1,[pc,#816] ; [0x817614] = 0x88040bc
        0x008172e4:    4602        .F      MOV      r2,r0
        0x008172e6:    3128        (1      ADDS     r1,r1,#0x28
        0x008172e8:    4628        (F      MOV      r0,r5
        0x008172ea:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x008172ee:    f7f09bb6    ....    B        log_buffer ; 0x7a5e
;;;548        
;;;549    }
        0x008172f2:    bd70        p.      POP      {r4-r6,pc}
    tuya_ble_auc_rssi_test
;;;550    
;;;551    
;;;552    
;;;553    
;;;554    static void tuya_ble_auc_rssi_test(uint8_t *para, uint16_t len)
;;;555    {
        0x008172f4:    b530        0.      PUSH     {r4,r5,lr}
        0x008172f6:    b089        ..      SUB      sp,sp,#0x24
        0x008172f8:    2000        .       MOVS     r0,#0
        0x008172fa:    f88d0020    .. .    STRB     r0,[sp,#0x20]
        0x008172fe:    4885        .H      LDR      r0,[pc,#532] ; [0x817514] = 0x209a94
        0x00817300:    7800        .x      LDRB     r0,[r0,#0]
        0x00817302:    2801        .(      CMP      r0,#1
;;; sample\tuya_ble_sdk\app\product_test\tuya_ble_app_production_test.c (555)
        0x00817304:    d139        9.      BNE      0x81737a ; tuya_ble_auc_rssi_test + 134
;;;556        uint8_t length = 0;
;;;557        int8_t rssi = 0;
;;;558        static const char false_buf[] = "{\"ret\":false}";
;;;559        char true_buf[30];
;;;560        
;;;561        if(tuya_ble_production_test_flag != 1)
;;;562        {
;;;563            return;
;;;564        }     
;;;565        
;;;566        TUYA_BLE_LOG_DEBUG("AUC RSSI TEST!");   
        0x00817306:    a0dc        ..      ADR      r0,{pc}+0x372 ; 0x817678
        0x00817308:    f003fc4f    ..O.    BL       get_args ; 0x81abaa
        0x0081730c:    49c1        .I      LDR      r1,[pc,#772] ; [0x817614] = 0x88040bc
        0x0081730e:    4d8b        .M      LDR      r5,[pc,#556] ; [0x81753c] = 0x21103002
        0x00817310:    4602        .F      MOV      r2,r0
        0x00817312:    3194        .1      ADDS     r1,r1,#0x94
        0x00817314:    4628        (F      MOV      r0,r5
        0x00817316:    f7f0dba2    ....    BL       log_buffer ; 0x7a5e
;;;567        
;;;568        memset(true_buf,0,sizeof(true_buf));  
        0x0081731a:    2120         !      MOVS     r1,#0x20
        0x0081731c:    4668        hF      MOV      r0,sp
        0x0081731e:    f442f69f    B...    BL       __aeabi_memclr4 ; 0x5a060
;;;569        
;;;570        tuya_ble_prod_beacon_scan_stop();
        0x00817322:    f7fafa07    ....    BL       tuya_ble_prod_beacon_scan_stop ; 0x811734
;;;571        
;;;572        if(tuya_ble_prod_beacon_get_rssi_avg(&rssi) != TUYA_BLE_SUCCESS)
        0x00817326:    a808        ..      ADD      r0,sp,#0x20
        0x00817328:    f7fafa06    ....    BL       tuya_ble_prod_beacon_get_rssi_avg ; 0x811738
        0x0081732c:    b170        p.      CBZ      r0,0x81734c ; tuya_ble_auc_rssi_test + 88
;;;573        {       
;;;574            TUYA_BLE_LOG_ERROR("auc get rssi failed.");
        0x0081732e:    a0da        ..      ADR      r0,{pc}+0x36a ; 0x817698
        0x00817330:    f003fc3b    ..;.    BL       get_args ; 0x81abaa
        0x00817334:    49b7        .I      LDR      r1,[pc,#732] ; [0x817614] = 0x88040bc
        0x00817336:    4602        .F      MOV      r2,r0
        0x00817338:    31b4        .1      ADDS     r1,r1,#0xb4
        0x0081733a:    4628        (F      MOV      r0,r5
        0x0081733c:    f7f0db8f    ....    BL       log_buffer ; 0x7a5e
;;;575            tuya_ble_uart_prod_send(TUYA_BLE_AUC_CMD_RSSI_TEST,(uint8_t *)false_buf,strlen(false_buf));
        0x00817340:    48de        .H      LDR      r0,[pc,#888] ; [0x8176bc] = 0x81c35a
        0x00817342:    f442f58b    B...    BL       strlen ; 0x59e5c
        0x00817346:    b2c2        ..      UXTB     r2,r0
        0x00817348:    49dc        .I      LDR      r1,[pc,#880] ; [0x8176bc] = 0x81c35a
        0x0081734a:    e013        ..      B        0x817374 ; tuya_ble_auc_rssi_test + 128
;;;576        }
;;;577        else
;;;578        {        
;;;579            length = sprintf((char *)true_buf,"{\"ret\":true,\"rssi\":\"%d\"}",rssi);
        0x0081734c:    f99d2020    ..      LDRSB    r2,[sp,#0x20]
        0x00817350:    a1db        ..      ADR      r1,{pc}+0x370 ; 0x8176c0
        0x00817352:    4668        hF      MOV      r0,sp
        0x00817354:    f003feec    ....    BL       __2sprintf ; 0x81b130
        0x00817358:    b2c4        ..      UXTB     r4,r0
;;;580            TUYA_BLE_LOG_DEBUG("auc get rssi = %d",rssi);
        0x0081735a:    a0e0        ..      ADR      r0,{pc}+0x382 ; 0x8176dc
        0x0081735c:    f003fc25    ..%.    BL       get_args ; 0x81abaa
        0x00817360:    49ac        .I      LDR      r1,[pc,#688] ; [0x817614] = 0x88040bc
        0x00817362:    4602        .F      MOV      r2,r0
        0x00817364:    f99d3020    .. 0    LDRSB    r3,[sp,#0x20]
        0x00817368:    31d8        .1      ADDS     r1,r1,#0xd8
        0x0081736a:    4628        (F      MOV      r0,r5
        0x0081736c:    f7f0db77    ..w.    BL       log_buffer ; 0x7a5e
;;;581            tuya_ble_uart_prod_send(TUYA_BLE_AUC_CMD_RSSI_TEST,(uint8_t *)true_buf,length);
        0x00817370:    4622        "F      MOV      r2,r4
        0x00817372:    4669        iF      MOV      r1,sp
        0x00817374:    2008        .       MOVS     r0,#8
        0x00817376:    f7fffb3c    ..<.    BL       tuya_ble_uart_prod_send ; 0x8169f2
;;;582        }
;;;583    }
        0x0081737a:    b009        ..      ADD      sp,sp,#0x24
        0x0081737c:    bd30        0.      POP      {r4,r5,pc}
;;;584    
;;;585    
;;;586    __TUYA_BLE_WEAK void tuya_ble_custom_app_production_test_process(uint8_t channel,uint8_t *p_in_data,uint16_t in_len)
;;;587    {
;;;588        uint16_t cmd = 0;
;;;589        uint8_t *data_buffer = NULL;
;;;590        uint16_t data_len = ((p_in_data[4]<<8) + p_in_data[5]);
;;;591           
;;;592        if((p_in_data[6] != 3)||(data_len<3))
;;;593            return;
;;;594        
;;;595        cmd = (p_in_data[7]<<8) + p_in_data[8];
;;;596        data_len -= 3;
;;;597        if(data_len>0)
;;;598        {
;;;599            data_buffer = p_in_data+9;
;;;600        }
;;;601        
;;;602        switch(cmd)
;;;603        {   
;;;604    
;;;605            
;;;606            default:
;;;607                break;
;;;608        };    
;;;609        
;;;610        
;;;611    }
        0x0081737e:    4770        pG      BX       lr
    tuya_ble_app_production_test_process
;;;612    
;;;613    extern void tuya_ble_connect_monitor_timer_stop(void);
;;;614    void tuya_ble_app_production_test_process(uint8_t channel,uint8_t *p_in_data,uint16_t in_len)
;;;615    {
        0x00817380:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x00817384:    0006        ..      MOVS     r6,r0
        0x00817386:    460d        .F      MOV      r5,r1
        0x00817388:    78cc        .x      LDRB     r4,[r1,#3]
        0x0081738a:    7948        Hy      LDRB     r0,[r1,#5]
        0x0081738c:    7909        .y      LDRB     r1,[r1,#4]
;;; sample\tuya_ble_sdk\app\product_test\tuya_ble_app_production_test.c (615)
        0x0081738e:    4691        .F      MOV      r9,r2
        0x00817390:    eb002001    ...     ADD      r0,r0,r1,LSL #8
        0x00817394:    fa1ff880    ....    UXTH     r8,r0
        0x00817398:    f1050706    ....    ADD      r7,r5,#6
        0x0081739c:    d01b        ..      BEQ      0x8173d6 ; tuya_ble_app_production_test_process + 86
;;;616        uint8_t cmd = p_in_data[3];
;;;617        uint16_t data_len = (p_in_data[4]<<8) + p_in_data[5];
;;;618        uint8_t *data_buffer = p_in_data+6;
;;;619       /* 
;;;620        if(tuya_ble_current_para.sys_settings.factory_test_flag==0) //
;;;621        {
;;;622            TUYA_BLE_LOG_WARNING("The production interface is closed!");
;;;623            return;
;;;624        }
;;;625        */
;;;626        if((channel!=0)&&(cmd!=TUYA_BLE_AUC_CMD_EXTEND))
        0x0081739e:    2cf0        .,      CMP      r4,#0xf0
        0x008173a0:    d00a        ..      BEQ      0x8173b8 ; tuya_ble_app_production_test_process + 56
;;;627        {
;;;628            TUYA_BLE_LOG_ERROR("The authorization instructions are not supported in non-serial channels!");
        0x008173a2:    48d6        .H      LDR      r0,[pc,#856] ; [0x8176fc] = 0x81d904
        0x008173a4:    f003fc01    ....    BL       get_args ; 0x81abaa
        0x008173a8:    e8bd47f0    ...G    POP      {r4-r10,lr}
        0x008173ac:    4999        .I      LDR      r1,[pc,#612] ; [0x817614] = 0x88040bc
        0x008173ae:    4602        .F      MOV      r2,r0
        0x008173b0:    31f8        .1      ADDS     r1,r1,#0xf8
        0x008173b2:    4862        bH      LDR      r0,[pc,#392] ; [0x81753c] = 0x21103002
        0x008173b4:    f7f09b53    ..S.    B        log_buffer ; 0x7a5e
;;;629            return;
;;;630        }
;;;631        if((channel==1)&&(cmd==TUYA_BLE_AUC_CMD_EXTEND))
        0x008173b8:    2e01        ..      CMP      r6,#1
        0x008173ba:    d10c        ..      BNE      0x8173d6 ; tuya_ble_app_production_test_process + 86
        0x008173bc:    2cf0        .,      CMP      r4,#0xf0
        0x008173be:    d10a        ..      BNE      0x8173d6 ; tuya_ble_app_production_test_process + 86
;;;632        {
;;;633            if(tuya_ble_production_test_with_ble_flag==0)
        0x008173c0:    4854        TH      LDR      r0,[pc,#336] ; [0x817514] = 0x209a94
        0x008173c2:    7841        Ax      LDRB     r1,[r0,#1]
        0x008173c4:    b939        9.      CBNZ     r1,0x8173d6 ; tuya_ble_app_production_test_process + 86
;;;634            {
;;;635                tuya_ble_production_test_with_ble_flag = 1;
        0x008173c6:    2101        .!      MOVS     r1,#1
        0x008173c8:    7041        Ap      STRB     r1,[r0,#1]
;;;636                if(tuya_ble_connect_status_get()!=BONDING_CONN)
        0x008173ca:    f7fdfe2b    ..+.    BL       tuya_ble_connect_status_get ; 0x815024
        0x008173ce:    2803        .(      CMP      r0,#3
        0x008173d0:    d001        ..      BEQ      0x8173d6 ; tuya_ble_app_production_test_process + 86
;;;637                {
;;;638                    tuya_ble_connect_monitor_timer_stop();
        0x008173d2:    f7faff0c    ....    BL       tuya_ble_connect_monitor_timer_stop ; 0x8121ee
;;;639                }
;;;640            }
;;;641            
;;;642        }
;;;643        switch(cmd)
        0x008173d6:    2c05        .,      CMP      r4,#5
        0x008173d8:    d03b        ;.      BEQ      0x817452 ; tuya_ble_app_production_test_process + 210
        0x008173da:    dc06        ..      BGT      0x8173ea ; tuya_ble_app_production_test_process + 106
        0x008173dc:    2c05        .,      CMP      r4,#5
        0x008173de:    d219        ..      BCS      0x817414 ; tuya_ble_app_production_test_process + 148
        0x008173e0:    e8dff004    ....    TBB      [pc,r4]
    $d
        0x008173e4:    2c26201a    . &,    DCD    740696090
        0x008173e8:    0032        2.      DCW    50
    $t
        0x008173ea:    2c08        .,      CMP      r4,#8
        0x008173ec:    d032        2.      BEQ      0x817454 ; tuya_ble_app_production_test_process + 212
        0x008173ee:    dc08        ..      BGT      0x817402 ; tuya_ble_app_production_test_process + 130
        0x008173f0:    2c06        .,      CMP      r4,#6
        0x008173f2:    d030        0.      BEQ      0x817456 ; tuya_ble_app_production_test_process + 214
        0x008173f4:    2c07        .,      CMP      r4,#7
        0x008173f6:    d10d        ..      BNE      0x817414 ; tuya_ble_app_production_test_process + 148
        0x008173f8:    4641        AF      MOV      r1,r8
        0x008173fa:    4638        8F      MOV      r0,r7
        0x008173fc:    e8bd47f0    ...G    POP      {r4-r10,lr}
        0x00817400:    e6ce        ..      B        tuya_ble_auc_write_hid ; 0x8171a0
        0x00817402:    2c09        .,      CMP      r4,#9
        0x00817404:    d006        ..      BEQ      0x817414 ; tuya_ble_app_production_test_process + 148
        0x00817406:    2cf0        .,      CMP      r4,#0xf0
        0x00817408:    d104        ..      BNE      0x817414 ; tuya_ble_app_production_test_process + 148
;;;644        {
;;;645            case TUYA_BLE_AUC_CMD_EXTEND:
;;;646                tuya_ble_custom_app_production_test_process(channel,p_in_data,in_len);
        0x0081740a:    464a        JF      MOV      r2,r9
        0x0081740c:    4629        )F      MOV      r1,r5
        0x0081740e:    4630        0F      MOV      r0,r6
        0x00817410:    f7faf998    ....    BL       tuya_ble_custom_app_production_test_process ; 0x811744
        0x00817414:    e8bd87f0    ....    POP      {r4-r10,pc}
;;;647                break;
;;;648            case TUYA_BLE_AUC_CMD_ENTER:
;;;649                tuya_ble_auc_enter(data_buffer,data_len);
        0x00817418:    4641        AF      MOV      r1,r8
        0x0081741a:    4638        8F      MOV      r0,r7
        0x0081741c:    e8bd47f0    ...G    POP      {r4-r10,lr}
        0x00817420:    f7ffbb22    ..".    B        tuya_ble_auc_enter ; 0x816a68
;;;650                break;
;;;651            case TUYA_BLE_AUC_CMD_QUERY_HID:
;;;652                tuya_ble_auc_query_hid(data_buffer,data_len);
        0x00817424:    4641        AF      MOV      r1,r8
        0x00817426:    4638        8F      MOV      r0,r7
        0x00817428:    e8bd47f0    ...G    POP      {r4-r10,lr}
        0x0081742c:    f7ffbb55    ..U.    B        tuya_ble_auc_query_hid ; 0x816ada
;;;653                break;
;;;654            case TUYA_BLE_AUC_CMD_GPIO_TEST:
;;;655                tuya_ble_auc_gpio_test(data_buffer,data_len);
        0x00817430:    4641        AF      MOV      r1,r8
        0x00817432:    4638        8F      MOV      r0,r7
        0x00817434:    e8bd47f0    ...G    POP      {r4-r10,lr}
        0x00817438:    f7ffbbae    ....    B        tuya_ble_auc_gpio_test ; 0x816b98
;;;656                break;
;;;657            case TUYA_BLE_AUC_CMD_WRITE_AUTH_INFO:
;;;658                tuya_ble_auc_write_auth_info(data_buffer,data_len);
        0x0081743c:    4641        AF      MOV      r1,r8
        0x0081743e:    4638        8F      MOV      r0,r7
        0x00817440:    e8bd47f0    ...G    POP      {r4-r10,lr}
        0x00817444:    f7ffbbe6    ....    B        tuya_ble_auc_write_auth_info ; 0x816c14
;;;659                break;
;;;660            case TUYA_BLE_AUC_CMD_QUERY_INFO:
;;;661                tuya_ble_auc_query_info(data_buffer,data_len);
        0x00817448:    4641        AF      MOV      r1,r8
        0x0081744a:    4638        8F      MOV      r0,r7
        0x0081744c:    e8bd47f0    ...G    POP      {r4-r10,lr}
        0x00817450:    e46e        n.      B        tuya_ble_auc_query_info ; 0x816d30
        0x00817452:    e155        U.      B        0x817700 ; tuya_ble_app_production_test_process + 896
        0x00817454:    e15f        _.      B        0x817716 ; tuya_ble_app_production_test_process + 918
        0x00817456:    e159        Y.      B        0x81770c ; tuya_ble_app_production_test_process + 908
    $d
        0x00817458:    002097dc    .. .    DCD    2136028
        0x0081745c:    6d726966    firm    DCD    1836214630
        0x00817460:    656d614e    Name    DCD    1701667150
        0x00817464:    00000000    ....    DCD    0
        0x00817468:    61797574    tuya    DCD    1635349876
        0x0081746c:    656c625f    _ble    DCD    1701601887
        0x00817470:    6b64735f    _sdk    DCD    1801745247
        0x00817474:    6d65445f    _Dem    DCD    1835353183
        0x00817478:    72505f6f    o_Pr    DCD    1917869935
        0x0081747c:    63656a6f    ojec    DCD    1667590767
        0x00817480:    74725f74    t_rt    DCD    1953652596
        0x00817484:    3637386c    l876    DCD    909588588
        0x00817488:    00000032    2...    DCD    50
        0x0081748c:    6d726966    firm    DCD    1836214630
        0x00817490:    00726556    Ver.    DCD    7497046
        0x00817494:    00302e31    1.0.    DCD    3157553
        0x00817498:    646f7270    prod    DCD    1685025392
        0x0081749c:    7365745f    _tes    DCD    1936028767
        0x008174a0:    00000074    t...    DCD    116
        0x008174a4:    736c6166    fals    DCD    1936482662
        0x008174a8:    00000065    e...    DCD    101
        0x008174ac:    205d445b    [D]     DCD    542983259
        0x008174b0:    41595554    TUYA    DCD    1096373588
        0x008174b4:    454c425f    _BLE    DCD    1162625631
        0x008174b8:    5541203a    : AU    DCD    1430331450
        0x008174bc:    4d435f43    C_CM    DCD    1296260931
        0x008174c0:    55515f44    D_QU    DCD    1431396164
        0x008174c4:    5f595245    ERY_    DCD    1599689285
        0x008174c8:    4f464e49    INFO    DCD    1330007625
        0x008174cc:    53455220     RES    DCD    1397051936
        0x008174d0:    534e4f50    PONS    DCD    1397641040
        0x008174d4:    00002145    E!..    DCD    8517
        0x008174d8:    08803fa4    .?..    DCD    142622628
        0x008174dc:    205d455b    [E]     DCD    542983515
        0x008174e0:    41595554    TUYA    DCD    1096373588
        0x008174e4:    454c425f    _BLE    DCD    1162625631
        0x008174e8:    5541203a    : AU    DCD    1430331450
        0x008174ec:    55512043    C QU    DCD    1431380035
        0x008174f0:    20595245    ERY     DCD    542724677
        0x008174f4:    4f464e49    INFO    DCD    1330007625
        0x008174f8:    6c6c6120     all    DCD    1819042080
        0x008174fc:    6220636f    oc b    DCD    1646289775
        0x00817500:    6d206675    uf m    DCD    1830839925
        0x00817504:    6f6c6c61    allo    DCD    1869376609
        0x00817508:    61662063    c fa    DCD    1634082915
        0x0081750c:    64656c69    iled    DCD    1684368489
        0x00817510:    0000002e    ....    DCD    46
        0x00817514:    00209a94    .. .    DCD    2136724
        0x00817518:    205d445b    [D]     DCD    542983259
        0x0081751c:    41595554    TUYA    DCD    1096373588
        0x00817520:    454c425f    _BLE    DCD    1162625631
        0x00817524:    5541203a    : AU    DCD    1430331450
        0x00817528:    52572043    C WR    DCD    1381441603
        0x0081752c:    20455449    ITE     DCD    541414473
        0x00817530:    48545541    AUTH    DCD    1213486401
        0x00817534:    44494820     HID    DCD    1145653280
        0x00817538:    00000021    !...    DCD    33
        0x0081753c:    21103002    .0.!    DCD    554708994
        0x00817540:    205d455b    [E]     DCD    542983515
        0x00817544:    41595554    TUYA    DCD    1096373588
        0x00817548:    454c425f    _BLE    DCD    1162625631
        0x0081754c:    5257203a    : WR    DCD    1381441594
        0x00817550:    20455449    ITE     DCD    541414473
        0x00817554:    48545541    AUTH    DCD    1213486401
        0x00817558:    44494820     HID    DCD    1145653280
        0x0081755c:    72617020     par    DCD    1918988320
        0x00817560:    656c2061    a le    DCD    1701584993
        0x00817564:    6874676e    ngth    DCD    1752459118
        0x00817568:    72726520     err    DCD    1920099616
        0x0081756c:    0021726f    or!.    DCD    2191983
        0x00817570:    205d455b    [E]     DCD    542983515
        0x00817574:    41595554    TUYA    DCD    1096373588
        0x00817578:    454c425f    _BLE    DCD    1162625631
        0x0081757c:    5257203a    : WR    DCD    1381441594
        0x00817580:    20455449    ITE     DCD    541414473
        0x00817584:    48545541    AUTH    DCD    1213486401
        0x00817588:    44494820     HID    DCD    1145653280
        0x0081758c:    72617020     par    DCD    1918988320
        0x00817590:    72652061    a er    DCD    1919230049
        0x00817594:    21726f72    ror!    DCD    561147762
        0x00817598:    00000000    ....    DCD    0
        0x0081759c:    205d455b    [E]     DCD    542983515
        0x008175a0:    41595554    TUYA    DCD    1096373588
        0x008175a4:    454c425f    _BLE    DCD    1162625631
        0x008175a8:    5257203a    : WR    DCD    1381441594
        0x008175ac:    20455449    ITE     DCD    541414473
        0x008175b0:    48545541    AUTH    DCD    1213486401
        0x008175b4:    44494820     HID    DCD    1145653280
        0x008175b8:    69616620     fai    DCD    1767990816
        0x008175bc:    2e64656c    led.    DCD    778331500
        0x008175c0:    00000000    ....    DCD    0
        0x008175c4:    205d445b    [D]     DCD    542983259
        0x008175c8:    41595554    TUYA    DCD    1096373588
        0x008175cc:    454c425f    _BLE    DCD    1162625631
        0x008175d0:    5257203a    : WR    DCD    1381441594
        0x008175d4:    20455449    ITE     DCD    541414473
        0x008175d8:    48545541    AUTH    DCD    1213486401
        0x008175dc:    44494820     HID    DCD    1145653280
        0x008175e0:    63757320     suc    DCD    1668641568
        0x008175e4:    73736563    cess    DCD    1936942435
        0x008175e8:    002e6465    ed..    DCD    3040357
        0x008175ec:    205d445b    [D]     DCD    542983259
        0x008175f0:    41595554    TUYA    DCD    1096373588
        0x008175f4:    454c425f    _BLE    DCD    1162625631
        0x008175f8:    5541203a    : AU    DCD    1430331450
        0x008175fc:    55512043    C QU    DCD    1431380035
        0x00817600:    20595245    ERY     DCD    542724677
        0x00817604:    474e4946    FING    DCD    1196312902
        0x00817608:    52505245    ERPR    DCD    1380995653
        0x0081760c:    21544e49    INT!    DCD    559173193
        0x00817610:    00000000    ....    DCD    0
        0x00817614:    088040bc    .@..    DCD    142622908
        0x00817618:    6572227b    {"re    DCD    1701978747
        0x0081761c:    743a2274    t":t    DCD    1949966964
        0x00817620:    2c657572    rue,    DCD    744846706
        0x00817624:    72696622    "fir    DCD    1919510050
        0x00817628:    6d614e6d    mNam    DCD    1835093613
        0x0081762c:    223a2265    e":"    DCD    574235237
        0x00817630:    2c227325    %s",    DCD    740455205
        0x00817634:    72696622    "fir    DCD    1919510050
        0x00817638:    7265566d    mVer    DCD    1919243885
        0x0081763c:    25223a22    ":"%    DCD    623000098
        0x00817640:    007d2273    s"}.    DCD    8200819
        0x00817644:    205d445b    [D]     DCD    542983259
        0x00817648:    41595554    TUYA    DCD    1096373588
        0x0081764c:    454c425f    _BLE    DCD    1162625631
        0x00817650:    5541203a    : AU    DCD    1430331450
        0x00817654:    4d435f43    C_CM    DCD    1296260931
        0x00817658:    55515f44    D_QU    DCD    1431396164
        0x0081765c:    5f595245    ERY_    DCD    1599689285
        0x00817660:    474e4946    FING    DCD    1196312902
        0x00817664:    52505245    ERPR    DCD    1380995653
        0x00817668:    20544e49    INT     DCD    542395977
        0x0081766c:    70736572    resp    DCD    1886610802
        0x00817670:    65736e6f    onse    DCD    1702063727
        0x00817674:    00002e64    d...    DCD    11876
        0x00817678:    205d445b    [D]     DCD    542983259
        0x0081767c:    41595554    TUYA    DCD    1096373588
        0x00817680:    454c425f    _BLE    DCD    1162625631
        0x00817684:    5541203a    : AU    DCD    1430331450
        0x00817688:    53522043    C RS    DCD    1397891139
        0x0081768c:    54204953    SI T    DCD    1411402067
        0x00817690:    21545345    EST!    DCD    559174469
        0x00817694:    00000000    ....    DCD    0
        0x00817698:    205d455b    [E]     DCD    542983515
        0x0081769c:    41595554    TUYA    DCD    1096373588
        0x008176a0:    454c425f    _BLE    DCD    1162625631
        0x008176a4:    7561203a    : au    DCD    1969299514
        0x008176a8:    65672063    c ge    DCD    1701257315
        0x008176ac:    73722074    t rs    DCD    1936859252
        0x008176b0:    66206973    si f    DCD    1713400179
        0x008176b4:    656c6961    aile    DCD    1701603681
        0x008176b8:    00002e64    d...    DCD    11876
        0x008176bc:    0081c35a    Z...    DCD    8504154
        0x008176c0:    6572227b    {"re    DCD    1701978747
        0x008176c4:    743a2274    t":t    DCD    1949966964
        0x008176c8:    2c657572    rue,    DCD    744846706
        0x008176cc:    73737222    "rss    DCD    1936945698
        0x008176d0:    223a2269    i":"    DCD    574235241
        0x008176d4:    7d226425    %d"}    DCD    2099405861
        0x008176d8:    00000000    ....    DCD    0
        0x008176dc:    205d445b    [D]     DCD    542983259
        0x008176e0:    41595554    TUYA    DCD    1096373588
        0x008176e4:    454c425f    _BLE    DCD    1162625631
        0x008176e8:    7561203a    : au    DCD    1969299514
        0x008176ec:    65672063    c ge    DCD    1701257315
        0x008176f0:    73722074    t rs    DCD    1936859252
        0x008176f4:    3d206973    si =    DCD    1025534323
        0x008176f8:    00642520     %d.    DCD    6563104
        0x008176fc:    0081d904    ....    DCD    8509700
    $t
;;;662                break;
;;;663            case TUYA_BLE_AUC_CMD_RESET:
;;;664                tuya_ble_auc_reset(data_buffer,data_len);
        0x00817700:    4641        AF      MOV      r1,r8
        0x00817702:    4638        8F      MOV      r0,r7
        0x00817704:    e8bd47f0    ...G    POP      {r4-r10,lr}
        0x00817708:    f000b847    ..G.    B.W      tuya_ble_auc_reset ; 0x81779a
;;;665                break;
;;;666            case TUYA_BLE_AUC_CMD_QUERY_FINGERPRINT:
;;;667                tuya_ble_auc_query_fingerprint(data_buffer,data_len);
        0x0081770c:    4641        AF      MOV      r1,r8
        0x0081770e:    4638        8F      MOV      r0,r7
        0x00817710:    e8bd47f0    ...G    POP      {r4-r10,lr}
        0x00817714:    e5b5        ..      B        tuya_ble_auc_query_fingerprint ; 0x817282
;;;668                break;
;;;669            case TUYA_BLE_AUC_CMD_WRITE_HID:
;;;670                tuya_ble_auc_write_hid(data_buffer,data_len);
;;;671                break;
;;;672            case TUYA_BLE_AUC_CMD_RSSI_TEST:
;;;673                tuya_ble_auc_rssi_test(data_buffer,data_len);
        0x00817716:    4641        AF      MOV      r1,r8
        0x00817718:    4638        8F      MOV      r0,r7
        0x0081771a:    e8bd47f0    ...G    POP      {r4-r10,lr}
        0x0081771e:    e5e9        ..      B        tuya_ble_auc_rssi_test ; 0x8172f4
    tuya_ble_prod_asciitohex
        0x00817720:    b570        p.      PUSH     {r4-r6,lr}
        0x00817722:    2500        .%      MOVS     r5,#0
        0x00817724:    462b        +F      MOV      r3,r5
;;; sample\tuya_ble_sdk\app\product_test\tuya_ble_app_production_test.c (242)
        0x00817726:    e034        4.      B        0x817792 ; tuya_ble_prod_asciitohex + 114
;;;243        uint8_t i =0,j =0;
;;;244    
;;;245        for(j = 0; j<(len/2); j++)
;;;246        {       
;;;247            if((ascbuf[i] >= 0x30)&&(ascbuf[i] <= 0x39)) {
        0x00817728:    5d44        D]      LDRB     r4,[r0,r5]
        0x0081772a:    f1a40630    ..0.    SUB      r6,r4,#0x30
        0x0081772e:    2e09        ..      CMP      r6,#9
        0x00817730:    d801        ..      BHI      0x817736 ; tuya_ble_prod_asciitohex + 22
;;;248                hexbuf[j] = ((ascbuf[i] - 0x30)<<4);
        0x00817732:    0124        $.      LSLS     r4,r4,#4
        0x00817734:    e00e        ..      B        0x817754 ; tuya_ble_prod_asciitohex + 52
;;;249            }
;;;250            else if((ascbuf[i] >= 65)&&(ascbuf[i] <= 70)) {
        0x00817736:    f1a40641    ..A.    SUB      r6,r4,#0x41
        0x0081773a:    2e05        ..      CMP      r6,#5
        0x0081773c:    d803        ..      BHI      0x817746 ; tuya_ble_prod_asciitohex + 38
;;;251                hexbuf[j] = ((ascbuf[i] - 55)<<4);
        0x0081773e:    0124        $.      LSLS     r4,r4,#4
        0x00817740:    f5a4745c    ..\t    SUB      r4,r4,#0x370
        0x00817744:    e006        ..      B        0x817754 ; tuya_ble_prod_asciitohex + 52
;;;252            }
;;;253            else if((ascbuf[i] >= 97)&&(ascbuf[i] <= 102)) {
        0x00817746:    f1a40661    ..a.    SUB      r6,r4,#0x61
        0x0081774a:    2e05        ..      CMP      r6,#5
        0x0081774c:    d803        ..      BHI      0x817756 ; tuya_ble_prod_asciitohex + 54
;;;254                hexbuf[j] = ((ascbuf[i] - 87)<<4);
        0x0081774e:    0124        $.      LSLS     r4,r4,#4
        0x00817750:    f5a464ae    ...d    SUB      r4,r4,#0x570
        0x00817754:    54d4        .T      STRB     r4,[r2,r3]
        0x00817756:    1c6d        m.      ADDS     r5,r5,#1
;;;255            }
;;;256            i++;
        0x00817758:    b2ed        ..      UXTB     r5,r5
;;;257            if((ascbuf[i] >= 0x30)&&(ascbuf[i] <= 0x39)) {
        0x0081775a:    5d44        D]      LDRB     r4,[r0,r5]
        0x0081775c:    f1a40630    ..0.    SUB      r6,r4,#0x30
        0x00817760:    2e09        ..      CMP      r6,#9
        0x00817762:    d803        ..      BHI      0x81776c ; tuya_ble_prod_asciitohex + 76
;;;258                hexbuf[j] |= (ascbuf[i] - 0x30);
        0x00817764:    5cd4        .\      LDRB     r4,[r2,r3]
        0x00817766:    4334        4C      ORRS     r4,r4,r6
        0x00817768:    54d4        .T      STRB     r4,[r2,r3]
        0x0081776a:    e00e        ..      B        0x81778a ; tuya_ble_prod_asciitohex + 106
;;;259            }
;;;260            else if((ascbuf[i] >= 65)&&(ascbuf[i] <= 70)) {
        0x0081776c:    f1a40641    ..A.    SUB      r6,r4,#0x41
        0x00817770:    2e05        ..      CMP      r6,#5
        0x00817772:    d802        ..      BHI      0x81777a ; tuya_ble_prod_asciitohex + 90
;;;261                hexbuf[j] |= (ascbuf[i] - 55);
        0x00817774:    5cd6        .\      LDRB     r6,[r2,r3]
        0x00817776:    3c37        7<      SUBS     r4,r4,#0x37
        0x00817778:    e005        ..      B        0x817786 ; tuya_ble_prod_asciitohex + 102
;;;262            }
;;;263            else if((ascbuf[i] >= 97)&&(ascbuf[i] <= 102)) {
        0x0081777a:    f1a40661    ..a.    SUB      r6,r4,#0x61
        0x0081777e:    2e05        ..      CMP      r6,#5
        0x00817780:    d803        ..      BHI      0x81778a ; tuya_ble_prod_asciitohex + 106
;;;264                hexbuf[j] |= (ascbuf[i] - 87);
        0x00817782:    5cd6        .\      LDRB     r6,[r2,r3]
        0x00817784:    3c57        W<      SUBS     r4,r4,#0x57
        0x00817786:    4326        &C      ORRS     r6,r6,r4
        0x00817788:    54d6        .T      STRB     r6,[r2,r3]
        0x0081778a:    1c6d        m.      ADDS     r5,r5,#1
;;;265            }
;;;266            i++;
        0x0081778c:    1c5b        [.      ADDS     r3,r3,#1
        0x0081778e:    b2ed        ..      UXTB     r5,r5
        0x00817790:    b2db        ..      UXTB     r3,r3
        0x00817792:    ebb30f51    ..Q.    CMP      r3,r1,LSR #1
        0x00817796:    d3c7        ..      BCC      0x817728 ; tuya_ble_prod_asciitohex + 8
;;;267            
;;;268        }
;;;269        
;;;270    }
        0x00817798:    bd70        p.      POP      {r4-r6,pc}
    tuya_ble_auc_reset
;;;271    
;;;272    static  void tuya_ble_auc_write_auth_info(uint8_t *para, uint16_t len)
;;;273    {
;;;274        uint8_t mac_temp[6];
;;;275        uint8_t mac_char[13];
;;;276        char true_buf[] = "{\"ret\":true}";
;;;277        char false_buf[] = "{\"ret\":false}";
;;;278        
;;;279        if(tuya_ble_production_test_flag != 1)
;;;280        {
;;;281            return;
;;;282        }
;;;283        
;;;284        TUYA_BLE_LOG_DEBUG("AUC WRITE AUTH INFO!");    
;;;285            
;;;286        /*
;;;287          {
;;;288          "auzkey":"xxxx",    //"6":"32",         7   +  6+4
;;;289          "uuid":"xxxx",      //"4":"16",         7   +6+32+6   +    4+4
;;;290          "mac":"xxxxxx",     //"3":"12",
;;;291          "prod_test":"xxxx"    //"9":"4/5"
;;;292          }
;;;293          */
;;;294       
;;;295        if(len<100)
;;;296        {
;;;297            tuya_ble_uart_prod_send(TUYA_BLE_AUC_CMD_WRITE_AUTH_INFO,(uint8_t *)false_buf,strlen(false_buf));
;;;298            TUYA_BLE_LOG_ERROR("AUC_CMD_WRITE_AUTH_INFO error ,since Invalid length!");
;;;299            return;
;;;300        }
;;;301        
;;;302        if((memcmp(&para[2],"auzkey",6)!=0)||(memcmp(&para[46],"uuid",4)!=0)||(memcmp(&para[72],"mac",3)!=0))
;;;303        {
;;;304            tuya_ble_uart_prod_send(TUYA_BLE_AUC_CMD_WRITE_AUTH_INFO,(uint8_t *)false_buf,strlen(false_buf));
;;;305            TUYA_BLE_LOG_ERROR("AUC_CMD_WRITE_AUTH_INFO error ,since Invalid paras");
;;;306            return;
;;;307        }
;;;308        
;;;309        memcpy(mac_char,&para[78],12);
;;;310        tuya_ble_prod_asciitohex(mac_char,12,mac_temp);
;;;311    
;;;312        if(tuya_ble_storage_write_auth_key_device_id_mac(&para[11],AUTH_KEY_LEN,&para[53],DEVICE_ID_LEN,mac_temp,MAC_LEN,mac_char,MAC_LEN*2)==TUYA_BLE_SUCCESS)
;;;313        {
;;;314            tuya_ble_uart_prod_send(TUYA_BLE_AUC_CMD_WRITE_AUTH_INFO,(uint8_t *)true_buf,strlen(true_buf));
;;;315            TUYA_BLE_LOG_DEBUG("AUC WRITE AUTH INFO successed!"); 
;;;316        }
;;;317        else
;;;318        {
;;;319            tuya_ble_uart_prod_send(TUYA_BLE_AUC_CMD_WRITE_AUTH_INFO,(uint8_t *)false_buf,strlen(false_buf));
;;;320            TUYA_BLE_LOG_ERROR("AUC_CMD_WRITE_AUTH_INFO failed!");
;;;321        }
;;;322               
;;;323    }
;;;324    
;;;325    
;;;326    
;;;327    
;;;328    static void tuya_ble_auc_query_info(uint8_t *para, uint16_t len)
;;;329    {
;;;330        
;;;331        uint8_t i=0;
;;;332        uint8_t mac_temp[13];
;;;333        uint8_t *alloc_buf = NULL;
;;;334        
;;;335        if(tuya_ble_production_test_flag != 1)
;;;336        {
;;;337            return;
;;;338        }    
;;;339           
;;;340        TUYA_BLE_LOG_DEBUG("AUC QUERY INFO!"); 
;;;341    
;;;342        alloc_buf = (uint8_t *)tuya_ble_malloc(256);
;;;343        
;;;344        if(alloc_buf)
;;;345        {
;;;346            memset(alloc_buf,0,256);  
;;;347        }   
;;;348        else
;;;349        {
;;;350            TUYA_BLE_LOG_ERROR("AUC QUERY INFO alloc buf malloc failed."); 
;;;351            return;
;;;352        }        
;;;353        
;;;354        alloc_buf[i++] = '{';
;;;355        alloc_buf[i++] = '\"';
;;;356        memcpy(&alloc_buf[i],"ret",3);
;;;357        i += 3;
;;;358        alloc_buf[i++] = '\"';
;;;359    
;;;360        alloc_buf[i++] = ':';
;;;361        memcpy(&alloc_buf[i],"true",4);
;;;362        i += 4;
;;;363    
;;;364        alloc_buf[i++] = ',';
;;;365        alloc_buf[i++] = '\"';
;;;366        memcpy(&alloc_buf[i],"auzKey",6);
;;;367        i += 6;
;;;368        alloc_buf[i++] = '\"';
;;;369        alloc_buf[i++] = ':';
;;;370        alloc_buf[i++] = '\"';
;;;371        memcpy(&alloc_buf[i],tuya_ble_current_para.auth_settings.auth_key,AUTH_KEY_LEN);
;;;372        i += AUTH_KEY_LEN;
;;;373        
;;;374        alloc_buf[i++] = '\"';
;;;375    
;;;376        alloc_buf[i++] = ',';
;;;377        alloc_buf[i++] = '\"';
;;;378        memcpy(&alloc_buf[i],"hid",3);
;;;379        i += 3;
;;;380        alloc_buf[i++] = '\"';
;;;381        alloc_buf[i++] = ':';
;;;382        alloc_buf[i++] = '\"';
;;;383        memcpy( &alloc_buf[i],tuya_ble_current_para.auth_settings.h_id,H_ID_LEN);
;;;384        i += 19;
;;;385        alloc_buf[i++] = '\"';
;;;386    
;;;387        alloc_buf[i++] = ',';
;;;388        alloc_buf[i++] = '\"';
;;;389        memcpy(&alloc_buf[i],"uuid",4);
;;;390        i += 4;
;;;391        alloc_buf[i++] = '\"';
;;;392        alloc_buf[i++] = ':';
;;;393        alloc_buf[i++] = '\"';
;;;394        memcpy( &alloc_buf[i],tuya_ble_current_para.auth_settings.device_id,DEVICE_ID_LEN);
;;;395        i += DEVICE_ID_LEN;
;;;396        alloc_buf[i++] = '\"';
;;;397    
;;;398        alloc_buf[i++] = ',';
;;;399        alloc_buf[i++] = '\"';
;;;400        memcpy(&alloc_buf[i],"mac",3);
;;;401        i += 3;
;;;402        alloc_buf[i++] = '\"';
;;;403        alloc_buf[i++] = ':';
;;;404        alloc_buf[i++] = '\"';
;;;405    
;;;406        memcpy( &alloc_buf[i],tuya_ble_current_para.auth_settings.mac_string,MAC_LEN*2);
;;;407        i += MAC_LEN*2;
;;;408        alloc_buf[i++] = '\"';
;;;409    
;;;410        alloc_buf[i++] = ',';
;;;411        alloc_buf[i++] = '\"';
;;;412        memcpy(&alloc_buf[i],"firmName",8);
;;;413        i += 8;
;;;414        alloc_buf[i++] = '\"';
;;;415        alloc_buf[i++] = ':';
;;;416        alloc_buf[i++] = '\"';
;;;417        memcpy(&alloc_buf[i],TUYA_BLE_APP_BUILD_FIRMNAME_STRING,strlen(TUYA_BLE_APP_BUILD_FIRMNAME_STRING));
;;;418        i+=strlen(TUYA_BLE_APP_BUILD_FIRMNAME_STRING);
;;;419        alloc_buf[i++] = '\"';
;;;420    
;;;421        alloc_buf[i++] = ',';
;;;422        alloc_buf[i++] = '\"';
;;;423        memcpy(&alloc_buf[i],"firmVer",7);
;;;424        i+=7;
;;;425        alloc_buf[i++] = '\"';
;;;426        alloc_buf[i++] = ':';
;;;427        alloc_buf[i++] = '\"';
;;;428        memcpy(&alloc_buf[i],TUYA_BLE_APP_VERSION_STRING,strlen(TUYA_BLE_APP_VERSION_STRING));
;;;429        i+=strlen(TUYA_BLE_APP_VERSION_STRING);
;;;430        alloc_buf[i++] = '\"';
;;;431    
;;;432        alloc_buf[i++] = ',';
;;;433        alloc_buf[i++] = '\"';
;;;434        memcpy(&alloc_buf[i],"prod_test",9);
;;;435        i+=9;
;;;436        alloc_buf[i++] = '\"';
;;;437        alloc_buf[i++] = ':';
;;;438    
;;;439        memcpy(&alloc_buf[i],"false",5);
;;;440        i += 5;
;;;441    
;;;442        alloc_buf[i++] = '}';
;;;443        
;;;444        alloc_buf[i++] = 0;
;;;445    
;;;446        tuya_ble_uart_prod_send(TUYA_BLE_AUC_CMD_QUERY_INFO,(uint8_t *)alloc_buf,i-1);
;;;447        
;;;448        TUYA_BLE_LOG_DEBUG("AUC_CMD_QUERY_INFO RESPONSE!");
;;;449        
;;;450        tuya_ble_free(alloc_buf);
;;;451    }
;;;452    
;;;453    
;;;454    static void tuya_ble_auc_reset(uint8_t *para, uint16_t len)
;;;455    {
        0x0081779a:    b51f        ..      PUSH     {r0-r4,lr}
        0x0081779c:    a00f        ..      ADR      r0,{pc}+0x40 ; 0x8177dc
        0x0081779e:    c80f        ..      LDM      r0,{r0-r3}
        0x008177a0:    e88d000f    ....    STM      sp,{r0-r3}
        0x008177a4:    4811        .H      LDR      r0,[pc,#68] ; [0x8177ec] = 0x209a94
        0x008177a6:    7800        .x      LDRB     r0,[r0,#0]
        0x008177a8:    2801        .(      CMP      r0,#1
        0x008177aa:    d115        ..      BNE      0x8177d8 ; tuya_ble_auc_reset + 62
;;;456        char buf[] = "{\"ret\":true}";
;;;457        if(tuya_ble_production_test_flag != 1)
;;;458        {
;;;459            return;
;;;460        }  
;;;461        TUYA_BLE_LOG_DEBUG("auc RESET!");   
        0x008177ac:    a010        ..      ADR      r0,{pc}+0x44 ; 0x8177f0
        0x008177ae:    f003f9fc    ....    BL       get_args ; 0x81abaa
        0x008177b2:    4602        .F      MOV      r2,r0
        0x008177b4:    4915        .I      LDR      r1,[pc,#84] ; [0x81780c] = 0x8803fd0
        0x008177b6:    4816        .H      LDR      r0,[pc,#88] ; [0x817810] = 0x21103002
        0x008177b8:    f7f0d951    ..Q.    BL       log_buffer ; 0x7a5e
;;;462        
;;;463        tuya_ble_uart_prod_send(TUYA_BLE_AUC_CMD_RESET,(uint8_t *)buf,strlen(buf));
        0x008177bc:    4668        hF      MOV      r0,sp
        0x008177be:    f442f34d    B.M.    BL       strlen ; 0x59e5c
        0x008177c2:    b2c2        ..      UXTB     r2,r0
        0x008177c4:    4669        iF      MOV      r1,sp
        0x008177c6:    2005        .       MOVS     r0,#5
        0x008177c8:    f7fff913    ....    BL       tuya_ble_uart_prod_send ; 0x8169f2
;;;464        
;;;465        tuya_ble_device_delay_ms(1000);
        0x008177cc:    f44f707a    O.zp    MOV      r0,#0x3e8
        0x008177d0:    f003f892    ....    BL       tuya_ble_device_delay_ms ; 0x81a8f8
;;;466        
;;;467        tuya_ble_device_reset();
        0x008177d4:    f003f8ab    ....    BL       tuya_ble_device_reset ; 0x81a92e
;;;468        
;;;469    }
        0x008177d8:    bd1f        ..      POP      {r0-r4,pc}
    $d
        0x008177da:    0000        ..      DCW    0
        0x008177dc:    6572227b    {"re    DCD    1701978747
        0x008177e0:    743a2274    t":t    DCD    1949966964
        0x008177e4:    7d657572    rue}    DCD    2103801202
        0x008177e8:    00000000    ....    DCD    0
        0x008177ec:    00209a94    .. .    DCD    2136724
        0x008177f0:    205d445b    [D]     DCD    542983259
        0x008177f4:    41595554    TUYA    DCD    1096373588
        0x008177f8:    454c425f    _BLE    DCD    1162625631
        0x008177fc:    7561203a    : au    DCD    1969299514
        0x00817800:    45522063    c RE    DCD    1163010147
        0x00817804:    21544553    SET!    DCD    559170899
        0x00817808:    00000000    ....    DCD    0
        0x0081780c:    08803fd0    .?..    DCD    142622672
        0x00817810:    21103002    .0.!    DCD    554708994
    $t
    .text
    tuya_ble_uart_common_mcu_ota_data_from_ble_handler
;;; sample\tuya_ble_sdk\app\uart_common\tuya_ble_app_uart_common_handler.c
;;;61     {
        0x00817814:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x00817818:    2500        .%      MOVS     r5,#0
        0x0081781a:    f8df9214    ....    LDR      r9,[pc,#532] ; [0x817a30] = 0x21103002
;;; sample\tuya_ble_sdk\app\uart_common\tuya_ble_app_uart_common_handler.c (61)
        0x0081781e:    4617        .F      MOV      r7,r2
        0x00817820:    460e        .F      MOV      r6,r1
        0x00817822:    4680        .F      MOV      r8,r0
        0x00817824:    280f        .(      CMP      r0,#0xf
        0x00817826:    d00f        ..      BEQ      0x817848 ; tuya_ble_uart_common_mcu_ota_data_from_ble_handler + 52
;;;62         static uint8_t uart_data_temp[42];
;;;63         uint8_t *uart_data_buffer = NULL;
;;;64         uint8_t uart_data_len = 0;
;;;65     
;;;66         if(cmd==FRM_OTA_DATA_REQ)
;;;67         {
;;;68             uart_data_buffer = (uint8_t*)tuya_ble_malloc(recv_len+7);
;;;69             if(uart_data_buffer==NULL)
;;;70             {
;;;71                 TUYA_BLE_LOG_ERROR("uart_data_buffer malloc failed.");
;;;72                 return;
;;;73             }
;;;74     
;;;75         }
;;;76         else
;;;77         {
;;;78             uart_data_buffer = uart_data_temp;
        0x00817828:    4c82        .L      LDR      r4,[pc,#520] ; [0x817a34] = 0x209a9d
;;;79         }
;;;80     
;;;81         uart_data_buffer[0] = 0x55;
        0x0081782a:    2055        U       MOVS     r0,#0x55
        0x0081782c:    f1a8010c    ....    SUB      r1,r8,#0xc
        0x00817830:    7020         p      STRB     r0,[r4,#0]
;;;82         uart_data_buffer[1] = 0xAA;
        0x00817832:    20aa        .       MOVS     r0,#0xaa
        0x00817834:    7060        `p      STRB     r0,[r4,#1]
;;;83         uart_data_buffer[2] = 0x00;
        0x00817836:    2000        .       MOVS     r0,#0
        0x00817838:    70a0        .p      STRB     r0,[r4,#2]
;;;84         switch (cmd)
        0x0081783a:    2905        .)      CMP      r1,#5
        0x0081783c:    d253        S.      BCS      0x8178e6 ; tuya_ble_uart_common_mcu_ota_data_from_ble_handler + 210
        0x0081783e:    e8dff001    ....    TBB      [pc,r1]
    $d
        0x00817842:    1d13        ..      DCW    7443
        0x00817844:    004d4137    7AM.    DCD    5062967
    $t
        0x00817848:    1df8        ..      ADDS     r0,r7,#7
        0x0081784a:    b280        ..      UXTH     r0,r0
        0x0081784c:    f7fdfda0    ....    BL       tuya_ble_malloc ; 0x815390
        0x00817850:    0004        ..      MOVS     r4,r0
        0x00817852:    d1ea        ..      BNE      0x81782a ; tuya_ble_uart_common_mcu_ota_data_from_ble_handler + 22
        0x00817854:    a078        x.      ADR      r0,{pc}+0x1e4 ; 0x817a38
        0x00817856:    f003f9a8    ....    BL       get_args ; 0x81abaa
        0x0081785a:    4602        .F      MOV      r2,r0
        0x0081785c:    4648        HF      MOV      r0,r9
        0x0081785e:    e8bd47f0    ...G    POP      {r4-r10,lr}
        0x00817862:    4981        .I      LDR      r1,[pc,#516] ; [0x817a68] = 0x880420c
        0x00817864:    f7f098fb    ....    B        log_buffer ; 0x7a5e
;;;85         {
;;;86         case FRM_OTA_START_REQ:
;;;87             uart_data_buffer[3] = TUYA_BLE_UART_COMMON_MCU_OTA_REQUEST;
        0x00817868:    21ea        .!      MOVS     r1,#0xea
        0x0081786a:    70e1        .p      STRB     r1,[r4,#3]
;;;88             uart_data_buffer[4] = 0;
        0x0081786c:    7120         q      STRB     r0,[r4,#4]
;;;89             uart_data_buffer[5] = 2;
        0x0081786e:    2102        .!      MOVS     r1,#2
        0x00817870:    7161        aq      STRB     r1,[r4,#5]
;;;90             uart_data_buffer[6] = TUYA_BLE_UART_COMMON_MCU_OTA_DATA_LENGTH_MAX>>8;
        0x00817872:    71a0        .q      STRB     r0,[r4,#6]
;;;91             uart_data_buffer[7] = (uint8_t)TUYA_BLE_UART_COMMON_MCU_OTA_DATA_LENGTH_MAX;
        0x00817874:    20c8        .       MOVS     r0,#0xc8
        0x00817876:    71e0        .q      STRB     r0,[r4,#7]
;;;92             uart_data_len = 8;
        0x00817878:    2508        .%      MOVS     r5,#8
;;;93             break;
        0x0081787a:    e034        4.      B        0x8178e6 ; tuya_ble_uart_common_mcu_ota_data_from_ble_handler + 210
;;;94         case FRM_OTA_FILE_INFOR_REQ:
;;;95             uart_data_buffer[3] = TUYA_BLE_UART_COMMON_MCU_OTA_FILE_INFO;
        0x0081787c:    21eb        .!      MOVS     r1,#0xeb
        0x0081787e:    70e1        .p      STRB     r1,[r4,#3]
;;;96             uart_data_buffer[4] = 0;
        0x00817880:    7120         q      STRB     r0,[r4,#4]
;;;97             uart_data_buffer[5] = 35;
        0x00817882:    2023        #       MOVS     r0,#0x23
        0x00817884:    7160        `q      STRB     r0,[r4,#5]
;;;98             memcpy(uart_data_buffer+6,recv_data,8);
        0x00817886:    6830        0h      LDR      r0,[r6,#0]
        0x00817888:    f8c40006    ....    STR      r0,[r4,#6]
        0x0081788c:    6870        ph      LDR      r0,[r6,#4]
        0x0081788e:    f8c4000a    ....    STR      r0,[r4,#0xa]
;;;99             uart_data_buffer[14] = recv_data[9];
        0x00817892:    7a70        pz      LDRB     r0,[r6,#9]
        0x00817894:    73a0        .s      STRB     r0,[r4,#0xe]
;;;100            uart_data_buffer[15] = recv_data[10];
        0x00817896:    7ab0        .z      LDRB     r0,[r6,#0xa]
        0x00817898:    73e0        .s      STRB     r0,[r4,#0xf]
;;;101            uart_data_buffer[16] = recv_data[11];
        0x0081789a:    7af0        .z      LDRB     r0,[r6,#0xb]
        0x0081789c:    7420         t      STRB     r0,[r4,#0x10]
;;;102            memcpy(&uart_data_buffer[17],recv_data+12,24);
        0x0081789e:    2218        ."      MOVS     r2,#0x18
        0x008178a0:    f106010c    ....    ADD      r1,r6,#0xc
        0x008178a4:    f1040011    ....    ADD      r0,r4,#0x11
        0x008178a8:    f442f2f7    B...    BL       __aeabi_memcpy ; 0x59e9a
;;;103            uart_data_len = 41;
        0x008178ac:    2529        )%      MOVS     r5,#0x29
;;;104            break;
        0x008178ae:    e01a        ..      B        0x8178e6 ; tuya_ble_uart_common_mcu_ota_data_from_ble_handler + 210
;;;105        case FRM_OTA_FILE_OFFSET_REQ:
;;;106            uart_data_buffer[3] = TUYA_BLE_UART_COMMON_MCU_OTA_FILE_OFFSET;
        0x008178b0:    21ec        .!      MOVS     r1,#0xec
        0x008178b2:    70e1        .p      STRB     r1,[r4,#3]
;;;107            uart_data_buffer[4] = 0;
        0x008178b4:    7120         q      STRB     r0,[r4,#4]
;;;108            uart_data_buffer[5] = 4;
        0x008178b6:    2004        .       MOVS     r0,#4
        0x008178b8:    7160        `q      STRB     r0,[r4,#5]
;;;109            memcpy(uart_data_buffer+6,recv_data,4);
        0x008178ba:    6830        0h      LDR      r0,[r6,#0]
        0x008178bc:    f8c40006    ....    STR      r0,[r4,#6]
;;;110            uart_data_len = 10;
        0x008178c0:    250a        .%      MOVS     r5,#0xa
;;;111            break;
        0x008178c2:    e010        ..      B        0x8178e6 ; tuya_ble_uart_common_mcu_ota_data_from_ble_handler + 210
;;;112        case FRM_OTA_DATA_REQ:
;;;113            uart_data_buffer[3] = TUYA_BLE_UART_COMMON_MCU_OTA_DATA;
        0x008178c4:    21ed        .!      MOVS     r1,#0xed
        0x008178c6:    70e1        .p      STRB     r1,[r4,#3]
;;;114            uart_data_buffer[4] = 0;
        0x008178c8:    7120         q      STRB     r0,[r4,#4]
;;;115            uart_data_buffer[5] = recv_len;
        0x008178ca:    7167        gq      STRB     r7,[r4,#5]
;;;116            memcpy(uart_data_buffer+6,recv_data,recv_len);
        0x008178cc:    463a        :F      MOV      r2,r7
        0x008178ce:    4631        1F      MOV      r1,r6
        0x008178d0:    1da0        ..      ADDS     r0,r4,#6
        0x008178d2:    f442f2e2    B...    BL       __aeabi_memcpy ; 0x59e9a
        0x008178d6:    1dbf        ..      ADDS     r7,r7,#6
;;;117            uart_data_len = 6+recv_len;
        0x008178d8:    b2fd        ..      UXTB     r5,r7
;;;118            break;
        0x008178da:    e004        ..      B        0x8178e6 ; tuya_ble_uart_common_mcu_ota_data_from_ble_handler + 210
;;;119        case FRM_OTA_END_REQ:
;;;120            uart_data_buffer[3] = TUYA_BLE_UART_COMMON_MCU_OTA_END;
        0x008178dc:    21ee        .!      MOVS     r1,#0xee
        0x008178de:    70e1        .p      STRB     r1,[r4,#3]
;;;121            uart_data_buffer[4] = 0;
        0x008178e0:    7120         q      STRB     r0,[r4,#4]
;;;122            uart_data_buffer[5] = 0;
        0x008178e2:    7160        `q      STRB     r0,[r4,#5]
;;;123            uart_data_len = 6;
        0x008178e4:    2506        .%      MOVS     r5,#6
;;;124            break;
;;;125        default:
;;;126            break;
;;;127        }
;;;128    
;;;129        uart_data_buffer[uart_data_len] = tuya_ble_check_sum(uart_data_buffer,uart_data_len);
        0x008178e6:    4629        )F      MOV      r1,r5
        0x008178e8:    4620         F      MOV      r0,r4
        0x008178ea:    f7fefd3a    ..:.    BL       tuya_ble_check_sum ; 0x816362
        0x008178ee:    5560        `U      STRB     r0,[r4,r5]
;;;130    
;;;131        tuya_ble_common_uart_send_data(uart_data_buffer,uart_data_len+1);
        0x008178f0:    1c69        i.      ADDS     r1,r5,#1
        0x008178f2:    4620         F      MOV      r0,r4
        0x008178f4:    f002ffce    ....    BL       tuya_ble_common_uart_send_data ; 0x81a894
;;;132    
;;;133        TUYA_BLE_LOG_HEXDUMP_DEBUG("mcu ota uart send data : ",uart_data_buffer,uart_data_len+1);
        0x008178f8:    a05c        \.      ADR      r0,{pc}+0x174 ; 0x817a6c
        0x008178fa:    f003f956    ..V.    BL       get_args ; 0x81abaa
        0x008178fe:    495a        ZI      LDR      r1,[pc,#360] ; [0x817a68] = 0x880420c
        0x00817900:    4602        .F      MOV      r2,r0
        0x00817902:    1c6b        k.      ADDS     r3,r5,#1
        0x00817904:    3130        01      ADDS     r1,r1,#0x30
        0x00817906:    464e        NF      MOV      r6,r9
        0x00817908:    4648        HF      MOV      r0,r9
        0x0081790a:    f7f0d8a8    ....    BL       log_buffer ; 0x7a5e
        0x0081790e:    1c6b        k.      ADDS     r3,r5,#1
        0x00817910:    4622        "F      MOV      r2,r4
        0x00817912:    2108        .!      MOVS     r1,#8
        0x00817914:    a062        b.      ADR      r0,{pc}+0x18c ; 0x817aa0
        0x00817916:    f003f95c    ..\.    BL       log_hexdump ; 0x81abd2
        0x0081791a:    a061        a.      ADR      r0,{pc}+0x186 ; 0x817aa0
        0x0081791c:    f003f945    ..E.    BL       get_args ; 0x81abaa
        0x00817920:    4951        QI      LDR      r1,[pc,#324] ; [0x817a68] = 0x880420c
        0x00817922:    4602        .F      MOV      r2,r0
        0x00817924:    3164        d1      ADDS     r1,r1,#0x64
        0x00817926:    4630        0F      MOV      r0,r6
        0x00817928:    f7f0d899    ....    BL       log_buffer ; 0x7a5e
;;;134    
;;;135        if(cmd==FRM_OTA_DATA_REQ)
        0x0081792c:    f1b80f0f    ....    CMP      r8,#0xf
        0x00817930:    d104        ..      BNE      0x81793c ; tuya_ble_uart_common_mcu_ota_data_from_ble_handler + 296
;;;136        {
;;;137            tuya_ble_free(uart_data_buffer);
        0x00817932:    4620         F      MOV      r0,r4
        0x00817934:    e8bd47f0    ...G    POP      {r4-r10,lr}
        0x00817938:    f7fdbd35    ..5.    B        tuya_ble_free ; 0x8153a6
;;;138        }
;;;139    
;;;140    }
        0x0081793c:    e8bd87f0    ....    POP      {r4-r10,pc}
    tuya_ble_uart_common_mcu_ota_data_from_uart_handler
;;;141    
;;;142    
;;;143    
;;;144    static void tuya_ble_uart_common_mcu_ota_data_from_uart_handler(uint8_t cmd,uint8_t *data_buffer,uint16_t data_len)
;;;145    {
        0x00817940:    b5f8        ..      PUSH     {r3-r7,lr}
        0x00817942:    4607        .F      MOV      r7,r0
        0x00817944:    483b        ;H      LDR      r0,[pc,#236] ; [0x817a34] = 0x209a9d
;;; sample\tuya_ble_sdk\app\uart_common\tuya_ble_app_uart_common_handler.c (145)
        0x00817946:    460d        .F      MOV      r5,r1
;;;146        static uint8_t ble_data_buffer[30];
;;;147        static uint8_t ble_data_len = 0;
;;;148        uint16_t ble_cmd = 0;
        0x00817948:    2400        .$      MOVS     r4,#0
;;;149        tuya_ble_connect_status_t currnet_connect_status;
;;;150    
;;;151        memset(ble_data_buffer,0,sizeof(ble_data_buffer));
        0x0081794a:    211e        .!      MOVS     r1,#0x1e
        0x0081794c:    302a        *0      ADDS     r0,r0,#0x2a
        0x0081794e:    f442f365    B.e.    BL       __aeabi_memclr ; 0x5a01c
        0x00817952:    4e38        8N      LDR      r6,[pc,#224] ; [0x817a34] = 0x209a9d
        0x00817954:    2300        .#      MOVS     r3,#0
        0x00817956:    1e76        v.      SUBS     r6,r6,#1
        0x00817958:    f1a70cea    ....    SUB      r12,r7,#0xea
        0x0081795c:    2101        .!      MOVS     r1,#1
        0x0081795e:    2202        ."      MOVS     r2,#2
        0x00817960:    2705        .'      MOVS     r7,#5
        0x00817962:    7033        3p      STRB     r3,[r6,#0]
        0x00817964:    f106002b    ..+.    ADD      r0,r6,#0x2b
;;;152        ble_data_len = 0;
;;;153        switch(cmd)
        0x00817968:    f1bc0f05    ....    CMP      r12,#5
        0x0081796c:    d230        0.      BCS      0x8179d0 ; tuya_ble_uart_common_mcu_ota_data_from_uart_handler + 144
        0x0081796e:    e8dff00c    ....    TBB      [pc,r12]
    $d
        0x00817972:    1403        ..      DCW    5123
        0x00817974:    002a241e    .$*.    DCD    2761758
    $t
;;;154        {
;;;155        case TUYA_BLE_UART_COMMON_MCU_OTA_REQUEST:
;;;156            ble_data_buffer[0] = data_buffer[0];
        0x00817978:    782a        *x      LDRB     r2,[r5,#0]
        0x0081797a:    7002        .p      STRB     r2,[r0,#0]
;;;157            ble_data_buffer[1] = 3;
        0x0081797c:    2203        ."      MOVS     r2,#3
        0x0081797e:    7042        Bp      STRB     r2,[r0,#1]
;;;158            ble_data_buffer[2] = TUYA_BLE_OTA_MCU_TYPE;
        0x00817980:    7081        .p      STRB     r1,[r0,#2]
;;;159            ble_data_buffer[3] = 0;
        0x00817982:    70c3        .p      STRB     r3,[r0,#3]
;;;160            memcpy(&ble_data_buffer[4],data_buffer+1,5);
        0x00817984:    f8d50001    ....    LDR      r0,[r5,#1]
        0x00817988:    f8c6002f    ../.    STR      r0,[r6,#0x2f]
        0x0081798c:    7968        hy      LDRB     r0,[r5,#5]
        0x0081798e:    f8860033    ..3.    STRB     r0,[r6,#0x33]
;;;161            ble_data_len = 9;
        0x00817992:    2009        .       MOVS     r0,#9
        0x00817994:    7030        0p      STRB     r0,[r6,#0]
;;;162            ble_cmd = FRM_OTA_START_RESP;
        0x00817996:    240c        .$      MOVS     r4,#0xc
;;;163            break;
        0x00817998:    e01a        ..      B        0x8179d0 ; tuya_ble_uart_common_mcu_ota_data_from_uart_handler + 144
;;;164        case TUYA_BLE_UART_COMMON_MCU_OTA_FILE_INFO:
;;;165            ble_data_buffer[0] = TUYA_BLE_OTA_MCU_TYPE;
        0x0081799a:    f8001b01    ....    STRB     r1,[r0],#1
;;;166            memcpy(&ble_data_buffer[1],data_buffer,25);
        0x0081799e:    2219        ."      MOVS     r2,#0x19
        0x008179a0:    4629        )F      MOV      r1,r5
        0x008179a2:    f442f27a    B.z.    BL       __aeabi_memcpy ; 0x59e9a
;;;167            ble_data_len = 26;
        0x008179a6:    201a        .       MOVS     r0,#0x1a
        0x008179a8:    7030        0p      STRB     r0,[r6,#0]
;;;168            ble_cmd = FRM_OTA_FILE_INFOR_RESP;
        0x008179aa:    240d        .$      MOVS     r4,#0xd
;;;169            break;
        0x008179ac:    e010        ..      B        0x8179d0 ; tuya_ble_uart_common_mcu_ota_data_from_uart_handler + 144
;;;170        case TUYA_BLE_UART_COMMON_MCU_OTA_FILE_OFFSET:
;;;171            ble_data_buffer[0] = TUYA_BLE_OTA_MCU_TYPE;
        0x008179ae:    7001        .p      STRB     r1,[r0,#0]
;;;172            memcpy(&ble_data_buffer[1],data_buffer,4);
        0x008179b0:    6828        (h      LDR      r0,[r5,#0]
        0x008179b2:    62f0        .b      STR      r0,[r6,#0x2c]
;;;173            ble_data_len = 5;
        0x008179b4:    7037        7p      STRB     r7,[r6,#0]
;;;174            ble_cmd = FRM_OTA_FILE_OFFSET_RESP;
        0x008179b6:    240e        .$      MOVS     r4,#0xe
;;;175            break;
        0x008179b8:    e00a        ..      B        0x8179d0 ; tuya_ble_uart_common_mcu_ota_data_from_uart_handler + 144
;;;176        case TUYA_BLE_UART_COMMON_MCU_OTA_DATA:
;;;177            ble_data_buffer[0] = TUYA_BLE_OTA_MCU_TYPE;
        0x008179ba:    7001        .p      STRB     r1,[r0,#0]
;;;178            ble_data_buffer[1] = data_buffer[0];
        0x008179bc:    7829        )x      LDRB     r1,[r5,#0]
        0x008179be:    7041        Ap      STRB     r1,[r0,#1]
;;;179            ble_data_len = 2;
        0x008179c0:    7032        2p      STRB     r2,[r6,#0]
;;;180            ble_cmd = FRM_OTA_DATA_RESP;
        0x008179c2:    240f        .$      MOVS     r4,#0xf
;;;181            break;
        0x008179c4:    e004        ..      B        0x8179d0 ; tuya_ble_uart_common_mcu_ota_data_from_uart_handler + 144
;;;182        case TUYA_BLE_UART_COMMON_MCU_OTA_END:
;;;183            ble_data_buffer[0] = TUYA_BLE_OTA_MCU_TYPE;
        0x008179c6:    7001        .p      STRB     r1,[r0,#0]
;;;184            ble_data_buffer[1] = data_buffer[0];
        0x008179c8:    7829        )x      LDRB     r1,[r5,#0]
        0x008179ca:    7041        Ap      STRB     r1,[r0,#1]
;;;185            ble_data_len = 2;
        0x008179cc:    7032        2p      STRB     r2,[r6,#0]
;;;186            ble_cmd = FRM_OTA_END_RESP;
        0x008179ce:    2410        .$      MOVS     r4,#0x10
;;;187            break;
;;;188        default:
;;;189            break;
;;;190        };
;;;191    
;;;192        currnet_connect_status = tuya_ble_connect_status_get();
        0x008179d0:    f7fdfb28    ..(.    BL       tuya_ble_connect_status_get ; 0x815024
;;;193    
;;;194        if(currnet_connect_status != BONDING_CONN)
        0x008179d4:    2803        .(      CMP      r0,#3
        0x008179d6:    d00a        ..      BEQ      0x8179ee ; tuya_ble_uart_common_mcu_ota_data_from_uart_handler + 174
;;;195        {
;;;196            TUYA_BLE_LOG_ERROR("tuya_ble_uart_common_mcu_ota_process FAILED.");
        0x008179d8:    a032        2.      ADR      r0,{pc}+0xcc ; 0x817aa4
        0x008179da:    f003f8e6    ....    BL       get_args ; 0x81abaa
        0x008179de:    e8bd40f8    ...@    POP      {r3-r7,lr}
        0x008179e2:    4921        !I      LDR      r1,[pc,#132] ; [0x817a68] = 0x880420c
        0x008179e4:    4602        .F      MOV      r2,r0
        0x008179e6:    3168        h1      ADDS     r1,r1,#0x68
        0x008179e8:    4811        .H      LDR      r0,[pc,#68] ; [0x817a30] = 0x21103002
        0x008179ea:    f7f09838    ..8.    B        log_buffer ; 0x7a5e
;;;197            return;
;;;198        }
;;;199    
;;;200        if(ble_data_len>0)
        0x008179ee:    7833        3x      LDRB     r3,[r6,#0]
        0x008179f0:    2b00        .+      CMP      r3,#0
        0x008179f2:    d006        ..      BEQ      0x817a02 ; tuya_ble_uart_common_mcu_ota_data_from_uart_handler + 194
;;;201        {
;;;202            tuya_ble_commData_send(ble_cmd,0,ble_data_buffer,ble_data_len,ENCRYPTION_MODE_SESSION_KEY);
        0x008179f4:    4a0f        .J      LDR      r2,[pc,#60] ; [0x817a34] = 0x209a9d
        0x008179f6:    2100        .!      MOVS     r1,#0
        0x008179f8:    322a        *2      ADDS     r2,r2,#0x2a
        0x008179fa:    4620         F      MOV      r0,r4
        0x008179fc:    9700        ..      STR      r7,[sp,#0]
        0x008179fe:    f7fbfb34    ..4.    BL       tuya_ble_commData_send ; 0x81306a
;;;203        }
;;;204    
;;;205    }
        0x00817a02:    bdf8        ..      POP      {r3-r7,pc}
;;;206    
;;;207    
;;;208    __TUYA_BLE_WEAK void tuya_ble_custom_app_uart_common_process(uint8_t *p_in_data,uint16_t in_len)
;;;209    {
;;;210        uint8_t cmd = p_in_data[3];
;;;211        uint16_t data_len = (p_in_data[4]<<8) + p_in_data[5];
;;;212        uint8_t *data_buffer = p_in_data+6;
;;;213    
;;;214        switch(cmd)
;;;215        {
;;;216    
;;;217        default:
;;;218            break;
;;;219        };
;;;220    
;;;221    }
        0x00817a04:    4770        pG      BX       lr
    tuya_ble_uart_common_process
;;;222    
;;;223    
;;;224    
;;;225    void tuya_ble_uart_common_process(uint8_t *p_in_data,uint16_t in_len)
;;;226    {
        0x00817a06:    b570        p.      PUSH     {r4-r6,lr}
        0x00817a08:    460d        .F      MOV      r5,r1
        0x00817a0a:    7941        Ay      LDRB     r1,[r0,#5]
        0x00817a0c:    7902        .y      LDRB     r2,[r0,#4]
;;;227        uint8_t cmd = p_in_data[3];
        0x00817a0e:    78c3        .x      LDRB     r3,[r0,#3]
;;;228        uint16_t data_len = (p_in_data[4]<<8) + p_in_data[5];
        0x00817a10:    eb012102    ...!    ADD      r1,r1,r2,LSL #8
        0x00817a14:    b28a        ..      UXTH     r2,r1
;;;229        uint8_t *data_buffer = p_in_data+6;
        0x00817a16:    1d81        ..      ADDS     r1,r0,#6
;;;230    
;;;231        switch(cmd)
        0x00817a18:    f1a304ea    ....    SUB      r4,r3,#0xea
        0x00817a1c:    2c04        .,      CMP      r4,#4
        0x00817a1e:    d803        ..      BHI      0x817a28 ; tuya_ble_uart_common_process + 34
;;;232        {
;;;233        case TUYA_BLE_UART_COMMON_MCU_OTA_REQUEST:
;;;234        case TUYA_BLE_UART_COMMON_MCU_OTA_FILE_INFO:
;;;235        case TUYA_BLE_UART_COMMON_MCU_OTA_FILE_OFFSET:
;;;236        case TUYA_BLE_UART_COMMON_MCU_OTA_DATA:
;;;237        case TUYA_BLE_UART_COMMON_MCU_OTA_END:
;;;238            tuya_ble_uart_common_mcu_ota_data_from_uart_handler(cmd,data_buffer,data_len);
        0x00817a20:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x00817a24:    4618        .F      MOV      r0,r3
        0x00817a26:    e78b        ..      B        tuya_ble_uart_common_mcu_ota_data_from_uart_handler ; 0x817940
;;;239            break;
;;;240        default:
;;;241            tuya_ble_custom_app_uart_common_process(p_in_data,in_len);
        0x00817a28:    4629        )F      MOV      r1,r5
        0x00817a2a:    f7f9fe8c    ....    BL       tuya_ble_custom_app_uart_common_process ; 0x811746
;;;242            break;
;;;243        };
;;;244    
;;;245    }
        0x00817a2e:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x00817a30:    21103002    .0.!    DCD    554708994
        0x00817a34:    00209a9d    .. .    DCD    2136733
        0x00817a38:    205d455b    [E]     DCD    542983515
        0x00817a3c:    41595554    TUYA    DCD    1096373588
        0x00817a40:    454c425f    _BLE    DCD    1162625631
        0x00817a44:    6175203a    : ua    DCD    1635065914
        0x00817a48:    645f7472    rt_d    DCD    1683977330
        0x00817a4c:    5f617461    ata_    DCD    1600222305
        0x00817a50:    66667562    buff    DCD    1717990754
        0x00817a54:    6d207265    er m    DCD    1830842981
        0x00817a58:    6f6c6c61    allo    DCD    1869376609
        0x00817a5c:    61662063    c fa    DCD    1634082915
        0x00817a60:    64656c69    iled    DCD    1684368489
        0x00817a64:    0000002e    ....    DCD    46
        0x00817a68:    0880420c    .B..    DCD    142623244
        0x00817a6c:    205d445b    [D]     DCD    542983259
        0x00817a70:    41595554    TUYA    DCD    1096373588
        0x00817a74:    454c425f    _BLE    DCD    1162625631
        0x00817a78:    636d203a    : mc    DCD    1668096058
        0x00817a7c:    746f2075    u ot    DCD    1953439861
        0x00817a80:    61752061    a ua    DCD    1635065953
        0x00817a84:    73207472    rt s    DCD    1931506802
        0x00817a88:    20646e65    end     DCD    543452773
        0x00817a8c:    61746164    data    DCD    1635017060
        0x00817a90:    20203a20     :      DCD    538982944
        0x00817a94:    6e656c5b    [len    DCD    1852140635
        0x00817a98:    5d64253d    =%d]    DCD    1566844221
        0x00817a9c:    00003a20     :..    DCD    14880
        0x00817aa0:    00000000    ....    DCD    0
        0x00817aa4:    205d455b    [E]     DCD    542983515
        0x00817aa8:    41595554    TUYA    DCD    1096373588
        0x00817aac:    454c425f    _BLE    DCD    1162625631
        0x00817ab0:    7574203a    : tu    DCD    1970544698
        0x00817ab4:    625f6179    ya_b    DCD    1650418041
        0x00817ab8:    755f656c    le_u    DCD    1969186156
        0x00817abc:    5f747261    art_    DCD    1601466977
        0x00817ac0:    6d6d6f63    comm    DCD    1835888483
        0x00817ac4:    6d5f6e6f    on_m    DCD    1834970735
        0x00817ac8:    6f5f7563    cu_o    DCD    1868526947
        0x00817acc:    705f6174    ta_p    DCD    1885299060
        0x00817ad0:    65636f72    roce    DCD    1701015410
        0x00817ad4:    46207373    ss F    DCD    1176531827
        0x00817ad8:    454c4941    AILE    DCD    1162627393
        0x00817adc:    00002e44    D...    DCD    11844
    $t
    .text
    hmac_sha1_init
;;; sample\tuya_ble_sdk\extern_components\mbedtls\hmac.c
;;;47         memset( ctx, 0, sizeof( hmac_sha1_context_t ) );
        0x00817ae0:    2184        .!      MOVS     r1,#0x84
        0x00817ae2:    f442b2bd    B...    B        __aeabi_memclr4 ; 0x5a060
    hmac_sha1_free
;;;48     }
;;;49     
;;;50     void hmac_sha1_free( hmac_sha1_context_t *ctx )
;;;51     {
;;;52         mbedtls_sha1_free((mbedtls_sha1_context *)ctx->md_ctx);
        0x00817ae6:    6800        .h      LDR      r0,[r0,#0]
        0x00817ae8:    f000be75    ..u.    B.W      mbedtls_sha1_free ; 0x8187d6
    hmac_sha1_setup
;;;53     }
;;;54     
;;;55     
;;;56     int32_t hmac_sha1_setup( hmac_sha1_context_t *ctx, int32_t hmac )
;;;57     {
;;;58         return 0;
        0x00817aec:    2000        .       MOVS     r0,#0
;;;59     }
        0x00817aee:    4770        pG      BX       lr
    hmac_sha1_starts
;;;60     
;;;61     int hmac_sha1_starts( hmac_sha1_context_t *ctx, const uint8_t *key, uint32_t keylen )
;;;62     {
        0x00817af0:    b570        p.      PUSH     {r4-r6,lr}
        0x00817af2:    b086        ..      SUB      sp,sp,#0x18
        0x00817af4:    4616        .F      MOV      r6,r2
        0x00817af6:    460d        .F      MOV      r5,r1
        0x00817af8:    4604        .F      MOV      r4,r0
        0x00817afa:    2a40        @*      CMP      r2,#0x40
;;; sample\tuya_ble_sdk\extern_components\mbedtls\hmac.c (62)
        0x00817afc:    d90d        ..      BLS      0x817b1a ; hmac_sha1_starts + 42
;;;63     
;;;64         uint8_t sum[SHA1_DIGEST_SIZE];
;;;65         uint32_t i;
;;;66     
;;;67         if( keylen > (uint32_t) SHA1_BLOCK_SIZE )
;;;68         {
;;;69             mbedtls_sha1_starts( (mbedtls_sha1_context *) ctx->md_ctx);
        0x00817afe:    6820         h      LDR      r0,[r4,#0]
        0x00817b00:    f000fe83    ....    BL       mbedtls_sha1_starts ; 0x81880a
;;;70             mbedtls_sha1_update( (mbedtls_sha1_context *) ctx->md_ctx, key, keylen );
        0x00817b04:    4632        2F      MOV      r2,r6
        0x00817b06:    4629        )F      MOV      r1,r5
        0x00817b08:    6820         h      LDR      r0,[r4,#0]
        0x00817b0a:    f002f89b    ....    BL       mbedtls_sha1_update ; 0x819c44
;;;71             mbedtls_sha1_finish( (mbedtls_sha1_context *) ctx->md_ctx, sum );
        0x00817b0e:    4669        iF      MOV      r1,sp
        0x00817b10:    6820         h      LDR      r0,[r4,#0]
        0x00817b12:    f002f913    ....    BL       mbedtls_sha1_finish ; 0x819d3c
;;;72     
;;;73             keylen = SHA1_DIGEST_SIZE;
        0x00817b16:    2614        .&      MOVS     r6,#0x14
;;;74             key = sum;
        0x00817b18:    466d        mF      MOV      r5,sp
;;;75         }
;;;76     
;;;77     
;;;78         memset( ctx->ipad, 0x36, SHA1_BLOCK_SIZE );
        0x00817b1a:    2236        6"      MOVS     r2,#0x36
        0x00817b1c:    2140        @!      MOVS     r1,#0x40
        0x00817b1e:    1d20         .      ADDS     r0,r4,#4
        0x00817b20:    f442f274    B.t.    BL       __aeabi_memset ; 0x5a00c
;;;79         memset( ctx->opad, 0x5C, SHA1_BLOCK_SIZE );
        0x00817b24:    225c        \"      MOVS     r2,#0x5c
        0x00817b26:    2140        @!      MOVS     r1,#0x40
        0x00817b28:    f1040044    ..D.    ADD      r0,r4,#0x44
        0x00817b2c:    f442f26e    B.n.    BL       __aeabi_memset ; 0x5a00c
;;;80     
;;;81         for( i = 0; i < keylen; i++ )
        0x00817b30:    2300        .#      MOVS     r3,#0
        0x00817b32:    e00b        ..      B        0x817b4c ; hmac_sha1_starts + 92
        0x00817b34:    18e0        ..      ADDS     r0,r4,r3
        0x00817b36:    5cea        .\      LDRB     r2,[r5,r3]
        0x00817b38:    7901        .y      LDRB     r1,[r0,#4]
        0x00817b3a:    4051        Q@      EORS     r1,r1,r2
        0x00817b3c:    7101        .q      STRB     r1,[r0,#4]
        0x00817b3e:    f8901044    ..D.    LDRB     r1,[r0,#0x44]
        0x00817b42:    5cea        .\      LDRB     r2,[r5,r3]
        0x00817b44:    4051        Q@      EORS     r1,r1,r2
        0x00817b46:    f8801044    ..D.    STRB     r1,[r0,#0x44]
        0x00817b4a:    1c5b        [.      ADDS     r3,r3,#1
        0x00817b4c:    42b3        .B      CMP      r3,r6
        0x00817b4e:    d3f1        ..      BCC      0x817b34 ; hmac_sha1_starts + 68
;;;82         {
;;;83             ctx->ipad[i] = (uint8_t)( ctx->ipad[i] ^ key[i] );
;;;84             ctx->opad[i] = (uint8_t)( ctx->opad[i] ^ key[i] );
;;;85         }
;;;86     
;;;87         memset( sum, 0,sizeof( sum ) );
        0x00817b50:    2114        .!      MOVS     r1,#0x14
        0x00817b52:    4668        hF      MOV      r0,sp
        0x00817b54:    f442f284    B...    BL       __aeabi_memclr4 ; 0x5a060
;;;88     
;;;89         mbedtls_sha1_starts( (mbedtls_sha1_context *) ctx->md_ctx);
        0x00817b58:    6820         h      LDR      r0,[r4,#0]
        0x00817b5a:    f000fe56    ..V.    BL       mbedtls_sha1_starts ; 0x81880a
;;;90         mbedtls_sha1_update( (mbedtls_sha1_context *) ctx->md_ctx, ctx->ipad, SHA1_BLOCK_SIZE );
        0x00817b5e:    2240        @"      MOVS     r2,#0x40
        0x00817b60:    1d21        !.      ADDS     r1,r4,#4
        0x00817b62:    6820         h      LDR      r0,[r4,#0]
        0x00817b64:    f002f86e    ..n.    BL       mbedtls_sha1_update ; 0x819c44
        0x00817b68:    b006        ..      ADD      sp,sp,#0x18
;;;91     
;;;92         return 0;
        0x00817b6a:    2000        .       MOVS     r0,#0
;;;93     
;;;94     }
        0x00817b6c:    bd70        p.      POP      {r4-r6,pc}
    hmac_sha1_update
;;;95     
;;;96     int32_t hmac_sha1_update( hmac_sha1_context_t *ctx, const uint8_t *input, uint32_t ilen )
;;;97     {
        0x00817b6e:    b510        ..      PUSH     {r4,lr}
;;;98         mbedtls_sha1_update( (mbedtls_sha1_context *) ctx->md_ctx, input, ilen );
        0x00817b70:    6800        .h      LDR      r0,[r0,#0]
        0x00817b72:    f002f867    ..g.    BL       mbedtls_sha1_update ; 0x819c44
;;;99         return 0;
        0x00817b76:    2000        .       MOVS     r0,#0
;;;100    }
        0x00817b78:    bd10        ..      POP      {r4,pc}
    hmac_sha1_finish
;;;101    
;;;102    int32_t hmac_sha1_finish( hmac_sha1_context_t *ctx, uint8_t *output )
;;;103    {
        0x00817b7a:    b530        0.      PUSH     {r4,r5,lr}
        0x00817b7c:    b085        ..      SUB      sp,sp,#0x14
        0x00817b7e:    460d        .F      MOV      r5,r1
        0x00817b80:    4604        .F      MOV      r4,r0
;;;104        uint8_t tmp[SHA1_DIGEST_SIZE];
;;;105    
;;;106        mbedtls_sha1_finish( (mbedtls_sha1_context *) ctx->md_ctx, tmp );
        0x00817b82:    6800        .h      LDR      r0,[r0,#0]
        0x00817b84:    4669        iF      MOV      r1,sp
        0x00817b86:    f002f8d9    ....    BL       mbedtls_sha1_finish ; 0x819d3c
;;;107        mbedtls_sha1_starts( (mbedtls_sha1_context *) ctx->md_ctx);
        0x00817b8a:    6820         h      LDR      r0,[r4,#0]
        0x00817b8c:    f000fe3d    ..=.    BL       mbedtls_sha1_starts ; 0x81880a
;;;108        mbedtls_sha1_update( (mbedtls_sha1_context *) ctx->md_ctx, ctx->opad, SHA1_BLOCK_SIZE );
        0x00817b90:    2240        @"      MOVS     r2,#0x40
        0x00817b92:    f1040144    ..D.    ADD      r1,r4,#0x44
        0x00817b96:    6820         h      LDR      r0,[r4,#0]
        0x00817b98:    f002f854    ..T.    BL       mbedtls_sha1_update ; 0x819c44
;;;109        mbedtls_sha1_update( (mbedtls_sha1_context *) ctx->md_ctx, tmp, SHA1_DIGEST_SIZE );
        0x00817b9c:    2214        ."      MOVS     r2,#0x14
        0x00817b9e:    4669        iF      MOV      r1,sp
        0x00817ba0:    6820         h      LDR      r0,[r4,#0]
        0x00817ba2:    f002f84f    ..O.    BL       mbedtls_sha1_update ; 0x819c44
;;;110        mbedtls_sha1_finish( (mbedtls_sha1_context *) ctx->md_ctx, output );
        0x00817ba6:    4629        )F      MOV      r1,r5
        0x00817ba8:    6820         h      LDR      r0,[r4,#0]
        0x00817baa:    f002f8c7    ....    BL       mbedtls_sha1_finish ; 0x819d3c
        0x00817bae:    b005        ..      ADD      sp,sp,#0x14
;;;111    
;;;112        return 0;
        0x00817bb0:    2000        .       MOVS     r0,#0
;;;113    }
        0x00817bb2:    bd30        0.      POP      {r4,r5,pc}
    hmac_sha1_reset
;;;114    
;;;115    int32_t hmac_sha1_reset( hmac_sha1_context_t *ctx )
;;;116    {
        0x00817bb4:    b510        ..      PUSH     {r4,lr}
        0x00817bb6:    4604        .F      MOV      r4,r0
;;;117    
;;;118        mbedtls_sha1_starts( (mbedtls_sha1_context *) ctx->md_ctx);
        0x00817bb8:    6800        .h      LDR      r0,[r0,#0]
        0x00817bba:    f000fe26    ..&.    BL       mbedtls_sha1_starts ; 0x81880a
;;;119        mbedtls_sha1_update( (mbedtls_sha1_context *) ctx->md_ctx, ctx->ipad, SHA1_BLOCK_SIZE );
        0x00817bbe:    2240        @"      MOVS     r2,#0x40
        0x00817bc0:    1d21        !.      ADDS     r1,r4,#4
        0x00817bc2:    6820         h      LDR      r0,[r4,#0]
        0x00817bc4:    f002f83e    ..>.    BL       mbedtls_sha1_update ; 0x819c44
;;;120    
;;;121        return 0 ;
        0x00817bc8:    2000        .       MOVS     r0,#0
;;;122    }
        0x00817bca:    bd10        ..      POP      {r4,pc}
    hmac_sha1_crypt
;;;123    
;;;124    int32_t hmac_sha1_crypt( const uint8_t *key, uint32_t keylen, const uint8_t *input, uint32_t ilen, uint8_t *output )
;;;125    {
        0x00817bcc:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x00817bd0:    b0b8        ..      SUB      sp,sp,#0xe0
        0x00817bd2:    4605        .F      MOV      r5,r0
        0x00817bd4:    461f        .F      MOV      r7,r3
        0x00817bd6:    4690        .F      MOV      r8,r2
        0x00817bd8:    460c        .F      MOV      r4,r1
;;;126        hmac_sha1_context_t ctx;
;;;127        mbedtls_sha1_context sha_ctx;
;;;128        int32_t ret;
;;;129    
;;;130        hmac_sha1_init( &ctx );
        0x00817bda:    4668        hF      MOV      r0,sp
        0x00817bdc:    9e3e        >.      LDR      r6,[sp,#0xf8]
        0x00817bde:    f7ffff7f    ....    BL       hmac_sha1_init ; 0x817ae0
;;;131        memset(&sha_ctx, 0, sizeof(sha_ctx));
        0x00817be2:    215c        \!      MOVS     r1,#0x5c
        0x00817be4:    a821        !.      ADD      r0,sp,#0x84
        0x00817be6:    f442f23b    B.;.    BL       __aeabi_memclr4 ; 0x5a060
;;;132        ctx.md_ctx = &sha_ctx;
        0x00817bea:    a821        !.      ADD      r0,sp,#0x84
;;;133        if( ( ret = hmac_sha1_setup( &ctx, 1 ) ) != 0 )
;;;134            return( ret );
;;;135    
;;;136        hmac_sha1_starts( &ctx, key, keylen );
        0x00817bec:    9000        ..      STR      r0,[sp,#0]
        0x00817bee:    4622        "F      MOV      r2,r4
        0x00817bf0:    4629        )F      MOV      r1,r5
        0x00817bf2:    4668        hF      MOV      r0,sp
        0x00817bf4:    f7ffff7c    ..|.    BL       hmac_sha1_starts ; 0x817af0
;;;137        hmac_sha1_update( &ctx, input, ilen );
        0x00817bf8:    463a        :F      MOV      r2,r7
        0x00817bfa:    4641        AF      MOV      r1,r8
        0x00817bfc:    4668        hF      MOV      r0,sp
        0x00817bfe:    f7ffffb6    ....    BL       hmac_sha1_update ; 0x817b6e
;;;138        hmac_sha1_finish( &ctx, output );
        0x00817c02:    4631        1F      MOV      r1,r6
        0x00817c04:    4668        hF      MOV      r0,sp
        0x00817c06:    f7ffffb8    ....    BL       hmac_sha1_finish ; 0x817b7a
        0x00817c0a:    b038        8.      ADD      sp,sp,#0xe0
;;;139    
;;;140        return( 0 );
        0x00817c0c:    2000        .       MOVS     r0,#0
;;;141    }
        0x00817c0e:    e8bd81f0    ....    POP      {r4-r8,pc}
    hmac_sha256_init
;;;142    
;;;143    //
;;;144    
;;;145    void hmac_sha256_init( hmac_sha256_context_t *ctx )
;;;146    {
;;;147        memset( ctx, 0, sizeof( hmac_sha256_context_t ) );
        0x00817c12:    2184        .!      MOVS     r1,#0x84
        0x00817c14:    f442b224    B.$.    B        __aeabi_memclr4 ; 0x5a060
    hmac_sha256_free
;;;148    }
;;;149    
;;;150    void hmac_sha256_free( hmac_sha256_context_t *ctx )
;;;151    {
;;;152        mbedtls_sha256_free((mbedtls_sha256_context *)ctx->md_ctx);
        0x00817c18:    6800        .h      LDR      r0,[r0,#0]
        0x00817c1a:    f002b8b4    ....    B.W      mbedtls_sha256_free ; 0x819d86
    hmac_sha256_setup
;;;153    }
;;;154    
;;;155    
;;;156    int32_t hmac_sha256_setup( hmac_sha256_context_t *ctx, int32_t hmac )
;;;157    {
;;;158        return 0;
        0x00817c1e:    2000        .       MOVS     r0,#0
;;;159    }
        0x00817c20:    4770        pG      BX       lr
    hmac_sha256_starts
;;;160    
;;;161    int hmac_sha256_starts( hmac_sha256_context_t *ctx, const uint8_t *key, uint32_t keylen )
;;;162    {
        0x00817c22:    b570        p.      PUSH     {r4-r6,lr}
        0x00817c24:    b088        ..      SUB      sp,sp,#0x20
        0x00817c26:    4616        .F      MOV      r6,r2
        0x00817c28:    460d        .F      MOV      r5,r1
        0x00817c2a:    4604        .F      MOV      r4,r0
        0x00817c2c:    2a40        @*      CMP      r2,#0x40
        0x00817c2e:    d90e        ..      BLS      0x817c4e ; hmac_sha256_starts + 44
;;;163    
;;;164        uint8_t sum[SHA256_DIGEST_SIZE];
;;;165        uint32_t i;
;;;166    
;;;167        if( keylen > (uint32_t) SHA256_BLOCK_SIZE )
;;;168        {
;;;169            mbedtls_sha256_starts( (mbedtls_sha256_context *) ctx->md_ctx, 0);
        0x00817c30:    2100        .!      MOVS     r1,#0
        0x00817c32:    6820         h      LDR      r0,[r4,#0]
        0x00817c34:    f002f8d7    ....    BL       mbedtls_sha256_starts ; 0x819de6
;;;170            mbedtls_sha256_update( (mbedtls_sha256_context *) ctx->md_ctx, key, keylen );
        0x00817c38:    4632        2F      MOV      r2,r6
        0x00817c3a:    4629        )F      MOV      r1,r5
        0x00817c3c:    6820         h      LDR      r0,[r4,#0]
        0x00817c3e:    f002fd3d    ..=.    BL       mbedtls_sha256_update ; 0x81a6bc
;;;171            mbedtls_sha256_finish( (mbedtls_sha256_context *) ctx->md_ctx, sum );
        0x00817c42:    4669        iF      MOV      r1,sp
        0x00817c44:    6820         h      LDR      r0,[r4,#0]
        0x00817c46:    f002fddb    ....    BL       mbedtls_sha256_finish ; 0x81a800
;;;172    
;;;173            keylen = SHA256_DIGEST_SIZE;
        0x00817c4a:    2620         &      MOVS     r6,#0x20
;;;174            key = sum;
        0x00817c4c:    466d        mF      MOV      r5,sp
;;;175        }
;;;176    
;;;177    
;;;178        memset( ctx->ipad, 0x36, SHA256_BLOCK_SIZE );
        0x00817c4e:    2236        6"      MOVS     r2,#0x36
        0x00817c50:    2140        @!      MOVS     r1,#0x40
        0x00817c52:    1d20         .      ADDS     r0,r4,#4
        0x00817c54:    f442f1da    B...    BL       __aeabi_memset ; 0x5a00c
;;;179        memset( ctx->opad, 0x5C, SHA256_BLOCK_SIZE );
        0x00817c58:    225c        \"      MOVS     r2,#0x5c
        0x00817c5a:    2140        @!      MOVS     r1,#0x40
        0x00817c5c:    f1040044    ..D.    ADD      r0,r4,#0x44
        0x00817c60:    f442f1d4    B...    BL       __aeabi_memset ; 0x5a00c
;;;180    
;;;181        for( i = 0; i < keylen; i++ )
        0x00817c64:    2300        .#      MOVS     r3,#0
        0x00817c66:    e00b        ..      B        0x817c80 ; hmac_sha256_starts + 94
        0x00817c68:    18e0        ..      ADDS     r0,r4,r3
        0x00817c6a:    5cea        .\      LDRB     r2,[r5,r3]
        0x00817c6c:    7901        .y      LDRB     r1,[r0,#4]
        0x00817c6e:    4051        Q@      EORS     r1,r1,r2
        0x00817c70:    7101        .q      STRB     r1,[r0,#4]
        0x00817c72:    f8901044    ..D.    LDRB     r1,[r0,#0x44]
        0x00817c76:    5cea        .\      LDRB     r2,[r5,r3]
        0x00817c78:    4051        Q@      EORS     r1,r1,r2
        0x00817c7a:    f8801044    ..D.    STRB     r1,[r0,#0x44]
        0x00817c7e:    1c5b        [.      ADDS     r3,r3,#1
        0x00817c80:    42b3        .B      CMP      r3,r6
        0x00817c82:    d3f1        ..      BCC      0x817c68 ; hmac_sha256_starts + 70
;;;182        {
;;;183            ctx->ipad[i] = (uint8_t)( ctx->ipad[i] ^ key[i] );
;;;184            ctx->opad[i] = (uint8_t)( ctx->opad[i] ^ key[i] );
;;;185        }
;;;186    
;;;187        memset( sum, 0,sizeof( sum ) );
        0x00817c84:    2120         !      MOVS     r1,#0x20
        0x00817c86:    4668        hF      MOV      r0,sp
        0x00817c88:    f442f1ea    B...    BL       __aeabi_memclr4 ; 0x5a060
;;;188    
;;;189        mbedtls_sha256_starts( (mbedtls_sha256_context *) ctx->md_ctx, 0);
        0x00817c8c:    2100        .!      MOVS     r1,#0
        0x00817c8e:    6820         h      LDR      r0,[r4,#0]
        0x00817c90:    f002f8a9    ....    BL       mbedtls_sha256_starts ; 0x819de6
;;;190        mbedtls_sha256_update( (mbedtls_sha256_context *) ctx->md_ctx, ctx->ipad, SHA256_BLOCK_SIZE );
        0x00817c94:    2240        @"      MOVS     r2,#0x40
        0x00817c96:    1d21        !.      ADDS     r1,r4,#4
        0x00817c98:    6820         h      LDR      r0,[r4,#0]
        0x00817c9a:    f002fd0f    ....    BL       mbedtls_sha256_update ; 0x81a6bc
        0x00817c9e:    b008        ..      ADD      sp,sp,#0x20
;;;191    
;;;192        return 0;
        0x00817ca0:    2000        .       MOVS     r0,#0
;;;193    
;;;194    }
        0x00817ca2:    bd70        p.      POP      {r4-r6,pc}
    hmac_sha256_update
;;;195    
;;;196    int32_t hmac_sha256_update( hmac_sha256_context_t *ctx, const uint8_t *input, uint32_t ilen )
;;;197    {
        0x00817ca4:    b510        ..      PUSH     {r4,lr}
;;;198        mbedtls_sha256_update( (mbedtls_sha256_context *) ctx->md_ctx, input, ilen );
        0x00817ca6:    6800        .h      LDR      r0,[r0,#0]
        0x00817ca8:    f002fd08    ....    BL       mbedtls_sha256_update ; 0x81a6bc
;;;199        return 0;
        0x00817cac:    2000        .       MOVS     r0,#0
;;;200    }
        0x00817cae:    bd10        ..      POP      {r4,pc}
    hmac_sha256_finish
;;;201    
;;;202    int32_t hmac_sha256_finish( hmac_sha256_context_t *ctx, uint8_t *output )
;;;203    {
        0x00817cb0:    b530        0.      PUSH     {r4,r5,lr}
        0x00817cb2:    b089        ..      SUB      sp,sp,#0x24
        0x00817cb4:    460d        .F      MOV      r5,r1
        0x00817cb6:    4604        .F      MOV      r4,r0
;;;204        uint8_t tmp[SHA256_DIGEST_SIZE];
;;;205    
;;;206        mbedtls_sha256_finish( (mbedtls_sha256_context *) ctx->md_ctx, tmp );
        0x00817cb8:    6800        .h      LDR      r0,[r0,#0]
        0x00817cba:    4669        iF      MOV      r1,sp
        0x00817cbc:    f002fda0    ....    BL       mbedtls_sha256_finish ; 0x81a800
;;;207        mbedtls_sha256_starts( (mbedtls_sha256_context *) ctx->md_ctx , 0);
        0x00817cc0:    2100        .!      MOVS     r1,#0
        0x00817cc2:    6820         h      LDR      r0,[r4,#0]
        0x00817cc4:    f002f88f    ....    BL       mbedtls_sha256_starts ; 0x819de6
;;;208        mbedtls_sha256_update( (mbedtls_sha256_context *) ctx->md_ctx, ctx->opad, SHA256_BLOCK_SIZE );
        0x00817cc8:    2240        @"      MOVS     r2,#0x40
        0x00817cca:    f1040144    ..D.    ADD      r1,r4,#0x44
        0x00817cce:    6820         h      LDR      r0,[r4,#0]
        0x00817cd0:    f002fcf4    ....    BL       mbedtls_sha256_update ; 0x81a6bc
;;;209        mbedtls_sha256_update( (mbedtls_sha256_context *) ctx->md_ctx, tmp, SHA256_DIGEST_SIZE );
        0x00817cd4:    2220         "      MOVS     r2,#0x20
        0x00817cd6:    4669        iF      MOV      r1,sp
        0x00817cd8:    6820         h      LDR      r0,[r4,#0]
        0x00817cda:    f002fcef    ....    BL       mbedtls_sha256_update ; 0x81a6bc
;;;210        mbedtls_sha256_finish( (mbedtls_sha256_context *) ctx->md_ctx, output );
        0x00817cde:    4629        )F      MOV      r1,r5
        0x00817ce0:    6820         h      LDR      r0,[r4,#0]
        0x00817ce2:    f002fd8d    ....    BL       mbedtls_sha256_finish ; 0x81a800
        0x00817ce6:    b009        ..      ADD      sp,sp,#0x24
;;;211    
;;;212        return 0;
        0x00817ce8:    2000        .       MOVS     r0,#0
;;;213    }
        0x00817cea:    bd30        0.      POP      {r4,r5,pc}
    hmac_sha256_reset
;;;214    
;;;215    int32_t hmac_sha256_reset( hmac_sha256_context_t *ctx )
;;;216    {
        0x00817cec:    b510        ..      PUSH     {r4,lr}
        0x00817cee:    4604        .F      MOV      r4,r0
;;;217    
;;;218        mbedtls_sha256_starts( (mbedtls_sha256_context *) ctx->md_ctx , 0);
        0x00817cf0:    6800        .h      LDR      r0,[r0,#0]
        0x00817cf2:    2100        .!      MOVS     r1,#0
        0x00817cf4:    f002f877    ..w.    BL       mbedtls_sha256_starts ; 0x819de6
;;;219        mbedtls_sha256_update( (mbedtls_sha256_context *) ctx->md_ctx, ctx->ipad, SHA256_BLOCK_SIZE );
        0x00817cf8:    2240        @"      MOVS     r2,#0x40
        0x00817cfa:    1d21        !.      ADDS     r1,r4,#4
        0x00817cfc:    6820         h      LDR      r0,[r4,#0]
        0x00817cfe:    f002fcdd    ....    BL       mbedtls_sha256_update ; 0x81a6bc
;;;220    
;;;221        return 0 ;
        0x00817d02:    2000        .       MOVS     r0,#0
;;;222    }
        0x00817d04:    bd10        ..      POP      {r4,pc}
    hmac_sha256_crypt
;;;223    
;;;224    int32_t hmac_sha256_crypt( const uint8_t *key, uint32_t keylen, const uint8_t *input, uint32_t ilen, uint8_t *output )
;;;225    {
        0x00817d06:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x00817d0a:    b0bc        ..      SUB      sp,sp,#0xf0
        0x00817d0c:    4605        .F      MOV      r5,r0
        0x00817d0e:    461f        .F      MOV      r7,r3
        0x00817d10:    4690        .F      MOV      r8,r2
        0x00817d12:    460c        .F      MOV      r4,r1
;;;226        hmac_sha256_context_t ctx;
;;;227        mbedtls_sha256_context sha_ctx;
;;;228        int32_t ret;
;;;229    
;;;230        hmac_sha256_init( &ctx );
        0x00817d14:    4668        hF      MOV      r0,sp
        0x00817d16:    9e42        B.      LDR      r6,[sp,#0x108]
        0x00817d18:    f7ffff7b    ..{.    BL       hmac_sha256_init ; 0x817c12
;;;231        memset(&sha_ctx, 0, sizeof(sha_ctx));
        0x00817d1c:    216c        l!      MOVS     r1,#0x6c
        0x00817d1e:    a821        !.      ADD      r0,sp,#0x84
        0x00817d20:    f442f19e    B...    BL       __aeabi_memclr4 ; 0x5a060
;;;232        ctx.md_ctx = &sha_ctx;
        0x00817d24:    a821        !.      ADD      r0,sp,#0x84
;;;233        if( ( ret = hmac_sha256_setup( &ctx, 1 ) ) != 0 )
;;;234            return( ret );
;;;235    
;;;236        hmac_sha256_starts( &ctx, key, keylen );
        0x00817d26:    9000        ..      STR      r0,[sp,#0]
        0x00817d28:    4622        "F      MOV      r2,r4
        0x00817d2a:    4629        )F      MOV      r1,r5
        0x00817d2c:    4668        hF      MOV      r0,sp
        0x00817d2e:    f7ffff78    ..x.    BL       hmac_sha256_starts ; 0x817c22
;;;237        hmac_sha256_update( &ctx, input, ilen );
        0x00817d32:    463a        :F      MOV      r2,r7
        0x00817d34:    4641        AF      MOV      r1,r8
        0x00817d36:    4668        hF      MOV      r0,sp
        0x00817d38:    f7ffffb4    ....    BL       hmac_sha256_update ; 0x817ca4
;;;238        hmac_sha256_finish( &ctx, output );
        0x00817d3c:    4631        1F      MOV      r1,r6
        0x00817d3e:    4668        hF      MOV      r0,sp
        0x00817d40:    f7ffffb6    ....    BL       hmac_sha256_finish ; 0x817cb0
;;;239    
;;;240        return( 0 );
        0x00817d44:    2000        .       MOVS     r0,#0
;;;241    }
        0x00817d46:    b03c        <.      ADD      sp,sp,#0xf0
        0x00817d48:    e761        a.      B        0x817c0e ; hmac_sha1_crypt + 66
    sha256_hkdf
;;;242    
;;;243    uint32_t sha256_hkdf(const uint8_t *key, uint32_t key_len,
;;;244                                    const uint8_t *salt, uint32_t salt_len,
;;;245                                    const uint8_t *info, uint32_t info_len,
;;;246                                    uint8_t *out, uint32_t out_len)
;;;247    {
        0x00817d4a:    e92d4ff0    -..O    PUSH     {r4-r11,lr}
        0x00817d4e:    b099        ..      SUB      sp,sp,#0x64
        0x00817d50:    460f        .F      MOV      r7,r1
        0x00817d52:    e9dda524    ..$.    LDRD     r10,r5,[sp,#0x90]
        0x00817d56:    e9ddb822    ..".    LDRD     r11,r8,[sp,#0x88]
        0x00817d5a:    4681        .F      MOV      r9,r0
        0x00817d5c:    461e        .F      MOV      r6,r3
        0x00817d5e:    4614        .F      MOV      r4,r2
;;;248        const uint8_t null_salt[32] = {0};
        0x00817d60:    2120         !      MOVS     r1,#0x20
        0x00817d62:    a809        ..      ADD      r0,sp,#0x24
        0x00817d64:    f442f17c    B.|.    BL       __aeabi_memclr4 ; 0x5a060
;;;249        uint8_t PRK[32];
        0x00817d68:    a811        ..      ADD      r0,sp,#0x44
        0x00817d6a:    463b        ;F      MOV      r3,r7
        0x00817d6c:    464a        JF      MOV      r2,r9
;;;250        uint8_t T_n[32];
;;;251        uint32_t loop;
;;;252        uint32_t temp_len;
;;;253    
;;;254        // Step 1: HKDF-Extract(salt, IKM) -> PRK
;;;255        if (salt == NULL)
        0x00817d6e:    9000        ..      STR      r0,[sp,#0]
        0x00817d70:    b194        ..      CBZ      r4,0x817d98 ; sha256_hkdf + 78
;;;256            hmac_sha256_crypt(null_salt, 32, key, key_len, PRK);
;;;257        else
;;;258            hmac_sha256_crypt(salt, salt_len, key, key_len, PRK);
        0x00817d72:    4631        1F      MOV      r1,r6
        0x00817d74:    4620         F      MOV      r0,r4
        0x00817d76:    f7ffffc6    ....    BL       hmac_sha256_crypt ; 0x817d06
;;;259    
;;;260        // Step 2: HKDF-Expand(PRK, info, L) -> OKM
;;;261        //T(0) = empty string (zero length)
;;;262        //T(1) = HMAC-Hash(PRK, T(0) | info | 0x01)
;;;263        //T(2) = HMAC-Hash(PRK, T(1) | info | 0x02)
;;;264        //T(3) = HMAC-Hash(PRK, T(2) | info | 0x03)
;;;265    
;;;266        uint8_t temp[32 + info_len + 1];
        0x00817d7a:    f1080021    ..!.    ADD      r0,r8,#0x21
        0x00817d7e:    4604        .F      MOV      r4,r0
        0x00817d80:    f7f6fd2a    ..*.    BL       malloc ; 0x80e7d8
        0x00817d84:    4607        .F      MOV      r7,r0
        0x00817d86:    4621        !F      MOV      r1,r4
;;;267        memset(temp, 0, 32 + info_len +1);
        0x00817d88:    f442f148    B.H.    BL       __aeabi_memclr ; 0x5a01c
;;;268        loop = CEIL_DIV(out_len, 32);
        0x00817d8c:    f105001f    ....    ADD      r0,r5,#0x1f
        0x00817d90:    ea4f1950    O.P.    LSR      r9,r0,#5
;;;269    
;;;270        for (int32_t i = 0; i < loop ; i++) {
        0x00817d94:    2400        .$      MOVS     r4,#0
        0x00817d96:    e028        (.      B        0x817dea ; sha256_hkdf + 160
        0x00817d98:    2120         !      MOVS     r1,#0x20
        0x00817d9a:    a809        ..      ADD      r0,sp,#0x24
        0x00817d9c:    e7eb        ..      B        0x817d76 ; sha256_hkdf + 44
;;;271            if (i == 0) {
        0x00817d9e:    b1d4        ..      CBZ      r4,0x817dd6 ; sha256_hkdf + 140
;;;272                temp_len = 0;
;;;273            } else {
;;;274                memcpy(temp, T_n, 32);
        0x00817da0:    2220         "      MOVS     r2,#0x20
        0x00817da2:    a901        ..      ADD      r1,sp,#4
        0x00817da4:    4638        8F      MOV      r0,r7
        0x00817da6:    f442f078    B.x.    BL       __aeabi_memcpy ; 0x59e9a
;;;275                temp_len = 32;
        0x00817daa:    2620         &      MOVS     r6,#0x20
;;;276            }
;;;277    
;;;278            memcpy(temp + temp_len, info, info_len);
        0x00817dac:    19b8        ..      ADDS     r0,r7,r6
        0x00817dae:    4642        BF      MOV      r2,r8
        0x00817db0:    4659        YF      MOV      r1,r11
        0x00817db2:    f442f072    B.r.    BL       __aeabi_memcpy ; 0x59e9a
;;;279            temp_len += info_len;
        0x00817db6:    eb060308    ....    ADD      r3,r6,r8
;;;280    
;;;281            temp[temp_len] = i + 1;
        0x00817dba:    1c60        `.      ADDS     r0,r4,#1
        0x00817dbc:    54f8        .T      STRB     r0,[r7,r3]
;;;282            temp_len += 1;
;;;283    
;;;284            hmac_sha256_crypt(PRK, 32, temp, temp_len, T_n);
        0x00817dbe:    a801        ..      ADD      r0,sp,#4
        0x00817dc0:    9000        ..      STR      r0,[sp,#0]
        0x00817dc2:    463a        :F      MOV      r2,r7
        0x00817dc4:    2120         !      MOVS     r1,#0x20
        0x00817dc6:    a811        ..      ADD      r0,sp,#0x44
        0x00817dc8:    1c5b        [.      ADDS     r3,r3,#1
        0x00817dca:    f7ffff9c    ....    BL       hmac_sha256_crypt ; 0x817d06
;;;285    
;;;286            memcpy(out + 32 * i, T_n, MIN(32, out_len));
        0x00817dce:    2d20         -      CMP      r5,#0x20
        0x00817dd0:    d903        ..      BLS      0x817dda ; sha256_hkdf + 144
        0x00817dd2:    2220         "      MOVS     r2,#0x20
        0x00817dd4:    e002        ..      B        0x817ddc ; sha256_hkdf + 146
        0x00817dd6:    2600        .&      MOVS     r6,#0
        0x00817dd8:    e7e8        ..      B        0x817dac ; sha256_hkdf + 98
        0x00817dda:    462a        *F      MOV      r2,r5
        0x00817ddc:    eb0a1044    ..D.    ADD      r0,r10,r4,LSL #5
        0x00817de0:    a901        ..      ADD      r1,sp,#4
        0x00817de2:    f442f05a    B.Z.    BL       __aeabi_memcpy ; 0x59e9a
        0x00817de6:    1c64        d.      ADDS     r4,r4,#1
        0x00817de8:    3d20         =      SUBS     r5,r5,#0x20
        0x00817dea:    454c        LE      CMP      r4,r9
        0x00817dec:    d3d7        ..      BCC      0x817d9e ; sha256_hkdf + 84
        0x00817dee:    4638        8F      MOV      r0,r7
        0x00817df0:    f7f6fd10    ....    BL       free ; 0x80e814
        0x00817df4:    b019        ..      ADD      sp,sp,#0x64
;;;287            out_len -= 32;
;;;288        }
;;;289    
;;;290        return 0;
        0x00817df6:    2000        .       MOVS     r0,#0
;;;291    }
        0x00817df8:    e8bd8ff0    ....    POP      {r4-r11,pc}
    .text
    mbedtls_md5_init
;;; sample\tuya_ble_sdk\extern_components\mbedtls\md5.c
;;;64         memset( ctx, 0, sizeof( mbedtls_md5_context ) );
        0x00817dfc:    2158        X!      MOVS     r1,#0x58
        0x00817dfe:    f442b12f    B./.    B        __aeabi_memclr4 ; 0x5a060
    mbedtls_md5_free
;;;65     }
;;;66     
;;;67     void mbedtls_md5_free( mbedtls_md5_context *ctx )
;;;68     {
        0x00817e02:    2800        .(      CMP      r0,#0
        0x00817e04:    d002        ..      BEQ      0x817e0c ; mbedtls_md5_free + 10
;;;69         if( ctx == NULL )
;;;70             return;
;;;71     
;;;72         //mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md5_context ) );
;;;73         memset( ctx, 0, sizeof( mbedtls_md5_context ) );
        0x00817e06:    2158        X!      MOVS     r1,#0x58
        0x00817e08:    f442b12a    B.*.    B        __aeabi_memclr4 ; 0x5a060
;;;74     }
        0x00817e0c:    4770        pG      BX       lr
    mbedtls_md5_clone
;;;75     
;;;76     void mbedtls_md5_clone( mbedtls_md5_context *dst,
;;;77                             const mbedtls_md5_context *src )
;;;78     {
;;;79         *dst = *src;
        0x00817e0e:    2258        X"      MOVS     r2,#0x58
        0x00817e10:    f442b0ca    B...    B        __aeabi_memcpy4 ; 0x59fa8
    mbedtls_md5_starts_ret
;;;80     }
;;;81     
;;;82     /*
;;;83      * MD5 context setup
;;;84      */
;;;85     int mbedtls_md5_starts_ret( mbedtls_md5_context *ctx )
;;;86     {
;;;87         ctx->total[0] = 0;
        0x00817e14:    2100        .!      MOVS     r1,#0
;;;88         ctx->total[1] = 0;
        0x00817e16:    6001        .`      STR      r1,[r0,#0]
;;;89     
;;;90         ctx->state[0] = 0x67452301;
        0x00817e18:    6041        A`      STR      r1,[r0,#4]
        0x00817e1a:    49fe        .I      LDR      r1,[pc,#1016] ; [0x818214] = 0x67452301
;;;91         ctx->state[1] = 0xEFCDAB89;
        0x00817e1c:    6081        .`      STR      r1,[r0,#8]
        0x00817e1e:    49fe        .I      LDR      r1,[pc,#1016] ; [0x818218] = 0xefcdab89
;;;92         ctx->state[2] = 0x98BADCFE;
        0x00817e20:    60c1        .`      STR      r1,[r0,#0xc]
        0x00817e22:    49fc        .I      LDR      r1,[pc,#1008] ; [0x818214] = 0x67452301
        0x00817e24:    43c9        .C      MVNS     r1,r1
;;;93         ctx->state[3] = 0x10325476;
        0x00817e26:    6101        .a      STR      r1,[r0,#0x10]
        0x00817e28:    49fb        .I      LDR      r1,[pc,#1004] ; [0x818218] = 0xefcdab89
        0x00817e2a:    43c9        .C      MVNS     r1,r1
;;;94     
;;;95         return( 0 );
        0x00817e2c:    6141        Aa      STR      r1,[r0,#0x14]
        0x00817e2e:    2000        .       MOVS     r0,#0
;;;96     }
        0x00817e30:    4770        pG      BX       lr
    mbedtls_md5_starts
;;;97     
;;;98     #if !defined(MBEDTLS_DEPRECATED_REMOVED)
;;;99     void mbedtls_md5_starts( mbedtls_md5_context *ctx )
;;;100    {
;;;101        mbedtls_md5_starts_ret( ctx );
        0x00817e32:    e7ef        ..      B        mbedtls_md5_starts_ret ; 0x817e14
    mbedtls_internal_md5_process
;;;102    }
;;;103    #endif
;;;104    
;;;105    #if !defined(MBEDTLS_MD5_PROCESS_ALT)
;;;106    int mbedtls_internal_md5_process( mbedtls_md5_context *ctx,
;;;107                                      const unsigned char data[64] )
;;;108    {
        0x00817e34:    e92d4ff0    -..O    PUSH     {r4-r11,lr}
;;;109        uint32_t X[16], A, B, C, D;
;;;110    
;;;111        GET_UINT32_LE( X[ 0], data,  0 );
        0x00817e38:    78ca        .x      LDRB     r2,[r1,#3]
        0x00817e3a:    680d        .h      LDR      r5,[r1,#0]
        0x00817e3c:    684e        Nh      LDR      r6,[r1,#4]
        0x00817e3e:    f362651f    b..e    BFI      r5,r2,#24,#8
;;;112        GET_UINT32_LE( X[ 1], data,  4 );
        0x00817e42:    79ca        .y      LDRB     r2,[r1,#7]
        0x00817e44:    f8d1c008    ....    LDR      r12,[r1,#8]
        0x00817e48:    f362661f    b..f    BFI      r6,r2,#24,#8
;;;113        GET_UINT32_LE( X[ 2], data,  8 );
        0x00817e4c:    7aca        .z      LDRB     r2,[r1,#0xb]
        0x00817e4e:    b08d        ..      SUB      sp,sp,#0x34
        0x00817e50:    f3626c1f    b..l    BFI      r12,r2,#24,#8
        0x00817e54:    46e1        .F      MOV      r9,r12
;;;114        GET_UINT32_LE( X[ 3], data, 12 );
        0x00817e56:    7bca        .{      LDRB     r2,[r1,#0xf]
        0x00817e58:    f8d1c00c    ....    LDR      r12,[r1,#0xc]
        0x00817e5c:    f8df83bc    ....    LDR      r8,[pc,#956] ; [0x81821c] = 0xd76aa478
        0x00817e60:    f3626c1f    b..l    BFI      r12,r2,#24,#8
        0x00817e64:    46e3        .F      MOV      r11,r12
;;;115        GET_UINT32_LE( X[ 4], data, 16 );
        0x00817e66:    7cca        .|      LDRB     r2,[r1,#0x13]
        0x00817e68:    f8d1c010    ....    LDR      r12,[r1,#0x10]
        0x00817e6c:    f3626c1f    b..l    BFI      r12,r2,#24,#8
        0x00817e70:    46e6        .F      MOV      lr,r12
;;;116        GET_UINT32_LE( X[ 5], data, 20 );
        0x00817e72:    7dca        .}      LDRB     r2,[r1,#0x17]
        0x00817e74:    f8d1c014    ....    LDR      r12,[r1,#0x14]
        0x00817e78:    f3626c1f    b..l    BFI      r12,r2,#24,#8
        0x00817e7c:    46e2        .F      MOV      r10,r12
;;;117        GET_UINT32_LE( X[ 6], data, 24 );
        0x00817e7e:    7eca        .~      LDRB     r2,[r1,#0x1b]
        0x00817e80:    f8d1c018    ....    LDR      r12,[r1,#0x18]
        0x00817e84:    f3626c1f    b..l    BFI      r12,r2,#24,#8
;;;118        GET_UINT32_LE( X[ 7], data, 28 );
        0x00817e88:    f8cdc000    ....    STR      r12,[sp,#0]
        0x00817e8c:    7fca        ..      LDRB     r2,[r1,#0x1f]
        0x00817e8e:    69cf        .i      LDR      r7,[r1,#0x1c]
        0x00817e90:    f8d1c020    .. .    LDR      r12,[r1,#0x20]
        0x00817e94:    f362671f    b..g    BFI      r7,r2,#24,#8
;;;119        GET_UINT32_LE( X[ 8], data, 32 );
        0x00817e98:    f8912023    ..#     LDRB     r2,[r1,#0x23]
        0x00817e9c:    f3626c1f    b..l    BFI      r12,r2,#24,#8
;;;120        GET_UINT32_LE( X[ 9], data, 36 );
        0x00817ea0:    f8cdc004    ....    STR      r12,[sp,#4]
        0x00817ea4:    f8912027    ..'     LDRB     r2,[r1,#0x27]
        0x00817ea8:    f8d1c024    ..$.    LDR      r12,[r1,#0x24]
        0x00817eac:    f3626c1f    b..l    BFI      r12,r2,#24,#8
;;;121        GET_UINT32_LE( X[10], data, 40 );
        0x00817eb0:    f8cdc008    ....    STR      r12,[sp,#8]
        0x00817eb4:    f891202b    ..+     LDRB     r2,[r1,#0x2b]
        0x00817eb8:    f8d1c028    ..(.    LDR      r12,[r1,#0x28]
        0x00817ebc:    f3626c1f    b..l    BFI      r12,r2,#24,#8
;;;122        GET_UINT32_LE( X[11], data, 44 );
        0x00817ec0:    f8cdc00c    ....    STR      r12,[sp,#0xc]
        0x00817ec4:    f891202f    ../     LDRB     r2,[r1,#0x2f]
        0x00817ec8:    f8d1c02c    ..,.    LDR      r12,[r1,#0x2c]
        0x00817ecc:    f3626c1f    b..l    BFI      r12,r2,#24,#8
;;;123        GET_UINT32_LE( X[12], data, 48 );
        0x00817ed0:    f8cdc010    ....    STR      r12,[sp,#0x10]
        0x00817ed4:    f8912033    ..3     LDRB     r2,[r1,#0x33]
        0x00817ed8:    f8d1c030    ..0.    LDR      r12,[r1,#0x30]
        0x00817edc:    f3626c1f    b..l    BFI      r12,r2,#24,#8
;;;124        GET_UINT32_LE( X[13], data, 52 );
        0x00817ee0:    f8cdc014    ....    STR      r12,[sp,#0x14]
        0x00817ee4:    f8912037    ..7     LDRB     r2,[r1,#0x37]
        0x00817ee8:    f8d1c034    ..4.    LDR      r12,[r1,#0x34]
        0x00817eec:    f3626c1f    b..l    BFI      r12,r2,#24,#8
;;;125        GET_UINT32_LE( X[14], data, 56 );
        0x00817ef0:    f8cdc018    ....    STR      r12,[sp,#0x18]
        0x00817ef4:    f891203b    ..;     LDRB     r2,[r1,#0x3b]
        0x00817ef8:    f8d1c038    ..8.    LDR      r12,[r1,#0x38]
        0x00817efc:    f3626c1f    b..l    BFI      r12,r2,#24,#8
;;;126        GET_UINT32_LE( X[15], data, 60 );
        0x00817f00:    f8cdc01c    ....    STR      r12,[sp,#0x1c]
        0x00817f04:    f891203f    ..?     LDRB     r2,[r1,#0x3f]
        0x00817f08:    f8d1c03c    ..<.    LDR      r12,[r1,#0x3c]
        0x00817f0c:    f3626c1f    b..l    BFI      r12,r2,#24,#8
;;;127    
;;;128    #define S(x,n) ((x << n) | ((x & 0xFFFFFFFF) >> (32 - n)))
;;;129    
;;;130    #define P(a,b,c,d,k,s,t)                                \
;;;131    {                                                       \
;;;132        a += F(b,c,d) + X[k] + t; a = S(a,s) + b;           \
;;;133    }
;;;134    
;;;135        A = ctx->state[0];
        0x00817f10:    f8cdc020    .. .    STR      r12,[sp,#0x20]
        0x00817f14:    6881        .h      LDR      r1,[r0,#8]
;;;136        B = ctx->state[1];
        0x00817f16:    910c        ..      STR      r1,[sp,#0x30]
        0x00817f18:    68c2        .h      LDR      r2,[r0,#0xc]
;;;137        C = ctx->state[2];
        0x00817f1a:    920b        ..      STR      r2,[sp,#0x2c]
        0x00817f1c:    6903        .i      LDR      r3,[r0,#0x10]
;;;138        D = ctx->state[3];
        0x00817f1e:    930a        ..      STR      r3,[sp,#0x28]
        0x00817f20:    6944        Di      LDR      r4,[r0,#0x14]
;;;139    
;;;140    #define F(x,y,z) (z ^ (x & (y ^ z)))
;;;141    
;;;142        P( A, B, C, D,  0,  7, 0xD76AA478 );
        0x00817f22:    eb050c01    ....    ADD      r12,r5,r1
        0x00817f26:    ea830104    ....    EOR      r1,r3,r4
        0x00817f2a:    4011        .@      ANDS     r1,r1,r2
        0x00817f2c:    4061        a@      EORS     r1,r1,r4
        0x00817f2e:    4441        AD      ADD      r1,r1,r8
        0x00817f30:    4461        aD      ADD      r1,r1,r12
        0x00817f32:    eb060c04    ....    ADD      r12,r6,r4
        0x00817f36:    9409        ..      STR      r4,[sp,#0x24]
        0x00817f38:    eb026171    ..qa    ADD      r1,r2,r1,ROR #25
;;;143        P( D, A, B, C,  1, 12, 0xE8C7B756 );
        0x00817f3c:    ea820403    ....    EOR      r4,r2,r3
        0x00817f40:    400c        .@      ANDS     r4,r4,r1
        0x00817f42:    f8df82dc    ....    LDR      r8,[pc,#732] ; [0x818220] = 0xe8c7b756
        0x00817f46:    405c        \@      EORS     r4,r4,r3
        0x00817f48:    4444        DD      ADD      r4,r4,r8
        0x00817f4a:    4464        dD      ADD      r4,r4,r12
        0x00817f4c:    eb090c03    ....    ADD      r12,r9,r3
        0x00817f50:    eb015434    ..4T    ADD      r4,r1,r4,ROR #20
;;;144        P( C, D, A, B,  2, 17, 0x242070DB );
        0x00817f54:    ea810302    ....    EOR      r3,r1,r2
        0x00817f58:    4023        #@      ANDS     r3,r3,r4
        0x00817f5a:    f8df82c8    ....    LDR      r8,[pc,#712] ; [0x818224] = 0x242070db
        0x00817f5e:    4053        S@      EORS     r3,r3,r2
        0x00817f60:    4443        CD      ADD      r3,r3,r8
        0x00817f62:    4463        cD      ADD      r3,r3,r12
        0x00817f64:    eb0b0c02    ....    ADD      r12,r11,r2
        0x00817f68:    eb0433f3    ...3    ADD      r3,r4,r3,ROR #15
;;;145        P( B, C, D, A,  3, 22, 0xC1BDCEEE );
        0x00817f6c:    ea840201    ....    EOR      r2,r4,r1
        0x00817f70:    401a        .@      ANDS     r2,r2,r3
        0x00817f72:    f8df82b4    ....    LDR      r8,[pc,#692] ; [0x818228] = 0xc1bdceee
        0x00817f76:    404a        J@      EORS     r2,r2,r1
        0x00817f78:    4442        BD      ADD      r2,r2,r8
        0x00817f7a:    4462        bD      ADD      r2,r2,r12
        0x00817f7c:    eb0e0c01    ....    ADD      r12,lr,r1
        0x00817f80:    eb0322b2    ..."    ADD      r2,r3,r2,ROR #10
;;;146        P( A, B, C, D,  4,  7, 0xF57C0FAF );
        0x00817f84:    ea830104    ....    EOR      r1,r3,r4
        0x00817f88:    4011        .@      ANDS     r1,r1,r2
        0x00817f8a:    f8df82a0    ....    LDR      r8,[pc,#672] ; [0x81822c] = 0xf57c0faf
        0x00817f8e:    4061        a@      EORS     r1,r1,r4
        0x00817f90:    4441        AD      ADD      r1,r1,r8
        0x00817f92:    4461        aD      ADD      r1,r1,r12
        0x00817f94:    eb0a0c04    ....    ADD      r12,r10,r4
        0x00817f98:    eb026171    ..qa    ADD      r1,r2,r1,ROR #25
;;;147        P( D, A, B, C,  5, 12, 0x4787C62A );
        0x00817f9c:    ea820403    ....    EOR      r4,r2,r3
        0x00817fa0:    400c        .@      ANDS     r4,r4,r1
        0x00817fa2:    f8df828c    ....    LDR      r8,[pc,#652] ; [0x818230] = 0x4787c62a
        0x00817fa6:    405c        \@      EORS     r4,r4,r3
        0x00817fa8:    4444        DD      ADD      r4,r4,r8
        0x00817faa:    4464        dD      ADD      r4,r4,r12
        0x00817fac:    f8ddc000    ....    LDR      r12,[sp,#0]
        0x00817fb0:    eb015434    ..4T    ADD      r4,r1,r4,ROR #20
;;;148        P( C, D, A, B,  6, 17, 0xA8304613 );
        0x00817fb4:    449c        .D      ADD      r12,r12,r3
        0x00817fb6:    ea810302    ....    EOR      r3,r1,r2
        0x00817fba:    4023        #@      ANDS     r3,r3,r4
        0x00817fbc:    f8df8274    ..t.    LDR      r8,[pc,#628] ; [0x818234] = 0xa8304613
        0x00817fc0:    4053        S@      EORS     r3,r3,r2
        0x00817fc2:    4443        CD      ADD      r3,r3,r8
        0x00817fc4:    4463        cD      ADD      r3,r3,r12
        0x00817fc6:    eb070c02    ....    ADD      r12,r7,r2
        0x00817fca:    eb0433f3    ...3    ADD      r3,r4,r3,ROR #15
;;;149        P( B, C, D, A,  7, 22, 0xFD469501 );
        0x00817fce:    ea840201    ....    EOR      r2,r4,r1
        0x00817fd2:    401a        .@      ANDS     r2,r2,r3
        0x00817fd4:    f8df8260    ..`.    LDR      r8,[pc,#608] ; [0x818238] = 0xfd469501
        0x00817fd8:    404a        J@      EORS     r2,r2,r1
        0x00817fda:    4442        BD      ADD      r2,r2,r8
        0x00817fdc:    4462        bD      ADD      r2,r2,r12
        0x00817fde:    f8ddc004    ....    LDR      r12,[sp,#4]
        0x00817fe2:    eb0322b2    ..."    ADD      r2,r3,r2,ROR #10
;;;150        P( A, B, C, D,  8,  7, 0x698098D8 );
        0x00817fe6:    448c        .D      ADD      r12,r12,r1
        0x00817fe8:    ea830104    ....    EOR      r1,r3,r4
        0x00817fec:    4011        .@      ANDS     r1,r1,r2
        0x00817fee:    f8df824c    ..L.    LDR      r8,[pc,#588] ; [0x81823c] = 0x698098d8
        0x00817ff2:    4061        a@      EORS     r1,r1,r4
        0x00817ff4:    4441        AD      ADD      r1,r1,r8
        0x00817ff6:    4461        aD      ADD      r1,r1,r12
        0x00817ff8:    f8ddc008    ....    LDR      r12,[sp,#8]
        0x00817ffc:    eb026171    ..qa    ADD      r1,r2,r1,ROR #25
;;;151        P( D, A, B, C,  9, 12, 0x8B44F7AF );
        0x00818000:    44a4        .D      ADD      r12,r12,r4
        0x00818002:    ea820403    ....    EOR      r4,r2,r3
        0x00818006:    400c        .@      ANDS     r4,r4,r1
        0x00818008:    405c        \@      EORS     r4,r4,r3
        0x0081800a:    f8df8234    ..4.    LDR      r8,[pc,#564] ; [0x818240] = 0x8b44f7af
        0x0081800e:    4444        DD      ADD      r4,r4,r8
        0x00818010:    4464        dD      ADD      r4,r4,r12
        0x00818012:    f8ddc00c    ....    LDR      r12,[sp,#0xc]
        0x00818016:    eb015434    ..4T    ADD      r4,r1,r4,ROR #20
;;;152        P( C, D, A, B, 10, 17, 0xFFFF5BB1 );
        0x0081801a:    449c        .D      ADD      r12,r12,r3
        0x0081801c:    ea810302    ....    EOR      r3,r1,r2
        0x00818020:    4023        #@      ANDS     r3,r3,r4
        0x00818022:    4053        S@      EORS     r3,r3,r2
        0x00818024:    f5a34324    ..$C    SUB      r3,r3,#0xa400
        0x00818028:    3b4f        O;      SUBS     r3,r3,#0x4f
        0x0081802a:    4463        cD      ADD      r3,r3,r12
        0x0081802c:    f8ddc010    ....    LDR      r12,[sp,#0x10]
        0x00818030:    eb0433f3    ...3    ADD      r3,r4,r3,ROR #15
;;;153        P( B, C, D, A, 11, 22, 0x895CD7BE );
        0x00818034:    4494        .D      ADD      r12,r12,r2
        0x00818036:    ea840201    ....    EOR      r2,r4,r1
        0x0081803a:    401a        .@      ANDS     r2,r2,r3
        0x0081803c:    f8df8204    ....    LDR      r8,[pc,#516] ; [0x818244] = 0x895cd7be
        0x00818040:    404a        J@      EORS     r2,r2,r1
        0x00818042:    4442        BD      ADD      r2,r2,r8
        0x00818044:    4462        bD      ADD      r2,r2,r12
        0x00818046:    f8ddc014    ....    LDR      r12,[sp,#0x14]
        0x0081804a:    eb0322b2    ..."    ADD      r2,r3,r2,ROR #10
;;;154        P( A, B, C, D, 12,  7, 0x6B901122 );
        0x0081804e:    448c        .D      ADD      r12,r12,r1
        0x00818050:    ea830104    ....    EOR      r1,r3,r4
        0x00818054:    4011        .@      ANDS     r1,r1,r2
        0x00818056:    f8df81f0    ....    LDR      r8,[pc,#496] ; [0x818248] = 0x6b901122
        0x0081805a:    4061        a@      EORS     r1,r1,r4
        0x0081805c:    4441        AD      ADD      r1,r1,r8
        0x0081805e:    4461        aD      ADD      r1,r1,r12
        0x00818060:    f8ddc018    ....    LDR      r12,[sp,#0x18]
        0x00818064:    eb026171    ..qa    ADD      r1,r2,r1,ROR #25
;;;155        P( D, A, B, C, 13, 12, 0xFD987193 );
        0x00818068:    44a4        .D      ADD      r12,r12,r4
        0x0081806a:    ea820403    ....    EOR      r4,r2,r3
        0x0081806e:    400c        .@      ANDS     r4,r4,r1
        0x00818070:    f8df81d8    ....    LDR      r8,[pc,#472] ; [0x81824c] = 0xfd987193
        0x00818074:    405c        \@      EORS     r4,r4,r3
        0x00818076:    4444        DD      ADD      r4,r4,r8
        0x00818078:    4464        dD      ADD      r4,r4,r12
        0x0081807a:    f8ddc01c    ....    LDR      r12,[sp,#0x1c]
        0x0081807e:    eb015434    ..4T    ADD      r4,r1,r4,ROR #20
;;;156        P( C, D, A, B, 14, 17, 0xA679438E );
        0x00818082:    449c        .D      ADD      r12,r12,r3
        0x00818084:    ea810302    ....    EOR      r3,r1,r2
        0x00818088:    4023        #@      ANDS     r3,r3,r4
        0x0081808a:    f8df81c4    ....    LDR      r8,[pc,#452] ; [0x818250] = 0xa679438e
        0x0081808e:    4053        S@      EORS     r3,r3,r2
        0x00818090:    4443        CD      ADD      r3,r3,r8
        0x00818092:    4463        cD      ADD      r3,r3,r12
        0x00818094:    f8ddc020    .. .    LDR      r12,[sp,#0x20]
        0x00818098:    eb0433f3    ...3    ADD      r3,r4,r3,ROR #15
;;;157        P( B, C, D, A, 15, 22, 0x49B40821 );
        0x0081809c:    4494        .D      ADD      r12,r12,r2
        0x0081809e:    ea840201    ....    EOR      r2,r4,r1
        0x008180a2:    401a        .@      ANDS     r2,r2,r3
        0x008180a4:    f8df81ac    ....    LDR      r8,[pc,#428] ; [0x818254] = 0x49b40821
        0x008180a8:    404a        J@      EORS     r2,r2,r1
        0x008180aa:    4442        BD      ADD      r2,r2,r8
        0x008180ac:    4462        bD      ADD      r2,r2,r12
        0x008180ae:    eb0322b2    ..."    ADD      r2,r3,r2,ROR #10
;;;158    
;;;159    #undef F
;;;160    
;;;161    #define F(x,y,z) (y ^ (z & (x ^ y)))
;;;162    
;;;163        P( A, B, C, D,  1,  5, 0xF61E2562 );
        0x008180b2:    eb060c01    ....    ADD      r12,r6,r1
        0x008180b6:    ea820103    ....    EOR      r1,r2,r3
        0x008180ba:    4021        !@      ANDS     r1,r1,r4
        0x008180bc:    f8df8198    ....    LDR      r8,[pc,#408] ; [0x818258] = 0xf61e2562
        0x008180c0:    4059        Y@      EORS     r1,r1,r3
        0x008180c2:    4441        AD      ADD      r1,r1,r8
        0x008180c4:    4461        aD      ADD      r1,r1,r12
        0x008180c6:    f8ddc000    ....    LDR      r12,[sp,#0]
        0x008180ca:    eb0261f1    ...a    ADD      r1,r2,r1,ROR #27
;;;164        P( D, A, B, C,  6,  9, 0xC040B340 );
        0x008180ce:    44a4        .D      ADD      r12,r12,r4
        0x008180d0:    ea810402    ....    EOR      r4,r1,r2
        0x008180d4:    401c        .@      ANDS     r4,r4,r3
        0x008180d6:    f8df8184    ....    LDR      r8,[pc,#388] ; [0x81825c] = 0xc040b340
        0x008180da:    4054        T@      EORS     r4,r4,r2
        0x008180dc:    4444        DD      ADD      r4,r4,r8
        0x008180de:    4464        dD      ADD      r4,r4,r12
        0x008180e0:    eb0154f4    ...T    ADD      r4,r1,r4,ROR #23
;;;165        P( C, D, A, B, 11, 14, 0x265E5A51 );
        0x008180e4:    f8ddc010    ....    LDR      r12,[sp,#0x10]
        0x008180e8:    f8df8174    ..t.    LDR      r8,[pc,#372] ; [0x818260] = 0x265e5a51
        0x008180ec:    449c        .D      ADD      r12,r12,r3
        0x008180ee:    ea840301    ....    EOR      r3,r4,r1
        0x008180f2:    4013        .@      ANDS     r3,r3,r2
        0x008180f4:    404b        K@      EORS     r3,r3,r1
        0x008180f6:    4443        CD      ADD      r3,r3,r8
        0x008180f8:    4463        cD      ADD      r3,r3,r12
        0x008180fa:    eb0443b3    ...C    ADD      r3,r4,r3,ROR #18
;;;166        P( B, C, D, A,  0, 20, 0xE9B6C7AA );
        0x008180fe:    eb050c02    ....    ADD      r12,r5,r2
        0x00818102:    ea830204    ....    EOR      r2,r3,r4
        0x00818106:    400a        .@      ANDS     r2,r2,r1
        0x00818108:    f8df8158    ..X.    LDR      r8,[pc,#344] ; [0x818264] = 0xe9b6c7aa
        0x0081810c:    4062        b@      EORS     r2,r2,r4
        0x0081810e:    4442        BD      ADD      r2,r2,r8
        0x00818110:    4462        bD      ADD      r2,r2,r12
        0x00818112:    eb033232    ..22    ADD      r2,r3,r2,ROR #12
;;;167        P( A, B, C, D,  5,  5, 0xD62F105D );
        0x00818116:    eb0a0c01    ....    ADD      r12,r10,r1
        0x0081811a:    ea820103    ....    EOR      r1,r2,r3
        0x0081811e:    4021        !@      ANDS     r1,r1,r4
        0x00818120:    f8df8144    ..D.    LDR      r8,[pc,#324] ; [0x818268] = 0xd62f105d
        0x00818124:    4059        Y@      EORS     r1,r1,r3
        0x00818126:    4441        AD      ADD      r1,r1,r8
        0x00818128:    4461        aD      ADD      r1,r1,r12
        0x0081812a:    f8ddc00c    ....    LDR      r12,[sp,#0xc]
        0x0081812e:    eb0261f1    ...a    ADD      r1,r2,r1,ROR #27
;;;168        P( D, A, B, C, 10,  9, 0x02441453 );
        0x00818132:    4464        dD      ADD      r4,r4,r12
        0x00818134:    ea810c02    ....    EOR      r12,r1,r2
        0x00818138:    ea0c0c03    ....    AND      r12,r12,r3
        0x0081813c:    f8df812c    ..,.    LDR      r8,[pc,#300] ; [0x81826c] = 0x2441453
        0x00818140:    ea8c0c02    ....    EOR      r12,r12,r2
        0x00818144:    44c4        .D      ADD      r12,r12,r8
        0x00818146:    4464        dD      ADD      r4,r4,r12
        0x00818148:    f8ddc020    .. .    LDR      r12,[sp,#0x20]
        0x0081814c:    eb0154f4    ...T    ADD      r4,r1,r4,ROR #23
;;;169        P( C, D, A, B, 15, 14, 0xD8A1E681 );
        0x00818150:    449c        .D      ADD      r12,r12,r3
        0x00818152:    ea840301    ....    EOR      r3,r4,r1
        0x00818156:    4013        .@      ANDS     r3,r3,r2
        0x00818158:    f8df8114    ....    LDR      r8,[pc,#276] ; [0x818270] = 0xd8a1e681
        0x0081815c:    404b        K@      EORS     r3,r3,r1
        0x0081815e:    4443        CD      ADD      r3,r3,r8
        0x00818160:    4463        cD      ADD      r3,r3,r12
        0x00818162:    eb0443b3    ...C    ADD      r3,r4,r3,ROR #18
;;;170        P( B, C, D, A,  4, 20, 0xE7D3FBC8 );
        0x00818166:    eb0e0c02    ....    ADD      r12,lr,r2
        0x0081816a:    ea830204    ....    EOR      r2,r3,r4
        0x0081816e:    400a        .@      ANDS     r2,r2,r1
        0x00818170:    f8df8100    ....    LDR      r8,[pc,#256] ; [0x818274] = 0xe7d3fbc8
        0x00818174:    4062        b@      EORS     r2,r2,r4
        0x00818176:    4442        BD      ADD      r2,r2,r8
        0x00818178:    4462        bD      ADD      r2,r2,r12
        0x0081817a:    f8ddc008    ....    LDR      r12,[sp,#8]
        0x0081817e:    eb033232    ..22    ADD      r2,r3,r2,ROR #12
;;;171        P( A, B, C, D,  9,  5, 0x21E1CDE6 );
        0x00818182:    4461        aD      ADD      r1,r1,r12
        0x00818184:    ea820c03    ....    EOR      r12,r2,r3
        0x00818188:    ea0c0c04    ....    AND      r12,r12,r4
        0x0081818c:    f8df80e8    ....    LDR      r8,[pc,#232] ; [0x818278] = 0x21e1cde6
        0x00818190:    ea8c0c03    ....    EOR      r12,r12,r3
        0x00818194:    44c4        .D      ADD      r12,r12,r8
        0x00818196:    4461        aD      ADD      r1,r1,r12
        0x00818198:    f8ddc01c    ....    LDR      r12,[sp,#0x1c]
        0x0081819c:    eb0261f1    ...a    ADD      r1,r2,r1,ROR #27
;;;172        P( D, A, B, C, 14,  9, 0xC33707D6 );
        0x008181a0:    44a4        .D      ADD      r12,r12,r4
        0x008181a2:    ea810402    ....    EOR      r4,r1,r2
        0x008181a6:    401c        .@      ANDS     r4,r4,r3
        0x008181a8:    f8df80d0    ....    LDR      r8,[pc,#208] ; [0x81827c] = 0xc33707d6
        0x008181ac:    4054        T@      EORS     r4,r4,r2
        0x008181ae:    4444        DD      ADD      r4,r4,r8
        0x008181b0:    4464        dD      ADD      r4,r4,r12
        0x008181b2:    eb0154f4    ...T    ADD      r4,r1,r4,ROR #23
;;;173        P( C, D, A, B,  3, 14, 0xF4D50D87 );
        0x008181b6:    eb0b0c03    ....    ADD      r12,r11,r3
        0x008181ba:    ea840301    ....    EOR      r3,r4,r1
        0x008181be:    4013        .@      ANDS     r3,r3,r2
        0x008181c0:    f8df80bc    ....    LDR      r8,[pc,#188] ; [0x818280] = 0xf4d50d87
        0x008181c4:    404b        K@      EORS     r3,r3,r1
        0x008181c6:    4443        CD      ADD      r3,r3,r8
        0x008181c8:    4463        cD      ADD      r3,r3,r12
        0x008181ca:    f8ddc004    ....    LDR      r12,[sp,#4]
        0x008181ce:    eb0443b3    ...C    ADD      r3,r4,r3,ROR #18
;;;174        P( B, C, D, A,  8, 20, 0x455A14ED );
        0x008181d2:    4494        .D      ADD      r12,r12,r2
        0x008181d4:    ea830204    ....    EOR      r2,r3,r4
        0x008181d8:    400a        .@      ANDS     r2,r2,r1
        0x008181da:    f8df80a8    ....    LDR      r8,[pc,#168] ; [0x818284] = 0x455a14ed
        0x008181de:    4062        b@      EORS     r2,r2,r4
        0x008181e0:    4442        BD      ADD      r2,r2,r8
        0x008181e2:    4462        bD      ADD      r2,r2,r12
        0x008181e4:    f8ddc018    ....    LDR      r12,[sp,#0x18]
        0x008181e8:    eb033232    ..22    ADD      r2,r3,r2,ROR #12
;;;175        P( A, B, C, D, 13,  5, 0xA9E3E905 );
        0x008181ec:    448c        .D      ADD      r12,r12,r1
        0x008181ee:    ea820103    ....    EOR      r1,r2,r3
        0x008181f2:    4021        !@      ANDS     r1,r1,r4
        0x008181f4:    f8df8090    ....    LDR      r8,[pc,#144] ; [0x818288] = 0xa9e3e905
        0x008181f8:    4059        Y@      EORS     r1,r1,r3
        0x008181fa:    4441        AD      ADD      r1,r1,r8
        0x008181fc:    4461        aD      ADD      r1,r1,r12
        0x008181fe:    eb0261f1    ...a    ADD      r1,r2,r1,ROR #27
;;;176        P( D, A, B, C,  2,  9, 0xFCEFA3F8 );
        0x00818202:    eb090c04    ....    ADD      r12,r9,r4
        0x00818206:    ea810402    ....    EOR      r4,r1,r2
        0x0081820a:    401c        .@      ANDS     r4,r4,r3
        0x0081820c:    4054        T@      EORS     r4,r4,r2
        0x0081820e:    f8df807c    ..|.    LDR      r8,[pc,#124] ; [0x81828c] = 0xfcefa3f8
        0x00818212:    e03d        =.      B        0x818290 ; mbedtls_internal_md5_process + 1116
    $d
        0x00818214:    67452301    .#Eg    DCD    1732584193
        0x00818218:    efcdab89    ....    DCD    4023233417
        0x0081821c:    d76aa478    x.j.    DCD    3614090360
        0x00818220:    e8c7b756    V...    DCD    3905402710
        0x00818224:    242070db    .p $    DCD    606105819
        0x00818228:    c1bdceee    ....    DCD    3250441966
        0x0081822c:    f57c0faf    ..|.    DCD    4118548399
        0x00818230:    4787c62a    *..G    DCD    1200080426
        0x00818234:    a8304613    .F0.    DCD    2821735955
        0x00818238:    fd469501    ..F.    DCD    4249261313
        0x0081823c:    698098d8    ...i    DCD    1770035416
        0x00818240:    8b44f7af    ..D.    DCD    2336552879
        0x00818244:    895cd7be    ..\.    DCD    2304563134
        0x00818248:    6b901122    "..k    DCD    1804603682
        0x0081824c:    fd987193    .q..    DCD    4254626195
        0x00818250:    a679438e    .Cy.    DCD    2792965006
        0x00818254:    49b40821    !..I    DCD    1236535329
        0x00818258:    f61e2562    b%..    DCD    4129170786
        0x0081825c:    c040b340    @.@.    DCD    3225465664
        0x00818260:    265e5a51    QZ^&    DCD    643717713
        0x00818264:    e9b6c7aa    ....    DCD    3921069994
        0x00818268:    d62f105d    ]./.    DCD    3593408605
        0x0081826c:    02441453    S.D.    DCD    38016083
        0x00818270:    d8a1e681    ....    DCD    3634488961
        0x00818274:    e7d3fbc8    ....    DCD    3889429448
        0x00818278:    21e1cde6    ...!    DCD    568446438
        0x0081827c:    c33707d6    ..7.    DCD    3275163606
        0x00818280:    f4d50d87    ....    DCD    4107603335
        0x00818284:    455a14ed    ..ZE    DCD    1163531501
        0x00818288:    a9e3e905    ....    DCD    2850285829
        0x0081828c:    fcefa3f8    ....    DCD    4243563512
    $t
        0x00818290:    4444        DD      ADD      r4,r4,r8
        0x00818292:    4464        dD      ADD      r4,r4,r12
        0x00818294:    eb0154f4    ...T    ADD      r4,r1,r4,ROR #23
;;;177        P( C, D, A, B,  7, 14, 0x676F02D9 );
        0x00818298:    eb070c03    ....    ADD      r12,r7,r3
        0x0081829c:    ea840301    ....    EOR      r3,r4,r1
        0x008182a0:    4013        .@      ANDS     r3,r3,r2
        0x008182a2:    f8df84a4    ....    LDR      r8,[pc,#1188] ; [0x818748] = 0x676f02d9
        0x008182a6:    404b        K@      EORS     r3,r3,r1
        0x008182a8:    4443        CD      ADD      r3,r3,r8
        0x008182aa:    4463        cD      ADD      r3,r3,r12
        0x008182ac:    f8ddc014    ....    LDR      r12,[sp,#0x14]
        0x008182b0:    eb0443b3    ...C    ADD      r3,r4,r3,ROR #18
;;;178        P( B, C, D, A, 12, 20, 0x8D2A4C8A );
        0x008182b4:    4494        .D      ADD      r12,r12,r2
        0x008182b6:    ea830204    ....    EOR      r2,r3,r4
        0x008182ba:    400a        .@      ANDS     r2,r2,r1
        0x008182bc:    f8df848c    ....    LDR      r8,[pc,#1164] ; [0x81874c] = 0x8d2a4c8a
        0x008182c0:    4062        b@      EORS     r2,r2,r4
        0x008182c2:    4442        BD      ADD      r2,r2,r8
        0x008182c4:    4462        bD      ADD      r2,r2,r12
        0x008182c6:    eb033232    ..22    ADD      r2,r3,r2,ROR #12
;;;179    
;;;180    #undef F
;;;181    
;;;182    #define F(x,y,z) (x ^ y ^ z)
;;;183    
;;;184        P( A, B, C, D,  5,  4, 0xFFFA3942 );
        0x008182ca:    ea820c03    ....    EOR      r12,r2,r3
        0x008182ce:    f8df8480    ....    LDR      r8,[pc,#1152] ; [0x818750] = 0xfffa3942
        0x008182d2:    ea8c0c04    ....    EOR      r12,r12,r4
        0x008182d6:    44c4        .D      ADD      r12,r12,r8
        0x008182d8:    4451        QD      ADD      r1,r1,r10
        0x008182da:    4461        aD      ADD      r1,r1,r12
        0x008182dc:    f8ddc004    ....    LDR      r12,[sp,#4]
        0x008182e0:    eb027131    ..1q    ADD      r1,r2,r1,ROR #28
;;;185        P( D, A, B, C,  8, 11, 0x8771F681 );
        0x008182e4:    4464        dD      ADD      r4,r4,r12
        0x008182e6:    ea810c02    ....    EOR      r12,r1,r2
        0x008182ea:    f8df8468    ..h.    LDR      r8,[pc,#1128] ; [0x818754] = 0x8771f681
        0x008182ee:    ea8c0c03    ....    EOR      r12,r12,r3
        0x008182f2:    44c4        .D      ADD      r12,r12,r8
        0x008182f4:    4464        dD      ADD      r4,r4,r12
        0x008182f6:    f8ddc010    ....    LDR      r12,[sp,#0x10]
        0x008182fa:    eb015474    ..tT    ADD      r4,r1,r4,ROR #21
;;;186        P( C, D, A, B, 11, 16, 0x6D9D6122 );
        0x008182fe:    4463        cD      ADD      r3,r3,r12
        0x00818300:    ea840c01    ....    EOR      r12,r4,r1
        0x00818304:    f8df8450    ..P.    LDR      r8,[pc,#1104] ; [0x818758] = 0x6d9d6122
        0x00818308:    ea8c0c02    ....    EOR      r12,r12,r2
        0x0081830c:    44c4        .D      ADD      r12,r12,r8
        0x0081830e:    4463        cD      ADD      r3,r3,r12
        0x00818310:    f8ddc01c    ....    LDR      r12,[sp,#0x1c]
        0x00818314:    eb044333    ..3C    ADD      r3,r4,r3,ROR #16
;;;187        P( B, C, D, A, 14, 23, 0xFDE5380C );
        0x00818318:    4462        bD      ADD      r2,r2,r12
        0x0081831a:    ea830c04    ....    EOR      r12,r3,r4
        0x0081831e:    ea8c0c01    ....    EOR      r12,r12,r1
        0x00818322:    f8df8438    ..8.    LDR      r8,[pc,#1080] ; [0x81875c] = 0xfde5380c
        0x00818326:    4431        1D      ADD      r1,r1,r6
        0x00818328:    44c4        .D      ADD      r12,r12,r8
        0x0081832a:    4462        bD      ADD      r2,r2,r12
        0x0081832c:    eb032272    ..r"    ADD      r2,r3,r2,ROR #9
;;;188        P( A, B, C, D,  1,  4, 0xA4BEEA44 );
        0x00818330:    ea820c03    ....    EOR      r12,r2,r3
        0x00818334:    ea8c0c04    ....    EOR      r12,r12,r4
        0x00818338:    f8df8424    ..$.    LDR      r8,[pc,#1060] ; [0x818760] = 0xa4beea44
        0x0081833c:    4474        tD      ADD      r4,r4,lr
        0x0081833e:    44c4        .D      ADD      r12,r12,r8
        0x00818340:    4461        aD      ADD      r1,r1,r12
        0x00818342:    eb027131    ..1q    ADD      r1,r2,r1,ROR #28
;;;189        P( D, A, B, C,  4, 11, 0x4BDECFA9 );
        0x00818346:    ea810c02    ....    EOR      r12,r1,r2
        0x0081834a:    ea8c0c03    ....    EOR      r12,r12,r3
        0x0081834e:    f8df8414    ....    LDR      r8,[pc,#1044] ; [0x818764] = 0x4bdecfa9
        0x00818352:    443b        ;D      ADD      r3,r3,r7
        0x00818354:    44c4        .D      ADD      r12,r12,r8
        0x00818356:    4464        dD      ADD      r4,r4,r12
        0x00818358:    eb015474    ..tT    ADD      r4,r1,r4,ROR #21
;;;190        P( C, D, A, B,  7, 16, 0xF6BB4B60 );
        0x0081835c:    ea840c01    ....    EOR      r12,r4,r1
        0x00818360:    f8df8404    ....    LDR      r8,[pc,#1028] ; [0x818768] = 0xf6bb4b60
        0x00818364:    ea8c0c02    ....    EOR      r12,r12,r2
        0x00818368:    44c4        .D      ADD      r12,r12,r8
        0x0081836a:    4463        cD      ADD      r3,r3,r12
        0x0081836c:    f8ddc00c    ....    LDR      r12,[sp,#0xc]
        0x00818370:    eb044333    ..3C    ADD      r3,r4,r3,ROR #16
;;;191        P( B, C, D, A, 10, 23, 0xBEBFBC70 );
        0x00818374:    4462        bD      ADD      r2,r2,r12
        0x00818376:    ea830c04    ....    EOR      r12,r3,r4
        0x0081837a:    f8df83f0    ....    LDR      r8,[pc,#1008] ; [0x81876c] = 0xbebfbc70
        0x0081837e:    ea8c0c01    ....    EOR      r12,r12,r1
        0x00818382:    44c4        .D      ADD      r12,r12,r8
        0x00818384:    4462        bD      ADD      r2,r2,r12
        0x00818386:    f8ddc018    ....    LDR      r12,[sp,#0x18]
        0x0081838a:    eb032272    ..r"    ADD      r2,r3,r2,ROR #9
;;;192        P( A, B, C, D, 13,  4, 0x289B7EC6 );
        0x0081838e:    4461        aD      ADD      r1,r1,r12
        0x00818390:    ea820c03    ....    EOR      r12,r2,r3
        0x00818394:    ea8c0c04    ....    EOR      r12,r12,r4
        0x00818398:    f8df83d4    ....    LDR      r8,[pc,#980] ; [0x818770] = 0x289b7ec6
        0x0081839c:    442c        ,D      ADD      r4,r4,r5
        0x0081839e:    44c4        .D      ADD      r12,r12,r8
        0x008183a0:    4461        aD      ADD      r1,r1,r12
        0x008183a2:    eb027131    ..1q    ADD      r1,r2,r1,ROR #28
;;;193        P( D, A, B, C,  0, 11, 0xEAA127FA );
        0x008183a6:    ea810c02    ....    EOR      r12,r1,r2
        0x008183aa:    ea8c0c03    ....    EOR      r12,r12,r3
        0x008183ae:    f8df83c4    ....    LDR      r8,[pc,#964] ; [0x818774] = 0xeaa127fa
        0x008183b2:    445b        [D      ADD      r3,r3,r11
        0x008183b4:    44c4        .D      ADD      r12,r12,r8
        0x008183b6:    4464        dD      ADD      r4,r4,r12
        0x008183b8:    eb015474    ..tT    ADD      r4,r1,r4,ROR #21
;;;194        P( C, D, A, B,  3, 16, 0xD4EF3085 );
        0x008183bc:    ea840c01    ....    EOR      r12,r4,r1
        0x008183c0:    f8df83b4    ....    LDR      r8,[pc,#948] ; [0x818778] = 0xd4ef3085
        0x008183c4:    ea8c0c02    ....    EOR      r12,r12,r2
        0x008183c8:    44c4        .D      ADD      r12,r12,r8
        0x008183ca:    4463        cD      ADD      r3,r3,r12
        0x008183cc:    f8ddc000    ....    LDR      r12,[sp,#0]
        0x008183d0:    eb044333    ..3C    ADD      r3,r4,r3,ROR #16
;;;195        P( B, C, D, A,  6, 23, 0x04881D05 );
        0x008183d4:    4462        bD      ADD      r2,r2,r12
        0x008183d6:    ea830c04    ....    EOR      r12,r3,r4
        0x008183da:    f8df83a0    ....    LDR      r8,[pc,#928] ; [0x81877c] = 0x4881d05
        0x008183de:    ea8c0c01    ....    EOR      r12,r12,r1
        0x008183e2:    44c4        .D      ADD      r12,r12,r8
        0x008183e4:    4462        bD      ADD      r2,r2,r12
        0x008183e6:    f8ddc008    ....    LDR      r12,[sp,#8]
        0x008183ea:    eb032272    ..r"    ADD      r2,r3,r2,ROR #9
;;;196        P( A, B, C, D,  9,  4, 0xD9D4D039 );
        0x008183ee:    4461        aD      ADD      r1,r1,r12
        0x008183f0:    ea820c03    ....    EOR      r12,r2,r3
        0x008183f4:    f8df8388    ....    LDR      r8,[pc,#904] ; [0x818780] = 0xd9d4d039
        0x008183f8:    ea8c0c04    ....    EOR      r12,r12,r4
        0x008183fc:    44c4        .D      ADD      r12,r12,r8
        0x008183fe:    4461        aD      ADD      r1,r1,r12
        0x00818400:    f8ddc014    ....    LDR      r12,[sp,#0x14]
        0x00818404:    eb027131    ..1q    ADD      r1,r2,r1,ROR #28
;;;197        P( D, A, B, C, 12, 11, 0xE6DB99E5 );
        0x00818408:    4464        dD      ADD      r4,r4,r12
        0x0081840a:    ea810c02    ....    EOR      r12,r1,r2
        0x0081840e:    f8df8374    ..t.    LDR      r8,[pc,#884] ; [0x818784] = 0xe6db99e5
        0x00818412:    ea8c0c03    ....    EOR      r12,r12,r3
        0x00818416:    44c4        .D      ADD      r12,r12,r8
        0x00818418:    4464        dD      ADD      r4,r4,r12
        0x0081841a:    f8ddc020    .. .    LDR      r12,[sp,#0x20]
        0x0081841e:    eb015474    ..tT    ADD      r4,r1,r4,ROR #21
;;;198        P( C, D, A, B, 15, 16, 0x1FA27CF8 );
        0x00818422:    4463        cD      ADD      r3,r3,r12
        0x00818424:    ea840c01    ....    EOR      r12,r4,r1
        0x00818428:    ea8c0c02    ....    EOR      r12,r12,r2
        0x0081842c:    f8df8358    ..X.    LDR      r8,[pc,#856] ; [0x818788] = 0x1fa27cf8
        0x00818430:    444a        JD      ADD      r2,r2,r9
        0x00818432:    44c4        .D      ADD      r12,r12,r8
        0x00818434:    4463        cD      ADD      r3,r3,r12
        0x00818436:    eb044333    ..3C    ADD      r3,r4,r3,ROR #16
;;;199        P( B, C, D, A,  2, 23, 0xC4AC5665 );
        0x0081843a:    ea830c04    ....    EOR      r12,r3,r4
        0x0081843e:    ea8c0c01    ....    EOR      r12,r12,r1
        0x00818442:    f8df8348    ..H.    LDR      r8,[pc,#840] ; [0x81878c] = 0xc4ac5665
        0x00818446:    4429        )D      ADD      r1,r1,r5
        0x00818448:    44c4        .D      ADD      r12,r12,r8
        0x0081844a:    4462        bD      ADD      r2,r2,r12
        0x0081844c:    eb032272    ..r"    ADD      r2,r3,r2,ROR #9
;;;200    
;;;201    #undef F
;;;202    
;;;203    #define F(x,y,z) (y ^ (x | ~z))
;;;204    
;;;205        P( A, B, C, D,  0,  6, 0xF4292244 );
        0x00818450:    ea620504    b...    ORN      r5,r2,r4
        0x00818454:    f8dfc338    ..8.    LDR      r12,[pc,#824] ; [0x818790] = 0xf4292244
        0x00818458:    405d        ]@      EORS     r5,r5,r3
        0x0081845a:    4465        eD      ADD      r5,r5,r12
        0x0081845c:    4429        )D      ADD      r1,r1,r5
        0x0081845e:    eb0261b1    ...a    ADD      r1,r2,r1,ROR #26
;;;206        P( D, A, B, C,  7, 10, 0x432AFF97 );
        0x00818462:    193d        =.      ADDS     r5,r7,r4
        0x00818464:    ea610403    a...    ORN      r4,r1,r3
        0x00818468:    4fca        .O      LDR      r7,[pc,#808] ; [0x818794] = 0x432aff97
        0x0081846a:    4054        T@      EORS     r4,r4,r2
        0x0081846c:    443c        <D      ADD      r4,r4,r7
        0x0081846e:    442c        ,D      ADD      r4,r4,r5
        0x00818470:    9d07        ..      LDR      r5,[sp,#0x1c]
        0x00818472:    eb0154b4    ...T    ADD      r4,r1,r4,ROR #22
;;;207        P( C, D, A, B, 14, 15, 0xAB9423A7 );
        0x00818476:    441d        .D      ADD      r5,r5,r3
        0x00818478:    ea640302    d...    ORN      r3,r4,r2
        0x0081847c:    4fc6        .O      LDR      r7,[pc,#792] ; [0x818798] = 0xab9423a7
        0x0081847e:    404b        K@      EORS     r3,r3,r1
        0x00818480:    443b        ;D      ADD      r3,r3,r7
        0x00818482:    442b        +D      ADD      r3,r3,r5
        0x00818484:    eb044373    ..sC    ADD      r3,r4,r3,ROR #17
;;;208        P( B, C, D, A,  5, 21, 0xFC93A039 );
        0x00818488:    eb0a0502    ....    ADD      r5,r10,r2
        0x0081848c:    ea630201    c...    ORN      r2,r3,r1
        0x00818490:    4fc2        .O      LDR      r7,[pc,#776] ; [0x81879c] = 0xfc93a039
        0x00818492:    4062        b@      EORS     r2,r2,r4
        0x00818494:    443a        :D      ADD      r2,r2,r7
        0x00818496:    442a        *D      ADD      r2,r2,r5
        0x00818498:    9d05        ..      LDR      r5,[sp,#0x14]
        0x0081849a:    eb0322f2    ..."    ADD      r2,r3,r2,ROR #11
;;;209        P( A, B, C, D, 12,  6, 0x655B59C3 );
        0x0081849e:    440d        .D      ADD      r5,r5,r1
        0x008184a0:    ea620104    b...    ORN      r1,r2,r4
        0x008184a4:    4fbe        .O      LDR      r7,[pc,#760] ; [0x8187a0] = 0x655b59c3
        0x008184a6:    4059        Y@      EORS     r1,r1,r3
        0x008184a8:    4439        9D      ADD      r1,r1,r7
        0x008184aa:    4429        )D      ADD      r1,r1,r5
        0x008184ac:    eb0261b1    ...a    ADD      r1,r2,r1,ROR #26
;;;210        P( D, A, B, C,  3, 10, 0x8F0CCC92 );
        0x008184b0:    eb0b0504    ....    ADD      r5,r11,r4
        0x008184b4:    ea610403    a...    ORN      r4,r1,r3
        0x008184b8:    4fba        .O      LDR      r7,[pc,#744] ; [0x8187a4] = 0x8f0ccc92
        0x008184ba:    4054        T@      EORS     r4,r4,r2
        0x008184bc:    443c        <D      ADD      r4,r4,r7
        0x008184be:    442c        ,D      ADD      r4,r4,r5
        0x008184c0:    9d03        ..      LDR      r5,[sp,#0xc]
        0x008184c2:    eb0154b4    ...T    ADD      r4,r1,r4,ROR #22
;;;211        P( C, D, A, B, 10, 15, 0xFFEFF47D );
        0x008184c6:    441d        .D      ADD      r5,r5,r3
        0x008184c8:    ea640302    d...    ORN      r3,r4,r2
        0x008184cc:    4fb6        .O      LDR      r7,[pc,#728] ; [0x8187a8] = 0xffeff47d
        0x008184ce:    404b        K@      EORS     r3,r3,r1
        0x008184d0:    443b        ;D      ADD      r3,r3,r7
        0x008184d2:    442b        +D      ADD      r3,r3,r5
        0x008184d4:    18b5        ..      ADDS     r5,r6,r2
        0x008184d6:    eb044373    ..sC    ADD      r3,r4,r3,ROR #17
;;;212        P( B, C, D, A,  1, 21, 0x85845DD1 );
        0x008184da:    ea630201    c...    ORN      r2,r3,r1
        0x008184de:    4eb3        .N      LDR      r6,[pc,#716] ; [0x8187ac] = 0x85845dd1
        0x008184e0:    4062        b@      EORS     r2,r2,r4
        0x008184e2:    4432        2D      ADD      r2,r2,r6
        0x008184e4:    442a        *D      ADD      r2,r2,r5
        0x008184e6:    9d01        ..      LDR      r5,[sp,#4]
        0x008184e8:    eb0322f2    ..."    ADD      r2,r3,r2,ROR #11
;;;213        P( A, B, C, D,  8,  6, 0x6FA87E4F );
        0x008184ec:    440d        .D      ADD      r5,r5,r1
        0x008184ee:    ea620104    b...    ORN      r1,r2,r4
        0x008184f2:    4eaf        .N      LDR      r6,[pc,#700] ; [0x8187b0] = 0x6fa87e4f
        0x008184f4:    4059        Y@      EORS     r1,r1,r3
        0x008184f6:    4431        1D      ADD      r1,r1,r6
        0x008184f8:    4429        )D      ADD      r1,r1,r5
        0x008184fa:    9d08        ..      LDR      r5,[sp,#0x20]
        0x008184fc:    eb0261b1    ...a    ADD      r1,r2,r1,ROR #26
;;;214        P( D, A, B, C, 15, 10, 0xFE2CE6E0 );
        0x00818500:    4425        %D      ADD      r5,r5,r4
        0x00818502:    ea610403    a...    ORN      r4,r1,r3
        0x00818506:    4eab        .N      LDR      r6,[pc,#684] ; [0x8187b4] = 0xfe2ce6e0
        0x00818508:    4054        T@      EORS     r4,r4,r2
        0x0081850a:    4434        4D      ADD      r4,r4,r6
        0x0081850c:    442c        ,D      ADD      r4,r4,r5
        0x0081850e:    9d00        ..      LDR      r5,[sp,#0]
        0x00818510:    eb0154b4    ...T    ADD      r4,r1,r4,ROR #22
;;;215        P( C, D, A, B,  6, 15, 0xA3014314 );
        0x00818514:    441d        .D      ADD      r5,r5,r3
        0x00818516:    ea640302    d...    ORN      r3,r4,r2
        0x0081851a:    4ea7        .N      LDR      r6,[pc,#668] ; [0x8187b8] = 0xa3014314
        0x0081851c:    404b        K@      EORS     r3,r3,r1
        0x0081851e:    4433        3D      ADD      r3,r3,r6
        0x00818520:    442b        +D      ADD      r3,r3,r5
        0x00818522:    9d06        ..      LDR      r5,[sp,#0x18]
        0x00818524:    eb044373    ..sC    ADD      r3,r4,r3,ROR #17
;;;216        P( B, C, D, A, 13, 21, 0x4E0811A1 );
        0x00818528:    4415        .D      ADD      r5,r5,r2
        0x0081852a:    ea630201    c...    ORN      r2,r3,r1
        0x0081852e:    4ea3        .N      LDR      r6,[pc,#652] ; [0x8187bc] = 0x4e0811a1
        0x00818530:    4062        b@      EORS     r2,r2,r4
        0x00818532:    4432        2D      ADD      r2,r2,r6
        0x00818534:    442a        *D      ADD      r2,r2,r5
        0x00818536:    eb0322f2    ..."    ADD      r2,r3,r2,ROR #11
;;;217        P( A, B, C, D,  4,  6, 0xF7537E82 );
        0x0081853a:    eb0e0501    ....    ADD      r5,lr,r1
        0x0081853e:    ea620104    b...    ORN      r1,r2,r4
        0x00818542:    4e9f        .N      LDR      r6,[pc,#636] ; [0x8187c0] = 0xf7537e82
        0x00818544:    4059        Y@      EORS     r1,r1,r3
        0x00818546:    4431        1D      ADD      r1,r1,r6
        0x00818548:    4429        )D      ADD      r1,r1,r5
        0x0081854a:    9d04        ..      LDR      r5,[sp,#0x10]
        0x0081854c:    eb0261b1    ...a    ADD      r1,r2,r1,ROR #26
;;;218        P( D, A, B, C, 11, 10, 0xBD3AF235 );
        0x00818550:    4425        %D      ADD      r5,r5,r4
        0x00818552:    ea610403    a...    ORN      r4,r1,r3
        0x00818556:    4e9b        .N      LDR      r6,[pc,#620] ; [0x8187c4] = 0xbd3af235
        0x00818558:    4054        T@      EORS     r4,r4,r2
        0x0081855a:    4434        4D      ADD      r4,r4,r6
        0x0081855c:    442c        ,D      ADD      r4,r4,r5
        0x0081855e:    eb0154b4    ...T    ADD      r4,r1,r4,ROR #22
;;;219        P( C, D, A, B,  2, 15, 0x2AD7D2BB );
        0x00818562:    eb090503    ....    ADD      r5,r9,r3
        0x00818566:    ea640302    d...    ORN      r3,r4,r2
        0x0081856a:    4e97        .N      LDR      r6,[pc,#604] ; [0x8187c8] = 0x2ad7d2bb
        0x0081856c:    404b        K@      EORS     r3,r3,r1
        0x0081856e:    4433        3D      ADD      r3,r3,r6
        0x00818570:    442b        +D      ADD      r3,r3,r5
        0x00818572:    9d02        ..      LDR      r5,[sp,#8]
        0x00818574:    eb044373    ..sC    ADD      r3,r4,r3,ROR #17
;;;220        P( B, C, D, A,  9, 21, 0xEB86D391 );
        0x00818578:    4415        .D      ADD      r5,r5,r2
        0x0081857a:    ea630201    c...    ORN      r2,r3,r1
        0x0081857e:    4e93        .N      LDR      r6,[pc,#588] ; [0x8187cc] = 0xeb86d391
        0x00818580:    4062        b@      EORS     r2,r2,r4
        0x00818582:    4432        2D      ADD      r2,r2,r6
        0x00818584:    442a        *D      ADD      r2,r2,r5
        0x00818586:    9d0c        ..      LDR      r5,[sp,#0x30]
        0x00818588:    eb0322f2    ..."    ADD      r2,r3,r2,ROR #11
;;;221    
;;;222    #undef F
;;;223    
;;;224        ctx->state[0] += A;
        0x0081858c:    4429        )D      ADD      r1,r1,r5
        0x0081858e:    6081        .`      STR      r1,[r0,#8]
;;;225        ctx->state[1] += B;
        0x00818590:    990b        ..      LDR      r1,[sp,#0x2c]
        0x00818592:    4411        .D      ADD      r1,r1,r2
        0x00818594:    60c1        .`      STR      r1,[r0,#0xc]
;;;226        ctx->state[2] += C;
        0x00818596:    990a        ..      LDR      r1,[sp,#0x28]
        0x00818598:    4419        .D      ADD      r1,r1,r3
        0x0081859a:    6101        .a      STR      r1,[r0,#0x10]
;;;227        ctx->state[3] += D;
        0x0081859c:    9909        ..      LDR      r1,[sp,#0x24]
        0x0081859e:    4421        !D      ADD      r1,r1,r4
;;;228    
;;;229        return( 0 );
        0x008185a0:    6141        Aa      STR      r1,[r0,#0x14]
        0x008185a2:    b00d        ..      ADD      sp,sp,#0x34
        0x008185a4:    2000        .       MOVS     r0,#0
;;;230    }
        0x008185a6:    e8bd8ff0    ....    POP      {r4-r11,pc}
    mbedtls_md5_process
;;;231    
;;;232    #if !defined(MBEDTLS_DEPRECATED_REMOVED)
;;;233    void mbedtls_md5_process( mbedtls_md5_context *ctx,
;;;234                              const unsigned char data[64] )
;;;235    {
;;;236        mbedtls_internal_md5_process( ctx, data );
        0x008185aa:    e443        C.      B        mbedtls_internal_md5_process ; 0x817e34
    mbedtls_md5_update_ret
;;;237    }
;;;238    #endif
;;;239    #endif /* !MBEDTLS_MD5_PROCESS_ALT */
;;;240    
;;;241    /*
;;;242     * MD5 process buffer
;;;243     */
;;;244    int mbedtls_md5_update_ret( mbedtls_md5_context *ctx,
;;;245                                const unsigned char *input,
;;;246                                size_t ilen )
;;;247    {
        0x008185ac:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x008185b0:    0014        ..      MOVS     r4,r2
        0x008185b2:    460f        .F      MOV      r7,r1
        0x008185b4:    4605        .F      MOV      r5,r0
        0x008185b6:    d031        1.      BEQ      0x81861c ; mbedtls_md5_update_ret + 112
;;;248        int ret;
;;;249        size_t fill;
;;;250        uint32_t left;
;;;251    
;;;252        if( ilen == 0 )
;;;253            return( 0 );
;;;254    
;;;255        left = ctx->total[0] & 0x3F;
        0x008185b8:    6828        (h      LDR      r0,[r5,#0]
        0x008185ba:    f000063f    ..?.    AND      r6,r0,#0x3f
        0x008185be:    4420         D      ADD      r0,r0,r4
;;;256        fill = 64 - left;
        0x008185c0:    f1c60840    ..@.    RSB      r8,r6,#0x40
;;;257    
;;;258        ctx->total[0] += (uint32_t) ilen;
;;;259        ctx->total[0] &= 0xFFFFFFFF;
;;;260    
;;;261        if( ctx->total[0] < (uint32_t) ilen )
        0x008185c4:    6028        (`      STR      r0,[r5,#0]
        0x008185c6:    42a0        .B      CMP      r0,r4
        0x008185c8:    d202        ..      BCS      0x8185d0 ; mbedtls_md5_update_ret + 36
;;;262            ctx->total[1]++;
        0x008185ca:    6868        hh      LDR      r0,[r5,#4]
        0x008185cc:    1c40        @.      ADDS     r0,r0,#1
        0x008185ce:    6068        h`      STR      r0,[r5,#4]
;;;263    
;;;264        if( left && ilen >= fill )
        0x008185d0:    b1de        ..      CBZ      r6,0x81860a ; mbedtls_md5_update_ret + 94
        0x008185d2:    4544        DE      CMP      r4,r8
        0x008185d4:    d319        ..      BCC      0x81860a ; mbedtls_md5_update_ret + 94
;;;265        {
;;;266            memcpy( (void *) (ctx->buffer + left), input, fill );
        0x008185d6:    19a8        ..      ADDS     r0,r5,r6
        0x008185d8:    4642        BF      MOV      r2,r8
        0x008185da:    4639        9F      MOV      r1,r7
        0x008185dc:    3018        .0      ADDS     r0,r0,#0x18
        0x008185de:    f441f45c    A.\.    BL       __aeabi_memcpy ; 0x59e9a
;;;267            if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
        0x008185e2:    f1050118    ....    ADD      r1,r5,#0x18
        0x008185e6:    4628        (F      MOV      r0,r5
        0x008185e8:    f7fffc24    ..$.    BL       mbedtls_internal_md5_process ; 0x817e34
        0x008185ec:    2800        .(      CMP      r0,#0
        0x008185ee:    d116        ..      BNE      0x81861e ; mbedtls_md5_update_ret + 114
;;;268                return( ret );
;;;269    
;;;270            input += fill;
        0x008185f0:    4447        GD      ADD      r7,r7,r8
;;;271            ilen  -= fill;
        0x008185f2:    eba40408    ....    SUB      r4,r4,r8
;;;272            left = 0;
        0x008185f6:    2600        .&      MOVS     r6,#0
        0x008185f8:    e007        ..      B        0x81860a ; mbedtls_md5_update_ret + 94
        0x008185fa:    4639        9F      MOV      r1,r7
        0x008185fc:    4628        (F      MOV      r0,r5
        0x008185fe:    f7fffc19    ....    BL       mbedtls_internal_md5_process ; 0x817e34
        0x00818602:    2800        .(      CMP      r0,#0
        0x00818604:    d10b        ..      BNE      0x81861e ; mbedtls_md5_update_ret + 114
        0x00818606:    3c40        @<      SUBS     r4,r4,#0x40
        0x00818608:    3740        @7      ADDS     r7,r7,#0x40
;;;273        }
;;;274    
;;;275        while( ilen >= 64 )
        0x0081860a:    2c40        @,      CMP      r4,#0x40
        0x0081860c:    d2f5        ..      BCS      0x8185fa ; mbedtls_md5_update_ret + 78
;;;276        {
;;;277            if( ( ret = mbedtls_internal_md5_process( ctx, input ) ) != 0 )
;;;278                return( ret );
;;;279    
;;;280            input += 64;
;;;281            ilen  -= 64;
;;;282        }
;;;283    
;;;284        if( ilen > 0 )
        0x0081860e:    b12c        ,.      CBZ      r4,0x81861c ; mbedtls_md5_update_ret + 112
;;;285        {
;;;286            memcpy( (void *) (ctx->buffer + left), input, ilen );
        0x00818610:    19a8        ..      ADDS     r0,r5,r6
        0x00818612:    4622        "F      MOV      r2,r4
        0x00818614:    4639        9F      MOV      r1,r7
        0x00818616:    3018        .0      ADDS     r0,r0,#0x18
        0x00818618:    f441f43f    A.?.    BL       __aeabi_memcpy ; 0x59e9a
;;;287        }
;;;288    
;;;289        return( 0 );
        0x0081861c:    2000        .       MOVS     r0,#0
;;;290    }
        0x0081861e:    e8bd81f0    ....    POP      {r4-r8,pc}
    mbedtls_md5_update
;;;291    
;;;292    #if !defined(MBEDTLS_DEPRECATED_REMOVED)
;;;293    void mbedtls_md5_update( mbedtls_md5_context *ctx,
;;;294                             const unsigned char *input,
;;;295                             size_t ilen )
;;;296    {
;;;297        mbedtls_md5_update_ret( ctx, input, ilen );
        0x00818622:    e7c3        ..      B        mbedtls_md5_update_ret ; 0x8185ac
    mbedtls_md5_finish_ret
;;;298    }
;;;299    #endif
;;;300    
;;;301    /*
;;;302     * MD5 final digest
;;;303     */
;;;304    int mbedtls_md5_finish_ret( mbedtls_md5_context *ctx,
;;;305                                unsigned char output[16] )
;;;306    {
        0x00818624:    b570        p.      PUSH     {r4-r6,lr}
        0x00818626:    4604        .F      MOV      r4,r0
        0x00818628:    7800        .x      LDRB     r0,[r0,#0]
;;; sample\tuya_ble_sdk\extern_components\mbedtls\md5.c (306)
        0x0081862a:    460d        .F      MOV      r5,r1
;;;307        int ret;
;;;308        uint32_t used;
;;;309        uint32_t high, low;
;;;310    
;;;311        /*
;;;312         * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
;;;313         */
;;;314        used = ctx->total[0] & 0x3F;
        0x0081862c:    f000003f    ..?.    AND      r0,r0,#0x3f
;;;315    
;;;316        ctx->buffer[used++] = 0x80;
        0x00818630:    1822        ".      ADDS     r2,r4,r0
        0x00818632:    2180        .!      MOVS     r1,#0x80
        0x00818634:    1c40        @.      ADDS     r0,r0,#1
        0x00818636:    7611        .v      STRB     r1,[r2,#0x18]
        0x00818638:    f1040618    ....    ADD      r6,r4,#0x18
;;;317    
;;;318        if( used <= 56 )
        0x0081863c:    2838        8(      CMP      r0,#0x38
        0x0081863e:    d806        ..      BHI      0x81864e ; mbedtls_md5_finish_ret + 42
;;;319        {
;;;320            /* Enough room for padding + length in current block */
;;;321            memset( ctx->buffer + used, 0, 56 - used );
        0x00818640:    f1c00138    ..8.    RSB      r1,r0,#0x38
        0x00818644:    4420         D      ADD      r0,r0,r4
        0x00818646:    3018        .0      ADDS     r0,r0,#0x18
        0x00818648:    f441f4e8    A...    BL       __aeabi_memclr ; 0x5a01c
        0x0081864c:    e00f        ..      B        0x81866e ; mbedtls_md5_finish_ret + 74
;;;322        }
;;;323        else
;;;324        {
;;;325            /* We'll need an extra block */
;;;326            memset( ctx->buffer + used, 0, 64 - used );
        0x0081864e:    f1c00140    ..@.    RSB      r1,r0,#0x40
        0x00818652:    4420         D      ADD      r0,r0,r4
        0x00818654:    3018        .0      ADDS     r0,r0,#0x18
        0x00818656:    f441f4e1    A...    BL       __aeabi_memclr ; 0x5a01c
        0x0081865a:    4631        1F      MOV      r1,r6
;;;327    
;;;328            if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
        0x0081865c:    4620         F      MOV      r0,r4
        0x0081865e:    f7fffbe9    ....    BL       mbedtls_internal_md5_process ; 0x817e34
        0x00818662:    2800        .(      CMP      r0,#0
        0x00818664:    d14d        M.      BNE      0x818702 ; mbedtls_md5_finish_ret + 222
;;;329                return( ret );
;;;330    
;;;331            memset( ctx->buffer, 0, 56 );
        0x00818666:    2138        8!      MOVS     r1,#0x38
        0x00818668:    4630        0F      MOV      r0,r6
        0x0081866a:    f441f4f9    A...    BL       __aeabi_memclr4 ; 0x5a060
;;;332        }
;;;333    
;;;334        /*
;;;335         * Add message length
;;;336         */
;;;337        high = ( ctx->total[0] >> 29 )
        0x0081866e:    f8540b38    T.8.    LDR      r0,[r4],#0x38
        0x00818672:    0f41        A.      LSRS     r1,r0,#29
        0x00818674:    f8542c34    T.4,    LDR      r2,[r4,#-0x34]
        0x00818678:    00c0        ..      LSLS     r0,r0,#3
        0x0081867a:    ea4101c2    A...    ORR      r1,r1,r2,LSL #3
;;;338             | ( ctx->total[1] <<  3 );
;;;339        low  = ( ctx->total[0] <<  3 );
;;;340    
;;;341        PUT_UINT32_LE( low,  ctx->buffer, 56 );
        0x0081867e:    7620         v      STRB     r0,[r4,#0x18]
        0x00818680:    0a02        ..      LSRS     r2,r0,#8
        0x00818682:    7662        bv      STRB     r2,[r4,#0x19]
        0x00818684:    0c02        ..      LSRS     r2,r0,#16
        0x00818686:    76a2        .v      STRB     r2,[r4,#0x1a]
        0x00818688:    0e00        ..      LSRS     r0,r0,#24
        0x0081868a:    76e0        .v      STRB     r0,[r4,#0x1b]
;;;342        PUT_UINT32_LE( high, ctx->buffer, 60 );
        0x0081868c:    7721        !w      STRB     r1,[r4,#0x1c]
        0x0081868e:    0a08        ..      LSRS     r0,r1,#8
        0x00818690:    7760        `w      STRB     r0,[r4,#0x1d]
        0x00818692:    0c08        ..      LSRS     r0,r1,#16
        0x00818694:    77a0        .w      STRB     r0,[r4,#0x1e]
        0x00818696:    0e08        ..      LSRS     r0,r1,#24
        0x00818698:    77e0        .w      STRB     r0,[r4,#0x1f]
        0x0081869a:    3c38        8<      SUBS     r4,r4,#0x38
        0x0081869c:    4631        1F      MOV      r1,r6
;;;343    
;;;344        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
        0x0081869e:    4620         F      MOV      r0,r4
        0x008186a0:    f7fffbc8    ....    BL       mbedtls_internal_md5_process ; 0x817e34
        0x008186a4:    2800        .(      CMP      r0,#0
        0x008186a6:    d12c        ,.      BNE      0x818702 ; mbedtls_md5_finish_ret + 222
;;;345            return( ret );
;;;346    
;;;347        /*
;;;348         * Output final state
;;;349         */
;;;350        PUT_UINT32_LE( ctx->state[0], output,  0 );
        0x008186a8:    7a20         z      LDRB     r0,[r4,#8]
        0x008186aa:    7028        (p      STRB     r0,[r5,#0]
        0x008186ac:    8920         .      LDRH     r0,[r4,#8]
        0x008186ae:    0a00        ..      LSRS     r0,r0,#8
        0x008186b0:    7068        hp      STRB     r0,[r5,#1]
        0x008186b2:    68a0        .h      LDR      r0,[r4,#8]
        0x008186b4:    0c00        ..      LSRS     r0,r0,#16
        0x008186b6:    70a8        .p      STRB     r0,[r5,#2]
        0x008186b8:    68a0        .h      LDR      r0,[r4,#8]
        0x008186ba:    0e00        ..      LSRS     r0,r0,#24
        0x008186bc:    70e8        .p      STRB     r0,[r5,#3]
;;;351        PUT_UINT32_LE( ctx->state[1], output,  4 );
        0x008186be:    7b20         {      LDRB     r0,[r4,#0xc]
        0x008186c0:    7128        (q      STRB     r0,[r5,#4]
        0x008186c2:    89a0        ..      LDRH     r0,[r4,#0xc]
        0x008186c4:    0a00        ..      LSRS     r0,r0,#8
        0x008186c6:    7168        hq      STRB     r0,[r5,#5]
        0x008186c8:    68e0        .h      LDR      r0,[r4,#0xc]
        0x008186ca:    0c00        ..      LSRS     r0,r0,#16
        0x008186cc:    71a8        .q      STRB     r0,[r5,#6]
        0x008186ce:    68e0        .h      LDR      r0,[r4,#0xc]
        0x008186d0:    0e00        ..      LSRS     r0,r0,#24
        0x008186d2:    71e8        .q      STRB     r0,[r5,#7]
;;;352        PUT_UINT32_LE( ctx->state[2], output,  8 );
        0x008186d4:    7c20         |      LDRB     r0,[r4,#0x10]
        0x008186d6:    7228        (r      STRB     r0,[r5,#8]
        0x008186d8:    8a20         .      LDRH     r0,[r4,#0x10]
        0x008186da:    0a00        ..      LSRS     r0,r0,#8
        0x008186dc:    7268        hr      STRB     r0,[r5,#9]
        0x008186de:    6920         i      LDR      r0,[r4,#0x10]
        0x008186e0:    0c00        ..      LSRS     r0,r0,#16
        0x008186e2:    72a8        .r      STRB     r0,[r5,#0xa]
        0x008186e4:    6920         i      LDR      r0,[r4,#0x10]
        0x008186e6:    0e00        ..      LSRS     r0,r0,#24
        0x008186e8:    72e8        .r      STRB     r0,[r5,#0xb]
;;;353        PUT_UINT32_LE( ctx->state[3], output, 12 );
        0x008186ea:    7d20         }      LDRB     r0,[r4,#0x14]
        0x008186ec:    7328        (s      STRB     r0,[r5,#0xc]
        0x008186ee:    8aa0        ..      LDRH     r0,[r4,#0x14]
        0x008186f0:    0a00        ..      LSRS     r0,r0,#8
        0x008186f2:    7368        hs      STRB     r0,[r5,#0xd]
        0x008186f4:    6960        `i      LDR      r0,[r4,#0x14]
        0x008186f6:    0c00        ..      LSRS     r0,r0,#16
        0x008186f8:    73a8        .s      STRB     r0,[r5,#0xe]
        0x008186fa:    6960        `i      LDR      r0,[r4,#0x14]
        0x008186fc:    0e00        ..      LSRS     r0,r0,#24
        0x008186fe:    73e8        .s      STRB     r0,[r5,#0xf]
;;;354    
;;;355        return( 0 );
        0x00818700:    2000        .       MOVS     r0,#0
;;;356    }
        0x00818702:    bd70        p.      POP      {r4-r6,pc}
    mbedtls_md5_finish
;;;357    
;;;358    #if !defined(MBEDTLS_DEPRECATED_REMOVED)
;;;359    void mbedtls_md5_finish( mbedtls_md5_context *ctx,
;;;360                             unsigned char output[16] )
;;;361    {
;;;362        mbedtls_md5_finish_ret( ctx, output );
        0x00818704:    e78e        ..      B        mbedtls_md5_finish_ret ; 0x818624
    mbedtls_md5_ret
;;;363    }
;;;364    #endif
;;;365    
;;;366    #endif /* !MBEDTLS_MD5_ALT */
;;;367    
;;;368    /*
;;;369     * output = MD5( input buffer )
;;;370     */
;;;371    int mbedtls_md5_ret( const unsigned char *input,
;;;372                         size_t ilen,
;;;373                         unsigned char output[16] )
;;;374    {
        0x00818706:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00818708:    b097        ..      SUB      sp,sp,#0x5c
        0x0081870a:    4607        .F      MOV      r7,r0
        0x0081870c:    4615        .F      MOV      r5,r2
        0x0081870e:    460e        .F      MOV      r6,r1
;;;375        int ret;
;;;376        mbedtls_md5_context ctx;
;;;377    
;;;378        mbedtls_md5_init( &ctx );
        0x00818710:    4668        hF      MOV      r0,sp
        0x00818712:    f7fffb73    ..s.    BL       mbedtls_md5_init ; 0x817dfc
;;;379    
;;;380        if( ( ret = mbedtls_md5_starts_ret( &ctx ) ) != 0 )
        0x00818716:    4668        hF      MOV      r0,sp
        0x00818718:    f7fffb7c    ..|.    BL       mbedtls_md5_starts_ret ; 0x817e14
        0x0081871c:    0004        ..      MOVS     r4,r0
        0x0081871e:    d10b        ..      BNE      0x818738 ; mbedtls_md5_ret + 50
;;;381            goto exit;
;;;382    
;;;383        if( ( ret = mbedtls_md5_update_ret( &ctx, input, ilen ) ) != 0 )
        0x00818720:    4632        2F      MOV      r2,r6
        0x00818722:    4639        9F      MOV      r1,r7
        0x00818724:    4668        hF      MOV      r0,sp
        0x00818726:    f7ffff41    ..A.    BL       mbedtls_md5_update_ret ; 0x8185ac
        0x0081872a:    0004        ..      MOVS     r4,r0
        0x0081872c:    d104        ..      BNE      0x818738 ; mbedtls_md5_ret + 50
;;;384            goto exit;
;;;385    
;;;386        if( ( ret = mbedtls_md5_finish_ret( &ctx, output ) ) != 0 )
        0x0081872e:    4629        )F      MOV      r1,r5
        0x00818730:    4668        hF      MOV      r0,sp
        0x00818732:    f7ffff77    ..w.    BL       mbedtls_md5_finish_ret ; 0x818624
        0x00818736:    4604        .F      MOV      r4,r0
;;;387            goto exit;
;;;388    
;;;389    exit:
;;;390        mbedtls_md5_free( &ctx );
        0x00818738:    4668        hF      MOV      r0,sp
        0x0081873a:    f7fffb62    ..b.    BL       mbedtls_md5_free ; 0x817e02
        0x0081873e:    b017        ..      ADD      sp,sp,#0x5c
;;;391    
;;;392        return( ret );
        0x00818740:    4620         F      MOV      r0,r4
;;;393    }
        0x00818742:    bdf0        ..      POP      {r4-r7,pc}
    mbedtls_md5
;;;394    
;;;395    #if !defined(MBEDTLS_DEPRECATED_REMOVED)
;;;396    void mbedtls_md5( const unsigned char *input,
;;;397                      size_t ilen,
;;;398                      unsigned char output[16] )
;;;399    {
;;;400        mbedtls_md5_ret( input, ilen, output );
        0x00818744:    e7df        ..      B        mbedtls_md5_ret ; 0x818706
    $d
        0x00818746:    0000        ..      DCW    0
        0x00818748:    676f02d9    ..og    DCD    1735328473
        0x0081874c:    8d2a4c8a    .L*.    DCD    2368359562
        0x00818750:    fffa3942    B9..    DCD    4294588738
        0x00818754:    8771f681    ..q.    DCD    2272392833
        0x00818758:    6d9d6122    "a.m    DCD    1839030562
        0x0081875c:    fde5380c    .8..    DCD    4259657740
        0x00818760:    a4beea44    D...    DCD    2763975236
        0x00818764:    4bdecfa9    ...K    DCD    1272893353
        0x00818768:    f6bb4b60    `K..    DCD    4139469664
        0x0081876c:    bebfbc70    p...    DCD    3200236656
        0x00818770:    289b7ec6    .~.(    DCD    681279174
        0x00818774:    eaa127fa    .'..    DCD    3936430074
        0x00818778:    d4ef3085    .0..    DCD    3572445317
        0x0081877c:    04881d05    ....    DCD    76029189
        0x00818780:    d9d4d039    9...    DCD    3654602809
        0x00818784:    e6db99e5    ....    DCD    3873151461
        0x00818788:    1fa27cf8    .|..    DCD    530742520
        0x0081878c:    c4ac5665    eV..    DCD    3299628645
        0x00818790:    f4292244    D").    DCD    4096336452
        0x00818794:    432aff97    ..*C    DCD    1126891415
        0x00818798:    ab9423a7    .#..    DCD    2878612391
        0x0081879c:    fc93a039    9...    DCD    4237533241
        0x008187a0:    655b59c3    .Y[e    DCD    1700485571
        0x008187a4:    8f0ccc92    ....    DCD    2399980690
        0x008187a8:    ffeff47d    }...    DCD    4293915773
        0x008187ac:    85845dd1    .]..    DCD    2240044497
        0x008187b0:    6fa87e4f    O~.o    DCD    1873313359
        0x008187b4:    fe2ce6e0    ..,.    DCD    4264355552
        0x008187b8:    a3014314    .C..    DCD    2734768916
        0x008187bc:    4e0811a1    ...N    DCD    1309151649
        0x008187c0:    f7537e82    .~S.    DCD    4149444226
        0x008187c4:    bd3af235    5.:.    DCD    3174756917
        0x008187c8:    2ad7d2bb    ...*    DCD    718787259
        0x008187cc:    eb86d391    ....    DCD    3951481745
    $t
    .text
    mbedtls_sha1_init
;;; sample\tuya_ble_sdk\extern_components\mbedtls\sha1.c
;;;76         memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
        0x008187d0:    215c        \!      MOVS     r1,#0x5c
        0x008187d2:    f441b445    A.E.    B        __aeabi_memclr4 ; 0x5a060
    mbedtls_sha1_free
;;;77     }
;;;78     
;;;79     void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
;;;80     {
        0x008187d6:    2800        .(      CMP      r0,#0
        0x008187d8:    d002        ..      BEQ      0x8187e0 ; mbedtls_sha1_free + 10
;;;81         if( ctx == NULL )
;;;82             return;
;;;83     
;;;84         //mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
;;;85         memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
        0x008187da:    215c        \!      MOVS     r1,#0x5c
        0x008187dc:    f441b440    A.@.    B        __aeabi_memclr4 ; 0x5a060
;;;86     }
        0x008187e0:    4770        pG      BX       lr
    mbedtls_sha1_clone
;;;87     
;;;88     void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
;;;89                              const mbedtls_sha1_context *src )
;;;90     {
;;;91         SHA1_VALIDATE( dst != NULL );
;;;92         SHA1_VALIDATE( src != NULL );
;;;93     
;;;94         *dst = *src;
        0x008187e2:    225c        \"      MOVS     r2,#0x5c
        0x008187e4:    f441b3e0    A...    B        __aeabi_memcpy4 ; 0x59fa8
    mbedtls_sha1_starts_ret
;;;95     }
;;;96     
;;;97     /*
;;;98      * SHA-1 context setup
;;;99      */
;;;100    int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
;;;101    {
;;;102        SHA1_VALIDATE_RET( ctx != NULL );
;;;103    
;;;104        ctx->total[0] = 0;
        0x008187e8:    2100        .!      MOVS     r1,#0
;;;105        ctx->total[1] = 0;
        0x008187ea:    6001        .`      STR      r1,[r0,#0]
;;;106    
;;;107        ctx->state[0] = 0x67452301;
        0x008187ec:    6041        A`      STR      r1,[r0,#4]
        0x008187ee:    49fe        .I      LDR      r1,[pc,#1016] ; [0x818be8] = 0x67452301
;;;108        ctx->state[1] = 0xEFCDAB89;
        0x008187f0:    6081        .`      STR      r1,[r0,#8]
        0x008187f2:    49fe        .I      LDR      r1,[pc,#1016] ; [0x818bec] = 0xefcdab89
;;;109        ctx->state[2] = 0x98BADCFE;
        0x008187f4:    60c1        .`      STR      r1,[r0,#0xc]
        0x008187f6:    49fc        .I      LDR      r1,[pc,#1008] ; [0x818be8] = 0x67452301
        0x008187f8:    43c9        .C      MVNS     r1,r1
;;;110        ctx->state[3] = 0x10325476;
        0x008187fa:    6101        .a      STR      r1,[r0,#0x10]
        0x008187fc:    49fb        .I      LDR      r1,[pc,#1004] ; [0x818bec] = 0xefcdab89
        0x008187fe:    43c9        .C      MVNS     r1,r1
;;;111        ctx->state[4] = 0xC3D2E1F0;
        0x00818800:    6141        Aa      STR      r1,[r0,#0x14]
        0x00818802:    49fb        .I      LDR      r1,[pc,#1004] ; [0x818bf0] = 0xc3d2e1f0
;;;112    
;;;113        return( 0 );
        0x00818804:    6181        .a      STR      r1,[r0,#0x18]
        0x00818806:    2000        .       MOVS     r0,#0
;;;114    }
        0x00818808:    4770        pG      BX       lr
    mbedtls_sha1_starts
;;;115    
;;;116    #if !defined(MBEDTLS_DEPRECATED_REMOVED)
;;;117    void mbedtls_sha1_starts( mbedtls_sha1_context *ctx )
;;;118    {
;;;119        mbedtls_sha1_starts_ret( ctx );
        0x0081880a:    e7ed        ..      B        mbedtls_sha1_starts_ret ; 0x8187e8
    mbedtls_internal_sha1_process
;;;120    }
;;;121    #endif
;;;122    
;;;123    #if !defined(MBEDTLS_SHA1_PROCESS_ALT)
;;;124    int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
;;;125                                       const unsigned char data[64] )
;;;126    {
        0x0081880c:    e92d4ff0    -..O    PUSH     {r4-r11,lr}
        0x00818810:    680a        .h      LDR      r2,[r1,#0]
;;; sample\tuya_ble_sdk\extern_components\mbedtls\sha1.c (126)
        0x00818812:    b09b        ..      SUB      sp,sp,#0x6c
;;;127        uint32_t temp, W[16], A, B, C, D, E;
;;;128    
;;;129        SHA1_VALIDATE_RET( ctx != NULL );
;;;130        SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );
;;;131    
;;;132        GET_UINT32_BE( W[ 0], data,  0 );
        0x00818814:    ba12        ..      REV      r2,r2
        0x00818816:    f0220cff    "...    BIC      r12,r2,#0xff
        0x0081881a:    78ca        .x      LDRB     r2,[r1,#3]
        0x0081881c:    ea4c0c02    L...    ORR      r12,r12,r2
;;;133        GET_UINT32_BE( W[ 1], data,  4 );
        0x00818820:    f8cdc014    ....    STR      r12,[sp,#0x14]
        0x00818824:    684a        Jh      LDR      r2,[r1,#4]
        0x00818826:    ba12        ..      REV      r2,r2
        0x00818828:    f0220cff    "...    BIC      r12,r2,#0xff
        0x0081882c:    79ca        .y      LDRB     r2,[r1,#7]
        0x0081882e:    ea4c0c02    L...    ORR      r12,r12,r2
;;;134        GET_UINT32_BE( W[ 2], data,  8 );
        0x00818832:    f8cdc018    ....    STR      r12,[sp,#0x18]
        0x00818836:    688a        .h      LDR      r2,[r1,#8]
        0x00818838:    ba12        ..      REV      r2,r2
        0x0081883a:    f02205ff    "...    BIC      r5,r2,#0xff
        0x0081883e:    7aca        .z      LDRB     r2,[r1,#0xb]
        0x00818840:    4315        .C      ORRS     r5,r5,r2
;;;135        GET_UINT32_BE( W[ 3], data, 12 );
        0x00818842:    9507        ..      STR      r5,[sp,#0x1c]
        0x00818844:    68ca        .h      LDR      r2,[r1,#0xc]
        0x00818846:    ba12        ..      REV      r2,r2
        0x00818848:    f02205ff    "...    BIC      r5,r2,#0xff
        0x0081884c:    7bca        .{      LDRB     r2,[r1,#0xf]
        0x0081884e:    4315        .C      ORRS     r5,r5,r2
;;;136        GET_UINT32_BE( W[ 4], data, 16 );
        0x00818850:    9508        ..      STR      r5,[sp,#0x20]
        0x00818852:    690a        .i      LDR      r2,[r1,#0x10]
        0x00818854:    ba12        ..      REV      r2,r2
        0x00818856:    f02207ff    "...    BIC      r7,r2,#0xff
        0x0081885a:    7cca        .|      LDRB     r2,[r1,#0x13]
        0x0081885c:    4317        .C      ORRS     r7,r7,r2
;;;137        GET_UINT32_BE( W[ 5], data, 20 );
        0x0081885e:    9709        ..      STR      r7,[sp,#0x24]
        0x00818860:    694a        Ji      LDR      r2,[r1,#0x14]
        0x00818862:    ba12        ..      REV      r2,r2
        0x00818864:    f02206ff    "...    BIC      r6,r2,#0xff
        0x00818868:    7dca        .}      LDRB     r2,[r1,#0x17]
        0x0081886a:    4316        .C      ORRS     r6,r6,r2
;;;138        GET_UINT32_BE( W[ 6], data, 24 );
        0x0081886c:    960a        ..      STR      r6,[sp,#0x28]
        0x0081886e:    698a        .i      LDR      r2,[r1,#0x18]
        0x00818870:    ba12        ..      REV      r2,r2
        0x00818872:    f0220cff    "...    BIC      r12,r2,#0xff
        0x00818876:    7eca        .~      LDRB     r2,[r1,#0x1b]
        0x00818878:    ea4c0c02    L...    ORR      r12,r12,r2
;;;139        GET_UINT32_BE( W[ 7], data, 28 );
        0x0081887c:    f8cdc02c    ..,.    STR      r12,[sp,#0x2c]
        0x00818880:    69ca        .i      LDR      r2,[r1,#0x1c]
        0x00818882:    ba12        ..      REV      r2,r2
        0x00818884:    f0220cff    "...    BIC      r12,r2,#0xff
        0x00818888:    7fca        ..      LDRB     r2,[r1,#0x1f]
        0x0081888a:    ea4c0c02    L...    ORR      r12,r12,r2
;;;140        GET_UINT32_BE( W[ 8], data, 32 );
        0x0081888e:    f8cdc030    ..0.    STR      r12,[sp,#0x30]
        0x00818892:    6a0a        .j      LDR      r2,[r1,#0x20]
        0x00818894:    ba12        ..      REV      r2,r2
        0x00818896:    f0220cff    "...    BIC      r12,r2,#0xff
        0x0081889a:    f8912023    ..#     LDRB     r2,[r1,#0x23]
        0x0081889e:    ea4c0a02    L...    ORR      r10,r12,r2
;;;141        GET_UINT32_BE( W[ 9], data, 36 );
        0x008188a2:    6a4a        Jj      LDR      r2,[r1,#0x24]
        0x008188a4:    ba12        ..      REV      r2,r2
        0x008188a6:    f0220cff    "...    BIC      r12,r2,#0xff
        0x008188aa:    f8912027    ..'     LDRB     r2,[r1,#0x27]
        0x008188ae:    ea4c0e02    L...    ORR      lr,r12,r2
;;;142        GET_UINT32_BE( W[10], data, 40 );
        0x008188b2:    6a8a        .j      LDR      r2,[r1,#0x28]
        0x008188b4:    ba12        ..      REV      r2,r2
        0x008188b6:    f02206ff    "...    BIC      r6,r2,#0xff
        0x008188ba:    f891202b    ..+     LDRB     r2,[r1,#0x2b]
        0x008188be:    4316        .C      ORRS     r6,r6,r2
;;;143        GET_UINT32_BE( W[11], data, 44 );
        0x008188c0:    960f        ..      STR      r6,[sp,#0x3c]
        0x008188c2:    6aca        .j      LDR      r2,[r1,#0x2c]
        0x008188c4:    ba12        ..      REV      r2,r2
        0x008188c6:    f0220cff    "...    BIC      r12,r2,#0xff
        0x008188ca:    f891202f    ../     LDRB     r2,[r1,#0x2f]
        0x008188ce:    ea4c0c02    L...    ORR      r12,r12,r2
;;;144        GET_UINT32_BE( W[12], data, 48 );
        0x008188d2:    f8cdc040    ..@.    STR      r12,[sp,#0x40]
        0x008188d6:    6b0a        .k      LDR      r2,[r1,#0x30]
        0x008188d8:    ba12        ..      REV      r2,r2
        0x008188da:    f0220cff    "...    BIC      r12,r2,#0xff
        0x008188de:    f8912033    ..3     LDRB     r2,[r1,#0x33]
        0x008188e2:    ea4c0c02    L...    ORR      r12,r12,r2
;;;145        GET_UINT32_BE( W[13], data, 52 );
        0x008188e6:    f8cdc044    ..D.    STR      r12,[sp,#0x44]
        0x008188ea:    6b4a        Jk      LDR      r2,[r1,#0x34]
        0x008188ec:    f8913037    ..70    LDRB     r3,[r1,#0x37]
        0x008188f0:    ba12        ..      REV      r2,r2
        0x008188f2:    f02202ff    "...    BIC      r2,r2,#0xff
        0x008188f6:    431a        .C      ORRS     r2,r2,r3
;;;146        GET_UINT32_BE( W[14], data, 56 );
        0x008188f8:    6b8b        .k      LDR      r3,[r1,#0x38]
        0x008188fa:    f891403b    ..;@    LDRB     r4,[r1,#0x3b]
        0x008188fe:    ba1b        ..      REV      r3,r3
        0x00818900:    f02303ff    #...    BIC      r3,r3,#0xff
        0x00818904:    4323        #C      ORRS     r3,r3,r4
;;;147        GET_UINT32_BE( W[15], data, 60 );
        0x00818906:    6bcc        .k      LDR      r4,[r1,#0x3c]
        0x00818908:    f891103f    ..?.    LDRB     r1,[r1,#0x3f]
;;;148    
;;;149    #define S(x,n) ((x << n) | ((x & 0xFFFFFFFF) >> (32 - n)))
;;;150    
;;;151    #define R(t)                                            \
;;;152    (                                                       \
;;;153        temp = W[( t -  3 ) & 0x0F] ^ W[( t - 8 ) & 0x0F] ^ \
;;;154               W[( t - 14 ) & 0x0F] ^ W[  t       & 0x0F],  \
;;;155        ( W[t & 0x0F] = S(temp,1) )                         \
;;;156    )
;;;157    
;;;158    #define P(a,b,c,d,e,x)                                  \
;;;159    {                                                       \
;;;160        e += S(a,5) + F(b,c,d) + K + x; b = S(b,30);        \
;;;161    }
;;;162    
;;;163        A = ctx->state[0];
        0x0081890c:    6886        .h      LDR      r6,[r0,#8]
        0x0081890e:    961a        ..      STR      r6,[sp,#0x68]
        0x00818910:    46b1        .F      MOV      r9,r6
;;;164        B = ctx->state[1];
        0x00818912:    68c6        .h      LDR      r6,[r0,#0xc]
;;;165        C = ctx->state[2];
        0x00818914:    9619        ..      STR      r6,[sp,#0x64]
        0x00818916:    6907        .i      LDR      r7,[r0,#0x10]
        0x00818918:    ba24        $.      REV      r4,r4
;;;166        D = ctx->state[3];
        0x0081891a:    9718        ..      STR      r7,[sp,#0x60]
        0x0081891c:    f02404ff    $...    BIC      r4,r4,#0xff
        0x00818920:    6945        Ei      LDR      r5,[r0,#0x14]
        0x00818922:    430c        .C      ORRS     r4,r4,r1
;;;167        E = ctx->state[4];
        0x00818924:    9517        ..      STR      r5,[sp,#0x5c]
        0x00818926:    6981        .i      LDR      r1,[r0,#0x18]
        0x00818928:    9116        ..      STR      r1,[sp,#0x58]
        0x0081892a:    4688        .F      MOV      r8,r1
;;;168    
;;;169    #define F(x,y,z) (z ^ (x & (y ^ z)))
;;;170    #define K 0x5A827999
;;;171    
;;;172        P( A, B, C, D, E, W[0]  );
        0x0081892c:    ea870105    ....    EOR      r1,r7,r5
        0x00818930:    46b3        .F      MOV      r11,r6
        0x00818932:    4031        1@      ANDS     r1,r1,r6
        0x00818934:    4069        i@      EORS     r1,r1,r5
        0x00818936:    f8ddc014    ....    LDR      r12,[sp,#0x14]
        0x0081893a:    eb0166f9    ...f    ADD      r6,r1,r9,ROR #27
        0x0081893e:    eb0c0108    ....    ADD      r1,r12,r8
        0x00818942:    440e        .D      ADD      r6,r6,r1
        0x00818944:    ea4f0bbb    O...    ROR      r11,r11,#2
        0x00818948:    49aa        .I      LDR      r1,[pc,#680] ; [0x818bf4] = 0x5a827999
        0x0081894a:    ea8b0c07    ....    EOR      r12,r11,r7
        0x0081894e:    ea0c0c09    ....    AND      r12,r12,r9
        0x00818952:    eb060801    ....    ADD      r8,r6,r1
;;;173        P( E, A, B, C, D, W[1]  );
        0x00818956:    ea8c0c07    ....    EOR      r12,r12,r7
        0x0081895a:    eb0c66f8    ...f    ADD      r6,r12,r8,ROR #27
        0x0081895e:    f8ddc018    ....    LDR      r12,[sp,#0x18]
        0x00818962:    f8cd8000    ....    STR      r8,[sp,#0]
        0x00818966:    4465        eD      ADD      r5,r5,r12
        0x00818968:    4435        5D      ADD      r5,r5,r6
        0x0081896a:    eb050801    ....    ADD      r8,r5,r1
        0x0081896e:    f8cd8004    ....    STR      r8,[sp,#4]
        0x00818972:    ea4f06b9    O...    ROR      r6,r9,#2
;;;174        P( D, E, A, B, C, W[2]  );
        0x00818976:    f8dd8000    ....    LDR      r8,[sp,#0]
        0x0081897a:    ea86050b    ....    EOR      r5,r6,r11
        0x0081897e:    ea050508    ....    AND      r5,r5,r8
        0x00818982:    f8dd8004    ....    LDR      r8,[sp,#4]
        0x00818986:    ea85050b    ....    EOR      r5,r5,r11
        0x0081898a:    eb056cf8    ...l    ADD      r12,r5,r8,ROR #27
        0x0081898e:    9d07        ..      LDR      r5,[sp,#0x1c]
        0x00818990:    443d        =D      ADD      r5,r5,r7
        0x00818992:    4465        eD      ADD      r5,r5,r12
        0x00818994:    eb050801    ....    ADD      r8,r5,r1
        0x00818998:    f8cd8008    ....    STR      r8,[sp,#8]
        0x0081899c:    f8dd8000    ....    LDR      r8,[sp,#0]
        0x008189a0:    9d08        ..      LDR      r5,[sp,#0x20]
        0x008189a2:    ea4f09b8    O...    ROR      r9,r8,#2
;;;175        P( C, D, E, A, B, W[3]  );
        0x008189a6:    f8dd8004    ....    LDR      r8,[sp,#4]
        0x008189aa:    ea890c06    ....    EOR      r12,r9,r6
        0x008189ae:    ea0c0c08    ....    AND      r12,r12,r8
        0x008189b2:    f8dd8008    ....    LDR      r8,[sp,#8]
        0x008189b6:    ea8c0c06    ....    EOR      r12,r12,r6
        0x008189ba:    eb0c67f8    ...g    ADD      r7,r12,r8,ROR #27
        0x008189be:    445d        ]D      ADD      r5,r5,r11
        0x008189c0:    443d        =D      ADD      r5,r5,r7
        0x008189c2:    eb050b01    ....    ADD      r11,r5,r1
        0x008189c6:    f8dd8004    ....    LDR      r8,[sp,#4]
        0x008189ca:    ea4f05b8    O...    ROR      r5,r8,#2
;;;176        P( B, C, D, E, A, W[4]  );
        0x008189ce:    f8dd8008    ....    LDR      r8,[sp,#8]
        0x008189d2:    ea850709    ....    EOR      r7,r5,r9
        0x008189d6:    ea070708    ....    AND      r7,r7,r8
        0x008189da:    ea870709    ....    EOR      r7,r7,r9
        0x008189de:    eb076cfb    ...l    ADD      r12,r7,r11,ROR #27
        0x008189e2:    9f09        ..      LDR      r7,[sp,#0x24]
        0x008189e4:    443e        >D      ADD      r6,r6,r7
        0x008189e6:    4466        fD      ADD      r6,r6,r12
        0x008189e8:    eb060801    ....    ADD      r8,r6,r1
        0x008189ec:    f8cd8010    ....    STR      r8,[sp,#0x10]
        0x008189f0:    f8dd8008    ....    LDR      r8,[sp,#8]
        0x008189f4:    ea4f07b8    O...    ROR      r7,r8,#2
;;;177        P( A, B, C, D, E, W[5]  );
        0x008189f8:    ea870605    ....    EOR      r6,r7,r5
        0x008189fc:    ea06060b    ....    AND      r6,r6,r11
        0x00818a00:    f8dd8010    ....    LDR      r8,[sp,#0x10]
        0x00818a04:    406e        n@      EORS     r6,r6,r5
        0x00818a06:    eb0668f8    ...h    ADD      r8,r6,r8,ROR #27
        0x00818a0a:    9e0a        ..      LDR      r6,[sp,#0x28]
        0x00818a0c:    444e        ND      ADD      r6,r6,r9
        0x00818a0e:    4446        FD      ADD      r6,r6,r8
        0x00818a10:    eb060901    ....    ADD      r9,r6,r1
        0x00818a14:    ea4f06bb    O...    ROR      r6,r11,#2
;;;178        P( E, A, B, C, D, W[6]  );
        0x00818a18:    f8dd8010    ....    LDR      r8,[sp,#0x10]
        0x00818a1c:    ea860c07    ....    EOR      r12,r6,r7
        0x00818a20:    ea0c0c08    ....    AND      r12,r12,r8
        0x00818a24:    ea8c0c07    ....    EOR      r12,r12,r7
        0x00818a28:    eb0c68f9    ...h    ADD      r8,r12,r9,ROR #27
        0x00818a2c:    f8ddc02c    ..,.    LDR      r12,[sp,#0x2c]
        0x00818a30:    f8cd9000    ....    STR      r9,[sp,#0]
        0x00818a34:    4465        eD      ADD      r5,r5,r12
        0x00818a36:    4445        ED      ADD      r5,r5,r8
        0x00818a38:    eb050901    ....    ADD      r9,r5,r1
        0x00818a3c:    f8dd8010    ....    LDR      r8,[sp,#0x10]
        0x00818a40:    f8cd9004    ....    STR      r9,[sp,#4]
        0x00818a44:    ea4f05b8    O...    ROR      r5,r8,#2
;;;179        P( D, E, A, B, C, W[7]  );
        0x00818a48:    f8dd9000    ....    LDR      r9,[sp,#0]
        0x00818a4c:    ea850c06    ....    EOR      r12,r5,r6
        0x00818a50:    ea0c0c09    ....    AND      r12,r12,r9
        0x00818a54:    ea8c0c06    ....    EOR      r12,r12,r6
        0x00818a58:    f8dd9004    ....    LDR      r9,[sp,#4]
        0x00818a5c:    4456        VD      ADD      r6,r6,r10
        0x00818a5e:    eb0c68f9    ...h    ADD      r8,r12,r9,ROR #27
        0x00818a62:    f8ddc030    ..0.    LDR      r12,[sp,#0x30]
        0x00818a66:    f8dd9000    ....    LDR      r9,[sp,#0]
        0x00818a6a:    4467        gD      ADD      r7,r7,r12
        0x00818a6c:    ea4f0bb9    O...    ROR      r11,r9,#2
        0x00818a70:    f8dd9004    ....    LDR      r9,[sp,#4]
        0x00818a74:    ea8b0c05    ....    EOR      r12,r11,r5
        0x00818a78:    ea0c0c09    ....    AND      r12,r12,r9
        0x00818a7c:    4447        GD      ADD      r7,r7,r8
        0x00818a7e:    ea8c0c05    ....    EOR      r12,r12,r5
        0x00818a82:    eb070801    ....    ADD      r8,r7,r1
;;;180        P( C, D, E, A, B, W[8]  );
        0x00818a86:    eb0c67f8    ...g    ADD      r7,r12,r8,ROR #27
        0x00818a8a:    443e        >D      ADD      r6,r6,r7
        0x00818a8c:    1877        w.      ADDS     r7,r6,r1
        0x00818a8e:    ea4f09b9    O...    ROR      r9,r9,#2
;;;181        P( B, C, D, E, A, W[9]  );
        0x00818a92:    ea89060b    ....    EOR      r6,r9,r11
        0x00818a96:    ea060608    ....    AND      r6,r6,r8
        0x00818a9a:    ea86060b    ....    EOR      r6,r6,r11
        0x00818a9e:    eb0666f7    ...f    ADD      r6,r6,r7,ROR #27
        0x00818aa2:    4475        uD      ADD      r5,r5,lr
        0x00818aa4:    4435        5D      ADD      r5,r5,r6
        0x00818aa6:    eb050c01    ....    ADD      r12,r5,r1
        0x00818aaa:    ea4f05b8    O...    ROR      r5,r8,#2
;;;182        P( A, B, C, D, E, W[10] );
        0x00818aae:    ea850809    ....    EOR      r8,r5,r9
        0x00818ab2:    ea080807    ....    AND      r8,r8,r7
        0x00818ab6:    9e0f        ..      LDR      r6,[sp,#0x3c]
        0x00818ab8:    ea880809    ....    EOR      r8,r8,r9
        0x00818abc:    eb0868fc    ...h    ADD      r8,r8,r12,ROR #27
        0x00818ac0:    445e        ^D      ADD      r6,r6,r11
        0x00818ac2:    4446        FD      ADD      r6,r6,r8
        0x00818ac4:    f8cdc010    ....    STR      r12,[sp,#0x10]
        0x00818ac8:    eb060b01    ....    ADD      r11,r6,r1
        0x00818acc:    ea4f07b7    O...    ROR      r7,r7,#2
;;;183        P( E, A, B, C, D, W[11] );
        0x00818ad0:    ea870605    ....    EOR      r6,r7,r5
        0x00818ad4:    ea06060c    ....    AND      r6,r6,r12
        0x00818ad8:    406e        n@      EORS     r6,r6,r5
        0x00818ada:    f8ddc040    ..@.    LDR      r12,[sp,#0x40]
        0x00818ade:    eb0668fb    ...h    ADD      r8,r6,r11,ROR #27
        0x00818ae2:    eb0c0609    ....    ADD      r6,r12,r9
        0x00818ae6:    4446        FD      ADD      r6,r6,r8
        0x00818ae8:    eb060c01    ....    ADD      r12,r6,r1
        0x00818aec:    f8cdc004    ....    STR      r12,[sp,#4]
        0x00818af0:    f8ddc010    ....    LDR      r12,[sp,#0x10]
        0x00818af4:    ea4f06bc    O...    ROR      r6,r12,#2
;;;184        P( D, E, A, B, C, W[12] );
        0x00818af8:    ea860807    ....    EOR      r8,r6,r7
        0x00818afc:    ea08080b    ....    AND      r8,r8,r11
        0x00818b00:    f8ddc004    ....    LDR      r12,[sp,#4]
        0x00818b04:    ea880807    ....    EOR      r8,r8,r7
        0x00818b08:    eb0868fc    ...h    ADD      r8,r8,r12,ROR #27
        0x00818b0c:    f8ddc044    ..D.    LDR      r12,[sp,#0x44]
        0x00818b10:    4417        .D      ADD      r7,r7,r2
        0x00818b12:    4465        eD      ADD      r5,r5,r12
        0x00818b14:    4445        ED      ADD      r5,r5,r8
        0x00818b16:    eb050901    ....    ADD      r9,r5,r1
        0x00818b1a:    ea4f05bb    O...    ROR      r5,r11,#2
;;;185        P( C, D, E, A, B, W[13] );
        0x00818b1e:    f8ddc004    ....    LDR      r12,[sp,#4]
        0x00818b22:    ea850806    ....    EOR      r8,r5,r6
        0x00818b26:    ea08080c    ....    AND      r8,r8,r12
        0x00818b2a:    ea880806    ....    EOR      r8,r8,r6
        0x00818b2e:    eb086cf9    ...l    ADD      r12,r8,r9,ROR #27
        0x00818b32:    4467        gD      ADD      r7,r7,r12
        0x00818b34:    eb070801    ....    ADD      r8,r7,r1
        0x00818b38:    f8ddc004    ....    LDR      r12,[sp,#4]
        0x00818b3c:    441e        .D      ADD      r6,r6,r3
        0x00818b3e:    ea4f07bc    O...    ROR      r7,r12,#2
        0x00818b42:    ea870c05    ....    EOR      r12,r7,r5
        0x00818b46:    ea0c0c09    ....    AND      r12,r12,r9
        0x00818b4a:    ea8c0c05    ....    EOR      r12,r12,r5
        0x00818b4e:    eb0c6cf8    ...l    ADD      r12,r12,r8,ROR #27
        0x00818b52:    f8cd9008    ....    STR      r9,[sp,#8]
;;;186        P( B, C, D, E, A, W[14] );
        0x00818b56:    4466        fD      ADD      r6,r6,r12
        0x00818b58:    eb060901    ....    ADD      r9,r6,r1
        0x00818b5c:    f8cd9010    ....    STR      r9,[sp,#0x10]
        0x00818b60:    f8dd9008    ....    LDR      r9,[sp,#8]
        0x00818b64:    4425        %D      ADD      r5,r5,r4
        0x00818b66:    ea4f06b9    O...    ROR      r6,r9,#2
;;;187        P( A, B, C, D, E, W[15] );
        0x00818b6a:    ea860c07    ....    EOR      r12,r6,r7
        0x00818b6e:    ea0c0c08    ....    AND      r12,r12,r8
        0x00818b72:    f8dd9010    ....    LDR      r9,[sp,#0x10]
        0x00818b76:    ea8c0c07    ....    EOR      r12,r12,r7
        0x00818b7a:    eb0c6cf9    ...l    ADD      r12,r12,r9,ROR #27
        0x00818b7e:    4465        eD      ADD      r5,r5,r12
        0x00818b80:    eb050c01    ....    ADD      r12,r5,r1
        0x00818b84:    f8cdc000    ....    STR      r12,[sp,#0]
        0x00818b88:    f8ddc014    ....    LDR      r12,[sp,#0x14]
        0x00818b8c:    9d07        ..      LDR      r5,[sp,#0x1c]
        0x00818b8e:    ea4f0bb8    O...    ROR      r11,r8,#2
;;;188        P( E, A, B, C, D, R(16) );
        0x00818b92:    ea85050c    ....    EOR      r5,r5,r12
        0x00818b96:    ea82080a    ....    EOR      r8,r2,r10
        0x00818b9a:    ea880805    ....    EOR      r8,r8,r5
        0x00818b9e:    ea8b0506    ....    EOR      r5,r11,r6
        0x00818ba2:    ea050509    ....    AND      r5,r5,r9
        0x00818ba6:    f8ddc000    ....    LDR      r12,[sp,#0]
        0x00818baa:    4075        u@      EORS     r5,r5,r6
        0x00818bac:    eb0565fc    ...e    ADD      r5,r5,r12,ROR #27
        0x00818bb0:    ea4f7cf8    O..|    ROR      r12,r8,#31
        0x00818bb4:    4465        eD      ADD      r5,r5,r12
        0x00818bb6:    443d        =D      ADD      r5,r5,r7
        0x00818bb8:    ea4f08b9    O...    ROR      r8,r9,#2
        0x00818bbc:    440d        .D      ADD      r5,r5,r1
;;;189        P( D, E, A, B, C, R(17) );
        0x00818bbe:    e9cd8c04    ....    STRD     r8,r12,[sp,#0x10]
        0x00818bc2:    9501        ..      STR      r5,[sp,#4]
        0x00818bc4:    f8ddc018    ....    LDR      r12,[sp,#0x18]
        0x00818bc8:    9d08        ..      LDR      r5,[sp,#0x20]
        0x00818bca:    ea83070e    ....    EOR      r7,r3,lr
        0x00818bce:    ea85050c    ....    EOR      r5,r5,r12
        0x00818bd2:    406f        o@      EORS     r7,r7,r5
        0x00818bd4:    f8ddc000    ....    LDR      r12,[sp,#0]
        0x00818bd8:    ea88080b    ....    EOR      r8,r8,r11
        0x00818bdc:    ea08080c    ....    AND      r8,r8,r12
        0x00818be0:    ea88080b    ....    EOR      r8,r8,r11
        0x00818be4:    9d01        ..      LDR      r5,[sp,#4]
        0x00818be6:    e007        ..      B        0x818bf8 ; mbedtls_internal_sha1_process + 1004
    $d
        0x00818be8:    67452301    .#Eg    DCD    1732584193
        0x00818bec:    efcdab89    ....    DCD    4023233417
        0x00818bf0:    c3d2e1f0    ....    DCD    3285377520
        0x00818bf4:    5a827999    .y.Z    DCD    1518500249
    $t
        0x00818bf8:    eb086cf5    ...l    ADD      r12,r8,r5,ROR #27
        0x00818bfc:    ea4f75f7    O..u    ROR      r5,r7,#31
        0x00818c00:    9506        ..      STR      r5,[sp,#0x18]
        0x00818c02:    4465        eD      ADD      r5,r5,r12
        0x00818c04:    4435        5D      ADD      r5,r5,r6
        0x00818c06:    4429        )D      ADD      r1,r1,r5
        0x00818c08:    9102        ..      STR      r1,[sp,#8]
        0x00818c0a:    9900        ..      LDR      r1,[sp,#0]
        0x00818c0c:    9d0f        ..      LDR      r5,[sp,#0x3c]
        0x00818c0e:    ea4f09b1    O...    ROR      r9,r1,#2
;;;190        P( C, D, E, A, B, R(18) );
        0x00818c12:    ea840105    ....    EOR      r1,r4,r5
        0x00818c16:    9e07        ..      LDR      r6,[sp,#0x1c]
        0x00818c18:    9d09        ..      LDR      r5,[sp,#0x24]
        0x00818c1a:    f8df848c    ....    LDR      r8,[pc,#1164] ; [0x8190a8] = 0x5a827999
        0x00818c1e:    4075        u@      EORS     r5,r5,r6
        0x00818c20:    4069        i@      EORS     r1,r1,r5
        0x00818c22:    9d04        ..      LDR      r5,[sp,#0x10]
        0x00818c24:    ea890705    ....    EOR      r7,r9,r5
        0x00818c28:    9d01        ..      LDR      r5,[sp,#4]
        0x00818c2a:    402f        /@      ANDS     r7,r7,r5
        0x00818c2c:    9d04        ..      LDR      r5,[sp,#0x10]
        0x00818c2e:    406f        o@      EORS     r7,r7,r5
        0x00818c30:    9d02        ..      LDR      r5,[sp,#8]
        0x00818c32:    eb0765f5    ...e    ADD      r5,r7,r5,ROR #27
        0x00818c36:    ea4f77f1    O..w    ROR      r7,r1,#31
        0x00818c3a:    9901        ..      LDR      r1,[sp,#4]
        0x00818c3c:    443d        =D      ADD      r5,r5,r7
        0x00818c3e:    445d        ]D      ADD      r5,r5,r11
        0x00818c40:    9707        ..      STR      r7,[sp,#0x1c]
        0x00818c42:    ea4f0cb1    O...    ROR      r12,r1,#2
        0x00818c46:    eb050708    ....    ADD      r7,r5,r8
        0x00818c4a:    f8cdc004    ....    STR      r12,[sp,#4]
        0x00818c4e:    9d10        ..      LDR      r5,[sp,#0x40]
        0x00818c50:    9905        ..      LDR      r1,[sp,#0x14]
        0x00818c52:    9703        ..      STR      r7,[sp,#0xc]
;;;191        P( B, C, D, E, A, R(19) );
        0x00818c54:    4069        i@      EORS     r1,r1,r5
        0x00818c56:    9e08        ..      LDR      r6,[sp,#0x20]
        0x00818c58:    9d0a        ..      LDR      r5,[sp,#0x28]
        0x00818c5a:    ea8c0c09    ....    EOR      r12,r12,r9
        0x00818c5e:    4075        u@      EORS     r5,r5,r6
        0x00818c60:    4069        i@      EORS     r1,r1,r5
        0x00818c62:    9d02        ..      LDR      r5,[sp,#8]
        0x00818c64:    ea0c0c05    ....    AND      r12,r12,r5
        0x00818c68:    ea8c0c09    ....    EOR      r12,r12,r9
        0x00818c6c:    ea4f75f1    O..u    ROR      r5,r1,#31
        0x00818c70:    eb0c66f7    ...f    ADD      r6,r12,r7,ROR #27
        0x00818c74:    9904        ..      LDR      r1,[sp,#0x10]
        0x00818c76:    442e        .D      ADD      r6,r6,r5
        0x00818c78:    440e        .D      ADD      r6,r6,r1
        0x00818c7a:    9902        ..      LDR      r1,[sp,#8]
        0x00818c7c:    eb060b08    ....    ADD      r11,r6,r8
        0x00818c80:    ea4f0cb1    O...    ROR      r12,r1,#2
;;;192    
;;;193    #undef K
;;;194    #undef F
;;;195    
;;;196    #define F(x,y,z) (x ^ y ^ z)
;;;197    #define K 0x6ED9EBA1
;;;198    
;;;199        P( A, B, C, D, E, R(20) );
        0x00818c84:    f8cdc008    ....    STR      r12,[sp,#8]
        0x00818c88:    9e11        ..      LDR      r6,[sp,#0x44]
        0x00818c8a:    9906        ..      LDR      r1,[sp,#0x18]
        0x00818c8c:    9f09        ..      LDR      r7,[sp,#0x24]
        0x00818c8e:    4071        q@      EORS     r1,r1,r6
        0x00818c90:    9e0b        ..      LDR      r6,[sp,#0x2c]
        0x00818c92:    407e        ~@      EORS     r6,r6,r7
        0x00818c94:    9f03        ..      LDR      r7,[sp,#0xc]
        0x00818c96:    4071        q@      EORS     r1,r1,r6
        0x00818c98:    ea87070c    ....    EOR      r7,r7,r12
        0x00818c9c:    f8ddc004    ....    LDR      r12,[sp,#4]
        0x00818ca0:    ea4f76f1    O..v    ROR      r6,r1,#31
        0x00818ca4:    ea87070c    ....    EOR      r7,r7,r12
        0x00818ca8:    eb0767fb    ...g    ADD      r7,r7,r11,ROR #27
        0x00818cac:    19b9        ..      ADDS     r1,r7,r6
        0x00818cae:    eb010709    ....    ADD      r7,r1,r9
        0x00818cb2:    49fe        .I      LDR      r1,[pc,#1016] ; [0x8190ac] = 0x6ed9eba1
        0x00818cb4:    eb070c01    ....    ADD      r12,r7,r1
        0x00818cb8:    9f03        ..      LDR      r7,[sp,#0xc]
        0x00818cba:    f8cdc000    ....    STR      r12,[sp,#0]
        0x00818cbe:    ea4f09b7    O...    ROR      r9,r7,#2
;;;200        P( E, A, B, C, D, R(21) );
        0x00818cc2:    9f07        ..      LDR      r7,[sp,#0x1c]
        0x00818cc4:    f8cd900c    ....    STR      r9,[sp,#0xc]
        0x00818cc8:    f8ddc030    ..0.    LDR      r12,[sp,#0x30]
        0x00818ccc:    f8dd8028    ..(.    LDR      r8,[sp,#0x28]
        0x00818cd0:    4057        W@      EORS     r7,r7,r2
        0x00818cd2:    ea8c0c08    ....    EOR      r12,r12,r8
        0x00818cd6:    ea87070c    ....    EOR      r7,r7,r12
        0x00818cda:    f8ddc008    ....    LDR      r12,[sp,#8]
        0x00818cde:    ea8b0809    ....    EOR      r8,r11,r9
        0x00818ce2:    ea88080c    ....    EOR      r8,r8,r12
        0x00818ce6:    f8ddc000    ....    LDR      r12,[sp,#0]
        0x00818cea:    eb0868fc    ...h    ADD      r8,r8,r12,ROR #27
        0x00818cee:    ea4f7cf7    O..|    ROR      r12,r7,#31
        0x00818cf2:    eb08070c    ....    ADD      r7,r8,r12
        0x00818cf6:    f8cdc028    ..(.    STR      r12,[sp,#0x28]
        0x00818cfa:    f8ddc004    ....    LDR      r12,[sp,#4]
        0x00818cfe:    4467        gD      ADD      r7,r7,r12
        0x00818d00:    eb070901    ....    ADD      r9,r7,r1
        0x00818d04:    f8cd9004    ....    STR      r9,[sp,#4]
        0x00818d08:    ea4f07bb    O...    ROR      r7,r11,#2
;;;201        P( D, E, A, B, C, R(22) );
        0x00818d0c:    f8dd802c    ..,.    LDR      r8,[sp,#0x2c]
        0x00818d10:    9704        ..      STR      r7,[sp,#0x10]
        0x00818d12:    ea850703    ....    EOR      r7,r5,r3
        0x00818d16:    ea8a0c08    ....    EOR      r12,r10,r8
        0x00818d1a:    ea87080c    ....    EOR      r8,r7,r12
        0x00818d1e:    f8ddc000    ....    LDR      r12,[sp,#0]
        0x00818d22:    9f04        ..      LDR      r7,[sp,#0x10]
        0x00818d24:    f8dd900c    ....    LDR      r9,[sp,#0xc]
        0x00818d28:    ea8c0c07    ....    EOR      r12,r12,r7
        0x00818d2c:    ea8c0c09    ....    EOR      r12,r12,r9
        0x00818d30:    f8dd9004    ....    LDR      r9,[sp,#4]
        0x00818d34:    ea4f7bf8    O..{    ROR      r11,r8,#31
        0x00818d38:    eb0c6cf9    ...l    ADD      r12,r12,r9,ROR #27
        0x00818d3c:    eb0c070b    ....    ADD      r7,r12,r11
        0x00818d40:    f8ddc008    ....    LDR      r12,[sp,#8]
        0x00818d44:    4467        gD      ADD      r7,r7,r12
        0x00818d46:    f8ddc000    ....    LDR      r12,[sp,#0]
        0x00818d4a:    440f        .D      ADD      r7,r7,r1
        0x00818d4c:    ea4f08bc    O...    ROR      r8,r12,#2
        0x00818d50:    9702        ..      STR      r7,[sp,#8]
;;;202        P( C, D, E, A, B, R(23) );
        0x00818d52:    f8cd8000    ....    STR      r8,[sp,#0]
        0x00818d56:    f8dd8030    ..0.    LDR      r8,[sp,#0x30]
        0x00818d5a:    ea860c04    ....    EOR      r12,r6,r4
        0x00818d5e:    ea8e0708    ....    EOR      r7,lr,r8
        0x00818d62:    ea8c0c07    ....    EOR      r12,r12,r7
        0x00818d66:    f8dd8000    ....    LDR      r8,[sp,#0]
        0x00818d6a:    9f04        ..      LDR      r7,[sp,#0x10]
        0x00818d6c:    ea890908    ....    EOR      r9,r9,r8
        0x00818d70:    ea890907    ....    EOR      r9,r9,r7
        0x00818d74:    9f02        ..      LDR      r7,[sp,#8]
        0x00818d76:    ea4f7cfc    O..|    ROR      r12,r12,#31
        0x00818d7a:    eb0967f7    ...g    ADD      r7,r9,r7,ROR #27
        0x00818d7e:    4467        gD      ADD      r7,r7,r12
        0x00818d80:    f8dd900c    ....    LDR      r9,[sp,#0xc]
        0x00818d84:    f8cdc030    ..0.    STR      r12,[sp,#0x30]
        0x00818d88:    444f        OD      ADD      r7,r7,r9
        0x00818d8a:    eb070801    ....    ADD      r8,r7,r1
        0x00818d8e:    f8ddc028    ..(.    LDR      r12,[sp,#0x28]
        0x00818d92:    9f05        ..      LDR      r7,[sp,#0x14]
        0x00818d94:    f8dd9004    ....    LDR      r9,[sp,#4]
        0x00818d98:    ea8c0c07    ....    EOR      r12,r12,r7
        0x00818d9c:    9f0f        ..      LDR      r7,[sp,#0x3c]
        0x00818d9e:    f8cd800c    ....    STR      r8,[sp,#0xc]
        0x00818da2:    ea87070a    ....    EOR      r7,r7,r10
        0x00818da6:    ea8c0c07    ....    EOR      r12,r12,r7
        0x00818daa:    9f02        ..      LDR      r7,[sp,#8]
        0x00818dac:    ea4f09b9    O...    ROR      r9,r9,#2
;;;203        P( B, C, D, E, A, R(24) );
        0x00818db0:    f8dd8000    ....    LDR      r8,[sp,#0]
        0x00818db4:    ea870709    ....    EOR      r7,r7,r9
        0x00818db8:    ea870708    ....    EOR      r7,r7,r8
        0x00818dbc:    f8dd800c    ....    LDR      r8,[sp,#0xc]
        0x00818dc0:    f8cd9004    ....    STR      r9,[sp,#4]
        0x00818dc4:    eb0768f8    ...h    ADD      r8,r7,r8,ROR #27
        0x00818dc8:    ea4f77fc    O..w    ROR      r7,r12,#31
        0x00818dcc:    eb080c07    ....    ADD      r12,r8,r7
        0x00818dd0:    970d        ..      STR      r7,[sp,#0x34]
        0x00818dd2:    9f04        ..      LDR      r7,[sp,#0x10]
        0x00818dd4:    f8dd800c    ....    LDR      r8,[sp,#0xc]
        0x00818dd8:    4467        gD      ADD      r7,r7,r12
        0x00818dda:    eb070a01    ....    ADD      r10,r7,r1
        0x00818dde:    9f02        ..      LDR      r7,[sp,#8]
        0x00818de0:    f8ddc018    ....    LDR      r12,[sp,#0x18]
        0x00818de4:    ea4f09b7    O...    ROR      r9,r7,#2
;;;204        P( A, B, C, D, E, R(25) );
        0x00818de8:    ea8b070c    ....    EOR      r7,r11,r12
        0x00818dec:    f8ddc040    ..@.    LDR      r12,[sp,#0x40]
        0x00818df0:    f8cd9008    ....    STR      r9,[sp,#8]
        0x00818df4:    ea880809    ....    EOR      r8,r8,r9
        0x00818df8:    ea8c0c0e    ....    EOR      r12,r12,lr
        0x00818dfc:    f8dd9004    ....    LDR      r9,[sp,#4]
        0x00818e00:    ea870e0c    ....    EOR      lr,r7,r12
        0x00818e04:    ea880809    ....    EOR      r8,r8,r9
        0x00818e08:    eb086cfa    ...l    ADD      r12,r8,r10,ROR #27
        0x00818e0c:    ea4f7efe    O..~    ROR      lr,lr,#31
        0x00818e10:    eb0c070e    ....    ADD      r7,r12,lr
        0x00818e14:    f8dd8000    ....    LDR      r8,[sp,#0]
        0x00818e18:    f8ddc030    ..0.    LDR      r12,[sp,#0x30]
        0x00818e1c:    4447        GD      ADD      r7,r7,r8
        0x00818e1e:    eb070901    ....    ADD      r9,r7,r1
        0x00818e22:    f8dd800c    ....    LDR      r8,[sp,#0xc]
        0x00818e26:    9f07        ..      LDR      r7,[sp,#0x1c]
        0x00818e28:    ea4f08b8    O...    ROR      r8,r8,#2
        0x00818e2c:    f8cd9000    ....    STR      r9,[sp,#0]
;;;205        P( E, A, B, C, D, R(26) );
        0x00818e30:    f8cd800c    ....    STR      r8,[sp,#0xc]
        0x00818e34:    ea8c0c07    ....    EOR      r12,r12,r7
        0x00818e38:    f8dd803c    ..<.    LDR      r8,[sp,#0x3c]
        0x00818e3c:    9f11        ..      LDR      r7,[sp,#0x44]
        0x00818e3e:    f8dd9008    ....    LDR      r9,[sp,#8]
        0x00818e42:    ea870708    ....    EOR      r7,r7,r8
        0x00818e46:    f8dd800c    ....    LDR      r8,[sp,#0xc]
        0x00818e4a:    ea8c0c07    ....    EOR      r12,r12,r7
        0x00818e4e:    ea8a0708    ....    EOR      r7,r10,r8
        0x00818e52:    ea870709    ....    EOR      r7,r7,r9
        0x00818e56:    f8dd9000    ....    LDR      r9,[sp,#0]
        0x00818e5a:    eb0768f9    ...h    ADD      r8,r7,r9,ROR #27
        0x00818e5e:    ea4f77fc    O..w    ROR      r7,r12,#31
        0x00818e62:    970f        ..      STR      r7,[sp,#0x3c]
        0x00818e64:    4447        GD      ADD      r7,r7,r8
        0x00818e66:    f8dd9004    ....    LDR      r9,[sp,#4]
        0x00818e6a:    ea4f08ba    O...    ROR      r8,r10,#2
        0x00818e6e:    444f        OD      ADD      r7,r7,r9
        0x00818e70:    eb070c01    ....    ADD      r12,r7,r1
;;;206        P( D, E, A, B, C, R(27) );
        0x00818e74:    f8cdc004    ....    STR      r12,[sp,#4]
        0x00818e78:    9f0d        ..      LDR      r7,[sp,#0x34]
        0x00818e7a:    f8ddc040    ..@.    LDR      r12,[sp,#0x40]
        0x00818e7e:    f8dd9000    ....    LDR      r9,[sp,#0]
        0x00818e82:    f8cd8010    ....    STR      r8,[sp,#0x10]
        0x00818e86:    406f        o@      EORS     r7,r7,r5
        0x00818e88:    ea820c0c    ....    EOR      r12,r2,r12
        0x00818e8c:    ea890908    ....    EOR      r9,r9,r8
        0x00818e90:    ea87070c    ....    EOR      r7,r7,r12
        0x00818e94:    f8dd800c    ....    LDR      r8,[sp,#0xc]
        0x00818e98:    f8ddc004    ....    LDR      r12,[sp,#4]
        0x00818e9c:    ea890908    ....    EOR      r9,r9,r8
        0x00818ea0:    eb0968fc    ...h    ADD      r8,r9,r12,ROR #27
        0x00818ea4:    ea4f7cf7    O..|    ROR      r12,r7,#31
        0x00818ea8:    f8dd9008    ....    LDR      r9,[sp,#8]
        0x00818eac:    eb08070c    ....    ADD      r7,r8,r12
        0x00818eb0:    444f        OD      ADD      r7,r7,r9
        0x00818eb2:    eb070901    ....    ADD      r9,r7,r1
        0x00818eb6:    f8cd9008    ....    STR      r9,[sp,#8]
        0x00818eba:    f8cdc040    ..@.    STR      r12,[sp,#0x40]
        0x00818ebe:    f8ddc044    ..D.    LDR      r12,[sp,#0x44]
        0x00818ec2:    f8dd9000    ....    LDR      r9,[sp,#0]
        0x00818ec6:    ea8e0706    ....    EOR      r7,lr,r6
        0x00818eca:    ea830c0c    ....    EOR      r12,r3,r12
        0x00818ece:    ea87070c    ....    EOR      r7,r7,r12
        0x00818ed2:    ea4f08b9    O...    ROR      r8,r9,#2
;;;207        P( C, D, E, A, B, R(28) );
        0x00818ed6:    f8ddc004    ....    LDR      r12,[sp,#4]
        0x00818eda:    f8cd8000    ....    STR      r8,[sp,#0]
        0x00818ede:    ea8c0c08    ....    EOR      r12,r12,r8
        0x00818ee2:    f8dd8010    ....    LDR      r8,[sp,#0x10]
        0x00818ee6:    ea8c0c08    ....    EOR      r12,r12,r8
        0x00818eea:    f8dd9008    ....    LDR      r9,[sp,#8]
        0x00818eee:    ea4f77f7    O..w    ROR      r7,r7,#31
        0x00818ef2:    eb0c6cf9    ...l    ADD      r12,r12,r9,ROR #27
        0x00818ef6:    9711        ..      STR      r7,[sp,#0x44]
        0x00818ef8:    4467        gD      ADD      r7,r7,r12
        0x00818efa:    f8dd800c    ....    LDR      r8,[sp,#0xc]
        0x00818efe:    f8ddc004    ....    LDR      r12,[sp,#4]
        0x00818f02:    4447        GD      ADD      r7,r7,r8
        0x00818f04:    ea4f08bc    O...    ROR      r8,r12,#2
        0x00818f08:    eb070a01    ....    ADD      r10,r7,r1
        0x00818f0c:    f8ddc028    ..(.    LDR      r12,[sp,#0x28]
        0x00818f10:    9f0f        ..      LDR      r7,[sp,#0x3c]
        0x00818f12:    f8cd8004    ....    STR      r8,[sp,#4]
        0x00818f16:    ea890908    ....    EOR      r9,r9,r8
        0x00818f1a:    ea87070c    ....    EOR      r7,r7,r12
        0x00818f1e:    f8dd8000    ....    LDR      r8,[sp,#0]
        0x00818f22:    4062        b@      EORS     r2,r2,r4
        0x00818f24:    ea890908    ....    EOR      r9,r9,r8
        0x00818f28:    4057        W@      EORS     r7,r7,r2
        0x00818f2a:    f8cda00c    ....    STR      r10,[sp,#0xc]
;;;208        P( B, C, D, E, A, R(29) );
        0x00818f2e:    eb096cfa    ...l    ADD      r12,r9,r10,ROR #27
        0x00818f32:    ea4f72f7    O..r    ROR      r2,r7,#31
        0x00818f36:    9212        ..      STR      r2,[sp,#0x48]
        0x00818f38:    4462        bD      ADD      r2,r2,r12
        0x00818f3a:    f8dd8010    ....    LDR      r8,[sp,#0x10]
        0x00818f3e:    f8dd9008    ....    LDR      r9,[sp,#8]
        0x00818f42:    4442        BD      ADD      r2,r2,r8
        0x00818f44:    440a        .D      ADD      r2,r2,r1
        0x00818f46:    9204        ..      STR      r2,[sp,#0x10]
        0x00818f48:    ea4f08b9    O...    ROR      r8,r9,#2
;;;209        P( A, B, C, D, E, R(30) );
        0x00818f4c:    f8ddc040    ..@.    LDR      r12,[sp,#0x40]
        0x00818f50:    9a05        ..      LDR      r2,[sp,#0x14]
        0x00818f52:    f8cd8008    ....    STR      r8,[sp,#8]
        0x00818f56:    ea8c0c0b    ....    EOR      r12,r12,r11
        0x00818f5a:    405a        Z@      EORS     r2,r2,r3
        0x00818f5c:    ea8a0a08    ....    EOR      r10,r10,r8
        0x00818f60:    ea8c0c02    ....    EOR      r12,r12,r2
        0x00818f64:    f8dd8004    ....    LDR      r8,[sp,#4]
        0x00818f68:    9a04        ..      LDR      r2,[sp,#0x10]
        0x00818f6a:    ea8a0a08    ....    EOR      r10,r10,r8
        0x00818f6e:    eb0a62f2    ...b    ADD      r2,r10,r2,ROR #27
        0x00818f72:    ea4f7cfc    O..|    ROR      r12,r12,#31
        0x00818f76:    4462        bD      ADD      r2,r2,r12
        0x00818f78:    f8dd8000    ....    LDR      r8,[sp,#0]
        0x00818f7c:    f8cdc04c    ..L.    STR      r12,[sp,#0x4c]
        0x00818f80:    4442        BD      ADD      r2,r2,r8
        0x00818f82:    eb020901    ....    ADD      r9,r2,r1
        0x00818f86:    f8ddc030    ..0.    LDR      r12,[sp,#0x30]
        0x00818f8a:    9f11        ..      LDR      r7,[sp,#0x44]
        0x00818f8c:    9a06        ..      LDR      r2,[sp,#0x18]
        0x00818f8e:    ea87070c    ....    EOR      r7,r7,r12
        0x00818f92:    4062        b@      EORS     r2,r2,r4
        0x00818f94:    4057        W@      EORS     r7,r7,r2
        0x00818f96:    f8dda00c    ....    LDR      r10,[sp,#0xc]
        0x00818f9a:    9a04        ..      LDR      r2,[sp,#0x10]
        0x00818f9c:    ea4f0aba    O...    ROR      r10,r10,#2
;;;210        P( E, A, B, C, D, R(31) );
        0x00818fa0:    f8dd8008    ....    LDR      r8,[sp,#8]
        0x00818fa4:    ea82020a    ....    EOR      r2,r2,r10
        0x00818fa8:    ea820208    ....    EOR      r2,r2,r8
        0x00818fac:    ea4f74f7    O..t    ROR      r4,r7,#31
        0x00818fb0:    eb0262f9    ...b    ADD      r2,r2,r9,ROR #27
        0x00818fb4:    f8dd8004    ....    LDR      r8,[sp,#4]
        0x00818fb8:    4422        "D      ADD      r2,r2,r4
        0x00818fba:    4442        BD      ADD      r2,r2,r8
        0x00818fbc:    1853        S.      ADDS     r3,r2,r1
        0x00818fbe:    9a04        ..      LDR      r2,[sp,#0x10]
        0x00818fc0:    9414        ..      STR      r4,[sp,#0x50]
        0x00818fc2:    ea4f04b2    O...    ROR      r4,r2,#2
;;;211        P( D, E, A, B, C, R(32) );
        0x00818fc6:    9f0d        ..      LDR      r7,[sp,#0x34]
        0x00818fc8:    9a12        ..      LDR      r2,[sp,#0x48]
        0x00818fca:    9404        ..      STR      r4,[sp,#0x10]
        0x00818fcc:    407a        z@      EORS     r2,r2,r7
        0x00818fce:    9f07        ..      LDR      r7,[sp,#0x1c]
        0x00818fd0:    9c05        ..      LDR      r4,[sp,#0x14]
        0x00818fd2:    4067        g@      EORS     r7,r7,r4
        0x00818fd4:    9c04        ..      LDR      r4,[sp,#0x10]
        0x00818fd6:    407a        z@      EORS     r2,r2,r7
        0x00818fd8:    ea890c04    ....    EOR      r12,r9,r4
        0x00818fdc:    ea8c0c0a    ....    EOR      r12,r12,r10
        0x00818fe0:    ea4f72f2    O..r    ROR      r2,r2,#31
        0x00818fe4:    eb0c64f3    ...d    ADD      r4,r12,r3,ROR #27
        0x00818fe8:    9205        ..      STR      r2,[sp,#0x14]
        0x00818fea:    4422        "D      ADD      r2,r2,r4
        0x00818fec:    f8ddc04c    ..L.    LDR      r12,[sp,#0x4c]
        0x00818ff0:    9c06        ..      LDR      r4,[sp,#0x18]
        0x00818ff2:    ea4f07b9    O...    ROR      r7,r9,#2
        0x00818ff6:    ea8c0c0e    ....    EOR      r12,r12,lr
        0x00818ffa:    406c        l@      EORS     r4,r4,r5
        0x00818ffc:    9700        ..      STR      r7,[sp,#0]
        0x00818ffe:    ea8c0c04    ....    EOR      r12,r12,r4
        0x00819002:    f8dd8008    ....    LDR      r8,[sp,#8]
        0x00819006:    405f        _@      EORS     r7,r7,r3
        0x00819008:    9c04        ..      LDR      r4,[sp,#0x10]
        0x0081900a:    4442        BD      ADD      r2,r2,r8
        0x0081900c:    4067        g@      EORS     r7,r7,r4
        0x0081900e:    440a        .D      ADD      r2,r2,r1
;;;212        P( C, D, E, A, B, R(33) );
        0x00819010:    ea4f74fc    O..t    ROR      r4,r12,#31
        0x00819014:    eb0767f2    ...g    ADD      r7,r7,r2,ROR #27
        0x00819018:    9406        ..      STR      r4,[sp,#0x18]
        0x0081901a:    443c        <D      ADD      r4,r4,r7
        0x0081901c:    4454        TD      ADD      r4,r4,r10
        0x0081901e:    eb040a01    ....    ADD      r10,r4,r1
        0x00819022:    9f0f        ..      LDR      r7,[sp,#0x3c]
        0x00819024:    9c14        ..      LDR      r4,[sp,#0x50]
        0x00819026:    ea4f03b3    O...    ROR      r3,r3,#2
;;;213        P( B, C, D, E, A, R(34) );
        0x0081902a:    407c        |@      EORS     r4,r4,r7
        0x0081902c:    9f07        ..      LDR      r7,[sp,#0x1c]
        0x0081902e:    ea820c03    ....    EOR      r12,r2,r3
        0x00819032:    4077        w@      EORS     r7,r7,r6
        0x00819034:    407c        |@      EORS     r4,r4,r7
        0x00819036:    9f00        ..      LDR      r7,[sp,#0]
        0x00819038:    ea4f08b2    O...    ROR      r8,r2,#2
        0x0081903c:    ea8c0c07    ....    EOR      r12,r12,r7
        0x00819040:    eb0c67fa    ...g    ADD      r7,r12,r10,ROR #27
        0x00819044:    ea4f74f4    O..t    ROR      r4,r4,#31
        0x00819048:    4427        'D      ADD      r7,r7,r4
        0x0081904a:    9407        ..      STR      r4,[sp,#0x1c]
        0x0081904c:    f8ddc040    ..@.    LDR      r12,[sp,#0x40]
        0x00819050:    9a05        ..      LDR      r2,[sp,#0x14]
        0x00819052:    9c04        ..      LDR      r4,[sp,#0x10]
        0x00819054:    ea82020c    ....    EOR      r2,r2,r12
        0x00819058:    443c        <D      ADD      r4,r4,r7
        0x0081905a:    f8ddc028    ..(.    LDR      r12,[sp,#0x28]
        0x0081905e:    ea8a0708    ....    EOR      r7,r10,r8
        0x00819062:    ea8c0c05    ....    EOR      r12,r12,r5
        0x00819066:    eb040901    ....    ADD      r9,r4,r1
;;;214        P( A, B, C, D, E, R(35) );
        0x0081906a:    ea82020c    ....    EOR      r2,r2,r12
        0x0081906e:    405f        _@      EORS     r7,r7,r3
        0x00819070:    eb0764f9    ...d    ADD      r4,r7,r9,ROR #27
        0x00819074:    ea4f72f2    O..r    ROR      r2,r2,#31
        0x00819078:    9208        ..      STR      r2,[sp,#0x20]
        0x0081907a:    4422        "D      ADD      r2,r2,r4
        0x0081907c:    9f00        ..      LDR      r7,[sp,#0]
        0x0081907e:    9c06        ..      LDR      r4,[sp,#0x18]
        0x00819080:    443a        :D      ADD      r2,r2,r7
        0x00819082:    1855        U.      ADDS     r5,r2,r1
        0x00819084:    9f11        ..      LDR      r7,[sp,#0x44]
        0x00819086:    ea4f02ba    O...    ROR      r2,r10,#2
;;;215        P( E, A, B, C, D, R(36) );
        0x0081908a:    407c        |@      EORS     r4,r4,r7
        0x0081908c:    ea8b0706    ....    EOR      r7,r11,r6
        0x00819090:    407c        |@      EORS     r4,r4,r7
        0x00819092:    ea890c02    ....    EOR      r12,r9,r2
        0x00819096:    ea8c0c08    ....    EOR      r12,r12,r8
        0x0081909a:    ea4f74f4    O..t    ROR      r4,r4,#31
        0x0081909e:    eb0c66f5    ...f    ADD      r6,r12,r5,ROR #27
        0x008190a2:    9409        ..      STR      r4,[sp,#0x24]
        0x008190a4:    4434        4D      ADD      r4,r4,r6
        0x008190a6:    e003        ..      B        0x8190b0 ; mbedtls_internal_sha1_process + 2212
    $d
        0x008190a8:    5a827999    .y.Z    DCD    1518500249
        0x008190ac:    6ed9eba1    ...n    DCD    1859775393
    $t
        0x008190b0:    4423        #D      ADD      r3,r3,r4
        0x008190b2:    185c        \.      ADDS     r4,r3,r1
        0x008190b4:    9b12        ..      LDR      r3,[sp,#0x48]
        0x008190b6:    9907        ..      LDR      r1,[sp,#0x1c]
        0x008190b8:    9e0a        ..      LDR      r6,[sp,#0x28]
        0x008190ba:    4059        Y@      EORS     r1,r1,r3
        0x008190bc:    9b0c        ..      LDR      r3,[sp,#0x30]
        0x008190be:    ea4f09b9    O...    ROR      r9,r9,#2
;;;216        P( D, E, A, B, C, R(37) );
        0x008190c2:    4073        s@      EORS     r3,r3,r6
        0x008190c4:    4059        Y@      EORS     r1,r1,r3
        0x008190c6:    ea850309    ....    EOR      r3,r5,r9
        0x008190ca:    ea4f7cf1    O..|    ROR      r12,r1,#31
        0x008190ce:    ea4f05b5    O...    ROR      r5,r5,#2
        0x008190d2:    f8cdc028    ..(.    STR      r12,[sp,#0x28]
        0x008190d6:    9500        ..      STR      r5,[sp,#0]
        0x008190d8:    9d13        ..      LDR      r5,[sp,#0x4c]
        0x008190da:    9908        ..      LDR      r1,[sp,#0x20]
        0x008190dc:    4053        S@      EORS     r3,r3,r2
        0x008190de:    4069        i@      EORS     r1,r1,r5
        0x008190e0:    9d0d        ..      LDR      r5,[sp,#0x34]
        0x008190e2:    eb0363f4    ...c    ADD      r3,r3,r4,ROR #27
        0x008190e6:    4463        cD      ADD      r3,r3,r12
        0x008190e8:    ea85050b    ....    EOR      r5,r5,r11
        0x008190ec:    4069        i@      EORS     r1,r1,r5
        0x008190ee:    4443        CD      ADD      r3,r3,r8
        0x008190f0:    9d00        ..      LDR      r5,[sp,#0]
        0x008190f2:    f8dfa478    ..x.    LDR      r10,[pc,#1144] ; [0x81956c] = 0x6ed9eba1
        0x008190f6:    ea840605    ....    EOR      r6,r4,r5
        0x008190fa:    4453        SD      ADD      r3,r3,r10
;;;217        P( C, D, E, A, B, R(38) );
        0x008190fc:    ea860609    ....    EOR      r6,r6,r9
        0x00819100:    eb0665f3    ...e    ADD      r5,r6,r3,ROR #27
        0x00819104:    ea4f77f1    O..w    ROR      r7,r1,#31
        0x00819108:    19e9        ..      ADDS     r1,r5,r7
        0x0081910a:    440a        .D      ADD      r2,r2,r1
        0x0081910c:    eb02010a    ....    ADD      r1,r2,r10
        0x00819110:    ea4f08b4    O...    ROR      r8,r4,#2
;;;218        P( B, C, D, E, A, R(39) );
        0x00819114:    9c14        ..      LDR      r4,[sp,#0x50]
        0x00819116:    9a09        ..      LDR      r2,[sp,#0x24]
        0x00819118:    9d0c        ..      LDR      r5,[sp,#0x30]
        0x0081911a:    4062        b@      EORS     r2,r2,r4
        0x0081911c:    ea8e0405    ....    EOR      r4,lr,r5
        0x00819120:    4062        b@      EORS     r2,r2,r4
        0x00819122:    ea830408    ....    EOR      r4,r3,r8
        0x00819126:    9d00        ..      LDR      r5,[sp,#0]
        0x00819128:    ea4f76f2    O..v    ROR      r6,r2,#31
        0x0081912c:    406c        l@      EORS     r4,r4,r5
        0x0081912e:    eb0464f1    ...d    ADD      r4,r4,r1,ROR #27
        0x00819132:    19a2        ..      ADDS     r2,r4,r6
        0x00819134:    eb020409    ....    ADD      r4,r2,r9
        0x00819138:    eb04020a    ....    ADD      r2,r4,r10
        0x0081913c:    ea4f0ab3    O...    ROR      r10,r3,#2
        0x00819140:    f8ddc028    ..(.    LDR      r12,[sp,#0x28]
        0x00819144:    9b05        ..      LDR      r3,[sp,#0x14]
        0x00819146:    9c0d        ..      LDR      r4,[sp,#0x34]
        0x00819148:    ea8c0c03    ....    EOR      r12,r12,r3
        0x0081914c:    9b0f        ..      LDR      r3,[sp,#0x3c]
        0x0081914e:    f8cd8004    ....    STR      r8,[sp,#4]
;;;219    
;;;220    #undef K
;;;221    #undef F
;;;222    
;;;223    #define F(x,y,z) ((x & y) | (z & (x | y)))
;;;224    #define K 0x8F1BBCDC
;;;225    
;;;226        P( A, B, C, D, E, R(40) );
        0x00819152:    4063        c@      EORS     r3,r3,r4
        0x00819154:    ea8c0c03    ....    EOR      r12,r12,r3
        0x00819158:    f8dd8004    ....    LDR      r8,[sp,#4]
        0x0081915c:    ea41040a    A...    ORR      r4,r1,r10
        0x00819160:    ea01030a    ....    AND      r3,r1,r10
        0x00819164:    ea040408    ....    AND      r4,r4,r8
        0x00819168:    4323        #C      ORRS     r3,r3,r4
        0x0081916a:    eb0363f2    ...c    ADD      r3,r3,r2,ROR #27
        0x0081916e:    ea4f7bfc    O..{    ROR      r11,r12,#31
        0x00819172:    445b        [D      ADD      r3,r3,r11
        0x00819174:    195c        \.      ADDS     r4,r3,r5
        0x00819176:    4bfe        .K      LDR      r3,[pc,#1016] ; [0x819570] = 0x8f1bbcdc
        0x00819178:    ea4f09b1    O...    ROR      r9,r1,#2
        0x0081917c:    18e5        ..      ADDS     r5,r4,r3
;;;227        P( E, A, B, C, D, R(41) );
        0x0081917e:    9906        ..      LDR      r1,[sp,#0x18]
        0x00819180:    9c10        ..      LDR      r4,[sp,#0x40]
        0x00819182:    4079        y@      EORS     r1,r1,r7
        0x00819184:    ea84040e    ....    EOR      r4,r4,lr
        0x00819188:    ea810e04    ....    EOR      lr,r1,r4
        0x0081918c:    ea420409    B...    ORR      r4,r2,r9
        0x00819190:    ea020109    ....    AND      r1,r2,r9
        0x00819194:    ea04040a    ....    AND      r4,r4,r10
        0x00819198:    4321        !C      ORRS     r1,r1,r4
        0x0081919a:    eb016cf5    ...l    ADD      r12,r1,r5,ROR #27
        0x0081919e:    ea4f74fe    O..t    ROR      r4,lr,#31
        0x008191a2:    eb0c0104    ....    ADD      r1,r12,r4
        0x008191a6:    f8dd8004    ....    LDR      r8,[sp,#4]
        0x008191aa:    ea4f02b2    O...    ROR      r2,r2,#2
        0x008191ae:    4441        AD      ADD      r1,r1,r8
        0x008191b0:    9204        ..      STR      r2,[sp,#0x10]
        0x008191b2:    9a07        ..      LDR      r2,[sp,#0x1c]
        0x008191b4:    f8ddc044    ..D.    LDR      r12,[sp,#0x44]
        0x008191b8:    f8dd803c    ..<.    LDR      r8,[sp,#0x3c]
        0x008191bc:    4072        r@      EORS     r2,r2,r6
        0x008191be:    ea8c0c08    ....    EOR      r12,r12,r8
        0x008191c2:    ea820e0c    ....    EOR      lr,r2,r12
        0x008191c6:    9a04        ..      LDR      r2,[sp,#0x10]
        0x008191c8:    4419        .D      ADD      r1,r1,r3
;;;228        P( D, E, A, B, C, R(42) );
        0x008191ca:    ea050c02    ....    AND      r12,r5,r2
        0x008191ce:    432a        *C      ORRS     r2,r2,r5
        0x008191d0:    ea020209    ....    AND      r2,r2,r9
        0x008191d4:    ea4c0c02    L...    ORR      r12,r12,r2
        0x008191d8:    ea4f72fe    O..r    ROR      r2,lr,#31
        0x008191dc:    eb0c6cf1    ...l    ADD      r12,r12,r1,ROR #27
        0x008191e0:    920f        ..      STR      r2,[sp,#0x3c]
        0x008191e2:    4462        bD      ADD      r2,r2,r12
        0x008191e4:    4452        RD      ADD      r2,r2,r10
        0x008191e6:    eb020e03    ....    ADD      lr,r2,r3
        0x008191ea:    9a08        ..      LDR      r2,[sp,#0x20]
        0x008191ec:    ea4f0ab5    O...    ROR      r10,r5,#2
;;;229        P( C, D, E, A, B, R(43) );
        0x008191f0:    ea8b0c02    ....    EOR      r12,r11,r2
        0x008191f4:    9d10        ..      LDR      r5,[sp,#0x40]
        0x008191f6:    9a12        ..      LDR      r2,[sp,#0x48]
        0x008191f8:    406a        j@      EORS     r2,r2,r5
        0x008191fa:    ea8c0802    ....    EOR      r8,r12,r2
        0x008191fe:    9a04        ..      LDR      r2,[sp,#0x10]
        0x00819200:    ea410c0a    A...    ORR      r12,r1,r10
        0x00819204:    ea01050a    ....    AND      r5,r1,r10
        0x00819208:    ea0c0c02    ....    AND      r12,r12,r2
        0x0081920c:    ea45050c    E...    ORR      r5,r5,r12
        0x00819210:    eb0562fe    ...b    ADD      r2,r5,lr,ROR #27
        0x00819214:    ea4f75f8    O..u    ROR      r5,r8,#31
        0x00819218:    442a        *D      ADD      r2,r2,r5
        0x0081921a:    444a        JD      ADD      r2,r2,r9
        0x0081921c:    eb020c03    ....    ADD      r12,r2,r3
        0x00819220:    f8cdc00c    ....    STR      r12,[sp,#0xc]
        0x00819224:    ea4f08b1    O...    ROR      r8,r1,#2
;;;230        P( B, C, D, E, A, R(44) );
        0x00819228:    f8ddc044    ..D.    LDR      r12,[sp,#0x44]
        0x0081922c:    9a13        ..      LDR      r2,[sp,#0x4c]
        0x0081922e:    9909        ..      LDR      r1,[sp,#0x24]
        0x00819230:    ea82020c    ....    EOR      r2,r2,r12
        0x00819234:    4061        a@      EORS     r1,r1,r4
        0x00819236:    ea810902    ....    EOR      r9,r1,r2
        0x0081923a:    ea4e0108    N...    ORR      r1,lr,r8
        0x0081923e:    ea0e0208    ....    AND      r2,lr,r8
        0x00819242:    ea01010a    ....    AND      r1,r1,r10
        0x00819246:    430a        .C      ORRS     r2,r2,r1
        0x00819248:    f8ddc00c    ....    LDR      r12,[sp,#0xc]
        0x0081924c:    ea4f71f9    O..q    ROR      r1,r9,#31
        0x00819250:    eb0262fc    ...b    ADD      r2,r2,r12,ROR #27
        0x00819254:    eb020c01    ....    ADD      r12,r2,r1
        0x00819258:    9a04        ..      LDR      r2,[sp,#0x10]
        0x0081925a:    f8cd8004    ....    STR      r8,[sp,#4]
        0x0081925e:    4462        bD      ADD      r2,r2,r12
        0x00819260:    441a        .D      ADD      r2,r2,r3
        0x00819262:    9204        ..      STR      r2,[sp,#0x10]
        0x00819264:    f8ddc028    ..(.    LDR      r12,[sp,#0x28]
        0x00819268:    9a0f        ..      LDR      r2,[sp,#0x3c]
        0x0081926a:    ea4f09be    O...    ROR      r9,lr,#2
;;;231        P( A, B, C, D, E, R(45) );
        0x0081926e:    ea82020c    ....    EOR      r2,r2,r12
        0x00819272:    f8ddc050    ..P.    LDR      r12,[sp,#0x50]
        0x00819276:    f8dd8048    ..H.    LDR      r8,[sp,#0x48]
        0x0081927a:    f8cd9008    ....    STR      r9,[sp,#8]
        0x0081927e:    ea8c0c08    ....    EOR      r12,r12,r8
        0x00819282:    ea820e0c    ....    EOR      lr,r2,r12
        0x00819286:    9a03        ..      LDR      r2,[sp,#0xc]
        0x00819288:    f8dd8004    ....    LDR      r8,[sp,#4]
        0x0081928c:    f8ddc00c    ....    LDR      r12,[sp,#0xc]
        0x00819290:    ea420209    B...    ORR      r2,r2,r9
        0x00819294:    ea020208    ....    AND      r2,r2,r8
        0x00819298:    ea0c0c09    ....    AND      r12,r12,r9
        0x0081929c:    ea4c0c02    L...    ORR      r12,r12,r2
        0x008192a0:    9a04        ..      LDR      r2,[sp,#0x10]
        0x008192a2:    ea4f78fe    O..x    ROR      r8,lr,#31
        0x008192a6:    eb0c6cf2    ...l    ADD      r12,r12,r2,ROR #27
        0x008192aa:    eb0c0208    ....    ADD      r2,r12,r8
        0x008192ae:    f8cd8048    ..H.    STR      r8,[sp,#0x48]
        0x008192b2:    f8ddc00c    ....    LDR      r12,[sp,#0xc]
        0x008192b6:    4452        RD      ADD      r2,r2,r10
        0x008192b8:    ea4f0cbc    O...    ROR      r12,r12,#2
        0x008192bc:    f8cdc00c    ....    STR      r12,[sp,#0xc]
        0x008192c0:    f8ddc014    ....    LDR      r12,[sp,#0x14]
        0x008192c4:    f8dd804c    ..L.    LDR      r8,[sp,#0x4c]
        0x008192c8:    eb020a03    ....    ADD      r10,r2,r3
;;;232        P( E, A, B, C, D, R(46) );
        0x008192cc:    ea850207    ....    EOR      r2,r5,r7
        0x008192d0:    ea8c0c08    ....    EOR      r12,r12,r8
        0x008192d4:    ea820e0c    ....    EOR      lr,r2,r12
        0x008192d8:    e9ddc803    ....    LDRD     r12,r8,[sp,#0xc]
        0x008192dc:    9a04        ..      LDR      r2,[sp,#0x10]
        0x008192de:    ea08080c    ....    AND      r8,r8,r12
        0x008192e2:    ea42020c    B...    ORR      r2,r2,r12
        0x008192e6:    ea020209    ....    AND      r2,r2,r9
        0x008192ea:    ea480802    H...    ORR      r8,r8,r2
        0x008192ee:    eb086cfa    ...l    ADD      r12,r8,r10,ROR #27
        0x008192f2:    ea4f72fe    O..r    ROR      r2,lr,#31
        0x008192f6:    9213        ..      STR      r2,[sp,#0x4c]
        0x008192f8:    f8dd8004    ....    LDR      r8,[sp,#4]
        0x008192fc:    4462        bD      ADD      r2,r2,r12
        0x008192fe:    4442        BD      ADD      r2,r2,r8
        0x00819300:    eb020e03    ....    ADD      lr,r2,r3
        0x00819304:    9a04        ..      LDR      r2,[sp,#0x10]
        0x00819306:    f8ddc018    ....    LDR      r12,[sp,#0x18]
        0x0081930a:    ea4f08b2    O...    ROR      r8,r2,#2
;;;233        P( D, E, A, B, C, R(47) );
        0x0081930e:    f8cd8010    ....    STR      r8,[sp,#0x10]
        0x00819312:    f8dd8050    ..P.    LDR      r8,[sp,#0x50]
        0x00819316:    ea810206    ....    EOR      r2,r1,r6
        0x0081931a:    ea8c0c08    ....    EOR      r12,r12,r8
        0x0081931e:    ea82020c    ....    EOR      r2,r2,r12
        0x00819322:    f8dd8010    ....    LDR      r8,[sp,#0x10]
        0x00819326:    9215        ..      STR      r2,[sp,#0x54]
        0x00819328:    ea4a0208    J...    ORR      r2,r10,r8
        0x0081932c:    f8ddc00c    ....    LDR      r12,[sp,#0xc]
        0x00819330:    ea0a0908    ....    AND      r9,r10,r8
        0x00819334:    ea02020c    ....    AND      r2,r2,r12
        0x00819338:    ea490902    I...    ORR      r9,r9,r2
        0x0081933c:    9a15        ..      LDR      r2,[sp,#0x54]
        0x0081933e:    eb0968fe    ...h    ADD      r8,r9,lr,ROR #27
        0x00819342:    ea4f7cf2    O..|    ROR      r12,r2,#31
        0x00819346:    eb08020c    ....    ADD      r2,r8,r12
        0x0081934a:    f8dd9008    ....    LDR      r9,[sp,#8]
        0x0081934e:    f8cdc050    ..P.    STR      r12,[sp,#0x50]
        0x00819352:    444a        JD      ADD      r2,r2,r9
        0x00819354:    441a        .D      ADD      r2,r2,r3
        0x00819356:    9202        ..      STR      r2,[sp,#8]
        0x00819358:    f8ddc014    ....    LDR      r12,[sp,#0x14]
        0x0081935c:    9a07        ..      LDR      r2,[sp,#0x1c]
        0x0081935e:    f8dd8048    ..H.    LDR      r8,[sp,#0x48]
        0x00819362:    ea82020c    ....    EOR      r2,r2,r12
        0x00819366:    ea88080b    ....    EOR      r8,r8,r11
        0x0081936a:    ea880802    ....    EOR      r8,r8,r2
        0x0081936e:    ea4f0aba    O...    ROR      r10,r10,#2
;;;234        P( C, D, E, A, B, R(48) );
        0x00819372:    f8cd8054    ..T.    STR      r8,[sp,#0x54]
        0x00819376:    f8dd8010    ....    LDR      r8,[sp,#0x10]
        0x0081937a:    ea4e020a    N...    ORR      r2,lr,r10
        0x0081937e:    ea0e0c0a    ....    AND      r12,lr,r10
        0x00819382:    ea020208    ....    AND      r2,r2,r8
        0x00819386:    ea4c0c02    L...    ORR      r12,r12,r2
        0x0081938a:    9a02        ..      LDR      r2,[sp,#8]
        0x0081938c:    f8dd8054    ..T.    LDR      r8,[sp,#0x54]
        0x00819390:    eb0c6cf2    ...l    ADD      r12,r12,r2,ROR #27
        0x00819394:    ea4f72f8    O..r    ROR      r2,r8,#31
        0x00819398:    9205        ..      STR      r2,[sp,#0x14]
        0x0081939a:    4462        bD      ADD      r2,r2,r12
        0x0081939c:    f8ddc00c    ....    LDR      r12,[sp,#0xc]
        0x008193a0:    4462        bD      ADD      r2,r2,r12
        0x008193a2:    eb020c03    ....    ADD      r12,r2,r3
        0x008193a6:    f8cdc00c    ....    STR      r12,[sp,#0xc]
        0x008193aa:    ea4f0cbe    O...    ROR      r12,lr,#2
;;;235        P( B, C, D, E, A, R(49) );
        0x008193ae:    f8cdc004    ....    STR      r12,[sp,#4]
        0x008193b2:    f8ddc020    .. .    LDR      r12,[sp,#0x20]
        0x008193b6:    f8dd8018    ....    LDR      r8,[sp,#0x18]
        0x008193ba:    9a13        ..      LDR      r2,[sp,#0x4c]
        0x008193bc:    ea8c0c08    ....    EOR      r12,r12,r8
        0x008193c0:    4062        b@      EORS     r2,r2,r4
        0x008193c2:    ea820e0c    ....    EOR      lr,r2,r12
        0x008193c6:    e9ddc201    ....    LDRD     r12,r2,[sp,#4]
        0x008193ca:    f8dd8008    ....    LDR      r8,[sp,#8]
        0x008193ce:    ea02020c    ....    AND      r2,r2,r12
        0x008193d2:    ea48080c    H...    ORR      r8,r8,r12
        0x008193d6:    ea08080a    ....    AND      r8,r8,r10
        0x008193da:    ea420208    B...    ORR      r2,r2,r8
        0x008193de:    f8ddc00c    ....    LDR      r12,[sp,#0xc]
        0x008193e2:    f8dd8010    ....    LDR      r8,[sp,#0x10]
        0x008193e6:    eb026cfc    ...l    ADD      r12,r2,r12,ROR #27
        0x008193ea:    ea4f72fe    O..r    ROR      r2,lr,#31
        0x008193ee:    9206        ..      STR      r2,[sp,#0x18]
        0x008193f0:    4462        bD      ADD      r2,r2,r12
        0x008193f2:    4442        BD      ADD      r2,r2,r8
        0x008193f4:    eb020803    ....    ADD      r8,r2,r3
        0x008193f8:    9a02        ..      LDR      r2,[sp,#8]
        0x008193fa:    f8ddc050    ..P.    LDR      r12,[sp,#0x50]
        0x008193fe:    ea4f0eb2    O...    ROR      lr,r2,#2
        0x00819402:    9a0f        ..      LDR      r2,[sp,#0x3c]
        0x00819404:    f8cd8010    ....    STR      r8,[sp,#0x10]
;;;236        P( A, B, C, D, E, R(50) );
        0x00819408:    ea8c0c02    ....    EOR      r12,r12,r2
        0x0081940c:    f8dd801c    ....    LDR      r8,[sp,#0x1c]
        0x00819410:    9a09        ..      LDR      r2,[sp,#0x24]
        0x00819412:    ea820208    ....    EOR      r2,r2,r8
        0x00819416:    ea8c0c02    ....    EOR      r12,r12,r2
        0x0081941a:    f8cdc054    ..T.    STR      r12,[sp,#0x54]
        0x0081941e:    f8dd800c    ....    LDR      r8,[sp,#0xc]
        0x00819422:    9a03        ..      LDR      r2,[sp,#0xc]
        0x00819424:    f8ddc004    ....    LDR      r12,[sp,#4]
        0x00819428:    ea48080e    H...    ORR      r8,r8,lr
        0x0081942c:    ea02020e    ....    AND      r2,r2,lr
        0x00819430:    ea08080c    ....    AND      r8,r8,r12
        0x00819434:    ea420208    B...    ORR      r2,r2,r8
        0x00819438:    f8dd8010    ....    LDR      r8,[sp,#0x10]
        0x0081943c:    f8ddc054    ..T.    LDR      r12,[sp,#0x54]
        0x00819440:    eb0268f8    ...h    ADD      r8,r2,r8,ROR #27
        0x00819444:    ea4f72fc    O..r    ROR      r2,r12,#31
        0x00819448:    9207        ..      STR      r2,[sp,#0x1c]
        0x0081944a:    4442        BD      ADD      r2,r2,r8
        0x0081944c:    4452        RD      ADD      r2,r2,r10
        0x0081944e:    441a        .D      ADD      r2,r2,r3
        0x00819450:    f8ddc00c    ....    LDR      r12,[sp,#0xc]
        0x00819454:    9200        ..      STR      r2,[sp,#0]
        0x00819456:    ea4f0abc    O...    ROR      r10,r12,#2
;;;237        P( E, A, B, C, D, R(51) );
        0x0081945a:    f8ddc028    ..(.    LDR      r12,[sp,#0x28]
        0x0081945e:    f8dd8020    .. .    LDR      r8,[sp,#0x20]
        0x00819462:    9a05        ..      LDR      r2,[sp,#0x14]
        0x00819464:    ea8c0c08    ....    EOR      r12,r12,r8
        0x00819468:    406a        j@      EORS     r2,r2,r5
        0x0081946a:    ea82020c    ....    EOR      r2,r2,r12
        0x0081946e:    f8ddc010    ....    LDR      r12,[sp,#0x10]
        0x00819472:    f8dd8010    ....    LDR      r8,[sp,#0x10]
        0x00819476:    9215        ..      STR      r2,[sp,#0x54]
        0x00819478:    ea4c0c0a    L...    ORR      r12,r12,r10
        0x0081947c:    ea08080a    ....    AND      r8,r8,r10
        0x00819480:    ea0c0c0e    ....    AND      r12,r12,lr
        0x00819484:    9a00        ..      LDR      r2,[sp,#0]
        0x00819486:    ea48080c    H...    ORR      r8,r8,r12
        0x0081948a:    eb086cf2    ...l    ADD      r12,r8,r2,ROR #27
        0x0081948e:    9a15        ..      LDR      r2,[sp,#0x54]
        0x00819490:    f8dd8010    ....    LDR      r8,[sp,#0x10]
        0x00819494:    ea4f72f2    O..r    ROR      r2,r2,#31
        0x00819498:    9208        ..      STR      r2,[sp,#0x20]
        0x0081949a:    4462        bD      ADD      r2,r2,r12
        0x0081949c:    f8ddc004    ....    LDR      r12,[sp,#4]
        0x008194a0:    ea4f08b8    O...    ROR      r8,r8,#2
        0x008194a4:    4462        bD      ADD      r2,r2,r12
        0x008194a6:    eb020903    ....    ADD      r9,r2,r3
        0x008194aa:    f8cd9004    ....    STR      r9,[sp,#4]
;;;238        P( D, E, A, B, C, R(52) );
        0x008194ae:    f8cd8010    ....    STR      r8,[sp,#0x10]
        0x008194b2:    9a06        ..      LDR      r2,[sp,#0x18]
        0x008194b4:    f8ddc024    ..$.    LDR      r12,[sp,#0x24]
        0x008194b8:    404a        J@      EORS     r2,r2,r1
        0x008194ba:    ea870c0c    ....    EOR      r12,r7,r12
        0x008194be:    ea82020c    ....    EOR      r2,r2,r12
        0x008194c2:    9215        ..      STR      r2,[sp,#0x54]
        0x008194c4:    f8ddc000    ....    LDR      r12,[sp,#0]
        0x008194c8:    9a00        ..      LDR      r2,[sp,#0]
        0x008194ca:    ea4c0c08    L...    ORR      r12,r12,r8
        0x008194ce:    ea020208    ....    AND      r2,r2,r8
        0x008194d2:    ea0c0c0a    ....    AND      r12,r12,r10
        0x008194d6:    ea42020c    B...    ORR      r2,r2,r12
        0x008194da:    eb026cf9    ...l    ADD      r12,r2,r9,ROR #27
        0x008194de:    9a15        ..      LDR      r2,[sp,#0x54]
        0x008194e0:    f8dd8048    ..H.    LDR      r8,[sp,#0x48]
        0x008194e4:    ea4f72f2    O..r    ROR      r2,r2,#31
        0x008194e8:    9209        ..      STR      r2,[sp,#0x24]
        0x008194ea:    4462        bD      ADD      r2,r2,r12
        0x008194ec:    4472        rD      ADD      r2,r2,lr
        0x008194ee:    eb020e03    ....    ADD      lr,r2,r3
        0x008194f2:    9a00        ..      LDR      r2,[sp,#0]
        0x008194f4:    ea4f02b2    O...    ROR      r2,r2,#2
;;;239        P( C, D, E, A, B, R(53) );
        0x008194f8:    9200        ..      STR      r2,[sp,#0]
        0x008194fa:    9a07        ..      LDR      r2,[sp,#0x1c]
        0x008194fc:    f8ddc028    ..(.    LDR      r12,[sp,#0x28]
        0x00819500:    ea820208    ....    EOR      r2,r2,r8
        0x00819504:    ea860c0c    ....    EOR      r12,r6,r12
        0x00819508:    ea82020c    ....    EOR      r2,r2,r12
        0x0081950c:    9215        ..      STR      r2,[sp,#0x54]
        0x0081950e:    e9dd2900    ...)    LDRD     r2,r9,[sp,#0]
        0x00819512:    f8ddc004    ....    LDR      r12,[sp,#4]
        0x00819516:    ea090902    ....    AND      r9,r9,r2
        0x0081951a:    ea4c0c02    L...    ORR      r12,r12,r2
        0x0081951e:    f8dd8010    ....    LDR      r8,[sp,#0x10]
        0x00819522:    9a15        ..      LDR      r2,[sp,#0x54]
        0x00819524:    ea0c0c08    ....    AND      r12,r12,r8
        0x00819528:    ea49090c    I...    ORR      r9,r9,r12
        0x0081952c:    eb096cfe    ...l    ADD      r12,r9,lr,ROR #27
        0x00819530:    ea4f72f2    O..r    ROR      r2,r2,#31
        0x00819534:    4494        .D      ADD      r12,r12,r2
        0x00819536:    44d4        .D      ADD      r12,r12,r10
        0x00819538:    eb0c0903    ....    ADD      r9,r12,r3
        0x0081953c:    9b01        ..      LDR      r3,[sp,#4]
        0x0081953e:    f8ddc04c    ..L.    LDR      r12,[sp,#0x4c]
        0x00819542:    ea4f0ab3    O...    ROR      r10,r3,#2
;;;240        P( B, C, D, E, A, R(54) );
        0x00819546:    9b08        ..      LDR      r3,[sp,#0x20]
        0x00819548:    ea83030c    ....    EOR      r3,r3,r12
        0x0081954c:    ea8b0c07    ....    EOR      r12,r11,r7
        0x00819550:    ea83080c    ....    EOR      r8,r3,r12
        0x00819554:    f8ddc000    ....    LDR      r12,[sp,#0]
        0x00819558:    ea4e070a    N...    ORR      r7,lr,r10
        0x0081955c:    ea0e030a    ....    AND      r3,lr,r10
        0x00819560:    ea07070c    ....    AND      r7,r7,r12
        0x00819564:    433b        ;C      ORRS     r3,r3,r7
        0x00819566:    eb036cf9    ...l    ADD      r12,r3,r9,ROR #27
        0x0081956a:    e003        ..      B        0x819574 ; mbedtls_internal_sha1_process + 3432
    $d
        0x0081956c:    6ed9eba1    ...n    DCD    1859775393
        0x00819570:    8f1bbcdc    ....    DCD    2400959708
    $t
        0x00819574:    ea4f77f8    O..w    ROR      r7,r8,#31
        0x00819578:    970b        ..      STR      r7,[sp,#0x2c]
        0x0081957a:    9b04        ..      LDR      r3,[sp,#0x10]
        0x0081957c:    4467        gD      ADD      r7,r7,r12
        0x0081957e:    441f        .D      ADD      r7,r7,r3
        0x00819580:    4bfe        .K      LDR      r3,[pc,#1016] ; [0x81997c] = 0x8f1bbcdc
        0x00819582:    4066        f@      EORS     r6,r6,r4
        0x00819584:    eb070803    ....    ADD      r8,r7,r3
        0x00819588:    ea4f07be    O...    ROR      r7,lr,#2
;;;241        P( A, B, C, D, E, R(55) );
        0x0081958c:    f8cd8010    ....    STR      r8,[sp,#0x10]
        0x00819590:    9702        ..      STR      r7,[sp,#8]
        0x00819592:    9f14        ..      LDR      r7,[sp,#0x50]
        0x00819594:    9b09        ..      LDR      r3,[sp,#0x24]
        0x00819596:    ea4f0eb9    O...    ROR      lr,r9,#2
        0x0081959a:    407b        {@      EORS     r3,r3,r7
        0x0081959c:    9f02        ..      LDR      r7,[sp,#8]
        0x0081959e:    4073        s@      EORS     r3,r3,r6
        0x008195a0:    ea490807    I...    ORR      r8,r9,r7
        0x008195a4:    ea090607    ....    AND      r6,r9,r7
        0x008195a8:    ea08080a    ....    AND      r8,r8,r10
        0x008195ac:    ea460608    F...    ORR      r6,r6,r8
        0x008195b0:    f8dd8010    ....    LDR      r8,[sp,#0x10]
        0x008195b4:    ea4f73f3    O..s    ROR      r3,r3,#31
        0x008195b8:    eb0666f8    ...f    ADD      r6,r6,r8,ROR #27
        0x008195bc:    18f7        ..      ADDS     r7,r6,r3
        0x008195be:    9e00        ..      LDR      r6,[sp,#0]
        0x008195c0:    f8ddc010    ....    LDR      r12,[sp,#0x10]
        0x008195c4:    4437        7D      ADD      r7,r7,r6
        0x008195c6:    4eed        .N      LDR      r6,[pc,#948] ; [0x81997c] = 0x8f1bbcdc
        0x008195c8:    ea4c0c0e    L...    ORR      r12,r12,lr
        0x008195cc:    4437        7D      ADD      r7,r7,r6
;;;242        P( E, A, B, C, D, R(56) );
        0x008195ce:    9700        ..      STR      r7,[sp,#0]
        0x008195d0:    9e05        ..      LDR      r6,[sp,#0x14]
        0x008195d2:    9f0f        ..      LDR      r7,[sp,#0x3c]
        0x008195d4:    4056        V@      EORS     r6,r6,r2
        0x008195d6:    ea87070b    ....    EOR      r7,r7,r11
        0x008195da:    407e        ~@      EORS     r6,r6,r7
        0x008195dc:    9f02        ..      LDR      r7,[sp,#8]
        0x008195de:    ea08080e    ....    AND      r8,r8,lr
        0x008195e2:    ea0c0c07    ....    AND      r12,r12,r7
        0x008195e6:    ea48080c    H...    ORR      r8,r8,r12
        0x008195ea:    9f00        ..      LDR      r7,[sp,#0]
        0x008195ec:    ea4f7cf6    O..|    ROR      r12,r6,#31
        0x008195f0:    eb0867f7    ...g    ADD      r7,r8,r7,ROR #27
        0x008195f4:    eb07060c    ....    ADD      r6,r7,r12
        0x008195f8:    eb06070a    ....    ADD      r7,r6,r10
        0x008195fc:    4edf        .N      LDR      r6,[pc,#892] ; [0x81997c] = 0x8f1bbcdc
        0x008195fe:    f8cdc034    ..4.    STR      r12,[sp,#0x34]
        0x00819602:    eb070c06    ....    ADD      r12,r7,r6
        0x00819606:    f8dd8010    ....    LDR      r8,[sp,#0x10]
        0x0081960a:    9f0b        ..      LDR      r7,[sp,#0x2c]
        0x0081960c:    ea4f06b8    O...    ROR      r6,r8,#2
;;;243        P( D, E, A, B, C, R(57) );
        0x00819610:    f8dd8018    ....    LDR      r8,[sp,#0x18]
        0x00819614:    406c        l@      EORS     r4,r4,r5
        0x00819616:    ea870708    ....    EOR      r7,r7,r8
        0x0081961a:    ea870a04    ....    EOR      r10,r7,r4
        0x0081961e:    9f00        ..      LDR      r7,[sp,#0]
        0x00819620:    9c00        ..      LDR      r4,[sp,#0]
        0x00819622:    4337        7C      ORRS     r7,r7,r6
        0x00819624:    4034        4@      ANDS     r4,r4,r6
        0x00819626:    ea07070e    ....    AND      r7,r7,lr
        0x0081962a:    433c        <C      ORRS     r4,r4,r7
        0x0081962c:    eb0468fc    ...h    ADD      r8,r4,r12,ROR #27
        0x00819630:    ea4f74fa    O..t    ROR      r4,r10,#31
        0x00819634:    9f02        ..      LDR      r7,[sp,#8]
        0x00819636:    44a0        .D      ADD      r8,r8,r4
        0x00819638:    44b8        .D      ADD      r8,r8,r7
        0x0081963a:    4fd0        .O      LDR      r7,[pc,#832] ; [0x81997c] = 0x8f1bbcdc
        0x0081963c:    4447        GD      ADD      r7,r7,r8
        0x0081963e:    9702        ..      STR      r7,[sp,#8]
        0x00819640:    9f00        ..      LDR      r7,[sp,#0]
        0x00819642:    f8dd803c    ..<.    LDR      r8,[sp,#0x3c]
        0x00819646:    ea4f0ab7    O...    ROR      r10,r7,#2
;;;244        P( C, D, E, A, B, R(58) );
        0x0081964a:    9f07        ..      LDR      r7,[sp,#0x1c]
        0x0081964c:    405f        _@      EORS     r7,r7,r3
        0x0081964e:    ea810808    ....    EOR      r8,r1,r8
        0x00819652:    ea870b08    ....    EOR      r11,r7,r8
        0x00819656:    ea4c070a    L...    ORR      r7,r12,r10
        0x0081965a:    ea0c090a    ....    AND      r9,r12,r10
        0x0081965e:    4037        7@      ANDS     r7,r7,r6
        0x00819660:    ea490907    I...    ORR      r9,r9,r7
        0x00819664:    9f02        ..      LDR      r7,[sp,#8]
        0x00819666:    ea4f7bfb    O..{    ROR      r11,r11,#31
        0x0081966a:    eb0968f7    ...h    ADD      r8,r9,r7,ROR #27
        0x0081966e:    eb08070b    ....    ADD      r7,r8,r11
        0x00819672:    eb07080e    ....    ADD      r8,r7,lr
        0x00819676:    4fc1        .O      LDR      r7,[pc,#772] ; [0x81997c] = 0x8f1bbcdc
        0x00819678:    ea4f09bc    O...    ROR      r9,r12,#2
        0x0081967c:    44b8        .D      ADD      r8,r8,r7
;;;245        P( B, C, D, E, A, R(59) );
        0x0081967e:    f8cd800c    ....    STR      r8,[sp,#0xc]
        0x00819682:    f8ddc034    ..4.    LDR      r12,[sp,#0x34]
        0x00819686:    9f08        ..      LDR      r7,[sp,#0x20]
        0x00819688:    ea8c0c07    ....    EOR      r12,r12,r7
        0x0081968c:    9f12        ..      LDR      r7,[sp,#0x48]
        0x0081968e:    406f        o@      EORS     r7,r7,r5
        0x00819690:    ea8c0e07    ....    EOR      lr,r12,r7
        0x00819694:    9d02        ..      LDR      r5,[sp,#8]
        0x00819696:    9f02        ..      LDR      r7,[sp,#8]
        0x00819698:    ea450509    E...    ORR      r5,r5,r9
        0x0081969c:    ea070709    ....    AND      r7,r7,r9
        0x008196a0:    ea05050a    ....    AND      r5,r5,r10
        0x008196a4:    432f        /C      ORRS     r7,r7,r5
        0x008196a6:    eb0767f8    ...g    ADD      r7,r7,r8,ROR #27
        0x008196aa:    ea4f75fe    O..u    ROR      r5,lr,#31
        0x008196ae:    442f        /D      ADD      r7,r7,r5
        0x008196b0:    4437        7D      ADD      r7,r7,r6
        0x008196b2:    4eb2        .N      LDR      r6,[pc,#712] ; [0x81997c] = 0x8f1bbcdc
        0x008196b4:    eb070e06    ....    ADD      lr,r7,r6
        0x008196b8:    9f02        ..      LDR      r7,[sp,#8]
        0x008196ba:    9e09        ..      LDR      r6,[sp,#0x24]
        0x008196bc:    ea4f0cb7    O...    ROR      r12,r7,#2
;;;246    
;;;247    #undef K
;;;248    #undef F
;;;249    
;;;250    #define F(x,y,z) (x ^ y ^ z)
;;;251    #define K 0xCA62C1D6
;;;252    
;;;253        P( A, B, C, D, E, R(60) );
        0x008196c0:    ea840706    ....    EOR      r7,r4,r6
        0x008196c4:    9e13        ..      LDR      r6,[sp,#0x4c]
        0x008196c6:    ea88080c    ....    EOR      r8,r8,r12
        0x008196ca:    404e        N@      EORS     r6,r6,r1
        0x008196cc:    ea880809    ....    EOR      r8,r8,r9
        0x008196d0:    eb0861fe    ...a    ADD      r1,r8,lr,ROR #27
        0x008196d4:    f8cdc008    ....    STR      r12,[sp,#8]
        0x008196d8:    4077        w@      EORS     r7,r7,r6
        0x008196da:    ea4f7cf7    O..|    ROR      r12,r7,#31
        0x008196de:    4461        aD      ADD      r1,r1,r12
        0x008196e0:    eb01060a    ....    ADD      r6,r1,r10
        0x008196e4:    f8dd800c    ....    LDR      r8,[sp,#0xc]
        0x008196e8:    49a5        .I      LDR      r1,[pc,#660] ; [0x819980] = 0xca62c1d6
        0x008196ea:    ea4f08b8    O...    ROR      r8,r8,#2
        0x008196ee:    eb060a01    ....    ADD      r10,r6,r1
        0x008196f2:    f8cdc044    ..D.    STR      r12,[sp,#0x44]
;;;254        P( E, A, B, C, D, R(61) );
        0x008196f6:    f8cd800c    ....    STR      r8,[sp,#0xc]
        0x008196fa:    f8ddc048    ..H.    LDR      r12,[sp,#0x48]
        0x008196fe:    9e14        ..      LDR      r6,[sp,#0x50]
        0x00819700:    ea8b0702    ....    EOR      r7,r11,r2
        0x00819704:    ea86060c    ....    EOR      r6,r6,r12
        0x00819708:    4077        w@      EORS     r7,r7,r6
        0x0081970a:    ea8e0608    ....    EOR      r6,lr,r8
        0x0081970e:    f8ddc008    ....    LDR      r12,[sp,#8]
        0x00819712:    ea4f77f7    O..w    ROR      r7,r7,#31
        0x00819716:    ea86060c    ....    EOR      r6,r6,r12
        0x0081971a:    eb0666fa    ...f    ADD      r6,r6,r10,ROR #27
        0x0081971e:    443e        >D      ADD      r6,r6,r7
        0x00819720:    9712        ..      STR      r7,[sp,#0x48]
        0x00819722:    444e        ND      ADD      r6,r6,r9
        0x00819724:    9f0b        ..      LDR      r7,[sp,#0x2c]
        0x00819726:    eb060901    ....    ADD      r9,r6,r1
        0x0081972a:    ea4f08be    O...    ROR      r8,lr,#2
;;;255        P( D, E, A, B, C, R(62) );
        0x0081972e:    f8cd8010    ....    STR      r8,[sp,#0x10]
        0x00819732:    ea850607    ....    EOR      r6,r5,r7
        0x00819736:    f8ddc04c    ..L.    LDR      r12,[sp,#0x4c]
        0x0081973a:    9f05        ..      LDR      r7,[sp,#0x14]
        0x0081973c:    ea87070c    ....    EOR      r7,r7,r12
        0x00819740:    407e        ~@      EORS     r6,r6,r7
        0x00819742:    ea8a0c08    ....    EOR      r12,r10,r8
        0x00819746:    f8dd800c    ....    LDR      r8,[sp,#0xc]
        0x0081974a:    ea4f76f6    O..v    ROR      r6,r6,#31
        0x0081974e:    ea8c0c08    ....    EOR      r12,r12,r8
        0x00819752:    eb0c67f9    ...g    ADD      r7,r12,r9,ROR #27
        0x00819756:    f8ddc008    ....    LDR      r12,[sp,#8]
        0x0081975a:    4437        7D      ADD      r7,r7,r6
        0x0081975c:    4467        gD      ADD      r7,r7,r12
        0x0081975e:    eb070c01    ....    ADD      r12,r7,r1
        0x00819762:    f8cdc008    ....    STR      r12,[sp,#8]
        0x00819766:    f8dd8050    ..P.    LDR      r8,[sp,#0x50]
        0x0081976a:    9f06        ..      LDR      r7,[sp,#0x18]
        0x0081976c:    f8ddc044    ..D.    LDR      r12,[sp,#0x44]
        0x00819770:    ea870708    ....    EOR      r7,r7,r8
        0x00819774:    ea8c0c03    ....    EOR      r12,r12,r3
        0x00819778:    ea8c0e07    ....    EOR      lr,r12,r7
        0x0081977c:    ea4f0aba    O...    ROR      r10,r10,#2
;;;256        P( C, D, E, A, B, R(63) );
        0x00819780:    ea89070a    ....    EOR      r7,r9,r10
        0x00819784:    f8dd8010    ....    LDR      r8,[sp,#0x10]
        0x00819788:    f8ddc008    ....    LDR      r12,[sp,#8]
        0x0081978c:    ea870708    ....    EOR      r7,r7,r8
        0x00819790:    eb0767fc    ...g    ADD      r7,r7,r12,ROR #27
        0x00819794:    ea4f7efe    O..~    ROR      lr,lr,#31
        0x00819798:    f8dd800c    ....    LDR      r8,[sp,#0xc]
        0x0081979c:    4477        wD      ADD      r7,r7,lr
        0x0081979e:    4447        GD      ADD      r7,r7,r8
        0x008197a0:    eb070801    ....    ADD      r8,r7,r1
        0x008197a4:    f8cd800c    ....    STR      r8,[sp,#0xc]
        0x008197a8:    f8ddc034    ..4.    LDR      r12,[sp,#0x34]
        0x008197ac:    9f12        ..      LDR      r7,[sp,#0x48]
        0x008197ae:    f8dd8014    ....    LDR      r8,[sp,#0x14]
        0x008197b2:    ea87070c    ....    EOR      r7,r7,r12
        0x008197b6:    f8ddc01c    ....    LDR      r12,[sp,#0x1c]
        0x008197ba:    ea4f09b9    O...    ROR      r9,r9,#2
;;;257        P( B, C, D, E, A, R(64) );
        0x008197be:    ea8c0c08    ....    EOR      r12,r12,r8
        0x008197c2:    ea87070c    ....    EOR      r7,r7,r12
        0x008197c6:    f8ddc008    ....    LDR      r12,[sp,#8]
        0x008197ca:    f8dd800c    ....    LDR      r8,[sp,#0xc]
        0x008197ce:    ea8c0c09    ....    EOR      r12,r12,r9
        0x008197d2:    ea8c0c0a    ....    EOR      r12,r12,r10
        0x008197d6:    eb0c6cf8    ...l    ADD      r12,r12,r8,ROR #27
        0x008197da:    ea4f77f7    O..w    ROR      r7,r7,#31
        0x008197de:    9705        ..      STR      r7,[sp,#0x14]
        0x008197e0:    f8dd8010    ....    LDR      r8,[sp,#0x10]
        0x008197e4:    4467        gD      ADD      r7,r7,r12
        0x008197e6:    4447        GD      ADD      r7,r7,r8
        0x008197e8:    eb070c01    ....    ADD      r12,r7,r1
        0x008197ec:    f8cdc010    ....    STR      r12,[sp,#0x10]
        0x008197f0:    f8cd9004    ....    STR      r9,[sp,#4]
        0x008197f4:    f8ddc008    ....    LDR      r12,[sp,#8]
        0x008197f8:    f8dd8018    ....    LDR      r8,[sp,#0x18]
        0x008197fc:    ea4f09bc    O...    ROR      r9,r12,#2
;;;258        P( A, B, C, D, E, R(65) );
        0x00819800:    f8ddc020    .. .    LDR      r12,[sp,#0x20]
        0x00819804:    ea860704    ....    EOR      r7,r6,r4
        0x00819808:    ea8c0c08    ....    EOR      r12,r12,r8
        0x0081980c:    f8dd800c    ....    LDR      r8,[sp,#0xc]
        0x00819810:    f8cd9008    ....    STR      r9,[sp,#8]
        0x00819814:    ea880809    ....    EOR      r8,r8,r9
        0x00819818:    ea87070c    ....    EOR      r7,r7,r12
        0x0081981c:    f8dd9004    ....    LDR      r9,[sp,#4]
        0x00819820:    f8ddc010    ....    LDR      r12,[sp,#0x10]
        0x00819824:    ea880809    ....    EOR      r8,r8,r9
        0x00819828:    eb086cfc    ...l    ADD      r12,r8,r12,ROR #27
        0x0081982c:    ea4f78f7    O..x    ROR      r8,r7,#31
        0x00819830:    eb0c0708    ....    ADD      r7,r12,r8
        0x00819834:    f8cd8018    ....    STR      r8,[sp,#0x18]
        0x00819838:    4457        WD      ADD      r7,r7,r10
        0x0081983a:    f8dd800c    ....    LDR      r8,[sp,#0xc]
        0x0081983e:    eb070a01    ....    ADD      r10,r7,r1
        0x00819842:    ea4f07b8    O...    ROR      r7,r8,#2
;;;259        P( E, A, B, C, D, R(66) );
        0x00819846:    9703        ..      STR      r7,[sp,#0xc]
        0x00819848:    f8dd801c    ....    LDR      r8,[sp,#0x1c]
        0x0081984c:    9f09        ..      LDR      r7,[sp,#0x24]
        0x0081984e:    ea8e0c0b    ....    EOR      r12,lr,r11
        0x00819852:    ea870708    ....    EOR      r7,r7,r8
        0x00819856:    ea8c0c07    ....    EOR      r12,r12,r7
        0x0081985a:    f8cdc054    ..T.    STR      r12,[sp,#0x54]
        0x0081985e:    e9dd7c03    ...|    LDRD     r7,r12,[sp,#0xc]
        0x00819862:    f8dd9008    ....    LDR      r9,[sp,#8]
        0x00819866:    ea8c0c07    ....    EOR      r12,r12,r7
        0x0081986a:    ea8c0c09    ....    EOR      r12,r12,r9
        0x0081986e:    eb0c67fa    ...g    ADD      r7,r12,r10,ROR #27
        0x00819872:    f8ddc054    ..T.    LDR      r12,[sp,#0x54]
        0x00819876:    f8dd9004    ....    LDR      r9,[sp,#4]
        0x0081987a:    ea4f7cfc    O..|    ROR      r12,r12,#31
        0x0081987e:    4467        gD      ADD      r7,r7,r12
        0x00819880:    f8cdc01c    ....    STR      r12,[sp,#0x1c]
        0x00819884:    f8ddc010    ....    LDR      r12,[sp,#0x10]
        0x00819888:    444f        OD      ADD      r7,r7,r9
        0x0081988a:    440f        .D      ADD      r7,r7,r1
        0x0081988c:    ea4f0cbc    O...    ROR      r12,r12,#2
        0x00819890:    9701        ..      STR      r7,[sp,#4]
;;;260        P( D, E, A, B, C, R(67) );
        0x00819892:    f8cdc010    ....    STR      r12,[sp,#0x10]
        0x00819896:    9f05        ..      LDR      r7,[sp,#0x14]
        0x00819898:    f8ddc020    .. .    LDR      r12,[sp,#0x20]
        0x0081989c:    406f        o@      EORS     r7,r7,r5
        0x0081989e:    ea820c0c    ....    EOR      r12,r2,r12
        0x008198a2:    ea87090c    ....    EOR      r9,r7,r12
        0x008198a6:    f8ddc010    ....    LDR      r12,[sp,#0x10]
        0x008198aa:    9f03        ..      LDR      r7,[sp,#0xc]
        0x008198ac:    ea8a080c    ....    EOR      r8,r10,r12
        0x008198b0:    ea880807    ....    EOR      r8,r8,r7
        0x008198b4:    9f01        ..      LDR      r7,[sp,#4]
        0x008198b6:    ea4f0aba    O...    ROR      r10,r10,#2
        0x008198ba:    eb086cf7    ...l    ADD      r12,r8,r7,ROR #27
        0x008198be:    ea4f78f9    O..x    ROR      r8,r9,#31
        0x008198c2:    eb0c0708    ....    ADD      r7,r12,r8
        0x008198c6:    f8dd9008    ....    LDR      r9,[sp,#8]
        0x008198ca:    f8cd8020    .. .    STR      r8,[sp,#0x20]
        0x008198ce:    444f        OD      ADD      r7,r7,r9
        0x008198d0:    eb070901    ....    ADD      r9,r7,r1
;;;261        P( C, D, E, A, B, R(68) );
        0x008198d4:    f8cd9008    ....    STR      r9,[sp,#8]
        0x008198d8:    f8ddc044    ..D.    LDR      r12,[sp,#0x44]
        0x008198dc:    f8dd8018    ....    LDR      r8,[sp,#0x18]
        0x008198e0:    9f0b        ..      LDR      r7,[sp,#0x2c]
        0x008198e2:    ea88080c    ....    EOR      r8,r8,r12
        0x008198e6:    f8ddc024    ..$.    LDR      r12,[sp,#0x24]
        0x008198ea:    f8cda000    ....    STR      r10,[sp,#0]
        0x008198ee:    ea87070c    ....    EOR      r7,r7,r12
        0x008198f2:    ea880807    ....    EOR      r8,r8,r7
        0x008198f6:    9f01        ..      LDR      r7,[sp,#4]
        0x008198f8:    f8ddc010    ....    LDR      r12,[sp,#0x10]
        0x008198fc:    ea87070a    ....    EOR      r7,r7,r10
        0x00819900:    ea87070c    ....    EOR      r7,r7,r12
        0x00819904:    eb076cf9    ...l    ADD      r12,r7,r9,ROR #27
        0x00819908:    ea4f77f8    O..w    ROR      r7,r8,#31
        0x0081990c:    44bc        .D      ADD      r12,r12,r7
        0x0081990e:    9709        ..      STR      r7,[sp,#0x24]
        0x00819910:    9f03        ..      LDR      r7,[sp,#0xc]
        0x00819912:    405a        Z@      EORS     r2,r2,r3
        0x00819914:    4467        gD      ADD      r7,r7,r12
        0x00819916:    440f        .D      ADD      r7,r7,r1
        0x00819918:    9703        ..      STR      r7,[sp,#0xc]
        0x0081991a:    9f01        ..      LDR      r7,[sp,#4]
        0x0081991c:    f8ddc01c    ....    LDR      r12,[sp,#0x1c]
        0x00819920:    ea4f0ab7    O...    ROR      r10,r7,#2
;;;262        P( B, C, D, E, A, R(69) );
        0x00819924:    9f12        ..      LDR      r7,[sp,#0x48]
        0x00819926:    f8cda004    ....    STR      r10,[sp,#4]
        0x0081992a:    ea8c0c07    ....    EOR      r12,r12,r7
        0x0081992e:    ea8c0c02    ....    EOR      r12,r12,r2
        0x00819932:    ea89090a    ....    EOR      r9,r9,r10
        0x00819936:    f8dda000    ....    LDR      r10,[sp,#0]
        0x0081993a:    9f03        ..      LDR      r7,[sp,#0xc]
        0x0081993c:    ea4f78fc    O..x    ROR      r8,r12,#31
        0x00819940:    ea89090a    ....    EOR      r9,r9,r10
        0x00819944:    eb0962f7    ...b    ADD      r2,r9,r7,ROR #27
        0x00819948:    f8ddc010    ....    LDR      r12,[sp,#0x10]
        0x0081994c:    4442        BD      ADD      r2,r2,r8
        0x0081994e:    f8cd8028    ..(.    STR      r8,[sp,#0x28]
        0x00819952:    4462        bD      ADD      r2,r2,r12
        0x00819954:    f8dd9008    ....    LDR      r9,[sp,#8]
        0x00819958:    f8dd8020    .. .    LDR      r8,[sp,#0x20]
        0x0081995c:    ea4f0cb9    O...    ROR      r12,r9,#2
        0x00819960:    f8cdc008    ....    STR      r12,[sp,#8]
        0x00819964:    f8ddc034    ..4.    LDR      r12,[sp,#0x34]
        0x00819968:    9f0b        ..      LDR      r7,[sp,#0x2c]
        0x0081996a:    440a        .D      ADD      r2,r2,r1
        0x0081996c:    ea880806    ....    EOR      r8,r8,r6
        0x00819970:    ea8c0c07    ....    EOR      r12,r12,r7
        0x00819974:    9204        ..      STR      r2,[sp,#0x10]
;;;263        P( A, B, C, D, E, R(70) );
        0x00819976:    ea88080c    ....    EOR      r8,r8,r12
        0x0081997a:    e003        ..      B        0x819984 ; mbedtls_internal_sha1_process + 4472
    $d
        0x0081997c:    8f1bbcdc    ....    DCD    2400959708
        0x00819980:    ca62c1d6    ..b.    DCD    3395469782
    $t
        0x00819984:    e9ddc702    ....    LDRD     r12,r7,[sp,#8]
        0x00819988:    f8dda004    ....    LDR      r10,[sp,#4]
        0x0081998c:    ea87070c    ....    EOR      r7,r7,r12
        0x00819990:    ea87070a    ....    EOR      r7,r7,r10
        0x00819994:    eb0762f2    ...b    ADD      r2,r7,r2,ROR #27
        0x00819998:    ea4f77f8    O..w    ROR      r7,r8,#31
        0x0081999c:    443a        :D      ADD      r2,r2,r7
        0x0081999e:    f8dda000    ....    LDR      r10,[sp,#0]
        0x008199a2:    970b        ..      STR      r7,[sp,#0x2c]
        0x008199a4:    4452        RD      ADD      r2,r2,r10
        0x008199a6:    9f03        ..      LDR      r7,[sp,#0xc]
        0x008199a8:    eb020c01    ....    ADD      r12,r2,r1
        0x008199ac:    ea4f09b7    O...    ROR      r9,r7,#2
        0x008199b0:    9f09        ..      LDR      r7,[sp,#0x24]
        0x008199b2:    ea840203    ....    EOR      r2,r4,r3
        0x008199b6:    ea87070e    ....    EOR      r7,r7,lr
        0x008199ba:    4057        W@      EORS     r7,r7,r2
        0x008199bc:    f8cdc000    ....    STR      r12,[sp,#0]
;;;264        P( E, A, B, C, D, R(71) );
        0x008199c0:    9a04        ..      LDR      r2,[sp,#0x10]
        0x008199c2:    f8ddc008    ....    LDR      r12,[sp,#8]
        0x008199c6:    ea820209    ....    EOR      r2,r2,r9
        0x008199ca:    ea82020c    ....    EOR      r2,r2,r12
        0x008199ce:    f8ddc000    ....    LDR      r12,[sp,#0]
        0x008199d2:    ea4f78f7    O..x    ROR      r8,r7,#31
        0x008199d6:    eb0262fc    ...b    ADD      r2,r2,r12,ROR #27
        0x008199da:    4442        BD      ADD      r2,r2,r8
        0x008199dc:    f8dda004    ....    LDR      r10,[sp,#4]
        0x008199e0:    f8cd8030    ..0.    STR      r8,[sp,#0x30]
        0x008199e4:    f8cd900c    ....    STR      r9,[sp,#0xc]
        0x008199e8:    4452        RD      ADD      r2,r2,r10
        0x008199ea:    f8dd8028    ..(.    LDR      r8,[sp,#0x28]
        0x008199ee:    9f05        ..      LDR      r7,[sp,#0x14]
        0x008199f0:    440a        .D      ADD      r2,r2,r1
        0x008199f2:    f8ddc034    ..4.    LDR      r12,[sp,#0x34]
        0x008199f6:    9201        ..      STR      r2,[sp,#4]
        0x008199f8:    ea880807    ....    EOR      r8,r8,r7
        0x008199fc:    9a04        ..      LDR      r2,[sp,#0x10]
        0x008199fe:    ea8b070c    ....    EOR      r7,r11,r12
        0x00819a02:    ea4f0ab2    O...    ROR      r10,r2,#2
;;;265        P( D, E, A, B, C, R(72) );
        0x00819a06:    f8ddc000    ....    LDR      r12,[sp,#0]
        0x00819a0a:    f8dd900c    ....    LDR      r9,[sp,#0xc]
        0x00819a0e:    ea8c0c0a    ....    EOR      r12,r12,r10
        0x00819a12:    9a01        ..      LDR      r2,[sp,#4]
        0x00819a14:    ea880807    ....    EOR      r8,r8,r7
        0x00819a18:    ea8c0c09    ....    EOR      r12,r12,r9
        0x00819a1c:    eb0c62f2    ...b    ADD      r2,r12,r2,ROR #27
        0x00819a20:    ea4f7cf8    O..|    ROR      r12,r8,#31
        0x00819a24:    4462        bD      ADD      r2,r2,r12
        0x00819a26:    f8cdc034    ..4.    STR      r12,[sp,#0x34]
        0x00819a2a:    f8ddc008    ....    LDR      r12,[sp,#8]
        0x00819a2e:    f8dd8018    ....    LDR      r8,[sp,#0x18]
        0x00819a32:    4462        bD      ADD      r2,r2,r12
        0x00819a34:    eb020901    ....    ADD      r9,r2,r1
        0x00819a38:    9f0b        ..      LDR      r7,[sp,#0x2c]
        0x00819a3a:    ea850204    ....    EOR      r2,r5,r4
        0x00819a3e:    ea870708    ....    EOR      r7,r7,r8
        0x00819a42:    f8ddc000    ....    LDR      r12,[sp,#0]
        0x00819a46:    4057        W@      EORS     r7,r7,r2
        0x00819a48:    ea4f0cbc    O...    ROR      r12,r12,#2
        0x00819a4c:    9a01        ..      LDR      r2,[sp,#4]
        0x00819a4e:    f8cd9008    ....    STR      r9,[sp,#8]
;;;266        P( C, D, E, A, B, R(73) );
        0x00819a52:    ea82020c    ....    EOR      r2,r2,r12
        0x00819a56:    ea82020a    ....    EOR      r2,r2,r10
        0x00819a5a:    eb0262f9    ...b    ADD      r2,r2,r9,ROR #27
        0x00819a5e:    ea4f73f7    O..s    ROR      r3,r7,#31
        0x00819a62:    f8dd900c    ....    LDR      r9,[sp,#0xc]
        0x00819a66:    441a        .D      ADD      r2,r2,r3
        0x00819a68:    930e        ..      STR      r3,[sp,#0x38]
        0x00819a6a:    444a        JD      ADD      r2,r2,r9
        0x00819a6c:    1853        S.      ADDS     r3,r2,r1
        0x00819a6e:    9a01        ..      LDR      r2,[sp,#4]
        0x00819a70:    f8cdc000    ....    STR      r12,[sp,#0]
        0x00819a74:    ea4f07b2    O...    ROR      r7,r2,#2
;;;267        P( B, C, D, E, A, R(74) );
        0x00819a78:    f8ddc01c    ....    LDR      r12,[sp,#0x1c]
        0x00819a7c:    9701        ..      STR      r7,[sp,#4]
        0x00819a7e:    f8dd8030    ..0.    LDR      r8,[sp,#0x30]
        0x00819a82:    e9dd7901    ...y    LDRD     r7,r9,[sp,#4]
        0x00819a86:    ea88080c    ....    EOR      r8,r8,r12
        0x00819a8a:    f8ddc044    ..D.    LDR      r12,[sp,#0x44]
        0x00819a8e:    ea890907    ....    EOR      r9,r9,r7
        0x00819a92:    ea8c0c0b    ....    EOR      r12,r12,r11
        0x00819a96:    ea88080c    ....    EOR      r8,r8,r12
        0x00819a9a:    f8ddc000    ....    LDR      r12,[sp,#0]
        0x00819a9e:    9f12        ..      LDR      r7,[sp,#0x48]
        0x00819aa0:    ea89090c    ....    EOR      r9,r9,r12
        0x00819aa4:    eb0962f3    ...b    ADD      r2,r9,r3,ROR #27
        0x00819aa8:    ea4f79f8    O..y    ROR      r9,r8,#31
        0x00819aac:    444a        JD      ADD      r2,r2,r9
        0x00819aae:    f8ddc034    ..4.    LDR      r12,[sp,#0x34]
        0x00819ab2:    f8dd8020    .. .    LDR      r8,[sp,#0x20]
        0x00819ab6:    f8cd903c    ..<.    STR      r9,[sp,#0x3c]
        0x00819aba:    f8dd9008    ....    LDR      r9,[sp,#8]
        0x00819abe:    ea8c0c08    ....    EOR      r12,r12,r8
        0x00819ac2:    ea4f0bb9    O...    ROR      r11,r9,#2
        0x00819ac6:    406f        o@      EORS     r7,r7,r5
        0x00819ac8:    ea8c0c07    ....    EOR      r12,r12,r7
        0x00819acc:    4452        RD      ADD      r2,r2,r10
        0x00819ace:    ea83040b    ....    EOR      r4,r3,r11
        0x00819ad2:    9f01        ..      LDR      r7,[sp,#4]
        0x00819ad4:    440a        .D      ADD      r2,r2,r1
;;;268        P( A, B, C, D, E, R(75) );
        0x00819ad6:    407c        |@      EORS     r4,r4,r7
        0x00819ad8:    ea4f7cfc    O..|    ROR      r12,r12,#31
        0x00819adc:    eb0464f2    ...d    ADD      r4,r4,r2,ROR #27
        0x00819ae0:    4464        dD      ADD      r4,r4,r12
        0x00819ae2:    f8cdc040    ..@.    STR      r12,[sp,#0x40]
        0x00819ae6:    f8ddc000    ....    LDR      r12,[sp,#0]
        0x00819aea:    ea4f0ab3    O...    ROR      r10,r3,#2
        0x00819aee:    4464        dD      ADD      r4,r4,r12
        0x00819af0:    9f09        ..      LDR      r7,[sp,#0x24]
        0x00819af2:    9b0e        ..      LDR      r3,[sp,#0x38]
        0x00819af4:    f8ddc044    ..D.    LDR      r12,[sp,#0x44]
        0x00819af8:    407b        {@      EORS     r3,r3,r7
        0x00819afa:    ea86050c    ....    EOR      r5,r6,r12
        0x00819afe:    406b        k@      EORS     r3,r3,r5
        0x00819b00:    ea82050a    ....    EOR      r5,r2,r10
        0x00819b04:    440c        .D      ADD      r4,r4,r1
;;;269        P( E, A, B, C, D, R(76) );
        0x00819b06:    ea85050b    ....    EOR      r5,r5,r11
        0x00819b0a:    ea4f77f3    O..w    ROR      r7,r3,#31
        0x00819b0e:    eb0565f4    ...e    ADD      r5,r5,r4,ROR #27
        0x00819b12:    19eb        ..      ADDS     r3,r5,r7
        0x00819b14:    9711        ..      STR      r7,[sp,#0x44]
        0x00819b16:    9f01        ..      LDR      r7,[sp,#4]
        0x00819b18:    f8dd903c    ..<.    LDR      r9,[sp,#0x3c]
        0x00819b1c:    443b        ;D      ADD      r3,r3,r7
        0x00819b1e:    9f12        ..      LDR      r7,[sp,#0x48]
        0x00819b20:    f8dd8028    ..(.    LDR      r8,[sp,#0x28]
        0x00819b24:    ea8e0c07    ....    EOR      r12,lr,r7
        0x00819b28:    ea890908    ....    EOR      r9,r9,r8
        0x00819b2c:    ea89090c    ....    EOR      r9,r9,r12
        0x00819b30:    ea4f02b2    O...    ROR      r2,r2,#2
        0x00819b34:    ea840502    ....    EOR      r5,r4,r2
        0x00819b38:    f8ddc040    ..@.    LDR      r12,[sp,#0x40]
        0x00819b3c:    9f0b        ..      LDR      r7,[sp,#0x2c]
        0x00819b3e:    440b        .D      ADD      r3,r3,r1
        0x00819b40:    ea8c0c07    ....    EOR      r12,r12,r7
        0x00819b44:    9f05        ..      LDR      r7,[sp,#0x14]
;;;270        P( D, E, A, B, C, R(77) );
        0x00819b46:    ea85050a    ....    EOR      r5,r5,r10
        0x00819b4a:    eb0565f3    ...e    ADD      r5,r5,r3,ROR #27
        0x00819b4e:    4077        w@      EORS     r7,r7,r6
        0x00819b50:    eb0575f9    ...u    ADD      r5,r5,r9,ROR #31
        0x00819b54:    ea4f04b4    O...    ROR      r4,r4,#2
        0x00819b58:    445d        ]D      ADD      r5,r5,r11
        0x00819b5a:    ea830604    ....    EOR      r6,r3,r4
        0x00819b5e:    440d        .D      ADD      r5,r5,r1
;;;271        P( C, D, E, A, B, R(78) );
        0x00819b60:    4056        V@      EORS     r6,r6,r2
        0x00819b62:    ea8c0c07    ....    EOR      r12,r12,r7
        0x00819b66:    eb0666f5    ...f    ADD      r6,r6,r5,ROR #27
        0x00819b6a:    eb0676fc    ...v    ADD      r6,r6,r12,ROR #31
        0x00819b6e:    4456        VD      ADD      r6,r6,r10
        0x00819b70:    440e        .D      ADD      r6,r6,r1
        0x00819b72:    f8dd8030    ..0.    LDR      r8,[sp,#0x30]
        0x00819b76:    9f11        ..      LDR      r7,[sp,#0x44]
        0x00819b78:    ea4f03b3    O...    ROR      r3,r3,#2
;;;272        P( B, C, D, E, A, R(79) );
        0x00819b7c:    ea870708    ....    EOR      r7,r7,r8
        0x00819b80:    f8dd8018    ....    LDR      r8,[sp,#0x18]
        0x00819b84:    ea850c03    ....    EOR      r12,r5,r3
        0x00819b88:    ea88080e    ....    EOR      r8,r8,lr
        0x00819b8c:    ea8c0c04    ....    EOR      r12,r12,r4
        0x00819b90:    ea870708    ....    EOR      r7,r7,r8
        0x00819b94:    eb0c6cf6    ...l    ADD      r12,r12,r6,ROR #27
        0x00819b98:    eb0c77f7    ...w    ADD      r7,r12,r7,ROR #31
        0x00819b9c:    443a        :D      ADD      r2,r2,r7
        0x00819b9e:    4411        .D      ADD      r1,r1,r2
        0x00819ba0:    ea4f02b5    O...    ROR      r2,r5,#2
;;;273    
;;;274    #undef K
;;;275    #undef F
;;;276    
;;;277        ctx->state[0] += A;
        0x00819ba4:    9d1a        ..      LDR      r5,[sp,#0x68]
        0x00819ba6:    4429        )D      ADD      r1,r1,r5
        0x00819ba8:    6081        .`      STR      r1,[r0,#8]
;;;278        ctx->state[1] += B;
        0x00819baa:    9919        ..      LDR      r1,[sp,#0x64]
        0x00819bac:    4431        1D      ADD      r1,r1,r6
        0x00819bae:    60c1        .`      STR      r1,[r0,#0xc]
;;;279        ctx->state[2] += C;
        0x00819bb0:    9918        ..      LDR      r1,[sp,#0x60]
        0x00819bb2:    4411        .D      ADD      r1,r1,r2
        0x00819bb4:    6101        .a      STR      r1,[r0,#0x10]
;;;280        ctx->state[3] += D;
        0x00819bb6:    9917        ..      LDR      r1,[sp,#0x5c]
        0x00819bb8:    4419        .D      ADD      r1,r1,r3
        0x00819bba:    6141        Aa      STR      r1,[r0,#0x14]
;;;281        ctx->state[4] += E;
        0x00819bbc:    9916        ..      LDR      r1,[sp,#0x58]
        0x00819bbe:    4421        !D      ADD      r1,r1,r4
;;;282    
;;;283        return( 0 );
        0x00819bc0:    6181        .a      STR      r1,[r0,#0x18]
        0x00819bc2:    b01b        ..      ADD      sp,sp,#0x6c
        0x00819bc4:    2000        .       MOVS     r0,#0
;;;284    }
        0x00819bc6:    e8bd8ff0    ....    POP      {r4-r11,pc}
    mbedtls_sha1_process
;;;285    
;;;286    #if !defined(MBEDTLS_DEPRECATED_REMOVED)
;;;287    void mbedtls_sha1_process( mbedtls_sha1_context *ctx,
;;;288                               const unsigned char data[64] )
;;;289    {
;;;290        mbedtls_internal_sha1_process( ctx, data );
        0x00819bca:    f7febe1f    ....    B        mbedtls_internal_sha1_process ; 0x81880c
    mbedtls_sha1_update_ret
;;;291    }
;;;292    #endif
;;;293    #endif /* !MBEDTLS_SHA1_PROCESS_ALT */
;;;294    
;;;295    /*
;;;296     * SHA-1 process buffer
;;;297     */
;;;298    int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
;;;299                                 const unsigned char *input,
;;;300                                 size_t ilen )
;;;301    {
        0x00819bce:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x00819bd2:    0014        ..      MOVS     r4,r2
        0x00819bd4:    460f        .F      MOV      r7,r1
        0x00819bd6:    4605        .F      MOV      r5,r0
        0x00819bd8:    d031        1.      BEQ      0x819c3e ; mbedtls_sha1_update_ret + 112
;;;302        int ret;
;;;303        size_t fill;
;;;304        uint32_t left;
;;;305    
;;;306        SHA1_VALIDATE_RET( ctx != NULL );
;;;307        SHA1_VALIDATE_RET( ilen == 0 || input != NULL );
;;;308    
;;;309        if( ilen == 0 )
;;;310            return( 0 );
;;;311    
;;;312        left = ctx->total[0] & 0x3F;
        0x00819bda:    6828        (h      LDR      r0,[r5,#0]
        0x00819bdc:    f000063f    ..?.    AND      r6,r0,#0x3f
        0x00819be0:    4420         D      ADD      r0,r0,r4
;;;313        fill = 64 - left;
        0x00819be2:    f1c60840    ..@.    RSB      r8,r6,#0x40
;;;314    
;;;315        ctx->total[0] += (uint32_t) ilen;
;;;316        ctx->total[0] &= 0xFFFFFFFF;
;;;317    
;;;318        if( ctx->total[0] < (uint32_t) ilen )
        0x00819be6:    6028        (`      STR      r0,[r5,#0]
        0x00819be8:    42a0        .B      CMP      r0,r4
        0x00819bea:    d202        ..      BCS      0x819bf2 ; mbedtls_sha1_update_ret + 36
;;;319            ctx->total[1]++;
        0x00819bec:    6868        hh      LDR      r0,[r5,#4]
        0x00819bee:    1c40        @.      ADDS     r0,r0,#1
        0x00819bf0:    6068        h`      STR      r0,[r5,#4]
;;;320    
;;;321        if( left && ilen >= fill )
        0x00819bf2:    b1de        ..      CBZ      r6,0x819c2c ; mbedtls_sha1_update_ret + 94
        0x00819bf4:    4544        DE      CMP      r4,r8
        0x00819bf6:    d319        ..      BCC      0x819c2c ; mbedtls_sha1_update_ret + 94
;;;322        {
;;;323            memcpy( (void *) (ctx->buffer + left), input, fill );
        0x00819bf8:    19a8        ..      ADDS     r0,r5,r6
        0x00819bfa:    4642        BF      MOV      r2,r8
        0x00819bfc:    4639        9F      MOV      r1,r7
        0x00819bfe:    301c        .0      ADDS     r0,r0,#0x1c
        0x00819c00:    f440f14b    @.K.    BL       __aeabi_memcpy ; 0x59e9a
;;;324    
;;;325            if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
        0x00819c04:    f105011c    ....    ADD      r1,r5,#0x1c
        0x00819c08:    4628        (F      MOV      r0,r5
        0x00819c0a:    f7fefdff    ....    BL       mbedtls_internal_sha1_process ; 0x81880c
        0x00819c0e:    2800        .(      CMP      r0,#0
        0x00819c10:    d116        ..      BNE      0x819c40 ; mbedtls_sha1_update_ret + 114
;;;326                return( ret );
;;;327    
;;;328            input += fill;
        0x00819c12:    4447        GD      ADD      r7,r7,r8
;;;329            ilen  -= fill;
        0x00819c14:    eba40408    ....    SUB      r4,r4,r8
;;;330            left = 0;
        0x00819c18:    2600        .&      MOVS     r6,#0
        0x00819c1a:    e007        ..      B        0x819c2c ; mbedtls_sha1_update_ret + 94
        0x00819c1c:    4639        9F      MOV      r1,r7
        0x00819c1e:    4628        (F      MOV      r0,r5
        0x00819c20:    f7fefdf4    ....    BL       mbedtls_internal_sha1_process ; 0x81880c
        0x00819c24:    2800        .(      CMP      r0,#0
        0x00819c26:    d10b        ..      BNE      0x819c40 ; mbedtls_sha1_update_ret + 114
        0x00819c28:    3c40        @<      SUBS     r4,r4,#0x40
        0x00819c2a:    3740        @7      ADDS     r7,r7,#0x40
;;;331        }
;;;332    
;;;333        while( ilen >= 64 )
        0x00819c2c:    2c40        @,      CMP      r4,#0x40
        0x00819c2e:    d2f5        ..      BCS      0x819c1c ; mbedtls_sha1_update_ret + 78
;;;334        {
;;;335            if( ( ret = mbedtls_internal_sha1_process( ctx, input ) ) != 0 )
;;;336                return( ret );
;;;337    
;;;338            input += 64;
;;;339            ilen  -= 64;
;;;340        }
;;;341    
;;;342        if( ilen > 0 )
        0x00819c30:    b12c        ,.      CBZ      r4,0x819c3e ; mbedtls_sha1_update_ret + 112
;;;343            memcpy( (void *) (ctx->buffer + left), input, ilen );
        0x00819c32:    19a8        ..      ADDS     r0,r5,r6
        0x00819c34:    4622        "F      MOV      r2,r4
        0x00819c36:    4639        9F      MOV      r1,r7
        0x00819c38:    301c        .0      ADDS     r0,r0,#0x1c
        0x00819c3a:    f440f12e    @...    BL       __aeabi_memcpy ; 0x59e9a
;;;344    
;;;345        return( 0 );
        0x00819c3e:    2000        .       MOVS     r0,#0
;;;346    }
        0x00819c40:    e8bd81f0    ....    POP      {r4-r8,pc}
    mbedtls_sha1_update
;;;347    
;;;348    #if !defined(MBEDTLS_DEPRECATED_REMOVED)
;;;349    void mbedtls_sha1_update( mbedtls_sha1_context *ctx,
;;;350                              const unsigned char *input,
;;;351                              size_t ilen )
;;;352    {
;;;353        mbedtls_sha1_update_ret( ctx, input, ilen );
        0x00819c44:    e7c3        ..      B        mbedtls_sha1_update_ret ; 0x819bce
    mbedtls_sha1_finish_ret
;;;354    }
;;;355    #endif
;;;356    
;;;357    /*
;;;358     * SHA-1 final digest
;;;359     */
;;;360    int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
;;;361                                 unsigned char output[20] )
;;;362    {
        0x00819c46:    b570        p.      PUSH     {r4-r6,lr}
        0x00819c48:    4604        .F      MOV      r4,r0
        0x00819c4a:    7800        .x      LDRB     r0,[r0,#0]
        0x00819c4c:    460d        .F      MOV      r5,r1
;;;363        int ret;
;;;364        uint32_t used;
;;;365        uint32_t high, low;
;;;366    
;;;367        SHA1_VALIDATE_RET( ctx != NULL );
;;;368        SHA1_VALIDATE_RET( (unsigned char *)output != NULL );
;;;369    
;;;370        /*
;;;371         * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
;;;372         */
;;;373        used = ctx->total[0] & 0x3F;
        0x00819c4e:    f000003f    ..?.    AND      r0,r0,#0x3f
;;;374    
;;;375        ctx->buffer[used++] = 0x80;
        0x00819c52:    1822        ".      ADDS     r2,r4,r0
        0x00819c54:    2180        .!      MOVS     r1,#0x80
        0x00819c56:    1c40        @.      ADDS     r0,r0,#1
        0x00819c58:    7711        .w      STRB     r1,[r2,#0x1c]
        0x00819c5a:    f104061c    ....    ADD      r6,r4,#0x1c
;;;376    
;;;377        if( used <= 56 )
        0x00819c5e:    2838        8(      CMP      r0,#0x38
        0x00819c60:    d806        ..      BHI      0x819c70 ; mbedtls_sha1_finish_ret + 42
;;;378        {
;;;379            /* Enough room for padding + length in current block */
;;;380            memset( ctx->buffer + used, 0, 56 - used );
        0x00819c62:    f1c00138    ..8.    RSB      r1,r0,#0x38
        0x00819c66:    4420         D      ADD      r0,r0,r4
        0x00819c68:    301c        .0      ADDS     r0,r0,#0x1c
        0x00819c6a:    f440f1d7    @...    BL       __aeabi_memclr ; 0x5a01c
        0x00819c6e:    e00f        ..      B        0x819c90 ; mbedtls_sha1_finish_ret + 74
;;;381        }
;;;382        else
;;;383        {
;;;384            /* We'll need an extra block */
;;;385            memset( ctx->buffer + used, 0, 64 - used );
        0x00819c70:    f1c00140    ..@.    RSB      r1,r0,#0x40
        0x00819c74:    4420         D      ADD      r0,r0,r4
        0x00819c76:    301c        .0      ADDS     r0,r0,#0x1c
        0x00819c78:    f440f1d0    @...    BL       __aeabi_memclr ; 0x5a01c
        0x00819c7c:    4631        1F      MOV      r1,r6
;;;386    
;;;387            if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
        0x00819c7e:    4620         F      MOV      r0,r4
        0x00819c80:    f7fefdc4    ....    BL       mbedtls_internal_sha1_process ; 0x81880c
        0x00819c84:    2800        .(      CMP      r0,#0
        0x00819c86:    d158        X.      BNE      0x819d3a ; mbedtls_sha1_finish_ret + 244
;;;388                return( ret );
;;;389    
;;;390            memset( ctx->buffer, 0, 56 );
        0x00819c88:    2138        8!      MOVS     r1,#0x38
        0x00819c8a:    4630        0F      MOV      r0,r6
        0x00819c8c:    f440f1e8    @...    BL       __aeabi_memclr4 ; 0x5a060
;;;391        }
;;;392    
;;;393        /*
;;;394         * Add message length
;;;395         */
;;;396        high = ( ctx->total[0] >> 29 )
        0x00819c90:    f8540b3c    T.<.    LDR      r0,[r4],#0x3c
        0x00819c94:    0f41        A.      LSRS     r1,r0,#29
        0x00819c96:    f8542c38    T.8,    LDR      r2,[r4,#-0x38]
        0x00819c9a:    00c0        ..      LSLS     r0,r0,#3
        0x00819c9c:    ea4101c2    A...    ORR      r1,r1,r2,LSL #3
;;;397             | ( ctx->total[1] <<  3 );
;;;398        low  = ( ctx->total[0] <<  3 );
;;;399    
;;;400        PUT_UINT32_BE( high, ctx->buffer, 56 );
        0x00819ca0:    0e0a        ..      LSRS     r2,r1,#24
        0x00819ca2:    7622        "v      STRB     r2,[r4,#0x18]
        0x00819ca4:    0c0a        ..      LSRS     r2,r1,#16
        0x00819ca6:    7662        bv      STRB     r2,[r4,#0x19]
        0x00819ca8:    0a0a        ..      LSRS     r2,r1,#8
        0x00819caa:    76a2        .v      STRB     r2,[r4,#0x1a]
        0x00819cac:    76e1        .v      STRB     r1,[r4,#0x1b]
;;;401        PUT_UINT32_BE( low,  ctx->buffer, 60 );
        0x00819cae:    0e01        ..      LSRS     r1,r0,#24
        0x00819cb0:    7721        !w      STRB     r1,[r4,#0x1c]
        0x00819cb2:    0c01        ..      LSRS     r1,r0,#16
        0x00819cb4:    7761        aw      STRB     r1,[r4,#0x1d]
        0x00819cb6:    0a01        ..      LSRS     r1,r0,#8
        0x00819cb8:    77a1        .w      STRB     r1,[r4,#0x1e]
        0x00819cba:    77e0        .w      STRB     r0,[r4,#0x1f]
        0x00819cbc:    3c3c        <<      SUBS     r4,r4,#0x3c
        0x00819cbe:    4631        1F      MOV      r1,r6
;;;402    
;;;403        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
        0x00819cc0:    4620         F      MOV      r0,r4
        0x00819cc2:    f7fefda3    ....    BL       mbedtls_internal_sha1_process ; 0x81880c
        0x00819cc6:    2800        .(      CMP      r0,#0
        0x00819cc8:    d137        7.      BNE      0x819d3a ; mbedtls_sha1_finish_ret + 244
;;;404            return( ret );
;;;405    
;;;406        /*
;;;407         * Output final state
;;;408         */
;;;409        PUT_UINT32_BE( ctx->state[0], output,  0 );
        0x00819cca:    68a0        .h      LDR      r0,[r4,#8]
        0x00819ccc:    0e00        ..      LSRS     r0,r0,#24
        0x00819cce:    7028        (p      STRB     r0,[r5,#0]
        0x00819cd0:    68a0        .h      LDR      r0,[r4,#8]
        0x00819cd2:    0c00        ..      LSRS     r0,r0,#16
        0x00819cd4:    7068        hp      STRB     r0,[r5,#1]
        0x00819cd6:    8920         .      LDRH     r0,[r4,#8]
        0x00819cd8:    0a00        ..      LSRS     r0,r0,#8
        0x00819cda:    70a8        .p      STRB     r0,[r5,#2]
        0x00819cdc:    7a20         z      LDRB     r0,[r4,#8]
        0x00819cde:    70e8        .p      STRB     r0,[r5,#3]
;;;410        PUT_UINT32_BE( ctx->state[1], output,  4 );
        0x00819ce0:    68e0        .h      LDR      r0,[r4,#0xc]
        0x00819ce2:    0e00        ..      LSRS     r0,r0,#24
        0x00819ce4:    7128        (q      STRB     r0,[r5,#4]
        0x00819ce6:    68e0        .h      LDR      r0,[r4,#0xc]
        0x00819ce8:    0c00        ..      LSRS     r0,r0,#16
        0x00819cea:    7168        hq      STRB     r0,[r5,#5]
        0x00819cec:    89a0        ..      LDRH     r0,[r4,#0xc]
        0x00819cee:    0a00        ..      LSRS     r0,r0,#8
        0x00819cf0:    71a8        .q      STRB     r0,[r5,#6]
        0x00819cf2:    7b20         {      LDRB     r0,[r4,#0xc]
        0x00819cf4:    71e8        .q      STRB     r0,[r5,#7]
;;;411        PUT_UINT32_BE( ctx->state[2], output,  8 );
        0x00819cf6:    6920         i      LDR      r0,[r4,#0x10]
        0x00819cf8:    0e00        ..      LSRS     r0,r0,#24
        0x00819cfa:    7228        (r      STRB     r0,[r5,#8]
        0x00819cfc:    6920         i      LDR      r0,[r4,#0x10]
        0x00819cfe:    0c00        ..      LSRS     r0,r0,#16
        0x00819d00:    7268        hr      STRB     r0,[r5,#9]
        0x00819d02:    8a20         .      LDRH     r0,[r4,#0x10]
        0x00819d04:    0a00        ..      LSRS     r0,r0,#8
        0x00819d06:    72a8        .r      STRB     r0,[r5,#0xa]
        0x00819d08:    7c20         |      LDRB     r0,[r4,#0x10]
        0x00819d0a:    72e8        .r      STRB     r0,[r5,#0xb]
;;;412        PUT_UINT32_BE( ctx->state[3], output, 12 );
        0x00819d0c:    6960        `i      LDR      r0,[r4,#0x14]
        0x00819d0e:    0e00        ..      LSRS     r0,r0,#24
        0x00819d10:    7328        (s      STRB     r0,[r5,#0xc]
        0x00819d12:    6960        `i      LDR      r0,[r4,#0x14]
        0x00819d14:    0c00        ..      LSRS     r0,r0,#16
        0x00819d16:    7368        hs      STRB     r0,[r5,#0xd]
        0x00819d18:    8aa0        ..      LDRH     r0,[r4,#0x14]
        0x00819d1a:    0a00        ..      LSRS     r0,r0,#8
        0x00819d1c:    73a8        .s      STRB     r0,[r5,#0xe]
        0x00819d1e:    7d20         }      LDRB     r0,[r4,#0x14]
        0x00819d20:    73e8        .s      STRB     r0,[r5,#0xf]
;;;413        PUT_UINT32_BE( ctx->state[4], output, 16 );
        0x00819d22:    69a0        .i      LDR      r0,[r4,#0x18]
        0x00819d24:    0e00        ..      LSRS     r0,r0,#24
        0x00819d26:    7428        (t      STRB     r0,[r5,#0x10]
        0x00819d28:    69a0        .i      LDR      r0,[r4,#0x18]
        0x00819d2a:    0c00        ..      LSRS     r0,r0,#16
        0x00819d2c:    7468        ht      STRB     r0,[r5,#0x11]
        0x00819d2e:    8b20         .      LDRH     r0,[r4,#0x18]
        0x00819d30:    0a00        ..      LSRS     r0,r0,#8
        0x00819d32:    74a8        .t      STRB     r0,[r5,#0x12]
        0x00819d34:    7e20         ~      LDRB     r0,[r4,#0x18]
        0x00819d36:    74e8        .t      STRB     r0,[r5,#0x13]
;;;414    
;;;415        return( 0 );
        0x00819d38:    2000        .       MOVS     r0,#0
;;;416    }
        0x00819d3a:    bd70        p.      POP      {r4-r6,pc}
    mbedtls_sha1_finish
;;;417    
;;;418    #if !defined(MBEDTLS_DEPRECATED_REMOVED)
;;;419    void mbedtls_sha1_finish( mbedtls_sha1_context *ctx,
;;;420                              unsigned char output[20] )
;;;421    {
;;;422        mbedtls_sha1_finish_ret( ctx, output );
        0x00819d3c:    e783        ..      B        mbedtls_sha1_finish_ret ; 0x819c46
    mbedtls_sha1_ret
;;;423    }
;;;424    #endif
;;;425    
;;;426    #endif /* !MBEDTLS_SHA1_ALT */
;;;427    
;;;428    /*
;;;429     * output = SHA-1( input buffer )
;;;430     */
;;;431    int mbedtls_sha1_ret( const unsigned char *input,
;;;432                          size_t ilen,
;;;433                          unsigned char output[20] )
;;;434    {
        0x00819d3e:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00819d40:    b097        ..      SUB      sp,sp,#0x5c
        0x00819d42:    4607        .F      MOV      r7,r0
        0x00819d44:    4615        .F      MOV      r5,r2
        0x00819d46:    460e        .F      MOV      r6,r1
;;;435        int ret;
;;;436        mbedtls_sha1_context ctx;
;;;437    
;;;438        SHA1_VALIDATE_RET( ilen == 0 || input != NULL );
;;;439        SHA1_VALIDATE_RET( (unsigned char *)output != NULL );
;;;440    
;;;441        mbedtls_sha1_init( &ctx );
        0x00819d48:    4668        hF      MOV      r0,sp
        0x00819d4a:    f7fefd41    ..A.    BL       mbedtls_sha1_init ; 0x8187d0
;;;442    
;;;443        if( ( ret = mbedtls_sha1_starts_ret( &ctx ) ) != 0 )
        0x00819d4e:    4668        hF      MOV      r0,sp
        0x00819d50:    f7fefd4a    ..J.    BL       mbedtls_sha1_starts_ret ; 0x8187e8
        0x00819d54:    0004        ..      MOVS     r4,r0
        0x00819d56:    d10b        ..      BNE      0x819d70 ; mbedtls_sha1_ret + 50
;;;444            goto exit;
;;;445    
;;;446        if( ( ret = mbedtls_sha1_update_ret( &ctx, input, ilen ) ) != 0 )
        0x00819d58:    4632        2F      MOV      r2,r6
        0x00819d5a:    4639        9F      MOV      r1,r7
        0x00819d5c:    4668        hF      MOV      r0,sp
        0x00819d5e:    f7ffff36    ..6.    BL       mbedtls_sha1_update_ret ; 0x819bce
        0x00819d62:    0004        ..      MOVS     r4,r0
        0x00819d64:    d104        ..      BNE      0x819d70 ; mbedtls_sha1_ret + 50
;;;447            goto exit;
;;;448    
;;;449        if( ( ret = mbedtls_sha1_finish_ret( &ctx, output ) ) != 0 )
        0x00819d66:    4629        )F      MOV      r1,r5
        0x00819d68:    4668        hF      MOV      r0,sp
        0x00819d6a:    f7ffff6c    ..l.    BL       mbedtls_sha1_finish_ret ; 0x819c46
        0x00819d6e:    4604        .F      MOV      r4,r0
;;;450            goto exit;
;;;451    
;;;452    exit:
;;;453        mbedtls_sha1_free( &ctx );
        0x00819d70:    4668        hF      MOV      r0,sp
        0x00819d72:    f7fefd30    ..0.    BL       mbedtls_sha1_free ; 0x8187d6
        0x00819d76:    b017        ..      ADD      sp,sp,#0x5c
;;;454    
;;;455        return( ret );
        0x00819d78:    4620         F      MOV      r0,r4
;;;456    }
        0x00819d7a:    bdf0        ..      POP      {r4-r7,pc}
    mbedtls_sha1
;;;457    
;;;458    #if !defined(MBEDTLS_DEPRECATED_REMOVED)
;;;459    void mbedtls_sha1( const unsigned char *input,
;;;460                       size_t ilen,
;;;461                       unsigned char output[20] )
;;;462    {
;;;463        mbedtls_sha1_ret( input, ilen, output );
        0x00819d7c:    e7df        ..      B        mbedtls_sha1_ret ; 0x819d3e
        0x00819d7e:    0000        ..      MOVS     r0,r0
    .text
    mbedtls_sha256_init
;;; sample\tuya_ble_sdk\extern_components\mbedtls\sha256.c
;;;75         memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
        0x00819d80:    216c        l!      MOVS     r1,#0x6c
        0x00819d82:    f440b16d    @.m.    B        __aeabi_memclr4 ; 0x5a060
    mbedtls_sha256_free
;;;76     }
;;;77     
;;;78     void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
;;;79     {
        0x00819d86:    2800        .(      CMP      r0,#0
        0x00819d88:    d002        ..      BEQ      0x819d90 ; mbedtls_sha256_free + 10
;;;80         if( ctx == NULL )
;;;81             return;
;;;82     
;;;83         //mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
;;;84         memset( ctx, 0 ,sizeof( mbedtls_sha256_context ) );
        0x00819d8a:    216c        l!      MOVS     r1,#0x6c
        0x00819d8c:    f440b168    @.h.    B        __aeabi_memclr4 ; 0x5a060
;;;85     }
        0x00819d90:    4770        pG      BX       lr
    mbedtls_sha256_clone
;;;86     
;;;87     void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
;;;88                                const mbedtls_sha256_context *src )
;;;89     {
;;;90         SHA256_VALIDATE( dst != NULL );
;;;91         SHA256_VALIDATE( src != NULL );
;;;92     
;;;93         *dst = *src;
        0x00819d92:    226c        l"      MOVS     r2,#0x6c
        0x00819d94:    f440b108    @...    B        __aeabi_memcpy4 ; 0x59fa8
    mbedtls_sha256_starts_ret
;;;94     }
;;;95     
;;;96     /*
;;;97      * SHA-256 context setup
;;;98      */
;;;99     int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
;;;100    {
;;;101        SHA256_VALIDATE_RET( ctx != NULL );
;;;102        SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
;;;103    
;;;104        ctx->total[0] = 0;
        0x00819d98:    2200        ."      MOVS     r2,#0
        0x00819d9a:    6002        .`      STR      r2,[r0,#0]
;;; sample\tuya_ble_sdk\extern_components\mbedtls\sha256.c (100)
        0x00819d9c:    6042        B`      STR      r2,[r0,#4]
        0x00819d9e:    b191        ..      CBZ      r1,0x819dc6 ; mbedtls_sha256_starts_ret + 46
;;;101        SHA256_VALIDATE_RET( ctx != NULL );
;;;102        SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
;;;103    
;;;104        ctx->total[0] = 0;
;;;105        ctx->total[1] = 0;
;;;106    
;;;107        if( is224 == 0 )
;;;108        {
;;;109            /* SHA-256 */
;;;110            ctx->state[0] = 0x6A09E667;
;;;111            ctx->state[1] = 0xBB67AE85;
;;;112            ctx->state[2] = 0x3C6EF372;
;;;113            ctx->state[3] = 0xA54FF53A;
;;;114            ctx->state[4] = 0x510E527F;
;;;115            ctx->state[5] = 0x9B05688C;
;;;116            ctx->state[6] = 0x1F83D9AB;
;;;117            ctx->state[7] = 0x5BE0CD19;
;;;118        }
;;;119        else
;;;120        {
;;;121            /* SHA-224 */
;;;122            ctx->state[0] = 0xC1059ED8;
        0x00819da0:    4afe        .J      LDR      r2,[pc,#1016] ; [0x81a19c] = 0xc1059ed8
;;;123            ctx->state[1] = 0x367CD507;
        0x00819da2:    6082        .`      STR      r2,[r0,#8]
        0x00819da4:    4afe        .J      LDR      r2,[pc,#1016] ; [0x81a1a0] = 0x367cd507
;;;124            ctx->state[2] = 0x3070DD17;
        0x00819da6:    60c2        .`      STR      r2,[r0,#0xc]
        0x00819da8:    4afe        .J      LDR      r2,[pc,#1016] ; [0x81a1a4] = 0x3070dd17
;;;125            ctx->state[3] = 0xF70E5939;
        0x00819daa:    6102        .a      STR      r2,[r0,#0x10]
        0x00819dac:    4afe        .J      LDR      r2,[pc,#1016] ; [0x81a1a8] = 0xf70e5939
;;;126            ctx->state[4] = 0xFFC00B31;
        0x00819dae:    6142        Ba      STR      r2,[r0,#0x14]
        0x00819db0:    4afe        .J      LDR      r2,[pc,#1016] ; [0x81a1ac] = 0xffc00b31
;;;127            ctx->state[5] = 0x68581511;
        0x00819db2:    6182        .a      STR      r2,[r0,#0x18]
        0x00819db4:    4afe        .J      LDR      r2,[pc,#1016] ; [0x81a1b0] = 0x68581511
;;;128            ctx->state[6] = 0x64F98FA7;
        0x00819db6:    61c2        .a      STR      r2,[r0,#0x1c]
        0x00819db8:    4afe        .J      LDR      r2,[pc,#1016] ; [0x81a1b4] = 0x64f98fa7
;;;129            ctx->state[7] = 0xBEFA4FA4;
        0x00819dba:    6202        .b      STR      r2,[r0,#0x20]
        0x00819dbc:    4afe        .J      LDR      r2,[pc,#1016] ; [0x81a1b8] = 0xbefa4fa4
;;;130        }
;;;131    
;;;132        ctx->is224 = is224;
;;;133    
;;;134        return( 0 );
        0x00819dbe:    6242        Bb      STR      r2,[r0,#0x24]
        0x00819dc0:    6681        .f      STR      r1,[r0,#0x68]
        0x00819dc2:    2000        .       MOVS     r0,#0
;;;135    }
        0x00819dc4:    4770        pG      BX       lr
        0x00819dc6:    4afd        .J      LDR      r2,[pc,#1012] ; [0x81a1bc] = 0x6a09e667
        0x00819dc8:    6082        .`      STR      r2,[r0,#8]
        0x00819dca:    4afd        .J      LDR      r2,[pc,#1012] ; [0x81a1c0] = 0xbb67ae85
        0x00819dcc:    60c2        .`      STR      r2,[r0,#0xc]
        0x00819dce:    4afd        .J      LDR      r2,[pc,#1012] ; [0x81a1c4] = 0x3c6ef372
        0x00819dd0:    6102        .a      STR      r2,[r0,#0x10]
        0x00819dd2:    4afd        .J      LDR      r2,[pc,#1012] ; [0x81a1c8] = 0xa54ff53a
        0x00819dd4:    6142        Ba      STR      r2,[r0,#0x14]
        0x00819dd6:    4afd        .J      LDR      r2,[pc,#1012] ; [0x81a1cc] = 0x510e527f
        0x00819dd8:    6182        .a      STR      r2,[r0,#0x18]
        0x00819dda:    4afd        .J      LDR      r2,[pc,#1012] ; [0x81a1d0] = 0x9b05688c
        0x00819ddc:    61c2        .a      STR      r2,[r0,#0x1c]
        0x00819dde:    4afd        .J      LDR      r2,[pc,#1012] ; [0x81a1d4] = 0x1f83d9ab
        0x00819de0:    6202        .b      STR      r2,[r0,#0x20]
        0x00819de2:    4afd        .J      LDR      r2,[pc,#1012] ; [0x81a1d8] = 0x5be0cd19
        0x00819de4:    e7eb        ..      B        0x819dbe ; mbedtls_sha256_starts_ret + 38
    mbedtls_sha256_starts
;;;136    
;;;137    #if !defined(MBEDTLS_DEPRECATED_REMOVED)
;;;138    void mbedtls_sha256_starts( mbedtls_sha256_context *ctx,
;;;139                                int is224 )
;;;140    {
;;;141        mbedtls_sha256_starts_ret( ctx, is224 );
        0x00819de6:    e7d7        ..      B        mbedtls_sha256_starts_ret ; 0x819d98
    mbedtls_internal_sha256_process
;;;142    }
;;;143    #endif
;;;144    
;;;145    #if !defined(MBEDTLS_SHA256_PROCESS_ALT)
;;;146    static const uint32_t K[] =
;;;147    {
;;;148        0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
;;;149        0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
;;;150        0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
;;;151        0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
;;;152        0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
;;;153        0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
;;;154        0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
;;;155        0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
;;;156        0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
;;;157        0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
;;;158        0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
;;;159        0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
;;;160        0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
;;;161        0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
;;;162        0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
;;;163        0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2,
;;;164    };
;;;165    
;;;166    #define  SHR(x,n) ((x & 0xFFFFFFFF) >> n)
;;;167    #define ROTR(x,n) (SHR(x,n) | (x << (32 - n)))
;;;168    
;;;169    #define S0(x) (ROTR(x, 7) ^ ROTR(x,18) ^  SHR(x, 3))
;;;170    #define S1(x) (ROTR(x,17) ^ ROTR(x,19) ^  SHR(x,10))
;;;171    
;;;172    #define S2(x) (ROTR(x, 2) ^ ROTR(x,13) ^ ROTR(x,22))
;;;173    #define S3(x) (ROTR(x, 6) ^ ROTR(x,11) ^ ROTR(x,25))
;;;174    
;;;175    #define F0(x,y,z) ((x & y) | (z & (x | y)))
;;;176    #define F1(x,y,z) (z ^ (x & (y ^ z)))
;;;177    
;;;178    #define R(t)                                    \
;;;179    (                                               \
;;;180        W[t] = S1(W[t -  2]) + W[t -  7] +          \
;;;181               S0(W[t - 15]) + W[t - 16]            \
;;;182    )
;;;183    
;;;184    #define P(a,b,c,d,e,f,g,h,x,K)                  \
;;;185    {                                               \
;;;186        temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
;;;187        temp2 = S2(a) + F0(a,b,c);                  \
;;;188        d += temp1; h = temp1 + temp2;              \
;;;189    }
;;;190    
;;;191    int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
;;;192                                    const unsigned char data[64] )
;;;193    {
        0x00819de8:    e92d4ff0    -..O    PUSH     {r4-r11,lr}
        0x00819dec:    4686        .F      MOV      lr,r0
        0x00819dee:    b0c8        ..      SUB      sp,sp,#0x120
;;;194        uint32_t temp1, temp2, W[64];
;;;195        uint32_t A[8];
;;;196        unsigned int i;
;;;197    
;;;198        SHA256_VALIDATE_RET( ctx != NULL );
;;;199        SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );
;;;200    
;;;201        for( i = 0; i < 8; i++ )
        0x00819df0:    2000        .       MOVS     r0,#0
        0x00819df2:    eb0e0280    ....    ADD      r2,lr,r0,LSL #2
        0x00819df6:    6893        .h      LDR      r3,[r2,#8]
        0x00819df8:    f84d3020    M. 0    STR      r3,[sp,r0,LSL #2]
        0x00819dfc:    1c40        @.      ADDS     r0,r0,#1
        0x00819dfe:    2808        .(      CMP      r0,#8
        0x00819e00:    d3f7        ..      BCC      0x819df2 ; mbedtls_internal_sha256_process + 10
;;;202            A[i] = ctx->state[i];
;;;203    
;;;204    #if defined(MBEDTLS_SHA256_SMALLER)
;;;205        for( i = 0; i < 64; i++ )
;;;206        {
;;;207            if( i < 16 )
;;;208                GET_UINT32_BE( W[i], data, 4 * i );
;;;209            else
;;;210                R( i );
;;;211    
;;;212            P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
;;;213    
;;;214            temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
;;;215            A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
;;;216        }
;;;217    #else /* MBEDTLS_SHA256_SMALLER */
;;;218        for( i = 0; i < 16; i++ )
        0x00819e02:    2000        .       MOVS     r0,#0
        0x00819e04:    ac08        ..      ADD      r4,sp,#0x20
        0x00819e06:    eb010280    ....    ADD      r2,r1,r0,LSL #2
        0x00819e0a:    6813        .h      LDR      r3,[r2,#0]
        0x00819e0c:    78d2        .x      LDRB     r2,[r2,#3]
        0x00819e0e:    ba1b        ..      REV      r3,r3
        0x00819e10:    f02303ff    #...    BIC      r3,r3,#0xff
        0x00819e14:    4313        .C      ORRS     r3,r3,r2
        0x00819e16:    f8443020    D. 0    STR      r3,[r4,r0,LSL #2]
        0x00819e1a:    1c40        @.      ADDS     r0,r0,#1
        0x00819e1c:    2810        .(      CMP      r0,#0x10
        0x00819e1e:    d3f2        ..      BCC      0x819e06 ; mbedtls_internal_sha256_process + 30
        0x00819e20:    4dee        .M      LDR      r5,[pc,#952] ; [0x81a1dc] = 0x81c368
;;;219            GET_UINT32_BE( W[i], data, 4 * i );
;;;220    
;;;221        for( i = 0; i < 16; i += 8 )
        0x00819e22:    2000        .       MOVS     r0,#0
;;;222        {
;;;223            P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
        0x00819e24:    9904        ..      LDR      r1,[sp,#0x10]
        0x00819e26:    9a04        ..      LDR      r2,[sp,#0x10]
        0x00819e28:    ea4f11b1    O...    ROR      r1,r1,#6
        0x00819e2c:    ea8121f2    ...!    EOR      r1,r1,r2,ROR #11
        0x00819e30:    ea816272    ..rb    EOR      r2,r1,r2,ROR #25
        0x00819e34:    e9dd1305    ....    LDRD     r1,r3,[sp,#0x14]
        0x00819e38:    4059        Y@      EORS     r1,r1,r3
        0x00819e3a:    9b04        ..      LDR      r3,[sp,#0x10]
        0x00819e3c:    4019        .@      ANDS     r1,r1,r3
        0x00819e3e:    9b06        ..      LDR      r3,[sp,#0x18]
        0x00819e40:    4059        Y@      EORS     r1,r1,r3
        0x00819e42:    440a        .D      ADD      r2,r2,r1
        0x00819e44:    f8553020    U. 0    LDR      r3,[r5,r0,LSL #2]
        0x00819e48:    9907        ..      LDR      r1,[sp,#0x1c]
        0x00819e4a:    4419        .D      ADD      r1,r1,r3
        0x00819e4c:    4411        .D      ADD      r1,r1,r2
        0x00819e4e:    f8542020    T.      LDR      r2,[r4,r0,LSL #2]
        0x00819e52:    4411        .D      ADD      r1,r1,r2
        0x00819e54:    e9dd2300    ...#    LDRD     r2,r3,[sp,#0]
        0x00819e58:    401a        .@      ANDS     r2,r2,r3
        0x00819e5a:    e9dd3600    ...6    LDRD     r3,r6,[sp,#0]
        0x00819e5e:    4333        3C      ORRS     r3,r3,r6
        0x00819e60:    9e02        ..      LDR      r6,[sp,#8]
        0x00819e62:    9f00        ..      LDR      r7,[sp,#0]
        0x00819e64:    4033        3@      ANDS     r3,r3,r6
        0x00819e66:    431a        .C      ORRS     r2,r2,r3
        0x00819e68:    9b00        ..      LDR      r3,[sp,#0]
        0x00819e6a:    9e00        ..      LDR      r6,[sp,#0]
        0x00819e6c:    ea4f03b3    O...    ROR      r3,r3,#2
        0x00819e70:    ea833376    ..v3    EOR      r3,r3,r6,ROR #13
        0x00819e74:    ea8353b6    ...S    EOR      r3,r3,r6,ROR #22
        0x00819e78:    441a        .D      ADD      r2,r2,r3
        0x00819e7a:    9b03        ..      LDR      r3,[sp,#0xc]
        0x00819e7c:    f8ddc000    ....    LDR      r12,[sp,#0]
        0x00819e80:    440b        .D      ADD      r3,r3,r1
        0x00819e82:    4411        .D      ADD      r1,r1,r2
;;;224            P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
        0x00819e84:    9107        ..      STR      r1,[sp,#0x1c]
        0x00819e86:    ea4f11b3    O...    ROR      r1,r3,#6
        0x00819e8a:    ea8121f3    ...!    EOR      r1,r1,r3,ROR #11
        0x00819e8e:    9303        ..      STR      r3,[sp,#0xc]
        0x00819e90:    ea816273    ..sb    EOR      r2,r1,r3,ROR #25
        0x00819e94:    e9dd1304    ....    LDRD     r1,r3,[sp,#0x10]
        0x00819e98:    4059        Y@      EORS     r1,r1,r3
        0x00819e9a:    9b03        ..      LDR      r3,[sp,#0xc]
        0x00819e9c:    4019        .@      ANDS     r1,r1,r3
        0x00819e9e:    9b05        ..      LDR      r3,[sp,#0x14]
        0x00819ea0:    4059        Y@      EORS     r1,r1,r3
        0x00819ea2:    4411        .D      ADD      r1,r1,r2
        0x00819ea4:    eb050280    ....    ADD      r2,r5,r0,LSL #2
        0x00819ea8:    9b06        ..      LDR      r3,[sp,#0x18]
        0x00819eaa:    6856        Vh      LDR      r6,[r2,#4]
        0x00819eac:    4433        3D      ADD      r3,r3,r6
        0x00819eae:    440b        .D      ADD      r3,r3,r1
        0x00819eb0:    eb040180    ....    ADD      r1,r4,r0,LSL #2
        0x00819eb4:    684e        Nh      LDR      r6,[r1,#4]
        0x00819eb6:    4433        3D      ADD      r3,r3,r6
        0x00819eb8:    9e07        ..      LDR      r6,[sp,#0x1c]
        0x00819eba:    403e        >@      ANDS     r6,r6,r7
        0x00819ebc:    9f07        ..      LDR      r7,[sp,#0x1c]
        0x00819ebe:    ea47070c    G...    ORR      r7,r7,r12
        0x00819ec2:    f8ddc004    ....    LDR      r12,[sp,#4]
        0x00819ec6:    ea07070c    ....    AND      r7,r7,r12
        0x00819eca:    433e        >C      ORRS     r6,r6,r7
        0x00819ecc:    9f07        ..      LDR      r7,[sp,#0x1c]
        0x00819ece:    f8ddc01c    ....    LDR      r12,[sp,#0x1c]
        0x00819ed2:    ea4f07b7    O...    ROR      r7,r7,#2
        0x00819ed6:    ea87377c    ..|7    EOR      r7,r7,r12,ROR #13
        0x00819eda:    ea8757bc    ...W    EOR      r7,r7,r12,ROR #22
        0x00819ede:    443e        >D      ADD      r6,r6,r7
        0x00819ee0:    9f02        ..      LDR      r7,[sp,#8]
        0x00819ee2:    441f        .D      ADD      r7,r7,r3
        0x00819ee4:    4433        3D      ADD      r3,r3,r6
;;;225            P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
        0x00819ee6:    9306        ..      STR      r3,[sp,#0x18]
        0x00819ee8:    9702        ..      STR      r7,[sp,#8]
        0x00819eea:    ea4f13b7    O...    ROR      r3,r7,#6
        0x00819eee:    ea8323f7    ...#    EOR      r3,r3,r7,ROR #11
        0x00819ef2:    ea836677    ..wf    EOR      r6,r3,r7,ROR #25
        0x00819ef6:    e9dd3703    ...7    LDRD     r3,r7,[sp,#0xc]
        0x00819efa:    407b        {@      EORS     r3,r3,r7
        0x00819efc:    9f02        ..      LDR      r7,[sp,#8]
        0x00819efe:    403b        ;@      ANDS     r3,r3,r7
        0x00819f00:    9f04        ..      LDR      r7,[sp,#0x10]
        0x00819f02:    407b        {@      EORS     r3,r3,r7
        0x00819f04:    4433        3D      ADD      r3,r3,r6
        0x00819f06:    9e05        ..      LDR      r6,[sp,#0x14]
        0x00819f08:    6897        .h      LDR      r7,[r2,#8]
        0x00819f0a:    443e        >D      ADD      r6,r6,r7
        0x00819f0c:    4433        3D      ADD      r3,r3,r6
        0x00819f0e:    688e        .h      LDR      r6,[r1,#8]
        0x00819f10:    9f06        ..      LDR      r7,[sp,#0x18]
        0x00819f12:    4433        3D      ADD      r3,r3,r6
        0x00819f14:    9e06        ..      LDR      r6,[sp,#0x18]
        0x00819f16:    ea47070c    G...    ORR      r7,r7,r12
        0x00819f1a:    ea06060c    ....    AND      r6,r6,r12
        0x00819f1e:    f8ddc000    ....    LDR      r12,[sp,#0]
        0x00819f22:    ea07070c    ....    AND      r7,r7,r12
        0x00819f26:    433e        >C      ORRS     r6,r6,r7
        0x00819f28:    9f06        ..      LDR      r7,[sp,#0x18]
        0x00819f2a:    f8ddc018    ....    LDR      r12,[sp,#0x18]
        0x00819f2e:    ea4f07b7    O...    ROR      r7,r7,#2
        0x00819f32:    ea87377c    ..|7    EOR      r7,r7,r12,ROR #13
        0x00819f36:    ea8757bc    ...W    EOR      r7,r7,r12,ROR #22
        0x00819f3a:    443e        >D      ADD      r6,r6,r7
        0x00819f3c:    9f01        ..      LDR      r7,[sp,#4]
        0x00819f3e:    441f        .D      ADD      r7,r7,r3
        0x00819f40:    4433        3D      ADD      r3,r3,r6
;;;226            P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
        0x00819f42:    9305        ..      STR      r3,[sp,#0x14]
        0x00819f44:    ea4f13b7    O...    ROR      r3,r7,#6
        0x00819f48:    ea8323f7    ...#    EOR      r3,r3,r7,ROR #11
        0x00819f4c:    9701        ..      STR      r7,[sp,#4]
        0x00819f4e:    ea836677    ..wf    EOR      r6,r3,r7,ROR #25
        0x00819f52:    e9dd3702    ...7    LDRD     r3,r7,[sp,#8]
        0x00819f56:    407b        {@      EORS     r3,r3,r7
        0x00819f58:    9f01        ..      LDR      r7,[sp,#4]
        0x00819f5a:    403b        ;@      ANDS     r3,r3,r7
        0x00819f5c:    9f03        ..      LDR      r7,[sp,#0xc]
        0x00819f5e:    407b        {@      EORS     r3,r3,r7
        0x00819f60:    4433        3D      ADD      r3,r3,r6
        0x00819f62:    9e04        ..      LDR      r6,[sp,#0x10]
        0x00819f64:    68d7        .h      LDR      r7,[r2,#0xc]
        0x00819f66:    443e        >D      ADD      r6,r6,r7
        0x00819f68:    4433        3D      ADD      r3,r3,r6
        0x00819f6a:    68ce        .h      LDR      r6,[r1,#0xc]
        0x00819f6c:    9f05        ..      LDR      r7,[sp,#0x14]
        0x00819f6e:    4433        3D      ADD      r3,r3,r6
        0x00819f70:    9e05        ..      LDR      r6,[sp,#0x14]
        0x00819f72:    ea47070c    G...    ORR      r7,r7,r12
        0x00819f76:    ea06060c    ....    AND      r6,r6,r12
        0x00819f7a:    f8ddc01c    ....    LDR      r12,[sp,#0x1c]
        0x00819f7e:    ea07070c    ....    AND      r7,r7,r12
        0x00819f82:    433e        >C      ORRS     r6,r6,r7
        0x00819f84:    9f05        ..      LDR      r7,[sp,#0x14]
        0x00819f86:    f8ddc014    ....    LDR      r12,[sp,#0x14]
        0x00819f8a:    ea4f07b7    O...    ROR      r7,r7,#2
        0x00819f8e:    ea87377c    ..|7    EOR      r7,r7,r12,ROR #13
        0x00819f92:    ea8757bc    ...W    EOR      r7,r7,r12,ROR #22
        0x00819f96:    443e        >D      ADD      r6,r6,r7
        0x00819f98:    9f00        ..      LDR      r7,[sp,#0]
        0x00819f9a:    441f        .D      ADD      r7,r7,r3
        0x00819f9c:    4433        3D      ADD      r3,r3,r6
;;;227            P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
        0x00819f9e:    9304        ..      STR      r3,[sp,#0x10]
        0x00819fa0:    ea4f13b7    O...    ROR      r3,r7,#6
        0x00819fa4:    ea8323f7    ...#    EOR      r3,r3,r7,ROR #11
        0x00819fa8:    9700        ..      STR      r7,[sp,#0]
        0x00819faa:    ea836677    ..wf    EOR      r6,r3,r7,ROR #25
        0x00819fae:    e9dd3701    ...7    LDRD     r3,r7,[sp,#4]
        0x00819fb2:    407b        {@      EORS     r3,r3,r7
        0x00819fb4:    9f00        ..      LDR      r7,[sp,#0]
        0x00819fb6:    403b        ;@      ANDS     r3,r3,r7
        0x00819fb8:    9f02        ..      LDR      r7,[sp,#8]
        0x00819fba:    407b        {@      EORS     r3,r3,r7
        0x00819fbc:    4433        3D      ADD      r3,r3,r6
        0x00819fbe:    9e03        ..      LDR      r6,[sp,#0xc]
        0x00819fc0:    6917        .i      LDR      r7,[r2,#0x10]
        0x00819fc2:    443e        >D      ADD      r6,r6,r7
        0x00819fc4:    4433        3D      ADD      r3,r3,r6
        0x00819fc6:    690e        .i      LDR      r6,[r1,#0x10]
        0x00819fc8:    9f04        ..      LDR      r7,[sp,#0x10]
        0x00819fca:    4433        3D      ADD      r3,r3,r6
        0x00819fcc:    9e04        ..      LDR      r6,[sp,#0x10]
        0x00819fce:    ea47070c    G...    ORR      r7,r7,r12
        0x00819fd2:    ea06060c    ....    AND      r6,r6,r12
        0x00819fd6:    f8ddc018    ....    LDR      r12,[sp,#0x18]
        0x00819fda:    ea07070c    ....    AND      r7,r7,r12
        0x00819fde:    433e        >C      ORRS     r6,r6,r7
        0x00819fe0:    9f04        ..      LDR      r7,[sp,#0x10]
        0x00819fe2:    f8ddc010    ....    LDR      r12,[sp,#0x10]
        0x00819fe6:    ea4f07b7    O...    ROR      r7,r7,#2
        0x00819fea:    ea87377c    ..|7    EOR      r7,r7,r12,ROR #13
        0x00819fee:    ea8757bc    ...W    EOR      r7,r7,r12,ROR #22
        0x00819ff2:    443e        >D      ADD      r6,r6,r7
        0x00819ff4:    9f07        ..      LDR      r7,[sp,#0x1c]
        0x00819ff6:    441f        .D      ADD      r7,r7,r3
        0x00819ff8:    4433        3D      ADD      r3,r3,r6
;;;228            P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        0x00819ffa:    9303        ..      STR      r3,[sp,#0xc]
        0x00819ffc:    ea4f13b7    O...    ROR      r3,r7,#6
        0x0081a000:    ea8323f7    ...#    EOR      r3,r3,r7,ROR #11
        0x0081a004:    9707        ..      STR      r7,[sp,#0x1c]
        0x0081a006:    ea836677    ..wf    EOR      r6,r3,r7,ROR #25
        0x0081a00a:    e9dd3700    ...7    LDRD     r3,r7,[sp,#0]
        0x0081a00e:    407b        {@      EORS     r3,r3,r7
        0x0081a010:    9f07        ..      LDR      r7,[sp,#0x1c]
        0x0081a012:    403b        ;@      ANDS     r3,r3,r7
        0x0081a014:    9f01        ..      LDR      r7,[sp,#4]
        0x0081a016:    407b        {@      EORS     r3,r3,r7
        0x0081a018:    4433        3D      ADD      r3,r3,r6
        0x0081a01a:    9e02        ..      LDR      r6,[sp,#8]
        0x0081a01c:    6957        Wi      LDR      r7,[r2,#0x14]
        0x0081a01e:    443e        >D      ADD      r6,r6,r7
        0x0081a020:    4433        3D      ADD      r3,r3,r6
        0x0081a022:    694e        Ni      LDR      r6,[r1,#0x14]
        0x0081a024:    9f03        ..      LDR      r7,[sp,#0xc]
        0x0081a026:    4433        3D      ADD      r3,r3,r6
        0x0081a028:    9e03        ..      LDR      r6,[sp,#0xc]
        0x0081a02a:    ea47070c    G...    ORR      r7,r7,r12
        0x0081a02e:    ea06060c    ....    AND      r6,r6,r12
        0x0081a032:    f8ddc014    ....    LDR      r12,[sp,#0x14]
        0x0081a036:    ea07070c    ....    AND      r7,r7,r12
        0x0081a03a:    433e        >C      ORRS     r6,r6,r7
        0x0081a03c:    9f03        ..      LDR      r7,[sp,#0xc]
        0x0081a03e:    f8ddc00c    ....    LDR      r12,[sp,#0xc]
        0x0081a042:    ea4f07b7    O...    ROR      r7,r7,#2
        0x0081a046:    ea87377c    ..|7    EOR      r7,r7,r12,ROR #13
        0x0081a04a:    ea8757bc    ...W    EOR      r7,r7,r12,ROR #22
        0x0081a04e:    443e        >D      ADD      r6,r6,r7
        0x0081a050:    9f06        ..      LDR      r7,[sp,#0x18]
        0x0081a052:    441f        .D      ADD      r7,r7,r3
        0x0081a054:    4433        3D      ADD      r3,r3,r6
;;;229            P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        0x0081a056:    9302        ..      STR      r3,[sp,#8]
        0x0081a058:    ea4f13b7    O...    ROR      r3,r7,#6
        0x0081a05c:    ea8323f7    ...#    EOR      r3,r3,r7,ROR #11
        0x0081a060:    ea836677    ..wf    EOR      r6,r3,r7,ROR #25
        0x0081a064:    9706        ..      STR      r7,[sp,#0x18]
        0x0081a066:    9f00        ..      LDR      r7,[sp,#0]
        0x0081a068:    9b07        ..      LDR      r3,[sp,#0x1c]
        0x0081a06a:    407b        {@      EORS     r3,r3,r7
        0x0081a06c:    9f06        ..      LDR      r7,[sp,#0x18]
        0x0081a06e:    403b        ;@      ANDS     r3,r3,r7
        0x0081a070:    9f00        ..      LDR      r7,[sp,#0]
        0x0081a072:    407b        {@      EORS     r3,r3,r7
        0x0081a074:    4433        3D      ADD      r3,r3,r6
        0x0081a076:    9e01        ..      LDR      r6,[sp,#4]
        0x0081a078:    6997        .i      LDR      r7,[r2,#0x18]
        0x0081a07a:    443e        >D      ADD      r6,r6,r7
        0x0081a07c:    4433        3D      ADD      r3,r3,r6
        0x0081a07e:    698e        .i      LDR      r6,[r1,#0x18]
        0x0081a080:    9f02        ..      LDR      r7,[sp,#8]
        0x0081a082:    4433        3D      ADD      r3,r3,r6
        0x0081a084:    9e02        ..      LDR      r6,[sp,#8]
        0x0081a086:    ea47070c    G...    ORR      r7,r7,r12
        0x0081a08a:    ea06060c    ....    AND      r6,r6,r12
        0x0081a08e:    f8ddc010    ....    LDR      r12,[sp,#0x10]
        0x0081a092:    3008        .0      ADDS     r0,r0,#8
        0x0081a094:    ea07070c    ....    AND      r7,r7,r12
        0x0081a098:    433e        >C      ORRS     r6,r6,r7
        0x0081a09a:    9f02        ..      LDR      r7,[sp,#8]
        0x0081a09c:    f8ddc008    ....    LDR      r12,[sp,#8]
        0x0081a0a0:    ea4f07b7    O...    ROR      r7,r7,#2
        0x0081a0a4:    ea87377c    ..|7    EOR      r7,r7,r12,ROR #13
        0x0081a0a8:    ea8757bc    ...W    EOR      r7,r7,r12,ROR #22
        0x0081a0ac:    443e        >D      ADD      r6,r6,r7
        0x0081a0ae:    9f05        ..      LDR      r7,[sp,#0x14]
        0x0081a0b0:    441f        .D      ADD      r7,r7,r3
        0x0081a0b2:    4433        3D      ADD      r3,r3,r6
;;;230            P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
        0x0081a0b4:    9301        ..      STR      r3,[sp,#4]
        0x0081a0b6:    ea4f13b7    O...    ROR      r3,r7,#6
        0x0081a0ba:    ea8323f7    ...#    EOR      r3,r3,r7,ROR #11
        0x0081a0be:    9705        ..      STR      r7,[sp,#0x14]
        0x0081a0c0:    ea836677    ..wf    EOR      r6,r3,r7,ROR #25
        0x0081a0c4:    e9dd3706    ...7    LDRD     r3,r7,[sp,#0x18]
        0x0081a0c8:    407b        {@      EORS     r3,r3,r7
        0x0081a0ca:    9f05        ..      LDR      r7,[sp,#0x14]
        0x0081a0cc:    69d2        .i      LDR      r2,[r2,#0x1c]
        0x0081a0ce:    403b        ;@      ANDS     r3,r3,r7
        0x0081a0d0:    9f07        ..      LDR      r7,[sp,#0x1c]
        0x0081a0d2:    69c9        .i      LDR      r1,[r1,#0x1c]
        0x0081a0d4:    407b        {@      EORS     r3,r3,r7
        0x0081a0d6:    4433        3D      ADD      r3,r3,r6
        0x0081a0d8:    9e00        ..      LDR      r6,[sp,#0]
        0x0081a0da:    4432        2D      ADD      r2,r2,r6
        0x0081a0dc:    441a        .D      ADD      r2,r2,r3
        0x0081a0de:    4411        .D      ADD      r1,r1,r2
        0x0081a0e0:    9b01        ..      LDR      r3,[sp,#4]
        0x0081a0e2:    9a01        ..      LDR      r2,[sp,#4]
        0x0081a0e4:    9e03        ..      LDR      r6,[sp,#0xc]
        0x0081a0e6:    ea43030c    C...    ORR      r3,r3,r12
        0x0081a0ea:    ea02020c    ....    AND      r2,r2,r12
        0x0081a0ee:    4033        3@      ANDS     r3,r3,r6
        0x0081a0f0:    431a        .C      ORRS     r2,r2,r3
        0x0081a0f2:    9b01        ..      LDR      r3,[sp,#4]
        0x0081a0f4:    9e01        ..      LDR      r6,[sp,#4]
        0x0081a0f6:    ea4f03b3    O...    ROR      r3,r3,#2
        0x0081a0fa:    ea833376    ..v3    EOR      r3,r3,r6,ROR #13
        0x0081a0fe:    ea8353b6    ...S    EOR      r3,r3,r6,ROR #22
        0x0081a102:    441a        .D      ADD      r2,r2,r3
        0x0081a104:    9b04        ..      LDR      r3,[sp,#0x10]
        0x0081a106:    2810        .(      CMP      r0,#0x10
        0x0081a108:    440b        .D      ADD      r3,r3,r1
        0x0081a10a:    4411        .D      ADD      r1,r1,r2
        0x0081a10c:    9304        ..      STR      r3,[sp,#0x10]
        0x0081a10e:    9100        ..      STR      r1,[sp,#0]
        0x0081a110:    f4ffae88    ....    BCC      0x819e24 ; mbedtls_internal_sha256_process + 60
;;;231        }
;;;232    
;;;233        for( i = 16; i < 64; i += 8 )
        0x0081a114:    2110        .!      MOVS     r1,#0x10
;;;234        {
;;;235            P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        0x0081a116:    ea4f10b3    O...    ROR      r0,r3,#6
        0x0081a11a:    ea8020f3    ...     EOR      r0,r0,r3,ROR #11
        0x0081a11e:    ea806273    ..sb    EOR      r2,r0,r3,ROR #25
        0x0081a122:    e9dd0305    ....    LDRD     r0,r3,[sp,#0x14]
        0x0081a126:    4058        X@      EORS     r0,r0,r3
        0x0081a128:    9b04        ..      LDR      r3,[sp,#0x10]
        0x0081a12a:    4c2c        ,L      LDR      r4,[pc,#176] ; [0x81a1dc] = 0x81c368
        0x0081a12c:    4018        .@      ANDS     r0,r0,r3
        0x0081a12e:    9b06        ..      LDR      r3,[sp,#0x18]
        0x0081a130:    ae08        ..      ADD      r6,sp,#0x20
        0x0081a132:    4058        X@      EORS     r0,r0,r3
        0x0081a134:    4410        .D      ADD      r0,r0,r2
        0x0081a136:    f8543021    T.!0    LDR      r3,[r4,r1,LSL #2]
        0x0081a13a:    9a07        ..      LDR      r2,[sp,#0x1c]
        0x0081a13c:    441a        .D      ADD      r2,r2,r3
        0x0081a13e:    4402        .D      ADD      r2,r2,r0
        0x0081a140:    eb060081    ....    ADD      r0,r6,r1,LSL #2
        0x0081a144:    f850cc08    P...    LDR      r12,[r0,#-8]
        0x0081a148:    f8505c3c    P.<\    LDR      r5,[r0,#-0x3c]
        0x0081a14c:    ea4f437c    O.|C    ROR      r3,r12,#17
        0x0081a150:    ea4f17f5    O...    ROR      r7,r5,#7
        0x0081a154:    ea8343fc    ...C    EOR      r3,r3,r12,ROR #19
        0x0081a158:    ea8747b5    ...G    EOR      r7,r7,r5,ROR #18
        0x0081a15c:    ea83239c    ...#    EOR      r3,r3,r12,LSR #10
        0x0081a160:    ea8707d5    ....    EOR      r7,r7,r5,LSR #3
        0x0081a164:    443b        ;D      ADD      r3,r3,r7
        0x0081a166:    46e1        .F      MOV      r9,r12
        0x0081a168:    f8507c1c    P..|    LDR      r7,[r0,#-0x1c]
        0x0081a16c:    f850cd40    P.@.    LDR      r12,[r0,#-0x40]!
        0x0081a170:    4467        gD      ADD      r7,r7,r12
        0x0081a172:    443b        ;D      ADD      r3,r3,r7
        0x0081a174:    f8463021    F.!0    STR      r3,[r6,r1,LSL #2]
        0x0081a178:    e9dd6700    ...g    LDRD     r6,r7,[sp,#0]
        0x0081a17c:    403e        >@      ANDS     r6,r6,r7
        0x0081a17e:    e9dd7c00    ...|    LDRD     r7,r12,[sp,#0]
        0x0081a182:    ea47070c    G...    ORR      r7,r7,r12
        0x0081a186:    f8ddc008    ....    LDR      r12,[sp,#8]
        0x0081a18a:    441a        .D      ADD      r2,r2,r3
        0x0081a18c:    ea07070c    ....    AND      r7,r7,r12
        0x0081a190:    433e        >C      ORRS     r6,r6,r7
        0x0081a192:    9f00        ..      LDR      r7,[sp,#0]
        0x0081a194:    ea4f07b7    O...    ROR      r7,r7,#2
        0x0081a198:    e022        ".      B        0x81a1e0 ; mbedtls_internal_sha256_process + 1016
    $d
        0x0081a19a:    0000        ..      DCW    0
        0x0081a19c:    c1059ed8    ....    DCD    3238371032
        0x0081a1a0:    367cd507    ..|6    DCD    914150663
        0x0081a1a4:    3070dd17    ..p0    DCD    812702999
        0x0081a1a8:    f70e5939    9Y..    DCD    4144912697
        0x0081a1ac:    ffc00b31    1...    DCD    4290775857
        0x0081a1b0:    68581511    ..Xh    DCD    1750603025
        0x0081a1b4:    64f98fa7    ...d    DCD    1694076839
        0x0081a1b8:    befa4fa4    .O..    DCD    3204075428
        0x0081a1bc:    6a09e667    g..j    DCD    1779033703
        0x0081a1c0:    bb67ae85    ..g.    DCD    3144134277
        0x0081a1c4:    3c6ef372    r.n<    DCD    1013904242
        0x0081a1c8:    a54ff53a    :.O.    DCD    2773480762
        0x0081a1cc:    510e527f    .R.Q    DCD    1359893119
        0x0081a1d0:    9b05688c    .h..    DCD    2600822924
        0x0081a1d4:    1f83d9ab    ....    DCD    528734635
        0x0081a1d8:    5be0cd19    ...[    DCD    1541459225
        0x0081a1dc:    0081c368    h...    DCD    8504168
    $t
        0x0081a1e0:    f8ddc000    ....    LDR      r12,[sp,#0]
        0x0081a1e4:    ea87377c    ..|7    EOR      r7,r7,r12,ROR #13
        0x0081a1e8:    ea8757bc    ...W    EOR      r7,r7,r12,ROR #22
        0x0081a1ec:    443e        >D      ADD      r6,r6,r7
        0x0081a1ee:    9f03        ..      LDR      r7,[sp,#0xc]
        0x0081a1f0:    4417        .D      ADD      r7,r7,r2
        0x0081a1f2:    4432        2D      ADD      r2,r2,r6
;;;236            P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        0x0081a1f4:    9207        ..      STR      r2,[sp,#0x1c]
        0x0081a1f6:    ea4f12b7    O...    ROR      r2,r7,#6
        0x0081a1fa:    ea8222f7    ..."    EOR      r2,r2,r7,ROR #11
        0x0081a1fe:    9703        ..      STR      r7,[sp,#0xc]
        0x0081a200:    ea826677    ..wf    EOR      r6,r2,r7,ROR #25
        0x0081a204:    e9dd2704    ...'    LDRD     r2,r7,[sp,#0x10]
        0x0081a208:    407a        z@      EORS     r2,r2,r7
        0x0081a20a:    9f03        ..      LDR      r7,[sp,#0xc]
        0x0081a20c:    f8d0c03c    ..<.    LDR      r12,[r0,#0x3c]
        0x0081a210:    403a        :@      ANDS     r2,r2,r7
        0x0081a212:    9f05        ..      LDR      r7,[sp,#0x14]
        0x0081a214:    46e2        .F      MOV      r10,r12
        0x0081a216:    407a        z@      EORS     r2,r2,r7
        0x0081a218:    4416        .D      ADD      r6,r6,r2
        0x0081a21a:    eb040281    ....    ADD      r2,r4,r1,LSL #2
        0x0081a21e:    9f06        ..      LDR      r7,[sp,#0x18]
        0x0081a220:    6854        Th      LDR      r4,[r2,#4]
        0x0081a222:    443c        <D      ADD      r4,r4,r7
        0x0081a224:    4434        4D      ADD      r4,r4,r6
        0x0081a226:    ea4f467c    O.|F    ROR      r6,r12,#17
        0x0081a22a:    ea8646fc    ...F    EOR      r6,r6,r12,ROR #19
        0x0081a22e:    ea86279c    ...'    EOR      r7,r6,r12,LSR #10
        0x0081a232:    6886        .h      LDR      r6,[r0,#8]
        0x0081a234:    ea4f1cf6    O...    ROR      r12,r6,#7
        0x0081a238:    ea8c4cb6    ...L    EOR      r12,r12,r6,ROR #18
        0x0081a23c:    ea8c0cd6    ....    EOR      r12,r12,r6,LSR #3
        0x0081a240:    4467        gD      ADD      r7,r7,r12
        0x0081a242:    f8d0c028    ..(.    LDR      r12,[r0,#0x28]
        0x0081a246:    4465        eD      ADD      r5,r5,r12
        0x0081a248:    443d        =D      ADD      r5,r5,r7
        0x0081a24a:    6445        Ed      STR      r5,[r0,#0x44]
        0x0081a24c:    f8ddc000    ....    LDR      r12,[sp,#0]
        0x0081a250:    9f07        ..      LDR      r7,[sp,#0x1c]
        0x0081a252:    f8dd8000    ....    LDR      r8,[sp,#0]
        0x0081a256:    ea07070c    ....    AND      r7,r7,r12
        0x0081a25a:    f8ddc01c    ....    LDR      r12,[sp,#0x1c]
        0x0081a25e:    442c        ,D      ADD      r4,r4,r5
        0x0081a260:    ea4c0c08    L...    ORR      r12,r12,r8
        0x0081a264:    f8dd8004    ....    LDR      r8,[sp,#4]
        0x0081a268:    ea0c0c08    ....    AND      r12,r12,r8
        0x0081a26c:    ea47070c    G...    ORR      r7,r7,r12
        0x0081a270:    f8ddc01c    ....    LDR      r12,[sp,#0x1c]
        0x0081a274:    f8dd801c    ....    LDR      r8,[sp,#0x1c]
        0x0081a278:    ea4f0cbc    O...    ROR      r12,r12,#2
        0x0081a27c:    ea8c3c78    ..x<    EOR      r12,r12,r8,ROR #13
        0x0081a280:    ea8c5cb8    ...\    EOR      r12,r12,r8,ROR #22
        0x0081a284:    4467        gD      ADD      r7,r7,r12
        0x0081a286:    f8ddc008    ....    LDR      r12,[sp,#8]
        0x0081a28a:    44a4        .D      ADD      r12,r12,r4
        0x0081a28c:    443c        <D      ADD      r4,r4,r7
;;;237            P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        0x0081a28e:    9406        ..      STR      r4,[sp,#0x18]
        0x0081a290:    ea4f14bc    O...    ROR      r4,r12,#6
        0x0081a294:    ea8424fc    ...$    EOR      r4,r4,r12,ROR #11
        0x0081a298:    f8cdc008    ....    STR      r12,[sp,#8]
        0x0081a29c:    ea84677c    ..|g    EOR      r7,r4,r12,ROR #25
        0x0081a2a0:    e9dd4c03    ...L    LDRD     r4,r12,[sp,#0xc]
        0x0081a2a4:    ea84040c    ....    EOR      r4,r4,r12
        0x0081a2a8:    f8ddc008    ....    LDR      r12,[sp,#8]
        0x0081a2ac:    ea04040c    ....    AND      r4,r4,r12
        0x0081a2b0:    f8ddc010    ....    LDR      r12,[sp,#0x10]
        0x0081a2b4:    ea84040c    ....    EOR      r4,r4,r12
        0x0081a2b8:    4427        'D      ADD      r7,r7,r4
        0x0081a2ba:    9c05        ..      LDR      r4,[sp,#0x14]
        0x0081a2bc:    f8d2c008    ....    LDR      r12,[r2,#8]
        0x0081a2c0:    4464        dD      ADD      r4,r4,r12
        0x0081a2c2:    4427        'D      ADD      r7,r7,r4
        0x0081a2c4:    ea4f4473    O.sD    ROR      r4,r3,#17
        0x0081a2c8:    ea8444f3    ...D    EOR      r4,r4,r3,ROR #19
        0x0081a2cc:    ea842c93    ...,    EOR      r12,r4,r3,LSR #10
        0x0081a2d0:    68c4        .h      LDR      r4,[r0,#0xc]
        0x0081a2d2:    ea4f18f4    O...    ROR      r8,r4,#7
        0x0081a2d6:    ea8848b4    ...H    EOR      r8,r8,r4,ROR #18
        0x0081a2da:    ea8808d4    ....    EOR      r8,r8,r4,LSR #3
        0x0081a2de:    44c4        .D      ADD      r12,r12,r8
        0x0081a2e0:    f8d0802c    ..,.    LDR      r8,[r0,#0x2c]
        0x0081a2e4:    4446        FD      ADD      r6,r6,r8
        0x0081a2e6:    4466        fD      ADD      r6,r6,r12
        0x0081a2e8:    eb070b06    ....    ADD      r11,r7,r6
        0x0081a2ec:    6486        .d      STR      r6,[r0,#0x48]
        0x0081a2ee:    e9dd7c06    ...|    LDRD     r7,r12,[sp,#0x18]
        0x0081a2f2:    ea07070c    ....    AND      r7,r7,r12
        0x0081a2f6:    e9ddc806    ....    LDRD     r12,r8,[sp,#0x18]
        0x0081a2fa:    ea4c0c08    L...    ORR      r12,r12,r8
        0x0081a2fe:    f8dd8000    ....    LDR      r8,[sp,#0]
        0x0081a302:    ea0c0c08    ....    AND      r12,r12,r8
        0x0081a306:    ea47070c    G...    ORR      r7,r7,r12
        0x0081a30a:    f8ddc018    ....    LDR      r12,[sp,#0x18]
        0x0081a30e:    f8dd8018    ....    LDR      r8,[sp,#0x18]
        0x0081a312:    ea4f0cbc    O...    ROR      r12,r12,#2
        0x0081a316:    ea8c3c78    ..x<    EOR      r12,r12,r8,ROR #13
        0x0081a31a:    ea8c5cb8    ...\    EOR      r12,r12,r8,ROR #22
        0x0081a31e:    4467        gD      ADD      r7,r7,r12
        0x0081a320:    f8dd8004    ....    LDR      r8,[sp,#4]
        0x0081a324:    445f        _D      ADD      r7,r7,r11
        0x0081a326:    eb080c0b    ....    ADD      r12,r8,r11
;;;238            P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        0x0081a32a:    9705        ..      STR      r7,[sp,#0x14]
        0x0081a32c:    ea4f17bc    O...    ROR      r7,r12,#6
        0x0081a330:    f8cdc004    ....    STR      r12,[sp,#4]
        0x0081a334:    ea8727fc    ...'    EOR      r7,r7,r12,ROR #11
        0x0081a338:    ea876c7c    ..|l    EOR      r12,r7,r12,ROR #25
        0x0081a33c:    e9dd7802    ...x    LDRD     r7,r8,[sp,#8]
        0x0081a340:    ea870708    ....    EOR      r7,r7,r8
        0x0081a344:    f8dd8004    ....    LDR      r8,[sp,#4]
        0x0081a348:    ea070708    ....    AND      r7,r7,r8
        0x0081a34c:    f8dd800c    ....    LDR      r8,[sp,#0xc]
        0x0081a350:    ea870708    ....    EOR      r7,r7,r8
        0x0081a354:    4467        gD      ADD      r7,r7,r12
        0x0081a356:    f8ddc010    ....    LDR      r12,[sp,#0x10]
        0x0081a35a:    f8d2800c    ....    LDR      r8,[r2,#0xc]
        0x0081a35e:    44c4        .D      ADD      r12,r12,r8
        0x0081a360:    4467        gD      ADD      r7,r7,r12
        0x0081a362:    ea4f4c75    O.uL    ROR      r12,r5,#17
        0x0081a366:    ea8c4cf5    ...L    EOR      r12,r12,r5,ROR #19
        0x0081a36a:    ea8c2c95    ...,    EOR      r12,r12,r5,LSR #10
        0x0081a36e:    6905        .i      LDR      r5,[r0,#0x10]
        0x0081a370:    ea4f18f5    O...    ROR      r8,r5,#7
        0x0081a374:    ea8848b5    ...H    EOR      r8,r8,r5,ROR #18
        0x0081a378:    ea8808d5    ....    EOR      r8,r8,r5,LSR #3
        0x0081a37c:    44c4        .D      ADD      r12,r12,r8
        0x0081a37e:    f8d08030    ..0.    LDR      r8,[r0,#0x30]
        0x0081a382:    4444        DD      ADD      r4,r4,r8
        0x0081a384:    4464        dD      ADD      r4,r4,r12
        0x0081a386:    eb070b04    ....    ADD      r11,r7,r4
        0x0081a38a:    64c4        .d      STR      r4,[r0,#0x4c]
        0x0081a38c:    e9dd7c05    ...|    LDRD     r7,r12,[sp,#0x14]
        0x0081a390:    ea07070c    ....    AND      r7,r7,r12
        0x0081a394:    e9ddc805    ....    LDRD     r12,r8,[sp,#0x14]
        0x0081a398:    ea4c0c08    L...    ORR      r12,r12,r8
        0x0081a39c:    f8dd801c    ....    LDR      r8,[sp,#0x1c]
        0x0081a3a0:    ea0c0c08    ....    AND      r12,r12,r8
        0x0081a3a4:    ea47070c    G...    ORR      r7,r7,r12
        0x0081a3a8:    f8ddc014    ....    LDR      r12,[sp,#0x14]
        0x0081a3ac:    f8dd8014    ....    LDR      r8,[sp,#0x14]
        0x0081a3b0:    ea4f0cbc    O...    ROR      r12,r12,#2
        0x0081a3b4:    ea8c3c78    ..x<    EOR      r12,r12,r8,ROR #13
        0x0081a3b8:    ea8c5cb8    ...\    EOR      r12,r12,r8,ROR #22
        0x0081a3bc:    4467        gD      ADD      r7,r7,r12
        0x0081a3be:    f8dd8000    ....    LDR      r8,[sp,#0]
        0x0081a3c2:    445f        _D      ADD      r7,r7,r11
        0x0081a3c4:    eb080c0b    ....    ADD      r12,r8,r11
;;;239            P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        0x0081a3c8:    9704        ..      STR      r7,[sp,#0x10]
        0x0081a3ca:    f8cdc000    ....    STR      r12,[sp,#0]
        0x0081a3ce:    ea4f17bc    O...    ROR      r7,r12,#6
        0x0081a3d2:    ea872cfc    ...,    EOR      r12,r7,r12,ROR #11
        0x0081a3d6:    9f00        ..      LDR      r7,[sp,#0]
        0x0081a3d8:    ea8c6c77    ..wl    EOR      r12,r12,r7,ROR #25
        0x0081a3dc:    e9dd7801    ...x    LDRD     r7,r8,[sp,#4]
        0x0081a3e0:    ea870708    ....    EOR      r7,r7,r8
        0x0081a3e4:    f8dd8000    ....    LDR      r8,[sp,#0]
        0x0081a3e8:    ea070708    ....    AND      r7,r7,r8
        0x0081a3ec:    f8dd8008    ....    LDR      r8,[sp,#8]
        0x0081a3f0:    ea870708    ....    EOR      r7,r7,r8
        0x0081a3f4:    4467        gD      ADD      r7,r7,r12
        0x0081a3f6:    f8ddc00c    ....    LDR      r12,[sp,#0xc]
        0x0081a3fa:    f8d28010    ....    LDR      r8,[r2,#0x10]
        0x0081a3fe:    44c4        .D      ADD      r12,r12,r8
        0x0081a400:    4467        gD      ADD      r7,r7,r12
        0x0081a402:    ea4f4c76    O.vL    ROR      r12,r6,#17
        0x0081a406:    ea8c4cf6    ...L    EOR      r12,r12,r6,ROR #19
        0x0081a40a:    ea8c2c96    ...,    EOR      r12,r12,r6,LSR #10
        0x0081a40e:    6946        Fi      LDR      r6,[r0,#0x14]
        0x0081a410:    ea4f18f6    O...    ROR      r8,r6,#7
        0x0081a414:    ea8848b6    ...H    EOR      r8,r8,r6,ROR #18
        0x0081a418:    ea8808d6    ....    EOR      r8,r8,r6,LSR #3
        0x0081a41c:    44c4        .D      ADD      r12,r12,r8
        0x0081a41e:    f8d08034    ..4.    LDR      r8,[r0,#0x34]
        0x0081a422:    444e        ND      ADD      r6,r6,r9
        0x0081a424:    4445        ED      ADD      r5,r5,r8
        0x0081a426:    4465        eD      ADD      r5,r5,r12
        0x0081a428:    eb070b05    ....    ADD      r11,r7,r5
        0x0081a42c:    6505        .e      STR      r5,[r0,#0x50]
        0x0081a42e:    e9ddc704    ....    LDRD     r12,r7,[sp,#0x10]
        0x0081a432:    ea0c0c07    ....    AND      r12,r12,r7
        0x0081a436:    e9dd7804    ...x    LDRD     r7,r8,[sp,#0x10]
        0x0081a43a:    ea470708    G...    ORR      r7,r7,r8
        0x0081a43e:    f8dd8018    ....    LDR      r8,[sp,#0x18]
        0x0081a442:    ea070708    ....    AND      r7,r7,r8
        0x0081a446:    ea4c0c07    L...    ORR      r12,r12,r7
        0x0081a44a:    9f04        ..      LDR      r7,[sp,#0x10]
        0x0081a44c:    f8dd8010    ....    LDR      r8,[sp,#0x10]
        0x0081a450:    ea4f07b7    O...    ROR      r7,r7,#2
        0x0081a454:    ea873778    ..x7    EOR      r7,r7,r8,ROR #13
        0x0081a458:    ea8757b8    ...W    EOR      r7,r7,r8,ROR #22
        0x0081a45c:    4467        gD      ADD      r7,r7,r12
        0x0081a45e:    f8dd801c    ....    LDR      r8,[sp,#0x1c]
        0x0081a462:    445f        _D      ADD      r7,r7,r11
        0x0081a464:    eb080c0b    ....    ADD      r12,r8,r11
;;;240            P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
        0x0081a468:    9703        ..      STR      r7,[sp,#0xc]
        0x0081a46a:    ea4f17bc    O...    ROR      r7,r12,#6
        0x0081a46e:    f8cdc01c    ....    STR      r12,[sp,#0x1c]
        0x0081a472:    ea8727fc    ...'    EOR      r7,r7,r12,ROR #11
        0x0081a476:    ea876c7c    ..|l    EOR      r12,r7,r12,ROR #25
        0x0081a47a:    e9dd7800    ...x    LDRD     r7,r8,[sp,#0]
        0x0081a47e:    ea870708    ....    EOR      r7,r7,r8
        0x0081a482:    f8dd801c    ....    LDR      r8,[sp,#0x1c]
        0x0081a486:    ea070708    ....    AND      r7,r7,r8
        0x0081a48a:    f8dd8004    ....    LDR      r8,[sp,#4]
        0x0081a48e:    ea870708    ....    EOR      r7,r7,r8
        0x0081a492:    4467        gD      ADD      r7,r7,r12
        0x0081a494:    f8ddc008    ....    LDR      r12,[sp,#8]
        0x0081a498:    f8d28014    ....    LDR      r8,[r2,#0x14]
        0x0081a49c:    44c4        .D      ADD      r12,r12,r8
        0x0081a49e:    4467        gD      ADD      r7,r7,r12
        0x0081a4a0:    ea4f4c74    O.tL    ROR      r12,r4,#17
        0x0081a4a4:    ea8c4cf4    ...L    EOR      r12,r12,r4,ROR #19
        0x0081a4a8:    ea8c2c94    ...,    EOR      r12,r12,r4,LSR #10
        0x0081a4ac:    6984        .i      LDR      r4,[r0,#0x18]
        0x0081a4ae:    ea4f18f4    O...    ROR      r8,r4,#7
        0x0081a4b2:    ea8848b4    ...H    EOR      r8,r8,r4,ROR #18
        0x0081a4b6:    ea8808d4    ....    EOR      r8,r8,r4,LSR #3
        0x0081a4ba:    44e0        .D      ADD      r8,r8,r12
        0x0081a4bc:    4446        FD      ADD      r6,r6,r8
        0x0081a4be:    eb070906    ....    ADD      r9,r7,r6
        0x0081a4c2:    6546        Fe      STR      r6,[r0,#0x54]
        0x0081a4c4:    e9ddc703    ....    LDRD     r12,r7,[sp,#0xc]
        0x0081a4c8:    ea0c0c07    ....    AND      r12,r12,r7
        0x0081a4cc:    e9dd7803    ...x    LDRD     r7,r8,[sp,#0xc]
        0x0081a4d0:    ea470708    G...    ORR      r7,r7,r8
        0x0081a4d4:    f8dd8014    ....    LDR      r8,[sp,#0x14]
        0x0081a4d8:    4454        TD      ADD      r4,r4,r10
        0x0081a4da:    ea070708    ....    AND      r7,r7,r8
        0x0081a4de:    ea4c0c07    L...    ORR      r12,r12,r7
        0x0081a4e2:    9f03        ..      LDR      r7,[sp,#0xc]
        0x0081a4e4:    f8dd800c    ....    LDR      r8,[sp,#0xc]
        0x0081a4e8:    ea4f07b7    O...    ROR      r7,r7,#2
        0x0081a4ec:    ea873778    ..x7    EOR      r7,r7,r8,ROR #13
        0x0081a4f0:    ea8757b8    ...W    EOR      r7,r7,r8,ROR #22
        0x0081a4f4:    4467        gD      ADD      r7,r7,r12
        0x0081a4f6:    f8dd8018    ....    LDR      r8,[sp,#0x18]
        0x0081a4fa:    444f        OD      ADD      r7,r7,r9
        0x0081a4fc:    eb080c09    ....    ADD      r12,r8,r9
;;;241            P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        0x0081a500:    9702        ..      STR      r7,[sp,#8]
        0x0081a502:    ea4f17bc    O...    ROR      r7,r12,#6
        0x0081a506:    f8cdc018    ....    STR      r12,[sp,#0x18]
        0x0081a50a:    ea8727fc    ...'    EOR      r7,r7,r12,ROR #11
        0x0081a50e:    ea876c7c    ..|l    EOR      r12,r7,r12,ROR #25
        0x0081a512:    f8dd8000    ....    LDR      r8,[sp,#0]
        0x0081a516:    9f07        ..      LDR      r7,[sp,#0x1c]
        0x0081a518:    ea870708    ....    EOR      r7,r7,r8
        0x0081a51c:    f8dd8018    ....    LDR      r8,[sp,#0x18]
        0x0081a520:    ea070708    ....    AND      r7,r7,r8
        0x0081a524:    f8dd8000    ....    LDR      r8,[sp,#0]
        0x0081a528:    ea870708    ....    EOR      r7,r7,r8
        0x0081a52c:    44bc        .D      ADD      r12,r12,r7
        0x0081a52e:    9f01        ..      LDR      r7,[sp,#4]
        0x0081a530:    f8d28018    ....    LDR      r8,[r2,#0x18]
        0x0081a534:    4447        GD      ADD      r7,r7,r8
        0x0081a536:    4467        gD      ADD      r7,r7,r12
        0x0081a538:    ea4f4c75    O.uL    ROR      r12,r5,#17
        0x0081a53c:    ea8c4cf5    ...L    EOR      r12,r12,r5,ROR #19
        0x0081a540:    ea8c2c95    ...,    EOR      r12,r12,r5,LSR #10
        0x0081a544:    69c5        .i      LDR      r5,[r0,#0x1c]
        0x0081a546:    ea4f18f5    O...    ROR      r8,r5,#7
        0x0081a54a:    ea8848b5    ...H    EOR      r8,r8,r5,ROR #18
        0x0081a54e:    ea8808d5    ....    EOR      r8,r8,r5,LSR #3
        0x0081a552:    44e0        .D      ADD      r8,r8,r12
        0x0081a554:    4444        DD      ADD      r4,r4,r8
        0x0081a556:    6584        .e      STR      r4,[r0,#0x58]
        0x0081a558:    443c        <D      ADD      r4,r4,r7
        0x0081a55a:    e9dd7c02    ...|    LDRD     r7,r12,[sp,#8]
        0x0081a55e:    ea07070c    ....    AND      r7,r7,r12
        0x0081a562:    e9ddc802    ....    LDRD     r12,r8,[sp,#8]
        0x0081a566:    ea4c0c08    L...    ORR      r12,r12,r8
        0x0081a56a:    f8dd8010    ....    LDR      r8,[sp,#0x10]
        0x0081a56e:    ea0c0c08    ....    AND      r12,r12,r8
        0x0081a572:    ea47070c    G...    ORR      r7,r7,r12
        0x0081a576:    f8ddc008    ....    LDR      r12,[sp,#8]
        0x0081a57a:    f8dd8008    ....    LDR      r8,[sp,#8]
        0x0081a57e:    ea4f0cbc    O...    ROR      r12,r12,#2
        0x0081a582:    ea8c3c78    ..x<    EOR      r12,r12,r8,ROR #13
        0x0081a586:    ea8c5cb8    ...\    EOR      r12,r12,r8,ROR #22
        0x0081a58a:    4467        gD      ADD      r7,r7,r12
        0x0081a58c:    f8ddc014    ....    LDR      r12,[sp,#0x14]
        0x0081a590:    44a4        .D      ADD      r12,r12,r4
        0x0081a592:    443c        <D      ADD      r4,r4,r7
;;;242            P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
        0x0081a594:    9401        ..      STR      r4,[sp,#4]
        0x0081a596:    ea4f14bc    O...    ROR      r4,r12,#6
        0x0081a59a:    ea8424fc    ...$    EOR      r4,r4,r12,ROR #11
        0x0081a59e:    f8cdc014    ....    STR      r12,[sp,#0x14]
        0x0081a5a2:    ea84677c    ..|g    EOR      r7,r4,r12,ROR #25
        0x0081a5a6:    e9dd4c06    ...L    LDRD     r4,r12,[sp,#0x18]
        0x0081a5aa:    ea84040c    ....    EOR      r4,r4,r12
        0x0081a5ae:    f8ddc014    ....    LDR      r12,[sp,#0x14]
        0x0081a5b2:    69d2        .i      LDR      r2,[r2,#0x1c]
        0x0081a5b4:    ea04040c    ....    AND      r4,r4,r12
        0x0081a5b8:    f8ddc01c    ....    LDR      r12,[sp,#0x1c]
        0x0081a5bc:    ea84040c    ....    EOR      r4,r4,r12
        0x0081a5c0:    443c        <D      ADD      r4,r4,r7
        0x0081a5c2:    9f00        ..      LDR      r7,[sp,#0]
        0x0081a5c4:    443a        :D      ADD      r2,r2,r7
        0x0081a5c6:    4422        "D      ADD      r2,r2,r4
        0x0081a5c8:    ea4f4476    O.vD    ROR      r4,r6,#17
        0x0081a5cc:    ea8444f6    ...D    EOR      r4,r4,r6,ROR #19
        0x0081a5d0:    ea842696    ...&    EOR      r6,r4,r6,LSR #10
        0x0081a5d4:    6a04        .j      LDR      r4,[r0,#0x20]
        0x0081a5d6:    442b        +D      ADD      r3,r3,r5
        0x0081a5d8:    ea4f17f4    O...    ROR      r7,r4,#7
        0x0081a5dc:    ea8747b4    ...G    EOR      r7,r7,r4,ROR #18
        0x0081a5e0:    ea8704d4    ....    EOR      r4,r7,r4,LSR #3
        0x0081a5e4:    4434        4D      ADD      r4,r4,r6
        0x0081a5e6:    4423        #D      ADD      r3,r3,r4
        0x0081a5e8:    65c3        .e      STR      r3,[r0,#0x5c]
        0x0081a5ea:    18d0        ..      ADDS     r0,r2,r3
        0x0081a5ec:    e9dd2301    ...#    LDRD     r2,r3,[sp,#4]
        0x0081a5f0:    401a        .@      ANDS     r2,r2,r3
        0x0081a5f2:    e9dd3401    ...4    LDRD     r3,r4,[sp,#4]
        0x0081a5f6:    4323        #C      ORRS     r3,r3,r4
        0x0081a5f8:    9c03        ..      LDR      r4,[sp,#0xc]
        0x0081a5fa:    3108        .1      ADDS     r1,r1,#8
        0x0081a5fc:    4023        #@      ANDS     r3,r3,r4
        0x0081a5fe:    431a        .C      ORRS     r2,r2,r3
        0x0081a600:    9b01        ..      LDR      r3,[sp,#4]
        0x0081a602:    9c01        ..      LDR      r4,[sp,#4]
        0x0081a604:    ea4f03b3    O...    ROR      r3,r3,#2
        0x0081a608:    ea833374    ..t3    EOR      r3,r3,r4,ROR #13
        0x0081a60c:    ea8353b4    ...S    EOR      r3,r3,r4,ROR #22
        0x0081a610:    441a        .D      ADD      r2,r2,r3
        0x0081a612:    9b04        ..      LDR      r3,[sp,#0x10]
        0x0081a614:    2940        @)      CMP      r1,#0x40
        0x0081a616:    4403        .D      ADD      r3,r3,r0
        0x0081a618:    4410        .D      ADD      r0,r0,r2
        0x0081a61a:    9304        ..      STR      r3,[sp,#0x10]
        0x0081a61c:    9000        ..      STR      r0,[sp,#0]
        0x0081a61e:    f4ffad7a    ..z.    BCC      0x81a116 ; mbedtls_internal_sha256_process + 814
;;;243        }
;;;244    #endif /* MBEDTLS_SHA256_SMALLER */
;;;245    
;;;246        for( i = 0; i < 8; i++ )
        0x0081a622:    2000        .       MOVS     r0,#0
        0x0081a624:    466a        jF      MOV      r2,sp
        0x0081a626:    eb0e0180    ....    ADD      r1,lr,r0,LSL #2
        0x0081a62a:    f8524020    R. @    LDR      r4,[r2,r0,LSL #2]
        0x0081a62e:    688b        .h      LDR      r3,[r1,#8]
        0x0081a630:    1c40        @.      ADDS     r0,r0,#1
        0x0081a632:    4423        #D      ADD      r3,r3,r4
        0x0081a634:    608b        .`      STR      r3,[r1,#8]
        0x0081a636:    2808        .(      CMP      r0,#8
        0x0081a638:    d3f5        ..      BCC      0x81a626 ; mbedtls_internal_sha256_process + 2110
        0x0081a63a:    b048        H.      ADD      sp,sp,#0x120
;;;247            ctx->state[i] += A[i];
;;;248    
;;;249        return( 0 );
        0x0081a63c:    2000        .       MOVS     r0,#0
;;;250    }
        0x0081a63e:    e8bd8ff0    ....    POP      {r4-r11,pc}
    mbedtls_sha256_process
;;;251    
;;;252    #if !defined(MBEDTLS_DEPRECATED_REMOVED)
;;;253    void mbedtls_sha256_process( mbedtls_sha256_context *ctx,
;;;254                                 const unsigned char data[64] )
;;;255    {
;;;256        mbedtls_internal_sha256_process( ctx, data );
        0x0081a642:    f7ffbbd1    ....    B        mbedtls_internal_sha256_process ; 0x819de8
    mbedtls_sha256_update_ret
;;;257    }
;;;258    #endif
;;;259    #endif /* !MBEDTLS_SHA256_PROCESS_ALT */
;;;260    
;;;261    /*
;;;262     * SHA-256 process buffer
;;;263     */
;;;264    int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
;;;265                                   const unsigned char *input,
;;;266                                   size_t ilen )
;;;267    {
        0x0081a646:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0081a64a:    0014        ..      MOVS     r4,r2
        0x0081a64c:    460f        .F      MOV      r7,r1
        0x0081a64e:    4605        .F      MOV      r5,r0
        0x0081a650:    d031        1.      BEQ      0x81a6b6 ; mbedtls_sha256_update_ret + 112
;;;268        int ret;
;;;269        size_t fill;
;;;270        uint32_t left;
;;;271    
;;;272        SHA256_VALIDATE_RET( ctx != NULL );
;;;273        SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
;;;274    
;;;275        if( ilen == 0 )
;;;276            return( 0 );
;;;277    
;;;278        left = ctx->total[0] & 0x3F;
        0x0081a652:    6828        (h      LDR      r0,[r5,#0]
        0x0081a654:    f000063f    ..?.    AND      r6,r0,#0x3f
        0x0081a658:    4420         D      ADD      r0,r0,r4
;;;279        fill = 64 - left;
        0x0081a65a:    f1c60840    ..@.    RSB      r8,r6,#0x40
;;;280    
;;;281        ctx->total[0] += (uint32_t) ilen;
;;;282        ctx->total[0] &= 0xFFFFFFFF;
;;;283    
;;;284        if( ctx->total[0] < (uint32_t) ilen )
        0x0081a65e:    6028        (`      STR      r0,[r5,#0]
        0x0081a660:    42a0        .B      CMP      r0,r4
        0x0081a662:    d202        ..      BCS      0x81a66a ; mbedtls_sha256_update_ret + 36
;;;285            ctx->total[1]++;
        0x0081a664:    6868        hh      LDR      r0,[r5,#4]
        0x0081a666:    1c40        @.      ADDS     r0,r0,#1
        0x0081a668:    6068        h`      STR      r0,[r5,#4]
;;;286    
;;;287        if( left && ilen >= fill )
        0x0081a66a:    b1de        ..      CBZ      r6,0x81a6a4 ; mbedtls_sha256_update_ret + 94
        0x0081a66c:    4544        DE      CMP      r4,r8
        0x0081a66e:    d319        ..      BCC      0x81a6a4 ; mbedtls_sha256_update_ret + 94
;;;288        {
;;;289            memcpy( (void *) (ctx->buffer + left), input, fill );
        0x0081a670:    19a8        ..      ADDS     r0,r5,r6
        0x0081a672:    4642        BF      MOV      r2,r8
        0x0081a674:    4639        9F      MOV      r1,r7
        0x0081a676:    3028        (0      ADDS     r0,r0,#0x28
        0x0081a678:    f43ff40f    ?...    BL       __aeabi_memcpy ; 0x59e9a
;;;290    
;;;291            if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
        0x0081a67c:    f1050128    ..(.    ADD      r1,r5,#0x28
        0x0081a680:    4628        (F      MOV      r0,r5
        0x0081a682:    f7fffbb1    ....    BL       mbedtls_internal_sha256_process ; 0x819de8
        0x0081a686:    2800        .(      CMP      r0,#0
        0x0081a688:    d116        ..      BNE      0x81a6b8 ; mbedtls_sha256_update_ret + 114
;;;292                return( ret );
;;;293    
;;;294            input += fill;
        0x0081a68a:    4447        GD      ADD      r7,r7,r8
;;;295            ilen  -= fill;
        0x0081a68c:    eba40408    ....    SUB      r4,r4,r8
;;;296            left = 0;
        0x0081a690:    2600        .&      MOVS     r6,#0
        0x0081a692:    e007        ..      B        0x81a6a4 ; mbedtls_sha256_update_ret + 94
        0x0081a694:    4639        9F      MOV      r1,r7
        0x0081a696:    4628        (F      MOV      r0,r5
        0x0081a698:    f7fffba6    ....    BL       mbedtls_internal_sha256_process ; 0x819de8
        0x0081a69c:    2800        .(      CMP      r0,#0
        0x0081a69e:    d10b        ..      BNE      0x81a6b8 ; mbedtls_sha256_update_ret + 114
        0x0081a6a0:    3c40        @<      SUBS     r4,r4,#0x40
        0x0081a6a2:    3740        @7      ADDS     r7,r7,#0x40
;;;297        }
;;;298    
;;;299        while( ilen >= 64 )
        0x0081a6a4:    2c40        @,      CMP      r4,#0x40
        0x0081a6a6:    d2f5        ..      BCS      0x81a694 ; mbedtls_sha256_update_ret + 78
;;;300        {
;;;301            if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
;;;302                return( ret );
;;;303    
;;;304            input += 64;
;;;305            ilen  -= 64;
;;;306        }
;;;307    
;;;308        if( ilen > 0 )
        0x0081a6a8:    b12c        ,.      CBZ      r4,0x81a6b6 ; mbedtls_sha256_update_ret + 112
;;;309            memcpy( (void *) (ctx->buffer + left), input, ilen );
        0x0081a6aa:    19a8        ..      ADDS     r0,r5,r6
        0x0081a6ac:    4622        "F      MOV      r2,r4
        0x0081a6ae:    4639        9F      MOV      r1,r7
        0x0081a6b0:    3028        (0      ADDS     r0,r0,#0x28
        0x0081a6b2:    f43ff3f2    ?...    BL       __aeabi_memcpy ; 0x59e9a
;;;310    
;;;311        return( 0 );
        0x0081a6b6:    2000        .       MOVS     r0,#0
;;;312    }
        0x0081a6b8:    e8bd81f0    ....    POP      {r4-r8,pc}
    mbedtls_sha256_update
;;;313    
;;;314    #if !defined(MBEDTLS_DEPRECATED_REMOVED)
;;;315    void mbedtls_sha256_update( mbedtls_sha256_context *ctx,
;;;316                                const unsigned char *input,
;;;317                                size_t ilen )
;;;318    {
;;;319        mbedtls_sha256_update_ret( ctx, input, ilen );
        0x0081a6bc:    e7c3        ..      B        mbedtls_sha256_update_ret ; 0x81a646
    mbedtls_sha256_finish_ret
;;;320    }
;;;321    #endif
;;;322    
;;;323    /*
;;;324     * SHA-256 final digest
;;;325     */
;;;326    int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
;;;327                                   unsigned char output[32] )
;;;328    {
        0x0081a6be:    b570        p.      PUSH     {r4-r6,lr}
        0x0081a6c0:    4604        .F      MOV      r4,r0
        0x0081a6c2:    7800        .x      LDRB     r0,[r0,#0]
        0x0081a6c4:    460d        .F      MOV      r5,r1
;;;329        int ret;
;;;330        uint32_t used;
;;;331        uint32_t high, low;
;;;332    
;;;333        SHA256_VALIDATE_RET( ctx != NULL );
;;;334        SHA256_VALIDATE_RET( (unsigned char *)output != NULL );
;;;335    
;;;336        /*
;;;337         * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
;;;338         */
;;;339        used = ctx->total[0] & 0x3F;
        0x0081a6c6:    f000003f    ..?.    AND      r0,r0,#0x3f
;;;340    
;;;341        ctx->buffer[used++] = 0x80;
        0x0081a6ca:    1822        ".      ADDS     r2,r4,r0
        0x0081a6cc:    2180        .!      MOVS     r1,#0x80
        0x0081a6ce:    1c40        @.      ADDS     r0,r0,#1
        0x0081a6d0:    f8821028    ..(.    STRB     r1,[r2,#0x28]
        0x0081a6d4:    f1040628    ..(.    ADD      r6,r4,#0x28
;;;342    
;;;343        if( used <= 56 )
        0x0081a6d8:    2838        8(      CMP      r0,#0x38
        0x0081a6da:    d806        ..      BHI      0x81a6ea ; mbedtls_sha256_finish_ret + 44
;;;344        {
;;;345            /* Enough room for padding + length in current block */
;;;346            memset( ctx->buffer + used, 0, 56 - used );
        0x0081a6dc:    f1c00138    ..8.    RSB      r1,r0,#0x38
        0x0081a6e0:    4420         D      ADD      r0,r0,r4
        0x0081a6e2:    3028        (0      ADDS     r0,r0,#0x28
        0x0081a6e4:    f43ff49a    ?...    BL       __aeabi_memclr ; 0x5a01c
        0x0081a6e8:    e00f        ..      B        0x81a70a ; mbedtls_sha256_finish_ret + 76
;;;347        }
;;;348        else
;;;349        {
;;;350            /* We'll need an extra block */
;;;351            memset( ctx->buffer + used, 0, 64 - used );
        0x0081a6ea:    f1c00140    ..@.    RSB      r1,r0,#0x40
        0x0081a6ee:    4420         D      ADD      r0,r0,r4
        0x0081a6f0:    3028        (0      ADDS     r0,r0,#0x28
        0x0081a6f2:    f43ff493    ?...    BL       __aeabi_memclr ; 0x5a01c
        0x0081a6f6:    4631        1F      MOV      r1,r6
;;;352    
;;;353            if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
        0x0081a6f8:    4620         F      MOV      r0,r4
        0x0081a6fa:    f7fffb75    ..u.    BL       mbedtls_internal_sha256_process ; 0x819de8
        0x0081a6fe:    2800        .(      CMP      r0,#0
        0x0081a700:    d17d        }.      BNE      0x81a7fe ; mbedtls_sha256_finish_ret + 320
;;;354                return( ret );
;;;355    
;;;356            memset( ctx->buffer, 0, 56 );
        0x0081a702:    2138        8!      MOVS     r1,#0x38
        0x0081a704:    4630        0F      MOV      r0,r6
        0x0081a706:    f43ff4ab    ?...    BL       __aeabi_memclr4 ; 0x5a060
;;;357        }
;;;358    
;;;359        /*
;;;360         * Add message length
;;;361         */
;;;362        high = ( ctx->total[0] >> 29 )
        0x0081a70a:    f8540b48    T.H.    LDR      r0,[r4],#0x48
        0x0081a70e:    0f41        A.      LSRS     r1,r0,#29
        0x0081a710:    f8542c44    T.D,    LDR      r2,[r4,#-0x44]
        0x0081a714:    00c0        ..      LSLS     r0,r0,#3
        0x0081a716:    ea4101c2    A...    ORR      r1,r1,r2,LSL #3
;;;363             | ( ctx->total[1] <<  3 );
;;;364        low  = ( ctx->total[0] <<  3 );
;;;365    
;;;366        PUT_UINT32_BE( high, ctx->buffer, 56 );
        0x0081a71a:    0e0a        ..      LSRS     r2,r1,#24
        0x0081a71c:    7622        "v      STRB     r2,[r4,#0x18]
        0x0081a71e:    0c0a        ..      LSRS     r2,r1,#16
        0x0081a720:    7662        bv      STRB     r2,[r4,#0x19]
        0x0081a722:    0a0a        ..      LSRS     r2,r1,#8
        0x0081a724:    76a2        .v      STRB     r2,[r4,#0x1a]
        0x0081a726:    76e1        .v      STRB     r1,[r4,#0x1b]
;;;367        PUT_UINT32_BE( low,  ctx->buffer, 60 );
        0x0081a728:    0e01        ..      LSRS     r1,r0,#24
        0x0081a72a:    7721        !w      STRB     r1,[r4,#0x1c]
        0x0081a72c:    0c01        ..      LSRS     r1,r0,#16
        0x0081a72e:    7761        aw      STRB     r1,[r4,#0x1d]
        0x0081a730:    0a01        ..      LSRS     r1,r0,#8
        0x0081a732:    77a1        .w      STRB     r1,[r4,#0x1e]
        0x0081a734:    77e0        .w      STRB     r0,[r4,#0x1f]
        0x0081a736:    3c48        H<      SUBS     r4,r4,#0x48
        0x0081a738:    4631        1F      MOV      r1,r6
;;;368    
;;;369        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
        0x0081a73a:    4620         F      MOV      r0,r4
        0x0081a73c:    f7fffb54    ..T.    BL       mbedtls_internal_sha256_process ; 0x819de8
        0x0081a740:    2800        .(      CMP      r0,#0
        0x0081a742:    d15c        \.      BNE      0x81a7fe ; mbedtls_sha256_finish_ret + 320
;;;370            return( ret );
;;;371    
;;;372        /*
;;;373         * Output final state
;;;374         */
;;;375        PUT_UINT32_BE( ctx->state[0], output,  0 );
        0x0081a744:    68a0        .h      LDR      r0,[r4,#8]
        0x0081a746:    0e00        ..      LSRS     r0,r0,#24
        0x0081a748:    7028        (p      STRB     r0,[r5,#0]
        0x0081a74a:    68a0        .h      LDR      r0,[r4,#8]
        0x0081a74c:    0c00        ..      LSRS     r0,r0,#16
        0x0081a74e:    7068        hp      STRB     r0,[r5,#1]
        0x0081a750:    8920         .      LDRH     r0,[r4,#8]
        0x0081a752:    0a00        ..      LSRS     r0,r0,#8
        0x0081a754:    70a8        .p      STRB     r0,[r5,#2]
        0x0081a756:    7a20         z      LDRB     r0,[r4,#8]
        0x0081a758:    70e8        .p      STRB     r0,[r5,#3]
;;;376        PUT_UINT32_BE( ctx->state[1], output,  4 );
        0x0081a75a:    68e0        .h      LDR      r0,[r4,#0xc]
        0x0081a75c:    0e00        ..      LSRS     r0,r0,#24
        0x0081a75e:    7128        (q      STRB     r0,[r5,#4]
        0x0081a760:    68e0        .h      LDR      r0,[r4,#0xc]
        0x0081a762:    0c00        ..      LSRS     r0,r0,#16
        0x0081a764:    7168        hq      STRB     r0,[r5,#5]
        0x0081a766:    89a0        ..      LDRH     r0,[r4,#0xc]
        0x0081a768:    0a00        ..      LSRS     r0,r0,#8
        0x0081a76a:    71a8        .q      STRB     r0,[r5,#6]
        0x0081a76c:    7b20         {      LDRB     r0,[r4,#0xc]
        0x0081a76e:    71e8        .q      STRB     r0,[r5,#7]
;;;377        PUT_UINT32_BE( ctx->state[2], output,  8 );
        0x0081a770:    6920         i      LDR      r0,[r4,#0x10]
        0x0081a772:    0e00        ..      LSRS     r0,r0,#24
        0x0081a774:    7228        (r      STRB     r0,[r5,#8]
        0x0081a776:    6920         i      LDR      r0,[r4,#0x10]
        0x0081a778:    0c00        ..      LSRS     r0,r0,#16
        0x0081a77a:    7268        hr      STRB     r0,[r5,#9]
        0x0081a77c:    8a20         .      LDRH     r0,[r4,#0x10]
        0x0081a77e:    0a00        ..      LSRS     r0,r0,#8
        0x0081a780:    72a8        .r      STRB     r0,[r5,#0xa]
        0x0081a782:    7c20         |      LDRB     r0,[r4,#0x10]
        0x0081a784:    72e8        .r      STRB     r0,[r5,#0xb]
;;;378        PUT_UINT32_BE( ctx->state[3], output, 12 );
        0x0081a786:    6960        `i      LDR      r0,[r4,#0x14]
        0x0081a788:    0e00        ..      LSRS     r0,r0,#24
        0x0081a78a:    7328        (s      STRB     r0,[r5,#0xc]
        0x0081a78c:    6960        `i      LDR      r0,[r4,#0x14]
        0x0081a78e:    0c00        ..      LSRS     r0,r0,#16
        0x0081a790:    7368        hs      STRB     r0,[r5,#0xd]
        0x0081a792:    8aa0        ..      LDRH     r0,[r4,#0x14]
        0x0081a794:    0a00        ..      LSRS     r0,r0,#8
        0x0081a796:    73a8        .s      STRB     r0,[r5,#0xe]
        0x0081a798:    7d20         }      LDRB     r0,[r4,#0x14]
        0x0081a79a:    73e8        .s      STRB     r0,[r5,#0xf]
;;;379        PUT_UINT32_BE( ctx->state[4], output, 16 );
        0x0081a79c:    69a0        .i      LDR      r0,[r4,#0x18]
        0x0081a79e:    0e00        ..      LSRS     r0,r0,#24
        0x0081a7a0:    7428        (t      STRB     r0,[r5,#0x10]
        0x0081a7a2:    69a0        .i      LDR      r0,[r4,#0x18]
        0x0081a7a4:    0c00        ..      LSRS     r0,r0,#16
        0x0081a7a6:    7468        ht      STRB     r0,[r5,#0x11]
        0x0081a7a8:    8b20         .      LDRH     r0,[r4,#0x18]
        0x0081a7aa:    0a00        ..      LSRS     r0,r0,#8
        0x0081a7ac:    74a8        .t      STRB     r0,[r5,#0x12]
        0x0081a7ae:    7e20         ~      LDRB     r0,[r4,#0x18]
        0x0081a7b0:    74e8        .t      STRB     r0,[r5,#0x13]
;;;380        PUT_UINT32_BE( ctx->state[5], output, 20 );
        0x0081a7b2:    69e0        .i      LDR      r0,[r4,#0x1c]
        0x0081a7b4:    0e00        ..      LSRS     r0,r0,#24
        0x0081a7b6:    7528        (u      STRB     r0,[r5,#0x14]
        0x0081a7b8:    69e0        .i      LDR      r0,[r4,#0x1c]
        0x0081a7ba:    0c00        ..      LSRS     r0,r0,#16
        0x0081a7bc:    7568        hu      STRB     r0,[r5,#0x15]
        0x0081a7be:    8ba0        ..      LDRH     r0,[r4,#0x1c]
        0x0081a7c0:    0a00        ..      LSRS     r0,r0,#8
        0x0081a7c2:    75a8        .u      STRB     r0,[r5,#0x16]
        0x0081a7c4:    7f20         .      LDRB     r0,[r4,#0x1c]
        0x0081a7c6:    75e8        .u      STRB     r0,[r5,#0x17]
;;;381        PUT_UINT32_BE( ctx->state[6], output, 24 );
        0x0081a7c8:    6a20         j      LDR      r0,[r4,#0x20]
        0x0081a7ca:    0e00        ..      LSRS     r0,r0,#24
        0x0081a7cc:    7628        (v      STRB     r0,[r5,#0x18]
        0x0081a7ce:    6a20         j      LDR      r0,[r4,#0x20]
        0x0081a7d0:    0c00        ..      LSRS     r0,r0,#16
        0x0081a7d2:    7668        hv      STRB     r0,[r5,#0x19]
        0x0081a7d4:    8c20         .      LDRH     r0,[r4,#0x20]
        0x0081a7d6:    0a00        ..      LSRS     r0,r0,#8
        0x0081a7d8:    76a8        .v      STRB     r0,[r5,#0x1a]
        0x0081a7da:    f8940020    .. .    LDRB     r0,[r4,#0x20]
        0x0081a7de:    76e8        .v      STRB     r0,[r5,#0x1b]
;;;382    
;;;383        if( ctx->is224 == 0 )
        0x0081a7e0:    6ea0        .n      LDR      r0,[r4,#0x68]
        0x0081a7e2:    b958        X.      CBNZ     r0,0x81a7fc ; mbedtls_sha256_finish_ret + 318
;;;384            PUT_UINT32_BE( ctx->state[7], output, 28 );
        0x0081a7e4:    6a60        `j      LDR      r0,[r4,#0x24]
        0x0081a7e6:    0e00        ..      LSRS     r0,r0,#24
        0x0081a7e8:    7728        (w      STRB     r0,[r5,#0x1c]
        0x0081a7ea:    6a60        `j      LDR      r0,[r4,#0x24]
        0x0081a7ec:    0c00        ..      LSRS     r0,r0,#16
        0x0081a7ee:    7768        hw      STRB     r0,[r5,#0x1d]
        0x0081a7f0:    8ca0        ..      LDRH     r0,[r4,#0x24]
        0x0081a7f2:    0a00        ..      LSRS     r0,r0,#8
        0x0081a7f4:    77a8        .w      STRB     r0,[r5,#0x1e]
        0x0081a7f6:    f8940024    ..$.    LDRB     r0,[r4,#0x24]
        0x0081a7fa:    77e8        .w      STRB     r0,[r5,#0x1f]
;;;385    
;;;386        return( 0 );
        0x0081a7fc:    2000        .       MOVS     r0,#0
;;;387    }
        0x0081a7fe:    bd70        p.      POP      {r4-r6,pc}
    mbedtls_sha256_finish
;;;388    
;;;389    #if !defined(MBEDTLS_DEPRECATED_REMOVED)
;;;390    void mbedtls_sha256_finish( mbedtls_sha256_context *ctx,
;;;391                                unsigned char output[32] )
;;;392    {
;;;393        mbedtls_sha256_finish_ret( ctx, output );
        0x0081a800:    e75d        ].      B        mbedtls_sha256_finish_ret ; 0x81a6be
    mbedtls_sha256_ret
;;;394    }
;;;395    #endif
;;;396    
;;;397    #endif /* !MBEDTLS_SHA256_ALT */
;;;398    
;;;399    /*
;;;400     * output = SHA-256( input buffer )
;;;401     */
;;;402    int mbedtls_sha256_ret( const unsigned char *input,
;;;403                            size_t ilen,
;;;404                            unsigned char output[32],
;;;405                            int is224 )
;;;406    {
        0x0081a802:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0081a804:    b09b        ..      SUB      sp,sp,#0x6c
        0x0081a806:    4607        .F      MOV      r7,r0
        0x0081a808:    461c        .F      MOV      r4,r3
        0x0081a80a:    4615        .F      MOV      r5,r2
        0x0081a80c:    460e        .F      MOV      r6,r1
;;;407        int ret;
;;;408        mbedtls_sha256_context ctx;
;;;409    
;;;410        SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
;;;411        SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
;;;412        SHA256_VALIDATE_RET( (unsigned char *)output != NULL );
;;;413    
;;;414        mbedtls_sha256_init( &ctx );
        0x0081a80e:    4668        hF      MOV      r0,sp
        0x0081a810:    f7fffab6    ....    BL       mbedtls_sha256_init ; 0x819d80
;;;415    
;;;416        if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
        0x0081a814:    4621        !F      MOV      r1,r4
        0x0081a816:    4668        hF      MOV      r0,sp
        0x0081a818:    f7fffabe    ....    BL       mbedtls_sha256_starts_ret ; 0x819d98
        0x0081a81c:    0004        ..      MOVS     r4,r0
        0x0081a81e:    d10b        ..      BNE      0x81a838 ; mbedtls_sha256_ret + 54
;;;417            goto exit;
;;;418    
;;;419        if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
        0x0081a820:    4632        2F      MOV      r2,r6
        0x0081a822:    4639        9F      MOV      r1,r7
        0x0081a824:    4668        hF      MOV      r0,sp
        0x0081a826:    f7ffff0e    ....    BL       mbedtls_sha256_update_ret ; 0x81a646
        0x0081a82a:    0004        ..      MOVS     r4,r0
        0x0081a82c:    d104        ..      BNE      0x81a838 ; mbedtls_sha256_ret + 54
;;;420            goto exit;
;;;421    
;;;422        if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
        0x0081a82e:    4629        )F      MOV      r1,r5
        0x0081a830:    4668        hF      MOV      r0,sp
        0x0081a832:    f7ffff44    ..D.    BL       mbedtls_sha256_finish_ret ; 0x81a6be
        0x0081a836:    4604        .F      MOV      r4,r0
;;;423            goto exit;
;;;424    
;;;425    exit:
;;;426        mbedtls_sha256_free( &ctx );
        0x0081a838:    4668        hF      MOV      r0,sp
        0x0081a83a:    f7fffaa4    ....    BL       mbedtls_sha256_free ; 0x819d86
        0x0081a83e:    b01b        ..      ADD      sp,sp,#0x6c
;;;427    
;;;428        return( ret );
        0x0081a840:    4620         F      MOV      r0,r4
;;;429    }
        0x0081a842:    bdf0        ..      POP      {r4-r7,pc}
    mbedtls_sha256
;;;430    
;;;431    #if !defined(MBEDTLS_DEPRECATED_REMOVED)
;;;432    void mbedtls_sha256( const unsigned char *input,
;;;433                         size_t ilen,
;;;434                         unsigned char output[32],
;;;435                         int is224 )
;;;436    {
;;;437        mbedtls_sha256_ret( input, ilen, output, is224 );
        0x0081a844:    e7dd        ..      B        mbedtls_sha256_ret ; 0x81a802
        0x0081a846:    0000        ..      MOVS     r0,r0
    .text
    tuya_ble_gap_advertising_adv_data_update
;;; sample\tuya_ble_port_rtl8762.c
;;;26     {
        0x0081a848:    b510        ..      PUSH     {r4,lr}
;;;27         le_adv_set_param(GAP_PARAM_ADV_DATA,ad_len,(uint8_t *)p_ad_data);
        0x0081a84a:    4602        .F      MOV      r2,r0
        0x0081a84c:    f2402061    @.a     MOV      r0,#0x261
        0x0081a850:    f437f31e    7...    BL       le_adv_set_param ; 0x51e90
;;;28         le_adv_update_param();
        0x0081a854:    f437f472    7.r.    BL       le_adv_update_param ; 0x5213c
;;;29         return TUYA_BLE_SUCCESS;
        0x0081a858:    2000        .       MOVS     r0,#0
;;;30     }
        0x0081a85a:    bd10        ..      POP      {r4,pc}
    tuya_ble_gap_advertising_scan_rsp_data_update
;;;31     
;;;32     tuya_ble_status_t tuya_ble_gap_advertising_scan_rsp_data_update(uint8_t const *p_sr_data, uint8_t sr_len)
;;;33     {
        0x0081a85c:    b510        ..      PUSH     {r4,lr}
;;;34         le_adv_set_param(GAP_PARAM_SCAN_RSP_DATA,sr_len,(uint8_t *)p_sr_data);
        0x0081a85e:    4602        .F      MOV      r2,r0
        0x0081a860:    f2402062    @.b     MOV      r0,#0x262
        0x0081a864:    f437f314    7...    BL       le_adv_set_param ; 0x51e90
;;;35         le_adv_update_param();
        0x0081a868:    f437f468    7.h.    BL       le_adv_update_param ; 0x5213c
;;;36         return TUYA_BLE_SUCCESS;
        0x0081a86c:    2000        .       MOVS     r0,#0
;;;37     }
        0x0081a86e:    bd10        ..      POP      {r4,pc}
    tuya_ble_gap_disconnect
;;;38     
;;;39     tuya_ble_status_t tuya_ble_gap_disconnect(void)
;;;40     {
        0x0081a870:    b510        ..      PUSH     {r4,lr}
;;;41         if(!app_ble_disconnect())
        0x0081a872:    f7f4ff07    ....    BL       app_ble_disconnect ; 0x80f684
        0x0081a876:    2800        .(      CMP      r0,#0
        0x0081a878:    d000        ..      BEQ      0x81a87c ; tuya_ble_gap_disconnect + 12
;;;42         {
;;;43             return TUYA_BLE_SUCCESS;
;;;44         }
;;;45         else
;;;46         {
;;;47             return TUYA_BLE_ERR_BUSY;
        0x0081a87a:    200b        .       MOVS     r0,#0xb
;;;48         }
;;;49     }
        0x0081a87c:    bd10        ..      POP      {r4,pc}
    tuya_ble_gatt_send_data
;;;50     
;;;51     
;;;52     tuya_ble_status_t tuya_ble_gatt_send_data(const uint8_t *p_data,uint16_t len)
;;;53     {
        0x0081a87e:    b510        ..      PUSH     {r4,lr}
        0x0081a880:    b2c9        ..      UXTB     r1,r1
        0x0081a882:    f7f5f949    ..I.    BL       ble_value_notify ; 0x80fb18
;;;54         uint8_t data_len = len;
;;;55         if(data_len>TUYA_BLE_DATA_MTU_MAX)
        0x0081a886:    b108        ..      CBZ      r0,0x81a88c ; tuya_ble_gatt_send_data + 14
;;;56         {
;;;57             data_len = TUYA_BLE_DATA_MTU_MAX;
;;;58         }    
;;;59         if(ble_value_notify((uint8_t *)p_data,len))
;;;60         {
;;;61             return TUYA_BLE_SUCCESS;
        0x0081a888:    2000        .       MOVS     r0,#0
        0x0081a88a:    bd10        ..      POP      {r4,pc}
;;;62         }
;;;63         else
;;;64         {
;;;65             return TUYA_BLE_ERR_BUSY;
        0x0081a88c:    200b        .       MOVS     r0,#0xb
;;;66         }
;;;67     }
        0x0081a88e:    bd10        ..      POP      {r4,pc}
    tuya_ble_common_uart_init
;;;68     
;;;69     tuya_ble_status_t tuya_ble_common_uart_init(void)
;;;70     {    
;;;71         return TUYA_BLE_SUCCESS;
        0x0081a890:    2000        .       MOVS     r0,#0
;;;72     }
        0x0081a892:    4770        pG      BX       lr
    tuya_ble_common_uart_send_data
;;;73     
;;;74     tuya_ble_status_t tuya_ble_common_uart_send_data(const uint8_t *p_data,uint16_t len)
;;;75     {
;;;76         uart_senddata_continuous(UART,p_data,len);
        0x0081a894:    460a        .F      MOV      r2,r1
;;; sample\tuya_ble_port_rtl8762.c (75)
        0x0081a896:    b510        ..      PUSH     {r4,lr}
;;;76         uart_senddata_continuous(UART,p_data,len);
        0x0081a898:    4601        .F      MOV      r1,r0
        0x0081a89a:    48f4        .H      LDR      r0,[pc,#976] ; [0x81ac6c] = 0x40012000
        0x0081a89c:    f7f5fa25    ..%.    BL       uart_senddata_continuous ; 0x80fcea
;;;77         return TUYA_BLE_SUCCESS;
        0x0081a8a0:    2000        .       MOVS     r0,#0
;;;78     }
        0x0081a8a2:    bd10        ..      POP      {r4,pc}
    tuya_ble_timer_create
;;;79     
;;;80     
;;;81     tuya_ble_status_t tuya_ble_timer_create(void** p_timer_id,uint32_t timeout_value_ms, tuya_ble_timer_mode mode,tuya_ble_timer_handler_t timeout_handler)
;;;82     {
        0x0081a8a4:    b51c        ..      PUSH     {r2-r4,lr}
        0x0081a8a6:    b102        ..      CBZ      r2,0x81a8aa ; tuya_ble_timer_create + 6
;;;83         bool reload = (mode==TUYA_BLE_TIMER_SINGLE_SHOT) ? false : true;
        0x0081a8a8:    2201        ."      MOVS     r2,#1
        0x0081a8aa:    e9cd2300    ...#    STRD     r2,r3,[sp,#0]
;;;84         
;;;85         if(os_timer_create(p_timer_id, "tuya_ble_sdk_timer", 1,timeout_value_ms, reload, timeout_handler))
        0x0081a8ae:    460b        .F      MOV      r3,r1
        0x0081a8b0:    2201        ."      MOVS     r2,#1
        0x0081a8b2:    a1ef        ..      ADR      r1,{pc}+0x3be ; 0x81ac70
        0x0081a8b4:    f40cf18f    ....    BL       os_timer_create ; 0x26bd6
        0x0081a8b8:    b108        ..      CBZ      r0,0x81a8be ; tuya_ble_timer_create + 26
;;;86         {
;;;87             return TUYA_BLE_SUCCESS;
        0x0081a8ba:    2000        .       MOVS     r0,#0
        0x0081a8bc:    bd1c        ..      POP      {r2-r4,pc}
;;;88         }
;;;89         else
;;;90         {
;;;91             return TUYA_BLE_ERR_COMMON;
        0x0081a8be:    200c        .       MOVS     r0,#0xc
;;;92         }
;;;93     }
        0x0081a8c0:    bd1c        ..      POP      {r2-r4,pc}
    tuya_ble_timer_delete
;;;94     
;;;95     tuya_ble_status_t tuya_ble_timer_delete(void* timer_id)
;;;96     {
        0x0081a8c2:    b501        ..      PUSH     {r0,lr}
;;;97         if(os_timer_delete(&timer_id))
        0x0081a8c4:    4668        hF      MOV      r0,sp
        0x0081a8c6:    f40cf1de    ....    BL       os_timer_delete ; 0x26c86
        0x0081a8ca:    b108        ..      CBZ      r0,0x81a8d0 ; tuya_ble_timer_delete + 14
;;;98         {
;;;99             return TUYA_BLE_SUCCESS;
        0x0081a8cc:    2000        .       MOVS     r0,#0
        0x0081a8ce:    bd08        ..      POP      {r3,pc}
;;;100        }
;;;101        else
;;;102        {
;;;103            return TUYA_BLE_ERR_COMMON;
        0x0081a8d0:    200c        .       MOVS     r0,#0xc
;;;104        }
;;;105    }
        0x0081a8d2:    bd08        ..      POP      {r3,pc}
    tuya_ble_timer_start
;;;106    
;;;107    tuya_ble_status_t tuya_ble_timer_start(void* timer_id)
;;;108    {
        0x0081a8d4:    b501        ..      PUSH     {r0,lr}
;;;109        
;;;110        if(os_timer_start(&timer_id))
        0x0081a8d6:    4668        hF      MOV      r0,sp
        0x0081a8d8:    f40cf1a0    ....    BL       os_timer_start ; 0x26c1c
        0x0081a8dc:    b108        ..      CBZ      r0,0x81a8e2 ; tuya_ble_timer_start + 14
;;;111        {
;;;112            return TUYA_BLE_SUCCESS;
        0x0081a8de:    2000        .       MOVS     r0,#0
        0x0081a8e0:    bd08        ..      POP      {r3,pc}
;;;113        }
;;;114        else
;;;115        {
;;;116            return TUYA_BLE_ERR_COMMON;
        0x0081a8e2:    200c        .       MOVS     r0,#0xc
;;;117        }
;;;118    }
        0x0081a8e4:    bd08        ..      POP      {r3,pc}
    tuya_ble_timer_stop
;;;119    
;;;120    tuya_ble_status_t tuya_ble_timer_stop(void* timer_id)
;;;121    {
        0x0081a8e6:    b501        ..      PUSH     {r0,lr}
;;;122        if(os_timer_stop(&timer_id))
        0x0081a8e8:    4668        hF      MOV      r0,sp
        0x0081a8ea:    f40cf1bb    ....    BL       os_timer_stop ; 0x26c64
        0x0081a8ee:    b108        ..      CBZ      r0,0x81a8f4 ; tuya_ble_timer_stop + 14
;;;123        {
;;;124            return TUYA_BLE_SUCCESS;
        0x0081a8f0:    2000        .       MOVS     r0,#0
        0x0081a8f2:    bd08        ..      POP      {r3,pc}
;;;125        }
;;;126        else
;;;127        {
;;;128            return TUYA_BLE_ERR_COMMON;
        0x0081a8f4:    200c        .       MOVS     r0,#0xc
;;;129        }
;;;130    }
        0x0081a8f6:    bd08        ..      POP      {r3,pc}
    tuya_ble_device_delay_ms
;;;131    
;;;132    
;;;133    void tuya_ble_device_delay_ms(uint32_t ms)
;;;134    {
;;;135        os_delay(ms);
        0x0081a8f8:    f40bb73a    ..:.    B        os_delay ; 0x26770
    tuya_ble_rand_generator
;;;136    }
;;;137    
;;;138    
;;;139    tuya_ble_status_t tuya_ble_rand_generator(uint8_t* p_buf, uint8_t len)
;;;140    {
        0x0081a8fc:    b5f8        ..      PUSH     {r3-r7,lr}
        0x0081a8fe:    088e        ..      LSRS     r6,r1,#2
;;; sample\tuya_ble_port_rtl8762.c (140)
        0x0081a900:    4605        .F      MOV      r5,r0
        0x0081a902:    f0010703    ....    AND      r7,r1,#3
        0x0081a906:    2400        .$      MOVS     r4,#0
        0x0081a908:    e005        ..      B        0x81a916 ; tuya_ble_rand_generator + 26
        0x0081a90a:    f7f3fee1    ....    BL       rand ; 0x80e6d0
        0x0081a90e:    9000        ..      STR      r0,[sp,#0]
        0x0081a910:    f8450b04    E...    STR      r0,[r5],#4
        0x0081a914:    1c64        d.      ADDS     r4,r4,#1
;;;141        uint32_t cnt=len/4;
;;;142        uint8_t  remain = len%4;
;;;143        int32_t temp;
;;;144        for(uint32_t i=0; i<cnt; i++)
        0x0081a916:    42b4        .B      CMP      r4,r6
        0x0081a918:    d3f7        ..      BCC      0x81a90a ; tuya_ble_rand_generator + 14
;;;145        {
;;;146            temp = rand();
;;;147            memcpy(p_buf,(uint8_t *)&temp,4);
;;;148            p_buf += 4;
;;;149        }
;;;150        temp = rand();
        0x0081a91a:    f7f3fed9    ....    BL       rand ; 0x80e6d0
;;;151        memcpy(p_buf,(uint8_t *)&temp,remain);
        0x0081a91e:    9000        ..      STR      r0,[sp,#0]
        0x0081a920:    463a        :F      MOV      r2,r7
        0x0081a922:    4669        iF      MOV      r1,sp
        0x0081a924:    4628        (F      MOV      r0,r5
        0x0081a926:    f43ff2b8    ?...    BL       __aeabi_memcpy ; 0x59e9a
;;;152    
;;;153        return TUYA_BLE_SUCCESS;
        0x0081a92a:    2000        .       MOVS     r0,#0
;;;154    }
        0x0081a92c:    bdf8        ..      POP      {r3-r7,pc}
    tuya_ble_device_reset
;;;155    
;;;156    /*
;;;157     *@brief
;;;158     *@param
;;;159     *
;;;160     *@note
;;;161     *
;;;162     * */
;;;163    tuya_ble_status_t tuya_ble_device_reset(void)
;;;164    {
        0x0081a92e:    b510        ..      PUSH     {r4,lr}
;;;165        WDG_SystemReset(RESET_ALL, DFU_SYSTEM_RESET);
        0x0081a930:    21d3        .!      MOVS     r1,#0xd3
        0x0081a932:    2003        .       MOVS     r0,#3
        0x0081a934:    f7f3ff33    ..3.    BL       WDG_SystemReset ; 0x80e79e
;;;166        return TUYA_BLE_SUCCESS;
        0x0081a938:    2000        .       MOVS     r0,#0
;;;167    }
        0x0081a93a:    bd10        ..      POP      {r4,pc}
    tuya_ble_gap_addr_get
;;;168    
;;;169    
;;;170    tuya_ble_status_t tuya_ble_gap_addr_get(tuya_ble_gap_addr_t *p_addr)
;;;171    {
        0x0081a93c:    b510        ..      PUSH     {r4,lr}
        0x0081a93e:    4604        .F      MOV      r4,r0
;;;172        if(GAP_CAUSE_SUCCESS == gap_get_param(GAP_PARAM_BD_ADDR, p_addr->addr))
        0x0081a940:    1c41        A.      ADDS     r1,r0,#1
        0x0081a942:    f44f7000    O..p    MOV      r0,#0x200
        0x0081a946:    f431f376    1.v.    BL       gap_get_param ; 0x4c036
        0x0081a94a:    b108        ..      CBZ      r0,0x81a950 ; tuya_ble_gap_addr_get + 20
        0x0081a94c:    2001        .       MOVS     r0,#1
        0x0081a94e:    bd10        ..      POP      {r4,pc}
;;;173        {
;;;174            p_addr->addr_type = TUYA_BLE_ADDRESS_TYPE_PUBLIC;
        0x0081a950:    2000        .       MOVS     r0,#0
        0x0081a952:    7020         p      STRB     r0,[r4,#0]
;;;175            return TUYA_BLE_SUCCESS;
;;;176        }
;;;177        else
;;;178        {
;;;179            return TUYA_BLE_ERR_INTERNAL;
;;;180        }
;;;181    }
        0x0081a954:    bd10        ..      POP      {r4,pc}
    tuya_ble_gap_addr_set
;;;182    
;;;183    
;;;184    tuya_ble_status_t tuya_ble_gap_addr_set(tuya_ble_gap_addr_t *p_addr)
;;;185    {
        0x0081a956:    b510        ..      PUSH     {r4,lr}
        0x0081a958:    1c40        @.      ADDS     r0,r0,#1
;;;186        if(UpdateMAC(p_addr->addr))
        0x0081a95a:    f000fe1b    ....    BL       UpdateMAC ; 0x81b594
        0x0081a95e:    b108        ..      CBZ      r0,0x81a964 ; tuya_ble_gap_addr_set + 14
;;;187        {
;;;188            return TUYA_BLE_SUCCESS;
        0x0081a960:    2000        .       MOVS     r0,#0
        0x0081a962:    bd10        ..      POP      {r4,pc}
;;;189        }
;;;190        else
;;;191        {
;;;192            return TUYA_BLE_ERR_INTERNAL;
        0x0081a964:    2001        .       MOVS     r0,#1
;;;193        }
;;;194    }
        0x0081a966:    bd10        ..      POP      {r4,pc}
    tuya_ble_device_enter_critical
;;;195    
;;;196    static uint32_t int_mask;
;;;197    
;;;198    void tuya_ble_device_enter_critical(void)
;;;199    {
        0x0081a968:    b510        ..      PUSH     {r4,lr}
;;;200        int_mask = os_lock();
        0x0081a96a:    f40bf771    ..q.    BL       os_lock ; 0x26850
        0x0081a96e:    49c5        .I      LDR      r1,[pc,#788] ; [0x81ac84] = 0x209ae8
        0x0081a970:    6008        .`      STR      r0,[r1,#0]
;;;201    }
        0x0081a972:    bd10        ..      POP      {r4,pc}
    tuya_ble_device_exit_critical
;;;202    
;;;203    void tuya_ble_device_exit_critical(void)
;;;204    {
;;;205        os_unlock(int_mask);
        0x0081a974:    48c3        .H      LDR      r0,[pc,#780] ; [0x81ac84] = 0x209ae8
        0x0081a976:    6800        .h      LDR      r0,[r0,#0]
        0x0081a978:    f40bb777    ..w.    B        os_unlock ; 0x2686a
    tuya_ble_rtc_get_timestamp
;;;206    }
;;;207    
;;;208    tuya_ble_status_t tuya_ble_rtc_get_timestamp(uint32_t *timestamp,int32_t *timezone)
;;;209    {
;;;210        *timestamp = 0;
        0x0081a97c:    2200        ."      MOVS     r2,#0
;;;211        *timezone = 0;
        0x0081a97e:    6002        .`      STR      r2,[r0,#0]
;;;212        return TUYA_BLE_SUCCESS;
        0x0081a980:    4610        .F      MOV      r0,r2
        0x0081a982:    600a        .`      STR      r2,[r1,#0]
;;;213    }
        0x0081a984:    4770        pG      BX       lr
    tuya_ble_rtc_set_timestamp
;;;214    
;;;215    tuya_ble_status_t tuya_ble_rtc_set_timestamp(uint32_t timestamp,int32_t timezone)
;;;216    {
;;;217    
;;;218        return TUYA_BLE_SUCCESS;
        0x0081a986:    2000        .       MOVS     r0,#0
;;;219    }
        0x0081a988:    4770        pG      BX       lr
    tuya_ble_nv_init
;;;220    
;;;221    #if (TUYA_BLE_DEVICE_REGISTER_FROM_BLE)
;;;222    
;;;223    tuya_ble_status_t tuya_ble_nv_init(void)
;;;224    {    
;;;225        return TUYA_BLE_SUCCESS;
        0x0081a98a:    2000        .       MOVS     r0,#0
;;;226    }
        0x0081a98c:    4770        pG      BX       lr
    tuya_ble_nv_erase
;;;227    
;;;228    tuya_ble_status_t tuya_ble_nv_erase(uint32_t addr,uint32_t size)
;;;229    {    
;;;230        return TUYA_BLE_SUCCESS;
        0x0081a98e:    2000        .       MOVS     r0,#0
;;;231    }
        0x0081a990:    4770        pG      BX       lr
    tuya_ble_nv_write
;;;232    
;;;233    tuya_ble_status_t tuya_ble_nv_write(uint32_t addr,const uint8_t *p_data, uint32_t size)
;;;234    {
        0x0081a992:    460b        .F      MOV      r3,r1
        0x0081a994:    b510        ..      PUSH     {r4,lr}
;;;235        
;;;236        if(ftl_save((uint8_t *)p_data, addr,size)==0)
        0x0081a996:    b281        ..      UXTH     r1,r0
        0x0081a998:    b292        ..      UXTH     r2,r2
        0x0081a99a:    4618        .F      MOV      r0,r3
        0x0081a99c:    f7f0dfbc    ....    BL       ftl_save ; 0xb918
        0x0081a9a0:    2800        .(      CMP      r0,#0
        0x0081a9a2:    d000        ..      BEQ      0x81a9a6 ; tuya_ble_nv_write + 20
;;;237        {    
;;;238            return TUYA_BLE_SUCCESS;
;;;239        }
;;;240        else
;;;241        {
;;;242            return TUYA_BLE_ERR_BUSY;
        0x0081a9a4:    200b        .       MOVS     r0,#0xb
;;;243        }
;;;244    }
        0x0081a9a6:    bd10        ..      POP      {r4,pc}
    tuya_ble_nv_read
;;;245    
;;;246    
;;;247    tuya_ble_status_t tuya_ble_nv_read(uint32_t addr,uint8_t *p_data, uint32_t size)
;;;248    {
        0x0081a9a8:    460b        .F      MOV      r3,r1
        0x0081a9aa:    b510        ..      PUSH     {r4,lr}
;;;249        if(ftl_load((uint8_t *)p_data, addr,size)==0)
        0x0081a9ac:    b281        ..      UXTH     r1,r0
        0x0081a9ae:    b292        ..      UXTH     r2,r2
        0x0081a9b0:    4618        .F      MOV      r0,r3
        0x0081a9b2:    f7f0dfa8    ....    BL       ftl_load ; 0xb906
        0x0081a9b6:    2800        .(      CMP      r0,#0
        0x0081a9b8:    d000        ..      BEQ      0x81a9bc ; tuya_ble_nv_read + 20
;;;250        {    
;;;251            return TUYA_BLE_SUCCESS;
;;;252        }
;;;253        else
;;;254        {
;;;255            return TUYA_BLE_ERR_BUSY;
        0x0081a9ba:    200b        .       MOVS     r0,#0xb
;;;256        }
;;;257    }
        0x0081a9bc:    bd10        ..      POP      {r4,pc}
    tuya_ble_os_task_create
;;;258    
;;;259    #endif
;;;260    
;;;261    
;;;262    
;;;263    bool tuya_ble_os_task_create(void **pp_handle, const char *p_name, void (*p_routine)(void *),void *p_param, uint16_t stack_size, uint16_t priority)
;;;264    {
        0x0081a9be:    b57c        |.      PUSH     {r2-r6,lr}
        0x0081a9c0:    e9dd4506    ...E    LDRD     r4,r5,[sp,#0x18]
        0x0081a9c4:    e9cd4500    ...E    STRD     r4,r5,[sp,#0]
;;;265        return os_task_create(pp_handle, p_name, p_routine,p_param, stack_size, priority);
        0x0081a9c8:    f40cf002    ....    BL       os_task_create ; 0x269d0
;;;266    }
        0x0081a9cc:    bd7c        |.      POP      {r2-r6,pc}
    tuya_ble_os_task_delete
;;;267    
;;;268    bool tuya_ble_os_task_delete(void *p_handle)
;;;269    {
;;;270        return os_task_delete(p_handle);
        0x0081a9ce:    f40cb022    ..".    B        os_task_delete ; 0x26a16
    tuya_ble_os_task_suspend
;;;271    }
;;;272    
;;;273    bool tuya_ble_os_task_suspend(void *p_handle)
;;;274    {
;;;275        return os_task_suspend(p_handle);
        0x0081a9d2:    f40cb031    ..1.    B        os_task_suspend ; 0x26a38
    tuya_ble_os_task_resume
;;;276    }
;;;277    
;;;278    bool tuya_ble_os_task_resume(void *p_handle)
;;;279    {
;;;280        return os_task_resume(p_handle);
        0x0081a9d6:    f40cb040    ..@.    B        os_task_resume ; 0x26a5a
    tuya_ble_os_msg_queue_create
;;;281    }
;;;282    
;;;283    bool tuya_ble_os_msg_queue_create(void **pp_handle, uint32_t msg_num, uint32_t msg_size)
;;;284    {
        0x0081a9da:    b508        ..      PUSH     {r3,lr}
;;;285        return os_msg_queue_create(pp_handle, msg_num, msg_size);
        0x0081a9dc:    f240131d    @...    MOV      r3,#0x11d
        0x0081a9e0:    9300        ..      STR      r3,[sp,#0]
        0x0081a9e2:    4ba9        .K      LDR      r3,[pc,#676] ; [0x81ac88] = 0x81c468
        0x0081a9e4:    f40bf286    ....    BL       os_msg_queue_create_intern ; 0x25ef4
;;;286    }
        0x0081a9e8:    bd08        ..      POP      {r3,pc}
    tuya_ble_os_msg_queue_delete
;;;287    
;;;288    bool tuya_ble_os_msg_queue_delete(void *p_handle)
;;;289    {
;;;290        return os_msg_queue_delete(p_handle);
        0x0081a9ea:    49a7        .I      LDR      r1,[pc,#668] ; [0x81ac88] = 0x81c468
        0x0081a9ec:    f44f7291    O..r    MOV      r2,#0x122
        0x0081a9f0:    311d        .1      ADDS     r1,r1,#0x1d
        0x0081a9f2:    f40bb2ad    ....    B        os_msg_queue_delete_intern ; 0x25f50
    tuya_ble_os_msg_queue_peek
;;;291    }
;;;292    
;;;293    bool tuya_ble_os_msg_queue_peek(void *p_handle, uint32_t *p_msg_num)
;;;294    {
;;;295        return os_msg_queue_peek(p_handle, p_msg_num);
        0x0081a9f6:    4aa4        .J      LDR      r2,[pc,#656] ; [0x81ac88] = 0x81c468
        0x0081a9f8:    f2401327    @.'.    MOV      r3,#0x127
        0x0081a9fc:    323a        :2      ADDS     r2,r2,#0x3a
        0x0081a9fe:    f40bb2c9    ....    B        os_msg_queue_peek_intern ; 0x25f94
    tuya_ble_os_msg_queue_send
;;;296    }
;;;297    
;;;298    bool tuya_ble_os_msg_queue_send(void *p_handle, void *p_msg, uint32_t wait_ms)
;;;299    {
        0x0081aa02:    b508        ..      PUSH     {r3,lr}
;;;300        return os_msg_send(p_handle, p_msg, wait_ms);
        0x0081aa04:    f44f7396    O..s    MOV      r3,#0x12c
        0x0081aa08:    9300        ..      STR      r3,[sp,#0]
        0x0081aa0a:    4b9f        .K      LDR      r3,[pc,#636] ; [0x81ac88] = 0x81c468
        0x0081aa0c:    3355        U3      ADDS     r3,r3,#0x55
        0x0081aa0e:    f40bf2e9    ....    BL       os_msg_send_intern ; 0x25fe4
;;;301    }
        0x0081aa12:    bd08        ..      POP      {r3,pc}
    tuya_ble_os_msg_queue_recv
;;;302    
;;;303    bool tuya_ble_os_msg_queue_recv(void *p_handle, void *p_msg, uint32_t wait_ms)
;;;304    {
        0x0081aa14:    b508        ..      PUSH     {r3,lr}
;;;305        return os_msg_recv(p_handle, p_msg, wait_ms);
        0x0081aa16:    f2401331    @.1.    MOV      r3,#0x131
        0x0081aa1a:    9300        ..      STR      r3,[sp,#0]
        0x0081aa1c:    4b9a        .K      LDR      r3,[pc,#616] ; [0x81ac88] = 0x81c468
        0x0081aa1e:    3370        p3      ADDS     r3,r3,#0x70
        0x0081aa20:    f40bf310    ....    BL       os_msg_recv_intern ; 0x26044
;;;306    }
        0x0081aa24:    bd08        ..      POP      {r3,pc}
    tuya_ble_event_queue_send_port
;;;307    
;;;308    #if !TUYA_BLE_SELF_BUILT_TASK
;;;309    bool tuya_ble_event_queue_send_port(tuya_ble_evt_param_t *evt, uint32_t wait_ms)
;;;310    {
;;;311        return tuya_event_queue_send(evt,wait_ms);
        0x0081aa26:    f7f4bc35    ..5.    B        tuya_event_queue_send ; 0x80f294
    tuya_ble_aes128_ecb_encrypt
;;;312    }
;;;313    #endif
;;;314    
;;;315    bool tuya_ble_aes128_ecb_encrypt(uint8_t *key,uint8_t *input,uint16_t input_len,uint8_t *output)
;;;316    {
        0x0081aa2a:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0081aa2e:    4607        .F      MOV      r7,r0
        0x0081aa30:    461d        .F      MOV      r5,r3
        0x0081aa32:    460e        .F      MOV      r6,r1
        0x0081aa34:    0710        ..      LSLS     r0,r2,#28
        0x0081aa36:    d002        ..      BEQ      0x81aa3e ; tuya_ble_aes128_ecb_encrypt + 20
;;;317        uint16_t length;
;;;318        if(input_len%16)
;;;319        {
;;;320            return false;
        0x0081aa38:    2000        .       MOVS     r0,#0
        0x0081aa3a:    e8bd81f0    ....    POP      {r4-r8,pc}
;;;321        }
;;;322        length = input_len;
        0x0081aa3e:    4614        .F      MOV      r4,r2
;;;323        while( length > 0 )
        0x0081aa40:    e008        ..      B        0x81aa54 ; tuya_ble_aes128_ecb_encrypt + 42
        0x0081aa42:    462a        *F      MOV      r2,r5
        0x0081aa44:    4639        9F      MOV      r1,r7
        0x0081aa46:    4630        0F      MOV      r0,r6
        0x0081aa48:    f7eed8dd    ....    BL       aes128_ecb_encrypt ; 0x8c06
        0x0081aa4c:    3c10        .<      SUBS     r4,r4,#0x10
        0x0081aa4e:    3510        .5      ADDS     r5,r5,#0x10
        0x0081aa50:    b2a4        ..      UXTH     r4,r4
        0x0081aa52:    3610        .6      ADDS     r6,r6,#0x10
        0x0081aa54:    2c00        .,      CMP      r4,#0
        0x0081aa56:    d1f4        ..      BNE      0x81aa42 ; tuya_ble_aes128_ecb_encrypt + 24
;;;324        {
;;;325            aes128_ecb_encrypt(input, key,output );
;;;326            input  += 16;
;;;327            output += 16;
;;;328            length -= 16;
;;;329        }
;;;330    
;;;331        return true;
        0x0081aa58:    2001        .       MOVS     r0,#1
;;;332    }
        0x0081aa5a:    e7ee        ..      B        0x81aa3a ; tuya_ble_aes128_ecb_encrypt + 16
    tuya_ble_aes128_ecb_decrypt
;;;333    
;;;334    bool tuya_ble_aes128_ecb_decrypt(uint8_t *key,uint8_t *input,uint16_t input_len,uint8_t *output)
;;;335    {
        0x0081aa5c:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0081aa60:    4607        .F      MOV      r7,r0
        0x0081aa62:    461d        .F      MOV      r5,r3
        0x0081aa64:    460e        .F      MOV      r6,r1
        0x0081aa66:    0710        ..      LSLS     r0,r2,#28
;;; sample\tuya_ble_port_rtl8762.c (335)
        0x0081aa68:    d001        ..      BEQ      0x81aa6e ; tuya_ble_aes128_ecb_decrypt + 18
;;;336        uint16_t length;
;;;337        if(input_len%16)
;;;338        {
;;;339            return false;
        0x0081aa6a:    2000        .       MOVS     r0,#0
        0x0081aa6c:    e7e5        ..      B        0x81aa3a ; tuya_ble_aes128_ecb_encrypt + 16
;;;340        }
;;;341        length = input_len;
        0x0081aa6e:    4614        .F      MOV      r4,r2
;;;342        while( length > 0 )
        0x0081aa70:    e008        ..      B        0x81aa84 ; tuya_ble_aes128_ecb_decrypt + 40
        0x0081aa72:    462a        *F      MOV      r2,r5
        0x0081aa74:    4639        9F      MOV      r1,r7
        0x0081aa76:    4630        0F      MOV      r0,r6
        0x0081aa78:    f7eed8f3    ....    BL       aes128_ecb_decrypt ; 0x8c62
        0x0081aa7c:    3c10        .<      SUBS     r4,r4,#0x10
        0x0081aa7e:    3510        .5      ADDS     r5,r5,#0x10
        0x0081aa80:    b2a4        ..      UXTH     r4,r4
        0x0081aa82:    3610        .6      ADDS     r6,r6,#0x10
        0x0081aa84:    2c00        .,      CMP      r4,#0
        0x0081aa86:    d1f4        ..      BNE      0x81aa72 ; tuya_ble_aes128_ecb_decrypt + 22
;;;343        {
;;;344            aes128_ecb_decrypt(input, key,output );
;;;345            input  += 16;
;;;346            output += 16;
;;;347            length -= 16;
;;;348        }    
;;;349        return true;
        0x0081aa88:    2001        .       MOVS     r0,#1
;;;350    }
        0x0081aa8a:    e7d6        ..      B        0x81aa3a ; tuya_ble_aes128_ecb_encrypt + 16
    tuya_ble_aes128_cbc_encrypt
;;;351    
;;;352    bool tuya_ble_aes128_cbc_encrypt(uint8_t *key,uint8_t *iv,uint8_t *input,uint16_t input_len,uint8_t *output)
;;;353    {
        0x0081aa8c:    b570        p.      PUSH     {r4-r6,lr}
        0x0081aa8e:    b086        ..      SUB      sp,sp,#0x18
        0x0081aa90:    4605        .F      MOV      r5,r0
        0x0081aa92:    2000        .       MOVS     r0,#0
;;; sample\tuya_ble_port_rtl8762.c (353)
        0x0081aa94:    4614        .F      MOV      r4,r2
        0x0081aa96:    9a0a        ..      LDR      r2,[sp,#0x28]
        0x0081aa98:    9001        ..      STR      r0,[sp,#4]
        0x0081aa9a:    9002        ..      STR      r0,[sp,#8]
        0x0081aa9c:    9003        ..      STR      r0,[sp,#0xc]
        0x0081aa9e:    9004        ..      STR      r0,[sp,#0x10]
        0x0081aaa0:    0718        ..      LSLS     r0,r3,#28
        0x0081aaa2:    d002        ..      BEQ      0x81aaaa ; tuya_ble_aes128_cbc_encrypt + 30
;;;354        uint32_t IV[4] = {0};
;;;355        uint8_t i = 0;
;;;356        uint32_t len; 
;;;357        if(input_len%16)
;;;358        {
;;;359            return false;
        0x0081aaa4:    2000        .       MOVS     r0,#0
        0x0081aaa6:    b006        ..      ADD      sp,sp,#0x18
        0x0081aaa8:    bd70        p.      POP      {r4-r6,pc}
;;;360        }
;;;361    
;;;362        IV[0] = (iv[12]<<24)|(iv[13]<<16)|(iv[14]<<8)|iv[15];
        0x0081aaaa:    68c8        .h      LDR      r0,[r1,#0xc]
        0x0081aaac:    7bce        .{      LDRB     r6,[r1,#0xf]
        0x0081aaae:    ba00        ..      REV      r0,r0
        0x0081aab0:    f02000ff     ...    BIC      r0,r0,#0xff
        0x0081aab4:    4330        0C      ORRS     r0,r0,r6
;;;363        IV[1] = (iv[8]<<24)|(iv[9]<<16)|(iv[10]<<8)|iv[11];
        0x0081aab6:    9001        ..      STR      r0,[sp,#4]
        0x0081aab8:    6888        .h      LDR      r0,[r1,#8]
        0x0081aaba:    7ace        .z      LDRB     r6,[r1,#0xb]
        0x0081aabc:    ba00        ..      REV      r0,r0
        0x0081aabe:    f02000ff     ...    BIC      r0,r0,#0xff
        0x0081aac2:    4330        0C      ORRS     r0,r0,r6
;;;364        IV[2] = (iv[4]<<24)|(iv[5]<<16)|(iv[6]<<8)|iv[7];
        0x0081aac4:    9002        ..      STR      r0,[sp,#8]
        0x0081aac6:    6848        Hh      LDR      r0,[r1,#4]
        0x0081aac8:    79ce        .y      LDRB     r6,[r1,#7]
        0x0081aaca:    ba00        ..      REV      r0,r0
        0x0081aacc:    f02000ff     ...    BIC      r0,r0,#0xff
        0x0081aad0:    4330        0C      ORRS     r0,r0,r6
;;;365        IV[3] = (iv[0]<<24)|(iv[1]<<16)|(iv[2]<<8)|iv[3];
        0x0081aad2:    9003        ..      STR      r0,[sp,#0xc]
        0x0081aad4:    6808        .h      LDR      r0,[r1,#0]
        0x0081aad6:    78c9        .x      LDRB     r1,[r1,#3]
        0x0081aad8:    ba00        ..      REV      r0,r0
        0x0081aada:    f02000ff     ...    BIC      r0,r0,#0xff
        0x0081aade:    4308        .C      ORRS     r0,r0,r1
;;;366        len = input_len/4;
        0x0081aae0:    9004        ..      STR      r0,[sp,#0x10]
        0x0081aae2:    0898        ..      LSRS     r0,r3,#2
;;;367    
;;;368        aes128_cbc_encrypt(input, key, output,IV,len);
        0x0081aae4:    9000        ..      STR      r0,[sp,#0]
        0x0081aae6:    ab01        ..      ADD      r3,sp,#4
        0x0081aae8:    4629        )F      MOV      r1,r5
        0x0081aaea:    4620         F      MOV      r0,r4
        0x0081aaec:    f7f4fa4b    ..K.    BL       aes128_cbc_encrypt ; 0x80ef86
;;;369        
;;;370        return true;
        0x0081aaf0:    2001        .       MOVS     r0,#1
;;;371    }
        0x0081aaf2:    e7d8        ..      B        0x81aaa6 ; tuya_ble_aes128_cbc_encrypt + 26
    tuya_ble_aes128_cbc_decrypt
;;;372    
;;;373    bool tuya_ble_aes128_cbc_decrypt(uint8_t *key,uint8_t *iv,uint8_t *input,uint16_t input_len,uint8_t *output)
;;;374    {
        0x0081aaf4:    b570        p.      PUSH     {r4-r6,lr}
        0x0081aaf6:    b086        ..      SUB      sp,sp,#0x18
        0x0081aaf8:    4605        .F      MOV      r5,r0
        0x0081aafa:    2000        .       MOVS     r0,#0
;;; sample\tuya_ble_port_rtl8762.c (374)
        0x0081aafc:    4614        .F      MOV      r4,r2
        0x0081aafe:    9a0a        ..      LDR      r2,[sp,#0x28]
        0x0081ab00:    9001        ..      STR      r0,[sp,#4]
        0x0081ab02:    9002        ..      STR      r0,[sp,#8]
        0x0081ab04:    9003        ..      STR      r0,[sp,#0xc]
        0x0081ab06:    9004        ..      STR      r0,[sp,#0x10]
        0x0081ab08:    0718        ..      LSLS     r0,r3,#28
        0x0081ab0a:    d001        ..      BEQ      0x81ab10 ; tuya_ble_aes128_cbc_decrypt + 28
;;;375        uint32_t IV[4] = {0};
;;;376        uint8_t i = 0;
;;;377        uint32_t len; 
;;;378        
;;;379        if(input_len%16)
;;;380        {
;;;381            return false;
        0x0081ab0c:    2000        .       MOVS     r0,#0
        0x0081ab0e:    e7ca        ..      B        0x81aaa6 ; tuya_ble_aes128_cbc_encrypt + 26
;;;382        }
;;;383    
;;;384        IV[0] = (iv[12]<<24)|(iv[13]<<16)|(iv[14]<<8)|iv[15];
        0x0081ab10:    68c8        .h      LDR      r0,[r1,#0xc]
        0x0081ab12:    7bce        .{      LDRB     r6,[r1,#0xf]
        0x0081ab14:    ba00        ..      REV      r0,r0
        0x0081ab16:    f02000ff     ...    BIC      r0,r0,#0xff
        0x0081ab1a:    4330        0C      ORRS     r0,r0,r6
;;;385        IV[1] = (iv[8]<<24)|(iv[9]<<16)|(iv[10]<<8)|iv[11];
        0x0081ab1c:    9001        ..      STR      r0,[sp,#4]
        0x0081ab1e:    6888        .h      LDR      r0,[r1,#8]
        0x0081ab20:    7ace        .z      LDRB     r6,[r1,#0xb]
        0x0081ab22:    ba00        ..      REV      r0,r0
        0x0081ab24:    f02000ff     ...    BIC      r0,r0,#0xff
        0x0081ab28:    4330        0C      ORRS     r0,r0,r6
;;;386        IV[2] = (iv[4]<<24)|(iv[5]<<16)|(iv[6]<<8)|iv[7];
        0x0081ab2a:    9002        ..      STR      r0,[sp,#8]
        0x0081ab2c:    6848        Hh      LDR      r0,[r1,#4]
        0x0081ab2e:    79ce        .y      LDRB     r6,[r1,#7]
        0x0081ab30:    ba00        ..      REV      r0,r0
        0x0081ab32:    f02000ff     ...    BIC      r0,r0,#0xff
        0x0081ab36:    4330        0C      ORRS     r0,r0,r6
;;;387        IV[3] = (iv[0]<<24)|(iv[1]<<16)|(iv[2]<<8)|iv[3];
        0x0081ab38:    9003        ..      STR      r0,[sp,#0xc]
        0x0081ab3a:    6808        .h      LDR      r0,[r1,#0]
        0x0081ab3c:    78c9        .x      LDRB     r1,[r1,#3]
        0x0081ab3e:    ba00        ..      REV      r0,r0
        0x0081ab40:    f02000ff     ...    BIC      r0,r0,#0xff
        0x0081ab44:    4308        .C      ORRS     r0,r0,r1
;;;388        len = input_len/4;
        0x0081ab46:    9004        ..      STR      r0,[sp,#0x10]
        0x0081ab48:    0898        ..      LSRS     r0,r3,#2
;;;389    
;;;390        aes128_cbc_decrypt(input,key, output, IV,len);
        0x0081ab4a:    9000        ..      STR      r0,[sp,#0]
        0x0081ab4c:    ab01        ..      ADD      r3,sp,#4
        0x0081ab4e:    4629        )F      MOV      r1,r5
        0x0081ab50:    4620         F      MOV      r0,r4
        0x0081ab52:    f7f4fa75    ..u.    BL       aes128_cbc_decrypt ; 0x80f040
;;;391        
;;;392        return true;
        0x0081ab56:    2001        .       MOVS     r0,#1
;;;393    }
        0x0081ab58:    e7a5        ..      B        0x81aaa6 ; tuya_ble_aes128_cbc_encrypt + 26
    tuya_ble_md5_crypt
;;;394    
;;;395    bool tuya_ble_md5_crypt(uint8_t *input,uint16_t input_len,uint8_t *output)
;;;396    {
        0x0081ab5a:    b570        p.      PUSH     {r4-r6,lr}
        0x0081ab5c:    b096        ..      SUB      sp,sp,#0x58
        0x0081ab5e:    4605        .F      MOV      r5,r0
        0x0081ab60:    4616        .F      MOV      r6,r2
        0x0081ab62:    460c        .F      MOV      r4,r1
;;;397        mbedtls_md5_context md5_ctx;
;;;398        mbedtls_md5_init(&md5_ctx);
        0x0081ab64:    4668        hF      MOV      r0,sp
        0x0081ab66:    f7fdf949    ..I.    BL       mbedtls_md5_init ; 0x817dfc
;;;399        mbedtls_md5_starts(&md5_ctx);
        0x0081ab6a:    4668        hF      MOV      r0,sp
        0x0081ab6c:    f7fdf961    ..a.    BL       mbedtls_md5_starts ; 0x817e32
;;;400        mbedtls_md5_update(&md5_ctx, input, input_len);
        0x0081ab70:    4622        "F      MOV      r2,r4
        0x0081ab72:    4629        )F      MOV      r1,r5
        0x0081ab74:    4668        hF      MOV      r0,sp
        0x0081ab76:    f7fdfd54    ..T.    BL       mbedtls_md5_update ; 0x818622
;;;401        mbedtls_md5_finish(&md5_ctx, output);
        0x0081ab7a:    4631        1F      MOV      r1,r6
        0x0081ab7c:    4668        hF      MOV      r0,sp
        0x0081ab7e:    f7fdfdc1    ....    BL       mbedtls_md5_finish ; 0x818704
;;;402        mbedtls_md5_free(&md5_ctx);    
        0x0081ab82:    4668        hF      MOV      r0,sp
        0x0081ab84:    f7fdf93d    ..=.    BL       mbedtls_md5_free ; 0x817e02
        0x0081ab88:    b016        ..      ADD      sp,sp,#0x58
;;;403        
;;;404        return true;
        0x0081ab8a:    2001        .       MOVS     r0,#1
;;;405    }
        0x0081ab8c:    bd70        p.      POP      {r4-r6,pc}
    tuya_ble_hmac_sha1_crypt
;;;406    
;;;407    bool tuya_ble_hmac_sha1_crypt(const uint8_t *key, uint32_t key_len, const uint8_t *input, uint32_t input_len, uint8_t *output)
;;;408    {    
        0x0081ab8e:    b538        8.      PUSH     {r3-r5,lr}
;;;409        hmac_sha1_crypt(key, key_len, input, input_len, output);
        0x0081ab90:    9c04        ..      LDR      r4,[sp,#0x10]
        0x0081ab92:    9400        ..      STR      r4,[sp,#0]
        0x0081ab94:    f7fdf81a    ....    BL       hmac_sha1_crypt ; 0x817bcc
;;;410    	return true;
        0x0081ab98:    2001        .       MOVS     r0,#1
;;;411    }
        0x0081ab9a:    bd38        8.      POP      {r3-r5,pc}
    tuya_ble_hmac_sha256_crypt
;;;412    
;;;413    bool tuya_ble_hmac_sha256_crypt(const uint8_t *key, uint32_t key_len, const uint8_t *input, uint32_t input_len, uint8_t *output)
;;;414    {
        0x0081ab9c:    b538        8.      PUSH     {r3-r5,lr}
;;;415        hmac_sha256_crypt(key, key_len, input, input_len, output);
        0x0081ab9e:    9c04        ..      LDR      r4,[sp,#0x10]
        0x0081aba0:    9400        ..      STR      r4,[sp,#0]
        0x0081aba2:    f7fdf8b0    ....    BL       hmac_sha256_crypt ; 0x817d06
;;;416    	return true;
        0x0081aba6:    2001        .       MOVS     r0,#1
;;;417    }
        0x0081aba8:    bd38        8.      POP      {r3-r5,pc}
    get_args
        0x0081abaa:    2100        .!      MOVS     r1,#0
;;;418    
;;;419    #if TUYA_BLE_LOG_ENABLE
;;;420    
;;;421    
;;;422    uint8_t get_args(const char *format)
;;;423    {                                          
        0x0081abac:    2800        .(      CMP      r0,#0
        0x0081abae:    d00f        ..      BEQ      0x81abd0 ; get_args + 38
        0x0081abb0:    e007        ..      B        0x81abc2 ; get_args + 24
;;;424        uint8_t arg_no = 0;                    
;;;425        if(!format)                             
;;;426        {                                        
;;;427            return 0;                              
;;;428        }                                          
;;;429        for (; *(format+1) != '\0'; format++)      
;;;430        {                                           
;;;431            if((*format=='%')&&(*(format+1)!='%'))   
        0x0081abb2:    7803        .x      LDRB     r3,[r0,#0]
        0x0081abb4:    2b25        %+      CMP      r3,#0x25
        0x0081abb6:    d103        ..      BNE      0x81abc0 ; get_args + 22
        0x0081abb8:    2a25        %*      CMP      r2,#0x25
        0x0081abba:    d001        ..      BEQ      0x81abc0 ; get_args + 22
        0x0081abbc:    1c49        I.      ADDS     r1,r1,#1
;;;432            {                                        
;;;433                arg_no++;                           
        0x0081abbe:    b2c9        ..      UXTB     r1,r1
        0x0081abc0:    1c40        @.      ADDS     r0,r0,#1
        0x0081abc2:    7842        Bx      LDRB     r2,[r0,#1]
        0x0081abc4:    2a00        .*      CMP      r2,#0
        0x0081abc6:    d1f4        ..      BNE      0x81abb2 ; get_args + 8
;;;434            }                                       
;;;435        }                                               
;;;436        if(arg_no>8)                                 
        0x0081abc8:    2908        .)      CMP      r1,#8
        0x0081abca:    d900        ..      BLS      0x81abce ; get_args + 36
;;;437        {                                             
;;;438            arg_no = 8;                               
        0x0081abcc:    2108        .!      MOVS     r1,#8
;;;439        }                                               
;;;440        return arg_no;        
        0x0081abce:    4608        .F      MOV      r0,r1
;;;441    }   
        0x0081abd0:    4770        pG      BX       lr
    log_hexdump
;;;442    
;;;443    
;;;444    void log_hexdump(const char *name, uint8_t width, uint8_t *buf, uint16_t size)
;;;445    {
        0x0081abd2:    e92d5ffc    -.._    PUSH     {r2-r12,lr}
        0x0081abd6:    460e        .F      MOV      r6,r1
        0x0081abd8:    fbb3f1f6    ....    UDIV     r1,r3,r6
        0x0081abdc:    fbb3f5f6    ....    UDIV     r5,r3,r6
        0x0081abe0:    fb063111    ...1    MLS      r1,r6,r1,r3
        0x0081abe4:    4691        .F      MOV      r9,r2
        0x0081abe6:    ea5f0801    _...    MOVS     r8,r1
        0x0081abea:    d002        ..      BEQ      0x81abf2 ; log_hexdump + 32
;;;446        uint16_t total_line;
;;;447        uint16_t line = size/width;
;;;448        uint16_t line_remain = size%width;
;;;449        if(line_remain>0)
;;;450        {
;;;451            total_line = line + 1;
        0x0081abec:    1c69        i.      ADDS     r1,r5,#1
        0x0081abee:    b28f        ..      UXTH     r7,r1
        0x0081abf0:    e000        ..      B        0x81abf4 ; log_hexdump + 34
;;;452        }
;;;453        else
;;;454        {
;;;455            total_line = line;
        0x0081abf2:    462f        /F      MOV      r7,r5
;;;456        }
;;;457        
;;;458    	if(line>3)
        0x0081abf4:    2d03        .-      CMP      r5,#3
        0x0081abf6:    d900        ..      BLS      0x81abfa ; log_hexdump + 40
;;;459    		line = 3;
        0x0081abf8:    2503        .%      MOVS     r5,#3
;;;460        APP_PRINT_INFO1("HEX:%s\n",TRACE_STRING(name));
        0x0081abfa:    4601        .F      MOV      r1,r0
        0x0081abfc:    f04f5005    O..P    MOV      r0,#0x21400000
        0x0081ac00:    f7edd933    ..3.    BL       trace_string ; 0x7e6a
        0x0081ac04:    f8dfa088    ....    LDR      r10,[pc,#136] ; [0x81ac90] = 0x21103002
        0x0081ac08:    4603        .F      MOV      r3,r0
        0x0081ac0a:    2201        ."      MOVS     r2,#1
        0x0081ac0c:    491f        .I      LDR      r1,[pc,#124] ; [0x81ac8c] = 0x88042b0
        0x0081ac0e:    4650        PF      MOV      r0,r10
        0x0081ac10:    f7ecdf25    ..%.    BL       log_buffer ; 0x7a5e
        0x0081ac14:    481f        .H      LDR      r0,[pc,#124] ; [0x81ac94] = 0x21500000
        0x0081ac16:    46d3        .F      MOV      r11,r10
;;;461        uint8_t i = 0;
        0x0081ac18:    2400        .$      MOVS     r4,#0
        0x0081ac1a:    4682        .F      MOV      r10,r0
;;;462        for(i = 0;i<line;i++)
        0x0081ac1c:    e010        ..      B        0x81ac40 ; log_hexdump + 110
        0x0081ac1e:    fb149206    ....    SMLABB   r2,r4,r6,r9
        0x0081ac22:    4631        1F      MOV      r1,r6
        0x0081ac24:    4650        PF      MOV      r0,r10
        0x0081ac26:    f7edd970    ..p.    BL       trace_binary ; 0x7f0a
        0x0081ac2a:    1c64        d.      ADDS     r4,r4,#1
        0x0081ac2c:    e9cd4000    ...@    STRD     r4,r0,[sp,#0]
        0x0081ac30:    4916        .I      LDR      r1,[pc,#88] ; [0x81ac8c] = 0x88042b0
        0x0081ac32:    463b        ;F      MOV      r3,r7
        0x0081ac34:    2203        ."      MOVS     r2,#3
        0x0081ac36:    310c        .1      ADDS     r1,r1,#0xc
        0x0081ac38:    4658        XF      MOV      r0,r11
        0x0081ac3a:    f7ecdf10    ....    BL       log_buffer ; 0x7a5e
        0x0081ac3e:    b2e4        ..      UXTB     r4,r4
        0x0081ac40:    42ac        .B      CMP      r4,r5
        0x0081ac42:    d3ec        ..      BCC      0x81ac1e ; log_hexdump + 76
;;;463        {
;;;464            APP_PRINT_INFO3("[%d-%d]:%b\n",total_line,i+1,TRACE_BINARY(width, buf+i*width));
;;;465        }
;;;466        if(line_remain>0)
        0x0081ac44:    f1b80f00    ....    CMP      r8,#0
        0x0081ac48:    d00e        ..      BEQ      0x81ac68 ; log_hexdump + 150
;;;467        {
;;;468            APP_PRINT_INFO3("[%d-%d]:%b\n",total_line,total_line,TRACE_BINARY(line_remain, buf+i*width));
        0x0081ac4a:    fb149206    ....    SMLABB   r2,r4,r6,r9
        0x0081ac4e:    4641        AF      MOV      r1,r8
        0x0081ac50:    4650        PF      MOV      r0,r10
        0x0081ac52:    f7edd95a    ..Z.    BL       trace_binary ; 0x7f0a
        0x0081ac56:    e9cd7000    ...p    STRD     r7,r0,[sp,#0]
        0x0081ac5a:    490c        .I      LDR      r1,[pc,#48] ; [0x81ac8c] = 0x88042b0
        0x0081ac5c:    463b        ;F      MOV      r3,r7
        0x0081ac5e:    2203        ."      MOVS     r2,#3
        0x0081ac60:    311c        .1      ADDS     r1,r1,#0x1c
        0x0081ac62:    4658        XF      MOV      r0,r11
        0x0081ac64:    f7ecdefb    ....    BL       log_buffer ; 0x7a5e
;;;469        }
;;;470    }
        0x0081ac68:    e8bd9ffc    ....    POP      {r2-r12,pc}
    $d
        0x0081ac6c:    40012000    . .@    DCD    1073815552
        0x0081ac70:    61797574    tuya    DCD    1635349876
        0x0081ac74:    656c625f    _ble    DCD    1701601887
        0x0081ac78:    6b64735f    _sdk    DCD    1801745247
        0x0081ac7c:    6d69745f    _tim    DCD    1835627615
        0x0081ac80:    00007265    er..    DCD    29285
        0x0081ac84:    00209ae8    .. .    DCD    2136808
        0x0081ac88:    0081c468    h...    DCD    8504424
        0x0081ac8c:    088042b0    .B..    DCD    142623408
        0x0081ac90:    21103002    .0.!    DCD    554708994
        0x0081ac94:    21500000    ..P!    DCD    558891008
    $t
    .text
    gap_lib_handle_btif_msg
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (31)
        0x0081ac98:    b510        ..      PUSH     {r4,lr}
        0x0081ac9a:    2201        ."      MOVS     r2,#1
        0x0081ac9c:    700a        .p      STRB     r2,[r1,#0]
        0x0081ac9e:    8841        A.      LDRH     r1,[r0,#2]
        0x0081aca0:    2400        .$      MOVS     r4,#0
        0x0081aca2:    290e        .)      CMP      r1,#0xe
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (31)
        0x0081aca4:    d004        ..      BEQ      0x81acb0 ; gap_lib_handle_btif_msg + 24
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (35)
        0x0081aca6:    290f        .)      CMP      r1,#0xf
        0x0081aca8:    d00b        ..      BEQ      0x81acc2 ; gap_lib_handle_btif_msg + 42
        0x0081acaa:    2922        ")      CMP      r1,#0x22
        0x0081acac:    d10c        ..      BNE      0x81acc8 ; gap_lib_handle_btif_msg + 48
        0x0081acae:    e003        ..      B        0x81acb8 ; gap_lib_handle_btif_msg + 32
        0x0081acb0:    1d00        ..      ADDS     r0,r0,#4
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (39)
        0x0081acb2:    f000f962    ..b.    BL       le_handle_vendor_cmd_rsp ; 0x81af7a
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (40)
        0x0081acb6:    e007        ..      B        0x81acc8 ; gap_lib_handle_btif_msg + 48
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (44)
        0x0081acb8:    8880        ..      LDRH     r0,[r0,#4]
        0x0081acba:    f000f850    ..P.    BL       le_handle_sw_reset_rsp ; 0x81ad5e
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (45)
        0x0081acbe:    2401        .$      MOVS     r4,#1
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (46)
        0x0081acc0:    e002        ..      B        0x81acc8 ; gap_lib_handle_btif_msg + 48
        0x0081acc2:    1d00        ..      ADDS     r0,r0,#4
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (109)
        0x0081acc4:    f000f985    ....    BL       le_handle_vendor_evt_info ; 0x81afd2
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (117)
        0x0081acc8:    4620         F      MOV      r0,r4
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (118)
        0x0081acca:    bd10        ..      POP      {r4,pc}
    gap_lib_init
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (121)
        0x0081accc:    b530        0.      PUSH     {r4,r5,lr}
        0x0081acce:    b087        ..      SUB      sp,sp,#0x1c
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (122)
        0x0081acd0:    2000        .       MOVS     r0,#0
        0x0081acd2:    9005        ..      STR      r0,[sp,#0x14]
        0x0081acd4:    2401        .$      MOVS     r4,#1
        0x0081acd6:    9006        ..      STR      r0,[sp,#0x18]
        0x0081acd8:    e9cd4000    ...@    STRD     r4,r0,[sp,#0]
        0x0081acdc:    4d0f        .M      LDR      r5,[pc,#60] ; [0x81ad1c] = 0x21103500
        0x0081acde:    9003        ..      STR      r0,[sp,#0xc]
        0x0081ace0:    9004        ..      STR      r0,[sp,#0x10]
        0x0081ace2:    9002        ..      STR      r0,[sp,#8]
        0x0081ace4:    230d        .#      MOVS     r3,#0xd
        0x0081ace6:    2208        ."      MOVS     r2,#8
        0x0081ace8:    490b        .I      LDR      r1,[pc,#44] ; [0x81ad18] = 0x88042dc
        0x0081acea:    4628        (F      MOV      r0,r5
        0x0081acec:    f7ecdeb7    ....    BL       log_buffer ; 0x7a5e
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (126)
        0x0081acf0:    4909        .I      LDR      r1,[pc,#36] ; [0x81ad18] = 0x88042dc
        0x0081acf2:    9401        ..      STR      r4,[sp,#4]
        0x0081acf4:    9402        ..      STR      r4,[sp,#8]
        0x0081acf6:    9403        ..      STR      r4,[sp,#0xc]
        0x0081acf8:    9404        ..      STR      r4,[sp,#0x10]
        0x0081acfa:    2300        .#      MOVS     r3,#0
        0x0081acfc:    2206        ."      MOVS     r2,#6
        0x0081acfe:    31f0        .1      ADDS     r1,r1,#0xf0
        0x0081ad00:    4628        (F      MOV      r0,r5
        0x0081ad02:    9400        ..      STR      r4,[sp,#0]
        0x0081ad04:    f7ecdeab    ....    BL       log_buffer ; 0x7a5e
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (129)
        0x0081ad08:    f2af0073    ..s.    ADR      r0,{pc}-0x6f ; 0x81ac99
        0x0081ad0c:    b007        ..      ADD      sp,sp,#0x1c
        0x0081ad0e:    e8bd4030    ..0@    POP      {r4,r5,lr}
        0x0081ad12:    f431b07d    1.}.    B        gap_register_extend_cb ; 0x4be10
    $d
        0x0081ad16:    0000        ..      DCW    0
        0x0081ad18:    088042dc    .B..    DCD    142623452
        0x0081ad1c:    21103500    .5.!    DCD    554710272
    $t
    .text
    gap_sw_reset_req
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (123)
        0x0081ad20:    b570        p.      PUSH     {r4-r6,lr}
        0x0081ad22:    2402        .$      MOVS     r4,#2
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (123)
        0x0081ad24:    4605        .F      MOV      r5,r0
        0x0081ad26:    2801        .(      CMP      r0,#1
        0x0081ad28:    d002        ..      BEQ      0x81ad30 ; gap_sw_reset_req + 16
        0x0081ad2a:    2403        .$      MOVS     r4,#3
        0x0081ad2c:    4620         F      MOV      r0,r4
        0x0081ad2e:    bd70        p.      POP      {r4-r6,pc}
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (127)
        0x0081ad30:    f432f71e    2...    BL       le_get_active_link_num ; 0x4db70
        0x0081ad34:    2800        .(      CMP      r0,#0
        0x0081ad36:    d1f9        ..      BNE      0x81ad2c ; gap_sw_reset_req + 12
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (128)
        0x0081ad38:    4873        sH      LDR      r0,[pc,#460] ; [0x81af08] = 0x202e38
        0x0081ad3a:    7801        .x      LDRB     r1,[r0,#0]
        0x0081ad3c:    07c8        ..      LSLS     r0,r1,#31
        0x0081ad3e:    d0f5        ..      BEQ      0x81ad2c ; gap_sw_reset_req + 12
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (129)
        0x0081ad40:    f0110f0c    ....    TST      r1,#0xc
        0x0081ad44:    d0f2        ..      BEQ      0x81ad2c ; gap_sw_reset_req + 12
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (130)
        0x0081ad46:    f0110f30    ..0.    TST      r1,#0x30
        0x0081ad4a:    d1ef        ..      BNE      0x81ad2c ; gap_sw_reset_req + 12
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (131)
        0x0081ad4c:    0988        ..      LSRS     r0,r1,#6
        0x0081ad4e:    d1ed        ..      BNE      0x81ad2c ; gap_sw_reset_req + 12
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (133)
        0x0081ad50:    4628        (F      MOV      r0,r5
        0x0081ad52:    f406f4c6    ....    BL       btif_sw_reset_req ; 0x216e2
        0x0081ad56:    2800        .(      CMP      r0,#0
        0x0081ad58:    d0e8        ..      BEQ      0x81ad2c ; gap_sw_reset_req + 12
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (135)
        0x0081ad5a:    2400        .$      MOVS     r4,#0
        0x0081ad5c:    e7e6        ..      B        0x81ad2c ; gap_sw_reset_req + 12
    le_handle_sw_reset_rsp
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (147)
        0x0081ad5e:    b538        8.      PUSH     {r3-r5,lr}
        0x0081ad60:    0004        ..      MOVS     r4,r0
        0x0081ad62:    d107        ..      BNE      0x81ad74 ; le_handle_sw_reset_rsp + 22
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (150)
        0x0081ad64:    4968        hI      LDR      r1,[pc,#416] ; [0x81af08] = 0x202e38
        0x0081ad66:    7808        .x      LDRB     r0,[r1,#0]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (151)
        0x0081ad68:    f020000e     ...    BIC      r0,r0,#0xe
        0x0081ad6c:    7008        .p      STRB     r0,[r1,#0]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (152)
        0x0081ad6e:    20fc        .       MOVS     r0,#0xfc
        0x0081ad70:    f432f0a7    2...    BL       gap_send_dev_state ; 0x4cec2
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (154)
        0x0081ad74:    4865        eH      LDR      r0,[pc,#404] ; [0x81af0c] = 0x202e48
        0x0081ad76:    6802        .h      LDR      r2,[r0,#0]
        0x0081ad78:    2a00        .*      CMP      r2,#0
        0x0081ad7a:    d004        ..      BEQ      0x81ad86 ; le_handle_sw_reset_rsp + 40
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (157)
        0x0081ad7c:    f8ad4000    ...@    STRH     r4,[sp,#0]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (158)
        0x0081ad80:    4669        iF      MOV      r1,sp
        0x0081ad82:    20a5        .       MOVS     r0,#0xa5
        0x0081ad84:    4790        .G      BLX      r2
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (160)
        0x0081ad86:    bd38        8.      POP      {r3-r5,pc}
    le_check_privacy_bond
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (166)
        0x0081ad88:    b530        0.      PUSH     {r4,r5,lr}
        0x0081ad8a:    b08b        ..      SUB      sp,sp,#0x2c
        0x0081ad8c:    f04f0100    O...    MOV      r1,#0
        0x0081ad90:    4d5f        _M      LDR      r5,[pc,#380] ; [0x81af10] = 0x21103502
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (166)
        0x0081ad92:    0004        ..      MOVS     r4,r0
        0x0081ad94:    9106        ..      STR      r1,[sp,#0x18]
        0x0081ad96:    9107        ..      STR      r1,[sp,#0x1c]
        0x0081ad98:    9108        ..      STR      r1,[sp,#0x20]
        0x0081ad9a:    9109        ..      STR      r1,[sp,#0x24]
        0x0081ad9c:    d002        ..      BEQ      0x81ada4 ; le_check_privacy_bond + 28
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (169)
        0x0081ad9e:    7820         x      LDRB     r0,[r4,#0]
        0x0081ada0:    2801        .(      CMP      r0,#1
        0x0081ada2:    d008        ..      BEQ      0x81adb6 ; le_check_privacy_bond + 46
        0x0081ada4:    2301        .#      MOVS     r3,#1
        0x0081ada6:    2201        ."      MOVS     r2,#1
        0x0081ada8:    495a        ZI      LDR      r1,[pc,#360] ; [0x81af14] = 0x88044a0
        0x0081adaa:    4628        (F      MOV      r0,r5
        0x0081adac:    f7ecde57    ..W.    BL       log_buffer ; 0x7a5e
        0x0081adb0:    2000        .       MOVS     r0,#0
        0x0081adb2:    b00b        ..      ADD      sp,sp,#0x2c
        0x0081adb4:    bd30        0.      POP      {r4,r5,pc}
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (171)
        0x0081adb6:    78a0        .x      LDRB     r0,[r4,#2]
        0x0081adb8:    0700        ..      LSLS     r0,r0,#28
        0x0081adba:    d518        ..      BPL      0x81adee ; le_check_privacy_bond + 102
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (174)
        0x0081adbc:    466a        jF      MOV      r2,sp
        0x0081adbe:    2114        .!      MOVS     r1,#0x14
        0x0081adc0:    4620         F      MOV      r0,r4
        0x0081adc2:    f435f2cf    5...    BL       le_get_key ; 0x50364
        0x0081adc6:    b180        ..      CBZ      r0,0x81adea ; le_check_privacy_bond + 98
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (176)
        0x0081adc8:    2210        ."      MOVS     r2,#0x10
        0x0081adca:    a906        ..      ADD      r1,sp,#0x18
        0x0081adcc:    4668        hF      MOV      r0,sp
        0x0081adce:    f43ff019    ?...    BL       memcmp ; 0x59e04
        0x0081add2:    b140        @.      CBZ      r0,0x81ade6 ; le_check_privacy_bond + 94
        0x0081add4:    494f        OI      LDR      r1,[pc,#316] ; [0x81af14] = 0x88044a0
        0x0081add6:    7863        cx      LDRB     r3,[r4,#1]
        0x0081add8:    2201        ."      MOVS     r2,#1
        0x0081adda:    3930        09      SUBS     r1,r1,#0x30
        0x0081addc:    4628        (F      MOV      r0,r5
        0x0081adde:    f7ecde3e    ..>.    BL       log_buffer ; 0x7a5e
        0x0081ade2:    2001        .       MOVS     r0,#1
        0x0081ade4:    e7e5        ..      B        0x81adb2 ; le_check_privacy_bond + 42
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (178)
        0x0081ade6:    2305        .#      MOVS     r3,#5
        0x0081ade8:    e7dd        ..      B        0x81ada6 ; le_check_privacy_bond + 30
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (188)
        0x0081adea:    2304        .#      MOVS     r3,#4
        0x0081adec:    e7db        ..      B        0x81ada6 ; le_check_privacy_bond + 30
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (193)
        0x0081adee:    2302        .#      MOVS     r3,#2
        0x0081adf0:    e7d9        ..      B        0x81ada6 ; le_check_privacy_bond + 30
    le_bond_just_work_confirm
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (205)
        0x0081adf2:    460a        .F      MOV      r2,r1
        0x0081adf4:    eb000140    ..@.    ADD      r1,r0,r0,LSL #1
        0x0081adf8:    4847        GH      LDR      r0,[pc,#284] ; [0x81af18] = 0x202e64
        0x0081adfa:    b510        ..      PUSH     {r4,lr}
        0x0081adfc:    6800        .h      LDR      r0,[r0,#0]
        0x0081adfe:    eb001001    ....    ADD      r0,r0,r1,LSL #4
        0x0081ae02:    7801        .x      LDRB     r1,[r0,#0]
        0x0081ae04:    b129        ).      CBZ      r1,0x81ae12 ; le_bond_just_work_confirm + 32
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (208)
        0x0081ae06:    7981        .y      LDRB     r1,[r0,#6]
        0x0081ae08:    1dc0        ..      ADDS     r0,r0,#7
        0x0081ae0a:    f406f426    ..&.    BL       btif_just_work_req_cfm ; 0x2165a
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (210)
        0x0081ae0e:    2000        .       MOVS     r0,#0
        0x0081ae10:    bd10        ..      POP      {r4,pc}
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (214)
        0x0081ae12:    2004        .       MOVS     r0,#4
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (216)
        0x0081ae14:    bd10        ..      POP      {r4,pc}
    le_gen_rand_addr
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (220)
        0x0081ae16:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0081ae18:    b085        ..      SUB      sp,sp,#0x14
        0x0081ae1a:    460c        .F      MOV      r4,r1
        0x0081ae1c:    0005        ..      MOVS     r5,r0
        0x0081ae1e:    d006        ..      BEQ      0x81ae2e ; le_gen_rand_addr + 24
        0x0081ae20:    f407f167    ..g.    BL       btif_le_gen_rand_addr ; 0x220f2
        0x0081ae24:    2800        .(      CMP      r0,#0
        0x0081ae26:    d048        H.      BEQ      0x81aeba ; le_gen_rand_addr + 164
        0x0081ae28:    2000        .       MOVS     r0,#0
        0x0081ae2a:    b005        ..      ADD      sp,sp,#0x14
        0x0081ae2c:    bdf0        ..      POP      {r4-r7,pc}
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (224)
        0x0081ae2e:    2600        .&      MOVS     r6,#0
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (226)
        0x0081ae30:    b384        ..      CBZ      r4,0x81ae94 ; le_gen_rand_addr + 126
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (232)
        0x0081ae32:    f7f3fc4d    ..M.    BL       rand ; 0x80e6d0
        0x0081ae36:    7020         p      STRB     r0,[r4,#0]
        0x0081ae38:    1c67        g.      ADDS     r7,r4,#1
        0x0081ae3a:    f7f3fc49    ..I.    BL       rand ; 0x80e6d0
        0x0081ae3e:    0a00        ..      LSRS     r0,r0,#8
        0x0081ae40:    7038        8p      STRB     r0,[r7,#0]
        0x0081ae42:    f7f3fc45    ..E.    BL       rand ; 0x80e6d0
        0x0081ae46:    0c00        ..      LSRS     r0,r0,#16
        0x0081ae48:    7078        xp      STRB     r0,[r7,#1]
        0x0081ae4a:    f7f3fc41    ..A.    BL       rand ; 0x80e6d0
        0x0081ae4e:    0e00        ..      LSRS     r0,r0,#24
        0x0081ae50:    70b8        .p      STRB     r0,[r7,#2]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (233)
        0x0081ae52:    f7f3fc3d    ..=.    BL       rand ; 0x80e6d0
        0x0081ae56:    70f8        .p      STRB     r0,[r7,#3]
        0x0081ae58:    f7f3fc3a    ..:.    BL       rand ; 0x80e6d0
        0x0081ae5c:    0a00        ..      LSRS     r0,r0,#8
        0x0081ae5e:    7138        8q      STRB     r0,[r7,#4]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (235)
        0x0081ae60:    f04000c0    @...    ORR      r0,r0,#0xc0
        0x0081ae64:    7160        `q      STRB     r0,[r4,#5]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (236)
        0x0081ae66:    a02d        -.      ADR      r0,{pc}+0xb6 ; 0x81af1c
        0x0081ae68:    2206        ."      MOVS     r2,#6
        0x0081ae6a:    e9d01000    ....    LDRD     r1,r0,[r0,#0]
        0x0081ae6e:    e9cd1001    ....    STRD     r1,r0,[sp,#4]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (237)
        0x0081ae72:    a02c        ,.      ADR      r0,{pc}+0xb2 ; 0x81af24
        0x0081ae74:    e9d01000    ....    LDRD     r1,r0,[r0,#0]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (238)
        0x0081ae78:    e9cd1003    ....    STRD     r1,r0,[sp,#0xc]
        0x0081ae7c:    a901        ..      ADD      r1,sp,#4
        0x0081ae7e:    4620         F      MOV      r0,r4
        0x0081ae80:    f43ef7c0    >...    BL       memcmp ; 0x59e04
        0x0081ae84:    b148        H.      CBZ      r0,0x81ae9a ; le_gen_rand_addr + 132
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (239)
        0x0081ae86:    2206        ."      MOVS     r2,#6
        0x0081ae88:    a903        ..      ADD      r1,sp,#0xc
        0x0081ae8a:    4620         F      MOV      r0,r4
        0x0081ae8c:    f43ef7ba    >...    BL       memcmp ; 0x59e04
        0x0081ae90:    b118        ..      CBZ      r0,0x81ae9a ; le_gen_rand_addr + 132
        0x0081ae92:    e004        ..      B        0x81ae9e ; le_gen_rand_addr + 136
        0x0081ae94:    e7ff        ..      B        0x81ae96 ; le_gen_rand_addr + 128
        0x0081ae96:    2003        .       MOVS     r0,#3
        0x0081ae98:    e7c7        ..      B        0x81ae2a ; le_gen_rand_addr + 20
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (241)
        0x0081ae9a:    2066        f       MOVS     r0,#0x66
        0x0081ae9c:    7020         p      STRB     r0,[r4,#0]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (243)
        0x0081ae9e:    4621        !F      MOV      r1,r4
        0x0081aea0:    4822        "H      LDR      r0,[pc,#136] ; [0x81af2c] = 0x21300000
        0x0081aea2:    f7ecdf99    ....    BL       trace_bdaddr ; 0x7dd8
        0x0081aea6:    491b        .I      LDR      r1,[pc,#108] ; [0x81af14] = 0x88044a0
        0x0081aea8:    4603        .F      MOV      r3,r0
        0x0081aeaa:    2202        ."      MOVS     r2,#2
        0x0081aeac:    3138        81      ADDS     r1,r1,#0x38
        0x0081aeae:    4818        .H      LDR      r0,[pc,#96] ; [0x81af10] = 0x21103502
        0x0081aeb0:    9500        ..      STR      r5,[sp,#0]
        0x0081aeb2:    f7ecddd4    ....    BL       log_buffer ; 0x7a5e
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (245)
        0x0081aeb6:    4630        0F      MOV      r0,r6
        0x0081aeb8:    e7b7        ..      B        0x81ae2a ; le_gen_rand_addr + 20
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (251)
        0x0081aeba:    2007        .       MOVS     r0,#7
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (252)
        0x0081aebc:    e7b5        ..      B        0x81ae2a ; le_gen_rand_addr + 20
    le_bond_get_sec_level
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (266)
        0x0081aebe:    b510        ..      PUSH     {r4,lr}
        0x0081aec0:    b08a        ..      SUB      sp,sp,#0x28
        0x0081aec2:    460c        .F      MOV      r4,r1
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (269)
        0x0081aec4:    2100        .!      MOVS     r1,#0
        0x0081aec6:    7021        !p      STRB     r1,[r4,#0]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (270)
        0x0081aec8:    aa09        ..      ADD      r2,sp,#0x24
        0x0081aeca:    a907        ..      ADD      r1,sp,#0x1c
        0x0081aecc:    f432f68f    2...    BL       le_get_conn_addr ; 0x4dbee
        0x0081aed0:    b1c0        ..      CBZ      r0,0x81af04 ; le_bond_get_sec_level + 70
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (273)
        0x0081aed2:    f89d1024    ..$.    LDRB     r1,[sp,#0x24]
        0x0081aed6:    a807        ..      ADD      r0,sp,#0x1c
        0x0081aed8:    f435f159    5.Y.    BL       le_find_key_entry ; 0x5018e
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (274)
        0x0081aedc:    b190        ..      CBZ      r0,0x81af04 ; le_bond_get_sec_level + 70
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (277)
        0x0081aede:    466a        jF      MOV      r2,sp
        0x0081aee0:    2111        .!      MOVS     r1,#0x11
        0x0081aee2:    f435f23f    5.?.    BL       le_get_key ; 0x50364
        0x0081aee6:    b168        h.      CBZ      r0,0x81af04 ; le_bond_get_sec_level + 70
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (279)
        0x0081aee8:    490a        .I      LDR      r1,[pc,#40] ; [0x81af14] = 0x88044a0
        0x0081aeea:    f89d301b    ...0    LDRB     r3,[sp,#0x1b]
        0x0081aeee:    2201        ."      MOVS     r2,#1
        0x0081aef0:    3174        t1      ADDS     r1,r1,#0x74
        0x0081aef2:    4807        .H      LDR      r0,[pc,#28] ; [0x81af10] = 0x21103502
        0x0081aef4:    f7ecddb3    ....    BL       log_buffer ; 0x7a5e
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (280)
        0x0081aef8:    f89d001b    ....    LDRB     r0,[sp,#0x1b]
        0x0081aefc:    7020         p      STRB     r0,[r4,#0]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (281)
        0x0081aefe:    2000        .       MOVS     r0,#0
        0x0081af00:    b00a        ..      ADD      sp,sp,#0x28
        0x0081af02:    bd10        ..      POP      {r4,pc}
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (285)
        0x0081af04:    2003        .       MOVS     r0,#3
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (286)
        0x0081af06:    e7fb        ..      B        0x81af00 ; le_bond_get_sec_level + 66
    $d
        0x0081af08:    00202e38    8. .    DCD    2108984
        0x0081af0c:    00202e48    H. .    DCD    2109000
        0x0081af10:    21103502    .5.!    DCD    554710274
        0x0081af14:    088044a0    .D..    DCD    142623904
        0x0081af18:    00202e64    d. .    DCD    2109028
        0x0081af1c:    00000000    ....    DCD    0
        0x0081af20:    0000c000    ....    DCD    49152
        0x0081af24:    ffffffff    ....    DCD    4294967295
        0x0081af28:    0000ffff    ....    DCD    65535
        0x0081af2c:    21300000    ..0!    DCD    556793856
    $t
    .text
    gap_set_lps_bootup_active_time
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (51)
        0x0081af30:    b508        ..      PUSH     {r3,lr}
        0x0081af32:    1ec1        ..      SUBS     r1,r0,#3
        0x0081af34:    f24072fe    @..r    MOV      r2,#0x7fe
        0x0081af38:    4291        .B      CMP      r1,r2
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (51)
        0x0081af3a:    d301        ..      BCC      0x81af40 ; gap_set_lps_bootup_active_time + 16
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (56)
        0x0081af3c:    2000        .       MOVS     r0,#0
        0x0081af3e:    bd08        ..      POP      {r3,pc}
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (58)
        0x0081af40:    2105        .!      MOVS     r1,#5
        0x0081af42:    f88d1000    ....    STRB     r1,[sp,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (59)
        0x0081af46:    f88d0001    ....    STRB     r0,[sp,#1]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (60)
        0x0081af4a:    0a00        ..      LSRS     r0,r0,#8
        0x0081af4c:    f88d0002    ....    STRB     r0,[sp,#2]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (62)
        0x0081af50:    466a        jF      MOV      r2,sp
        0x0081af52:    2103        .!      MOVS     r1,#3
        0x0081af54:    f64f406e    O.n@    MOV      r0,#0xfc6e
        0x0081af58:    f406f2c8    ....    BL       btif_vendor_cmd_req ; 0x214ec
        0x0081af5c:    2800        .(      CMP      r0,#0
        0x0081af5e:    d0ee        ..      BEQ      0x81af3e ; gap_set_lps_bootup_active_time + 14
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (64)
        0x0081af60:    2001        .       MOVS     r0,#1
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (67)
        0x0081af62:    bd08        ..      POP      {r3,pc}
    lps_get_wakeup_time
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (70)
        0x0081af64:    b530        0.      PUSH     {r4,r5,lr}
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (71)
        0x0081af66:    4b33        3K      LDR      r3,[pc,#204] ; [0x81b034] = 0x201b1c
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (72)
        0x0081af68:    681d        .h      LDR      r5,[r3,#0]
        0x0081af6a:    1d1b        ..      ADDS     r3,r3,#4
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (73)
        0x0081af6c:    681c        .h      LDR      r4,[r3,#0]
        0x0081af6e:    1d1b        ..      ADDS     r3,r3,#4
        0x0081af70:    681b        .h      LDR      r3,[r3,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (75)
        0x0081af72:    6005        .`      STR      r5,[r0,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (76)
        0x0081af74:    600c        .`      STR      r4,[r1,#0]
        0x0081af76:    6013        .`      STR      r3,[r2,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (77)
        0x0081af78:    bd30        0.      POP      {r4,r5,pc}
    le_handle_vendor_cmd_rsp
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (177)
        0x0081af7a:    b538        8.      PUSH     {r3-r5,lr}
        0x0081af7c:    4604        .F      MOV      r4,r0
        0x0081af7e:    8800        ..      LDRH     r0,[r0,#0]
        0x0081af80:    f64f456e    O.nE    MOV      r5,#0xfc6e
        0x0081af84:    42a8        .B      CMP      r0,r5
        0x0081af86:    d108        ..      BNE      0x81af9a ; le_handle_vendor_cmd_rsp + 32
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (267)
        0x0081af88:    8860        `.      LDRH     r0,[r4,#2]
        0x0081af8a:    f8ad0000    ....    STRH     r0,[sp,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (268)
        0x0081af8e:    482a        *H      LDR      r0,[pc,#168] ; [0x81b038] = 0x202e48
        0x0081af90:    6802        .h      LDR      r2,[r0,#0]
        0x0081af92:    b112        ..      CBZ      r2,0x81af9a ; le_handle_vendor_cmd_rsp + 32
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (270)
        0x0081af94:    4669        iF      MOV      r1,sp
        0x0081af96:    20a6        .       MOVS     r0,#0xa6
        0x0081af98:    4790        .G      BLX      r2
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (276)
        0x0081af9a:    8820         .      LDRH     r0,[r4,#0]
        0x0081af9c:    f5a0417d    ..}A    SUB      r1,r0,#0xfd00
        0x0081afa0:    3980        .9      SUBS     r1,r1,#0x80
        0x0081afa2:    d00d        ..      BEQ      0x81afc0 ; le_handle_vendor_cmd_rsp + 70
        0x0081afa4:    1e49        I.      SUBS     r1,r1,#1
        0x0081afa6:    d00b        ..      BEQ      0x81afc0 ; le_handle_vendor_cmd_rsp + 70
        0x0081afa8:    1e49        I.      SUBS     r1,r1,#1
        0x0081afaa:    d009        ..      BEQ      0x81afc0 ; le_handle_vendor_cmd_rsp + 70
        0x0081afac:    42a8        .B      CMP      r0,r5
        0x0081afae:    d007        ..      BEQ      0x81afc0 ; le_handle_vendor_cmd_rsp + 70
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (279)
        0x0081afb0:    4822        "H      LDR      r0,[pc,#136] ; [0x81b03c] = 0x202df4
        0x0081afb2:    6802        .h      LDR      r2,[r0,#0]
        0x0081afb4:    2a00        .*      CMP      r2,#0
        0x0081afb6:    d003        ..      BEQ      0x81afc0 ; le_handle_vendor_cmd_rsp + 70
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (282)
        0x0081afb8:    2003        .       MOVS     r0,#3
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (284)
        0x0081afba:    4669        iF      MOV      r1,sp
        0x0081afbc:    9400        ..      STR      r4,[sp,#0]
        0x0081afbe:    4790        .G      BLX      r2
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (287)
        0x0081afc0:    bd38        8.      POP      {r3-r5,pc}
    gap_vendor_cmd_req
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (291)
        0x0081afc2:    b510        ..      PUSH     {r4,lr}
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (292)
        0x0081afc4:    f406f292    ....    BL       btif_vendor_cmd_req ; 0x214ec
        0x0081afc8:    b108        ..      CBZ      r0,0x81afce ; gap_vendor_cmd_req + 12
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (294)
        0x0081afca:    2000        .       MOVS     r0,#0
        0x0081afcc:    bd10        ..      POP      {r4,pc}
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (296)
        0x0081afce:    2007        .       MOVS     r0,#7
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (297)
        0x0081afd0:    bd10        ..      POP      {r4,pc}
    le_handle_vendor_evt_info
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (300)
        0x0081afd2:    4601        .F      MOV      r1,r0
        0x0081afd4:    4819        .H      LDR      r0,[pc,#100] ; [0x81b03c] = 0x202df4
        0x0081afd6:    b508        ..      PUSH     {r3,lr}
        0x0081afd8:    6802        .h      LDR      r2,[r0,#0]
        0x0081afda:    2a00        .*      CMP      r2,#0
        0x0081afdc:    d003        ..      BEQ      0x81afe6 ; le_handle_vendor_evt_info + 20
        0x0081afde:    9100        ..      STR      r1,[sp,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (304)
        0x0081afe0:    2004        .       MOVS     r0,#4
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (306)
        0x0081afe2:    4669        iF      MOV      r1,sp
        0x0081afe4:    4790        .G      BLX      r2
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (308)
        0x0081afe6:    bd08        ..      POP      {r3,pc}
    le_vendor_modify_bt_le_fw_policy
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (313)
        0x0081afe8:    b50e        ..      PUSH     {r1-r3,lr}
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (316)
        0x0081afea:    2210        ."      MOVS     r2,#0x10
        0x0081afec:    f88d2000    ...     STRB     r2,[sp,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (317)
        0x0081aff0:    f88d0001    ....    STRB     r0,[sp,#1]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (318)
        0x0081aff4:    0a02        ..      LSRS     r2,r0,#8
        0x0081aff6:    f88d2002    ...     STRB     r2,[sp,#2]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (319)
        0x0081affa:    0c02        ..      LSRS     r2,r0,#16
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (320)
        0x0081affc:    0e00        ..      LSRS     r0,r0,#24
        0x0081affe:    f88d0004    ....    STRB     r0,[sp,#4]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (321)
        0x0081b002:    f88d1005    ....    STRB     r1,[sp,#5]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (322)
        0x0081b006:    0a08        ..      LSRS     r0,r1,#8
        0x0081b008:    f88d0006    ....    STRB     r0,[sp,#6]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (323)
        0x0081b00c:    0c08        ..      LSRS     r0,r1,#16
        0x0081b00e:    f88d0007    ....    STRB     r0,[sp,#7]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (324)
        0x0081b012:    0e08        ..      LSRS     r0,r1,#24
        0x0081b014:    f88d2003    ...     STRB     r2,[sp,#3]
        0x0081b018:    f88d0008    ....    STRB     r0,[sp,#8]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (326)
        0x0081b01c:    466a        jF      MOV      r2,sp
        0x0081b01e:    2109        .!      MOVS     r1,#9
        0x0081b020:    f64f5080    O..P    MOV      r0,#0xfd80
        0x0081b024:    f406f262    ..b.    BL       btif_vendor_cmd_req ; 0x214ec
        0x0081b028:    b108        ..      CBZ      r0,0x81b02e ; le_vendor_modify_bt_le_fw_policy + 70
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (328)
        0x0081b02a:    2000        .       MOVS     r0,#0
        0x0081b02c:    bd0e        ..      POP      {r1-r3,pc}
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (330)
        0x0081b02e:    2007        .       MOVS     r0,#7
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (337)
        0x0081b030:    bd0e        ..      POP      {r1-r3,pc}
    $d
        0x0081b032:    0000        ..      DCW    0
        0x0081b034:    00201b1c    .. .    DCD    2104092
        0x0081b038:    00202e48    H. .    DCD    2109000
        0x0081b03c:    00202df4    .- .    DCD    2108916
    $t
    .text
    __aeabi_uldivmod
    _ll_udiv
        0x0081b040:    ea530c02    S...    ORRS     r12,r3,r2
        0x0081b044:    f0008069    ..i.    BEQ.W    0x81b11a ; __aeabi_uldivmod + 218
        0x0081b048:    e92d4bf0    -..K    PUSH     {r4-r9,r11,lr}
        0x0081b04c:    f04f0600    O...    MOV      r6,#0
        0x0081b050:    2b00        .+      CMP      r3,#0
        0x0081b052:    bf1f        ..      ITTTT    NE
        0x0081b054:    fab3f583    ....    CLZNE    r5,r3
        0x0081b058:    fa03f405    ....    LSLNE    r4,r3,r5
        0x0081b05c:    fa24f605    $...    LSRNE    r6,r4,r5
        0x0081b060:    405e        ^@      EORNE    r6,r6,r3
        0x0081b062:    bf12        ..      ITEE     NE
        0x0081b064:    4316        .C      ORRNE    r6,r6,r2
        0x0081b066:    fab2f582    ....    CLZEQ    r5,r2
        0x0081b06a:    fa02f405    ....    LSLEQ    r4,r2,r5
        0x0081b06e:    f1c50520    .. .    RSB      r5,r5,#0x20
        0x0081b072:    bf1e        ..      ITTT     NE
        0x0081b074:    fa22fc05    "...    LSRNE    r12,r2,r5
        0x0081b078:    ea44040c    D...    ORRNE    r4,r4,r12
        0x0081b07c:    3520         5      ADDNE    r5,r5,#0x20
        0x0081b07e:    ea564c04    V..L    ORRS     r12,r6,r4,LSL #16
        0x0081b082:    ea4f4414    O..D    LSR      r4,r4,#16
        0x0081b086:    bf18        ..      IT       NE
        0x0081b088:    1c64        d.      ADDNE    r4,r4,#1
        0x0081b08a:    f04f0800    O...    MOV      r8,#0
        0x0081b08e:    f04f0900    O...    MOV      r9,#0
        0x0081b092:    4290        .B      CMP      r0,r2
        0x0081b094:    eb710c03    q...    SBCS     r12,r1,r3
        0x0081b098:    d339        9.      BCC      0x81b10e ; __aeabi_uldivmod + 206
        0x0081b09a:    2900        .)      CMP      r1,#0
        0x0081b09c:    bf19        ..      ITTEE    NE
        0x0081b09e:    fab1f781    ....    CLZNE    r7,r1
        0x0081b0a2:    fa01f607    ....    LSLNE    r6,r1,r7
        0x0081b0a6:    fab0f780    ....    CLZEQ    r7,r0
        0x0081b0aa:    fa00f607    ....    LSLEQ    r6,r0,r7
        0x0081b0ae:    f1c70720    .. .    RSB      r7,r7,#0x20
        0x0081b0b2:    bf1e        ..      ITTT     NE
        0x0081b0b4:    fa20fc07     ...    LSRNE    r12,r0,r7
        0x0081b0b8:    ea46060c    F...    ORRNE    r6,r6,r12
        0x0081b0bc:    3720         7      ADDNE    r7,r7,#0x20
        0x0081b0be:    fbb6fcf4    ....    UDIV     r12,r6,r4
        0x0081b0c2:    eba70705    ....    SUB      r7,r7,r5
        0x0081b0c6:    3f10        .?      SUBS     r7,r7,#0x10
        0x0081b0c8:    f0070b1f    ....    AND      r11,r7,#0x1f
        0x0081b0cc:    f1cb0620    .. .    RSB      r6,r11,#0x20
        0x0081b0d0:    fa0cfb0b    ....    LSL      r11,r12,r11
        0x0081b0d4:    fa2cf606    ,...    LSR      r6,r12,r6
        0x0081b0d8:    bf44        D.      ITT      MI
        0x0081b0da:    46b3        .F      MOVMI    r11,r6
        0x0081b0dc:    2600        .&      MOVMI    r6,#0
        0x0081b0de:    2f20         /      CMP      r7,#0x20
        0x0081b0e0:    bfa4        ..      ITT      GE
        0x0081b0e2:    465e        ^F      MOVGE    r6,r11
        0x0081b0e4:    f04f0b00    O...    MOVGE    r11,#0
        0x0081b0e8:    ea5b0c06    [...    ORRS     r12,r11,r6
        0x0081b0ec:    bf08        ..      IT       EQ
        0x0081b0ee:    f04f0b01    O...    MOVEQ    r11,#1
        0x0081b0f2:    eb19090b    ....    ADDS     r9,r9,r11
        0x0081b0f6:    fbab7c02    ...|    UMULL    r7,r12,r11,r2
        0x0081b0fa:    eb480806    H...    ADC      r8,r8,r6
        0x0081b0fe:    1bc0        ..      SUBS     r0,r0,r7
        0x0081b100:    fb06cc02    ....    MLA      r12,r6,r2,r12
        0x0081b104:    fb0bcc03    ....    MLA      r12,r11,r3,r12
        0x0081b108:    eb71010c    q...    SBCS     r1,r1,r12
        0x0081b10c:    e7c1        ..      B        0x81b092 ; __aeabi_uldivmod + 82
        0x0081b10e:    460b        .F      MOV      r3,r1
        0x0081b110:    4602        .F      MOV      r2,r0
        0x0081b112:    4641        AF      MOV      r1,r8
        0x0081b114:    4648        HF      MOV      r0,r9
        0x0081b116:    e8bd8bf0    ....    POP      {r4-r9,r11,pc}
        0x0081b11a:    b513        ..      PUSH     {r0,r1,r4,lr}
        0x0081b11c:    f04f0000    O...    MOV      r0,#0
        0x0081b120:    f04f0100    O...    MOV      r1,#0
        0x0081b124:    f3af8000    ....    NOP.W    
        0x0081b128:    e8bd401c    ...@    POP      {r2-r4,lr}
        0x0081b12c:    4770        pG      BX       lr
        0x0081b12e:    0000        ..      MOVS     r0,r0
    .text
    __2sprintf
        0x0081b130:    b40f        ..      PUSH     {r0-r3}
        0x0081b132:    b51c        ..      PUSH     {r2-r4,lr}
        0x0081b134:    4b08        .K      LDR      r3,[pc,#32] ; [0x81b158] = 0x299
        0x0081b136:    aa06        ..      ADD      r2,sp,#0x18
        0x0081b138:    447b        {D      ADD      r3,r3,pc
        0x0081b13a:    4669        iF      MOV      r1,sp
        0x0081b13c:    9000        ..      STR      r0,[sp,#0]
        0x0081b13e:    9805        ..      LDR      r0,[sp,#0x14]
        0x0081b140:    f000f935    ..5.    BL       _printf_char_common ; 0x81b3ae
        0x0081b144:    4604        .F      MOV      r4,r0
        0x0081b146:    2000        .       MOVS     r0,#0
        0x0081b148:    4669        iF      MOV      r1,sp
        0x0081b14a:    f000f943    ..C.    BL       _sputc ; 0x81b3d4
        0x0081b14e:    4620         F      MOV      r0,r4
        0x0081b150:    bc1c        ..      POP      {r2-r4}
        0x0081b152:    f85dfb14    ]...    LDR      pc,[sp],#0x14
    $d
        0x0081b156:    0000        ..      DCW    0
        0x0081b158:    00000299    ....    DCD    665
    $t
    .text
    __printf
        0x0081b15c:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0081b160:    460e        .F      MOV      r6,r1
        0x0081b162:    4604        .F      MOV      r4,r0
        0x0081b164:    2000        .       MOVS     r0,#0
        0x0081b166:    6220         b      STR      r0,[r4,#0x20]
        0x0081b168:    4620         F      MOV      r0,r4
        0x0081b16a:    68e1        .h      LDR      r1,[r4,#0xc]
        0x0081b16c:    4788        .G      BLX      r1
        0x0081b16e:    b330        0.      CBZ      r0,0x81b1be ; __printf + 98
        0x0081b170:    2825        %(      CMP      r0,#0x25
        0x0081b172:    d005        ..      BEQ      0x81b180 ; __printf + 36
        0x0081b174:    e9d42101    ...!    LDRD     r2,r1,[r4,#4]
        0x0081b178:    4790        .G      BLX      r2
        0x0081b17a:    6a20         j      LDR      r0,[r4,#0x20]
        0x0081b17c:    1c40        @.      ADDS     r0,r0,#1
        0x0081b17e:    e7f2        ..      B        0x81b166 ; __printf + 10
        0x0081b180:    68e1        .h      LDR      r1,[r4,#0xc]
        0x0081b182:    4620         F      MOV      r0,r4
        0x0081b184:    2700        .'      MOVS     r7,#0
        0x0081b186:    4788        .G      BLX      r1
        0x0081b188:    0005        ..      MOVS     r5,r0
        0x0081b18a:    d018        ..      BEQ      0x81b1be ; __printf + 98
        0x0081b18c:    f1a50041    ..A.    SUB      r0,r5,#0x41
        0x0081b190:    2819        .(      CMP      r0,#0x19
        0x0081b192:    d802        ..      BHI      0x81b19a ; __printf + 62
        0x0081b194:    3520         5      ADDS     r5,r5,#0x20
        0x0081b196:    f44f6700    O..g    MOV      r7,#0x800
        0x0081b19a:    4632        2F      MOV      r2,r6
        0x0081b19c:    4629        )F      MOV      r1,r5
        0x0081b19e:    4620         F      MOV      r0,r4
        0x0081b1a0:    6027        '`      STR      r7,[r4,#0]
        0x0081b1a2:    f7f3f935    ..5.    BL       _printf_d ; 0x80e410
        0x0081b1a6:    b140        @.      CBZ      r0,0x81b1ba ; __printf + 94
        0x0081b1a8:    2801        .(      CMP      r0,#1
        0x0081b1aa:    d004        ..      BEQ      0x81b1b6 ; __printf + 90
        0x0081b1ac:    1df6        ..      ADDS     r6,r6,#7
        0x0081b1ae:    f0260607    &...    BIC      r6,r6,#7
        0x0081b1b2:    3608        .6      ADDS     r6,r6,#8
        0x0081b1b4:    e7d8        ..      B        0x81b168 ; __printf + 12
        0x0081b1b6:    1d36        6.      ADDS     r6,r6,#4
        0x0081b1b8:    e7d6        ..      B        0x81b168 ; __printf + 12
        0x0081b1ba:    4628        (F      MOV      r0,r5
        0x0081b1bc:    e7da        ..      B        0x81b174 ; __printf + 24
        0x0081b1be:    6a20         j      LDR      r0,[r4,#0x20]
        0x0081b1c0:    e8bd81f0    ....    POP      {r4-r8,pc}
    .text
    _printf_str
        0x0081b1c4:    b570        p.      PUSH     {r4-r6,lr}
        0x0081b1c6:    460c        .F      MOV      r4,r1
        0x0081b1c8:    4605        .F      MOV      r5,r0
        0x0081b1ca:    2a01        .*      CMP      r2,#1
        0x0081b1cc:    d005        ..      BEQ      0x81b1da ; _printf_str + 22
        0x0081b1ce:    7828        (x      LDRB     r0,[r5,#0]
        0x0081b1d0:    0680        ..      LSLS     r0,r0,#26
        0x0081b1d2:    d500        ..      BPL      0x81b1d6 ; _printf_str + 18
        0x0081b1d4:    69ea        .i      LDR      r2,[r5,#0x1c]
        0x0081b1d6:    2300        .#      MOVS     r3,#0
        0x0081b1d8:    e002        ..      B        0x81b1e0 ; _printf_str + 28
        0x0081b1da:    2301        .#      MOVS     r3,#1
        0x0081b1dc:    e005        ..      B        0x81b1ea ; _printf_str + 38
        0x0081b1de:    1c5b        [.      ADDS     r3,r3,#1
        0x0081b1e0:    4293        .B      CMP      r3,r2
        0x0081b1e2:    d202        ..      BCS      0x81b1ea ; _printf_str + 38
        0x0081b1e4:    5ce0        .\      LDRB     r0,[r4,r3]
        0x0081b1e6:    2800        .(      CMP      r0,#0
        0x0081b1e8:    d1f9        ..      BNE      0x81b1de ; _printf_str + 26
        0x0081b1ea:    69a8        .i      LDR      r0,[r5,#0x18]
        0x0081b1ec:    18e6        ..      ADDS     r6,r4,r3
        0x0081b1ee:    1ac0        ..      SUBS     r0,r0,r3
        0x0081b1f0:    61a8        .a      STR      r0,[r5,#0x18]
        0x0081b1f2:    6a28        (j      LDR      r0,[r5,#0x20]
        0x0081b1f4:    4418        .D      ADD      r0,r0,r3
        0x0081b1f6:    6228        (b      STR      r0,[r5,#0x20]
        0x0081b1f8:    4628        (F      MOV      r0,r5
        0x0081b1fa:    f3af8000    ....    NOP.W    
        0x0081b1fe:    e004        ..      B        0x81b20a ; _printf_str + 70
        0x0081b200:    e9d52101    ...!    LDRD     r2,r1,[r5,#4]
        0x0081b204:    f8140b01    ....    LDRB     r0,[r4],#1
        0x0081b208:    4790        .G      BLX      r2
        0x0081b20a:    42b4        .B      CMP      r4,r6
        0x0081b20c:    d3f8        ..      BCC      0x81b200 ; _printf_str + 60
        0x0081b20e:    4628        (F      MOV      r0,r5
        0x0081b210:    f3af8000    ....    NOP.W    
        0x0081b214:    bd70        p.      POP      {r4-r6,pc}
        0x0081b216:    0000        ..      MOVS     r0,r0
    .text
    _printf_int_dec
        0x0081b218:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0081b21c:    4606        .F      MOV      r6,r0
        0x0081b21e:    2400        .$      MOVS     r4,#0
        0x0081b220:    6810        .h      LDR      r0,[r2,#0]
        0x0081b222:    2975        u)      CMP      r1,#0x75
        0x0081b224:    4631        1F      MOV      r1,r6
        0x0081b226:    a516        ..      ADR      r5,{pc}+0x5a ; 0x81b280
        0x0081b228:    d010        ..      BEQ      0x81b24c ; _printf_int_dec + 52
        0x0081b22a:    f3af8000    ....    NOP.W    
        0x0081b22e:    2800        .(      CMP      r0,#0
        0x0081b230:    da02        ..      BGE      0x81b238 ; _printf_int_dec + 32
        0x0081b232:    4240        @B      RSBS     r0,r0,#0
        0x0081b234:    a513        ..      ADR      r5,{pc}+0x50 ; 0x81b284
        0x0081b236:    e007        ..      B        0x81b248 ; _printf_int_dec + 48
        0x0081b238:    6831        1h      LDR      r1,[r6,#0]
        0x0081b23a:    078a        ..      LSLS     r2,r1,#30
        0x0081b23c:    d501        ..      BPL      0x81b242 ; _printf_int_dec + 42
        0x0081b23e:    a512        ..      ADR      r5,{pc}+0x4a ; 0x81b288
        0x0081b240:    e002        ..      B        0x81b248 ; _printf_int_dec + 48
        0x0081b242:    0749        I.      LSLS     r1,r1,#29
        0x0081b244:    d504        ..      BPL      0x81b250 ; _printf_int_dec + 56
        0x0081b246:    a511        ..      ADR      r5,{pc}+0x46 ; 0x81b28c
        0x0081b248:    2401        .$      MOVS     r4,#1
        0x0081b24a:    e001        ..      B        0x81b250 ; _printf_int_dec + 56
        0x0081b24c:    f3af8000    ....    NOP.W    
        0x0081b250:    2100        .!      MOVS     r1,#0
        0x0081b252:    220a        ."      MOVS     r2,#0xa
        0x0081b254:    f1060724    ..$.    ADD      r7,r6,#0x24
        0x0081b258:    e009        ..      B        0x81b26e ; _printf_int_dec + 86
        0x0081b25a:    fbb0fcf2    ....    UDIV     r12,r0,r2
        0x0081b25e:    fbb0f3f2    ....    UDIV     r3,r0,r2
        0x0081b262:    fb02001c    ....    MLS      r0,r2,r12,r0
        0x0081b266:    3030        00      ADDS     r0,r0,#0x30
        0x0081b268:    5478        xT      STRB     r0,[r7,r1]
        0x0081b26a:    4618        .F      MOV      r0,r3
        0x0081b26c:    1c49        I.      ADDS     r1,r1,#1
        0x0081b26e:    2800        .(      CMP      r0,#0
        0x0081b270:    d1f3        ..      BNE      0x81b25a ; _printf_int_dec + 66
        0x0081b272:    4623        #F      MOV      r3,r4
        0x0081b274:    462a        *F      MOV      r2,r5
        0x0081b276:    4630        0F      MOV      r0,r6
        0x0081b278:    e8bd41f0    ...A    POP      {r4-r8,lr}
        0x0081b27c:    f000b838    ..8.    B.W      _printf_int_common ; 0x81b2f0
    $d
        0x0081b280:    00000000    ....    DCD    0
        0x0081b284:    0000002d    -...    DCD    45
        0x0081b288:    0000002b    +...    DCD    43
        0x0081b28c:    00000020     ...    DCD    32
    $t
    .text
    atoll
        0x0081b290:    b570        p.      PUSH     {r4-r6,lr}
        0x0081b292:    4606        .F      MOV      r6,r0
        0x0081b294:    f000f828    ..(.    BL       __aeabi_errno_addr ; 0x81b2e8
        0x0081b298:    6804        .h      LDR      r4,[r0,#0]
        0x0081b29a:    4605        .F      MOV      r5,r0
        0x0081b29c:    4630        0F      MOV      r0,r6
        0x0081b29e:    220a        ."      MOVS     r2,#0xa
        0x0081b2a0:    2100        .!      MOVS     r1,#0
        0x0081b2a2:    f000f8b2    ....    BL       __strtoll ; 0x81b40a
        0x0081b2a6:    602c        ,`      STR      r4,[r5,#0]
        0x0081b2a8:    bd70        p.      POP      {r4-r6,pc}
        0x0081b2aa:    0000        ..      MOVS     r0,r0
    .text
    srand
        0x0081b2ac:    490b        .I      LDR      r1,[pc,#44] ; [0x81b2dc] = 0x209bf8
        0x0081b2ae:    b510        ..      PUSH     {r4,lr}
        0x0081b2b0:    f1a1027c    ..|.    SUB      r2,r1,#0x7c
        0x0081b2b4:    4c0a        .L      LDR      r4,[pc,#40] ; [0x81b2e0] = 0x66d619e1
        0x0081b2b6:    e9c21237    ..7.    STRD     r1,r2,[r2,#0xdc]
        0x0081b2ba:    2137        7!      MOVS     r1,#0x37
        0x0081b2bc:    e006        ..      B        0x81b2cc ; srand + 32
        0x0081b2be:    eb004310    ...C    ADD      r3,r0,r0,LSR #16
        0x0081b2c2:    f8423021    B.!0    STR      r3,[r2,r1,LSL #2]
        0x0081b2c6:    4b07        .K      LDR      r3,[pc,#28] ; [0x81b2e4] = 0x10dcd
        0x0081b2c8:    fb004003    ...@    MLA      r0,r0,r3,r4
        0x0081b2cc:    1e0b        ..      SUBS     r3,r1,#0
        0x0081b2ce:    f1a10101    ....    SUB      r1,r1,#1
        0x0081b2d2:    dcf4        ..      BGT      0x81b2be ; srand + 18
        0x0081b2d4:    bd10        ..      POP      {r4,pc}
    _rand_init
        0x0081b2d6:    2001        .       MOVS     r0,#1
        0x0081b2d8:    e7e8        ..      B        srand ; 0x81b2ac
    $d
        0x0081b2da:    0000        ..      DCW    0
        0x0081b2dc:    00209bf8    .. .    DCD    2137080
        0x0081b2e0:    66d619e1    ...f    DCD    1725307361
        0x0081b2e4:    00010dcd    ....    DCD    69069
    $t
    .text
    __aeabi_errno_addr
    __errno
    __rt_errno_addr
        0x0081b2e8:    4800        .H      LDR      r0,[pc,#0] ; [0x81b2ec] = 0x209c60
        0x0081b2ea:    4770        pG      BX       lr
    $d
        0x0081b2ec:    00209c60    `. .    DCD    2137184
    $t
    .text
    _printf_int_common
        0x0081b2f0:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x0081b2f4:    460d        .F      MOV      r5,r1
        0x0081b2f6:    4699        .F      MOV      r9,r3
        0x0081b2f8:    4692        .F      MOV      r10,r2
        0x0081b2fa:    4604        .F      MOV      r4,r0
        0x0081b2fc:    f1000824    ..$.    ADD      r8,r0,#0x24
        0x0081b300:    6801        .h      LDR      r1,[r0,#0]
        0x0081b302:    0688        ..      LSLS     r0,r1,#26
        0x0081b304:    d504        ..      BPL      0x81b310 ; _printf_int_common + 32
        0x0081b306:    69e0        .i      LDR      r0,[r4,#0x1c]
        0x0081b308:    f0210110    !...    BIC      r1,r1,#0x10
        0x0081b30c:    6021        !`      STR      r1,[r4,#0]
        0x0081b30e:    e000        ..      B        0x81b312 ; _printf_int_common + 34
        0x0081b310:    2001        .       MOVS     r0,#1
        0x0081b312:    42a8        .B      CMP      r0,r5
        0x0081b314:    dd01        ..      BLE      0x81b31a ; _printf_int_common + 42
        0x0081b316:    1b47        G.      SUBS     r7,r0,r5
        0x0081b318:    e000        ..      B        0x81b31c ; _printf_int_common + 44
        0x0081b31a:    2700        .'      MOVS     r7,#0
        0x0081b31c:    69a1        .i      LDR      r1,[r4,#0x18]
        0x0081b31e:    197a        z.      ADDS     r2,r7,r5
        0x0081b320:    eb020009    ....    ADD      r0,r2,r9
        0x0081b324:    1a08        ..      SUBS     r0,r1,r0
        0x0081b326:    61a0        .a      STR      r0,[r4,#0x18]
        0x0081b328:    7820         x      LDRB     r0,[r4,#0]
        0x0081b32a:    06c0        ..      LSLS     r0,r0,#27
        0x0081b32c:    d402        ..      BMI      0x81b334 ; _printf_int_common + 68
        0x0081b32e:    4620         F      MOV      r0,r4
        0x0081b330:    f3af8000    ....    NOP.W    
        0x0081b334:    2600        .&      MOVS     r6,#0
        0x0081b336:    e008        ..      B        0x81b34a ; _printf_int_common + 90
        0x0081b338:    e9d42101    ...!    LDRD     r2,r1,[r4,#4]
        0x0081b33c:    f81a0006    ....    LDRB     r0,[r10,r6]
        0x0081b340:    4790        .G      BLX      r2
        0x0081b342:    6a20         j      LDR      r0,[r4,#0x20]
        0x0081b344:    1c40        @.      ADDS     r0,r0,#1
        0x0081b346:    1c76        v.      ADDS     r6,r6,#1
        0x0081b348:    6220         b      STR      r0,[r4,#0x20]
        0x0081b34a:    454e        NE      CMP      r6,r9
        0x0081b34c:    dbf4        ..      BLT      0x81b338 ; _printf_int_common + 72
        0x0081b34e:    7820         x      LDRB     r0,[r4,#0]
        0x0081b350:    06c0        ..      LSLS     r0,r0,#27
        0x0081b352:    d50a        ..      BPL      0x81b36a ; _printf_int_common + 122
        0x0081b354:    4620         F      MOV      r0,r4
        0x0081b356:    f3af8000    ....    NOP.W    
        0x0081b35a:    e006        ..      B        0x81b36a ; _printf_int_common + 122
        0x0081b35c:    e9d42101    ...!    LDRD     r2,r1,[r4,#4]
        0x0081b360:    2030        0       MOVS     r0,#0x30
        0x0081b362:    4790        .G      BLX      r2
        0x0081b364:    6a20         j      LDR      r0,[r4,#0x20]
        0x0081b366:    1c40        @.      ADDS     r0,r0,#1
        0x0081b368:    6220         b      STR      r0,[r4,#0x20]
        0x0081b36a:    1e38        8.      SUBS     r0,r7,#0
        0x0081b36c:    f1a70701    ....    SUB      r7,r7,#1
        0x0081b370:    dcf4        ..      BGT      0x81b35c ; _printf_int_common + 108
        0x0081b372:    e007        ..      B        0x81b384 ; _printf_int_common + 148
        0x0081b374:    e9d42101    ...!    LDRD     r2,r1,[r4,#4]
        0x0081b378:    f8180005    ....    LDRB     r0,[r8,r5]
        0x0081b37c:    4790        .G      BLX      r2
        0x0081b37e:    6a20         j      LDR      r0,[r4,#0x20]
        0x0081b380:    1c40        @.      ADDS     r0,r0,#1
        0x0081b382:    6220         b      STR      r0,[r4,#0x20]
        0x0081b384:    1e28        (.      SUBS     r0,r5,#0
        0x0081b386:    f1a50501    ....    SUB      r5,r5,#1
        0x0081b38a:    dcf3        ..      BGT      0x81b374 ; _printf_int_common + 132
        0x0081b38c:    4620         F      MOV      r0,r4
        0x0081b38e:    f3af8000    ....    NOP.W    
        0x0081b392:    7820         x      LDRB     r0,[r4,#0]
        0x0081b394:    0600        ..      LSLS     r0,r0,#24
        0x0081b396:    d502        ..      BPL      0x81b39e ; _printf_int_common + 174
        0x0081b398:    2002        .       MOVS     r0,#2
        0x0081b39a:    e8bd87f0    ....    POP      {r4-r10,pc}
        0x0081b39e:    2001        .       MOVS     r0,#1
        0x0081b3a0:    e7fb        ..      B        0x81b39a ; _printf_int_common + 170
        0x0081b3a2:    0000        ..      MOVS     r0,r0
    .text
    _printf_input_char
        0x0081b3a4:    6901        .i      LDR      r1,[r0,#0x10]
        0x0081b3a6:    1c4a        J.      ADDS     r2,r1,#1
        0x0081b3a8:    6102        .a      STR      r2,[r0,#0x10]
        0x0081b3aa:    7808        .x      LDRB     r0,[r1,#0]
        0x0081b3ac:    4770        pG      BX       lr
    _printf_char_common
        0x0081b3ae:    b500        ..      PUSH     {lr}
        0x0081b3b0:    b08f        ..      SUB      sp,sp,#0x3c
        0x0081b3b2:    e9cd3101    ...1    STRD     r3,r1,[sp,#4]
        0x0081b3b6:    2100        .!      MOVS     r1,#0
        0x0081b3b8:    9105        ..      STR      r1,[sp,#0x14]
        0x0081b3ba:    4905        .I      LDR      r1,[pc,#20] ; [0x81b3d0] = 0xffffffe5
        0x0081b3bc:    4479        yD      ADD      r1,r1,pc
        0x0081b3be:    e9cd1003    ....    STRD     r1,r0,[sp,#0xc]
        0x0081b3c2:    4611        .F      MOV      r1,r2
        0x0081b3c4:    4668        hF      MOV      r0,sp
        0x0081b3c6:    f7fffec9    ....    BL       __printf ; 0x81b15c
        0x0081b3ca:    b00f        ..      ADD      sp,sp,#0x3c
        0x0081b3cc:    bd00        ..      POP      {pc}
    $d
        0x0081b3ce:    0000        ..      DCW    0
        0x0081b3d0:    ffffffe5    ....    DCD    4294967269
    $t
    .text
    _sputc
        0x0081b3d4:    680a        .h      LDR      r2,[r1,#0]
        0x0081b3d6:    f8020b01    ....    STRB     r0,[r2],#1
        0x0081b3da:    600a        .`      STR      r2,[r1,#0]
        0x0081b3dc:    4770        pG      BX       lr
    .text
    _printf_cs_common
        0x0081b3de:    b510        ..      PUSH     {r4,lr}
        0x0081b3e0:    6943        Ci      LDR      r3,[r0,#0x14]
        0x0081b3e2:    b113        ..      CBZ      r3,0x81b3ea ; _printf_cs_common + 12
        0x0081b3e4:    f3af8000    ....    NOP.W    
        0x0081b3e8:    e001        ..      B        0x81b3ee ; _printf_cs_common + 16
        0x0081b3ea:    f7fffeeb    ....    BL       _printf_str ; 0x81b1c4
        0x0081b3ee:    2001        .       MOVS     r0,#1
        0x0081b3f0:    bd10        ..      POP      {r4,pc}
    _printf_char
        0x0081b3f2:    7812        .x      LDRB     r2,[r2,#0]
        0x0081b3f4:    f1000124    ..$.    ADD      r1,r0,#0x24
        0x0081b3f8:    700a        .p      STRB     r2,[r1,#0]
        0x0081b3fa:    2200        ."      MOVS     r2,#0
        0x0081b3fc:    704a        Jp      STRB     r2,[r1,#1]
        0x0081b3fe:    2201        ."      MOVS     r2,#1
        0x0081b400:    e7ed        ..      B        _printf_cs_common ; 0x81b3de
    _printf_string
        0x0081b402:    6811        .h      LDR      r1,[r2,#0]
        0x0081b404:    f04f32ff    O..2    MOV      r2,#0xffffffff
        0x0081b408:    e7e9        ..      B        _printf_cs_common ; 0x81b3de
    .text
    __strtoll
        0x0081b40a:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x0081b40e:    4691        .F      MOV      r9,r2
        0x0081b410:    460e        .F      MOV      r6,r1
        0x0081b412:    4680        .F      MOV      r8,r0
        0x0081b414:    4604        .F      MOV      r4,r0
        0x0081b416:    2500        .%      MOVS     r5,#0
        0x0081b418:    f8147b01    ...{    LDRB     r7,[r4],#1
        0x0081b41c:    b12f        /.      CBZ      r7,0x81b42a ; __strtoll + 32
        0x0081b41e:    f000f83d    ..=.    BL       __rt_ctype_table ; 0x81b49c
        0x0081b422:    6800        .h      LDR      r0,[r0,#0]
        0x0081b424:    5dc0        .]      LDRB     r0,[r0,r7]
        0x0081b426:    07c0        ..      LSLS     r0,r0,#31
        0x0081b428:    d1f6        ..      BNE      0x81b418 ; __strtoll + 14
        0x0081b42a:    2f2b        +/      CMP      r7,#0x2b
        0x0081b42c:    d002        ..      BEQ      0x81b434 ; __strtoll + 42
        0x0081b42e:    2f2d        -/      CMP      r7,#0x2d
        0x0081b430:    d01e        ..      BEQ      0x81b470 ; __strtoll + 102
        0x0081b432:    1e64        d.      SUBS     r4,r4,#1
        0x0081b434:    464a        JF      MOV      r2,r9
        0x0081b436:    4631        1F      MOV      r1,r6
        0x0081b438:    4620         F      MOV      r0,r4
        0x0081b43a:    f000f837    ..7.    BL       _strtoull ; 0x81b4ac
        0x0081b43e:    b126        &.      CBZ      r6,0x81b44a ; __strtoll + 64
        0x0081b440:    6832        2h      LDR      r2,[r6,#0]
        0x0081b442:    42a2        .B      CMP      r2,r4
        0x0081b444:    d101        ..      BNE      0x81b44a ; __strtoll + 64
        0x0081b446:    f8c68000    ....    STR      r8,[r6,#0]
        0x0081b44a:    f04f0402    O...    MOV      r4,#2
        0x0081b44e:    056a        j.      LSLS     r2,r5,#21
        0x0081b450:    d518        ..      BPL      0x81b484 ; __strtoll + 122
        0x0081b452:    2300        .#      MOVS     r3,#0
        0x0081b454:    ebd00503    ....    RSBS     r5,r0,r3
        0x0081b458:    eb630201    c...    SBC      r2,r3,r1
        0x0081b45c:    1b5d        ].      SUBS     r5,r3,r5
        0x0081b45e:    4193        .A      SBCS     r3,r3,r2
        0x0081b460:    db09        ..      BLT      0x81b476 ; __strtoll + 108
        0x0081b462:    2300        .#      MOVS     r3,#0
        0x0081b464:    ebd00003    ....    RSBS     r0,r0,r3
        0x0081b468:    eb630101    c...    SBC      r1,r3,r1
        0x0081b46c:    e8bd87f0    ....    POP      {r4-r10,pc}
        0x0081b470:    f4456580    E..e    ORR      r5,r5,#0x400
        0x0081b474:    e7de        ..      B        0x81b434 ; __strtoll + 42
        0x0081b476:    f7ffff37    ..7.    BL       __aeabi_errno_addr ; 0x81b2e8
        0x0081b47a:    6004        .`      STR      r4,[r0,#0]
        0x0081b47c:    2000        .       MOVS     r0,#0
        0x0081b47e:    f04f4100    O..A    MOV      r1,#0x80000000
        0x0081b482:    e7f3        ..      B        0x81b46c ; __strtoll + 98
        0x0081b484:    1e02        ..      SUBS     r2,r0,#0
        0x0081b486:    f1710200    q...    SBCS     r2,r1,#0
        0x0081b48a:    daef        ..      BGE      0x81b46c ; __strtoll + 98
        0x0081b48c:    f7ffff2c    ..,.    BL       __aeabi_errno_addr ; 0x81b2e8
        0x0081b490:    6004        .`      STR      r4,[r0,#0]
        0x0081b492:    f04f30ff    O..0    MOV      r0,#0xffffffff
        0x0081b496:    0841        A.      LSRS     r1,r0,#1
        0x0081b498:    e7e8        ..      B        0x81b46c ; __strtoll + 98
        0x0081b49a:    0000        ..      MOVS     r0,r0
    .text
    __rt_ctype_table
        0x0081b49c:    b510        ..      PUSH     {r4,lr}
        0x0081b49e:    f000f867    ..g.    BL       __rt_locale ; 0x81b570
        0x0081b4a2:    1d00        ..      ADDS     r0,r0,#4
        0x0081b4a4:    bd10        ..      POP      {r4,pc}
        0x0081b4a6:    bf00        ..      NOP      
    $d
        0x0081b4a8:    00000b29    )...    DCD    2857
    $t
    .text
    _strtoull
        0x0081b4ac:    e92d4ff7    -..O    PUSH     {r0-r2,r4-r11,lr}
        0x0081b4b0:    f04f0900    O...    MOV      r9,#0
        0x0081b4b4:    4615        .F      MOV      r5,r2
        0x0081b4b6:    46ca        .F      MOV      r10,r9
        0x0081b4b8:    9c00        ..      LDR      r4,[sp,#0]
        0x0081b4ba:    f8140b01    ....    LDRB     r0,[r4],#1
        0x0081b4be:    2830        0(      CMP      r0,#0x30
        0x0081b4c0:    d001        ..      BEQ      0x81b4c6 ; _strtoull + 26
        0x0081b4c2:    b1ad        ..      CBZ      r5,0x81b4f0 ; _strtoull + 68
        0x0081b4c4:    e015        ..      B        0x81b4f2 ; _strtoull + 70
        0x0081b4c6:    f8140b01    ....    LDRB     r0,[r4],#1
        0x0081b4ca:    f04f0901    O...    MOV      r9,#1
        0x0081b4ce:    2878        x(      CMP      r0,#0x78
        0x0081b4d0:    d003        ..      BEQ      0x81b4da ; _strtoull + 46
        0x0081b4d2:    2858        X(      CMP      r0,#0x58
        0x0081b4d4:    d001        ..      BEQ      0x81b4da ; _strtoull + 46
        0x0081b4d6:    b14d        M.      CBZ      r5,0x81b4ec ; _strtoull + 64
        0x0081b4d8:    e00b        ..      B        0x81b4f2 ; _strtoull + 70
        0x0081b4da:    b10d        ..      CBZ      r5,0x81b4e0 ; _strtoull + 52
        0x0081b4dc:    2d10        .-      CMP      r5,#0x10
        0x0081b4de:    d108        ..      BNE      0x81b4f2 ; _strtoull + 70
        0x0081b4e0:    f04f0900    O...    MOV      r9,#0
        0x0081b4e4:    f8140b01    ....    LDRB     r0,[r4],#1
        0x0081b4e8:    2510        .%      MOVS     r5,#0x10
        0x0081b4ea:    e002        ..      B        0x81b4f2 ; _strtoull + 70
        0x0081b4ec:    2508        .%      MOVS     r5,#8
        0x0081b4ee:    e000        ..      B        0x81b4f2 ; _strtoull + 70
        0x0081b4f0:    250a        .%      MOVS     r5,#0xa
        0x0081b4f2:    2700        .'      MOVS     r7,#0
        0x0081b4f4:    ea4f7be5    O..{    ASR      r11,r5,#31
        0x0081b4f8:    463e        >F      MOV      r6,r7
        0x0081b4fa:    46b8        .F      MOV      r8,r7
        0x0081b4fc:    e016        ..      B        0x81b52c ; _strtoull + 128
        0x0081b4fe:    fba52307    ...#    UMULL    r2,r3,r5,r7
        0x0081b502:    f04f0901    O...    MOV      r9,#1
        0x0081b506:    fb050008    ....    MLA      r0,r5,r8,r0
        0x0081b50a:    fb0b3107    ...1    MLA      r1,r11,r7,r3
        0x0081b50e:    0c03        ..      LSRS     r3,r0,#16
        0x0081b510:    fb051606    ....    MLA      r6,r5,r6,r1
        0x0081b514:    18d7        ..      ADDS     r7,r2,r3
        0x0081b516:    fa1ff880    ....    UXTH     r8,r0
        0x0081b51a:    f1460600    F...    ADC      r6,r6,#0
        0x0081b51e:    1e38        8.      SUBS     r0,r7,#0
        0x0081b520:    f5763080    v..0    SBCS     r0,r6,#0x10000
        0x0081b524:    d300        ..      BCC      0x81b528 ; _strtoull + 124
        0x0081b526:    46ca        .F      MOV      r10,r9
        0x0081b528:    f8140b01    ....    LDRB     r0,[r4],#1
        0x0081b52c:    4629        )F      MOV      r1,r5
        0x0081b52e:    f000f823    ..#.    BL       _chval ; 0x81b578
        0x0081b532:    2800        .(      CMP      r0,#0
        0x0081b534:    dae3        ..      BGE      0x81b4fe ; _strtoull + 82
        0x0081b536:    9801        ..      LDR      r0,[sp,#4]
        0x0081b538:    b138        8.      CBZ      r0,0x81b54a ; _strtoull + 158
        0x0081b53a:    f1b90f00    ....    CMP      r9,#0
        0x0081b53e:    d001        ..      BEQ      0x81b544 ; _strtoull + 152
        0x0081b540:    1e64        d.      SUBS     r4,r4,#1
        0x0081b542:    e000        ..      B        0x81b546 ; _strtoull + 154
        0x0081b544:    9c00        ..      LDR      r4,[sp,#0]
        0x0081b546:    9801        ..      LDR      r0,[sp,#4]
        0x0081b548:    6004        .`      STR      r4,[r0,#0]
        0x0081b54a:    f1ba0f00    ....    CMP      r10,#0
        0x0081b54e:    d008        ..      BEQ      0x81b562 ; _strtoull + 182
        0x0081b550:    f7fffeca    ....    BL       __aeabi_errno_addr ; 0x81b2e8
        0x0081b554:    2102        .!      MOVS     r1,#2
        0x0081b556:    6001        .`      STR      r1,[r0,#0]
        0x0081b558:    1ec8        ..      SUBS     r0,r1,#3
        0x0081b55a:    4601        .F      MOV      r1,r0
        0x0081b55c:    b003        ..      ADD      sp,sp,#0xc
        0x0081b55e:    e8bd8ff0    ....    POP      {r4-r11,pc}
        0x0081b562:    0431        1.      LSLS     r1,r6,#16
        0x0081b564:    ea414117    A..A    ORR      r1,r1,r7,LSR #16
        0x0081b568:    ea484007    H..@    ORR      r0,r8,r7,LSL #16
        0x0081b56c:    e7f6        ..      B        0x81b55c ; _strtoull + 176
        0x0081b56e:    0000        ..      MOVS     r0,r0
    .text
    __rt_locale
        0x0081b570:    4800        .H      LDR      r0,[pc,#0] ; [0x81b574] = 0x209c64
        0x0081b572:    4770        pG      BX       lr
    $d
        0x0081b574:    00209c64    d. .    DCD    2137188
    $t
    .text
    _chval
        0x0081b578:    283a        :(      CMP      r0,#0x3a
        0x0081b57a:    d200        ..      BCS      0x81b57e ; _chval + 6
        0x0081b57c:    3830        08      SUBS     r0,r0,#0x30
        0x0081b57e:    f0200220     . .    BIC      r2,r0,#0x20
        0x0081b582:    2a41        A*      CMP      r2,#0x41
        0x0081b584:    d301        ..      BCC      0x81b58a ; _chval + 18
        0x0081b586:    f1a20037    ..7.    SUB      r0,r2,#0x37
        0x0081b58a:    4288        .B      CMP      r0,r1
        0x0081b58c:    d301        ..      BCC      0x81b592 ; _chval + 26
        0x0081b58e:    f04f30ff    O..0    MOV      r0,#0xffffffff
        0x0081b592:    4770        pG      BX       lr
    i.UpdateMAC
    UpdateMAC
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_platform.c (16)
        0x0081b594:    b510        ..      PUSH     {r4,lr}
        0x0081b596:    b088        ..      SUB      sp,sp,#0x20
        0x0081b598:    6801        .h      LDR      r1,[r0,#0]
        0x0081b59a:    9103        ..      STR      r1,[sp,#0xc]
        0x0081b59c:    8880        ..      LDRH     r0,[r0,#4]
        0x0081b59e:    f8ad0010    ....    STRH     r0,[sp,#0x10]
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_platform.c (18)
        0x0081b5a2:    4c0d        .L      LDR      r4,[pc,#52] ; [0x81b5d8] = 0x801400
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_platform.c (25)
        0x0081b5a4:    22ff        ."      MOVS     r2,#0xff
        0x0081b5a6:    2106        .!      MOVS     r1,#6
        0x0081b5a8:    a805        ..      ADD      r0,sp,#0x14
        0x0081b5aa:    f43ef52f    >./.    BL       __aeabi_memset ; 0x5a00c
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_platform.c (27)
        0x0081b5ae:    2033        3       MOVS     r0,#0x33
        0x0081b5b0:    f8ad0000    ....    STRH     r0,[sp,#0]
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_platform.c (28)
        0x0081b5b4:    2006        .       MOVS     r0,#6
        0x0081b5b6:    f88d0002    ....    STRB     r0,[sp,#2]
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_platform.c (29)
        0x0081b5ba:    a803        ..      ADD      r0,sp,#0xc
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_platform.c (30)
        0x0081b5bc:    9001        ..      STR      r0,[sp,#4]
        0x0081b5be:    a805        ..      ADD      r0,sp,#0x14
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_platform.c (32)
        0x0081b5c0:    9002        ..      STR      r0,[sp,#8]
        0x0081b5c2:    a106        ..      ADR      r1,{pc}+0x1a ; 0x81b5dc
        0x0081b5c4:    f04f5004    O..P    MOV      r0,#0x21000000
        0x0081b5c8:    f7ecd9f2    ....    BL       log_direct ; 0x79b0
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_platform.c (33)
        0x0081b5cc:    4669        iF      MOV      r1,sp
        0x0081b5ce:    4620         F      MOV      r0,r4
        0x0081b5d0:    f000f87e    ..~.    BL       cfg_add_item ; 0x81b6d0
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_platform.c (36)
        0x0081b5d4:    b008        ..      ADD      sp,sp,#0x20
        0x0081b5d6:    bd10        ..      POP      {r4,pc}
    $d
        0x0081b5d8:    00801400    ....    DCD    8393728
        0x0081b5dc:    64616552    Read    DCD    1684104530
        0x0081b5e0:    6f742079    y to    DCD    1869881465
        0x0081b5e4:    64707520     upd    DCD    1685091616
        0x0081b5e8:    20657461    ate     DCD    543519841
        0x0081b5ec:    2143414d    MAC!    DCD    558055757
        0x0081b5f0:    0000000a    ....    DCD    10
    $t
    i._cfg_check_header_valid
    _cfg_check_header_valid
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (14)
        0x0081b5f4:    b510        ..      PUSH     {r4,lr}
        0x0081b5f6:    4601        .F      MOV      r1,r0
        0x0081b5f8:    4b05        .K      LDR      r3,[pc,#20] ; [0x81b610] = 0x8721bee2
        0x0081b5fa:    680a        .h      LDR      r2,[r1,#0]
        0x0081b5fc:    2001        .       MOVS     r0,#1
        0x0081b5fe:    429a        .B      CMP      r2,r3
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (14)
        0x0081b600:    d005        ..      BEQ      0x81b60e ; _cfg_check_header_valid + 26
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (19)
        0x0081b602:    a104        ..      ADR      r1,{pc}+0x12 ; 0x81b614
        0x0081b604:    f04f5004    O..P    MOV      r0,#0x21000000
        0x0081b608:    f7ecd9d2    ....    BL       log_direct ; 0x79b0
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (22)
        0x0081b60c:    2000        .       MOVS     r0,#0
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (26)
        0x0081b60e:    bd10        ..      POP      {r4,pc}
    $d
        0x0081b610:    8721bee2    ..!.    DCD    2267135714
        0x0081b614:    6e6f7277    wron    DCD    1852797559
        0x0081b618:    69732067    g si    DCD    1769152615
        0x0081b61c:    74616e67    gnat    DCD    1952542311
        0x0081b620:    21657275    ure!    DCD    560296565
        0x0081b624:    61655220     Rea    DCD    1634030112
        0x0081b628:    38252064    d %8    DCD    941957220
        0x0081b62c:    3d212058    X !=    DCD    1025581144
        0x0081b630:    71655220     Req    DCD    1902465568
        0x0081b634:    65697275    urie    DCD    1701409397
        0x0081b638:    38252064    d %8    DCD    941957220
        0x0081b63c:    00000a58    X...    DCD    2648
    $t
    i._cfg_write_to_flash
    _cfg_write_to_flash
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (30)
        0x0081b640:    e92d43f8    -..C    PUSH     {r3-r9,lr}
        0x0081b644:    2320         #      MOVS     r3,#0x20
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (30)
        0x0081b646:    4690        .F      MOV      r8,r2
        0x0081b648:    4689        .F      MOV      r9,r1
        0x0081b64a:    4606        .F      MOV      r6,r0
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (32)
        0x0081b64c:    015d        ].      LSLS     r5,r3,#5
        0x0081b64e:    4a19        .J      LDR      r2,[pc,#100] ; [0x81b6b4] = 0x81c4f3
        0x0081b650:    4629        )F      MOV      r1,r5
        0x0081b652:    2000        .       MOVS     r0,#0
        0x0081b654:    f40af3b0    ....    BL       os_mem_zalloc_intern ; 0x25db8
        0x0081b658:    0004        ..      MOVS     r4,r0
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (33)
        0x0081b65a:    f04f0000    O...    MOV      r0,#0
        0x0081b65e:    f88d0000    ....    STRB     r0,[sp,#0]
        0x0081b662:    462a        *F      MOV      r2,r5
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (34)
        0x0081b664:    d020         .      BEQ      0x81b6a8 ; _cfg_write_to_flash + 104
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (40)
        0x0081b666:    f5a66180    ...a    SUB      r1,r6,#0x400
        0x0081b66a:    460f        .F      MOV      r7,r1
        0x0081b66c:    4620         F      MOV      r0,r4
        0x0081b66e:    f43ef414    >...    BL       __aeabi_memcpy ; 0x59e9a
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (42)
        0x0081b672:    4669        iF      MOV      r1,sp
        0x0081b674:    4638        8F      MOV      r0,r7
        0x0081b676:    f000f96e    ..n.    BL       flash_sw_protect_unlock_by_addr_locked ; 0x81b956
        0x0081b67a:    4639        9F      MOV      r1,r7
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (45)
        0x0081b67c:    2002        .       MOVS     r0,#2
        0x0081b67e:    f7f0dcd2    ....    BL       flash_erase_locked ; 0xc026
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (47)
        0x0081b682:    4622        "F      MOV      r2,r4
        0x0081b684:    4629        )F      MOV      r1,r5
        0x0081b686:    4638        8F      MOV      r0,r7
        0x0081b688:    f7f0deff    ....    BL       flash_write_locked ; 0xc48a
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (48)
        0x0081b68c:    464a        JF      MOV      r2,r9
        0x0081b68e:    4641        AF      MOV      r1,r8
        0x0081b690:    4630        0F      MOV      r0,r6
        0x0081b692:    f7f0defa    ....    BL       flash_write_locked ; 0xc48a
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (50)
        0x0081b696:    f89d0000    ....    LDRB     r0,[sp,#0]
        0x0081b69a:    f000f949    ..I.    BL       flash_set_block_protect_locked ; 0x81b930
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (52)
        0x0081b69e:    4620         F      MOV      r0,r4
        0x0081b6a0:    f40af3e9    ....    BL       os_mem_free ; 0x25e76
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (53)
        0x0081b6a4:    e8bd83f8    ....    POP      {r3-r9,pc}
        0x0081b6a8:    a103        ..      ADR      r1,{pc}+0x10 ; 0x81b6b8
        0x0081b6aa:    f04f5004    O..P    MOV      r0,#0x21000000
        0x0081b6ae:    f7ecd97f    ....    BL       log_direct ; 0x79b0
        0x0081b6b2:    e7f7        ..      B        0x81b6a4 ; _cfg_write_to_flash + 100
    $d
        0x0081b6b4:    0081c4f3    ....    DCD    8504563
        0x0081b6b8:    6c6c616d    mall    DCD    1819042157
        0x0081b6bc:    2520636f    oc %    DCD    622879599
        0x0081b6c0:    79622064    d by    DCD    2036473956
        0x0081b6c4:    20736574    tes     DCD    544433524
        0x0081b6c8:    6c696166    fail    DCD    1818845542
        0x0081b6cc:    00000021    !...    DCD    33
    $t
    i.cfg_add_item
    cfg_add_item
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (108)
        0x0081b6d0:    e92d47ff    -..G    PUSH     {r0-r10,lr}
        0x0081b6d4:    460c        .F      MOV      r4,r1
        0x0081b6d6:    4607        .F      MOV      r7,r0
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (113)
        0x0081b6d8:    2600        .&      MOVS     r6,#0
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (119)
        0x0081b6da:    f7ffff8b    ....    BL       _cfg_check_header_valid ; 0x81b5f4
        0x0081b6de:    2800        .(      CMP      r0,#0
        0x0081b6e0:    d04f        O.      BEQ      0x81b782 ; cfg_add_item + 178
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (124)
        0x0081b6e2:    aa03        ..      ADD      r2,sp,#0xc
        0x0081b6e4:    4621        !F      MOV      r1,r4
        0x0081b6e6:    4638        8F      MOV      r0,r7
        0x0081b6e8:    f000f88c    ....    BL       cfg_find_item ; 0x81b804
        0x0081b6ec:    b100        ..      CBZ      r0,0x81b6f0 ; cfg_add_item + 32
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (126)
        0x0081b6ee:    2601        .&      MOVS     r6,#1
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (129)
        0x0081b6f0:    f04f5804    O..X    MOV      r8,#0x21000000
        0x0081b6f4:    78a3        .x      LDRB     r3,[r4,#2]
        0x0081b6f6:    88ba        ..      LDRH     r2,[r7,#4]
        0x0081b6f8:    a133        3.      ADR      r1,{pc}+0xd0 ; 0x81b7c8
        0x0081b6fa:    4640        @F      MOV      r0,r8
        0x0081b6fc:    f7ecd958    ..X.    BL       log_direct ; 0x79b0
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (130)
        0x0081b700:    88b8        ..      LDRH     r0,[r7,#4]
        0x0081b702:    1d80        ..      ADDS     r0,r0,#6
        0x0081b704:    b280        ..      UXTH     r0,r0
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (131)
        0x0081b706:    b926        &.      CBNZ     r6,0x81b712 ; cfg_add_item + 66
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (133)
        0x0081b708:    78a1        .x      LDRB     r1,[r4,#2]
        0x0081b70a:    eb000041    ..A.    ADD      r0,r0,r1,LSL #1
        0x0081b70e:    1cc0        ..      ADDS     r0,r0,#3
        0x0081b710:    b280        ..      UXTH     r0,r0
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (137)
        0x0081b712:    f64f71fc    O..q    MOV      r1,#0xfffc
        0x0081b716:    1cc0        ..      ADDS     r0,r0,#3
        0x0081b718:    4008        .@      ANDS     r0,r0,r1
        0x0081b71a:    4681        .F      MOV      r9,r0
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (139)
        0x0081b71c:    4601        .F      MOV      r1,r0
        0x0081b71e:    238b        .#      MOVS     r3,#0x8b
        0x0081b720:    4a31        1J      LDR      r2,[pc,#196] ; [0x81b7e8] = 0x81c507
        0x0081b722:    2000        .       MOVS     r0,#0
        0x0081b724:    f40af348    ..H.    BL       os_mem_zalloc_intern ; 0x25db8
        0x0081b728:    0005        ..      MOVS     r5,r0
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (140)
        0x0081b72a:    d02d        -.      BEQ      0x81b788 ; cfg_add_item + 184
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (152)
        0x0081b72c:    22ff        ."      MOVS     r2,#0xff
        0x0081b72e:    4649        IF      MOV      r1,r9
        0x0081b730:    f43ef46c    >.l.    BL       __aeabi_memset ; 0x5a00c
        0x0081b734:    88b8        ..      LDRH     r0,[r7,#4]
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (156)
        0x0081b736:    4639        9F      MOV      r1,r7
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (157)
        0x0081b738:    1d80        ..      ADDS     r0,r0,#6
        0x0081b73a:    b280        ..      UXTH     r0,r0
        0x0081b73c:    4680        .F      MOV      r8,r0
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (158)
        0x0081b73e:    4602        .F      MOV      r2,r0
        0x0081b740:    4628        (F      MOV      r0,r5
        0x0081b742:    f43ef3aa    >...    BL       __aeabi_memcpy ; 0x59e9a
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (159)
        0x0081b746:    44a8        .D      ADD      r8,r8,r5
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (161)
        0x0081b748:    b32e        ..      CBZ      r6,0x81b796 ; cfg_add_item + 198
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (182)
        0x0081b74a:    f8bd000c    ....    LDRH     r0,[sp,#0xc]
        0x0081b74e:    4428        (D      ADD      r0,r0,r5
        0x0081b750:    1cc0        ..      ADDS     r0,r0,#3
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (183)
        0x0081b752:    9001        ..      STR      r0,[sp,#4]
        0x0081b754:    78a1        .x      LDRB     r1,[r4,#2]
        0x0081b756:    4408        .D      ADD      r0,r0,r1
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (185)
        0x0081b758:    9002        ..      STR      r0,[sp,#8]
        0x0081b75a:    78a2        .x      LDRB     r2,[r4,#2]
        0x0081b75c:    6861        ah      LDR      r1,[r4,#4]
        0x0081b75e:    9801        ..      LDR      r0,[sp,#4]
        0x0081b760:    f43ef39b    >...    BL       __aeabi_memcpy ; 0x59e9a
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (186)
        0x0081b764:    78a2        .x      LDRB     r2,[r4,#2]
        0x0081b766:    68a1        .h      LDR      r1,[r4,#8]
        0x0081b768:    9802        ..      LDR      r0,[sp,#8]
        0x0081b76a:    f43ef396    >...    BL       __aeabi_memcpy ; 0x59e9a
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (190)
        0x0081b76e:    464a        JF      MOV      r2,r9
        0x0081b770:    4629        )F      MOV      r1,r5
        0x0081b772:    4638        8F      MOV      r0,r7
        0x0081b774:    f7ffff64    ..d.    BL       _cfg_write_to_flash ; 0x81b640
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (192)
        0x0081b778:    2401        .$      MOVS     r4,#1
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (193)
        0x0081b77a:    4628        (F      MOV      r0,r5
        0x0081b77c:    f40af37b    ..{.    BL       os_mem_free ; 0x25e76
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (196)
        0x0081b780:    4620         F      MOV      r0,r4
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (197)
        0x0081b782:    b004        ..      ADD      sp,sp,#0x10
        0x0081b784:    e8bd87f0    ....    POP      {r4-r10,pc}
        0x0081b788:    464a        JF      MOV      r2,r9
        0x0081b78a:    a118        ..      ADR      r1,{pc}+0x62 ; 0x81b7ec
        0x0081b78c:    4640        @F      MOV      r0,r8
        0x0081b78e:    f7ecd90f    ....    BL       log_direct ; 0x79b0
        0x0081b792:    2400        .$      MOVS     r4,#0
        0x0081b794:    e7f4        ..      B        0x81b780 ; cfg_add_item + 176
        0x0081b796:    78a1        .x      LDRB     r1,[r4,#2]
        0x0081b798:    88a8        ..      LDRH     r0,[r5,#4]
        0x0081b79a:    2203        ."      MOVS     r2,#3
        0x0081b79c:    eb020141    ..A.    ADD      r1,r2,r1,LSL #1
        0x0081b7a0:    4408        .D      ADD      r0,r0,r1
        0x0081b7a2:    80a8        ..      STRH     r0,[r5,#4]
        0x0081b7a4:    4621        !F      MOV      r1,r4
        0x0081b7a6:    4640        @F      MOV      r0,r8
        0x0081b7a8:    f43ef377    >.w.    BL       __aeabi_memcpy ; 0x59e9a
        0x0081b7ac:    78a6        .x      LDRB     r6,[r4,#2]
        0x0081b7ae:    f1080003    ....    ADD      r0,r8,#3
        0x0081b7b2:    4680        .F      MOV      r8,r0
        0x0081b7b4:    4632        2F      MOV      r2,r6
        0x0081b7b6:    6861        ah      LDR      r1,[r4,#4]
        0x0081b7b8:    f43ef36f    >.o.    BL       __aeabi_memcpy ; 0x59e9a
        0x0081b7bc:    eb080006    ....    ADD      r0,r8,r6
        0x0081b7c0:    4632        2F      MOV      r2,r6
        0x0081b7c2:    68a1        .h      LDR      r1,[r4,#8]
        0x0081b7c4:    e7d1        ..      B        0x81b76a ; cfg_add_item + 154
    $d
        0x0081b7c6:    0000        ..      DCW    0
        0x0081b7c8:    20646c6f    old     DCD    543452271
        0x0081b7cc:    666e6f63    conf    DCD    1718513507
        0x0081b7d0:    6c206769    ig l    DCD    1814062953
        0x0081b7d4:    25206e65    en %    DCD    622882405
        0x0081b7d8:    69202c64    d, i    DCD    1763716196
        0x0081b7dc:    206d6574    tem     DCD    544040308
        0x0081b7e0:    206e656c    len     DCD    544105836
        0x0081b7e4:    000a6425    %d..    DCD    680997
        0x0081b7e8:    0081c507    ....    DCD    8504583
        0x0081b7ec:    6c6c616d    mall    DCD    1819042157
        0x0081b7f0:    2520636f    oc %    DCD    622879599
        0x0081b7f4:    79622064    d by    DCD    2036473956
        0x0081b7f8:    20736574    tes     DCD    544433524
        0x0081b7fc:    6c696166    fail    DCD    1818845542
        0x0081b800:    00000021    !...    DCD    33
    $t
    i.cfg_find_item
    cfg_find_item
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (56)
        0x0081b804:    e92d4ffe    -..O    PUSH     {r1-r11,lr}
        0x0081b808:    4691        .F      MOV      r9,r2
        0x0081b80a:    468a        .F      MOV      r10,r1
        0x0081b80c:    4607        .F      MOV      r7,r0
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (57)
        0x0081b80e:    f04f0800    O...    MOV      r8,#0
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (61)
        0x0081b812:    466d        mF      MOV      r5,sp
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (63)
        0x0081b814:    f7fffeee    ....    BL       _cfg_check_header_valid ; 0x81b5f4
        0x0081b818:    f04f5b04    O..[    MOV      r11,#0x21000000
        0x0081b81c:    b158        X.      CBZ      r0,0x81b836 ; cfg_find_item + 50
        0x0081b81e:    79b8        .y      LDRB     r0,[r7,#6]
        0x0081b820:    79f9        .y      LDRB     r1,[r7,#7]
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (71)
        0x0081b822:    1dbc        ..      ADDS     r4,r7,#6
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (72)
        0x0081b824:    eb002001    ...     ADD      r0,r0,r1,LSL #8
        0x0081b828:    f8ad0000    ....    STRH     r0,[sp,#0]
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (73)
        0x0081b82c:    7a38        8z      LDRB     r0,[r7,#8]
        0x0081b82e:    f88d0002    ....    STRB     r0,[sp,#2]
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (74)
        0x0081b832:    2606        .&      MOVS     r6,#6
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (76)
        0x0081b834:    e02e        ..      B        0x81b894 ; cfg_find_item + 144
        0x0081b836:    a11b        ..      ADR      r1,{pc}+0x6e ; 0x81b8a4
        0x0081b838:    4658        XF      MOV      r0,r11
        0x0081b83a:    f7ecd8b9    ....    BL       log_direct ; 0x79b0
        0x0081b83e:    e02d        -.      B        0x81b89c ; cfg_find_item + 152
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (80)
        0x0081b840:    882b        +.      LDRH     r3,[r5,#0]
        0x0081b842:    4632        2F      MOV      r2,r6
        0x0081b844:    a11c        ..      ADR      r1,{pc}+0x74 ; 0x81b8b8
        0x0081b846:    4658        XF      MOV      r0,r11
        0x0081b848:    f7ecd8b2    ....    BL       log_direct ; 0x79b0
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (81)
        0x0081b84c:    8829        ).      LDRH     r1,[r5,#0]
        0x0081b84e:    f8ba0000    ....    LDRH     r0,[r10,#0]
        0x0081b852:    4281        .B      CMP      r1,r0
        0x0081b854:    d10c        ..      BNE      0x81b870 ; cfg_find_item + 108
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (84)
        0x0081b856:    f1b90f00    ....    CMP      r9,#0
        0x0081b85a:    d001        ..      BEQ      0x81b860 ; cfg_find_item + 92
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (86)
        0x0081b85c:    f8a96000    ...`    STRH     r6,[r9,#0]
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (89)
        0x0081b860:    882a        *.      LDRH     r2,[r5,#0]
        0x0081b862:    a11b        ..      ADR      r1,{pc}+0x6e ; 0x81b8d0
        0x0081b864:    4658        XF      MOV      r0,r11
        0x0081b866:    f7ecd8a3    ....    BL       log_direct ; 0x79b0
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (90)
        0x0081b86a:    f04f0801    O...    MOV      r8,#1
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (91)
        0x0081b86e:    e015        ..      B        0x81b89c ; cfg_find_item + 152
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (95)
        0x0081b870:    78a8        .x      LDRB     r0,[r5,#2]
        0x0081b872:    2103        .!      MOVS     r1,#3
        0x0081b874:    eb010040    ..@.    ADD      r0,r1,r0,LSL #1
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (97)
        0x0081b878:    4404        .D      ADD      r4,r4,r0
        0x0081b87a:    4430        0D      ADD      r0,r0,r6
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (98)
        0x0081b87c:    7821        !x      LDRB     r1,[r4,#0]
        0x0081b87e:    7862        bx      LDRB     r2,[r4,#1]
        0x0081b880:    b286        ..      UXTH     r6,r0
        0x0081b882:    eb012102    ...!    ADD      r1,r1,r2,LSL #8
        0x0081b886:    8029        ).      STRH     r1,[r5,#0]
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (99)
        0x0081b888:    78a1        .x      LDRB     r1,[r4,#2]
        0x0081b88a:    f64030fa    @..0    MOV      r0,#0xbfa
        0x0081b88e:    70a9        .p      STRB     r1,[r5,#2]
        0x0081b890:    4286        .B      CMP      r6,r0
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (101)
        0x0081b892:    d203        ..      BCS      0x81b89c ; cfg_find_item + 152
        0x0081b894:    88b8        ..      LDRH     r0,[r7,#4]
        0x0081b896:    1d80        ..      ADDS     r0,r0,#6
        0x0081b898:    42b0        .B      CMP      r0,r6
        0x0081b89a:    d8d1        ..      BHI      0x81b840 ; cfg_find_item + 60
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (104)
        0x0081b89c:    4640        @F      MOV      r0,r8
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl876x_lib_cfg_int.c (105)
        0x0081b89e:    e8bd8ffe    ....    POP      {r1-r11,pc}
    $d
        0x0081b8a2:    0000        ..      DCW    0
        0x0081b8a4:    64616548    Head    DCD    1684104520
        0x0081b8a8:    69207265    er i    DCD    1763734117
        0x0081b8ac:    61562073    s Va    DCD    1633034355
        0x0081b8b0:    0a64696c    lid.    DCD    174352748
        0x0081b8b4:    00000000    ....    DCD    0
        0x0081b8b8:    20736f70    pos     DCD    544436080
        0x0081b8bc:    78323025    %02x    DCD    2016555045
        0x0081b8c0:    666f202c    , of    DCD    1718558764
        0x0081b8c4:    74657366    fset    DCD    1952805734
        0x0081b8c8:    32302520     %02    DCD    842016032
        0x0081b8cc:    00000a78    x...    DCD    2680
        0x0081b8d0:    6d657469    item    DCD    1835365481
        0x0081b8d4:    3230255b    [%02    DCD    842016091
        0x0081b8d8:    66205d78    x] f    DCD    1713397112
        0x0081b8dc:    646e756f    ound    DCD    1684960623
        0x0081b8e0:    00000021    !...    DCD    33
    $t
    i.flash_lock_new
    flash_lock_new
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (45)
        0x0081b8e4:    b510        ..      PUSH     {r4,lr}
        0x0081b8e6:    4604        .F      MOV      r4,r0
        0x0081b8e8:    480e        .H      LDR      r0,[pc,#56] ; [0x81b924] = 0x200d40
        0x0081b8ea:    6800        .h      LDR      r0,[r0,#0]
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (45)
        0x0081b8ec:    b128        (.      CBZ      r0,0x81b8fa ; flash_lock_new + 22
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (48)
        0x0081b8ee:    f04f31ff    O..1    MOV      r1,#0xffffffff
        0x0081b8f2:    f40af7ef    ....    BL       os_sem_take ; 0x268d4
        0x0081b8f6:    2800        .(      CMP      r0,#0
        0x0081b8f8:    d010        ..      BEQ      0x81b91c ; flash_lock_new + 56
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (54)
        0x0081b8fa:    480b        .H      LDR      r0,[pc,#44] ; [0x81b928] = 0x2004f9
        0x0081b8fc:    7004        .p      STRB     r4,[r0,#0]
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (56)
        0x0081b8fe:    f44f1000    O...    MOV      r0,#0x200000
        0x0081b902:    f8900350    ..P.    LDRB     r0,[r0,#0x350]
        0x0081b906:    0741        A.      LSLS     r1,r0,#29
        0x0081b908:    d009        ..      BEQ      0x81b91e ; flash_lock_new + 58
;;; ..\..\..\..\platform\cmsis\cm4\core_cmFunc.h (228)
        0x0081b90a:    f3ef8111    ....    MRS      r1,BASEPRI
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (62)
        0x0081b90e:    4a07        .J      LDR      r2,[pc,#28] ; [0x81b92c] = 0x200cac
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (63)
        0x0081b910:    0740        @.      LSLS     r0,r0,#29
        0x0081b912:    0e00        ..      LSRS     r0,r0,#24
;;; ..\..\..\..\platform\cmsis\cm4\core_cmFunc.h (241)
        0x0081b914:    f3808811    ....    MSR      BASEPRI,r0
        0x0081b918:    6011        .`      STR      r1,[r2,#0]
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (66)
        0x0081b91a:    2001        .       MOVS     r0,#1
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (67)
        0x0081b91c:    bd10        ..      POP      {r4,pc}
        0x0081b91e:    b672        r.      CPSID    i
        0x0081b920:    e7fb        ..      B        0x81b91a ; flash_lock_new + 54
    $d
        0x0081b922:    0000        ..      DCW    0
        0x0081b924:    00200d40    @. .    DCD    2100544
        0x0081b928:    002004f9    .. .    DCD    2098425
        0x0081b92c:    00200cac    .. .    DCD    2100396
    $t
    i.flash_set_block_protect_locked
    flash_set_block_protect_locked
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (113)
        0x0081b930:    b570        p.      PUSH     {r4-r6,lr}
        0x0081b932:    4605        .F      MOV      r5,r0
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (114)
        0x0081b934:    2400        .$      MOVS     r4,#0
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (116)
        0x0081b936:    2007        .       MOVS     r0,#7
        0x0081b938:    f7ffffd4    ....    BL       flash_lock_new ; 0x81b8e4
        0x0081b93c:    2800        .(      CMP      r0,#0
        0x0081b93e:    d009        ..      BEQ      0x81b954 ; flash_set_block_protect_locked + 36
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (121)
        0x0081b940:    4628        (F      MOV      r0,r5
        0x0081b942:    f7eede24    ..$.    BL       flash_set_block_protect ; 0xa58e
        0x0081b946:    2801        .(      CMP      r0,#1
        0x0081b948:    d100        ..      BNE      0x81b94c ; flash_set_block_protect_locked + 28
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (123)
        0x0081b94a:    2401        .$      MOVS     r4,#1
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (126)
        0x0081b94c:    2007        .       MOVS     r0,#7
        0x0081b94e:    f000f817    ....    BL       flash_unlock_new ; 0x81b980
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (128)
        0x0081b952:    4620         F      MOV      r0,r4
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (129)
        0x0081b954:    bd70        p.      POP      {r4-r6,pc}
    i.flash_sw_protect_unlock_by_addr_locked
    flash_sw_protect_unlock_by_addr_locked
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (132)
        0x0081b956:    b570        p.      PUSH     {r4-r6,lr}
        0x0081b958:    4606        .F      MOV      r6,r0
        0x0081b95a:    460d        .F      MOV      r5,r1
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (133)
        0x0081b95c:    2400        .$      MOVS     r4,#0
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (135)
        0x0081b95e:    2007        .       MOVS     r0,#7
        0x0081b960:    f7ffffc0    ....    BL       flash_lock_new ; 0x81b8e4
        0x0081b964:    2800        .(      CMP      r0,#0
        0x0081b966:    d00a        ..      BEQ      0x81b97e ; flash_sw_protect_unlock_by_addr_locked + 40
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (140)
        0x0081b968:    4629        )F      MOV      r1,r5
        0x0081b96a:    4630        0F      MOV      r0,r6
        0x0081b96c:    f7eede63    ..c.    BL       flash_sw_protect_unlock_by_addr ; 0xa636
        0x0081b970:    2801        .(      CMP      r0,#1
        0x0081b972:    d100        ..      BNE      0x81b976 ; flash_sw_protect_unlock_by_addr_locked + 32
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (142)
        0x0081b974:    2401        .$      MOVS     r4,#1
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (145)
        0x0081b976:    2007        .       MOVS     r0,#7
        0x0081b978:    f000f802    ....    BL       flash_unlock_new ; 0x81b980
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (147)
        0x0081b97c:    4620         F      MOV      r0,r4
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (148)
        0x0081b97e:    bd70        p.      POP      {r4-r6,pc}
    i.flash_unlock_new
    flash_unlock_new
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (74)
        0x0081b980:    b510        ..      PUSH     {r4,lr}
        0x0081b982:    f44f1000    O...    MOV      r0,#0x200000
        0x0081b986:    f8900350    ..P.    LDRB     r0,[r0,#0x350]
        0x0081b98a:    0740        @.      LSLS     r0,r0,#29
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (74)
        0x0081b98c:    d00c        ..      BEQ      0x81b9a8 ; flash_unlock_new + 40
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (81)
        0x0081b98e:    4807        .H      LDR      r0,[pc,#28] ; [0x81b9ac] = 0x200cac
        0x0081b990:    7800        .x      LDRB     r0,[r0,#0]
;;; ..\..\..\..\platform\cmsis\cm4\core_cmFunc.h (241)
        0x0081b992:    f3808811    ....    MSR      BASEPRI,r0
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (84)
        0x0081b996:    4806        .H      LDR      r0,[pc,#24] ; [0x81b9b0] = 0x200d40
        0x0081b998:    6800        .h      LDR      r0,[r0,#0]
        0x0081b99a:    b108        ..      CBZ      r0,0x81b9a0 ; flash_unlock_new + 32
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (86)
        0x0081b99c:    f40af7ad    ....    BL       os_sem_give ; 0x268fa
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (89)
        0x0081b9a0:    4904        .I      LDR      r1,[pc,#16] ; [0x81b9b4] = 0x2004f9
        0x0081b9a2:    20ff        .       MOVS     r0,#0xff
        0x0081b9a4:    7008        .p      STRB     r0,[r1,#0]
;;; ..\..\..\src\app\bee2_sdk_lib\src\rtl8762c_lib_flash.c (90)
        0x0081b9a6:    bd10        ..      POP      {r4,pc}
        0x0081b9a8:    b662        b.      CPSIE    i
        0x0081b9aa:    e7f4        ..      B        0x81b996 ; flash_unlock_new + 22
    $d
        0x0081b9ac:    00200cac    .. .    DCD    2100396
        0x0081b9b0:    00200d40    @. .    DCD    2100544
        0x0081b9b4:    002004f9    .. .    DCD    2098425
    $t
    i.hextoascii
    hextoascii
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (302)
        0x0081b9b8:    b570        p.      PUSH     {r4-r6,lr}
        0x0081b9ba:    4604        .F      MOV      r4,r0
        0x0081b9bc:    460d        .F      MOV      r5,r1
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (303)
        0x0081b9be:    2300        .#      MOVS     r3,#0
        0x0081b9c0:    2000        .       MOVS     r0,#0
        0x0081b9c2:    2100        .!      MOVS     r1,#0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (305)
        0x0081b9c4:    bf00        ..      NOP      
        0x0081b9c6:    e01c        ..      B        0x81ba02 ; hextoascii + 74
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (306)
        0x0081b9c8:    5ce6        .\      LDRB     r6,[r4,r3]
        0x0081b9ca:    0931        1.      LSRS     r1,r6,#4
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (307)
        0x0081b9cc:    2909        .)      CMP      r1,#9
        0x0081b9ce:    dc03        ..      BGT      0x81b9d8 ; hextoascii + 32
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (308)
        0x0081b9d0:    f1010630    ..0.    ADD      r6,r1,#0x30
        0x0081b9d4:    5416        .T      STRB     r6,[r2,r0]
        0x0081b9d6:    e002        ..      B        0x81b9de ; hextoascii + 38
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (311)
        0x0081b9d8:    f1010657    ..W.    ADD      r6,r1,#0x57
        0x0081b9dc:    5416        .T      STRB     r6,[r2,r0]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (313)
        0x0081b9de:    1c46        F.      ADDS     r6,r0,#1
        0x0081b9e0:    b2f0        ..      UXTB     r0,r6
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (314)
        0x0081b9e2:    5ce6        .\      LDRB     r6,[r4,r3]
        0x0081b9e4:    f006010f    ....    AND      r1,r6,#0xf
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (315)
        0x0081b9e8:    2909        .)      CMP      r1,#9
        0x0081b9ea:    dc03        ..      BGT      0x81b9f4 ; hextoascii + 60
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (316)
        0x0081b9ec:    f1010630    ..0.    ADD      r6,r1,#0x30
        0x0081b9f0:    5416        .T      STRB     r6,[r2,r0]
        0x0081b9f2:    e002        ..      B        0x81b9fa ; hextoascii + 66
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (319)
        0x0081b9f4:    f1010657    ..W.    ADD      r6,r1,#0x57
        0x0081b9f8:    5416        .T      STRB     r6,[r2,r0]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (321)
        0x0081b9fa:    1c46        F.      ADDS     r6,r0,#1
        0x0081b9fc:    b2f0        ..      UXTB     r0,r6
        0x0081b9fe:    1c5e        ^.      ADDS     r6,r3,#1
        0x0081ba00:    b2f3        ..      UXTB     r3,r6
        0x0081ba02:    42ab        .B      CMP      r3,r5
        0x0081ba04:    dbe0        ..      BLT      0x81b9c8 ; hextoascii + 16
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (323)
        0x0081ba06:    2600        .&      MOVS     r6,#0
        0x0081ba08:    5416        .T      STRB     r6,[r2,r0]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (324)
        0x0081ba0a:    bd70        p.      POP      {r4-r6,pc}
    i.tuya_ble_Add_Pkcs
    tuya_ble_Add_Pkcs
        0x0081ba0c:    e92d41ff    -..A    PUSH     {r0-r8,lr}
        0x0081ba10:    4680        .F      MOV      r8,r0
        0x0081ba12:    460c        .F      MOV      r4,r1
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (284)
        0x0081ba14:    17e1        ..      ASRS     r1,r4,#31
        0x0081ba16:    eb047111    ...q    ADD      r1,r4,r1,LSR #28
        0x0081ba1a:    1109        ..      ASRS     r1,r1,#4
        0x0081ba1c:    eba41101    ....    SUB      r1,r4,r1,LSL #4
        0x0081ba20:    b909        ..      CBNZ     r1,0x81ba26 ; tuya_ble_Add_Pkcs + 26
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (286)
        0x0081ba22:    4626        &F      MOV      r6,r4
        0x0081ba24:    e021        !.      B        0x81ba6a ; tuya_ble_Add_Pkcs + 94
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (290)
        0x0081ba26:    2700        .'      MOVS     r7,#0
        0x0081ba28:    4620         F      MOV      r0,r4
        0x0081ba2a:    17e1        ..      ASRS     r1,r4,#31
        0x0081ba2c:    eb047111    ...q    ADD      r1,r4,r1,LSR #28
        0x0081ba30:    1109        ..      ASRS     r1,r1,#4
        0x0081ba32:    eba41101    ....    SUB      r1,r4,r1,LSL #4
        0x0081ba36:    f1c10110    ....    RSB      r1,r1,#0x10
        0x0081ba3a:    b28d        ..      UXTH     r5,r1
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (291)
        0x0081ba3c:    2000        .       MOVS     r0,#0
        0x0081ba3e:    9000        ..      STR      r0,[sp,#0]
        0x0081ba40:    9001        ..      STR      r0,[sp,#4]
        0x0081ba42:    9002        ..      STR      r0,[sp,#8]
        0x0081ba44:    9003        ..      STR      r0,[sp,#0xc]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (292)
        0x0081ba46:    bf00        ..      NOP      
        0x0081ba48:    e004        ..      B        0x81ba54 ; tuya_ble_Add_Pkcs + 72
        0x0081ba4a:    b2e8        ..      UXTB     r0,r5
        0x0081ba4c:    f80d0007    ....    STRB     r0,[sp,r7]
        0x0081ba50:    1c78        x.      ADDS     r0,r7,#1
        0x0081ba52:    b287        ..      UXTH     r7,r0
        0x0081ba54:    42af        .B      CMP      r7,r5
        0x0081ba56:    dbf8        ..      BLT      0x81ba4a ; tuya_ble_Add_Pkcs + 62
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (295)
        0x0081ba58:    eb080004    ....    ADD      r0,r8,r4
        0x0081ba5c:    462a        *F      MOV      r2,r5
        0x0081ba5e:    4669        iF      MOV      r1,sp
        0x0081ba60:    f43ef21b    >...    BL       __aeabi_memcpy ; 0x59e9a
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (296)
        0x0081ba64:    1960        `.      ADDS     r0,r4,r5
        0x0081ba66:    b286        ..      UXTH     r6,r0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (297)
        0x0081ba68:    bf00        ..      NOP      
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (298)
        0x0081ba6a:    4630        0F      MOV      r0,r6
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (299)
        0x0081ba6c:    b004        ..      ADD      sp,sp,#0x10
        0x0081ba6e:    e8bd81f0    ....    POP      {r4-r8,pc}
        0x0081ba72:    0000        ..      MOVS     r0,r0
    i.tuya_ble_decryption
    tuya_ble_decryption
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (398)
        0x0081ba74:    e92d4ff0    -..O    PUSH     {r4-r11,lr}
        0x0081ba78:    b089        ..      SUB      sp,sp,#0x24
        0x0081ba7a:    4682        .F      MOV      r10,r0
        0x0081ba7c:    460c        .F      MOV      r4,r1
        0x0081ba7e:    4615        .F      MOV      r5,r2
        0x0081ba80:    461f        .F      MOV      r7,r3
        0x0081ba82:    f8ddb050    ..P.    LDR      r11,[sp,#0x50]
        0x0081ba86:    f8dd8048    ..H.    LDR      r8,[sp,#0x48]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (399)
        0x0081ba8a:    2600        .&      MOVS     r6,#0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (402)
        0x0081ba8c:    46b1        .F      MOV      r9,r6
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (403)
        0x0081ba8e:    2d11        .-      CMP      r5,#0x11
        0x0081ba90:    d203        ..      BCS      0x81ba9a ; tuya_ble_decryption + 38
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (405)
        0x0081ba92:    2001        .       MOVS     r0,#1
        0x0081ba94:    b009        ..      ADD      sp,sp,#0x24
        0x0081ba96:    e8bd8ff0    ....    POP      {r4-r11,pc}
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (407)
        0x0081ba9a:    7820         x      LDRB     r0,[r4,#0]
        0x0081ba9c:    2806        .(      CMP      r0,#6
        0x0081ba9e:    db01        ..      BLT      0x81baa4 ; tuya_ble_decryption + 48
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (409)
        0x0081baa0:    2002        .       MOVS     r0,#2
        0x0081baa2:    e7f7        ..      B        0x81ba94 ; tuya_ble_decryption + 32
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (412)
        0x0081baa4:    7820         x      LDRB     r0,[r4,#0]
        0x0081baa6:    b948        H.      CBNZ     r0,0x81babc ; tuya_ble_decryption + 72
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (414)
        0x0081baa8:    1e68        h.      SUBS     r0,r5,#1
        0x0081baaa:    b286        ..      UXTH     r6,r0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (415)
        0x0081baac:    4632        2F      MOV      r2,r6
        0x0081baae:    1c61        a.      ADDS     r1,r4,#1
        0x0081bab0:    4640        @F      MOV      r0,r8
        0x0081bab2:    f43ef1f2    >...    BL       __aeabi_memcpy ; 0x59e9a
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (416)
        0x0081bab6:    603e        >`      STR      r6,[r7,#0]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (417)
        0x0081bab8:    2000        .       MOVS     r0,#0
        0x0081baba:    e7eb        ..      B        0x81ba94 ; tuya_ble_decryption + 32
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (420)
        0x0081babc:    f1a50011    ....    SUB      r0,r5,#0x11
        0x0081bac0:    b286        ..      UXTH     r6,r0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (422)
        0x0081bac2:    2000        .       MOVS     r0,#0
        0x0081bac4:    9005        ..      STR      r0,[sp,#0x14]
        0x0081bac6:    9006        ..      STR      r0,[sp,#0x18]
        0x0081bac8:    9007        ..      STR      r0,[sp,#0x1c]
        0x0081baca:    9008        ..      STR      r0,[sp,#0x20]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (423)
        0x0081bacc:    9001        ..      STR      r0,[sp,#4]
        0x0081bace:    9002        ..      STR      r0,[sp,#8]
        0x0081bad0:    9003        ..      STR      r0,[sp,#0xc]
        0x0081bad2:    9004        ..      STR      r0,[sp,#0x10]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (424)
        0x0081bad4:    f8949000    ....    LDRB     r9,[r4,#0]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (426)
        0x0081bad8:    f1b90f01    ....    CMP      r9,#1
        0x0081badc:    d104        ..      BNE      0x81bae8 ; tuya_ble_decryption + 116
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (428)
        0x0081bade:    2210        ."      MOVS     r2,#0x10
        0x0081bae0:    1c61        a.      ADDS     r1,r4,#1
        0x0081bae2:    4811        .H      LDR      r0,[pc,#68] ; [0x81bb28] = 0x209aec
        0x0081bae4:    f43ef1d9    >...    BL       __aeabi_memcpy ; 0x59e9a
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (430)
        0x0081bae8:    f8cdb000    ....    STR      r11,[sp,#0]
        0x0081baec:    aa05        ..      ADD      r2,sp,#0x14
        0x0081baee:    4649        IF      MOV      r1,r9
        0x0081baf0:    4650        PF      MOV      r0,r10
        0x0081baf2:    9b13        ..      LDR      r3,[sp,#0x4c]
        0x0081baf4:    f000f96c    ..l.    BL       tuya_ble_key_generate ; 0x81bdd0
        0x0081baf8:    b198        ..      CBZ      r0,0x81bb22 ; tuya_ble_decryption + 174
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (433)
        0x0081bafa:    2210        ."      MOVS     r2,#0x10
        0x0081bafc:    1c61        a.      ADDS     r1,r4,#1
        0x0081bafe:    a801        ..      ADD      r0,sp,#4
        0x0081bb00:    f43ef1cb    >...    BL       __aeabi_memcpy ; 0x59e9a
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (435)
        0x0081bb04:    4633        3F      MOV      r3,r6
        0x0081bb06:    f1040211    ....    ADD      r2,r4,#0x11
        0x0081bb0a:    a901        ..      ADD      r1,sp,#4
        0x0081bb0c:    a805        ..      ADD      r0,sp,#0x14
        0x0081bb0e:    f8cd8000    ....    STR      r8,[sp,#0]
        0x0081bb12:    f7feffef    ....    BL       tuya_ble_aes128_cbc_decrypt ; 0x81aaf4
        0x0081bb16:    b110        ..      CBZ      r0,0x81bb1e ; tuya_ble_decryption + 170
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (438)
        0x0081bb18:    603e        >`      STR      r6,[r7,#0]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (439)
        0x0081bb1a:    2000        .       MOVS     r0,#0
        0x0081bb1c:    e7ba        ..      B        0x81ba94 ; tuya_ble_decryption + 32
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (443)
        0x0081bb1e:    2003        .       MOVS     r0,#3
        0x0081bb20:    e7b8        ..      B        0x81ba94 ; tuya_ble_decryption + 32
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (449)
        0x0081bb22:    2004        .       MOVS     r0,#4
        0x0081bb24:    e7b6        ..      B        0x81ba94 ; tuya_ble_decryption + 32
    $d
        0x0081bb26:    0000        ..      DCW    0
        0x0081bb28:    00209aec    .. .    DCD    2136812
    $t
    i.tuya_ble_device_id_encrypt
    tuya_ble_device_id_encrypt
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (77)
        0x0081bb2c:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0081bb30:    b08a        ..      SUB      sp,sp,#0x28
        0x0081bb32:    4605        .F      MOV      r5,r0
        0x0081bb34:    460e        .F      MOV      r6,r1
        0x0081bb36:    4617        .F      MOV      r7,r2
        0x0081bb38:    461c        .F      MOV      r4,r3
        0x0081bb3a:    f8dd8040    ..@.    LDR      r8,[sp,#0x40]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (81)
        0x0081bb3e:    aa06        ..      ADD      r2,sp,#0x18
        0x0081bb40:    4631        1F      MOV      r1,r6
        0x0081bb42:    4628        (F      MOV      r0,r5
        0x0081bb44:    f000f81e    ....    BL       tuya_ble_device_id_key_generate ; 0x81bb84
        0x0081bb48:    b918        ..      CBNZ     r0,0x81bb52 ; tuya_ble_device_id_encrypt + 38
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (84)
        0x0081bb4a:    2000        .       MOVS     r0,#0
        0x0081bb4c:    b00a        ..      ADD      sp,sp,#0x28
        0x0081bb4e:    e8bd81f0    ....    POP      {r4-r8,pc}
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (88)
        0x0081bb52:    a806        ..      ADD      r0,sp,#0x18
        0x0081bb54:    c80f        ..      LDM      r0,{r0-r3}
        0x0081bb56:    e9cd2304    ...#    STRD     r2,r3,[sp,#0x10]
        0x0081bb5a:    e9cd0102    ....    STRD     r0,r1,[sp,#8]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (92)
        0x0081bb5e:    17e1        ..      ASRS     r1,r4,#31
        0x0081bb60:    eb047111    ...q    ADD      r1,r4,r1,LSR #28
        0x0081bb64:    1109        ..      ASRS     r1,r1,#4
        0x0081bb66:    eba41101    ....    SUB      r1,r4,r1,LSL #4
        0x0081bb6a:    b109        ..      CBZ      r1,0x81bb70 ; tuya_ble_device_id_encrypt + 68
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (94)
        0x0081bb6c:    2000        .       MOVS     r0,#0
        0x0081bb6e:    e7ed        ..      B        0x81bb4c ; tuya_ble_device_id_encrypt + 32
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (98)
        0x0081bb70:    4623        #F      MOV      r3,r4
        0x0081bb72:    463a        :F      MOV      r2,r7
        0x0081bb74:    a902        ..      ADD      r1,sp,#8
        0x0081bb76:    a806        ..      ADD      r0,sp,#0x18
        0x0081bb78:    f8cd8000    ....    STR      r8,[sp,#0]
        0x0081bb7c:    f7feff86    ....    BL       tuya_ble_aes128_cbc_encrypt ; 0x81aa8c
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (100)
        0x0081bb80:    2001        .       MOVS     r0,#1
        0x0081bb82:    e7e3        ..      B        0x81bb4c ; tuya_ble_device_id_encrypt + 32
    i.tuya_ble_device_id_key_generate
    tuya_ble_device_id_key_generate
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (262)
        0x0081bb84:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0081bb86:    b091        ..      SUB      sp,sp,#0x44
        0x0081bb88:    4606        .F      MOV      r6,r0
        0x0081bb8a:    460c        .F      MOV      r4,r1
        0x0081bb8c:    4617        .F      MOV      r7,r2
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (263)
        0x0081bb8e:    2500        .%      MOVS     r5,#0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (265)
        0x0081bb90:    2140        @!      MOVS     r1,#0x40
        0x0081bb92:    a801        ..      ADD      r0,sp,#4
        0x0081bb94:    f43ef264    >.d.    BL       __aeabi_memclr4 ; 0x5a060
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (267)
        0x0081bb98:    2140        @!      MOVS     r1,#0x40
        0x0081bb9a:    a801        ..      ADD      r0,sp,#4
        0x0081bb9c:    f43ef260    >.`.    BL       __aeabi_memclr4 ; 0x5a060
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (268)
        0x0081bba0:    bf00        ..      NOP      
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (270)
        0x0081bba2:    a901        ..      ADD      r1,sp,#4
        0x0081bba4:    1948        H.      ADDS     r0,r1,r5
        0x0081bba6:    4622        "F      MOV      r2,r4
        0x0081bba8:    4631        1F      MOV      r1,r6
        0x0081bbaa:    f43ef176    >.v.    BL       __aeabi_memcpy ; 0x59e9a
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (271)
        0x0081bbae:    1928        (.      ADDS     r0,r5,r4
        0x0081bbb0:    b285        ..      UXTH     r5,r0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (273)
        0x0081bbb2:    463a        :F      MOV      r2,r7
        0x0081bbb4:    4629        )F      MOV      r1,r5
        0x0081bbb6:    a801        ..      ADD      r0,sp,#4
        0x0081bbb8:    f7feffcf    ....    BL       tuya_ble_md5_crypt ; 0x81ab5a
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (275)
        0x0081bbbc:    2001        .       MOVS     r0,#1
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (276)
        0x0081bbbe:    b011        ..      ADD      sp,sp,#0x44
        0x0081bbc0:    bdf0        ..      POP      {r4-r7,pc}
    i.tuya_ble_encrypt_old_with_key
    tuya_ble_encrypt_old_with_key
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (327)
        0x0081bbc2:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x0081bbc6:    4681        .F      MOV      r9,r0
        0x0081bbc8:    460f        .F      MOV      r7,r1
        0x0081bbca:    4615        .F      MOV      r5,r2
        0x0081bbcc:    461c        .F      MOV      r4,r3
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (328)
        0x0081bbce:    f04f0800    O...    MOV      r8,#0
        0x0081bbd2:    2600        .&      MOVS     r6,#0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (329)
        0x0081bbd4:    2d7f        .-      CMP      r5,#0x7f
        0x0081bbd6:    dd02        ..      BLE      0x81bbde ; tuya_ble_encrypt_old_with_key + 28
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (330)
        0x0081bbd8:    2001        .       MOVS     r0,#1
        0x0081bbda:    e8bd87f0    ....    POP      {r4-r10,pc}
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (332)
        0x0081bbde:    1c62        b.      ADDS     r2,r4,#1
        0x0081bbe0:    4629        )F      MOV      r1,r5
        0x0081bbe2:    4638        8F      MOV      r0,r7
        0x0081bbe4:    f7fffee8    ....    BL       hextoascii ; 0x81b9b8
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (333)
        0x0081bbe8:    2001        .       MOVS     r0,#1
        0x0081bbea:    eb000145    ..E.    ADD      r1,r0,r5,LSL #1
        0x0081bbee:    1c60        `.      ADDS     r0,r4,#1
        0x0081bbf0:    f7ffff0c    ....    BL       tuya_ble_Add_Pkcs ; 0x81ba0c
        0x0081bbf4:    4606        .F      MOV      r6,r0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (335)
        0x0081bbf6:    2eff        ..      CMP      r6,#0xff
        0x0081bbf8:    dd01        ..      BLE      0x81bbfe ; tuya_ble_encrypt_old_with_key + 60
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (336)
        0x0081bbfa:    2002        .       MOVS     r0,#2
        0x0081bbfc:    e7ed        ..      B        0x81bbda ; tuya_ble_encrypt_old_with_key + 24
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (339)
        0x0081bbfe:    f1080001    ....    ADD      r0,r8,#1
        0x0081bc02:    1903        ..      ADDS     r3,r0,r4
        0x0081bc04:    1901        ..      ADDS     r1,r0,r4
        0x0081bc06:    4632        2F      MOV      r2,r6
        0x0081bc08:    4648        HF      MOV      r0,r9
        0x0081bc0a:    f7feff0e    ....    BL       tuya_ble_aes128_ecb_encrypt ; 0x81aa2a
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (340)
        0x0081bc0e:    7026        &p      STRB     r6,[r4,#0]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (342)
        0x0081bc10:    2000        .       MOVS     r0,#0
        0x0081bc12:    e7e2        ..      B        0x81bbda ; tuya_ble_encrypt_old_with_key + 24
    i.tuya_ble_encryption
    tuya_ble_encryption
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (349)
        0x0081bc14:    e92d4fff    -..O    PUSH     {r0-r11,lr}
        0x0081bc18:    b087        ..      SUB      sp,sp,#0x1c
        0x0081bc1a:    460d        .F      MOV      r5,r1
        0x0081bc1c:    4617        .F      MOV      r7,r2
        0x0081bc1e:    461c        .F      MOV      r4,r3
        0x0081bc20:    f8ddb060    ..`.    LDR      r11,[sp,#0x60]
        0x0081bc24:    e9dd8915    ....    LDRD     r8,r9,[sp,#0x54]
        0x0081bc28:    9e14        ..      LDR      r6,[sp,#0x50]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (350)
        0x0081bc2a:    f04f0a00    O...    MOV      r10,#0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (352)
        0x0081bc2e:    2000        .       MOVS     r0,#0
        0x0081bc30:    9002        ..      STR      r0,[sp,#8]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (354)
        0x0081bc32:    2d06        .-      CMP      r5,#6
        0x0081bc34:    db03        ..      BLT      0x81bc3e ; tuya_ble_encryption + 42
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (356)
        0x0081bc36:    2002        .       MOVS     r0,#2
        0x0081bc38:    b00b        ..      ADD      sp,sp,#0x2c
        0x0081bc3a:    e8bd8ff0    ....    POP      {r4-r11,pc}
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (359)
        0x0081bc3e:    b945        E.      CBNZ     r5,0x81bc52 ; tuya_ble_encryption + 62
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (361)
        0x0081bc40:    4632        2F      MOV      r2,r6
        0x0081bc42:    4621        !F      MOV      r1,r4
        0x0081bc44:    4648        HF      MOV      r0,r9
        0x0081bc46:    f43ef128    >.(.    BL       __aeabi_memcpy ; 0x59e9a
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (362)
        0x0081bc4a:    f8c86000    ...`    STR      r6,[r8,#0]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (363)
        0x0081bc4e:    2000        .       MOVS     r0,#0
        0x0081bc50:    e7f2        ..      B        0x81bc38 ; tuya_ble_encryption + 36
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (367)
        0x0081bc52:    b2b1        ..      UXTH     r1,r6
        0x0081bc54:    4620         F      MOV      r0,r4
        0x0081bc56:    f7fffed9    ....    BL       tuya_ble_Add_Pkcs ; 0x81ba0c
        0x0081bc5a:    4682        .F      MOV      r10,r0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (370)
        0x0081bc5c:    2000        .       MOVS     r0,#0
        0x0081bc5e:    9003        ..      STR      r0,[sp,#0xc]
        0x0081bc60:    9004        ..      STR      r0,[sp,#0x10]
        0x0081bc62:    9005        ..      STR      r0,[sp,#0x14]
        0x0081bc64:    9006        ..      STR      r0,[sp,#0x18]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (371)
        0x0081bc66:    f8cdb000    ....    STR      r11,[sp,#0]
        0x0081bc6a:    aa03        ..      ADD      r2,sp,#0xc
        0x0081bc6c:    4629        )F      MOV      r1,r5
        0x0081bc6e:    9b17        ..      LDR      r3,[sp,#0x5c]
        0x0081bc70:    9807        ..      LDR      r0,[sp,#0x1c]
        0x0081bc72:    f000f8ad    ....    BL       tuya_ble_key_generate ; 0x81bdd0
        0x0081bc76:    9002        ..      STR      r0,[sp,#8]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (373)
        0x0081bc78:    9802        ..      LDR      r0,[sp,#8]
        0x0081bc7a:    b170        p.      CBZ      r0,0x81bc9a ; tuya_ble_encryption + 134
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (376)
        0x0081bc7c:    4653        SF      MOV      r3,r10
        0x0081bc7e:    4622        "F      MOV      r2,r4
        0x0081bc80:    4639        9F      MOV      r1,r7
        0x0081bc82:    a803        ..      ADD      r0,sp,#0xc
        0x0081bc84:    f8cd9000    ....    STR      r9,[sp,#0]
        0x0081bc88:    f7feff00    ....    BL       tuya_ble_aes128_cbc_encrypt ; 0x81aa8c
        0x0081bc8c:    b118        ..      CBZ      r0,0x81bc96 ; tuya_ble_encryption + 130
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (378)
        0x0081bc8e:    f8c8a000    ....    STR      r10,[r8,#0]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (380)
        0x0081bc92:    2000        .       MOVS     r0,#0
        0x0081bc94:    e7d0        ..      B        0x81bc38 ; tuya_ble_encryption + 36
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (384)
        0x0081bc96:    2003        .       MOVS     r0,#3
        0x0081bc98:    e7ce        ..      B        0x81bc38 ; tuya_ble_encryption + 36
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (390)
        0x0081bc9a:    2004        .       MOVS     r0,#4
        0x0081bc9c:    e7cc        ..      B        0x81bc38 ; tuya_ble_encryption + 36
    i.tuya_ble_event_process
    tuya_ble_event_process
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (456)
        0x0081bc9e:    b510        ..      PUSH     {r4,lr}
        0x0081bca0:    4604        .F      MOV      r4,r0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (457)
        0x0081bca2:    7820         x      LDRB     r0,[r4,#0]
        0x0081bca4:    2817        .(      CMP      r0,#0x17
        0x0081bca6:    d26c        l.      BCS      0x81bd82 ; tuya_ble_event_process + 228
        0x0081bca8:    e8dff000    ....    TBB      [pc,r0]
    $d
        0x0081bcac:    2e100c28    (...    DCD    772803624
        0x0081bcb0:    3a321436    6.2:    DCD    976360502
        0x0081bcb4:    24201c18    .. $    DCD    606084120
        0x0081bcb8:    4a46423e    >BFJ    DCD    1246118462
        0x0081bcbc:    5f5b574f    OW[_    DCD    1599821647
        0x0081bcc0:    00636753    Sgc.    DCD    6514515
    $t
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (460)
        0x0081bcc4:    4620         F      MOV      r0,r4
        0x0081bcc6:    f7f8fd63    ..c.    BL       tuya_ble_handle_device_info_update_evt ; 0x814790
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (461)
        0x0081bcca:    e05b        [.      B        0x81bd84 ; tuya_ble_event_process + 230
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (463)
        0x0081bccc:    4620         F      MOV      r0,r4
        0x0081bcce:    f7f8fd76    ..v.    BL       tuya_ble_handle_dp_data_reported_evt ; 0x8147be
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (464)
        0x0081bcd2:    e057        W.      B        0x81bd84 ; tuya_ble_event_process + 230
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (466)
        0x0081bcd4:    4620         F      MOV      r0,r4
        0x0081bcd6:    f7f8fd8b    ....    BL       tuya_ble_handle_dp_data_with_flag_reported_evt ; 0x8147f0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (467)
        0x0081bcda:    e053        S.      B        0x81bd84 ; tuya_ble_event_process + 230
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (469)
        0x0081bcdc:    4620         F      MOV      r0,r4
        0x0081bcde:    f7f8feb2    ....    BL       tuya_ble_handle_factory_reset_evt ; 0x814a46
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (470)
        0x0081bce2:    e04f        O.      B        0x81bd84 ; tuya_ble_event_process + 230
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (472)
        0x0081bce4:    4620         F      MOV      r0,r4
        0x0081bce6:    f7f8fecc    ....    BL       tuya_ble_handle_ota_response_evt ; 0x814a82
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (473)
        0x0081bcea:    e04b        K.      B        0x81bd84 ; tuya_ble_event_process + 230
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (475)
        0x0081bcec:    4620         F      MOV      r0,r4
        0x0081bcee:    f7f8fef4    ....    BL       tuya_ble_handle_data_passthrough_evt ; 0x814ada
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (476)
        0x0081bcf2:    e047        G.      B        0x81bd84 ; tuya_ble_event_process + 230
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (478)
        0x0081bcf4:    4620         F      MOV      r0,r4
        0x0081bcf6:    f7f8ff0e    ....    BL       tuya_ble_handle_data_prod_test_response_evt ; 0x814b16
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (479)
        0x0081bcfa:    e043        C.      B        0x81bd84 ; tuya_ble_event_process + 230
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (484)
        0x0081bcfc:    7f21        !.      LDRB     r1,[r4,#0x1c]
        0x0081bcfe:    f1040008    ....    ADD      r0,r4,#8
        0x0081bd02:    f7f9f85f    .._.    BL       tuya_ble_handle_ble_data_evt ; 0x814dc4
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (485)
        0x0081bd06:    e03d        =.      B        0x81bd84 ; tuya_ble_event_process + 230
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (487)
        0x0081bd08:    4620         F      MOV      r0,r4
        0x0081bd0a:    f7f8fd8a    ....    BL       tuya_ble_handle_dp_data_with_time_reported_evt ; 0x814822
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (488)
        0x0081bd0e:    e039        9.      B        0x81bd84 ; tuya_ble_event_process + 230
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (490)
        0x0081bd10:    4620         F      MOV      r0,r4
        0x0081bd12:    f7f8fdc8    ....    BL       tuya_ble_handle_dp_data_with_flag_and_time_reported_evt ; 0x8148a6
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (491)
        0x0081bd16:    e035        5.      B        0x81bd84 ; tuya_ble_event_process + 230
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (493)
        0x0081bd18:    4620         F      MOV      r0,r4
        0x0081bd1a:    f7f8fe0f    ....    BL       tuya_ble_handle_dp_data_with_time_string_reported_evt ; 0x81493c
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (494)
        0x0081bd1e:    e031        1.      B        0x81bd84 ; tuya_ble_event_process + 230
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (496)
        0x0081bd20:    4620         F      MOV      r0,r4
        0x0081bd22:    f7f8fe4a    ..J.    BL       tuya_ble_handle_dp_data_with_flag_and_time_string_reported_evt ; 0x8149ba
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (497)
        0x0081bd26:    e02d        -.      B        0x81bd84 ; tuya_ble_event_process + 230
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (499)
        0x0081bd28:    4620         F      MOV      r0,r4
        0x0081bd2a:    f7f8ff15    ....    BL       tuya_ble_handle_uart_cmd_evt ; 0x814b58
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (500)
        0x0081bd2e:    e029        ).      B        0x81bd84 ; tuya_ble_event_process + 230
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (502)
        0x0081bd30:    4620         F      MOV      r0,r4
        0x0081bd32:    f7f8ff91    ....    BL       tuya_ble_handle_ble_cmd_evt ; 0x814c58
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (503)
        0x0081bd36:    e025        %.      B        0x81bd84 ; tuya_ble_event_process + 230
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (505)
        0x0081bd38:    4620         F      MOV      r0,r4
        0x0081bd3a:    f7f8ff9d    ....    BL       tuya_ble_handle_net_config_response_evt ; 0x814c78
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (506)
        0x0081bd3e:    e021        !.      B        0x81bd84 ; tuya_ble_event_process + 230
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (508)
        0x0081bd40:    e9d41203    ....    LDRD     r1,r2,[r4,#0xc]
        0x0081bd44:    68a0        .h      LDR      r0,[r4,#8]
        0x0081bd46:    4790        .G      BLX      r2
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (509)
        0x0081bd48:    e01c        ..      B        0x81bd84 ; tuya_ble_event_process + 230
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (511)
        0x0081bd4a:    4620         F      MOV      r0,r4
        0x0081bd4c:    f7f8ffd8    ....    BL       tuya_ble_handle_connect_change_evt ; 0x814d00
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (512)
        0x0081bd50:    e018        ..      B        0x81bd84 ; tuya_ble_event_process + 230
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (514)
        0x0081bd52:    4620         F      MOV      r0,r4
        0x0081bd54:    f7f8ffa7    ....    BL       tuya_ble_handle_time_request_evt ; 0x814ca6
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (515)
        0x0081bd58:    e014        ..      B        0x81bd84 ; tuya_ble_event_process + 230
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (517)
        0x0081bd5a:    4620         F      MOV      r0,r4
        0x0081bd5c:    f7f8ffba    ....    BL       tuya_ble_handle_unbound_response_evt ; 0x814cd4
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (518)
        0x0081bd60:    e010        ..      B        0x81bd84 ; tuya_ble_event_process + 230
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (520)
        0x0081bd62:    4620         F      MOV      r0,r4
        0x0081bd64:    f7f8ffb7    ....    BL       tuya_ble_handle_anomaly_unbound_response_evt ; 0x814cd6
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (521)
        0x0081bd68:    e00c        ..      B        0x81bd84 ; tuya_ble_event_process + 230
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (523)
        0x0081bd6a:    4620         F      MOV      r0,r4
        0x0081bd6c:    f7f8ffb4    ....    BL       tuya_ble_handle_device_reset_response_evt ; 0x814cd8
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (524)
        0x0081bd70:    e008        ..      B        0x81bd84 ; tuya_ble_event_process + 230
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (526)
        0x0081bd72:    4620         F      MOV      r0,r4
        0x0081bd74:    f7f8ffb1    ....    BL       tuya_ble_handle_connecting_request_evt ; 0x814cda
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (527)
        0x0081bd78:    e004        ..      B        0x81bd84 ; tuya_ble_event_process + 230
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (529)
        0x0081bd7a:    4620         F      MOV      r0,r4
        0x0081bd7c:    6861        ah      LDR      r1,[r4,#4]
        0x0081bd7e:    4788        .G      BLX      r1
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (530)
        0x0081bd80:    e000        ..      B        0x81bd84 ; tuya_ble_event_process + 230
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (533)
        0x0081bd82:    bf00        ..      NOP      
        0x0081bd84:    bf00        ..      NOP      
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (535)
        0x0081bd86:    bd10        ..      POP      {r4,pc}
    i.tuya_ble_generate_key1
    tuya_ble_generate_key1
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (41)
        0x0081bd88:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0081bd8a:    b089        ..      SUB      sp,sp,#0x24
        0x0081bd8c:    4605        .F      MOV      r5,r0
        0x0081bd8e:    460c        .F      MOV      r4,r1
        0x0081bd90:    4616        .F      MOV      r6,r2
        0x0081bd92:    461f        .F      MOV      r7,r3
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (46)
        0x0081bd94:    17e1        ..      ASRS     r1,r4,#31
        0x0081bd96:    eb047111    ...q    ADD      r1,r4,r1,LSR #28
        0x0081bd9a:    1109        ..      ASRS     r1,r1,#4
        0x0081bd9c:    eba41101    ....    SUB      r1,r4,r1,LSL #4
        0x0081bda0:    b111        ..      CBZ      r1,0x81bda8 ; tuya_ble_generate_key1 + 32
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (48)
        0x0081bda2:    2000        .       MOVS     r0,#0
        0x0081bda4:    b009        ..      ADD      sp,sp,#0x24
        0x0081bda6:    bdf0        ..      POP      {r4-r7,pc}
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (51)
        0x0081bda8:    2210        ."      MOVS     r2,#0x10
        0x0081bdaa:    f1070131    ..1.    ADD      r1,r7,#0x31
        0x0081bdae:    a805        ..      ADD      r0,sp,#0x14
        0x0081bdb0:    f43ef073    >.s.    BL       __aeabi_memcpy ; 0x59e9a
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (52)
        0x0081bdb4:    2000        .       MOVS     r0,#0
        0x0081bdb6:    9001        ..      STR      r0,[sp,#4]
        0x0081bdb8:    9002        ..      STR      r0,[sp,#8]
        0x0081bdba:    9003        ..      STR      r0,[sp,#0xc]
        0x0081bdbc:    9004        ..      STR      r0,[sp,#0x10]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (54)
        0x0081bdbe:    4623        #F      MOV      r3,r4
        0x0081bdc0:    462a        *F      MOV      r2,r5
        0x0081bdc2:    a901        ..      ADD      r1,sp,#4
        0x0081bdc4:    a805        ..      ADD      r0,sp,#0x14
        0x0081bdc6:    9600        ..      STR      r6,[sp,#0]
        0x0081bdc8:    f7fefe60    ..`.    BL       tuya_ble_aes128_cbc_encrypt ; 0x81aa8c
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (56)
        0x0081bdcc:    2001        .       MOVS     r0,#1
        0x0081bdce:    e7e9        ..      B        0x81bda4 ; tuya_ble_generate_key1 + 28
    i.tuya_ble_key_generate
    tuya_ble_key_generate
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (134)
        0x0081bdd0:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x0081bdd4:    4680        .F      MOV      r8,r0
        0x0081bdd6:    460d        .F      MOV      r5,r1
        0x0081bdd8:    4691        .F      MOV      r9,r2
        0x0081bdda:    461e        .F      MOV      r6,r3
        0x0081bddc:    9f08        ..      LDR      r7,[sp,#0x20]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (135)
        0x0081bdde:    2400        .$      MOVS     r4,#0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (139)
        0x0081bde0:    ea4f2a28    O.(*    ASR      r10,r8,#8
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (141)
        0x0081bde4:    2d06        .-      CMP      r5,#6
        0x0081bde6:    db02        ..      BLT      0x81bdee ; tuya_ble_key_generate + 30
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (143)
        0x0081bde8:    2000        .       MOVS     r0,#0
        0x0081bdea:    e8bd87f0    ....    POP      {r4-r10,pc}
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (145)
        0x0081bdee:    b90d        ..      CBNZ     r5,0x81bdf4 ; tuya_ble_key_generate + 36
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (147)
        0x0081bdf0:    2001        .       MOVS     r0,#1
        0x0081bdf2:    e7fa        ..      B        0x81bdea ; tuya_ble_key_generate + 26
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (150)
        0x0081bdf4:    2140        @!      MOVS     r1,#0x40
        0x0081bdf6:    4869        iH      LDR      r0,[pc,#420] ; [0x81bf9c] = 0x209b3c
        0x0081bdf8:    f43ef110    >...    BL       __aeabi_memclr ; 0x5a01c
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (151)
        0x0081bdfc:    2130        0!      MOVS     r1,#0x30
        0x0081bdfe:    4868        hH      LDR      r0,[pc,#416] ; [0x81bfa0] = 0x209b0c
        0x0081be00:    f43ef10c    >...    BL       __aeabi_memclr ; 0x5a01c
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (153)
        0x0081be04:    2400        .$      MOVS     r4,#0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (154)
        0x0081be06:    4965        eI      LDR      r1,[pc,#404] ; [0x81bf9c] = 0x209b3c
        0x0081be08:    1908        ..      ADDS     r0,r1,r4
        0x0081be0a:    2220         "      MOVS     r2,#0x20
        0x0081be0c:    f1060131    ..1.    ADD      r1,r6,#0x31
        0x0081be10:    f43ef043    >.C.    BL       __aeabi_memcpy ; 0x59e9a
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (155)
        0x0081be14:    3420         4      ADDS     r4,r4,#0x20
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (157)
        0x0081be16:    2d01        .-      CMP      r5,#1
        0x0081be18:    d003        ..      BEQ      0x81be22 ; tuya_ble_key_generate + 82
        0x0081be1a:    2d02        .-      CMP      r5,#2
        0x0081be1c:    d001        ..      BEQ      0x81be22 ; tuya_ble_key_generate + 82
        0x0081be1e:    2d03        .-      CMP      r5,#3
        0x0081be20:    d120         .      BNE      0x81be64 ; tuya_ble_key_generate + 148
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (159)
        0x0081be22:    495e        ^I      LDR      r1,[pc,#376] ; [0x81bf9c] = 0x209b3c
        0x0081be24:    1908        ..      ADDS     r0,r1,r4
        0x0081be26:    2210        ."      MOVS     r2,#0x10
        0x0081be28:    495e        ^I      LDR      r1,[pc,#376] ; [0x81bfa4] = 0x209aec
        0x0081be2a:    f43ef036    >.6.    BL       __aeabi_memcpy ; 0x59e9a
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (160)
        0x0081be2e:    f1040010    ....    ADD      r0,r4,#0x10
        0x0081be32:    b284        ..      UXTH     r4,r0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (161)
        0x0081be34:    4633        3F      MOV      r3,r6
        0x0081be36:    4a5a        ZJ      LDR      r2,[pc,#360] ; [0x81bfa0] = 0x209b0c
        0x0081be38:    2130        0!      MOVS     r1,#0x30
        0x0081be3a:    4858        XH      LDR      r0,[pc,#352] ; [0x81bf9c] = 0x209b3c
        0x0081be3c:    f7ffffa4    ....    BL       tuya_ble_generate_key1 ; 0x81bd88
        0x0081be40:    b908        ..      CBNZ     r0,0x81be46 ; tuya_ble_key_generate + 118
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (164)
        0x0081be42:    2000        .       MOVS     r0,#0
        0x0081be44:    e7d1        ..      B        0x81bdea ; tuya_ble_key_generate + 26
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (167)
        0x0081be46:    2210        ."      MOVS     r2,#0x10
        0x0081be48:    4955        UI      LDR      r1,[pc,#340] ; [0x81bfa0] = 0x209b0c
        0x0081be4a:    3120         1      ADDS     r1,r1,#0x20
        0x0081be4c:    4856        VH      LDR      r0,[pc,#344] ; [0x81bfa8] = 0x209afc
        0x0081be4e:    f43ef024    >.$.    BL       __aeabi_memcpy ; 0x59e9a
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (169)
        0x0081be52:    2d01        .-      CMP      r5,#1
        0x0081be54:    d106        ..      BNE      0x81be64 ; tuya_ble_key_generate + 148
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (171)
        0x0081be56:    2210        ."      MOVS     r2,#0x10
        0x0081be58:    4953        SI      LDR      r1,[pc,#332] ; [0x81bfa8] = 0x209afc
        0x0081be5a:    4648        HF      MOV      r0,r9
        0x0081be5c:    f43ef01d    >...    BL       __aeabi_memcpy ; 0x59e9a
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (172)
        0x0081be60:    2001        .       MOVS     r0,#1
        0x0081be62:    e7c2        ..      B        0x81bdea ; tuya_ble_key_generate + 26
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (177)
        0x0081be64:    2140        @!      MOVS     r1,#0x40
        0x0081be66:    484d        MH      LDR      r0,[pc,#308] ; [0x81bf9c] = 0x209b3c
        0x0081be68:    f43ef0d8    >...    BL       __aeabi_memclr ; 0x5a01c
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (178)
        0x0081be6c:    2d01        .-      CMP      r5,#1
        0x0081be6e:    d009        ..      BEQ      0x81be84 ; tuya_ble_key_generate + 180
        0x0081be70:    2d04        .-      CMP      r5,#4
        0x0081be72:    d007        ..      BEQ      0x81be84 ; tuya_ble_key_generate + 180
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (180)
        0x0081be74:    2206        ."      MOVS     r2,#6
        0x0081be76:    4949        II      LDR      r1,[pc,#292] ; [0x81bf9c] = 0x209b3c
        0x0081be78:    4638        8F      MOV      r0,r7
        0x0081be7a:    f43df7c3    =...    BL       memcmp ; 0x59e04
        0x0081be7e:    b908        ..      CBNZ     r0,0x81be84 ; tuya_ble_key_generate + 180
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (182)
        0x0081be80:    2000        .       MOVS     r0,#0
        0x0081be82:    e7b2        ..      B        0x81bdea ; tuya_ble_key_generate + 26
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (185)
        0x0081be84:    2d03        .-      CMP      r5,#3
        0x0081be86:    d108        ..      BNE      0x81be9a ; tuya_ble_key_generate + 202
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (187)
        0x0081be88:    2206        ."      MOVS     r2,#6
        0x0081be8a:    4944        DI      LDR      r1,[pc,#272] ; [0x81bf9c] = 0x209b3c
        0x0081be8c:    f506709b    ...p    ADD      r0,r6,#0x136
        0x0081be90:    f43df7b8    =...    BL       memcmp ; 0x59e04
        0x0081be94:    b908        ..      CBNZ     r0,0x81be9a ; tuya_ble_key_generate + 202
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (189)
        0x0081be96:    2000        .       MOVS     r0,#0
        0x0081be98:    e7a7        ..      B        0x81bdea ; tuya_ble_key_generate + 26
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (198)
        0x0081be9a:    2400        .$      MOVS     r4,#0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (199)
        0x0081be9c:    2d02        .-      CMP      r5,#2
        0x0081be9e:    d006        ..      BEQ      0x81beae ; tuya_ble_key_generate + 222
        0x0081bea0:    2d03        .-      CMP      r5,#3
        0x0081bea2:    d02c        ,.      BEQ      0x81befe ; tuya_ble_key_generate + 302
        0x0081bea4:    2d04        .-      CMP      r5,#4
        0x0081bea6:    d045        E.      BEQ      0x81bf34 ; tuya_ble_key_generate + 356
        0x0081bea8:    2d05        .-      CMP      r5,#5
        0x0081beaa:    d161        a.      BNE      0x81bf70 ; tuya_ble_key_generate + 416
        0x0081beac:    e04d        M.      B        0x81bf4a ; tuya_ble_key_generate + 378
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (202)
        0x0081beae:    f1ba0f03    ....    CMP      r10,#3
        0x0081beb2:    db08        ..      BLT      0x81bec6 ; tuya_ble_key_generate + 246
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (204)
        0x0081beb4:    2210        ."      MOVS     r2,#0x10
        0x0081beb6:    493c        <I      LDR      r1,[pc,#240] ; [0x81bfa8] = 0x209afc
        0x0081beb8:    4838        8H      LDR      r0,[pc,#224] ; [0x81bf9c] = 0x209b3c
        0x0081beba:    f43df7ee    =...    BL       __aeabi_memcpy ; 0x59e9a
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (205)
        0x0081bebe:    f1040010    ....    ADD      r0,r4,#0x10
        0x0081bec2:    b284        ..      UXTH     r4,r0
        0x0081bec4:    e012        ..      B        0x81beec ; tuya_ble_key_generate + 284
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (211)
        0x0081bec6:    2220         "      MOVS     r2,#0x20
        0x0081bec8:    f1060131    ..1.    ADD      r1,r6,#0x31
        0x0081becc:    4833        3H      LDR      r0,[pc,#204] ; [0x81bf9c] = 0x209b3c
        0x0081bece:    f43df7e4    =...    BL       __aeabi_memcpy ; 0x59e9a
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (212)
        0x0081bed2:    4a35        5J      LDR      r2,[pc,#212] ; [0x81bfa8] = 0x209afc
        0x0081bed4:    2120         !      MOVS     r1,#0x20
        0x0081bed6:    4831        1H      LDR      r0,[pc,#196] ; [0x81bf9c] = 0x209b3c
        0x0081bed8:    f7fefe3f    ..?.    BL       tuya_ble_md5_crypt ; 0x81ab5a
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (218)
        0x0081bedc:    2210        ."      MOVS     r2,#0x10
        0x0081bede:    4932        2I      LDR      r1,[pc,#200] ; [0x81bfa8] = 0x209afc
        0x0081bee0:    482e        .H      LDR      r0,[pc,#184] ; [0x81bf9c] = 0x209b3c
        0x0081bee2:    f43df7da    =...    BL       __aeabi_memcpy ; 0x59e9a
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (219)
        0x0081bee6:    f1040010    ....    ADD      r0,r4,#0x10
        0x0081beea:    b284        ..      UXTH     r4,r0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (221)
        0x0081beec:    482b        +H      LDR      r0,[pc,#172] ; [0x81bf9c] = 0x209b3c
        0x0081beee:    4420         D      ADD      r0,r0,r4
        0x0081bef0:    6839        9h      LDR      r1,[r7,#0]
        0x0081bef2:    6001        .`      STR      r1,[r0,#0]
        0x0081bef4:    88b9        ..      LDRH     r1,[r7,#4]
        0x0081bef6:    8081        ..      STRH     r1,[r0,#4]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (222)
        0x0081bef8:    1da0        ..      ADDS     r0,r4,#6
        0x0081befa:    b284        ..      UXTH     r4,r0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (223)
        0x0081befc:    e039        9.      B        0x81bf72 ; tuya_ble_key_generate + 418
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (225)
        0x0081befe:    2210        ."      MOVS     r2,#0x10
        0x0081bf00:    4929        )I      LDR      r1,[pc,#164] ; [0x81bfa8] = 0x209afc
        0x0081bf02:    4826        &H      LDR      r0,[pc,#152] ; [0x81bf9c] = 0x209b3c
        0x0081bf04:    f43df7c9    =...    BL       __aeabi_memcpy ; 0x59e9a
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (226)
        0x0081bf08:    f1040010    ....    ADD      r0,r4,#0x10
        0x0081bf0c:    b284        ..      UXTH     r4,r0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (227)
        0x0081bf0e:    4823        #H      LDR      r0,[pc,#140] ; [0x81bf9c] = 0x209b3c
        0x0081bf10:    4420         D      ADD      r0,r0,r4
        0x0081bf12:    6839        9h      LDR      r1,[r7,#0]
        0x0081bf14:    6001        .`      STR      r1,[r0,#0]
        0x0081bf16:    88b9        ..      LDRH     r1,[r7,#4]
        0x0081bf18:    8081        ..      STRH     r1,[r0,#4]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (228)
        0x0081bf1a:    1da0        ..      ADDS     r0,r4,#6
        0x0081bf1c:    b284        ..      UXTH     r4,r0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (229)
        0x0081bf1e:    481f        .H      LDR      r0,[pc,#124] ; [0x81bf9c] = 0x209b3c
        0x0081bf20:    1901        ..      ADDS     r1,r0,r4
        0x0081bf22:    f8d62136    ..6!    LDR      r2,[r6,#0x136]
        0x0081bf26:    600a        .`      STR      r2,[r1,#0]
        0x0081bf28:    f8b6013a    ..:.    LDRH     r0,[r6,#0x13a]
        0x0081bf2c:    8088        ..      STRH     r0,[r1,#4]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (230)
        0x0081bf2e:    1da0        ..      ADDS     r0,r4,#6
        0x0081bf30:    b284        ..      UXTH     r4,r0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (231)
        0x0081bf32:    e01e        ..      B        0x81bf72 ; tuya_ble_key_generate + 418
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (233)
        0x0081bf34:    4819        .H      LDR      r0,[pc,#100] ; [0x81bf9c] = 0x209b3c
        0x0081bf36:    1901        ..      ADDS     r1,r0,r4
        0x0081bf38:    f8d620fa    ...     LDR      r2,[r6,#0xfa]
        0x0081bf3c:    600a        .`      STR      r2,[r1,#0]
        0x0081bf3e:    f8b600fe    ....    LDRH     r0,[r6,#0xfe]
        0x0081bf42:    8088        ..      STRH     r0,[r1,#4]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (234)
        0x0081bf44:    1da0        ..      ADDS     r0,r4,#6
        0x0081bf46:    b284        ..      UXTH     r4,r0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (235)
        0x0081bf48:    e013        ..      B        0x81bf72 ; tuya_ble_key_generate + 418
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (237)
        0x0081bf4a:    4814        .H      LDR      r0,[pc,#80] ; [0x81bf9c] = 0x209b3c
        0x0081bf4c:    1901        ..      ADDS     r1,r0,r4
        0x0081bf4e:    f8d620fa    ...     LDR      r2,[r6,#0xfa]
        0x0081bf52:    600a        .`      STR      r2,[r1,#0]
        0x0081bf54:    f8b600fe    ....    LDRH     r0,[r6,#0xfe]
        0x0081bf58:    8088        ..      STRH     r0,[r1,#4]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (238)
        0x0081bf5a:    1da0        ..      ADDS     r0,r4,#6
        0x0081bf5c:    b284        ..      UXTH     r4,r0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (239)
        0x0081bf5e:    480f        .H      LDR      r0,[pc,#60] ; [0x81bf9c] = 0x209b3c
        0x0081bf60:    4420         D      ADD      r0,r0,r4
        0x0081bf62:    6839        9h      LDR      r1,[r7,#0]
        0x0081bf64:    6001        .`      STR      r1,[r0,#0]
        0x0081bf66:    88b9        ..      LDRH     r1,[r7,#4]
        0x0081bf68:    8081        ..      STRH     r1,[r0,#4]
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (240)
        0x0081bf6a:    1da0        ..      ADDS     r0,r4,#6
        0x0081bf6c:    b284        ..      UXTH     r4,r0
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (241)
        0x0081bf6e:    e000        ..      B        0x81bf72 ; tuya_ble_key_generate + 418
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (243)
        0x0081bf70:    bf00        ..      NOP      
        0x0081bf72:    bf00        ..      NOP      
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (245)
        0x0081bf74:    b90c        ..      CBNZ     r4,0x81bf7a ; tuya_ble_key_generate + 426
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (247)
        0x0081bf76:    2000        .       MOVS     r0,#0
        0x0081bf78:    e737        7.      B        0x81bdea ; tuya_ble_key_generate + 26
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (250)
        0x0081bf7a:    2110        .!      MOVS     r1,#0x10
        0x0081bf7c:    480a        .H      LDR      r0,[pc,#40] ; [0x81bfa8] = 0x209afc
        0x0081bf7e:    f43ef04d    >.M.    BL       __aeabi_memclr ; 0x5a01c
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (252)
        0x0081bf82:    4a09        .J      LDR      r2,[pc,#36] ; [0x81bfa8] = 0x209afc
        0x0081bf84:    4621        !F      MOV      r1,r4
        0x0081bf86:    4805        .H      LDR      r0,[pc,#20] ; [0x81bf9c] = 0x209b3c
        0x0081bf88:    f7fefde7    ....    BL       tuya_ble_md5_crypt ; 0x81ab5a
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (254)
        0x0081bf8c:    2210        ."      MOVS     r2,#0x10
        0x0081bf8e:    4906        .I      LDR      r1,[pc,#24] ; [0x81bfa8] = 0x209afc
        0x0081bf90:    4648        HF      MOV      r0,r9
        0x0081bf92:    f43df782    =...    BL       __aeabi_memcpy ; 0x59e9a
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (256)
        0x0081bf96:    2001        .       MOVS     r0,#1
        0x0081bf98:    e727        '.      B        0x81bdea ; tuya_ble_key_generate + 26
    $d
        0x0081bf9a:    0000        ..      DCW    0
        0x0081bf9c:    00209b3c    <. .    DCD    2136892
        0x0081bfa0:    00209b0c    .. .    DCD    2136844
        0x0081bfa4:    00209aec    .. .    DCD    2136812
        0x0081bfa8:    00209afc    .. .    DCD    2136828
    $t
    i.tuya_ble_register_key_generate
    tuya_ble_register_key_generate
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (61)
        0x0081bfac:    b570        p.      PUSH     {r4-r6,lr}
        0x0081bfae:    4604        .F      MOV      r4,r0
        0x0081bfb0:    460d        .F      MOV      r5,r1
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (64)
        0x0081bfb2:    4623        #F      MOV      r3,r4
        0x0081bfb4:    2210        ."      MOVS     r2,#0x10
        0x0081bfb6:    4905        .I      LDR      r1,[pc,#20] ; [0x81bfcc] = 0x209aec
        0x0081bfb8:    f1050031    ..1.    ADD      r0,r5,#0x31
        0x0081bfbc:    f7fefd35    ..5.    BL       tuya_ble_aes128_ecb_encrypt ; 0x81aa2a
        0x0081bfc0:    b908        ..      CBNZ     r0,0x81bfc6 ; tuya_ble_register_key_generate + 26
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (67)
        0x0081bfc2:    2000        .       MOVS     r0,#0
        0x0081bfc4:    bd70        p.      POP      {r4-r6,pc}
;;; ..\src\tuya_ble_sdk\sdk\lib\src\tuya_ble_secure.c (71)
        0x0081bfc6:    2001        .       MOVS     r0,#1
        0x0081bfc8:    e7fc        ..      B        0x81bfc4 ; tuya_ble_register_key_generate + 24
    $d
        0x0081bfca:    0000        ..      DCW    0
        0x0081bfcc:    00209aec    .. .    DCD    2136812
    $t
    locale$$code
    _get_lc_ctype
        0x0081bfd0:    b510        ..      PUSH     {r4,lr}
        0x0081bfd2:    2900        .)      CMP      r1,#0
        0x0081bfd4:    d00a        ..      BEQ      0x81bfec ; _get_lc_ctype + 28
        0x0081bfd6:    7808        .x      LDRB     r0,[r1,#0]
        0x0081bfd8:    2800        .(      CMP      r0,#0
        0x0081bfda:    d007        ..      BEQ      0x81bfec ; _get_lc_ctype + 28
        0x0081bfdc:    4805        .H      LDR      r0,[pc,#20] ; [0x81bff4] = 0x19c2
        0x0081bfde:    4478        xD      ADD      r0,r0,pc
        0x0081bfe0:    f43ef72a    >.*.    BL       strcmp ; 0x5ae38
        0x0081bfe4:    2800        .(      CMP      r0,#0
        0x0081bfe6:    d001        ..      BEQ      0x81bfec ; _get_lc_ctype + 28
        0x0081bfe8:    2000        .       MOVS     r0,#0
        0x0081bfea:    bd10        ..      POP      {r4,pc}
        0x0081bfec:    4802        .H      LDR      r0,[pc,#8] ; [0x81bff8] = 0x19ba
        0x0081bfee:    4478        xD      ADD      r0,r0,pc
        0x0081bff0:    bd10        ..      POP      {r4,pc}
    $d
        0x0081bff2:    0000        ..      DCW    0
        0x0081bff4:    000019c2    ....    DCD    6594
        0x0081bff8:    000019ba    ....    DCD    6586
    $t
    x$fpl$fpinit
    $v0
    _fp_init
        0x0081bffc:    f04f7040    O.@p    MOV      r0,#0x3000000
        0x0081c000:    eee10a10    ....    VMSR     FPSCR,r0
    __fplib_config_fpu_vfp
    __fplib_config_pureend_doubles
        0x0081c004:    4770        pG      BX       lr
        0x0081c006:    0000        ..      MOVS     r0,r0
    $d.realdata
    .constdata
    app_cb_table
        0x0081c008:    0e85d101    ....    DCD    243650817
        0x0081c00c:    00000006    ....    DCD    6
        0x0081c010:    0080e819    ....    DCD    8448025
        0x0081c014:    00000000    ....    DCD    0
        0x0081c018:    00000000    ....    DCD    0
        0x0081c01c:    00000000    ....    DCD    0
        0x0081c020:    00000000    ....    DCD    0
        0x0081c024:    0080e829    )...    DCD    8448041
    .constdata
    __func__
        0x0081c028:    6c6c616d    mall    DCD    1819042157
        0x0081c02c:    636f        oc      DCW    25455
        0x0081c02e:    00          .       DCB    0
    __func__
        0x0081c02f:    63          c       DCB    99
        0x0081c030:    6f6c6c61    allo    DCD    1869376609
        0x0081c034:    0063        c.      DCW    99
    __func__
        0x0081c036:    6572        re      DCW    25970
        0x0081c038:    6f6c6c61    allo    DCD    1869376609
        0x0081c03c:    00000063    c...    DCD    99
        0x0081c040:    0081c660    `...    DCD    8504928
        0x0081c044:    0081c70c    ....    DCD    8505100
        0x0081c048:    0081c654    T...    DCD    8504916
        0x0081c04c:    0081c714    ....    DCD    8505108
        0x0081c050:    0081c6b8    ....    DCD    8505016
        0x0081c054:    0081c72c    ,...    DCD    8505132
        0x0081c058:    0081c720     ...    DCD    8505120
        0x0081c05c:    0081c6a8    ....    DCD    8505000
        0x0081c060:    0081c6a8    ....    DCD    8505000
        0x0081c064:    0081c6a8    ....    DCD    8505000
        0x0081c068:    0081c6a8    ....    DCD    8505000
        0x0081c06c:    0081c648    H...    DCD    8504904
        0x0081c070:    0081c700    ....    DCD    8505088
        0x0081c074:    0081c6a8    ....    DCD    8505000
        0x0081c078:    0081c670    p...    DCD    8504944
        0x0081c07c:    0081c6d0    ....    DCD    8505040
        0x0081c080:    0081c6e4    ....    DCD    8505060
        0x0081c084:    0081c650    P...    DCD    8504912
        0x0081c088:    0081c638    8...    DCD    8504888
        0x0081c08c:    0081c5b8    ....    DCD    8504760
        0x0081c090:    0081c58c    ....    DCD    8504716
        0x0081c094:    0081c6ec    ....    DCD    8505068
        0x0081c098:    0081c6a0    ....    DCD    8504992
        0x0081c09c:    0081c68c    ....    DCD    8504972
        0x0081c0a0:    0081c624    $...    DCD    8504868
        0x0081c0a4:    0081c5e4    ....    DCD    8504804
        0x0081c0a8:    0081c604    ....    DCD    8504836
        0x0081c0ac:    0081c568    h...    DCD    8504680
        0x0081c0b0:    0081c534    4...    DCD    8504628
        0x0081c0b4:    0081c644    D...    DCD    8504900
        0x0081c0b8:    0081c52c    ,...    DCD    8504620
        0x0081c0bc:    0081c560    `...    DCD    8504672
        0x0081c0c0:    0081c524    $...    DCD    8504612
        0x0081c0c4:    0081c558    X...    DCD    8504664
        0x0081c0c8:    0081c640    @...    DCD    8504896
        0x0081c0cc:    0081c6d8    ....    DCD    8505048
        0x0081c0d0:    0081c53c    <...    DCD    8504636
        0x0081c0d4:    0081c570    p...    DCD    8504688
        0x0081c0d8:    0081c59c    ....    DCD    8504732
        0x0081c0dc:    0081c5c0    ....    DCD    8504768
        0x0081c0e0:    0081c5ec    ....    DCD    8504812
        0x0081c0e4:    0081c60c    ....    DCD    8504844
        0x0081c0e8:    0081c5d0    ....    DCD    8504784
        0x0081c0ec:    0081c5ac    ....    DCD    8504748
        0x0081c0f0:    0081c66c    l...    DCD    8504940
        0x0081c0f4:    0081c580    ....    DCD    8504704
        0x0081c0f8:    0081c54c    L...    DCD    8504652
        0x0081c0fc:    0081c594    ....    DCD    8504724
        0x0081c100:    0081c5dc    ....    DCD    8504796
        0x0081c104:    0081c5fc    ....    DCD    8504828
        0x0081c108:    0081c61c    ....    DCD    8504860
        0x0081c10c:    0081c630    0...    DCD    8504880
        0x0081c110:    0081c6c4    ....    DCD    8505028
        0x0081c114:    0081c6b0    ....    DCD    8505008
        0x0081c118:    0081c6f8    ....    DCD    8505080
        0x0081c11c:    0081c678    x...    DCD    8504952
        0x0081c120:    0081c658    X...    DCD    8504920
        0x0081c124:    0081c738    8...    DCD    8505144
        0x0081c128:    0081c694    ....    DCD    8504980
        0x0081c12c:    0081c680    ....    DCD    8504960
        0x0081c130:    0081c64c    L...    DCD    8504908
    .constdata
    __func__
        0x0081c134:    61797574    tuya    DCD    1635349876
        0x0081c138:    6576655f    _eve    DCD    1702258015
        0x0081c13c:    715f746e    nt_q    DCD    1902081134
        0x0081c140:    65756575    ueue    DCD    1702192501
        0x0081c144:    6e65735f    _sen    DCD    1852142431
        0x0081c148:    0064        d.      DCW    100
    __func__
        0x0081c14a:    7061        ap      DCW    28769
        0x0081c14c:    616d5f70    p_ma    DCD    1634557808
        0x0081c150:    745f6e69    in_t    DCD    1952411241
        0x0081c154:    006b7361    ask.    DCD    7041889
    .constdata
    scan_rsp_data
        0x0081c158:    d007ff17    ....    DCD    3490184983
        0x0081c15c:    00000200    ....    DCD    512
        0x0081c160:    00000000    ....    DCD    0
        0x0081c164:    00000000    ....    DCD    0
        0x0081c168:    00000000    ....    DCD    0
        0x0081c16c:    00000000    ....    DCD    0
    adv_data
        0x0081c170:    03050102    ....    DCD    50659586
        0x0081c174:    13595409    .TY.    DCD    324621321
        0x0081c178:    59a20116    ...Y    DCD    1503789334
        0x0081c17c:    4f435f41    A_CO    DCD    1329815361
        0x0081c180:    4e4f4d4d    MMON    DCD    1313819981
        0x0081c184:    4d4d4f43    COMM    DCD    1296912195
        0x0081c188:    03594e4f    ONY.    DCD    56184399
        0x0081c18c:    00a20102    ....    DCD    10617090
        0x0081c190:    00005954    TY..    DCD    22868
        0x0081c194:    00000000    ....    DCD    0
        0x0081c198:    00000000    ....    DCD    0
        0x0081c19c:    00000000    ....    DCD    0
        0x0081c1a0:    00000000    ....    DCD    0
        0x0081c1a4:    00000000    ....    DCD    0
        0x0081c1a8:    00000000    ....    DCD    0
        0x0081c1ac:    00000000    ....    DCD    0
        0x0081c1b0:    00000000    ....    DCD    0
        0x0081c1b4:    00000000    ....    DCD    0
    .constdata
    GATT_UUID16_KNS_SERVICE
        0x0081c1b8:    00001910    ....    DCD    6416
    .constdata
    kns_attr_tbl
        0x0081c1bc:    28000800    ...(    DCD    671090688
        0x0081c1c0:    00000000    ....    DCD    0
        0x0081c1c4:    00000000    ....    DCD    0
        0x0081c1c8:    00000000    ....    DCD    0
        0x0081c1cc:    00020000    ....    DCD    131072
        0x0081c1d0:    0081c1b8    ....    DCD    8503736
        0x0081c1d4:    00000001    ....    DCD    1
        0x0081c1d8:    28030002    ...(    DCD    671285250
        0x0081c1dc:    0000000c    ....    DCD    12
        0x0081c1e0:    00000000    ....    DCD    0
        0x0081c1e4:    00000000    ....    DCD    0
        0x0081c1e8:    00010000    ....    DCD    65536
        0x0081c1ec:    00000000    ....    DCD    0
        0x0081c1f0:    00000001    ....    DCD    1
        0x0081c1f4:    2b110004    ...+    DCD    722534404
        0x0081c1f8:    00000000    ....    DCD    0
        0x0081c1fc:    00000000    ....    DCD    0
        0x0081c200:    00000000    ....    DCD    0
        0x0081c204:    00000000    ....    DCD    0
        0x0081c208:    00000000    ....    DCD    0
        0x0081c20c:    00000011    ....    DCD    17
        0x0081c210:    28030002    ...(    DCD    671285250
        0x0081c214:    00000010    ....    DCD    16
        0x0081c218:    00000000    ....    DCD    0
        0x0081c21c:    00000000    ....    DCD    0
        0x0081c220:    00010000    ....    DCD    65536
        0x0081c224:    00000000    ....    DCD    0
        0x0081c228:    00000001    ....    DCD    1
        0x0081c22c:    2b100004    ...+    DCD    722468868
        0x0081c230:    00000000    ....    DCD    0
        0x0081c234:    00000000    ....    DCD    0
        0x0081c238:    00000000    ....    DCD    0
        0x0081c23c:    00000000    ....    DCD    0
        0x0081c240:    00000000    ....    DCD    0
        0x0081c244:    00000001    ....    DCD    1
        0x0081c248:    29020012    ...)    DCD    687996946
        0x0081c24c:    00000000    ....    DCD    0
        0x0081c250:    00000000    ....    DCD    0
        0x0081c254:    00000000    ....    DCD    0
        0x0081c258:    00020000    ....    DCD    131072
        0x0081c25c:    00000000    ....    DCD    0
        0x0081c260:    00000011    ....    DCD    17
    kns_cbs
        0x0081c264:    00000000    ....    DCD    0
        0x0081c268:    0080fde5    ....    DCD    8453605
        0x0081c26c:    0080fe63    c...    DCD    8453731
    .constdata
    mac_test
        0x0081c270:    44332211    ."3D    DCD    1144201745
        0x0081c274:    6655        Uf      DCW    26197
    auth_key_test
        0x0081c276:    7979        yy      DCW    31097
        0x0081c278:    79797979    yyyy    DCD    2038004089
        0x0081c27c:    79797979    yyyy    DCD    2038004089
        0x0081c280:    79797979    yyyy    DCD    2038004089
        0x0081c284:    79797979    yyyy    DCD    2038004089
        0x0081c288:    79797979    yyyy    DCD    2038004089
        0x0081c28c:    79797979    yyyy    DCD    2038004089
        0x0081c290:    79797979    yyyy    DCD    2038004089
        0x0081c294:    7979        yy      DCW    31097
        0x0081c296:    00          .       DCB    0
    device_id_test
        0x0081c297:    7a          z       DCB    122
        0x0081c298:    7a7a7a7a    zzzz    DCD    2054847098
        0x0081c29c:    7a7a7a7a    zzzz    DCD    2054847098
        0x0081c2a0:    7a7a7a7a    zzzz    DCD    2054847098
        0x0081c2a4:    007a7a7a    zzz.    DCD    8026746
    __func__
        0x0081c2a8:    5f707061    app_    DCD    1601204321
        0x0081c2ac:    74737563    cust    DCD    1953723747
        0x0081c2b0:    745f6d6f    om_t    DCD    1952410991
        0x0081c2b4:    006b7361    ask.    DCD    7041889
    __func__
        0x0081c2b8:    61797574    tuya    DCD    1635349876
        0x0081c2bc:    656c625f    _ble    DCD    1701601887
        0x0081c2c0:    7070615f    _app    DCD    1886413151
        0x0081c2c4:    696e695f    _ini    DCD    1768843615
        0x0081c2c8:    0074        t.      DCW    116
    .constdata
    adv_data_const
        0x0081c2ca:    0102        ..      DCW    258
        0x0081c2cc:    01020306    ....    DCD    16909062
        0x0081c2d0:    011614a2    ....    DCD    18224290
        0x0081c2d4:    000000a2    ....    DCD    162
        0x0081c2d8:    00000000    ....    DCD    0
        0x0081c2dc:    00000000    ....    DCD    0
        0x0081c2e0:    00000000    ....    DCD    0
        0x0081c2e4:    0000        ..      DCW    0
    scan_rsp_data_const
        0x0081c2e6:    0903        ..      DCW    2307
        0x0081c2e8:    ff195954    TY..    DCD    4279851348
        0x0081c2ec:    030007d0    ....    DCD    50333648
        0x0081c2f0:    00000001    ....    DCD    1
        0x0081c2f4:    00000000    ....    DCD    0
        0x0081c2f8:    00000000    ....    DCD    0
        0x0081c2fc:    00000000    ....    DCD    0
        0x0081c300:    00000000    ....    DCD    0
    .constdata
    g_day_per_mon
        0x0081c304:    1e1f1c1f    ....    DCD    505355295
        0x0081c308:    1f1f1e1f    ....    DCD    522133023
        0x0081c30c:    1f1e1f1e    ....    DCD    522067742
    .constdata
        0x0081c310:    a0010000    ....    DCD    2684420096
    .constdata
        0x0081c314:    6572227b    {"re    DCD    1701978747
        0x0081c318:    743a2274    t":t    DCD    1949966964
        0x0081c31c:    2c657572    rue,    DCD    744846706
        0x0081c320:    64696822    "hid    DCD    1684629538
        0x0081c324:    22223a22    ":""    DCD    572668450
        0x0081c328:    0000007d    }...    DCD    125
        0x0081c32c:    00000000    ....    DCD    0
        0x0081c330:    00000000    ....    DCD    0
        0x0081c334:    00000000    ....    DCD    0
        0x0081c338:    00000000    ....    DCD    0
        0x0081c33c:    00000000    ....    DCD    0
        0x0081c340:    00000000    ....    DCD    0
        0x0081c344:    00000000    ....    DCD    0
        0x0081c348:    00000000    ....    DCD    0
        0x0081c34c:    00000000    ....    DCD    0
        0x0081c350:    00000000    ....    DCD    0
        0x0081c354:    00000000    ....    DCD    0
        0x0081c358:    0000        ..      DCW    0
    false_buf
        0x0081c35a:    227b        {"      DCW    8827
        0x0081c35c:    22746572    ret"    DCD    578053490
        0x0081c360:    6c61663a    :fal    DCD    1818322490
        0x0081c364:    007d6573    se}.    DCD    8217971
    .constdata
    K
        0x0081c368:    428a2f98    ./.B    DCD    1116352408
        0x0081c36c:    71374491    .D7q    DCD    1899447441
        0x0081c370:    b5c0fbcf    ....    DCD    3049323471
        0x0081c374:    e9b5dba5    ....    DCD    3921009573
        0x0081c378:    3956c25b    [.V9    DCD    961987163
        0x0081c37c:    59f111f1    ...Y    DCD    1508970993
        0x0081c380:    923f82a4    ..?.    DCD    2453635748
        0x0081c384:    ab1c5ed5    .^..    DCD    2870763221
        0x0081c388:    d807aa98    ....    DCD    3624381080
        0x0081c38c:    12835b01    .[..    DCD    310598401
        0x0081c390:    243185be    ..1$    DCD    607225278
        0x0081c394:    550c7dc3    .}.U    DCD    1426881987
        0x0081c398:    72be5d74    t].r    DCD    1925078388
        0x0081c39c:    80deb1fe    ....    DCD    2162078206
        0x0081c3a0:    9bdc06a7    ....    DCD    2614888103
        0x0081c3a4:    c19bf174    t...    DCD    3248222580
        0x0081c3a8:    e49b69c1    .i..    DCD    3835390401
        0x0081c3ac:    efbe4786    .G..    DCD    4022224774
        0x0081c3b0:    0fc19dc6    ....    DCD    264347078
        0x0081c3b4:    240ca1cc    ...$    DCD    604807628
        0x0081c3b8:    2de92c6f    o,.-    DCD    770255983
        0x0081c3bc:    4a7484aa    ..tJ    DCD    1249150122
        0x0081c3c0:    5cb0a9dc    ...\    DCD    1555081692
        0x0081c3c4:    76f988da    ...v    DCD    1996064986
        0x0081c3c8:    983e5152    RQ>.    DCD    2554220882
        0x0081c3cc:    a831c66d    m.1.    DCD    2821834349
        0x0081c3d0:    b00327c8    .'..    DCD    2952996808
        0x0081c3d4:    bf597fc7    ..Y.    DCD    3210313671
        0x0081c3d8:    c6e00bf3    ....    DCD    3336571891
        0x0081c3dc:    d5a79147    G...    DCD    3584528711
        0x0081c3e0:    06ca6351    Qc..    DCD    113926993
        0x0081c3e4:    14292967    g)).    DCD    338241895
        0x0081c3e8:    27b70a85    ...'    DCD    666307205
        0x0081c3ec:    2e1b2138    8!..    DCD    773529912
        0x0081c3f0:    4d2c6dfc    .m,M    DCD    1294757372
        0x0081c3f4:    53380d13    ..8S    DCD    1396182291
        0x0081c3f8:    650a7354    Ts.e    DCD    1695183700
        0x0081c3fc:    766a0abb    ..jv    DCD    1986661051
        0x0081c400:    81c2c92e    ....    DCD    2177026350
        0x0081c404:    92722c85    .,r.    DCD    2456956037
        0x0081c408:    a2bfe8a1    ....    DCD    2730485921
        0x0081c40c:    a81a664b    Kf..    DCD    2820302411
        0x0081c410:    c24b8b70    p.K.    DCD    3259730800
        0x0081c414:    c76c51a3    .Ql.    DCD    3345764771
        0x0081c418:    d192e819    ....    DCD    3516065817
        0x0081c41c:    d6990624    $...    DCD    3600352804
        0x0081c420:    f40e3585    .5..    DCD    4094571909
        0x0081c424:    106aa070    p.j.    DCD    275423344
        0x0081c428:    19a4c116    ....    DCD    430227734
        0x0081c42c:    1e376c08    .l7.    DCD    506948616
        0x0081c430:    2748774c    LwH'    DCD    659060556
        0x0081c434:    34b0bcb5    ...4    DCD    883997877
        0x0081c438:    391c0cb3    ...9    DCD    958139571
        0x0081c43c:    4ed8aa4a    J..N    DCD    1322822218
        0x0081c440:    5b9cca4f    O..[    DCD    1537002063
        0x0081c444:    682e6ff3    .o.h    DCD    1747873779
        0x0081c448:    748f82ee    ...t    DCD    1955562222
        0x0081c44c:    78a5636f    oc.x    DCD    2024104815
        0x0081c450:    84c87814    .x..    DCD    2227730452
        0x0081c454:    8cc70208    ....    DCD    2361852424
        0x0081c458:    90befffa    ....    DCD    2428436474
        0x0081c45c:    a4506ceb    .lP.    DCD    2756734187
        0x0081c460:    bef9a3f7    ....    DCD    3204031479
        0x0081c464:    c67178f2    .xq.    DCD    3329325298
    .constdata
    __func__
        0x0081c468:    61797574    tuya    DCD    1635349876
        0x0081c46c:    656c625f    _ble    DCD    1701601887
        0x0081c470:    5f736f5f    _os_    DCD    1601400671
        0x0081c474:    5f67736d    msg_    DCD    1600615277
        0x0081c478:    75657571    queu    DCD    1969583473
        0x0081c47c:    72635f65    e_cr    DCD    1919115109
        0x0081c480:    65746165    eate    DCD    1702125925
        0x0081c484:    00          .       DCB    0
    __func__
        0x0081c485:    747579      tuy     DCB    116,117,121
        0x0081c488:    6c625f61    a_bl    DCD    1818386273
        0x0081c48c:    736f5f65    e_os    DCD    1936678757
        0x0081c490:    67736d5f    _msg    DCD    1735617887
        0x0081c494:    6575715f    _que    DCD    1702195551
        0x0081c498:    645f6575    ue_d    DCD    1683973493
        0x0081c49c:    74656c65    elet    DCD    1952803941
        0x0081c4a0:    0065        e.      DCW    101
    __func__
        0x0081c4a2:    7574        tu      DCW    30068
        0x0081c4a4:    625f6179    ya_b    DCD    1650418041
        0x0081c4a8:    6f5f656c    le_o    DCD    1868522860
        0x0081c4ac:    736d5f73    s_ms    DCD    1936547699
        0x0081c4b0:    75715f67    g_qu    DCD    1970364263
        0x0081c4b4:    5f657565    eue_    DCD    1600484709
        0x0081c4b8:    6b656570    peek    DCD    1801807216
        0x0081c4bc:    00          .       DCB    0
    __func__
        0x0081c4bd:    747579      tuy     DCB    116,117,121
        0x0081c4c0:    6c625f61    a_bl    DCD    1818386273
        0x0081c4c4:    736f5f65    e_os    DCD    1936678757
        0x0081c4c8:    67736d5f    _msg    DCD    1735617887
        0x0081c4cc:    6575715f    _que    DCD    1702195551
        0x0081c4d0:    735f6575    ue_s    DCD    1935631733
        0x0081c4d4:    00646e65    end.    DCD    6581861
    __func__
        0x0081c4d8:    61797574    tuya    DCD    1635349876
        0x0081c4dc:    656c625f    _ble    DCD    1701601887
        0x0081c4e0:    5f736f5f    _os_    DCD    1601400671
        0x0081c4e4:    5f67736d    msg_    DCD    1600615277
        0x0081c4e8:    75657571    queu    DCD    1969583473
        0x0081c4ec:    65725f65    e_re    DCD    1701994341
        0x0081c4f0:    7663        cv      DCW    30307
        0x0081c4f2:    00          .       DCB    0
    .constdata
    __func__
        0x0081c4f3:    5f          _       DCB    95
        0x0081c4f4:    5f676663    cfg_    DCD    1600611939
        0x0081c4f8:    74697277    writ    DCD    1953067639
        0x0081c4fc:    6f745f65    e_to    DCD    1869897573
        0x0081c500:    616c665f    _fla    DCD    1634494047
        0x0081c504:    6873        sh      DCW    26739
        0x0081c506:    00          .       DCB    0
    __func__
        0x0081c507:    63          c       DCB    99
        0x0081c508:    615f6766    fg_a    DCD    1633642342
        0x0081c50c:    695f6464    dd_i    DCD    1767859300
        0x0081c510:    006d6574    tem.    DCD    7169396
    __func__
        0x0081c514:    5f676663    cfg_    DCD    1600611939
        0x0081c518:    5f6c6564    del_    DCD    1600939364
        0x0081c51c:    6d657469    item    DCD    1835365481
        0x0081c520:    00000000    ....    DCD    0
    .conststring
        0x0081c524:    30433249    I2C0    DCD    809710153
        0x0081c528:    00000000    ....    DCD    0
        0x0081c52c:    30495053    SPI0    DCD    810111059
        0x0081c530:    00000000    ....    DCD    0
        0x0081c534:    54524155    UART    DCD    1414676821
        0x0081c538:    00000030    0...    DCD    48
        0x0081c53c:    414d4447    GDMA    DCD    1095582791
        0x0081c540:    68432030    0 Ch    DCD    1749229616
        0x0081c544:    656e6e61    anne    DCD    1701736033
        0x0081c548:    0000306c    l0..    DCD    12396
        0x0081c54c:    4f495047    GPIO    DCD    1330204743
        0x0081c550:    6f72475f    _Gro    DCD    1869760351
        0x0081c554:    00307075    up0.    DCD    3174517
        0x0081c558:    31433249    I2C1    DCD    826487369
        0x0081c55c:    00000000    ....    DCD    0
        0x0081c560:    31495053    SPI1    DCD    826888275
        0x0081c564:    00000000    ....    DCD    0
        0x0081c568:    54524155    UART    DCD    1414676821
        0x0081c56c:    00000031    1...    DCD    49
        0x0081c570:    414d4447    GDMA    DCD    1095582791
        0x0081c574:    68432030    0 Ch    DCD    1749229616
        0x0081c578:    656e6e61    anne    DCD    1701736033
        0x0081c57c:    0000316c    l1..    DCD    12652
        0x0081c580:    4f495047    GPIO    DCD    1330204743
        0x0081c584:    6f72475f    _Gro    DCD    1869760351
        0x0081c588:    00317075    up1.    DCD    3240053
        0x0081c58c:    324d4954    TIM2    DCD    843925844
        0x0081c590:    00000000    ....    DCD    0
        0x0081c594:    54524155    UART    DCD    1414676821
        0x0081c598:    00000032    2...    DCD    50
        0x0081c59c:    414d4447    GDMA    DCD    1095582791
        0x0081c5a0:    68432030    0 Ch    DCD    1749229616
        0x0081c5a4:    656e6e61    anne    DCD    1701736033
        0x0081c5a8:    0000326c    l2..    DCD    12908
        0x0081c5ac:    4f495047    GPIO    DCD    1330204743
        0x0081c5b0:    6f72475f    _Gro    DCD    1869760351
        0x0081c5b4:    00327075    up2.    DCD    3305589
        0x0081c5b8:    334d4954    TIM3    DCD    860703060
        0x0081c5bc:    00000000    ....    DCD    0
        0x0081c5c0:    414d4447    GDMA    DCD    1095582791
        0x0081c5c4:    68432030    0 Ch    DCD    1749229616
        0x0081c5c8:    656e6e61    anne    DCD    1701736033
        0x0081c5cc:    0000336c    l3..    DCD    13164
        0x0081c5d0:    4f495047    GPIO    DCD    1330204743
        0x0081c5d4:    6f72475f    _Gro    DCD    1869760351
        0x0081c5d8:    00337075    up3.    DCD    3371125
        0x0081c5dc:    344d4954    TIM4    DCD    877480276
        0x0081c5e0:    00000000    ....    DCD    0
        0x0081c5e4:    4f495047    GPIO    DCD    1330204743
        0x0081c5e8:    00000034    4...    DCD    52
        0x0081c5ec:    414d4447    GDMA    DCD    1095582791
        0x0081c5f0:    68432030    0 Ch    DCD    1749229616
        0x0081c5f4:    656e6e61    anne    DCD    1701736033
        0x0081c5f8:    0000346c    l4..    DCD    13420
        0x0081c5fc:    354d4954    TIM5    DCD    894257492
        0x0081c600:    00000000    ....    DCD    0
        0x0081c604:    4f495047    GPIO    DCD    1330204743
        0x0081c608:    00000035    5...    DCD    53
        0x0081c60c:    414d4447    GDMA    DCD    1095582791
        0x0081c610:    68432030    0 Ch    DCD    1749229616
        0x0081c614:    656e6e61    anne    DCD    1701736033
        0x0081c618:    0000356c    l5..    DCD    13676
        0x0081c61c:    364d4954    TIM6    DCD    911034708
        0x0081c620:    00000000    ....    DCD    0
        0x0081c624:    656d6954    Time    DCD    1701669204
        0x0081c628:    372d3472    r4-7    DCD    925709426
        0x0081c62c:    00000000    ....    DCD    0
        0x0081c630:    374d4954    TIM7    DCD    927811924
        0x0081c634:    00000000    ....    DCD    0
        0x0081c638:    414d5442    BTMA    DCD    1095586882
        0x0081c63c:    00000043    C...    DCD    67
        0x0081c640:    00434441    ADC.    DCD    4408385
        0x0081c644:    00435452    RTC.    DCD    4412498
        0x0081c648:    00435653    SVC.    DCD    4413011
        0x0081c64c:    0044434c    LCD.    DCD    4473676
        0x0081c650:    00474457    WDG.    DCD    4670551
        0x0081c654:    00494d4e    NMI.    DCD    4803918
        0x0081c658:    4f43504c    LPCO    DCD    1329811532
        0x0081c65c:    0000504d    MP..    DCD    20557
        0x0081c660:    74696e49    Init    DCD    1953066569
        0x0081c664:    536c6169    ialS    DCD    1399611753
        0x0081c668:    00000050    P...    DCD    80
        0x0081c66c:    00005249    IR..    DCD    21065
        0x0081c670:    646e6550    Pend    DCD    1684956496
        0x0081c674:    00005653    SV..    DCD    22099
        0x0081c678:    32495053    SPI2    DCD    843665491
        0x0081c67c:    00000057    W...    DCD    87
        0x0081c680:    524f5053    SPOR    DCD    1380929619
        0x0081c684:    52203154    T1 R    DCD    1377841492
        0x0081c688:    00000058    X...    DCD    88
        0x0081c68c:    30533249    I2S0    DCD    810758729
        0x0081c690:    0058525f    _RX.    DCD    5788255
        0x0081c694:    524f5053    SPOR    DCD    1380929619
        0x0081c698:    54203154    T1 T    DCD    1411395924
        0x0081c69c:    00000058    X...    DCD    88
        0x0081c6a0:    30533249    I2S0    DCD    810758729
        0x0081c6a4:    0058545f    _TX.    DCD    5788767
        0x0081c6a8:    64767352    Rsvd    DCD    1685484370
        0x0081c6ac:    00000000    ....    DCD    0
        0x0081c6b0:    63656451    Qdec    DCD    1667589201
        0x0081c6b4:    0065646f    ode.    DCD    6644847
        0x0081c6b8:    4d6d654d    MemM    DCD    1299014989
        0x0081c6bc:    67616e61    anag    DCD    1734438497
        0x0081c6c0:    00000065    e...    DCD    101
        0x0081c6c4:    5f495053    SPI_    DCD    1598640211
        0x0081c6c8:    73616c46    Flas    DCD    1935764550
        0x0081c6cc:    00000068    h...    DCD    104
        0x0081c6d0:    54737953    SysT    DCD    1416853843
        0x0081c6d4:    006b6369    ick.    DCD    7037801
        0x0081c6d8:    69726550    Peri    DCD    1769104720
        0x0081c6dc:    72656870    pher    DCD    1919248496
        0x0081c6e0:    00006c61    al..    DCD    27745
        0x0081c6e4:    74737953    Syst    DCD    1953724755
        0x0081c6e8:    00006d65    em..    DCD    28005
        0x0081c6ec:    74616c50    Plat    DCD    1952541776
        0x0081c6f0:    6d726f66    form    DCD    1836216166
        0x0081c6f4:    00000000    ....    DCD    0
        0x0081c6f8:    7379654b    Keys    DCD    1937335627
        0x0081c6fc:    006e6163    can.    DCD    7233891
        0x0081c700:    75626544    Debu    DCD    1969382724
        0x0081c704:    6e6f4d67    gMon    DCD    1852788071
        0x0081c708:    00000000    ....    DCD    0
        0x0081c70c:    65736552    Rese    DCD    1702061394
        0x0081c710:    00000074    t...    DCD    116
        0x0081c714:    64726148    Hard    DCD    1685217608
        0x0081c718:    6c756146    Faul    DCD    1819631942
        0x0081c71c:    00000074    t...    DCD    116
        0x0081c720:    67617355    Usag    DCD    1734439765
        0x0081c724:    75614665    eFau    DCD    1969309285
        0x0081c728:    0000746c    lt..    DCD    29804
        0x0081c72c:    46737542    BusF    DCD    1181971778
        0x0081c730:    746c7561    ault    DCD    1953264993
        0x0081c734:    00000000    ....    DCD    0
        0x0081c738:    5f415450    PTA_    DCD    1598116944
        0x0081c73c:    6c69614d    Mail    DCD    1818845517
        0x0081c740:    00786f62    box.    DCD    7892834
    .conststring
        0x0081c744:    6e656353    Scen    DCD    1852138323
        0x0081c748:    00425f65    e_B.    DCD    4349797
        0x0081c74c:    6e656353    Scen    DCD    1852138323
        0x0081c750:    00435f65    e_C.    DCD    4415333
        0x0081c754:    746f6f42    Boot    DCD    1953460034
        0x0081c758:    65636e4f    Once    DCD    1701015119
        0x0081c75c:    00000000    ....    DCD    0
    .conststring
        0x0081c760:    205d495b    [I]     DCD    542984539
        0x0081c764:    41595554    TUYA    DCD    1096373588
        0x0081c768:    5050415f    _APP    DCD    1347436895
        0x0081c76c:    6572203a    : re    DCD    1701978170
        0x0081c770:    76696563    ceiv    DCD    1986618723
        0x0081c774:    74206465    ed t    DCD    1948279909
        0x0081c778:    20617975    uya     DCD    543258997
        0x0081c77c:    20656c62    ble     DCD    543517794
        0x0081c780:    6e6e6f63    conn    DCD    1852731235
        0x0081c784:    20746563    cet     DCD    544499043
        0x0081c788:    74617473    stat    DCD    1952543859
        0x0081c78c:    75207375    us u    DCD    1965060981
        0x0081c790:    74616470    pdat    DCD    1952539760
        0x0081c794:    76652065    e ev    DCD    1986338917
        0x0081c798:    2c746e65    ent,    DCD    745827941
        0x0081c79c:    72727563    curr    DCD    1920103779
        0x0081c7a0:    20746e65    ent     DCD    544501349
        0x0081c7a4:    6e6e6f63    conn    DCD    1852731235
        0x0081c7a8:    20746365    ect     DCD    544498533
        0x0081c7ac:    74617473    stat    DCD    1952543859
        0x0081c7b0:    3d207375    us =    DCD    1025536885
        0x0081c7b4:    00642520     %d.    DCD    6563104
        0x0081c7b8:    205d495b    [I]     DCD    542984539
        0x0081c7bc:    41595554    TUYA    DCD    1096373588
        0x0081c7c0:    5050415f    _APP    DCD    1347436895
        0x0081c7c4:    6572203a    : re    DCD    1701978170
        0x0081c7c8:    76696563    ceiv    DCD    1986618723
        0x0081c7cc:    64206465    ed d    DCD    1679844453
        0x0081c7d0:    61642070    p da    DCD    1633951856
        0x0081c7d4:    77206174    ta w    DCD    1998610804
        0x0081c7d8:    20687469    ith     DCD    543716457
        0x0081c7dc:    67616c66    flag    DCD    1734437990
        0x0081c7e0:    646e6120     and    DCD    1684955424
        0x0081c7e4:    6d697420     tim    DCD    1835627552
        0x0081c7e8:    65722065    e re    DCD    1701978213
        0x0081c7ec:    74726f70    port    DCD    1953656688
        0x0081c7f0:    73657220     res    DCD    1936028192
        0x0081c7f4:    736e6f70    pons    DCD    1936617328
        0x0081c7f8:    6e732065    e sn    DCD    1853038693
        0x0081c7fc:    25203d20     = %    DCD    622869792
        0x0081c800:    202c2064    d ,     DCD    539762788
        0x0081c804:    67616c66    flag    DCD    1734437990
        0x0081c808:    25203d20     = %    DCD    622869792
        0x0081c80c:    202c2064    d ,     DCD    539762788
        0x0081c810:    75736572    resu    DCD    1970496882
        0x0081c814:    6320746c    lt c    DCD    1663071340
        0x0081c818:    2065646f    ode     DCD    543515759
        0x0081c81c:    0064253d    =%d.    DCD    6563133
        0x0081c820:    205d495b    [I]     DCD    542984539
        0x0081c824:    41595554    TUYA    DCD    1096373588
        0x0081c828:    5050415f    _APP    DCD    1347436895
        0x0081c82c:    6572203a    : re    DCD    1701978170
        0x0081c830:    76696563    ceiv    DCD    1986618723
        0x0081c834:    64206465    ed d    DCD    1679844453
        0x0081c838:    61642070    p da    DCD    1633951856
        0x0081c83c:    77206174    ta w    DCD    1998610804
        0x0081c840:    20687469    ith     DCD    543716457
        0x0081c844:    67616c66    flag    DCD    1734437990
        0x0081c848:    70657220     rep    DCD    1885696544
        0x0081c84c:    2074726f    ort     DCD    544502383
        0x0081c850:    70736572    resp    DCD    1886610802
        0x0081c854:    65736e6f    onse    DCD    1702063727
        0x0081c858:    206e7320     sn     DCD    544109344
        0x0081c85c:    6425203d    = %d    DCD    1680154685
        0x0081c860:    66202c20     , f    DCD    1713384480
        0x0081c864:    2067616c    lag     DCD    543646060
        0x0081c868:    6425203d    = %d    DCD    1680154685
        0x0081c86c:    72202c20     , r    DCD    1914711072
        0x0081c870:    6c757365    esul    DCD    1819636581
        0x0081c874:    6f632074    t co    DCD    1868767348
        0x0081c878:    3d206564    de =    DCD    1025533284
        0x0081c87c:    00006425    %d..    DCD    25637
    .conststring
        0x0081c880:    205d455b    [E]     DCD    542983515
        0x0081c884:    41595554    TUYA    DCD    1096373588
        0x0081c888:    454c425f    _BLE    DCD    1162625631
        0x0081c88c:    6664203a    : df    DCD    1717837882
        0x0081c890:    65735f75    u_se    DCD    1702059893
        0x0081c894:    63697672    rvic    DCD    1667855986
        0x0081c898:    61685f65    e_ha    DCD    1634230117
        0x0081c89c:    656c646e    ndle    DCD    1701602414
        0x0081c8a0:    6361705f    _pac    DCD    1667330143
        0x0081c8a4:    5f74656b    ket_    DCD    1601463659
        0x0081c8a8:    3a716572    req:    DCD    980510066
        0x0081c8ac:    645f7020     p_d    DCD    1683976224
        0x0081c8b0:    3e2d7566    fu->    DCD    1043166566
        0x0081c8b4:    5f727563    cur_    DCD    1601336675
        0x0081c8b8:    7366666f    offs    DCD    1936090735
        0x0081c8bc:    253d7465    et=%    DCD    624784485
        0x0081c8c0:    6f202c64    d, o    DCD    1864379492
        0x0081c8c4:    745f6174    ta_t    DCD    1952407924
        0x0081c8c8:    5f706d65    emp_    DCD    1601203557
        0x0081c8cc:    5f667562    buf_    DCD    1600550242
        0x0081c8d0:    64657375    used    DCD    1684370293
        0x0081c8d4:    7a69735f    _siz    DCD    2053731167
        0x0081c8d8:    253d2065    e =%    DCD    624762981
        0x0081c8dc:    6c202c64    d, l    DCD    1814047844
        0x0081c8e0:    74676e65    engt    DCD    1952935525
        0x0081c8e4:    25203d68    h= %    DCD    622869864
        0x0081c8e8:    69202c64    d, i    DCD    1763716196
        0x0081c8ec:    6567616d    mage    DCD    1701273965
        0x0081c8f0:    746f745f    _tot    DCD    1953461343
        0x0081c8f4:    6c5f6c61    al_l    DCD    1818192993
        0x0081c8f8:    74676e65    engt    DCD    1952935525
        0x0081c8fc:    203d2068    h =     DCD    540876904
        0x0081c900:    00206425    %d .    DCD    2122789
        0x0081c904:    205d445b    [D]     DCD    542983259
        0x0081c908:    41595554    TUYA    DCD    1096373588
        0x0081c90c:    454c425f    _BLE    DCD    1162625631
        0x0081c910:    6664203a    : df    DCD    1717837882
        0x0081c914:    65735f75    u_se    DCD    1702059893
        0x0081c918:    6e697474    ttin    DCD    1852404852
        0x0081c91c:    702e7367    gs.p    DCD    1882092391
        0x0081c920:    72676f72    rogr    DCD    1919381362
        0x0081c924:    2e737365    ess.    DCD    779318117
        0x0081c928:    6d726966    firm    DCD    1836214630
        0x0081c92c:    65726177    ware    DCD    1701994871
        0x0081c930:    616d695f    _ima    DCD    1634560351
        0x0081c934:    6f5f6567    ge_o    DCD    1868522855
        0x0081c938:    65736666    ffse    DCD    1702061670
        0x0081c93c:    616c5f74    t_la    DCD    1634492276
        0x0081c940:    3d207473    st =    DCD    1025537139
        0x0081c944:    20642520     %d     DCD    543434016
        0x0081c948:    00000000    ....    DCD    0
        0x0081c94c:    205d445b    [D]     DCD    542983259
        0x0081c950:    41595554    TUYA    DCD    1096373588
        0x0081c954:    454c425f    _BLE    DCD    1162625631
        0x0081c958:    6664203a    : df    DCD    1717837882
        0x0081c95c:    65735f75    u_se    DCD    1702059893
        0x0081c960:    6e697474    ttin    DCD    1852404852
        0x0081c964:    702e7367    gs.p    DCD    1882092391
        0x0081c968:    72676f72    rogr    DCD    1919381362
        0x0081c96c:    2e737365    ess.    DCD    779318117
        0x0081c970:    6d726966    firm    DCD    1836214630
        0x0081c974:    65726177    ware    DCD    1701994871
        0x0081c978:    616d695f    _ima    DCD    1634560351
        0x0081c97c:    635f6567    ge_c    DCD    1667196263
        0x0081c980:    6c5f6372    rc_l    DCD    1818190706
        0x0081c984:    20747361    ast     DCD    544502625
        0x0081c988:    7830203d    = 0x    DCD    2016419901
        0x0081c98c:    78383025    %08x    DCD    2016948261
        0x0081c990:    00000020     ...    DCD    32
        0x0081c994:    205d455b    [E]     DCD    542983515
        0x0081c998:    41595554    TUYA    DCD    1096373588
        0x0081c99c:    454c425f    _BLE    DCD    1162625631
        0x0081c9a0:    7563203a    : cu    DCD    1969430586
        0x0081c9a4:    6e657272    rren    DCD    1852142194
        0x0081c9a8:    746f2074    t ot    DCD    1953439860
        0x0081c9ac:    74732061    a st    DCD    1953701985
        0x0081c9b0:    73757461    atus    DCD    1937077345
        0x0081c9b4:    20736920     is     DCD    544434464
        0x0081c9b8:    20746f6e    not     DCD    544501614
        0x0081c9bc:    41595554    TUYA    DCD    1096373588
        0x0081c9c0:    41544f5f    _OTA    DCD    1096044383
        0x0081c9c4:    4154535f    _STA    DCD    1096045407
        0x0081c9c8:    5f535554    TUS_    DCD    1599296852
        0x0081c9cc:    454e4f4e    NONE    DCD    1162760014
        0x0081c9d0:    6e612020      an    DCD    1851858976
        0x0081c9d4:    73692064    d is    DCD    1936269412
        0x0081c9d8:    25203a20     : %    DCD    622869024
        0x0081c9dc:    00212064    d !.    DCD    2170980
        0x0081c9e0:    205d455b    [E]     DCD    542983515
        0x0081c9e4:    41595554    TUYA    DCD    1096373588
        0x0081c9e8:    454c425f    _BLE    DCD    1162625631
        0x0081c9ec:    7563203a    : cu    DCD    1969430586
        0x0081c9f0:    6e657272    rren    DCD    1852142194
        0x0081c9f4:    746f2074    t ot    DCD    1953439860
        0x0081c9f8:    74732061    a st    DCD    1953701985
        0x0081c9fc:    73757461    atus    DCD    1937077345
        0x0081ca00:    20736920     is     DCD    544434464
        0x0081ca04:    20746f6e    not     DCD    544501614
        0x0081ca08:    41595554    TUYA    DCD    1096373588
        0x0081ca0c:    41544f5f    _OTA    DCD    1096044383
        0x0081ca10:    4154535f    _STA    DCD    1096045407
        0x0081ca14:    5f535554    TUS_    DCD    1599296852
        0x0081ca18:    454c4946    FILE    DCD    1162627398
        0x0081ca1c:    464e495f    _INF    DCD    1179535711
        0x0081ca20:    6120204f    O  a    DCD    1629495375
        0x0081ca24:    6920646e    nd i    DCD    1763730542
        0x0081ca28:    203a2073    s :     DCD    540680307
        0x0081ca2c:    21206425    %d !    DCD    555770917
        0x0081ca30:    00000000    ....    DCD    0
        0x0081ca34:    205d455b    [E]     DCD    542983515
        0x0081ca38:    41595554    TUYA    DCD    1096373588
        0x0081ca3c:    454c425f    _BLE    DCD    1162625631
        0x0081ca40:    7563203a    : cu    DCD    1969430586
        0x0081ca44:    6e657272    rren    DCD    1852142194
        0x0081ca48:    746f2074    t ot    DCD    1953439860
        0x0081ca4c:    74732061    a st    DCD    1953701985
        0x0081ca50:    73757461    atus    DCD    1937077345
        0x0081ca54:    20736920     is     DCD    544434464
        0x0081ca58:    20746f6e    not     DCD    544501614
        0x0081ca5c:    41595554    TUYA    DCD    1096373588
        0x0081ca60:    41544f5f    _OTA    DCD    1096044383
        0x0081ca64:    4154535f    _STA    DCD    1096045407
        0x0081ca68:    5f535554    TUS_    DCD    1599296852
        0x0081ca6c:    52415453    STAR    DCD    1380013139
        0x0081ca70:    61202054    T  a    DCD    1629495380
        0x0081ca74:    6920646e    nd i    DCD    1763730542
        0x0081ca78:    203a2073    s :     DCD    540680307
        0x0081ca7c:    21206425    %d !    DCD    555770917
        0x0081ca80:    00000000    ....    DCD    0
        0x0081ca84:    205d455b    [E]     DCD    542983515
        0x0081ca88:    41595554    TUYA    DCD    1096373588
        0x0081ca8c:    454c425f    _BLE    DCD    1162625631
        0x0081ca90:    7563203a    : cu    DCD    1969430586
        0x0081ca94:    6e657272    rren    DCD    1852142194
        0x0081ca98:    746f2074    t ot    DCD    1953439860
        0x0081ca9c:    74732061    a st    DCD    1953701985
        0x0081caa0:    73757461    atus    DCD    1937077345
        0x0081caa4:    20736920     is     DCD    544434464
        0x0081caa8:    20746f6e    not     DCD    544501614
        0x0081caac:    41595554    TUYA    DCD    1096373588
        0x0081cab0:    41544f5f    _OTA    DCD    1096044383
        0x0081cab4:    4154535f    _STA    DCD    1096045407
        0x0081cab8:    5f535554    TUS_    DCD    1599296852
        0x0081cabc:    454c4946    FILE    DCD    1162627398
        0x0081cac0:    46464f5f    _OFF    DCD    1179012959
        0x0081cac4:    20544553    SET     DCD    542393683
        0x0081cac8:    20726f20     or     DCD    544370464
        0x0081cacc:    41595554    TUYA    DCD    1096373588
        0x0081cad0:    41544f5f    _OTA    DCD    1096044383
        0x0081cad4:    4154535f    _STA    DCD    1096045407
        0x0081cad8:    5f535554    TUS_    DCD    1599296852
        0x0081cadc:    454c4946    FILE    DCD    1162627398
        0x0081cae0:    5441445f    _DAT    DCD    1413563487
        0x0081cae4:    6e612041    A an    DCD    1851859009
        0x0081cae8:    73692064    d is    DCD    1936269412
        0x0081caec:    25203a20     : %    DCD    622869024
        0x0081caf0:    00212064    d !.    DCD    2170980
        0x0081caf4:    205d445b    [D]     DCD    542983259
        0x0081caf8:    41595554    TUYA    DCD    1096373588
        0x0081cafc:    454c425f    _BLE    DCD    1162625631
        0x0081cb00:    6664203a    : df    DCD    1717837882
        0x0081cb04:    63615f75    u_ac    DCD    1667325813
        0x0081cb08:    6f6e5f74    t_no    DCD    1869504372
        0x0081cb0c:    79666974    tify    DCD    2036754804
        0x0081cb10:    6c61765f    _val    DCD    1818326623
        0x0081cb14:    202c6469    id,     DCD    539780201
        0x0081cb18:    63656863    chec    DCD    1667590243
        0x0081cb1c:    65725f6b    k_re    DCD    1701994347
        0x0081cb20:    746c7573    sult    DCD    1953265011
        0x0081cb24:    2064253a    :%d     DCD    543434042
        0x0081cb28:    203a3128    (1:     DCD    540684584
        0x0081cb2c:    63637553    Succ    DCD    1667462483
        0x0081cb30:    2c737365    ess,    DCD    745763685
        0x0081cb34:    203a3020     0:     DCD    540684320
        0x0081cb38:    6c696146    Fail    DCD    1818845510
        0x0081cb3c:    00000029    )...    DCD    41
        0x0081cb40:    205d445b    [D]     DCD    542983259
        0x0081cb44:    41595554    TUYA    DCD    1096373588
        0x0081cb48:    454c425f    _BLE    DCD    1162625631
        0x0081cb4c:    6966203a    : fi    DCD    1768300602
        0x0081cb50:    635f656c    le_c    DCD    1667196268
        0x0081cb54:    635f6372    rc_c    DCD    1667195762
        0x0081cb58:    6b636568    heck    DCD    1801676136
        0x0081cb5c:    5f6e695f    _in_    DCD    1601071455
        0x0081cb60:    73616c66    flas    DCD    1935764582
        0x0081cb64:    75623a68    h:bu    DCD    1969371752
        0x0081cb68:    61642066    f da    DCD    1633951846
        0x0081cb6c:    62206174    ta b    DCD    1646289268
        0x0081cb70:    726f6665    efor    DCD    1919903333
        0x0081cb74:    5b203a65    e: [    DCD    1528838757
        0x0081cb78:    3d6e656c    len=    DCD    1030645100
        0x0081cb7c:    205d6425    %d]     DCD    542991397
        0x0081cb80:    0000003a    :...    DCD    58
        0x0081cb84:    205d445b    [D]     DCD    542983259
        0x0081cb88:    41595554    TUYA    DCD    1096373588
        0x0081cb8c:    454c425f    _BLE    DCD    1162625631
        0x0081cb90:    6966203a    : fi    DCD    1768300602
        0x0081cb94:    635f656c    le_c    DCD    1667196268
        0x0081cb98:    635f6372    rc_c    DCD    1667195762
        0x0081cb9c:    6b636568    heck    DCD    1801676136
        0x0081cba0:    5f6e695f    _in_    DCD    1601071455
        0x0081cba4:    73616c66    flas    DCD    1935764582
        0x0081cba8:    75623a68    h:bu    DCD    1969371752
        0x0081cbac:    61642066    f da    DCD    1633951846
        0x0081cbb0:    61206174    ta a    DCD    1629512052
        0x0081cbb4:    72657466    fter    DCD    1919251558
        0x0081cbb8:    6c5b203a    : [l    DCD    1817911354
        0x0081cbbc:    253d6e65    en=%    DCD    624782949
        0x0081cbc0:    3a205d64    d] :    DCD    975199588
        0x0081cbc4:    00000000    ....    DCD    0
        0x0081cbc8:    205d455b    [E]     DCD    542983515
        0x0081cbcc:    41595554    TUYA    DCD    1096373588
        0x0081cbd0:    454c425f    _BLE    DCD    1162625631
        0x0081cbd4:    746f203a    : ot    DCD    1953439802
        0x0081cbd8:    65722061    a re    DCD    1701978209
        0x0081cbdc:    76696563    ceiv    DCD    1986618723
        0x0081cbe0:    70206465    ed p    DCD    1881171045
        0x0081cbe4:    616b6361    acka    DCD    1634427745
        0x0081cbe8:    6e206567    ge n    DCD    1847616871
        0x0081cbec:    65626d75    umbe    DCD    1700949365
        0x0081cbf0:    72652072    r er    DCD    1919230066
        0x0081cbf4:    2e726f72    ror.    DCD    779251570
        0x0081cbf8:    65636572    rece    DCD    1701012850
        0x0081cbfc:    64657669    ived    DCD    1684371049
        0x0081cc00:    63617020     pac    DCD    1667330080
        0x0081cc04:    6567616b    kage    DCD    1701273963
        0x0081cc08:    6d756e20     num    DCD    1836412448
        0x0081cc0c:    20726562    ber     DCD    544367970
        0x0081cc10:    6425203a    : %d    DCD    1680154682
        0x0081cc14:    00000000    ....    DCD    0
        0x0081cc18:    205d445b    [D]     DCD    542983259
        0x0081cc1c:    41595554    TUYA    DCD    1096373588
        0x0081cc20:    454c425f    _BLE    DCD    1162625631
        0x0081cc24:    6664203a    : df    DCD    1717837882
        0x0081cc28:    65735f75    u_se    DCD    1702059893
        0x0081cc2c:    6e697474    ttin    DCD    1852404852
        0x0081cc30:    662e7367    gs.f    DCD    1714320231
        0x0081cc34:    5f656c69    ile_    DCD    1600482409
        0x0081cc38:    6f666e69    info    DCD    1868983913
        0x0081cc3c:    7269662e    .fir    DCD    1919510062
        0x0081cc40:    7261776d    mwar    DCD    1918990189
        0x0081cc44:    69665f65    e_fi    DCD    1768316773
        0x0081cc48:    6c5f656c    le_l    DCD    1818191212
        0x0081cc4c:    74676e65    engt    DCD    1952935525
        0x0081cc50:    203d2068    h =     DCD    540876904
        0x0081cc54:    2d206425    %d -    DCD    757097509
        0x0081cc58:    202d2d2d    ---     DCD    539831597
        0x0081cc5c:    656c6966    file    DCD    1701603686
        0x0081cc60:    6e656c5f    _len    DCD    1852140639
        0x0081cc64:    20687467    gth     DCD    543716455
        0x0081cc68:    6425203d    = %d    DCD    1680154685
        0x0081cc6c:    00000000    ....    DCD    0
        0x0081cc70:    205d445b    [D]     DCD    542983259
        0x0081cc74:    41595554    TUYA    DCD    1096373588
        0x0081cc78:    454c425f    _BLE    DCD    1162625631
        0x0081cc7c:    7574203a    : tu    DCD    1970544698
        0x0081cc80:    6f5f6179    ya_o    DCD    1868521849
        0x0081cc84:    6f5f6174    ta_o    DCD    1868521844
        0x0081cc88:    65736666    ffse    DCD    1702061670
        0x0081cc8c:    65725f74    t_re    DCD    1701994356
        0x0081cc90:    656e2071    q ne    DCD    1701716081
        0x0081cc94:    69662077    w fi    DCD    1768300663
        0x0081cc98:    61776d72    rmwa    DCD    1635216754
        0x0081cc9c:    695f6572    re_i    DCD    1767859570
        0x0081cca0:    6567616d    mage    DCD    1701273965
        0x0081cca4:    6372635f    _crc    DCD    1668440927
        0x0081cca8:    73616c5f    _las    DCD    1935764575
        0x0081ccac:    20202074    t       DCD    538976372
        0x0081ccb0:    30203a20     : 0    DCD    807418400
        0x0081ccb4:    34302578    x%04    DCD    875570552
        0x0081ccb8:    00000078    x...    DCD    120
        0x0081ccbc:    205d445b    [D]     DCD    542983259
        0x0081ccc0:    41595554    TUYA    DCD    1096373588
        0x0081ccc4:    454c425f    _BLE    DCD    1162625631
        0x0081ccc8:    7574203a    : tu    DCD    1970544698
        0x0081cccc:    6f5f6179    ya_o    DCD    1868521849
        0x0081ccd0:    6f5f6174    ta_o    DCD    1868521844
        0x0081ccd4:    65736666    ffse    DCD    1702061670
        0x0081ccd8:    65725f74    t_re    DCD    1701994356
        0x0081ccdc:    656e2071    q ne    DCD    1701716081
        0x0081cce0:    69662077    w fi    DCD    1768300663
        0x0081cce4:    61776d72    rmwa    DCD    1635216754
        0x0081cce8:    695f6572    re_i    DCD    1767859570
        0x0081ccec:    6567616d    mage    DCD    1701273965
        0x0081ccf0:    66666f5f    _off    DCD    1717989215
        0x0081ccf4:    5f746573    set_    DCD    1601463667
        0x0081ccf8:    7473616c    last    DCD    1953718636
        0x0081ccfc:    30203a20     : 0    DCD    807418400
        0x0081cd00:    34302578    x%04    DCD    875570552
        0x0081cd04:    00000078    x...    DCD    120
        0x0081cd08:    205d445b    [D]     DCD    542983259
        0x0081cd0c:    41595554    TUYA    DCD    1096373588
        0x0081cd10:    454c425f    _BLE    DCD    1162625631
        0x0081cd14:    6664203a    : df    DCD    1717837882
        0x0081cd18:    65735f75    u_se    DCD    1702059893
        0x0081cd1c:    6e697474    ttin    DCD    1852404852
        0x0081cd20:    662e7367    gs.f    DCD    1714320231
        0x0081cd24:    5f656c69    ile_    DCD    1600482409
        0x0081cd28:    6f666e69    info    DCD    1868983913
        0x0081cd2c:    7269662e    .fir    DCD    1919510062
        0x0081cd30:    7261776d    mwar    DCD    1918990189
        0x0081cd34:    69665f65    e_fi    DCD    1768316773
        0x0081cd38:    765f656c    le_v    DCD    1985963372
        0x0081cd3c:    69737265    ersi    DCD    1769173605
        0x0081cd40:    3d206e6f    on =    DCD    1025535599
        0x0081cd44:    25783020     0x%    DCD    628633632
        0x0081cd48:    20783430    04x     DCD    544748592
        0x0081cd4c:    2d2d2d2d    ----    DCD    757935405
        0x0081cd50:    6c696620     fil    DCD    1818846752
        0x0081cd54:    65765f65    e_ve    DCD    1702256485
        0x0081cd58:    6f697372    rsio    DCD    1869181810
        0x0081cd5c:    203d206e    n =     DCD    540876910
        0x0081cd60:    30257830    0x%0    DCD    807761968
        0x0081cd64:    00007834    4x..    DCD    30772
        0x0081cd68:    205d445b    [D]     DCD    542983259
        0x0081cd6c:    41595554    TUYA    DCD    1096373588
        0x0081cd70:    454c425f    _BLE    DCD    1162625631
        0x0081cd74:    6664203a    : df    DCD    1717837882
        0x0081cd78:    65735f75    u_se    DCD    1702059893
        0x0081cd7c:    6e697474    ttin    DCD    1852404852
        0x0081cd80:    662e7367    gs.f    DCD    1714320231
        0x0081cd84:    5f656c69    ile_    DCD    1600482409
        0x0081cd88:    6f666e69    info    DCD    1868983913
        0x0081cd8c:    7269662e    .fir    DCD    1919510062
        0x0081cd90:    7261776d    mwar    DCD    1918990189
        0x0081cd94:    69665f65    e_fi    DCD    1768316773
        0x0081cd98:    635f656c    le_c    DCD    1667196268
        0x0081cd9c:    3d206372    rc =    DCD    1025532786
        0x0081cda0:    25783020     0x%    DCD    628633632
        0x0081cda4:    20783830    08x     DCD    544749616
        0x0081cda8:    2d2d2d2d    ----    DCD    757935405
        0x0081cdac:    6c696620     fil    DCD    1818846752
        0x0081cdb0:    72635f65    e_cr    DCD    1919115109
        0x0081cdb4:    203d2063    c =     DCD    540876899
        0x0081cdb8:    30257830    0x%0    DCD    807761968
        0x0081cdbc:    00007838    8x..    DCD    30776
        0x0081cdc0:    205d445b    [D]     DCD    542983259
        0x0081cdc4:    41595554    TUYA    DCD    1096373588
        0x0081cdc8:    454c425f    _BLE    DCD    1162625631
        0x0081cdcc:    6966203a    : fi    DCD    1768300602
        0x0081cdd0:    635f656c    le_c    DCD    1667196268
        0x0081cdd4:    635f6372    rc_c    DCD    1667195762
        0x0081cdd8:    6b636568    heck    DCD    1801676136
        0x0081cddc:    5f6e695f    _in_    DCD    1601071455
        0x0081cde0:    73616c66    flas    DCD    1935764582
        0x0081cde4:    69662d68    h-fi    DCD    1768303976
        0x0081cde8:    61776d72    rmwa    DCD    1635216754
        0x0081cdec:    695f6572    re_i    DCD    1767859570
        0x0081cdf0:    6567616d    mage    DCD    1701273965
        0x0081cdf4:    6372635f    _crc    DCD    1668440927
        0x0081cdf8:    73616c5f    _las    DCD    1935764575
        0x0081cdfc:    203d2074    t =     DCD    540876916
        0x0081ce00:    30257830    0x%0    DCD    807761968
        0x0081ce04:    2d207838    8x -    DCD    757102648
        0x0081ce08:    202d2d2d    ---     DCD    539831597
        0x0081ce0c:    5f637263    crc_    DCD    1600352867
        0x0081ce10:    706d6574    temp    DCD    1886217588
        0x0081ce14:    30203d20     = 0    DCD    807419168
        0x0081ce18:    38302578    x%08    DCD    942679416
        0x0081ce1c:    00000078    x...    DCD    120
    .conststring
        0x0081ce20:    205d495b    [I]     DCD    542984539
        0x0081ce24:    41595554    TUYA    DCD    1096373588
        0x0081ce28:    454c425f    _BLE    DCD    1162625631
        0x0081ce2c:    6854203a    : Th    DCD    1750343738
        0x0081ce30:    414d2065    e MA    DCD    1095573605
        0x0081ce34:    64612043    C ad    DCD    1684086851
        0x0081ce38:    73657264    dres    DCD    1936028260
        0x0081ce3c:    61702073    s pa    DCD    1634738291
        0x0081ce40:    64657373    ssed    DCD    1684370291
        0x0081ce44:    206e6920     in     DCD    544106784
        0x0081ce48:    74207962    by t    DCD    1948285282
        0x0081ce4c:    61206568    he a    DCD    1629513064
        0x0081ce50:    696c7070    ppli    DCD    1768714352
        0x0081ce54:    69746163    cati    DCD    1769234787
        0x0081ce58:    5b206e6f    on [    DCD    1528852079
        0x0081ce5c:    3d6e656c    len=    DCD    1030645100
        0x0081ce60:    205d6425    %d]     DCD    542991397
        0x0081ce64:    0000003a    :...    DCD    58
        0x0081ce68:    205d455b    [E]     DCD    542983515
        0x0081ce6c:    41595554    TUYA    DCD    1096373588
        0x0081ce70:    454c425f    _BLE    DCD    1162625631
        0x0081ce74:    6572203a    : re    DCD    1701978170
        0x0081ce78:    74726f70    port    DCD    1953656688
        0x0081ce7c:    616c6620     fla    DCD    1634493984
        0x0081ce80:    70642067    g dp    DCD    1885610087
        0x0081ce84:    74616420     dat    DCD    1952539680
        0x0081ce88:    656c2061    a le    DCD    1701584993
        0x0081ce8c:    7265206e    n er    DCD    1919230062
        0x0081ce90:    2c726f72    ror,    DCD    745697138
        0x0081ce94:    61746164    data    DCD    1635017060
        0x0081ce98:    6e656c20     len    DCD    1852140576
        0x0081ce9c:    25203d20     = %    DCD    622869792
        0x0081cea0:    202c2064    d ,     DCD    539762788
        0x0081cea4:    2078616d    max     DCD    544760173
        0x0081cea8:    61746164    data    DCD    1635017060
        0x0081ceac:    6e656c20     len    DCD    1852140576
        0x0081ceb0:    25203d20     = %    DCD    622869792
        0x0081ceb4:    00000064    d...    DCD    100
        0x0081ceb8:    205d455b    [E]     DCD    542983515
        0x0081cebc:    41595554    TUYA    DCD    1096373588
        0x0081cec0:    454c425f    _BLE    DCD    1162625631
        0x0081cec4:    6572203a    : re    DCD    1701978170
        0x0081cec8:    74726f70    port    DCD    1953656688
        0x0081cecc:    20706420     dp     DCD    544236576
        0x0081ced0:    61746164    data    DCD    1635017060
        0x0081ced4:    6e656c20     len    DCD    1852140576
        0x0081ced8:    72726520     err    DCD    1920099616
        0x0081cedc:    642c726f    or,d    DCD    1680634479
        0x0081cee0:    20617461    ata     DCD    543257697
        0x0081cee4:    206e656c    len     DCD    544105836
        0x0081cee8:    6425203d    = %d    DCD    1680154685
        0x0081ceec:    6d202c20     , m    DCD    1830824992
        0x0081cef0:    64207861    ax d    DCD    1679849569
        0x0081cef4:    20617461    ata     DCD    543257697
        0x0081cef8:    206e656c    len     DCD    544105836
        0x0081cefc:    6425203d    = %d    DCD    1680154685
        0x0081cf00:    00000000    ....    DCD    0
    .conststring
        0x0081cf04:    205d495b    [I]     DCD    542984539
        0x0081cf08:    41595554    TUYA    DCD    1096373588
        0x0081cf0c:    454c425f    _BLE    DCD    1162625631
        0x0081cf10:    6c62203a    : bl    DCD    1818370106
        0x0081cf14:    64612065    e ad    DCD    1684086885
        0x0081cf18:    61642076    v da    DCD    1633951862
        0x0081cf1c:    75206174    ta u    DCD    1965056372
        0x0081cf20:    74616470    pdat    DCD    1952539760
        0x0081cf24:    65622c65    e,be    DCD    1700932709
        0x0081cf28:    73756163    caus    DCD    1937072483
        0x0081cf2c:    68742065    e th    DCD    1752440933
        0x0081cf30:    616c2065    e la    DCD    1634476133
        0x0081cf34:    62207473    st b    DCD    1646294131
        0x0081cf38:    64616f72    road    DCD    1684107122
        0x0081cf3c:    74736163    cast    DCD    1953718627
        0x0081cf40:    74616420     dat    DCD    1952539680
        0x0081cf44:    6f632061    a co    DCD    1868767329
        0x0081cf48:    63656e6e    nnec    DCD    1667591790
        0x0081cf4c:    6e6f6974    tion    DCD    1852795252
        0x0081cf50:    71657220     req    DCD    1902473760
        0x0081cf54:    74736575    uest    DCD    1953719669
        0x0081cf58:    616c6620     fla    DCD    1634493984
        0x0081cf5c:    61772067    g wa    DCD    1635197031
        0x0081cf60:    65732073    s se    DCD    1702043763
        0x0081cf64:    00002174    t!..    DCD    8564
        0x0081cf68:    205d455b    [E]     DCD    542983515
        0x0081cf6c:    41595554    TUYA    DCD    1096373588
        0x0081cf70:    454c425f    _BLE    DCD    1162625631
        0x0081cf74:    7974203a    : ty    DCD    2037653562
        0x0081cf78:    656c625f    _ble    DCD    1701601887
        0x0081cf7c:    5f78725f    _rx_    DCD    1601729119
        0x0081cf80:    636f7270    proc    DCD    1668248176
        0x0081cf84:    74616420     dat    DCD    1952539680
        0x0081cf88:    6e652061    a en    DCD    1852121185
        0x0081cf8c:    70797263    cryp    DCD    1887007331
        0x0081cf90:    6e6f6974    tion    DCD    1852795252
        0x0081cf94:    646f6d20     mod    DCD    1685024032
        0x0081cf98:    72652065    e er    DCD    1919230053
        0x0081cf9c:    20726f72    ror     DCD    544370546
        0x0081cfa0:    636e6973    sinc    DCD    1668180339
        0x0081cfa4:    6f622065    e bo    DCD    1868701797
        0x0081cfa8:    5f646e75    und_    DCD    1600417397
        0x0081cfac:    67616c66    flag    DCD    1734437990
        0x0081cfb0:    31203d20     = 1    DCD    824196384
        0x0081cfb4:    0000002e    ....    DCD    46
        0x0081cfb8:    205d455b    [E]     DCD    542983515
        0x0081cfbc:    41595554    TUYA    DCD    1096373588
        0x0081cfc0:    454c425f    _BLE    DCD    1162625631
        0x0081cfc4:    6961203a    : ai    DCD    1767972922
        0x0081cfc8:    65725f72    r_re    DCD    1701994354
        0x0081cfcc:    705f7663    cv_p    DCD    1885304419
        0x0081cfd0:    656b6361    acke    DCD    1701536609
        0x0081cfd4:    65722e74    t.re    DCD    1701981812
        0x0081cfd8:    6c5f7663    cv_l    DCD    1818195555
        0x0081cfdc:    62206e65    en b    DCD    1646292581
        0x0081cfe0:    65676769    igge    DCD    1701275497
        0x0081cfe4:    68742072    r th    DCD    1752440946
        0x0081cfe8:    54206e61    an T    DCD    1411411553
        0x0081cfec:    5f415955    UYA_    DCD    1598118229
        0x0081cff0:    5f454c42    BLE_    DCD    1598377026
        0x0081cff4:    5f524941    AIR_    DCD    1599228225
        0x0081cff8:    4d415246    FRAM    DCD    1296126534
        0x0081cffc:    414d5f45    E_MA    DCD    1095589701
        0x0081d000:    00002e58    X...    DCD    11864
        0x0081d004:    205d455b    [E]     DCD    542983515
        0x0081d008:    41595554    TUYA    DCD    1096373588
        0x0081d00c:    454c425f    _BLE    DCD    1162625631
        0x0081d010:    7574203a    : tu    DCD    1970544698
        0x0081d014:    625f6179    ya_b    DCD    1650418041
        0x0081d018:    685f656c    le_h    DCD    1751082348
        0x0081d01c:    6c646e61    andl    DCD    1818521185
        0x0081d020:    6e755f65    e_un    DCD    1853185893
        0x0081d024:    646e6f62    bond    DCD    1684959074
        0x0081d028:    7165725f    _req    DCD    1902473823
        0x0081d02c:    7975742d    -tuy    DCD    2037740589
        0x0081d030:    6c622061    a bl    DCD    1818370145
        0x0081d034:    65732065    e se    DCD    1702043749
        0x0081d038:    6320646e    nd c    DCD    1663067246
        0x0081d03c:    76652062    b ev    DCD    1986338914
        0x0081d040:    20746e65    ent     DCD    544501349
        0x0081d044:    6e6f6328    (con    DCD    1852793640
        0x0081d048:    7463656e    nect    DCD    1952671086
        0x0081d04c:    61747320     sta    DCD    1635021600
        0x0081d050:    20737574    tus     DCD    544437620
        0x0081d054:    61647075    upda    DCD    1633972341
        0x0081d058:    20296574    te)     DCD    539583860
        0x0081d05c:    6c696166    fail    DCD    1818845542
        0x0081d060:    002e6465    ed..    DCD    3040357
        0x0081d064:    205d455b    [E]     DCD    542983515
        0x0081d068:    41595554    TUYA    DCD    1096373588
        0x0081d06c:    454c425f    _BLE    DCD    1162625631
        0x0081d070:    7574203a    : tu    DCD    1970544698
        0x0081d074:    625f6179    ya_b    DCD    1650418041
        0x0081d078:    685f656c    le_h    DCD    1751082348
        0x0081d07c:    6c646e61    andl    DCD    1818521185
        0x0081d080:    6e615f65    e_an    DCD    1851875173
        0x0081d084:    6c616d6f    omal    DCD    1818324335
        0x0081d088:    6e755f79    y_un    DCD    1853185913
        0x0081d08c:    646e6f62    bond    DCD    1684959074
        0x0081d090:    7165725f    _req    DCD    1902473823
        0x0081d094:    7975742d    -tuy    DCD    2037740589
        0x0081d098:    6c622061    a bl    DCD    1818370145
        0x0081d09c:    65732065    e se    DCD    1702043749
        0x0081d0a0:    6320646e    nd c    DCD    1663067246
        0x0081d0a4:    76652062    b ev    DCD    1986338914
        0x0081d0a8:    20746e65    ent     DCD    544501349
        0x0081d0ac:    6e6f6328    (con    DCD    1852793640
        0x0081d0b0:    7463656e    nect    DCD    1952671086
        0x0081d0b4:    61747320     sta    DCD    1635021600
        0x0081d0b8:    20737574    tus     DCD    544437620
        0x0081d0bc:    61647075    upda    DCD    1633972341
        0x0081d0c0:    20296574    te)     DCD    539583860
        0x0081d0c4:    6c696166    fail    DCD    1818845542
        0x0081d0c8:    002e6465    ed..    DCD    3040357
        0x0081d0cc:    205d455b    [E]     DCD    542983515
        0x0081d0d0:    41595554    TUYA    DCD    1096373588
        0x0081d0d4:    454c425f    _BLE    DCD    1162625631
        0x0081d0d8:    7574203a    : tu    DCD    1970544698
        0x0081d0dc:    625f6179    ya_b    DCD    1650418041
        0x0081d0e0:    685f656c    le_h    DCD    1751082348
        0x0081d0e4:    6c646e61    andl    DCD    1818521185
        0x0081d0e8:    65645f65    e_de    DCD    1701076837
        0x0081d0ec:    65636976    vice    DCD    1701013878
        0x0081d0f0:    7365725f    _res    DCD    1936028255
        0x0081d0f4:    725f7465    et_r    DCD    1918858341
        0x0081d0f8:    742d7165    eq-t    DCD    1949135205
        0x0081d0fc:    20617975    uya     DCD    543258997
        0x0081d100:    20656c62    ble     DCD    543517794
        0x0081d104:    646e6573    send    DCD    1684956531
        0x0081d108:    20626320     cb     DCD    543318816
        0x0081d10c:    6e657665    even    DCD    1852143205
        0x0081d110:    63282074    t (c    DCD    1663574132
        0x0081d114:    656e6e6f    onne    DCD    1701736047
        0x0081d118:    73207463    ct s    DCD    1931506787
        0x0081d11c:    75746174    tatu    DCD    1970561396
        0x0081d120:    70752073    s up    DCD    1886724211
        0x0081d124:    65746164    date    DCD    1702125924
        0x0081d128:    61662029    ) fa    DCD    1634082857
        0x0081d12c:    64656c69    iled    DCD    1684368489
        0x0081d130:    0000002e    ....    DCD    46
        0x0081d134:    205d455b    [E]     DCD    542983515
        0x0081d138:    41595554    TUYA    DCD    1096373588
        0x0081d13c:    454c425f    _BLE    DCD    1162625631
        0x0081d140:    7574203a    : tu    DCD    1970544698
        0x0081d144:    625f6179    ya_b    DCD    1650418041
        0x0081d148:    685f656c    le_h    DCD    1751082348
        0x0081d14c:    6c646e61    andl    DCD    1818521185
        0x0081d150:    6e755f65    e_un    DCD    1853185893
        0x0081d154:    646e6f62    bond    DCD    1684959074
        0x0081d158:    7165725f    _req    DCD    1902473823
        0x0081d15c:    7975742d    -tuy    DCD    2037740589
        0x0081d160:    6c622061    a bl    DCD    1818370145
        0x0081d164:    65732065    e se    DCD    1702043749
        0x0081d168:    6320646e    nd c    DCD    1663067246
        0x0081d16c:    76652062    b ev    DCD    1986338914
        0x0081d170:    20746e65    ent     DCD    544501349
        0x0081d174:    626e7528    (unb    DCD    1651406120
        0x0081d178:    646e756f    ound    DCD    1684960623
        0x0081d17c:    71657220     req    DCD    1902473760
        0x0081d180:    61662029    ) fa    DCD    1634082857
        0x0081d184:    64656c69    iled    DCD    1684368489
        0x0081d188:    0000002e    ....    DCD    46
        0x0081d18c:    205d455b    [E]     DCD    542983515
        0x0081d190:    41595554    TUYA    DCD    1096373588
        0x0081d194:    454c425f    _BLE    DCD    1162625631
        0x0081d198:    7574203a    : tu    DCD    1970544698
        0x0081d19c:    625f6179    ya_b    DCD    1650418041
        0x0081d1a0:    685f656c    le_h    DCD    1751082348
        0x0081d1a4:    6c646e61    andl    DCD    1818521185
        0x0081d1a8:    6e615f65    e_an    DCD    1851875173
        0x0081d1ac:    6c616d6f    omal    DCD    1818324335
        0x0081d1b0:    6e755f79    y_un    DCD    1853185913
        0x0081d1b4:    646e6f62    bond    DCD    1684959074
        0x0081d1b8:    7165725f    _req    DCD    1902473823
        0x0081d1bc:    7975742d    -tuy    DCD    2037740589
        0x0081d1c0:    6c622061    a bl    DCD    1818370145
        0x0081d1c4:    65732065    e se    DCD    1702043749
        0x0081d1c8:    6320646e    nd c    DCD    1663067246
        0x0081d1cc:    76652062    b ev    DCD    1986338914
        0x0081d1d0:    20746e65    ent     DCD    544501349
        0x0081d1d4:    626e7528    (unb    DCD    1651406120
        0x0081d1d8:    646e756f    ound    DCD    1684960623
        0x0081d1dc:    71657220     req    DCD    1902473760
        0x0081d1e0:    61662029    ) fa    DCD    1634082857
        0x0081d1e4:    64656c69    iled    DCD    1684368489
        0x0081d1e8:    0000002e    ....    DCD    46
        0x0081d1ec:    205d455b    [E]     DCD    542983515
        0x0081d1f0:    41595554    TUYA    DCD    1096373588
        0x0081d1f4:    454c425f    _BLE    DCD    1162625631
        0x0081d1f8:    7574203a    : tu    DCD    1970544698
        0x0081d1fc:    625f6179    ya_b    DCD    1650418041
        0x0081d200:    685f656c    le_h    DCD    1751082348
        0x0081d204:    6c646e61    andl    DCD    1818521185
        0x0081d208:    65645f65    e_de    DCD    1701076837
        0x0081d20c:    65636976    vice    DCD    1701013878
        0x0081d210:    7365725f    _res    DCD    1936028255
        0x0081d214:    725f7465    et_r    DCD    1918858341
        0x0081d218:    742d7165    eq-t    DCD    1949135205
        0x0081d21c:    20617975    uya     DCD    543258997
        0x0081d220:    20656c62    ble     DCD    543517794
        0x0081d224:    646e6573    send    DCD    1684956531
        0x0081d228:    20626320     cb     DCD    543318816
        0x0081d22c:    6e657665    even    DCD    1852143205
        0x0081d230:    65642074    t de    DCD    1701060724
        0x0081d234:    65636976    vice    DCD    1701013878
        0x0081d238:    73657220     res    DCD    1936028192
        0x0081d23c:    72207465    et r    DCD    1914729573
        0x0081d240:    66207165    eq f    DCD    1713402213
        0x0081d244:    656c6961    aile    DCD    1701603681
        0x0081d248:    00002e64    d...    DCD    11876
        0x0081d24c:    205d455b    [E]     DCD    542983515
        0x0081d250:    41595554    TUYA    DCD    1096373588
        0x0081d254:    454c425f    _BLE    DCD    1162625631
        0x0081d258:    7574203a    : tu    DCD    1970544698
        0x0081d25c:    625f6179    ya_b    DCD    1650418041
        0x0081d260:    685f656c    le_h    DCD    1751082348
        0x0081d264:    6c646e61    andl    DCD    1818521185
        0x0081d268:    6e755f65    e_un    DCD    1853185893
        0x0081d26c:    745f7869    ix_t    DCD    1952413801
        0x0081d270:    5f656d69    ime_    DCD    1600482665
        0x0081d274:    65746164    date    DCD    1702125924
        0x0081d278:    7365725f    _res    DCD    1936028255
        0x0081d27c:    75742d70    p-tu    DCD    1970548080
        0x0081d280:    62206179    ya b    DCD    1646289273
        0x0081d284:    7320656c    le s    DCD    1931502956
        0x0081d288:    20646e65    end     DCD    543452773
        0x0081d28c:    65206263    cb e    DCD    1696621155
        0x0081d290:    746e6576    vent    DCD    1953391990
        0x0081d294:    69616620     fai    DCD    1767990816
        0x0081d298:    2e64656c    led.    DCD    778331500
        0x0081d29c:    00000000    ....    DCD    0
        0x0081d2a0:    205d455b    [E]     DCD    542983515
        0x0081d2a4:    41595554    TUYA    DCD    1096373588
        0x0081d2a8:    454c425f    _BLE    DCD    1162625631
        0x0081d2ac:    7574203a    : tu    DCD    1970544698
        0x0081d2b0:    625f6179    ya_b    DCD    1650418041
        0x0081d2b4:    685f656c    le_h    DCD    1751082348
        0x0081d2b8:    6c646e61    andl    DCD    1818521185
        0x0081d2bc:    6e755f65    e_un    DCD    1853185893
        0x0081d2c0:    745f7869    ix_t    DCD    1952413801
        0x0081d2c4:    5f656d69    ime_    DCD    1600482665
        0x0081d2c8:    72616863    char    DCD    1918986339
        0x0081d2cc:    5f736d5f    _ms_    DCD    1601400159
        0x0081d2d0:    70736572    resp    DCD    1886610802
        0x0081d2d4:    7975742d    -tuy    DCD    2037740589
        0x0081d2d8:    6c622061    a bl    DCD    1818370145
        0x0081d2dc:    65732065    e se    DCD    1702043749
        0x0081d2e0:    6320646e    nd c    DCD    1663067246
        0x0081d2e4:    76652062    b ev    DCD    1986338914
        0x0081d2e8:    20746e65    ent     DCD    544501349
        0x0081d2ec:    6c696166    fail    DCD    1818845542
        0x0081d2f0:    002e6465    ed..    DCD    3040357
        0x0081d2f4:    205d455b    [E]     DCD    542983515
        0x0081d2f8:    41595554    TUYA    DCD    1096373588
        0x0081d2fc:    454c425f    _BLE    DCD    1162625631
        0x0081d300:    7574203a    : tu    DCD    1970544698
        0x0081d304:    625f6179    ya_b    DCD    1650418041
        0x0081d308:    685f656c    le_h    DCD    1751082348
        0x0081d30c:    6c646e61    andl    DCD    1818521185
        0x0081d310:    746f5f65    e_ot    DCD    1953455973
        0x0081d314:    65725f61    a_re    DCD    1701994337
        0x0081d318:    75742d71    q-tu    DCD    1970548081
        0x0081d31c:    62206179    ya b    DCD    1646289273
        0x0081d320:    7320656c    le s    DCD    1931502956
        0x0081d324:    20646e65    end     DCD    543452773
        0x0081d328:    65206263    cb e    DCD    1696621155
        0x0081d32c:    746e6576    vent    DCD    1953391990
        0x0081d330:    69616620     fai    DCD    1767990816
        0x0081d334:    2e64656c    led.    DCD    778331500
        0x0081d338:    00000000    ....    DCD    0
        0x0081d33c:    205d455b    [E]     DCD    542983515
        0x0081d340:    41595554    TUYA    DCD    1096373588
        0x0081d344:    454c425f    _BLE    DCD    1162625631
        0x0081d348:    7574203a    : tu    DCD    1970544698
        0x0081d34c:    625f6179    ya_b    DCD    1650418041
        0x0081d350:    685f656c    le_h    DCD    1751082348
        0x0081d354:    6c646e61    andl    DCD    1818521185
        0x0081d358:    70645f65    e_dp    DCD    1885626213
        0x0081d35c:    6972775f    _wri    DCD    1769109343
        0x0081d360:    725f6574    te_r    DCD    1918854516
        0x0081d364:    742d7165    eq-t    DCD    1949135205
        0x0081d368:    20617975    uya     DCD    543258997
        0x0081d36c:    20656c62    ble     DCD    543517794
        0x0081d370:    646e6573    send    DCD    1684956531
        0x0081d374:    20626320     cb     DCD    543318816
        0x0081d378:    6e657665    even    DCD    1852143205
        0x0081d37c:    61662074    t fa    DCD    1634082932
        0x0081d380:    64656c69    iled    DCD    1684368489
        0x0081d384:    0000002e    ....    DCD    46
        0x0081d388:    205d455b    [E]     DCD    542983515
        0x0081d38c:    41595554    TUYA    DCD    1096373588
        0x0081d390:    454c425f    _BLE    DCD    1162625631
        0x0081d394:    7574203a    : tu    DCD    1970544698
        0x0081d398:    625f6179    ya_b    DCD    1650418041
        0x0081d39c:    685f656c    le_h    DCD    1751082348
        0x0081d3a0:    6c646e61    andl    DCD    1818521185
        0x0081d3a4:    70645f65    e_dp    DCD    1885626213
        0x0081d3a8:    6575715f    _que    DCD    1702195551
        0x0081d3ac:    725f7972    ry_r    DCD    1918859634
        0x0081d3b0:    742d7165    eq-t    DCD    1949135205
        0x0081d3b4:    20617975    uya     DCD    543258997
        0x0081d3b8:    20656c62    ble     DCD    543517794
        0x0081d3bc:    646e6573    send    DCD    1684956531
        0x0081d3c0:    20626320     cb     DCD    543318816
        0x0081d3c4:    6e657665    even    DCD    1852143205
        0x0081d3c8:    61662074    t fa    DCD    1634082932
        0x0081d3cc:    64656c69    iled    DCD    1684368489
        0x0081d3d0:    0000002e    ....    DCD    46
        0x0081d3d4:    205d455b    [E]     DCD    542983515
        0x0081d3d8:    41595554    TUYA    DCD    1096373588
        0x0081d3dc:    454c425f    _BLE    DCD    1162625631
        0x0081d3e0:    7574203a    : tu    DCD    1970544698
        0x0081d3e4:    625f6179    ya_b    DCD    1650418041
        0x0081d3e8:    685f656c    le_h    DCD    1751082348
        0x0081d3ec:    6c646e61    andl    DCD    1818521185
        0x0081d3f0:    70645f65    e_dp    DCD    1885626213
        0x0081d3f4:    7461645f    _dat    DCD    1952539743
        0x0081d3f8:    65725f61    a_re    DCD    1701994337
        0x0081d3fc:    74726f70    port    DCD    1953656688
        0x0081d400:    7365725f    _res    DCD    1936028255
        0x0081d404:    7975742d    -tuy    DCD    2037740589
        0x0081d408:    6c622061    a bl    DCD    1818370145
        0x0081d40c:    65732065    e se    DCD    1702043749
        0x0081d410:    6320646e    nd c    DCD    1663067246
        0x0081d414:    76652062    b ev    DCD    1986338914
        0x0081d418:    20746e65    ent     DCD    544501349
        0x0081d41c:    6c696166    fail    DCD    1818845542
        0x0081d420:    002e6465    ed..    DCD    3040357
        0x0081d424:    205d455b    [E]     DCD    542983515
        0x0081d428:    41595554    TUYA    DCD    1096373588
        0x0081d42c:    454c425f    _BLE    DCD    1162625631
        0x0081d430:    7574203a    : tu    DCD    1970544698
        0x0081d434:    625f6179    ya_b    DCD    1650418041
        0x0081d438:    685f656c    le_h    DCD    1751082348
        0x0081d43c:    6c646e61    andl    DCD    1818521185
        0x0081d440:    70645f65    e_dp    DCD    1885626213
        0x0081d444:    7461645f    _dat    DCD    1952539743
        0x0081d448:    69775f61    a_wi    DCD    1769430881
        0x0081d44c:    665f6874    th_f    DCD    1717528692
        0x0081d450:    5f67616c    lag_    DCD    1600610668
        0x0081d454:    5f646e61    and_    DCD    1600417377
        0x0081d458:    656d6974    time    DCD    1701669236
        0x0081d45c:    7065725f    _rep    DCD    1885696607
        0x0081d460:    5f74726f    ort_    DCD    1601466991
        0x0081d464:    2d736572    res-    DCD    762537330
        0x0081d468:    61797574    tuya    DCD    1635349876
        0x0081d46c:    656c6220     ble    DCD    1701601824
        0x0081d470:    6e657320     sen    DCD    1852142368
        0x0081d474:    62632064    d cb    DCD    1650663524
        0x0081d478:    65766520     eve    DCD    1702257952
        0x0081d47c:    6620746e    nt f    DCD    1713402990
        0x0081d480:    656c6961    aile    DCD    1701603681
        0x0081d484:    00002e64    d...    DCD    11876
        0x0081d488:    205d455b    [E]     DCD    542983515
        0x0081d48c:    41595554    TUYA    DCD    1096373588
        0x0081d490:    454c425f    _BLE    DCD    1162625631
        0x0081d494:    7574203a    : tu    DCD    1970544698
        0x0081d498:    625f6179    ya_b    DCD    1650418041
        0x0081d49c:    685f656c    le_h    DCD    1751082348
        0x0081d4a0:    6c646e61    andl    DCD    1818521185
        0x0081d4a4:    70645f65    e_dp    DCD    1885626213
        0x0081d4a8:    7461645f    _dat    DCD    1952539743
        0x0081d4ac:    69775f61    a_wi    DCD    1769430881
        0x0081d4b0:    665f6874    th_f    DCD    1717528692
        0x0081d4b4:    5f67616c    lag_    DCD    1600610668
        0x0081d4b8:    6f706572    repo    DCD    1869636978
        0x0081d4bc:    725f7472    rt_r    DCD    1918858354
        0x0081d4c0:    742d7365    es-t    DCD    1949135717
        0x0081d4c4:    20617975    uya     DCD    543258997
        0x0081d4c8:    20656c62    ble     DCD    543517794
        0x0081d4cc:    646e6573    send    DCD    1684956531
        0x0081d4d0:    20626320     cb     DCD    543318816
        0x0081d4d4:    6e657665    even    DCD    1852143205
        0x0081d4d8:    61662074    t fa    DCD    1634082932
        0x0081d4dc:    64656c69    iled    DCD    1684368489
        0x0081d4e0:    0000002e    ....    DCD    46
        0x0081d4e4:    205d455b    [E]     DCD    542983515
        0x0081d4e8:    41595554    TUYA    DCD    1096373588
        0x0081d4ec:    454c425f    _BLE    DCD    1162625631
        0x0081d4f0:    7574203a    : tu    DCD    1970544698
        0x0081d4f4:    625f6179    ya_b    DCD    1650418041
        0x0081d4f8:    685f656c    le_h    DCD    1751082348
        0x0081d4fc:    6c646e61    andl    DCD    1818521185
        0x0081d500:    70645f65    e_dp    DCD    1885626213
        0x0081d504:    7461645f    _dat    DCD    1952539743
        0x0081d508:    69775f61    a_wi    DCD    1769430881
        0x0081d50c:    665f6874    th_f    DCD    1717528692
        0x0081d510:    5f67616c    lag_    DCD    1600610668
        0x0081d514:    5f646e61    and_    DCD    1600417377
        0x0081d518:    656d6974    time    DCD    1701669236
        0x0081d51c:    7065725f    _rep    DCD    1885696607
        0x0081d520:    5f74726f    ort_    DCD    1601466991
        0x0081d524:    2d736572    res-    DCD    762537330
        0x0081d528:    766e6920     inv    DCD    1986947360
        0x0081d52c:    64696c61    alid    DCD    1684630625
        0x0081d530:    74616420     dat    DCD    1952539680
        0x0081d534:    656c2061    a le    DCD    1701584993
        0x0081d538:    6572206e    n re    DCD    1701978222
        0x0081d53c:    76696563    ceiv    DCD    1986618723
        0x0081d540:    002e6465    ed..    DCD    3040357
        0x0081d544:    205d455b    [E]     DCD    542983515
        0x0081d548:    41595554    TUYA    DCD    1096373588
        0x0081d54c:    454c425f    _BLE    DCD    1162625631
        0x0081d550:    7574203a    : tu    DCD    1970544698
        0x0081d554:    625f6179    ya_b    DCD    1650418041
        0x0081d558:    685f656c    le_h    DCD    1751082348
        0x0081d55c:    6c646e61    andl    DCD    1818521185
        0x0081d560:    70645f65    e_dp    DCD    1885626213
        0x0081d564:    7461645f    _dat    DCD    1952539743
        0x0081d568:    69775f61    a_wi    DCD    1769430881
        0x0081d56c:    665f6874    th_f    DCD    1717528692
        0x0081d570:    5f67616c    lag_    DCD    1600610668
        0x0081d574:    6f706572    repo    DCD    1869636978
        0x0081d578:    725f7472    rt_r    DCD    1918858354
        0x0081d57c:    202d7365    es-     DCD    539849573
        0x0081d580:    61766e69    inva    DCD    1635151465
        0x0081d584:    2064696c    lid     DCD    543451500
        0x0081d588:    61746164    data    DCD    1635017060
        0x0081d58c:    6e656c20     len    DCD    1852140576
        0x0081d590:    63657220     rec    DCD    1667592736
        0x0081d594:    65766965    eive    DCD    1702259045
        0x0081d598:    00002e64    d...    DCD    11876
        0x0081d59c:    205d455b    [E]     DCD    542983515
        0x0081d5a0:    41595554    TUYA    DCD    1096373588
        0x0081d5a4:    454c425f    _BLE    DCD    1162625631
        0x0081d5a8:    6854203a    : Th    DCD    1750343738
        0x0081d5ac:    656c2065    e le    DCD    1701584997
        0x0081d5b0:    6874676e    ngth    DCD    1752459118
        0x0081d5b4:    20666f20     of     DCD    543584032
        0x0081d5b8:    20656874    the     DCD    543516788
        0x0081d5bc:    646e6573    send    DCD    1684956531
        0x0081d5c0:    206f7420     to     DCD    544175136
        0x0081d5c4:    20656c62    ble     DCD    543517794
        0x0081d5c8:    65637865    exce    DCD    1701017701
        0x0081d5cc:    20736465    eds     DCD    544433253
        0x0081d5d0:    20656874    the     DCD    543516788
        0x0081d5d4:    6978616d    maxi    DCD    1769496941
        0x0081d5d8:    206d756d    mum     DCD    544044397
        0x0081d5dc:    676e656c    leng    DCD    1735288172
        0x0081d5e0:    002e6874    th..    DCD    3041396
        0x0081d5e4:    205d455b    [E]     DCD    542983515
        0x0081d5e8:    41595554    TUYA    DCD    1096373588
        0x0081d5ec:    454c425f    _BLE    DCD    1162625631
        0x0081d5f0:    7574203a    : tu    DCD    1970544698
        0x0081d5f4:    62206179    ya b    DCD    1646289273
        0x0081d5f8:    6320656c    le c    DCD    1663067500
        0x0081d5fc:    446d6d6f    ommD    DCD    1148022127
        0x0081d600:    5f617461    ata_    DCD    1600222305
        0x0081d604:    646e6573    send    DCD    1684956531
        0x0081d608:    69616620     fai    DCD    1767990816
        0x0081d60c:    2c64656c    led,    DCD    744777068
        0x0081d610:    61636562    beca    DCD    1633903970
        0x0081d614:    20657375    use     DCD    543519605
        0x0081d618:    20656c62    ble     DCD    543517794
        0x0081d61c:    20746f6e    not     DCD    544501614
        0x0081d620:    63206e69    in c    DCD    1663069801
        0x0081d624:    656e6e6f    onne    DCD    1701736047
        0x0081d628:    73207463    ct s    DCD    1931506787
        0x0081d62c:    75746174    tatu    DCD    1970561396
        0x0081d630:    00002e73    s...    DCD    11891
        0x0081d634:    205d495b    [I]     DCD    542984539
        0x0081d638:    41595554    TUYA    DCD    1096373588
        0x0081d63c:    454c425f    _BLE    DCD    1162625631
        0x0081d640:    6c62203a    : bl    DCD    1818370106
        0x0081d644:    6f635f65    e_co    DCD    1868783461
        0x0081d648:    61446d6d    mmDa    DCD    1631874413
        0x0081d64c:    735f6174    ta_s    DCD    1935630708
        0x0081d650:    20646e65    end     DCD    543452773
        0x0081d654:    206e656c    len     DCD    544105836
        0x0081d658:    6425203d    = %d    DCD    1680154685
        0x0081d65c:    70202c20     , p    DCD    1881156640
        0x0081d660:    616b6361    acka    DCD    1634427745
        0x0081d664:    6e5f6567    ge_n    DCD    1851745639
        0x0081d668:    65626d75    umbe    DCD    1700949365
        0x0081d66c:    203d2072    r =     DCD    540876914
        0x0081d670:    2c206425    %d ,    DCD    740320293
        0x0081d674:    6f727020     pro    DCD    1869770784
        0x0081d678:    6f636f74    toco    DCD    1868787572
        0x0081d67c:    6576206c    l ve    DCD    1702240364
        0x0081d680:    6f697372    rsio    DCD    1869181810
        0x0081d684:    203a206e    n :     DCD    540680302
        0x0081d688:    30257830    0x%0    DCD    807761968
        0x0081d68c:    2c207832    2x ,    DCD    740325426
        0x0081d690:    72726520     err    DCD    1920099616
        0x0081d694:    6320726f    or c    DCD    1663070831
        0x0081d698:    2065646f    ode     DCD    543515759
        0x0081d69c:    7830203a    : 0x    DCD    2016419898
        0x0081d6a0:    78323025    %02x    DCD    2016555045
        0x0081d6a4:    00000000    ....    DCD    0
    .conststring
        0x0081d6a8:    205d455b    [E]     DCD    542983515
        0x0081d6ac:    41595554    TUYA    DCD    1096373588
        0x0081d6b0:    454c425f    _BLE    DCD    1162625631
        0x0081d6b4:    7574203a    : tu    DCD    1970544698
        0x0081d6b8:    625f6179    ya_b    DCD    1650418041
        0x0081d6bc:    685f656c    le_h    DCD    1751082348
        0x0081d6c0:    6c646e61    andl    DCD    1818521185
        0x0081d6c4:    61665f65    e_fa    DCD    1634099045
        0x0081d6c8:    726f7463    ctor    DCD    1919906915
        0x0081d6cc:    65725f79    y_re    DCD    1701994361
        0x0081d6d0:    5f746573    set_    DCD    1601463667
        0x0081d6d4:    2d747665    evt-    DCD    762607205
        0x0081d6d8:    61797574    tuya    DCD    1635349876
        0x0081d6dc:    656c6220     ble    DCD    1701601824
        0x0081d6e0:    6e657320     sen    DCD    1852142368
        0x0081d6e4:    62632064    d cb    DCD    1650663524
        0x0081d6e8:    65766520     eve    DCD    1702257952
        0x0081d6ec:    2820746e    nt (    DCD    673215598
        0x0081d6f0:    6e6e6f63    conn    DCD    1852731235
        0x0081d6f4:    20746365    ect     DCD    544498533
        0x0081d6f8:    74617473    stat    DCD    1952543859
        0x0081d6fc:    75207375    us u    DCD    1965060981
        0x0081d700:    74616470    pdat    DCD    1952539760
        0x0081d704:    66202965    e) f    DCD    1713383781
        0x0081d708:    656c6961    aile    DCD    1701603681
        0x0081d70c:    00002e64    d...    DCD    11876
        0x0081d710:    205d455b    [E]     DCD    542983515
        0x0081d714:    41595554    TUYA    DCD    1096373588
        0x0081d718:    454c425f    _BLE    DCD    1162625631
        0x0081d71c:    7574203a    : tu    DCD    1970544698
        0x0081d720:    625f6179    ya_b    DCD    1650418041
        0x0081d724:    685f656c    le_h    DCD    1751082348
        0x0081d728:    6c646e61    andl    DCD    1818521185
        0x0081d72c:    70645f65    e_dp    DCD    1885626213
        0x0081d730:    7461645f    _dat    DCD    1952539743
        0x0081d734:    69775f61    a_wi    DCD    1769430881
        0x0081d738:    665f6874    th_f    DCD    1717528692
        0x0081d73c:    5f67616c    lag_    DCD    1600610668
        0x0081d740:    5f646e61    and_    DCD    1600417377
        0x0081d744:    656d6974    time    DCD    1701669236
        0x0081d748:    7065725f    _rep    DCD    1885696607
        0x0081d74c:    6574726f    orte    DCD    1702130287
        0x0081d750:    76655f64    d_ev    DCD    1986355044
        0x0081d754:    616d2074    t ma    DCD    1634541684
        0x0081d758:    636f6c6c    lloc    DCD    1668246636
        0x0081d75c:    69616620     fai    DCD    1767990816
        0x0081d760:    2e64656c    led.    DCD    778331500
        0x0081d764:    00000000    ....    DCD    0
        0x0081d768:    205d455b    [E]     DCD    542983515
        0x0081d76c:    41595554    TUYA    DCD    1096373588
        0x0081d770:    454c425f    _BLE    DCD    1162625631
        0x0081d774:    7574203a    : tu    DCD    1970544698
        0x0081d778:    625f6179    ya_b    DCD    1650418041
        0x0081d77c:    685f656c    le_h    DCD    1751082348
        0x0081d780:    6c646e61    andl    DCD    1818521185
        0x0081d784:    70645f65    e_dp    DCD    1885626213
        0x0081d788:    7461645f    _dat    DCD    1952539743
        0x0081d78c:    69775f61    a_wi    DCD    1769430881
        0x0081d790:    745f6874    th_t    DCD    1952409716
        0x0081d794:    5f656d69    ime_    DCD    1600482665
        0x0081d798:    6f706572    repo    DCD    1869636978
        0x0081d79c:    64657472    rted    DCD    1684370546
        0x0081d7a0:    7476655f    _evt    DCD    1953916255
        0x0081d7a4:    6c616d20     mal    DCD    1818324256
        0x0081d7a8:    20636f6c    loc     DCD    543387500
        0x0081d7ac:    6c696166    fail    DCD    1818845542
        0x0081d7b0:    002e6465    ed..    DCD    3040357
        0x0081d7b4:    205d455b    [E]     DCD    542983515
        0x0081d7b8:    41595554    TUYA    DCD    1096373588
        0x0081d7bc:    454c425f    _BLE    DCD    1162625631
        0x0081d7c0:    7574203a    : tu    DCD    1970544698
        0x0081d7c4:    625f6179    ya_b    DCD    1650418041
        0x0081d7c8:    685f656c    le_h    DCD    1751082348
        0x0081d7cc:    6c646e61    andl    DCD    1818521185
        0x0081d7d0:    70645f65    e_dp    DCD    1885626213
        0x0081d7d4:    7461645f    _dat    DCD    1952539743
        0x0081d7d8:    69775f61    a_wi    DCD    1769430881
        0x0081d7dc:    665f6874    th_f    DCD    1717528692
        0x0081d7e0:    5f67616c    lag_    DCD    1600610668
        0x0081d7e4:    5f646e61    and_    DCD    1600417377
        0x0081d7e8:    656d6974    time    DCD    1701669236
        0x0081d7ec:    7274735f    _str    DCD    1920234335
        0x0081d7f0:    5f676e69    ing_    DCD    1600613993
        0x0081d7f4:    6f706572    repo    DCD    1869636978
        0x0081d7f8:    64657472    rted    DCD    1684370546
        0x0081d7fc:    7476655f    _evt    DCD    1953916255
        0x0081d800:    6c616d20     mal    DCD    1818324256
        0x0081d804:    20636f6c    loc     DCD    543387500
        0x0081d808:    6c696166    fail    DCD    1818845542
        0x0081d80c:    002e6465    ed..    DCD    3040357
        0x0081d810:    205d455b    [E]     DCD    542983515
        0x0081d814:    41595554    TUYA    DCD    1096373588
        0x0081d818:    454c425f    _BLE    DCD    1162625631
        0x0081d81c:    7574203a    : tu    DCD    1970544698
        0x0081d820:    625f6179    ya_b    DCD    1650418041
        0x0081d824:    685f656c    le_h    DCD    1751082348
        0x0081d828:    6c646e61    andl    DCD    1818521185
        0x0081d82c:    70645f65    e_dp    DCD    1885626213
        0x0081d830:    7461645f    _dat    DCD    1952539743
        0x0081d834:    69775f61    a_wi    DCD    1769430881
        0x0081d838:    745f6874    th_t    DCD    1952409716
        0x0081d83c:    5f656d69    ime_    DCD    1600482665
        0x0081d840:    69727473    stri    DCD    1769108595
        0x0081d844:    725f676e    ng_r    DCD    1918855022
        0x0081d848:    726f7065    epor    DCD    1919905893
        0x0081d84c:    5f646574    ted_    DCD    1600415092
        0x0081d850:    20747665    evt     DCD    544503397
        0x0081d854:    6c6c616d    mall    DCD    1819042157
        0x0081d858:    6620636f    oc f    DCD    1713398639
        0x0081d85c:    656c6961    aile    DCD    1701603681
        0x0081d860:    00002e64    d...    DCD    11876
        0x0081d864:    205d455b    [E]     DCD    542983515
        0x0081d868:    41595554    TUYA    DCD    1096373588
        0x0081d86c:    454c425f    _BLE    DCD    1162625631
        0x0081d870:    6175203a    : ua    DCD    1635065914
        0x0081d874:    72207472    rt r    DCD    1914729586
        0x0081d878:    69656365    ecei    DCD    1768252261
        0x0081d87c:    64206576    ve d    DCD    1679844726
        0x0081d880:    20617461    ata     DCD    543257697
        0x0081d884:    63656863    chec    DCD    1667590243
        0x0081d888:    75735f6b    k_su    DCD    1970495339
        0x0081d88c:    7265206d    m er    DCD    1919230061
        0x0081d890:    20726f72    ror     DCD    544370546
        0x0081d894:    6572202c    , re    DCD    1701978156
        0x0081d898:    76696563    ceiv    DCD    1986618723
        0x0081d89c:    75732065    e su    DCD    1970479205
        0x0081d8a0:    203d206d    m =     DCD    540876909
        0x0081d8a4:    30257830    0x%0    DCD    807761968
        0x0081d8a8:    3b207832    2x ;    DCD    991983666
        0x0081d8ac:    6c616320     cal    DCD    1818321696
        0x0081d8b0:    6d757320     sum    DCD    1836413728
        0x0081d8b4:    30203d20     = 0    DCD    807419168
        0x0081d8b8:    32302578    x%02    DCD    842016120
        0x0081d8bc:    00000078    x...    DCD    120
    .conststring
        0x0081d8c0:    205d455b    [E]     DCD    542983515
        0x0081d8c4:    41595554    TUYA    DCD    1096373588
        0x0081d8c8:    454c425f    _BLE    DCD    1162625631
        0x0081d8cc:    5541203a    : AU    DCD    1430331450
        0x0081d8d0:    4d435f43    C_CM    DCD    1296260931
        0x0081d8d4:    52575f44    D_WR    DCD    1381457732
        0x0081d8d8:    5f455449    ITE_    DCD    1598379081
        0x0081d8dc:    48545541    AUTH    DCD    1213486401
        0x0081d8e0:    464e495f    _INF    DCD    1179535711
        0x0081d8e4:    7265204f    O er    DCD    1919230031
        0x0081d8e8:    20726f72    ror     DCD    544370546
        0x0081d8ec:    6e69732c    ,sin    DCD    1852404524
        0x0081d8f0:    49206563    ce I    DCD    1226859875
        0x0081d8f4:    6c61766e    nval    DCD    1818326638
        0x0081d8f8:    6c206469    id l    DCD    1814062185
        0x0081d8fc:    74676e65    engt    DCD    1952935525
        0x0081d900:    00002168    h!..    DCD    8552
        0x0081d904:    205d455b    [E]     DCD    542983515
        0x0081d908:    41595554    TUYA    DCD    1096373588
        0x0081d90c:    454c425f    _BLE    DCD    1162625631
        0x0081d910:    6854203a    : Th    DCD    1750343738
        0x0081d914:    75612065    e au    DCD    1969299557
        0x0081d918:    726f6874    thor    DCD    1919903860
        0x0081d91c:    74617a69    izat    DCD    1952545385
        0x0081d920:    206e6f69    ion     DCD    544108393
        0x0081d924:    74736e69    inst    DCD    1953721961
        0x0081d928:    74637572    ruct    DCD    1952675186
        0x0081d92c:    736e6f69    ions    DCD    1936617321
        0x0081d930:    65726120     are    DCD    1701994784
        0x0081d934:    746f6e20     not    DCD    1953459744
        0x0081d938:    70757320     sup    DCD    1886745376
        0x0081d93c:    74726f70    port    DCD    1953656688
        0x0081d940:    69206465    ed i    DCD    1763730533
        0x0081d944:    6f6e206e    n no    DCD    1869488238
        0x0081d948:    65732d6e    n-se    DCD    1702047086
        0x0081d94c:    6c616972    rial    DCD    1818323314
        0x0081d950:    61686320     cha    DCD    1634231072
        0x0081d954:    6c656e6e    nnel    DCD    1818586734
        0x0081d958:    00002173    s!..    DCD    8563
        0x0081d95c:    205d455b    [E]     DCD    542983515
        0x0081d960:    41595554    TUYA    DCD    1096373588
        0x0081d964:    454c425f    _BLE    DCD    1162625631
        0x0081d968:    5541203a    : AU    DCD    1430331450
        0x0081d96c:    4d435f43    C_CM    DCD    1296260931
        0x0081d970:    52575f44    D_WR    DCD    1381457732
        0x0081d974:    5f455449    ITE_    DCD    1598379081
        0x0081d978:    48545541    AUTH    DCD    1213486401
        0x0081d97c:    464e495f    _INF    DCD    1179535711
        0x0081d980:    7265204f    O er    DCD    1919230031
        0x0081d984:    20726f72    ror     DCD    544370546
        0x0081d988:    6e69732c    ,sin    DCD    1852404524
        0x0081d98c:    49206563    ce I    DCD    1226859875
        0x0081d990:    6c61766e    nval    DCD    1818326638
        0x0081d994:    70206469    id p    DCD    1881171049
        0x0081d998:    73617261    aras    DCD    1935766113
        0x0081d99c:    00000000    ....    DCD    0
    locale$$data
        0x0081d9a0:    00000110    ....    DCD    272
    __lcctype_c_name
        0x0081d9a4:    00000043    C...    DCD    67
        0x0081d9a8:    fffffff8    ....    DCD    4294967288
    __lcctype_c_start
        0x0081d9ac:    00          .       DCB    0
    __ctype
        0x0081d9ad:    404040      @@@     DCB    64,64,64
        0x0081d9b0:    40404040    @@@@    DCD    1077952576
        0x0081d9b4:    41414040    @@AA    DCD    1094795328
        0x0081d9b8:    40414141    AAA@    DCD    1078018369
        0x0081d9bc:    40404040    @@@@    DCD    1077952576
        0x0081d9c0:    40404040    @@@@    DCD    1077952576
        0x0081d9c4:    40404040    @@@@    DCD    1077952576
        0x0081d9c8:    40404040    @@@@    DCD    1077952576
        0x0081d9cc:    02020540    @...    DCD    33686848
        0x0081d9d0:    02020202    ....    DCD    33686018
        0x0081d9d4:    02020202    ....    DCD    33686018
        0x0081d9d8:    02020202    ....    DCD    33686018
        0x0081d9dc:    20202002    .       DCD    538976258
        0x0081d9e0:    20202020            DCD    538976288
        0x0081d9e4:    02202020       .    DCD    35659808
        0x0081d9e8:    02020202    ....    DCD    33686018
        0x0081d9ec:    90900202    ....    DCD    2425356802
        0x0081d9f0:    90909090    ....    DCD    2425393296
        0x0081d9f4:    10101010    ....    DCD    269488144
        0x0081d9f8:    10101010    ....    DCD    269488144
        0x0081d9fc:    10101010    ....    DCD    269488144
        0x0081da00:    10101010    ....    DCD    269488144
        0x0081da04:    10101010    ....    DCD    269488144
        0x0081da08:    02020202    ....    DCD    33686018
        0x0081da0c:    88880202    ....    DCD    2290614786
        0x0081da10:    88888888    ....    DCD    2290649224
        0x0081da14:    08080808    ....    DCD    134744072
        0x0081da18:    08080808    ....    DCD    134744072
        0x0081da1c:    08080808    ....    DCD    134744072
        0x0081da20:    08080808    ....    DCD    134744072
        0x0081da24:    08080808    ....    DCD    134744072
        0x0081da28:    02020202    ....    DCD    33686018
        0x0081da2c:    00000040    @...    DCD    64
        0x0081da30:    00000000    ....    DCD    0
        0x0081da34:    00000000    ....    DCD    0
        0x0081da38:    00000000    ....    DCD    0
        0x0081da3c:    00000000    ....    DCD    0
        0x0081da40:    00000000    ....    DCD    0
        0x0081da44:    00000000    ....    DCD    0
        0x0081da48:    00000000    ....    DCD    0
        0x0081da4c:    00000000    ....    DCD    0
        0x0081da50:    00000000    ....    DCD    0
        0x0081da54:    00000000    ....    DCD    0
        0x0081da58:    00000000    ....    DCD    0
        0x0081da5c:    00000000    ....    DCD    0
        0x0081da60:    00000000    ....    DCD    0
        0x0081da64:    00000000    ....    DCD    0
        0x0081da68:    00000000    ....    DCD    0
        0x0081da6c:    00000000    ....    DCD    0
        0x0081da70:    00000000    ....    DCD    0
        0x0081da74:    00000000    ....    DCD    0
        0x0081da78:    00000000    ....    DCD    0
        0x0081da7c:    00000000    ....    DCD    0
        0x0081da80:    00000000    ....    DCD    0
        0x0081da84:    00000000    ....    DCD    0
        0x0081da88:    00000000    ....    DCD    0
        0x0081da8c:    00000000    ....    DCD    0
        0x0081da90:    00000000    ....    DCD    0
        0x0081da94:    00000000    ....    DCD    0
        0x0081da98:    00000000    ....    DCD    0
        0x0081da9c:    00000000    ....    DCD    0
        0x0081daa0:    00000000    ....    DCD    0
        0x0081daa4:    00000000    ....    DCD    0
        0x0081daa8:    00000000    ....    DCD    0
        0x0081daac:    00000000    ....    DCD    0
    __lcctype_c_end

** Section #4 'RAM_VECTOR_TABLE' (SHT_PROGBITS) [SHF_ALLOC]
    Size   : 244 bytes (alignment 4)
    Address: 0x00200000

    0x200000:   00 38 20 00 01 e4 80 00 05 e7 80 00 05 e7 80 00    .8 .............
    0x200010:   05 e7 80 00 05 e7 80 00 05 e7 80 00 00 00 00 00    ................
    0x200020:   00 00 00 00 00 00 00 00 00 00 00 00 05 e7 80 00    ................
    0x200030:   05 e7 80 00 00 00 00 00 05 e7 80 00 05 e7 80 00    ................
    0x200040:   09 f6 80 00 05 e7 80 00 05 e7 80 00 05 e7 80 00    ................
    0x200050:   05 e7 80 00 05 e7 80 00 05 e7 80 00 05 e7 80 00    ................
    0x200060:   05 e7 80 00 05 e7 80 00 05 e7 80 00 05 e7 80 00    ................
    0x200070:   b1 7e 20 00 05 e7 80 00 05 e7 80 00 05 e7 80 00    .~ .............
    0x200080:   05 e7 80 00 05 e7 80 00 05 e7 80 00 05 e7 80 00    ................
    0x200090:   05 e7 80 00 05 e7 80 00 05 e7 80 00 05 e7 80 00    ................
    0x2000a0:   05 e7 80 00 05 e7 80 00 01 7c 20 00 4d 7c 20 00    .........| .M| .
    0x2000b0:   05 e7 80 00 99 7c 20 00 dd 7c 20 00 05 e7 80 00    .....| ..| .....
    0x2000c0:   05 e7 80 00 05 e7 80 00 05 e7 80 00 05 e7 80 00    ................
    0x2000d0:   05 e7 80 00 05 e7 80 00 05 e7 80 00 05 e7 80 00    ................
    0x2000e0:   05 e7 80 00 05 e7 80 00 05 e7 80 00 05 e7 80 00    ................
    0x2000f0:   05 e7 80 00                                        ....

    __Vectors_End

** Section #5 'RAM_DATA_ON' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 1212 bytes (alignment 4)
    Address: 0x00207c00

    $t
    .ram.dataon.data
    GPIO_Group3_Handler
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c
;;;691    DATA_RAM_FUNCTION void GPIO_Group3_Handler(void)
;;;691    {
;;;691        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
        0x00207c00:    4847        GH      LDR      r0,[pc,#284] ; [0x207d20] = 0x40001000
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (690)
        0x00207c02:    b510        ..      PUSH     {r4,lr}
        0x00207c04:    6c04        .l      LDR      r4,[r0,#0x40]
        0x00207c06:    0720         .      LSLS     r0,r4,#28
        0x00207c08:    d501        ..      BPL      0x207c0e ; GPIO_Group3_Handler + 14
;;;691        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;692    
;;;693        //Check exact IRQ function
;;;694        if (GPIOIrqStatus & BIT3)
;;;695        {
;;;696            GPIO3_Handler();
        0x00207c0a:    f206f57b    ..{.    BL       ADC_Handler ; 0x80e704
;;;697        }
;;;698        if (GPIOIrqStatus & BIT7)
        0x00207c0e:    0620         .      LSLS     r0,r4,#24
        0x00207c10:    d501        ..      BPL      0x207c16 ; GPIO_Group3_Handler + 22
;;;699        {
;;;700            GPIO7_Handler();
        0x00207c12:    f206f577    ..w.    BL       ADC_Handler ; 0x80e704
;;;701        }
;;;702        if (GPIOIrqStatus & BIT11)
        0x00207c16:    0520         .      LSLS     r0,r4,#20
        0x00207c18:    d501        ..      BPL      0x207c1e ; GPIO_Group3_Handler + 30
;;;703        {
;;;704            GPIO11_Handler();
        0x00207c1a:    f206f573    ..s.    BL       ADC_Handler ; 0x80e704
;;;705        }
;;;706        if (GPIOIrqStatus & BIT15)
        0x00207c1e:    0420         .      LSLS     r0,r4,#16
        0x00207c20:    d501        ..      BPL      0x207c26 ; GPIO_Group3_Handler + 38
;;;707        {
;;;708            GPIO15_Handler();
        0x00207c22:    f206f56f    ..o.    BL       ADC_Handler ; 0x80e704
;;;709        }
;;;710        if (GPIOIrqStatus & BIT19)
        0x00207c26:    0320         .      LSLS     r0,r4,#12
        0x00207c28:    d501        ..      BPL      0x207c2e ; GPIO_Group3_Handler + 46
;;;711        {
;;;712            GPIO19_Handler();
        0x00207c2a:    f206f56b    ..k.    BL       ADC_Handler ; 0x80e704
;;;713        }
;;;714        if (GPIOIrqStatus & BIT23)
        0x00207c2e:    0220         .      LSLS     r0,r4,#8
        0x00207c30:    d501        ..      BPL      0x207c36 ; GPIO_Group3_Handler + 54
;;;715        {
;;;716            GPIO23_Handler();
        0x00207c32:    f206f567    ..g.    BL       ADC_Handler ; 0x80e704
;;;717        }
;;;718        if (GPIOIrqStatus & BIT27)
        0x00207c36:    0120         .      LSLS     r0,r4,#4
        0x00207c38:    d501        ..      BPL      0x207c3e ; GPIO_Group3_Handler + 62
;;;719        {
;;;720            GPIO27_Handler();
        0x00207c3a:    f206f563    ..c.    BL       ADC_Handler ; 0x80e704
;;;721        }
;;;722        if (GPIOIrqStatus & BIT31)
        0x00207c3e:    2c00        .,      CMP      r4,#0
        0x00207c40:    da03        ..      BGE      0x207c4a ; GPIO_Group3_Handler + 74
;;;723        {
;;;724            GPIO31_Handler();
        0x00207c42:    e8bd4010    ...@    POP      {r4,lr}
        0x00207c46:    f206b55d    ..].    B.W      ADC_Handler ; 0x80e704
;;;725        }
;;;726    }
        0x00207c4a:    bd10        ..      POP      {r4,pc}
    GPIO_Group2_Handler
;;;727    /**
;;;728     * @brief  GPIO Group2 Handler
;;;729     * @param  none
;;;730     * @return none
;;;731      */
;;;732    DATA_RAM_FUNCTION void GPIO_Group2_Handler(void)
;;;733    {
;;;734        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
        0x00207c4c:    4834        4H      LDR      r0,[pc,#208] ; [0x207d20] = 0x40001000
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (733)
        0x00207c4e:    b510        ..      PUSH     {r4,lr}
        0x00207c50:    6c04        .l      LDR      r4,[r0,#0x40]
        0x00207c52:    0760        `.      LSLS     r0,r4,#29
        0x00207c54:    d501        ..      BPL      0x207c5a ; GPIO_Group2_Handler + 14
;;;734        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;735    
;;;736        //Check exact IRQ function
;;;737        if (GPIOIrqStatus & BIT2)
;;;738        {
;;;739            GPIO2_Handler();
        0x00207c56:    f206f555    ..U.    BL       ADC_Handler ; 0x80e704
;;;740        }
;;;741        if (GPIOIrqStatus & BIT6)
        0x00207c5a:    0660        `.      LSLS     r0,r4,#25
        0x00207c5c:    d501        ..      BPL      0x207c62 ; GPIO_Group2_Handler + 22
;;;742        {
;;;743            GPIO6_Handler();
        0x00207c5e:    f206f551    ..Q.    BL       ADC_Handler ; 0x80e704
;;;744        }
;;;745        if (GPIOIrqStatus & BIT10)
        0x00207c62:    0560        `.      LSLS     r0,r4,#21
        0x00207c64:    d501        ..      BPL      0x207c6a ; GPIO_Group2_Handler + 30
;;;746        {
;;;747            GPIO10_Handler();
        0x00207c66:    f206f54d    ..M.    BL       ADC_Handler ; 0x80e704
;;;748        }
;;;749        if (GPIOIrqStatus & BIT14)
        0x00207c6a:    0460        `.      LSLS     r0,r4,#17
        0x00207c6c:    d501        ..      BPL      0x207c72 ; GPIO_Group2_Handler + 38
;;;750        {
;;;751            GPIO14_Handler();
        0x00207c6e:    f206f549    ..I.    BL       ADC_Handler ; 0x80e704
;;;752        }
;;;753        if (GPIOIrqStatus & BIT18)
        0x00207c72:    0360        `.      LSLS     r0,r4,#13
        0x00207c74:    d501        ..      BPL      0x207c7a ; GPIO_Group2_Handler + 46
;;;754        {
;;;755            GPIO18_Handler();
        0x00207c76:    f206f545    ..E.    BL       ADC_Handler ; 0x80e704
;;;756        }
;;;757        if (GPIOIrqStatus & BIT22)
        0x00207c7a:    0260        `.      LSLS     r0,r4,#9
        0x00207c7c:    d501        ..      BPL      0x207c82 ; GPIO_Group2_Handler + 54
;;;758        {
;;;759            GPIO22_Handler();
        0x00207c7e:    f206f541    ..A.    BL       ADC_Handler ; 0x80e704
;;;760        }
;;;761        if (GPIOIrqStatus & BIT26)
        0x00207c82:    0160        `.      LSLS     r0,r4,#5
        0x00207c84:    d501        ..      BPL      0x207c8a ; GPIO_Group2_Handler + 62
;;;762        {
;;;763            GPIO26_Handler();
        0x00207c86:    f206f53d    ..=.    BL       ADC_Handler ; 0x80e704
;;;764        }
;;;765        if (GPIOIrqStatus & BIT30)
        0x00207c8a:    0060        `.      LSLS     r0,r4,#1
        0x00207c8c:    d503        ..      BPL      0x207c96 ; GPIO_Group2_Handler + 74
;;;766        {
;;;767            GPIO30_Handler();
        0x00207c8e:    e8bd4010    ...@    POP      {r4,lr}
        0x00207c92:    f206b537    ..7.    B.W      ADC_Handler ; 0x80e704
;;;768        }
;;;769    }
        0x00207c96:    bd10        ..      POP      {r4,pc}
    GPIO_Group1_Handler
;;;770    /**
;;;771     * @brief  GPIO Group1 Handler
;;;772     * @param  none
;;;773     * @return none
;;;774      */
;;;775    DATA_RAM_FUNCTION void GPIO_Group1_Handler(void)
;;;776    {
;;;777        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
        0x00207c98:    4821        !H      LDR      r0,[pc,#132] ; [0x207d20] = 0x40001000
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (776)
        0x00207c9a:    b510        ..      PUSH     {r4,lr}
        0x00207c9c:    6c04        .l      LDR      r4,[r0,#0x40]
        0x00207c9e:    07a0        ..      LSLS     r0,r4,#30
        0x00207ca0:    d501        ..      BPL      0x207ca6 ; GPIO_Group1_Handler + 14
;;;777        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;778    
;;;779        //Check exact IRQ function
;;;780        if (GPIOIrqStatus & BIT1)
;;;781        {
;;;782            GPIO1_Handler();
        0x00207ca2:    f206f52f    ../.    BL       ADC_Handler ; 0x80e704
;;;783        }
;;;784        if (GPIOIrqStatus & BIT9)
        0x00207ca6:    05a0        ..      LSLS     r0,r4,#22
        0x00207ca8:    d501        ..      BPL      0x207cae ; GPIO_Group1_Handler + 22
;;;785        {
;;;786            GPIO9_Handler();
        0x00207caa:    f206f52b    ..+.    BL       ADC_Handler ; 0x80e704
;;;787        }
;;;788        if (GPIOIrqStatus & BIT13)
        0x00207cae:    04a0        ..      LSLS     r0,r4,#18
        0x00207cb0:    d501        ..      BPL      0x207cb6 ; GPIO_Group1_Handler + 30
;;;789        {
;;;790            GPIO13_Handler();
        0x00207cb2:    f206f527    ..'.    BL       ADC_Handler ; 0x80e704
;;;791        }
;;;792        if (GPIOIrqStatus & BIT17)
        0x00207cb6:    03a0        ..      LSLS     r0,r4,#14
        0x00207cb8:    d501        ..      BPL      0x207cbe ; GPIO_Group1_Handler + 38
;;;793        {
;;;794            GPIO17_Handler();
        0x00207cba:    f206f523    ..#.    BL       ADC_Handler ; 0x80e704
;;;795        }
;;;796        if (GPIOIrqStatus & BIT21)
        0x00207cbe:    02a0        ..      LSLS     r0,r4,#10
        0x00207cc0:    d501        ..      BPL      0x207cc6 ; GPIO_Group1_Handler + 46
;;;797        {
;;;798            GPIO21_Handler();
        0x00207cc2:    f206f51f    ....    BL       ADC_Handler ; 0x80e704
;;;799        }
;;;800        if (GPIOIrqStatus & BIT25)
        0x00207cc6:    01a0        ..      LSLS     r0,r4,#6
        0x00207cc8:    d501        ..      BPL      0x207cce ; GPIO_Group1_Handler + 54
;;;801        {
;;;802            GPIO25_Handler();
        0x00207cca:    f206f51b    ....    BL       ADC_Handler ; 0x80e704
;;;803        }
;;;804        if (GPIOIrqStatus & BIT29)
        0x00207cce:    00a0        ..      LSLS     r0,r4,#2
        0x00207cd0:    d503        ..      BPL      0x207cda ; GPIO_Group1_Handler + 66
;;;805        {
;;;806            GPIO29_Handler();
        0x00207cd2:    e8bd4010    ...@    POP      {r4,lr}
        0x00207cd6:    f206b515    ....    B.W      ADC_Handler ; 0x80e704
;;;807        }
;;;808    }
        0x00207cda:    bd10        ..      POP      {r4,pc}
    GPIO_Group0_Handler
;;;809    /**
;;;810     * @brief  GPIO Group0 Handler
;;;811     * @param  none
;;;812     * @return none
;;;813      */
;;;814    DATA_RAM_FUNCTION void GPIO_Group0_Handler(void)
;;;815    {
;;;816        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
        0x00207cdc:    4810        .H      LDR      r0,[pc,#64] ; [0x207d20] = 0x40001000
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (815)
        0x00207cde:    b510        ..      PUSH     {r4,lr}
        0x00207ce0:    6c04        .l      LDR      r4,[r0,#0x40]
        0x00207ce2:    07e0        ..      LSLS     r0,r4,#31
        0x00207ce4:    d001        ..      BEQ      0x207cea ; GPIO_Group0_Handler + 14
;;;816        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;817    
;;;818        //Check exact IRQ function
;;;819        if (GPIOIrqStatus & BIT0)
;;;820        {
;;;821            GPIO0_Handler();
        0x00207ce6:    f206f50d    ....    BL       ADC_Handler ; 0x80e704
;;;822        }
;;;823        if (GPIOIrqStatus & BIT8)
        0x00207cea:    05e0        ..      LSLS     r0,r4,#23
        0x00207cec:    d501        ..      BPL      0x207cf2 ; GPIO_Group0_Handler + 22
;;;824        {
;;;825            GPIO8_Handler();
        0x00207cee:    f206f509    ....    BL       ADC_Handler ; 0x80e704
;;;826        }
;;;827        if (GPIOIrqStatus & BIT12)
        0x00207cf2:    04e0        ..      LSLS     r0,r4,#19
        0x00207cf4:    d501        ..      BPL      0x207cfa ; GPIO_Group0_Handler + 30
;;;828        {
;;;829            GPIO12_Handler();
        0x00207cf6:    f206f505    ....    BL       ADC_Handler ; 0x80e704
;;;830        }
;;;831        if (GPIOIrqStatus & BIT16)
        0x00207cfa:    03e0        ..      LSLS     r0,r4,#15
        0x00207cfc:    d501        ..      BPL      0x207d02 ; GPIO_Group0_Handler + 38
;;;832        {
;;;833            GPIO16_Handler();
        0x00207cfe:    f206f501    ....    BL       ADC_Handler ; 0x80e704
;;;834        }
;;;835        if (GPIOIrqStatus & BIT20)
        0x00207d02:    02e0        ..      LSLS     r0,r4,#11
        0x00207d04:    d501        ..      BPL      0x207d0a ; GPIO_Group0_Handler + 46
;;;836        {
;;;837            GPIO20_Handler();
        0x00207d06:    f206f4fd    ....    BL       ADC_Handler ; 0x80e704
;;;838        }
;;;839        if (GPIOIrqStatus & BIT24)
        0x00207d0a:    01e0        ..      LSLS     r0,r4,#7
        0x00207d0c:    d501        ..      BPL      0x207d12 ; GPIO_Group0_Handler + 54
;;;840        {
;;;841            GPIO24_Handler();
        0x00207d0e:    f206f4f9    ....    BL       ADC_Handler ; 0x80e704
;;;842        }
;;;843        if (GPIOIrqStatus & BIT28)
        0x00207d12:    00e0        ..      LSLS     r0,r4,#3
        0x00207d14:    d503        ..      BPL      0x207d1e ; GPIO_Group0_Handler + 66
;;;844        {
;;;845            GPIO28_Handler();
        0x00207d16:    e8bd4010    ...@    POP      {r4,lr}
        0x00207d1a:    f206b4f3    ....    B.W      ADC_Handler ; 0x80e704
;;;846        }
;;;847    }
        0x00207d1e:    bd10        ..      POP      {r4,pc}
    $d
        0x00207d20:    40001000    ...@    DCD    1073745920
    $t
    .ram.dataon.data
    DLPS_IO_EnterDlpsCb
;;; .\..\..\..\src\mcu\peripheral\rtl876x_io_dlps.c
;;;1650   {
        0x00207d24:    b57c        |.      PUSH     {r2-r6,lr}
;;; ..\..\..\inc\platform\cmsis\core_cm4.h
;;;1659       NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
        0x00207d26:    2400        .$      MOVS     r4,#0
        0x00207d28:    f04f20e0    O..     MOV      r0,#0xe000e000
        0x00207d2c:    2101        .!      MOVS     r1,#1
        0x00207d2e:    f8c01180    ....    STR      r1,[r0,#0x180]
;;; .\..\..\..\src\mcu\peripheral\rtl876x_io_dlps.c
;;;51         CPU_StoreReg[0] = NVIC->ISER[0];
        0x00207d32:    f8d02100    ...!    LDR      r2,[r0,#0x100]
        0x00207d36:    4959        YI      LDR      r1,[pc,#356] ; [0x207e9c] = 0x208160
;;;52         CPU_StoreReg[1] = NVIC->ISPR[0];
        0x00207d38:    600a        .`      STR      r2,[r1,#0]
        0x00207d3a:    f8d02200    ..."    LDR      r2,[r0,#0x200]
;;;53         CPU_StoreReg[2] = NVIC->IABR[0];
        0x00207d3e:    604a        J`      STR      r2,[r1,#4]
        0x00207d40:    f8d00300    ....    LDR      r0,[r0,#0x300]
;;;54     
;;;55         //The priority of system on interrupt is 0 at first DLPS ENTER CB, so store and restore is skipped
;;;56         for (i = 3; i < 32; ++i)  //skip System_IRQn, WDG_IRQn, BTMAC_IRQn which are handled in rom
        0x00207d44:    6088        .`      STR      r0,[r1,#8]
        0x00207d46:    2003        .       MOVS     r0,#3
;;;57         {
;;;58             CPU_StoreReg[i] = NVIC->IP[i];
        0x00207d48:    f10022e0    ..."    ADD      r2,r0,#0xe000e000
        0x00207d4c:    f8922400    ...$    LDRB     r2,[r2,#0x400]
        0x00207d50:    f8412020    A.      STR      r2,[r1,r0,LSL #2]
        0x00207d54:    1c40        @.      ADDS     r0,r0,#1
;;; .\..\..\..\src\mcu\peripheral\rtl876x_io_dlps.c (56)
        0x00207d56:    2820         (      CMP      r0,#0x20
        0x00207d58:    d3f6        ..      BCC      0x207d48 ; DLPS_IO_EnterDlpsCb + 36
;;;57         {
;;;58             CPU_StoreReg[i] = NVIC->IP[i];
;;;59         }
;;;60     
;;;61         CPU_StoreReg[32] = SCB->VTOR;
        0x00207d5a:    4851        QH      LDR      r0,[pc,#324] ; [0x207ea0] = 0xe000ed08
        0x00207d5c:    6800        .h      LDR      r0,[r0,#0]
;;;62         /* Save Vendor register */
;;;63         PeriIntStoreReg = PERIPHINT->EN;
        0x00207d5e:    f8c10080    ....    STR      r0,[r1,#0x80]
        0x00207d62:    4850        PH      LDR      r0,[pc,#320] ; [0x207ea4] = 0x40006000
        0x00207d64:    68c0        .h      LDR      r0,[r0,#0xc]
        0x00207d66:    4b4d        MK      LDR      r3,[pc,#308] ; [0x207e9c] = 0x208160
        0x00207d68:    3b0c        .;      SUBS     r3,r3,#0xc
;;;64     
;;;65         return;
;;;66     }
;;;67     
;;;68     /**
;;;69       * @brief  CPU exit dlps callback function(Resume CPU register values when system exit DLPS)
;;;70       * @param  None
;;;71       * @retval None
;;;72       */
;;;73     DATA_RAM_FUNCTION __STATIC_INLINE  void CPU_DLPS_Exit(void)
;;;74     {
;;;75         //NVIC restore
;;;76         uint32_t i;
;;;77     
;;;78         //Don't restore NVIC pending register, but report warning
;;;79         //NVIC->ISPR[0] = CPU_StoreReg[1];
;;;80         if (CPU_StoreReg[1] & 0xFFFFFFFE)
;;;81         {
;;;82             /* During enter and exit dlps, system will disable all interrupts. If any interrupt occurs during this period, this log will be printed.
;;;83             Every bit of pending register corresponds to an interrupt. Please refer to IRQn_Type from System_IRQn to UART2_IRQn.
;;;84             For example:  "miss interrupt: pending register: 0x42000"
;;;85             It means that RTC and ADC interrupt occur during dlps store and restore flow. But because all interrupts are masked, these interrupts are pending.
;;;86             */
;;;87             DLPS_PRINT_WARN1("miss interrupt: pending register: 0x%x", CPU_StoreReg[1]);
;;;88         }
;;;89     //    NVIC->IABR[0] = CPU_StoreReg[2];
;;;90     
;;;91         //The priority of system on interrupt is 0 at first DLPS ENTER CB, so store and restore is skipped
;;;92         for (i = 3; i < 32; ++i) //skip System_IRQn, WDG_IRQn, BTMAC_IRQn which are handled in rom
;;;93         {
;;;94             NVIC->IP[i] = CPU_StoreReg[i];
;;;95         }
;;;96     
;;;97         SCB->VTOR = CPU_StoreReg[32];
;;;98         PERIPHINT->EN = PeriIntStoreReg;
;;;99         NVIC->ISER[0] = CPU_StoreReg[0];
;;;100    
;;;101    #if (DEBUG_WATCHPOINT_ENABLE == 1)
;;;102        void debug_monitor_enable(void);
;;;103        debug_monitor_enable();
;;;104    #endif
;;;105    
;;;106        return;
;;;107    }
;;;108    
;;;109    /**
;;;110      * @brief  PINMUX enter dlps callback function(Save PINMUX register values when system enter DLPS)
;;;111      * @param  None
;;;112      * @retval None
;;;113      */
;;;114    DATA_RAM_FUNCTION __STATIC_INLINE  void Pinmux_DLPS_Enter(void)
;;;115    {
;;;116        uint8_t i = 0;
;;;117    
;;;118        for (i = 0; i < 10; i++)
;;;119        {
;;;120            Pinmux_StoreReg[i] = PINMUX->CFG[i];
        0x00207d6a:    f1030190    ....    ADD      r1,r3,#0x90
;;; .\..\..\..\src\mcu\peripheral\rtl876x_io_dlps.c (116)
        0x00207d6e:    6018        .`      STR      r0,[r3,#0]
        0x00207d70:    2000        .       MOVS     r0,#0
;;;117    
;;;118        for (i = 0; i < 10; i++)
;;;119        {
;;;120            Pinmux_StoreReg[i] = PINMUX->CFG[i];
        0x00207d72:    0082        ..      LSLS     r2,r0,#2
        0x00207d74:    f1024280    ...B    ADD      r2,r2,#0x40000000
        0x00207d78:    f8d22280    ..."    LDR      r2,[r2,#0x280]
        0x00207d7c:    f8412020    A.      STR      r2,[r1,r0,LSL #2]
        0x00207d80:    1c40        @.      ADDS     r0,r0,#1
;;; .\..\..\..\src\mcu\peripheral\rtl876x_io_dlps.c (118)
        0x00207d82:    b2c0        ..      UXTB     r0,r0
;;; .\..\..\..\src\mcu\peripheral\rtl876x_io_dlps.c (118)
        0x00207d84:    280a        .(      CMP      r0,#0xa
        0x00207d86:    d3f4        ..      BCC      0x207d72 ; DLPS_IO_EnterDlpsCb + 78
;;;119        {
;;;120            Pinmux_StoreReg[i] = PINMUX->CFG[i];
;;;121        }
;;;122    
;;;123        return;
;;;124    }
;;;125    
;;;126    /**
;;;127      * @brief  PINMUX exit dlps callback function(Resume PINMUX register values when system exit DLPS)
;;;128      * @param  None
;;;129      * @retval None
;;;130      */
;;;131    DATA_RAM_FUNCTION __STATIC_INLINE  void Pinmux_DLPS_Exit(void)
;;;132    {
;;;133        uint8_t i;
;;;134    
;;;135        for (i = 0; i < 10; i++)
;;;136        {
;;;137            PINMUX->CFG[i] = Pinmux_StoreReg[i];
;;;138        }
;;;139    
;;;140        return;
;;;141    }
;;;142    #endif
;;;143    
;;;144    /********************************************** ********************************************************/
;;;145    /**************************************** [GPIO DLPS] **************************************************/
;;;146    /*******************************************************************************************************/
;;;147    /*******************************************************************************************************/
;;;148    #if USE_GPIO_DLPS
;;;149    
;;;150    __STATIC_INLINE void GPIO_DLPS_Enter(void);
;;;151    __STATIC_INLINE void GPIO_DLPS_Exit(void);
;;;152    
;;;153    uint32_t GPIO_StoreReg[9];         /*  This array should be placed in RAM ON/Buffer ON.    */
;;;154    
;;;155    /**
;;;156      * @brief  GPIO enter dlps callback function(Save GPIO register values when system enter DLPS)
;;;157      * @param  None
;;;158      * @retval None
;;;159      */
;;;160    DATA_RAM_FUNCTION __STATIC_INLINE void GPIO_DLPS_Enter(void)
;;;161    {
;;;162        PERIPH->PERI_FUNC1_EN |= BIT_PERI_GPIO_EN;
;;;163        PERIPH->PERI_CLK_CTRL |= (BIT_SOC_ACTCK_GPIO_EN | SYSBLK_SLPCK_GPIO_EN_Msk);
;;;164    
;;;165        GPIO_StoreReg[0] = GPIO->DATAOUT;
;;;166        GPIO_StoreReg[1] = GPIO->DATADIR;
;;;167        GPIO_StoreReg[2] = GPIO->DATASRC;
;;;168        GPIO_StoreReg[3] = GPIO->INTEN;
;;;169        GPIO_StoreReg[4] = GPIO->INTMASK;
;;;170        GPIO_StoreReg[5] = GPIO->INTTYPE;
;;;171        GPIO_StoreReg[6] = GPIO->INTPOLARITY;
;;;172        GPIO_StoreReg[7] = GPIO->DEBOUNCE;
;;;173        GPIO_StoreReg[8] = *(__IO uint32_t *)(0x40000344UL);
;;;174    
;;;175        return;
;;;176    }
;;;177    
;;;178    /**
;;;179      * @brief  GPIO exit dlps callback function(Resume GPIO register values when system exit DLPS)
;;;180      * @param  None
;;;181      * @retval None
;;;182      */
;;;183    DATA_RAM_FUNCTION __STATIC_INLINE void GPIO_DLPS_Exit(void)
;;;184    {
;;;185        PERIPH->PERI_FUNC1_EN |= BIT_PERI_GPIO_EN;
;;;186        PERIPH->PERI_CLK_CTRL |= (BIT_SOC_ACTCK_GPIO_EN | SYSBLK_SLPCK_GPIO_EN_Msk);
;;;187    
;;;188        GPIO->DATADIR       = GPIO_StoreReg[1];
;;;189        GPIO->DATASRC       = GPIO_StoreReg[2];
;;;190        GPIO->INTMASK       = GPIO_StoreReg[4];
;;;191        GPIO->INTTYPE       = GPIO_StoreReg[5];
;;;192        GPIO->INTPOLARITY   = GPIO_StoreReg[6];
;;;193        GPIO->DEBOUNCE      = GPIO_StoreReg[7];
;;;194        GPIO->DATAOUT       = GPIO_StoreReg[0];
;;;195        GPIO->INTCLR        = ~(GPIO_StoreReg[1]);
;;;196        GPIO->INTEN         = GPIO_StoreReg[3];
;;;197        *(__IO uint32_t *)(0x40000344UL) = GPIO_StoreReg[8];
;;;198    
;;;199        return;
;;;200    }
;;;201    #endif  /* USE_GPIO_DLPS */
;;;202    
;;;203    
;;;204    /********************************************** ********************************************************/
;;;205    /**************************************** [KEYSCAN DLPS] ***********************************************/
;;;206    /*******************************************************************************************************/
;;;207    /*******************************************************************************************************/
;;;208    #if USE_KEYSCAN_DLPS
;;;209    __STATIC_INLINE void KeyScan_DLPS_Enter(void);
;;;210    __STATIC_INLINE void KeyScan_DLPS_Exit(void);
;;;211    
;;;212    uint32_t KeyScan_StoreReg[7];      /*  This array should be placed in RAM ON/Buffer ON.    */
;;;213    
;;;214    /**
;;;215      * @brief  KEYSCAN enter dlps callback function(Save KEYSCAN register values when system enter DLPS)
;;;216      * @param  None
;;;217      * @retval None
;;;218      */
;;;219    DATA_RAM_FUNCTION __STATIC_INLINE void KeyScan_DLPS_Enter(void)
;;;220    {
;;;221        /*Open 5M clock source*/
;;;222        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;223        SYSBLKCTRL->u_20C.RSVD_20C |= BIT29;
;;;224    
;;;225        PERIPH->PERI_FUNC0_EN |= BIT_PERI_KEYSCAN_EN;
;;;226        PERIPH->PERI_CLK_CTRL1 |= (BIT_SOC_ACTCK_KEYSCAN_EN | SYSBLK_SLPCK_KEYSCAN_EN_Msk);
;;;227    
;;;228        KeyScan_StoreReg[0] = KEYSCAN->CLKDIV;               /* 0x00 */
;;;229        KeyScan_StoreReg[1] = KEYSCAN->TIMERCR;              /* 0x04 */
;;;230        KeyScan_StoreReg[2] = KEYSCAN->CR;                   /* 0x08 */
;;;231        KeyScan_StoreReg[3] = KEYSCAN->COLCR;                /* 0x0C */
;;;232        KeyScan_StoreReg[4] = KEYSCAN->ROWCR;                /* 0x10 */
;;;233        KeyScan_StoreReg[6] = KEYSCAN->INTMASK;              /* 0x18 */
;;;234    
;;;235        return;
;;;236    }
;;;237    
;;;238    /**
;;;239      * @brief  KEYSCAN exit dlps callback function(Resume KEYSCAN register values when system exit DLPS)
;;;240      * @param  None
;;;241      * @retval None
;;;242      */
;;;243    DATA_RAM_FUNCTION __STATIC_INLINE void KeyScan_DLPS_Exit(void)
;;;244    {
;;;245        /*Open 5M clock source*/
;;;246        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;247        SYSBLKCTRL->u_20C.RSVD_20C |= BIT29;
;;;248    
;;;249        PERIPH->PERI_FUNC0_EN |= BIT_PERI_KEYSCAN_EN;
;;;250        PERIPH->PERI_CLK_CTRL1 |= (BIT_SOC_ACTCK_KEYSCAN_EN | SYSBLK_SLPCK_KEYSCAN_EN_Msk);
;;;251    
;;;252        /* Set FSM to idle state */
;;;253        KEYSCAN->CR &= ~BIT31;
;;;254        KEYSCAN->CLKDIV = KeyScan_StoreReg[0];
;;;255        KEYSCAN->CR = (KeyScan_StoreReg[2] & (~(BIT31)));
;;;256        KEYSCAN->TIMERCR = KeyScan_StoreReg[1];
;;;257        KEYSCAN->COLCR = KeyScan_StoreReg[3];
;;;258        KEYSCAN->ROWCR = KeyScan_StoreReg[4];
;;;259        KEYSCAN->INTMASK = KeyScan_StoreReg[6];
;;;260        KEYSCAN->CR |= (KeyScan_StoreReg[2] & ((BIT31)));
;;;261    
;;;262        return;
;;;263    }
;;;264    #endif /* USE_KEYSCAN_DLPS */
;;;265    
;;;266    
;;;267    /********************************************** ********************************************************/
;;;268    /**************************************** [QDEC DLPS] **************************************************/
;;;269    /*******************************************************************************************************/
;;;270    /*******************************************************************************************************/
;;;271    #if USE_QDECODER_DLPS
;;;272    __STATIC_INLINE void QuadDecoder_DLPS_Enter(void);
;;;273    __STATIC_INLINE void QuadDecoder_DLPS_Exit(void);
;;;274    
;;;275    uint32_t QuadDecoder_StoreReg[5];  /*  This array should be placed in RAM ON/Buffer ON.    */
;;;276    
;;;277    /**
;;;278      * @brief  QDEC enter dlps callback function(Save QDEC register values when system enter DLPS)
;;;279      * @param  None
;;;280      * @retval None
;;;281      */
;;;282    DATA_RAM_FUNCTION __STATIC_INLINE void QuadDecoder_DLPS_Enter(void)
;;;283    {
;;;284        /*Open 20M clock source*/
;;;285        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;286        SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;287        SYSBLKCTRL->u_218.PERI_FUNC0_EN |= SYSBLK_QDECODE_EN_Msk;
;;;288        SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_QDECODE_EN_Msk | SYSBLK_SLPCK_QDECODE_EN_Msk);
;;;289    
;;;290        QuadDecoder_StoreReg[0] = QDEC->REG_DIV;
;;;291        QuadDecoder_StoreReg[1] = QDEC->REG_CR_X;
;;;292        QuadDecoder_StoreReg[2] = QDEC->REG_CR_Y;
;;;293        QuadDecoder_StoreReg[3] = QDEC->REG_CR_Z;
;;;294        QuadDecoder_StoreReg[4] = QDEC->INT_MASK;
;;;295    
;;;296        return;
;;;297    }
;;;298    
;;;299    /**
;;;300      * @brief  QDEC exit dlps callback function(Resume QDEC register values when system exit DLPS)
;;;301      * @param  None
;;;302      * @retval None
;;;303      */
;;;304    DATA_RAM_FUNCTION __STATIC_INLINE void QuadDecoder_DLPS_Exit(void)
;;;305    {
;;;306        /*Open 20M clock source*/
;;;307        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;308        SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;309        SYSBLKCTRL->u_218.PERI_FUNC0_EN |= SYSBLK_QDECODE_EN_Msk;
;;;310        SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_QDECODE_EN_Msk | SYSBLK_SLPCK_QDECODE_EN_Msk);
;;;311    
;;;312        //clear flags
;;;313        QDEC->REG_DIV  = QuadDecoder_StoreReg[0];
;;;314        QDEC->REG_CR_X = QuadDecoder_StoreReg[1];
;;;315        QDEC->REG_CR_Y = QuadDecoder_StoreReg[2];
;;;316        QDEC->REG_CR_Z = QuadDecoder_StoreReg[3];
;;;317        QDEC->INT_MASK = QuadDecoder_StoreReg[4];
;;;318    
;;;319        return;
;;;320    }
;;;321    #endif
;;;322    
;;;323    /********************************************** ********************************************************/
;;;324    /**************************************** [SPI0 DLPS] **************************************************/
;;;325    /*******************************************************************************************************/
;;;326    /*******************************************************************************************************/
;;;327    #if USE_SPI0_DLPS
;;;328    __STATIC_INLINE void SPI0_DLPS_Enter(void);
;;;329    __STATIC_INLINE void SPI0_DLPS_Exit(void);
;;;330    
;;;331    uint32_t SPI0_StoreReg[14];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;332    
;;;333    /**
;;;334      * @brief  SPI0 enter dlps callback function(Save SPI0 register values when system enter DLPS)
;;;335      * @param  None
;;;336      * @retval None
;;;337      */
;;;338    DATA_RAM_FUNCTION __STATIC_INLINE void SPI0_DLPS_Enter(void)
;;;339    {
;;;340        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI0_EN_Msk;
;;;341        SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_SPI0_EN_Msk | SYSBLK_SLPCK_SPI0_EN_Msk);
;;;342    
;;;343        SPI0_StoreReg[0] = SPI0->CTRLR0;
;;;344        SPI0_StoreReg[1] = SPI0->CTRLR1;
;;;345        SPI0_StoreReg[2] = SPI0->SSIENR;
;;;346        SPI0_StoreReg[3] = SPI0->SER;
;;;347        SPI0_StoreReg[4] = SPI0->BAUDR;
;;;348        SPI0_StoreReg[5] = SPI0->TXFTLR;
;;;349        SPI0_StoreReg[6] = SPI0->RXFTLR;
;;;350        SPI0_StoreReg[7] = SPI0->IMR;
;;;351        SPI0_StoreReg[8] = SPI0->DMACR;
;;;352        SPI0_StoreReg[9] = SPI0->DMATDLR;
;;;353        SPI0_StoreReg[10] = SPI0->DMARDLR;
;;;354        SPI0_StoreReg[11] = SPI0->RX_SAMPLE_DLY;
;;;355        SPI0_StoreReg[12] = *(volatile uint32_t *)0x40000308;
;;;356        SPI0_StoreReg[13] = *(volatile uint32_t *)0x4000035CUL;
;;;357    }
;;;358    
;;;359    /**
;;;360      * @brief  SPI0 exit dlps callback function(Resume SPI0 register values when system exit DLPS)
;;;361      * @param  None
;;;362      * @retval None
;;;363      */
;;;364    DATA_RAM_FUNCTION __STATIC_INLINE void SPI0_DLPS_Exit(void)
;;;365    {
;;;366        *(volatile uint32_t *)0x4000035CUL = SPI0_StoreReg[13];
;;;367        *(volatile uint32_t *)0x40000308 = SPI0_StoreReg[12];
;;;368        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI0_EN_Msk;
;;;369        SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_SPI0_EN_Msk | SYSBLK_SLPCK_SPI0_EN_Msk);
;;;370    
;;;371        SPI0->CTRLR0 = SPI0_StoreReg[0];
;;;372        SPI0->CTRLR1 = SPI0_StoreReg[1];
;;;373        SPI0->SER = SPI0_StoreReg[3];
;;;374        SPI0->BAUDR = SPI0_StoreReg[4];
;;;375        SPI0->TXFTLR = SPI0_StoreReg[5];
;;;376        SPI0->RXFTLR = SPI0_StoreReg[6];
;;;377        SPI0->IMR = SPI0_StoreReg[7];
;;;378        SPI0->DMACR = SPI0_StoreReg[8];
;;;379        SPI0->DMATDLR = SPI0_StoreReg[9];
;;;380        SPI0->DMARDLR = SPI0_StoreReg[10];
;;;381        SPI0->RX_SAMPLE_DLY = SPI0_StoreReg[11];
;;;382    
;;;383        /* Enable the selected SPI peripheral */
;;;384        SPI0->SSIENR = SPI0_StoreReg[2];
;;;385    }
;;;386    #endif
;;;387    
;;;388    
;;;389    /********************************************** ********************************************************/
;;;390    /**************************************** [SPI1 DLPS] **************************************************/
;;;391    /*******************************************************************************************************/
;;;392    /*******************************************************************************************************/
;;;393    #if USE_SPI1_DLPS
;;;394    __STATIC_INLINE void SPI1_DLPS_Enter(void);
;;;395    __STATIC_INLINE void SPI1_DLPS_Exit(void);
;;;396    
;;;397    uint32_t SPI1_StoreReg[14];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;398    
;;;399    /**
;;;400      * @brief  SPI1 enter dlps callback function(Save SPI1 register values when system enter DLPS)
;;;401      * @param  None
;;;402      * @retval None
;;;403      */
;;;404    DATA_RAM_FUNCTION __STATIC_INLINE void SPI1_DLPS_Enter(void)
;;;405    {
;;;406        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI1_EN_Msk;
;;;407        SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_SPI1_EN_Msk | SYSBLK_SLPCK_SPI1_EN_Msk);
;;;408    
;;;409        SPI1_StoreReg[0] = SPI1->CTRLR0;
;;;410        SPI1_StoreReg[1] = SPI1->CTRLR1;
;;;411        SPI1_StoreReg[2] = SPI1->SSIENR;
;;;412        SPI1_StoreReg[3] = SPI1->SER;
;;;413        SPI1_StoreReg[4] = SPI1->BAUDR;
;;;414        SPI1_StoreReg[5] = SPI1->TXFTLR;
;;;415        SPI1_StoreReg[6] = SPI1->RXFTLR;
;;;416        SPI1_StoreReg[7] = SPI1->IMR;
;;;417        SPI1_StoreReg[8] = SPI1->DMACR;
;;;418        SPI1_StoreReg[9] = SPI1->DMATDLR;
;;;419        SPI1_StoreReg[10] = SPI1->DMARDLR;
;;;420        SPI1_StoreReg[11] = SPI1->RX_SAMPLE_DLY;
;;;421        SPI1_StoreReg[12] = *(volatile uint32_t *)0x40000308;
;;;422        SPI1_StoreReg[13] = *(volatile uint32_t *)0x4000035CUL;
;;;423    }
;;;424    
;;;425    /**
;;;426      * @brief  SPI1 exit dlps callback function(Resume SPI1 register values when system exit DLPS)
;;;427      * @param  None
;;;428      * @retval None
;;;429      */
;;;430    DATA_RAM_FUNCTION __STATIC_INLINE void SPI1_DLPS_Exit(void)
;;;431    {
;;;432        *(volatile uint32_t *)0x4000035CUL = SPI1_StoreReg[13];
;;;433        *(volatile uint32_t *)0x40000308 = SPI1_StoreReg[12];
;;;434        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI1_EN_Msk;
;;;435        SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_SPI1_EN_Msk | SYSBLK_SLPCK_SPI1_EN_Msk);
;;;436    
;;;437        SPI1->CTRLR0 = SPI1_StoreReg[0];
;;;438        SPI1->CTRLR1 = SPI1_StoreReg[1];
;;;439        SPI1->SER = SPI1_StoreReg[3];
;;;440        SPI1->BAUDR = SPI1_StoreReg[4];
;;;441        SPI1->TXFTLR = SPI1_StoreReg[5];
;;;442        SPI1->RXFTLR = SPI1_StoreReg[6];
;;;443        SPI1->IMR = SPI1_StoreReg[7];
;;;444        SPI1->DMACR = SPI1_StoreReg[8];
;;;445        SPI1->DMATDLR = SPI1_StoreReg[9];
;;;446        SPI1->DMARDLR = SPI1_StoreReg[10];
;;;447        SPI1->RX_SAMPLE_DLY = SPI1_StoreReg[11];
;;;448    
;;;449        /* Enable the selected SPI peripheral */
;;;450        SPI1->SSIENR = SPI1_StoreReg[2];
;;;451    }
;;;452    #endif
;;;453    
;;;454    /********************************************** ********************************************************/
;;;455    /**************************************** [SPI2W DLPS] **************************************************/
;;;456    /*******************************************************************************************************/
;;;457    /*******************************************************************************************************/
;;;458    #if USE_SPI2W_DLPS
;;;459    __STATIC_INLINE void SPI2W_DLPS_Enter(void);
;;;460    __STATIC_INLINE void SPI2W_DLPS_Exit(void);
;;;461    
;;;462    uint32_t SPI2W_StoreReg[1];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;463    
;;;464    /**
;;;465      * @brief  SPI2W enter dlps callback function(Save SPI2W register values when system enter DLPS)
;;;466      * @param  None
;;;467      * @retval None
;;;468      */
;;;469    DATA_RAM_FUNCTION __STATIC_INLINE void SPI2W_DLPS_Enter(void)
;;;470    {
;;;471        /*Open 20M clock source*/
;;;472        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;473        SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;474    
;;;475        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI2W_EN_Msk;
;;;476        SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_SPI2WIRE_EN_Msk | SYSBLK_SLPCK_SPI2WIRE_EN_Msk);
;;;477    
;;;478        SPI2W_StoreReg[0] = SPI3WIRE->CFGR;
;;;479    }
;;;480    
;;;481    /**
;;;482      * @brief  SPI2W exit dlps callback function(Resume SPI2W register values when system exit DLPS)
;;;483      * @param  None
;;;484      * @retval None
;;;485      */
;;;486    DATA_RAM_FUNCTION __STATIC_INLINE void SPI2W_DLPS_Exit(void)
;;;487    {
;;;488        /*Open 20M clock source*/
;;;489        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;490        SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;491    
;;;492        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI2W_EN_Msk;
;;;493        SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_SPI2WIRE_EN_Msk | SYSBLK_SLPCK_SPI2WIRE_EN_Msk);
;;;494    
;;;495        SPI3WIRE->CFGR = SPI2W_StoreReg[0];
;;;496    }
;;;497    #endif
;;;498    
;;;499    /********************************************** ********************************************************/
;;;500    /**************************************** [I2C0 DLPS] **************************************************/
;;;501    /*******************************************************************************************************/
;;;502    /*******************************************************************************************************/
;;;503    #if USE_I2C0_DLPS
;;;504    __STATIC_INLINE void I2C0_DLPS_Enter(void);
;;;505    __STATIC_INLINE void I2C0_DLPS_Exit(void);
;;;506    
;;;507    uint32_t I2C0_StoreReg[20];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;508    
;;;509    /**
;;;510      * @brief  I2C0 enter dlps callback function(Save I2C0 register values when system enter DLPS)
;;;511      * @param  None
;;;512      * @retval None
;;;513      */
;;;514    DATA_RAM_FUNCTION __STATIC_INLINE void I2C0_DLPS_Enter(void)
;;;515    {
;;;516        PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_I2C0_EN_Msk | SYSBLK_SLPCK_I2C0_EN_Msk);
;;;517        PERIPH->PERI_FUNC0_EN |= SYSBLK_I2C0_EN_Msk;
;;;518    
;;;519        I2C0_StoreReg[0] = I2C0->IC_CON;
;;;520        I2C0_StoreReg[1] = I2C0->IC_TAR;
;;;521        I2C0_StoreReg[2] = I2C0->IC_SAR;
;;;522        I2C0_StoreReg[3] = I2C0->IC_HS_MADDR;
;;;523    
;;;524        I2C0_StoreReg[4] = I2C0->IC_SS_SCL_HCNT;
;;;525        I2C0_StoreReg[5] = I2C0->IC_SS_SCL_LCNT;
;;;526        I2C0_StoreReg[6] = I2C0->IC_FS_SCL_HCNT;
;;;527        I2C0_StoreReg[7] = I2C0->IC_FS_SCL_LCNT;
;;;528        I2C0_StoreReg[8] = I2C0->IC_HS_SCL_HCNT;
;;;529        I2C0_StoreReg[9] = I2C0->IC_HS_SCL_LCNT;
;;;530    
;;;531        I2C0_StoreReg[10] = I2C0->IC_INTR_MASK;
;;;532        I2C0_StoreReg[11] = I2C0->IC_RX_TL;
;;;533        I2C0_StoreReg[12] = I2C0->IC_TX_TL;
;;;534        I2C0_StoreReg[13] = I2C0->IC_ENABLE;
;;;535        I2C0_StoreReg[14] = I2C0->IC_SDA_HOLD;
;;;536        I2C0_StoreReg[15] = I2C0->IC_SLV_DATA_NACK_ONLY;
;;;537        I2C0_StoreReg[16] = I2C0->IC_DMA_CR;
;;;538        I2C0_StoreReg[17] = I2C0->IC_DMA_TDLR;
;;;539        I2C0_StoreReg[18] = I2C0->IC_DMA_RDLR;
;;;540    
;;;541        I2C0_StoreReg[19] = I2C0->IC_SDA_SETUP;
;;;542    }
;;;543    
;;;544    /**
;;;545      * @brief  I2C0 exit dlps callback function(Resume I2C0 register values when system exit DLPS)
;;;546      * @param  None
;;;547      * @retval None
;;;548      */
;;;549    DATA_RAM_FUNCTION __STATIC_INLINE void I2C0_DLPS_Exit(void)
;;;550    {
;;;551        PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_I2C0_EN_Msk | SYSBLK_SLPCK_I2C0_EN_Msk);
;;;552        PERIPH->PERI_FUNC0_EN |= SYSBLK_I2C0_EN_Msk;
;;;553    
;;;554        I2C0->IC_CON = I2C0_StoreReg[0];
;;;555        I2C0->IC_TAR = I2C0_StoreReg[1];
;;;556        I2C0->IC_SAR = I2C0_StoreReg[2];
;;;557        I2C0->IC_HS_MADDR = I2C0_StoreReg[3];
;;;558    
;;;559        I2C0->IC_SS_SCL_HCNT = I2C0_StoreReg[4];
;;;560        I2C0->IC_SS_SCL_LCNT = I2C0_StoreReg[5];
;;;561        I2C0->IC_FS_SCL_HCNT = I2C0_StoreReg[6];
;;;562        I2C0->IC_FS_SCL_LCNT = I2C0_StoreReg[7];
;;;563        I2C0->IC_HS_SCL_HCNT = I2C0_StoreReg[8];
;;;564        I2C0->IC_HS_SCL_LCNT = I2C0_StoreReg[9];
;;;565    
;;;566        I2C0->IC_INTR_MASK = I2C0_StoreReg[10];
;;;567        I2C0->IC_RX_TL = I2C0_StoreReg[11];
;;;568        I2C0->IC_TX_TL = I2C0_StoreReg[12];
;;;569        I2C0->IC_SDA_HOLD = I2C0_StoreReg[14];
;;;570        I2C0->IC_SLV_DATA_NACK_ONLY = I2C0_StoreReg[15];
;;;571        I2C0->IC_DMA_CR = I2C0_StoreReg[16];
;;;572        I2C0->IC_DMA_TDLR = I2C0_StoreReg[17];
;;;573        I2C0->IC_DMA_RDLR = I2C0_StoreReg[18];
;;;574        I2C0->IC_SDA_SETUP = I2C0_StoreReg[19];
;;;575    
;;;576        I2C0->IC_ENABLE = I2C0_StoreReg[13];
;;;577    }
;;;578    #endif
;;;579    
;;;580    /********************************************** ********************************************************/
;;;581    /**************************************** [I2C1 DLPS] **************************************************/
;;;582    /*******************************************************************************************************/
;;;583    /*******************************************************************************************************/
;;;584    #if USE_I2C1_DLPS
;;;585    __STATIC_INLINE void I2C1_DLPS_Enter(void);
;;;586    __STATIC_INLINE void I2C1_DLPS_Exit(void);
;;;587    
;;;588    uint32_t I2C1_StoreReg[20];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;589    
;;;590    /**
;;;591      * @brief  I2C1 enter dlps callback function(Save I2C1 register values when system enter DLPS)
;;;592      * @param  None
;;;593      * @retval None
;;;594      */
;;;595    DATA_RAM_FUNCTION __STATIC_INLINE void I2C1_DLPS_Enter(void)
;;;596    {
;;;597        PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_I2C1_EN_Msk | SYSBLK_SLPCK_I2C1_EN_Msk);
;;;598        PERIPH->PERI_FUNC0_EN |= SYSBLK_I2C1_EN_Msk;
;;;599    
;;;600        I2C1_StoreReg[0] = I2C1->IC_CON;
;;;601        I2C1_StoreReg[1] = I2C1->IC_TAR;
;;;602        I2C1_StoreReg[2] = I2C1->IC_SAR;
;;;603        I2C1_StoreReg[3] = I2C1->IC_HS_MADDR;
;;;604    
;;;605        I2C1_StoreReg[4] = I2C1->IC_SS_SCL_HCNT;
;;;606        I2C1_StoreReg[5] = I2C1->IC_SS_SCL_LCNT;
;;;607        I2C1_StoreReg[6] = I2C1->IC_FS_SCL_HCNT;
;;;608        I2C1_StoreReg[7] = I2C1->IC_FS_SCL_LCNT;
;;;609        I2C1_StoreReg[8] = I2C1->IC_HS_SCL_HCNT;
;;;610        I2C1_StoreReg[9] = I2C1->IC_HS_SCL_LCNT;
;;;611    
;;;612        I2C1_StoreReg[10] = I2C1->IC_INTR_MASK;
;;;613        I2C1_StoreReg[11] = I2C1->IC_RX_TL;
;;;614        I2C1_StoreReg[12] = I2C1->IC_TX_TL;
;;;615        I2C1_StoreReg[13] = I2C1->IC_ENABLE;
;;;616        I2C1_StoreReg[14] = I2C1->IC_SDA_HOLD;
;;;617        I2C1_StoreReg[15] = I2C1->IC_SLV_DATA_NACK_ONLY;
;;;618        I2C1_StoreReg[16] = I2C1->IC_DMA_CR;
;;;619        I2C1_StoreReg[17] = I2C1->IC_DMA_TDLR;
;;;620        I2C1_StoreReg[18] = I2C1->IC_DMA_RDLR;
;;;621    
;;;622        I2C1_StoreReg[19] = I2C1->IC_SDA_SETUP;
;;;623    }
;;;624    
;;;625    /**
;;;626      * @brief  I2C1 exit dlps callback function(Resume I2C1 register values when system exit DLPS)
;;;627      * @param  None
;;;628      * @retval None
;;;629      */
;;;630    DATA_RAM_FUNCTION __STATIC_INLINE void I2C1_DLPS_Exit(void)
;;;631    {
;;;632        PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_I2C1_EN_Msk | SYSBLK_SLPCK_I2C1_EN_Msk);
;;;633        PERIPH->PERI_FUNC0_EN |= SYSBLK_I2C1_EN_Msk;
;;;634    
;;;635        I2C1->IC_CON = I2C1_StoreReg[0];
;;;636        I2C1->IC_TAR = I2C1_StoreReg[1];
;;;637        I2C1->IC_SAR = I2C1_StoreReg[2];
;;;638        I2C0->IC_HS_MADDR = I2C1_StoreReg[3];
;;;639    
;;;640        I2C1->IC_SS_SCL_HCNT = I2C1_StoreReg[4];
;;;641        I2C1->IC_SS_SCL_LCNT = I2C1_StoreReg[5];
;;;642        I2C1->IC_FS_SCL_HCNT = I2C1_StoreReg[6];
;;;643        I2C1->IC_FS_SCL_LCNT = I2C1_StoreReg[7];
;;;644        I2C1->IC_HS_SCL_HCNT = I2C1_StoreReg[8];
;;;645        I2C1->IC_HS_SCL_LCNT = I2C1_StoreReg[9];
;;;646    
;;;647        I2C1->IC_INTR_MASK = I2C1_StoreReg[10];
;;;648        I2C1->IC_RX_TL = I2C1_StoreReg[11];
;;;649        I2C1->IC_TX_TL = I2C1_StoreReg[12];
;;;650        I2C1->IC_SDA_HOLD = I2C1_StoreReg[14];
;;;651        I2C1->IC_SLV_DATA_NACK_ONLY = I2C1_StoreReg[15];
;;;652        I2C1->IC_DMA_CR = I2C1_StoreReg[16];
;;;653        I2C1->IC_DMA_TDLR = I2C1_StoreReg[17];
;;;654        I2C1->IC_DMA_RDLR = I2C1_StoreReg[18];
;;;655        I2C1->IC_SDA_SETUP = I2C1_StoreReg[19];
;;;656    
;;;657        I2C1->IC_ENABLE = I2C1_StoreReg[13];
;;;658    }
;;;659    #endif
;;;660    
;;;661    /********************************************** ********************************************************/
;;;662    /**************************************** [Timer & PWM DLPS] *******************************************/
;;;663    /*******************************************************************************************************/
;;;664    /*******************************************************************************************************/
;;;665    #if USE_TIM_DLPS
;;;666    #include "rtl876x_tim.h"
;;;667    __STATIC_INLINE void TIM_DLPS_Enter(void);
;;;668    __STATIC_INLINE void TIM_DLPS_Exit(void);
;;;669    
;;;670    uint32_t TIM_StoreReg[26];      /*  This array should be placed in RAM ON/Buffer ON.    */
;;;671    
;;;672    /* PWM, use with timer */
;;;673    uint32_t PWM0_StoreReg;         /*  This array should be placed in RAM ON/Buffer ON.    */
;;;674    
;;;675    uint32_t PWM1_StoreReg;         /*  This array should be placed in RAM ON/Buffer ON.    */
;;;676    
;;;677    /**
;;;678      * @brief  TIMER enter dlps callback function(Save TIMER register values when system enter DLPS)
;;;679      * @param  None
;;;680      * @retval None
;;;681      */
;;;682    DATA_RAM_FUNCTION __STATIC_INLINE void TIM_DLPS_Enter(void)
;;;683    {
;;;684        SYSBLKCTRL->u_210.SOC_FUNC_EN |= BIT(16);
;;;685        SYSBLKCTRL->u_230.CLK_CTRL |= (SYSBLK_ACTCK_TIMER_EN_Msk | SYSBLK_SLPCK_TIMER_EN_Msk);
;;;686    
;;;687        TIM_StoreReg[0] = TIM0->LoadCount;
;;;688        TIM_StoreReg[1] = TIM0->ControlReg;
;;;689        TIM_StoreReg[2] = TIMER0_LOAD_COUNT2;
;;;690    
;;;691        TIM_StoreReg[3] = TIM1->LoadCount;
;;;692        TIM_StoreReg[4] = TIM1->ControlReg;
;;;693        TIM_StoreReg[5] = TIMER1_LOAD_COUNT2;
;;;694    
;;;695        TIM_StoreReg[6] = TIM2->LoadCount;
;;;696        TIM_StoreReg[7] = TIM2->ControlReg;
;;;697        TIM_StoreReg[8] = TIMER2_LOAD_COUNT2;
;;;698    
;;;699        TIM_StoreReg[9] = TIM3->LoadCount;
;;;700        TIM_StoreReg[10] = TIM3->ControlReg;
;;;701        TIM_StoreReg[11] = TIMER3_LOAD_COUNT2;
;;;702    
;;;703        TIM_StoreReg[12] = TIM4->LoadCount;
;;;704        TIM_StoreReg[13] = TIM4->ControlReg;
;;;705        TIM_StoreReg[14] = TIMER4_LOAD_COUNT2;
;;;706    
;;;707        TIM_StoreReg[15] = TIM5->LoadCount;
;;;708        TIM_StoreReg[16] = TIM5->ControlReg;
;;;709        TIM_StoreReg[17] = TIMER5_LOAD_COUNT2;
;;;710    
;;;711        TIM_StoreReg[18] = TIM6->LoadCount;
;;;712        TIM_StoreReg[19] = TIM6->ControlReg;
;;;713        TIM_StoreReg[20] = TIMER6_LOAD_COUNT2;
;;;714    
;;;715        TIM_StoreReg[21] = TIM7->LoadCount;
;;;716        TIM_StoreReg[22] = TIM7->ControlReg;
;;;717        TIM_StoreReg[23] = TIMER7_LOAD_COUNT2;
;;;718    
;;;719        TIM_StoreReg[24] = *((volatile uint32_t *)0x4000035CUL);
;;;720        TIM_StoreReg[25] = *((volatile uint32_t *)0x40000360UL);
;;;721    
;;;722        PWM0_StoreReg = TIMER_PWM0_CR;
;;;723    
;;;724        PWM1_StoreReg = TIMER_PWM1_CR;
;;;725    }
;;;726    
;;;727    /**
;;;728      * @brief  TIMER exit dlps callback function(Resume TIMER register values when system exit DLPS)
;;;729      * @param  None
;;;730      * @retval None
;;;731      */
;;;732    DATA_RAM_FUNCTION __STATIC_INLINE void TIM_DLPS_Exit(void)
;;;733    {
;;;734        /* Enable timer IP clock and function */
;;;735        SYSBLKCTRL->u_210.SOC_FUNC_EN |= BIT(16);
;;;736        SYSBLKCTRL->u_230.CLK_CTRL |= (SYSBLK_ACTCK_TIMER_EN_Msk | SYSBLK_SLPCK_TIMER_EN_Msk);
;;;737    
;;;738        *((volatile uint32_t *)0x4000035CUL) = TIM_StoreReg[24];
;;;739        *((volatile uint32_t *)0x40000360UL) = TIM_StoreReg[25];
;;;740    
;;;741        TIM0->LoadCount = TIM_StoreReg[0];
;;;742        TIM0->ControlReg = TIM_StoreReg[1];
;;;743        TIMER0_LOAD_COUNT2 = TIM_StoreReg[2];
;;;744    
;;;745        TIM1->LoadCount = TIM_StoreReg[3];
;;;746        TIM1->ControlReg = TIM_StoreReg[4];
;;;747        TIMER1_LOAD_COUNT2 = TIM_StoreReg[5];
;;;748    
;;;749        TIM2->LoadCount = TIM_StoreReg[6];
;;;750        TIM2->ControlReg = TIM_StoreReg[7];
;;;751        TIMER2_LOAD_COUNT2 = TIM_StoreReg[8];
;;;752    
;;;753        TIM3->LoadCount = TIM_StoreReg[9];
;;;754        TIM3->ControlReg = TIM_StoreReg[10];
;;;755        TIMER3_LOAD_COUNT2 = TIM_StoreReg[11];
;;;756    
;;;757        TIM4->LoadCount = TIM_StoreReg[12];
;;;758        TIM4->ControlReg = TIM_StoreReg[13];
;;;759        TIMER4_LOAD_COUNT2 = TIM_StoreReg[14];
;;;760    
;;;761        TIM5->LoadCount = TIM_StoreReg[15];
;;;762        TIM5->ControlReg = TIM_StoreReg[16];
;;;763        TIMER5_LOAD_COUNT2 = TIM_StoreReg[17];
;;;764    
;;;765        TIM6->LoadCount = TIM_StoreReg[18];
;;;766        TIM6->ControlReg = TIM_StoreReg[19];
;;;767        TIMER6_LOAD_COUNT2 = TIM_StoreReg[20];
;;;768    
;;;769        TIM7->LoadCount = TIM_StoreReg[21];
;;;770        TIM7->ControlReg = TIM_StoreReg[22];
;;;771        TIMER7_LOAD_COUNT2 = TIM_StoreReg[23];
;;;772    
;;;773        TIMER_PWM0_CR = PWM0_StoreReg;
;;;774    
;;;775        TIMER_PWM1_CR = PWM1_StoreReg;
;;;776    }
;;;777    #endif  /* USE_TIM_DLPS */
;;;778    
;;;779    
;;;780    /********************************************** ********************************************************/
;;;781    /**************************************** [UART DLPS] **************************************************/
;;;782    /*******************************************************************************************************/
;;;783    /*******************************************************************************************************/
;;;784    #if USE_UART_DLPS
;;;785    #include "rtl876x_uart.h"
;;;786    
;;;787    __STATIC_INLINE void UART_DLPS_Enter(void);
;;;788    __STATIC_INLINE void UART_DLPS_Exit(void);
;;;789    
;;;790    uint32_t UART_StoreReg[11];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;791    
;;;792    /**
;;;793      * @brief  UART enter dlps callback function(Save UART register values when system enter DLPS)
;;;794      * @param  None
;;;795      * @retval None
;;;796      */
;;;797    DATA_RAM_FUNCTION __STATIC_INLINE void UART_DLPS_Enter(void)
;;;798    {
;;;799        PERIPH->PERI_FUNC0_EN |= (1 << 0);
;;;800        PERIPH->PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_UART0DATA_EN_Msk | SYSBLK_SLPCK_UART0DATA_EN_Msk);
;;;801    
;;;802        //access DLH and DLL
;;;803        UART->LCR |= (1 << 7);
;;;804        UART_StoreReg[0] = UART->DLL;
;;;805        UART_StoreReg[1] = UART->DLH_INTCR;
;;;806        UART->LCR &= (~(1 << 7));
;;;807    
;;;808        //save other registers
;;;809        UART_StoreReg[2] = UART->DLH_INTCR;
;;;810        UART_StoreReg[4] = UART->LCR;
;;;811        UART_StoreReg[5] = UART->MCR;
;;;812        UART_StoreReg[6] = UART->SPR;
;;;813        UART_StoreReg[7] = UART->STSR;
;;;814        UART_StoreReg[8] = UART->RX_IDLE_INTTCR;
;;;815        UART_StoreReg[9] = UART->RXIDLE_INTCR;
;;;816        UART_StoreReg[10] = UART->MISCR;
;;;817    
;;;818        return;
;;;819    }
;;;820    
;;;821    /**
;;;822      * @brief  UART exit dlps callback function(Resume UART register values when system exit DLPS)
;;;823      * @param  None
;;;824      * @retval None
;;;825      */
;;;826    DATA_RAM_FUNCTION __STATIC_INLINE void UART_DLPS_Exit(void)
;;;827    {
;;;828        PERIPH->PERI_FUNC0_EN |= (1 << 0);
;;;829        PERIPH->PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_UART0DATA_EN_Msk | SYSBLK_SLPCK_UART0DATA_EN_Msk);
;;;830    
;;;831        //access DLH and DLL
;;;832        UART->LCR |= (1 << 7);
;;;833        UART->DLL = UART_StoreReg[0];
;;;834        UART->DLH_INTCR =  UART_StoreReg[1];
;;;835        UART->LCR &= (~(1 << 7));
;;;836    
;;;837        //access other registers
;;;838        UART->INTID_FCR = (((UART_StoreReg[7] & BIT24) >> 21) | ((UART_StoreReg[7] & 0x7C000000) >> 18) |
;;;839                           (1));
;;;840        UART->LCR = UART_StoreReg[4];
;;;841        UART->MCR = UART_StoreReg[5];
;;;842        UART->SPR = UART_StoreReg[6];
;;;843        UART->STSR = UART_StoreReg[7];
;;;844        UART->DLH_INTCR = UART_StoreReg[2];
;;;845        UART->RX_IDLE_INTTCR = UART_StoreReg[8];
;;;846        UART->RXIDLE_INTCR = UART_StoreReg[9];
;;;847        UART->MISCR = UART_StoreReg[10];
;;;848    
;;;849        return;
;;;850    }
;;;851    #endif
;;;852    
;;;853    
;;;854    #if USE_UART1_DLPS
;;;855    
;;;856    __STATIC_INLINE void UART1_DLPS_Enter(void);
;;;857    __STATIC_INLINE void UART1_DLPS_Exit(void);
;;;858    
;;;859    uint32_t UART1_StoreReg[11];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;860    
;;;861    /**
;;;862      * @brief  UART1 enter dlps callback function(Save UART1 register values when system enter DLPS)
;;;863      * @param  None
;;;864      * @retval None
;;;865      */
;;;866    DATA_RAM_FUNCTION __STATIC_INLINE void UART1_DLPS_Enter(void)
;;;867    {
;;;868        //enable log uart peripheral & clock
;;;869        SYSBLKCTRL->u_210.SOC_FUNC_EN |= (1 << 12);
;;;870        SYSBLKCTRL->u_230.CLK_CTRL |= ((1 << 12) | (1 << 13));
;;;871    
;;;872        //access DLH and DLL
;;;873        UART1->LCR |= (1 << 7);
;;;874        UART1_StoreReg[0] = UART1->DLL;
;;;875        UART1_StoreReg[1] = UART1->DLH_INTCR;
;;;876        UART1->LCR &= (~(1 << 7));
;;;877    
;;;878        //save other registers
;;;879        UART1_StoreReg[2] = UART1->DLH_INTCR;
;;;880        UART1_StoreReg[4] = UART1->LCR;
;;;881        UART1_StoreReg[5] = UART1->MCR;
;;;882        UART1_StoreReg[6] = UART1->SPR;
;;;883        UART1_StoreReg[7] = UART1->STSR;
;;;884        UART1_StoreReg[8] = UART1->RX_IDLE_INTTCR;
;;;885        UART1_StoreReg[9] = UART1->RXIDLE_INTCR;
;;;886        UART1_StoreReg[10] = UART1->MISCR;
;;;887    
;;;888        return;
;;;889    }
;;;890    
;;;891    /**
;;;892      * @brief  UART1 exit dlps callback function(Resume UART1 register values when system exit DLPS)
;;;893      * @param  None
;;;894      * @retval None
;;;895      */
;;;896    DATA_RAM_FUNCTION __STATIC_INLINE void UART1_DLPS_Exit(void)
;;;897    {
;;;898        //enable log uart peripheral & clock
;;;899        SYSBLKCTRL->u_210.SOC_FUNC_EN |= (1 << 12);
;;;900        SYSBLKCTRL->u_230.CLK_CTRL |= ((1 << 12) | (1 << 13));
;;;901    
;;;902        //access DLH and DLL
;;;903        UART1->LCR |= (1 << 7);
;;;904        UART1->DLL = UART1_StoreReg[0];
;;;905        UART1->DLH_INTCR =  UART1_StoreReg[1];
;;;906        UART1->LCR &= (~(1 << 7));
;;;907    
;;;908        //access other registers
;;;909        UART1->INTID_FCR = (((UART1_StoreReg[7] & BIT24) >> 21) | ((UART1_StoreReg[7] & 0x7C000000)
;;;910                                                                   >> 18) | (1));
;;;911        UART1->LCR = UART1_StoreReg[4];
;;;912        UART1->MCR = UART1_StoreReg[5];
;;;913        UART1->SPR = UART1_StoreReg[6];
;;;914        UART1->STSR = UART1_StoreReg[7];
;;;915        UART1->DLH_INTCR = UART1_StoreReg[2];
;;;916        UART1->RX_IDLE_INTTCR = UART1_StoreReg[8];
;;;917        UART1->RXIDLE_INTCR = UART1_StoreReg[9];
;;;918        UART1->MISCR = UART1_StoreReg[10];
;;;919    
;;;920        return;
;;;921    }
;;;922    #endif
;;;923    
;;;924    #if USE_UART2_DLPS
;;;925    
;;;926    __STATIC_INLINE void UART2_DLPS_Enter(void);
;;;927    __STATIC_INLINE void UART2_DLPS_Exit(void);
;;;928    
;;;929    uint32_t UART2_StoreReg[11];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;930    
;;;931    /**
;;;932      * @brief  UART2 enter dlps callback function(Save UART2 register values when system enter DLPS)
;;;933      * @param  None
;;;934      * @retval None
;;;935      */
;;;936    DATA_RAM_FUNCTION __STATIC_INLINE void UART2_DLPS_Enter(void)
;;;937    {
;;;938        //enable log uart peripheral & clock
;;;939        SYSBLKCTRL->u_210.SOC_FUNC_EN |= (1 << 12);
;;;940        SYSBLKCTRL->u_230.CLK_CTRL |= ((1 << 12) | (1 << 13));
;;;941    
;;;942        //access DLH and DLL
;;;943        UART2->LCR |= (1 << 7);
;;;944        UART2_StoreReg[0] = UART2->DLL;
;;;945        UART2_StoreReg[1] = UART2->DLH_INTCR;
;;;946        UART2->LCR &= (~(1 << 7));
;;;947    
;;;948        //save other registers
;;;949        UART2_StoreReg[2] = UART2->DLH_INTCR;
;;;950        UART2_StoreReg[4] = UART2->LCR;
;;;951        UART2_StoreReg[5] = UART2->MCR;
;;;952        UART2_StoreReg[6] = UART2->SPR;
;;;953        UART2_StoreReg[7] = UART2->STSR;
;;;954        UART2_StoreReg[8] = UART2->RX_IDLE_INTTCR;
;;;955        UART2_StoreReg[9] = UART2->RXIDLE_INTCR;
;;;956        UART2_StoreReg[10] = UART2->MISCR;
;;;957    
;;;958        return;
;;;959    }
;;;960    
;;;961    /**
;;;962      * @brief  UART2 exit dlps callback function(Resume UART2 register values when system exit DLPS)
;;;963      * @param  None
;;;964      * @retval None
;;;965      */
;;;966    DATA_RAM_FUNCTION __STATIC_INLINE void UART2_DLPS_Exit(void)
;;;967    {
;;;968        //enable log uart peripheral & clock
;;;969        SYSBLKCTRL->u_210.SOC_FUNC_EN |= (1 << 12);
;;;970        SYSBLKCTRL->u_230.CLK_CTRL |= ((1 << 12) | (1 << 13));
;;;971    
;;;972        //access DLH and DLL
;;;973        UART2->LCR |= (1 << 7);
;;;974        UART2->DLL = UART2_StoreReg[0];
;;;975        UART2->DLH_INTCR =  UART2_StoreReg[1];
;;;976        UART2->LCR &= (~(1 << 7));
;;;977    
;;;978        //access other registers
;;;979        UART2->INTID_FCR = (((UART2_StoreReg[7] & BIT24) >> 21) | ((UART2_StoreReg[7] & 0x7C000000)
;;;980                                                                   >> 18) | (1));
;;;981        UART2->LCR = UART2_StoreReg[4];
;;;982        UART2->MCR = UART2_StoreReg[5];
;;;983        UART2->SPR = UART2_StoreReg[6];
;;;984        UART2->STSR = UART2_StoreReg[7];
;;;985        UART2->DLH_INTCR = UART2_StoreReg[2];
;;;986        UART2->RX_IDLE_INTTCR = UART2_StoreReg[8];
;;;987        UART2->RXIDLE_INTCR = UART2_StoreReg[9];
;;;988        UART2->MISCR = UART2_StoreReg[10];
;;;989    
;;;990        return;
;;;991    }
;;;992    #endif
;;;993    
;;;994    
;;;995    /********************************************** ********************************************************/
;;;996    /**************************************** [ADC DLPS] **************************************************/
;;;997    /*******************************************************************************************************/
;;;998    /*******************************************************************************************************/
;;;999    
;;;1000   #if USE_ADC_DLPS
;;;1001   __STATIC_INLINE void ADC_DLPS_Enter(void);
;;;1002   __STATIC_INLINE void ADC_DLPS_Exit(void);
;;;1003   
;;;1004   uint32_t ADC_StoreReg[14];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1005   
;;;1006   /**
;;;1007     * @brief  ADC enter dlps callback function(Save ADC register values when system enter DLPS)
;;;1008     * @param  None
;;;1009     * @retval None
;;;1010     */
;;;1011   DATA_RAM_FUNCTION __STATIC_INLINE void ADC_DLPS_Enter(void)
;;;1012   {
;;;1013       /*Open 10M clock source*/
;;;1014       SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;1015       SYSBLKCTRL->u_20C.RSVD_20C |= BIT28;
;;;1016   
;;;1017       PERIPH->PERI_FUNC1_EN |= (1 << 0);
;;;1018       PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_ADC_EN_Msk | SYSBLK_SLPCK_ADC_EN_Msk);
;;;1019   
;;;1020       ADC_StoreReg[0] =  ADC->CR;          //0x04
;;;1021       ADC_StoreReg[1] =  ADC->SCHCR;       //0x08
;;;1022       ADC_StoreReg[2] =  ADC->INTCR;       //0x0C
;;;1023       ADC_StoreReg[3] =  ADC->SCHTAB0;     //0x10
;;;1024       ADC_StoreReg[4] =  ADC->SCHTAB1;     //0x14
;;;1025       ADC_StoreReg[5] =  ADC->SCHTAB2;     //0x18
;;;1026       ADC_StoreReg[6] =  ADC->SCHTAB3;     //0x1C
;;;1027       ADC_StoreReg[7] =  ADC->SCHTAB4;     //0x20
;;;1028       ADC_StoreReg[8] =  ADC->SCHTAB5;     //0x24
;;;1029       ADC_StoreReg[9] =  ADC->SCHTAB6;     //0x28
;;;1030       ADC_StoreReg[10] =  ADC->SCHTAB6;    //0x2C
;;;1031       ADC_StoreReg[11] =  ADC->PWRDLY;
;;;1032       ADC_StoreReg[12] =  ADC->DATCLK;
;;;1033       ADC_StoreReg[13] =  ADC->ANACTL;
;;;1034   
;;;1035       uint8_t reg_value = 0;
;;;1036       reg_value = btaon_fast_read_safe(0x110);
;;;1037       btaon_fast_write(0x110, reg_value & (~0x04));
;;;1038   
;;;1039       return;
;;;1040   }
;;;1041   
;;;1042   /**
;;;1043     * @brief  ADC exit dlps callback function(Resume ADC register values when system exit DLPS)
;;;1044     * @param  None
;;;1045     * @retval None
;;;1046     */
;;;1047   DATA_RAM_FUNCTION __STATIC_INLINE void ADC_DLPS_Exit(void)
;;;1048   {
;;;1049       /*Open 10M clock source*/
;;;1050       SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;1051       SYSBLKCTRL->u_20C.RSVD_20C |= BIT28;
;;;1052   
;;;1053       PERIPH->PERI_FUNC1_EN |= (1 << 0);
;;;1054       PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_ADC_EN_Msk | SYSBLK_SLPCK_ADC_EN_Msk);
;;;1055   
;;;1056   #if 0
;;;1057       //Todo
;;;1058       ADC->PWRDLY = ADC_StoreReg[10];
;;;1059       ADC->CR = (ADC_StoreReg[0] & (~((uint32_t)0x03)));
;;;1060       ADC->SCHTAB0 = ADC_StoreReg[3];
;;;1061       ADC->SCHTAB1 = ADC_StoreReg[4];
;;;1062       ADC->SCHTAB2 = ADC_StoreReg[5];
;;;1063       ADC->SCHTAB3 = ADC_StoreReg[6];
;;;1064       ADC->SCHTAB4 = ADC_StoreReg[7];
;;;1065       ADC->SCHTAB5 = ADC_StoreReg[8];
;;;1066       ADC->SCHTAB6 = ADC_StoreReg[9];
;;;1067       ADC->SCHCR = ADC_StoreReg[1];
;;;1068       ADC->INTCR = (ADC_StoreReg[2] & 0x1F);
;;;1069   #else
;;;1070       /*Disable all interrupt.*/
;;;1071       ADC->INTCR &= (~0x1f);
;;;1072   
;;;1073       /* Set power mode first */
;;;1074       ADC->PWRDLY = ADC_StoreReg[11];
;;;1075   
;;;1076       /* Disable schedule table */
;;;1077       ADC->SCHCR &= (~0xffff);
;;;1078   
;;;1079       ADC->SCHTAB0 = ADC_StoreReg[3];
;;;1080       ADC->SCHTAB1 = ADC_StoreReg[4];
;;;1081       ADC->SCHTAB2 = ADC_StoreReg[5];
;;;1082       ADC->SCHTAB3 = ADC_StoreReg[6];
;;;1083       ADC->SCHTAB4 = ADC_StoreReg[7];
;;;1084       ADC->SCHTAB5 = ADC_StoreReg[8];
;;;1085       ADC->SCHTAB6 = ADC_StoreReg[9];
;;;1086       ADC->SCHTAB7 = ADC_StoreReg[10];
;;;1087       ADC->SCHCR   = ADC_StoreReg[1];
;;;1088       ADC->CR = (ADC_StoreReg[0] & (~((uint32_t)0x03)));
;;;1089       ADC->DATCLK = ADC_StoreReg[12];
;;;1090       ADC->ANACTL = ADC_StoreReg[13];
;;;1091   
;;;1092       /*Clear ADC FIFO */
;;;1093       ADC->CR |= BIT26;
;;;1094       /* Clear all interrupt */
;;;1095       ADC->INTCR |= (0x1f << 8);
;;;1096   
;;;1097       /* Restore specify interrupt */
;;;1098       ADC->INTCR = ADC_StoreReg[2];
;;;1099   
;;;1100   #endif
;;;1101   
;;;1102       uint8_t reg_value = 0;
;;;1103       reg_value = btaon_fast_read_safe(0x110);
;;;1104       btaon_fast_write(0x110, reg_value | 0x04);
;;;1105   
;;;1106       return;
;;;1107   }
;;;1108   
;;;1109   #endif
;;;1110   
;;;1111   /********************************************** ********************************************************/
;;;1112   /**************************************** [IR DLPS] **************************************************/
;;;1113   /*******************************************************************************************************/
;;;1114   /*******************************************************************************************************/
;;;1115   
;;;1116   #if USE_IR_DLPS
;;;1117   __STATIC_INLINE void IR_DLPS_Enter(void);
;;;1118   __STATIC_INLINE void IR_DLPS_Exit(void);
;;;1119   
;;;1120   uint32_t IR_StoreReg[6];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1121   
;;;1122   /**
;;;1123     * @brief  IR enter dlps callback function(Save IR register values when system enter DLPS)
;;;1124     * @param  None
;;;1125     * @retval None
;;;1126     */
;;;1127   DATA_RAM_FUNCTION __STATIC_INLINE void IR_DLPS_Enter(void)
;;;1128   {
;;;1129       PERIPH->PERI_FUNC0_EN |= (1 << 10);
;;;1130       PERIPH->PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_IR_EN_Msk | SYSBLK_SLPCK_IR_EN_Msk);
;;;1131   
;;;1132       IR_StoreReg[0] = IR->CLK_DIV;
;;;1133       IR_StoreReg[1] = IR->TX_CONFIG;
;;;1134       IR_StoreReg[2] = IR->RX_CONFIG;
;;;1135       IR_StoreReg[3] = IR->RX_CNT_INT_SEL;
;;;1136   
;;;1137   
;;;1138       return;
;;;1139   }
;;;1140   
;;;1141   /**
;;;1142     * @brief  IR exit dlps callback function(Resume IR register values when system exit DLPS)
;;;1143     * @param  None
;;;1144     * @retval None
;;;1145     */
;;;1146   DATA_RAM_FUNCTION __STATIC_INLINE void IR_DLPS_Exit(void)
;;;1147   {
;;;1148       PERIPH->PERI_FUNC0_EN |= (1 << 10);
;;;1149       PERIPH->PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_IR_EN_Msk | SYSBLK_SLPCK_IR_EN_Msk);
;;;1150   
;;;1151       IR->CLK_DIV = IR_StoreReg[0];
;;;1152       if (IR_StoreReg[1] & BIT31)
;;;1153       {
;;;1154           /* RX MODE */
;;;1155           IR->TX_CONFIG  = IR_StoreReg[1];
;;;1156           IR->RX_CONFIG  = IR_StoreReg[2];
;;;1157           IR->RX_CNT_INT_SEL  = IR_StoreReg[3];
;;;1158       }
;;;1159       else
;;;1160       {
;;;1161           /* TX MODE */
;;;1162           IR->TX_CONFIG  = IR_StoreReg[1];
;;;1163           /* If IR TX mode is idle, must write one data firstly */
;;;1164           IR->TX_FIFO = 0;
;;;1165       }
;;;1166   
;;;1167       return;
;;;1168   }
;;;1169   
;;;1170   #endif
;;;1171   
;;;1172   /********************************************** ********************************************************/
;;;1173   /**************************************** [LCD DLPS] ************************************************/
;;;1174   /*******************************************************************************************************/
;;;1175   /*******************************************************************************************************/
;;;1176   #if USE_LCD_DLPS
;;;1177   
;;;1178   uint32_t LCD_StoreReg[5];
;;;1179   
;;;1180   /**
;;;1181     * @brief  LCD enter dlps callback function(Save LCD register values when system enter DLPS)
;;;1182     * @param  None
;;;1183     * @retval None
;;;1184     */
;;;1185   DATA_RAM_FUNCTION __STATIC_INLINE void LCD_DLPS_Enter(void)
;;;1186   {
;;;1187       /* Enable LCD 8080 interface controller function */
;;;1188       PERIPH->PERI_FUNC0_EN |= BIT(25);
;;;1189       /* Enable LCD 8080 interface controller clock */
;;;1190       PERIPH->PERI_CLK_CTRL1 |= BIT(28) | BIT(29);
;;;1191   
;;;1192       LCD_StoreReg[0] = *((volatile uint32_t *)0x400002A8UL) & (0x03 << 28);
;;;1193       LCD_StoreReg[1] = LCD->IMR;
;;;1194       LCD_StoreReg[2] = LCD->CTRL0;
;;;1195       LCD_StoreReg[3] = LCD->CTRL1;
;;;1196       LCD_StoreReg[4] = LCD->CFG;
;;;1197   
;;;1198   }
;;;1199   
;;;1200   /**
;;;1201     * @brief  LCD exit dlps callback function(Resume LCD register values when system exit DLPS)
;;;1202     * @param  None
;;;1203     * @retval None
;;;1204     */
;;;1205   DATA_RAM_FUNCTION __STATIC_INLINE void LCD_DLPS_Exit(void)
;;;1206   {
;;;1207       /* Enable LCD 8080 interface controller function */
;;;1208       PERIPH->PERI_FUNC0_EN |= BIT(25);
;;;1209       /* Enable LCD 8080 interface controller clock */
;;;1210       PERIPH->PERI_CLK_CTRL1 |= BIT(28) | BIT(29);
;;;1211   
;;;1212       /* Restore Dedicated SDIO pin option */
;;;1213       *((volatile uint32_t *)0x400002A8UL) &= ~(0x03 << 28);
;;;1214       *((volatile uint32_t *)0x400002A8UL) |= LCD_StoreReg[0];
;;;1215   
;;;1216       /* Initialize LCD */
;;;1217   
;;;1218       LCD->IMR    = LCD_StoreReg[1];
;;;1219       LCD->CTRL1  = LCD_StoreReg[3];
;;;1220       LCD->CFG    = LCD_StoreReg[4];
;;;1221       LCD->CTRL0  = LCD_StoreReg[2];
;;;1222   }
;;;1223   #endif
;;;1224   
;;;1225   /********************************************** ********************************************************/
;;;1226   /**************************************** [I2S0 DLPS] **************************************************/
;;;1227   /*******************************************************************************************************/
;;;1228   /*******************************************************************************************************/
;;;1229   #if USE_I2S0_DLPS
;;;1230   
;;;1231   uint32_t I2S0_StoreReg[4];
;;;1232   
;;;1233   /**
;;;1234     * @brief  I2S0 enter dlps callback function(Save I2S0 register values when system enter DLPS)
;;;1235     * @param  None
;;;1236     * @retval None
;;;1237     */
;;;1238   DATA_RAM_FUNCTION __STATIC_INLINE void I2S0_DLPS_Enter(void)
;;;1239   {
;;;1240       PERIPH->PERI_BD_FUNC0_EN |= BIT(1) | BIT(5) | BIT(8);
;;;1241   
;;;1242       I2S0_StoreReg[0] = I2S0->BCLK_DIV;
;;;1243       I2S0_StoreReg[1] = I2S0->CTRL0;
;;;1244       I2S0_StoreReg[2] = I2S0->CTRL1;
;;;1245       I2S0_StoreReg[3] = I2S0->DMA_TRDLR;
;;;1246   }
;;;1247   
;;;1248   /**
;;;1249     * @brief  I2S0 exit dlps callback function(Resume I2S0 register values when system exit DLPS)
;;;1250     * @param  None
;;;1251     * @retval None
;;;1252     */
;;;1253   DATA_RAM_FUNCTION __STATIC_INLINE void I2S0_DLPS_Exit(void)
;;;1254   {
;;;1255       PERIPH->PERI_BD_FUNC0_EN |= BIT(1) | BIT(5) | BIT(8);
;;;1256   
;;;1257       /* Reset I2S0 module */
;;;1258       I2S0->CTRL0 |= 1 << 0;
;;;1259       I2S0->CTRL0 &= ~(1 << 0);
;;;1260   
;;;1261       /* Initialize I2S0 */
;;;1262       I2S0->BCLK_DIV  = I2S0_StoreReg[0];
;;;1263       I2S0->CTRL1     = I2S0_StoreReg[2];
;;;1264       I2S0->DMA_TRDLR = I2S0_StoreReg[3];
;;;1265       I2S0->CTRL0     = I2S0_StoreReg[1];
;;;1266   }
;;;1267   #endif
;;;1268   
;;;1269   /********************************************** ********************************************************/
;;;1270   /**************************************** [I2S1 DLPS] **************************************************/
;;;1271   /*******************************************************************************************************/
;;;1272   /*******************************************************************************************************/
;;;1273   #if USE_I2S1_DLPS
;;;1274   
;;;1275   uint32_t I2S1_StoreReg[4];
;;;1276   
;;;1277   /**
;;;1278     * @brief  I2S1 enter dlps callback function(Save I2S1 register values when system enter DLPS)
;;;1279     * @param  None
;;;1280     * @retval None
;;;1281     */
;;;1282   DATA_RAM_FUNCTION __STATIC_INLINE void I2S1_DLPS_Enter(void)
;;;1283   {
;;;1284       PERIPH->PERI_BD_FUNC0_EN |= BIT(2) | BIT(6) | BIT(8);
;;;1285   
;;;1286       I2S1_StoreReg[0] = I2S1->BCLK_DIV;
;;;1287       I2S1_StoreReg[1] = I2S1->CTRL0;
;;;1288       I2S1_StoreReg[2] = I2S1->CTRL1;
;;;1289       I2S1_StoreReg[3] = I2S1->DMA_TRDLR;
;;;1290   }
;;;1291   
;;;1292   /**
;;;1293     * @brief  I2S1 exit dlps callback function(Resume I2S1 register values when system exit DLPS)
;;;1294     * @param  None
;;;1295     * @retval None
;;;1296     */
;;;1297   DATA_RAM_FUNCTION __STATIC_INLINE void I2S1_DLPS_Exit(void)
;;;1298   {
;;;1299       PERIPH->PERI_BD_FUNC0_EN |= BIT(2) | BIT(6) | BIT(8);
;;;1300   
;;;1301       /* Reset I2S1 module */
;;;1302       I2S1->CTRL0 |= 1 << 0;
;;;1303       I2S1->CTRL0 &= ~(1 << 0);
;;;1304   
;;;1305       /* Initialize I2S1 */
;;;1306       I2S1->BCLK_DIV  = I2S1_StoreReg[0];
;;;1307       I2S1->CTRL1     = I2S1_StoreReg[2];
;;;1308       I2S1->DMA_TRDLR = I2S1_StoreReg[3];
;;;1309       I2S1->CTRL0     = I2S1_StoreReg[1];
;;;1310   }
;;;1311   #endif
;;;1312   
;;;1313   /********************************************** ********************************************************/
;;;1314   /**************************************** [CODEC DLPS] ************************************************/
;;;1315   /*******************************************************************************************************/
;;;1316   /*******************************************************************************************************/
;;;1317   #if USE_CODEC_DLPS
;;;1318   
;;;1319   uint32_t CODEC_StoreReg[7];
;;;1320   
;;;1321   /**
;;;1322     * @brief  CODEC enter dlps callback function(Save CODEC register values when system enter DLPS)
;;;1323     * @param  None
;;;1324     * @retval None
;;;1325     */
;;;1326   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_DLPS_Enter(void)
;;;1327   {
;;;1328       /* Enable codec function and clock */
;;;1329       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1330   
;;;1331       CODEC_StoreReg[0] = CODEC->CR0;
;;;1332       CODEC_StoreReg[1] = CODEC->CR1;
;;;1333       CODEC_StoreReg[2] = CODEC->CR2;
;;;1334       CODEC_StoreReg[3] = CODEC->CLK_CTRL;
;;;1335       CODEC_StoreReg[4] = CODEC->I2S_CTRL;
;;;1336       CODEC_StoreReg[5] = CODEC->ADC_CTRL;
;;;1337       CODEC_StoreReg[6] = CODEC->DAC_CTRL;
;;;1338   }
;;;1339   
;;;1340   /**
;;;1341     * @brief  CODEC exit dlps callback function(Resume CODEC register values when system exit DLPS)
;;;1342     * @param  None
;;;1343     * @retval None
;;;1344     */
;;;1345   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_DLPS_Exit(void)
;;;1346   {
;;;1347       /* Enable codec function and clock */
;;;1348       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1349   
;;;1350       /* Initialize CODEC */
;;;1351       if ((CODEC_StoreReg[3] & 0x900) == 0x900)
;;;1352       {
;;;1353           /* Configure AMIC parameters */
;;;1354           CODEC->CR0 = CODEC_StoreReg[0];
;;;1355           CODEC->CR1 = CODEC_StoreReg[1];
;;;1356           CODEC->CR2 = CODEC_StoreReg[2];
;;;1357       }
;;;1358   
;;;1359       /*  Reset audio digital IP */
;;;1360       CODEC->AUDIO_CTRL = 0;
;;;1361       CODEC->AUDIO_CTRL = 1;
;;;1362   
;;;1363       CODEC->CLK_CTRL = CODEC_StoreReg[3];
;;;1364       CODEC->I2S_CTRL = CODEC_StoreReg[4];
;;;1365       CODEC->ADC_CTRL = CODEC_StoreReg[5];
;;;1366       CODEC->DAC_CTRL = CODEC_StoreReg[6];
;;;1367   }
;;;1368   #endif
;;;1369   
;;;1370   /********************************************** ********************************************************/
;;;1371   /**************************************** [CODEC_EQ1 DLPS] ************************************************/
;;;1372   /*******************************************************************************************************/
;;;1373   /*******************************************************************************************************/
;;;1374   #if USE_CODEC_EQ1_DLPS
;;;1375   
;;;1376   uint32_t CODEC_EQ1_StoreReg[5];
;;;1377   
;;;1378   /**
;;;1379     * @brief  CODEC_EQ1 enter dlps callback function(Save CODEC_EQ1 register values when system enter DLPS)
;;;1380     * @param  None
;;;1381     * @retval None
;;;1382     */
;;;1383   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ1_DLPS_Enter(void)
;;;1384   {
;;;1385       /* Enable codec function and clock */
;;;1386       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1387   
;;;1388       CODEC_EQ1_StoreReg[0] = CODEC_EQ1->EQ_H0;
;;;1389       CODEC_EQ1_StoreReg[1] = CODEC_EQ1->EQ_B1;
;;;1390       CODEC_EQ1_StoreReg[2] = CODEC_EQ1->EQ_B2;
;;;1391       CODEC_EQ1_StoreReg[3] = CODEC_EQ1->EQ_A1;
;;;1392       CODEC_EQ1_StoreReg[4] = CODEC_EQ1->EQ_A2;
;;;1393   }
;;;1394   
;;;1395   /**
;;;1396     * @brief  CODEC_EQ1 exit dlps callback function(Resume CODEC_EQ1 register values when system exit DLPS)
;;;1397     * @param  None
;;;1398     * @retval None
;;;1399     */
;;;1400   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ1_DLPS_Exit(void)
;;;1401   {
;;;1402       /* Enable codec function and clock */
;;;1403       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1404   
;;;1405       CODEC_EQ1->EQ_H0 = CODEC_EQ1_StoreReg[0];
;;;1406       CODEC_EQ1->EQ_B1 = CODEC_EQ1_StoreReg[1];
;;;1407       CODEC_EQ1->EQ_B2 = CODEC_EQ1_StoreReg[2];
;;;1408       CODEC_EQ1->EQ_A1 = CODEC_EQ1_StoreReg[3];
;;;1409       CODEC_EQ1->EQ_A2 = CODEC_EQ1_StoreReg[4];
;;;1410   }
;;;1411   #endif
;;;1412   
;;;1413   /********************************************** ********************************************************/
;;;1414   /**************************************** [CODEC_EQ2 DLPS] ************************************************/
;;;1415   /*******************************************************************************************************/
;;;1416   /*******************************************************************************************************/
;;;1417   #if USE_CODEC_EQ2_DLPS
;;;1418   
;;;1419   uint32_t CODEC_EQ2_StoreReg[5];
;;;1420   
;;;1421   /**
;;;1422     * @brief  CODEC_EQ2 enter dlps callback function(Save CODEC_EQ2 register values when system enter DLPS)
;;;1423     * @param  None
;;;1424     * @retval None
;;;1425     */
;;;1426   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ2_DLPS_Enter(void)
;;;1427   {
;;;1428       /* Enable codec function and clock */
;;;1429       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1430   
;;;1431       CODEC_EQ2_StoreReg[0] = CODEC_EQ2->EQ_H0;
;;;1432       CODEC_EQ2_StoreReg[1] = CODEC_EQ2->EQ_B1;
;;;1433       CODEC_EQ2_StoreReg[2] = CODEC_EQ2->EQ_B2;
;;;1434       CODEC_EQ2_StoreReg[3] = CODEC_EQ2->EQ_A1;
;;;1435       CODEC_EQ2_StoreReg[4] = CODEC_EQ2->EQ_A2;
;;;1436   }
;;;1437   
;;;1438   /**
;;;1439     * @brief  CODEC_EQ2 exit dlps callback function(Resume CODEC_EQ2 register values when system exit DLPS)
;;;1440     * @param  None
;;;1441     * @retval None
;;;1442     */
;;;1443   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ2_DLPS_Exit(void)
;;;1444   {
;;;1445       /* Enable codec function and clock */
;;;1446       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1447   
;;;1448       CODEC_EQ2->EQ_H0 = CODEC_EQ2_StoreReg[0];
;;;1449       CODEC_EQ2->EQ_B1 = CODEC_EQ2_StoreReg[1];
;;;1450       CODEC_EQ2->EQ_B2 = CODEC_EQ2_StoreReg[2];
;;;1451       CODEC_EQ2->EQ_A1 = CODEC_EQ2_StoreReg[3];
;;;1452       CODEC_EQ2->EQ_A2 = CODEC_EQ2_StoreReg[4];
;;;1453   }
;;;1454   #endif
;;;1455   
;;;1456   /********************************************** ********************************************************/
;;;1457   /**************************************** [CODEC_EQ3 DLPS] ************************************************/
;;;1458   /*******************************************************************************************************/
;;;1459   /*******************************************************************************************************/
;;;1460   #if USE_CODEC_EQ3_DLPS
;;;1461   
;;;1462   uint32_t CODEC_EQ3_StoreReg[5];
;;;1463   
;;;1464   /**
;;;1465     * @brief  CODEC_EQ3 enter dlps callback function(Save CODEC_EQ3 register values when system enter DLPS)
;;;1466     * @param  None
;;;1467     * @retval None
;;;1468     */
;;;1469   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ3_DLPS_Enter(void)
;;;1470   {
;;;1471       /* Enable codec function and clock */
;;;1472       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1473   
;;;1474       CODEC_EQ3_StoreReg[0] = CODEC_EQ3->EQ_H0;
;;;1475       CODEC_EQ3_StoreReg[1] = CODEC_EQ3->EQ_B1;
;;;1476       CODEC_EQ3_StoreReg[2] = CODEC_EQ3->EQ_B2;
;;;1477       CODEC_EQ3_StoreReg[3] = CODEC_EQ3->EQ_A1;
;;;1478       CODEC_EQ3_StoreReg[4] = CODEC_EQ3->EQ_A2;
;;;1479   }
;;;1480   
;;;1481   /**
;;;1482     * @brief  CODEC_EQ3 exit dlps callback function(Resume CODEC_EQ3 register values when system exit DLPS)
;;;1483     * @param  None
;;;1484     * @retval None
;;;1485     */
;;;1486   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ3_DLPS_Exit(void)
;;;1487   {
;;;1488       /* Enable codec function and clock */
;;;1489       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1490   
;;;1491       CODEC_EQ3->EQ_H0 = CODEC_EQ3_StoreReg[0];
;;;1492       CODEC_EQ3->EQ_B1 = CODEC_EQ3_StoreReg[1];
;;;1493       CODEC_EQ3->EQ_B2 = CODEC_EQ3_StoreReg[2];
;;;1494       CODEC_EQ3->EQ_A1 = CODEC_EQ3_StoreReg[3];
;;;1495       CODEC_EQ3->EQ_A2 = CODEC_EQ3_StoreReg[4];
;;;1496   }
;;;1497   #endif
;;;1498   
;;;1499   /********************************************** ********************************************************/
;;;1500   /**************************************** [CODEC_EQ4 DLPS] ************************************************/
;;;1501   /*******************************************************************************************************/
;;;1502   /*******************************************************************************************************/
;;;1503   #if USE_CODEC_EQ4_DLPS
;;;1504   
;;;1505   uint32_t CODEC_EQ4_StoreReg[5];
;;;1506   
;;;1507   /**
;;;1508     * @brief  CODEC_EQ4 enter dlps callback function(Save CODEC_EQ4 register values when system enter DLPS)
;;;1509     * @param  None
;;;1510     * @retval None
;;;1511     */
;;;1512   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ4_DLPS_Enter(void)
;;;1513   {
;;;1514       /* Enable codec function and clock */
;;;1515       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1516   
;;;1517       CODEC_EQ4_StoreReg[0] = CODEC_EQ4->EQ_H0;
;;;1518       CODEC_EQ4_StoreReg[1] = CODEC_EQ4->EQ_B1;
;;;1519       CODEC_EQ4_StoreReg[2] = CODEC_EQ4->EQ_B2;
;;;1520       CODEC_EQ4_StoreReg[3] = CODEC_EQ4->EQ_A1;
;;;1521       CODEC_EQ4_StoreReg[4] = CODEC_EQ4->EQ_A2;
;;;1522   }
;;;1523   
;;;1524   /**
;;;1525     * @brief  CODEC_EQ4 exit dlps callback function(Resume CODEC_EQ4 register values when system exit DLPS)
;;;1526     * @param  None
;;;1527     * @retval None
;;;1528     */
;;;1529   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ4_DLPS_Exit(void)
;;;1530   {
;;;1531       /* Enable codec function and clock */
;;;1532       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1533   
;;;1534       CODEC_EQ4->EQ_H0 = CODEC_EQ4_StoreReg[0];
;;;1535       CODEC_EQ4->EQ_B1 = CODEC_EQ4_StoreReg[1];
;;;1536       CODEC_EQ4->EQ_B2 = CODEC_EQ4_StoreReg[2];
;;;1537       CODEC_EQ4->EQ_A1 = CODEC_EQ4_StoreReg[3];
;;;1538       CODEC_EQ4->EQ_A2 = CODEC_EQ4_StoreReg[4];
;;;1539   }
;;;1540   #endif
;;;1541   
;;;1542   /********************************************** ********************************************************/
;;;1543   /**************************************** [CODEC_EQ5 DLPS] ************************************************/
;;;1544   /*******************************************************************************************************/
;;;1545   /*******************************************************************************************************/
;;;1546   #if USE_CODEC_EQ5_DLPS
;;;1547   
;;;1548   uint32_t CODEC_EQ5_StoreReg[5];
;;;1549   
;;;1550   /**
;;;1551     * @brief  CODEC_EQ5 enter dlps callback function(Save CODEC_EQ5 register values when system enter DLPS)
;;;1552     * @param  None
;;;1553     * @retval None
;;;1554     */
;;;1555   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ5_DLPS_Enter(void)
;;;1556   {
;;;1557       /* Enable codec function and clock */
;;;1558       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1559   
;;;1560       CODEC_EQ5_StoreReg[0] = CODEC_EQ5->EQ_H0;
;;;1561       CODEC_EQ5_StoreReg[1] = CODEC_EQ5->EQ_B1;
;;;1562       CODEC_EQ5_StoreReg[2] = CODEC_EQ5->EQ_B2;
;;;1563       CODEC_EQ5_StoreReg[3] = CODEC_EQ5->EQ_A1;
;;;1564       CODEC_EQ5_StoreReg[4] = CODEC_EQ5->EQ_A2;
;;;1565   }
;;;1566   
;;;1567   /**
;;;1568     * @brief  CODEC_EQ5 exit dlps callback function(Resume CODEC_EQ5 register values when system exit DLPS)
;;;1569     * @param  None
;;;1570     * @retval None
;;;1571     */
;;;1572   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ5_DLPS_Exit(void)
;;;1573   {
;;;1574       /* Enable codec function and clock */
;;;1575       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1576   
;;;1577       CODEC_EQ5->EQ_H0 = CODEC_EQ5_StoreReg[0];
;;;1578       CODEC_EQ5->EQ_B1 = CODEC_EQ5_StoreReg[1];
;;;1579       CODEC_EQ5->EQ_B2 = CODEC_EQ5_StoreReg[2];
;;;1580       CODEC_EQ5->EQ_A1 = CODEC_EQ5_StoreReg[3];
;;;1581       CODEC_EQ5->EQ_A2 = CODEC_EQ5_StoreReg[4];
;;;1582   }
;;;1583   #endif
;;;1584   
;;;1585   /**
;;;1586     * @brief  Set Log and SWD pins to SW mode.
;;;1587     * @param  void.
;;;1588     * @retval void.
;;;1589     */
;;;1590   DATA_RAM_FUNCTION __STATIC_INLINE void Log_SWD_DLPS_Enter(void)
;;;1591   {
;;;1592       if (OTP->SWD_ENABLE)
;;;1593       {
;;;1594           Pad_Config(P1_0, PAD_SW_MODE, PAD_IS_PWRON, PAD_PULL_DOWN, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;1595           Pad_Config(P1_1, PAD_SW_MODE, PAD_IS_PWRON, PAD_PULL_DOWN, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;1596       }
;;;1597   
;;;1598       Pad_Config(OTP->logPin, PAD_SW_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;1599   
;;;1600   }
;;;1601   
;;;1602   /**
;;;1603     * @brief  Set Log and SWD pins to PINMUX mode.
;;;1604     * @param  void.
;;;1605     * @retval void.
;;;1606     */
;;;1607   DATA_RAM_FUNCTION __STATIC_INLINE void Log_SWD_DLPS_Exit(void)
;;;1608   {
;;;1609       Pad_Config(OTP->logPin, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_NONE, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;1610   
;;;1611       if (OTP->SWD_ENABLE)
;;;1612       {
;;;1613           Pad_Config(P1_0, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;1614           Pad_Config(P1_1, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;1615       }
;;;1616   }
;;;1617   
;;;1618   /********************************************** ********************************************************/
;;;1619   /*********************************** [USER Exit DLPS CALLBACK FUCN] *****************************************/
;;;1620   /*******************************************************************************************************/
;;;1621   /*******************************************************************************************************/
;;;1622   #if USE_USER_DEFINE_DLPS_EXIT_CB
;;;1623   
;;;1624   DLPS_IO_ExitDlpsCB User_IO_ExitDlpsCB = NULL;
;;;1625   
;;;1626   #endif /* USE_USER_DEFINE_DLPS_EXIT_CB */
;;;1627   
;;;1628   /********************************************** ********************************************************/
;;;1629   /*********************************** [USER Enter DLPS CALLBACK FUCN] *****************************************/
;;;1630   /*******************************************************************************************************/
;;;1631   /*******************************************************************************************************/
;;;1632   #if USE_USER_DEFINE_DLPS_ENTER_CB
;;;1633   
;;;1634   DLPS_IO_EnterDlpsCB User_IO_EnterDlpsCB = NULL;
;;;1635   
;;;1636   #endif /* USE_USER_DEFINE_DLPS_EXIT_CB */
;;;1637   
;;;1638   /********************************************** ********************************************************/
;;;1639   /*********************************** [Enter & Exit DLPS CALLBACK FUNC] *********************************/
;;;1640   /*******************************************************************************************************/
;;;1641   /*******************************************************************************************************/
;;;1642   #if USE_IO_DRIVER_DLPS
;;;1643   
;;;1644   /**
;;;1645     * @brief  IO enter dlps callback function
;;;1646     * @param  None
;;;1647     * @retval None
;;;1648     */
;;;1649   DATA_RAM_FUNCTION void DLPS_IO_EnterDlpsCb(void)
;;;1650   {
;;;1651       /* low stack do it instead */
;;;1652   //    Pad_ClearAllWakeupINT();
;;;1653   
;;;1654   //    DBG_DIRECT("DLPS_IO_EnterDlpsCb");
;;;1655       NVIC_DisableIRQ(System_IRQn);
;;;1656       CPU_DLPS_Enter();
;;;1657   
;;;1658       Pinmux_DLPS_Enter();
;;;1659   
;;;1660   #if USE_USER_DEFINE_DLPS_ENTER_CB
;;;1661       if (User_IO_EnterDlpsCB)
        0x00207d88:    6898        .h      LDR      r0,[r3,#8]
        0x00207d8a:    b100        ..      CBZ      r0,0x207d8e ; DLPS_IO_EnterDlpsCb + 106
;;;1662       {
;;;1663           User_IO_EnterDlpsCB();
        0x00207d8c:    4780        .G      BLX      r0
;;; .\..\..\..\src\mcu\peripheral\rtl876x_io_dlps.c (1592)
        0x00207d8e:    f44f1500    O...    MOV      r5,#0x200000
        0x00207d92:    f8950334    ..4.    LDRB     r0,[r5,#0x334]
        0x00207d96:    07c0        ..      LSLS     r0,r0,#31
        0x00207d98:    d00f        ..      BEQ      0x207dba ; DLPS_IO_EnterDlpsCb + 150
;;;1593       {
;;;1594           Pad_Config(P1_0, PAD_SW_MODE, PAD_IS_PWRON, PAD_PULL_DOWN, PAD_OUT_DISABLE, PAD_OUT_LOW);
        0x00207d9a:    9400        ..      STR      r4,[sp,#0]
        0x00207d9c:    2302        .#      MOVS     r3,#2
        0x00207d9e:    2201        ."      MOVS     r2,#1
        0x00207da0:    2100        .!      MOVS     r1,#0
        0x00207da2:    2008        .       MOVS     r0,#8
        0x00207da4:    9401        ..      STR      r4,[sp,#4]
        0x00207da6:    f609fb19    ....    BL       Pad_Config ; 0x113dc
;;;1595           Pad_Config(P1_1, PAD_SW_MODE, PAD_IS_PWRON, PAD_PULL_DOWN, PAD_OUT_DISABLE, PAD_OUT_LOW);
        0x00207daa:    9400        ..      STR      r4,[sp,#0]
        0x00207dac:    2302        .#      MOVS     r3,#2
        0x00207dae:    2201        ."      MOVS     r2,#1
        0x00207db0:    2100        .!      MOVS     r1,#0
        0x00207db2:    2009        .       MOVS     r0,#9
        0x00207db4:    9401        ..      STR      r4,[sp,#4]
        0x00207db6:    f609fb11    ....    BL       Pad_Config ; 0x113dc
;;;1596       }
;;;1597   
;;;1598       Pad_Config(OTP->logPin, PAD_SW_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
        0x00207dba:    9400        ..      STR      r4,[sp,#0]
        0x00207dbc:    9401        ..      STR      r4,[sp,#4]
        0x00207dbe:    f8950398    ....    LDRB     r0,[r5,#0x398]
        0x00207dc2:    2301        .#      MOVS     r3,#1
        0x00207dc4:    f000003f    ..?.    AND      r0,r0,#0x3f
        0x00207dc8:    461a        .F      MOV      r2,r3
        0x00207dca:    2100        .!      MOVS     r1,#0
        0x00207dcc:    f609fb06    ....    BL       Pad_Config ; 0x113dc
;;;1599   
;;;1600   }
;;;1601   
;;;1602   /**
;;;1603     * @brief  Set Log and SWD pins to PINMUX mode.
;;;1604     * @param  void.
;;;1605     * @retval void.
;;;1606     */
;;;1607   DATA_RAM_FUNCTION __STATIC_INLINE void Log_SWD_DLPS_Exit(void)
;;;1608   {
;;;1609       Pad_Config(OTP->logPin, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_NONE, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;1610   
;;;1611       if (OTP->SWD_ENABLE)
;;;1612       {
;;;1613           Pad_Config(P1_0, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;1614           Pad_Config(P1_1, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;1615       }
;;;1616   }
;;;1617   
;;;1618   /********************************************** ********************************************************/
;;;1619   /*********************************** [USER Exit DLPS CALLBACK FUCN] *****************************************/
;;;1620   /*******************************************************************************************************/
;;;1621   /*******************************************************************************************************/
;;;1622   #if USE_USER_DEFINE_DLPS_EXIT_CB
;;;1623   
;;;1624   DLPS_IO_ExitDlpsCB User_IO_ExitDlpsCB = NULL;
;;;1625   
;;;1626   #endif /* USE_USER_DEFINE_DLPS_EXIT_CB */
;;;1627   
;;;1628   /********************************************** ********************************************************/
;;;1629   /*********************************** [USER Enter DLPS CALLBACK FUCN] *****************************************/
;;;1630   /*******************************************************************************************************/
;;;1631   /*******************************************************************************************************/
;;;1632   #if USE_USER_DEFINE_DLPS_ENTER_CB
;;;1633   
;;;1634   DLPS_IO_EnterDlpsCB User_IO_EnterDlpsCB = NULL;
;;;1635   
;;;1636   #endif /* USE_USER_DEFINE_DLPS_EXIT_CB */
;;;1637   
;;;1638   /********************************************** ********************************************************/
;;;1639   /*********************************** [Enter & Exit DLPS CALLBACK FUNC] *********************************/
;;;1640   /*******************************************************************************************************/
;;;1641   /*******************************************************************************************************/
;;;1642   #if USE_IO_DRIVER_DLPS
;;;1643   
;;;1644   /**
;;;1645     * @brief  IO enter dlps callback function
;;;1646     * @param  None
;;;1647     * @retval None
;;;1648     */
;;;1649   DATA_RAM_FUNCTION void DLPS_IO_EnterDlpsCb(void)
;;;1650   {
;;;1651       /* low stack do it instead */
;;;1652   //    Pad_ClearAllWakeupINT();
;;;1653   
;;;1654   //    DBG_DIRECT("DLPS_IO_EnterDlpsCb");
;;;1655       NVIC_DisableIRQ(System_IRQn);
;;;1656       CPU_DLPS_Enter();
;;;1657   
;;;1658       Pinmux_DLPS_Enter();
;;;1659   
;;;1660   #if USE_USER_DEFINE_DLPS_ENTER_CB
;;;1661       if (User_IO_EnterDlpsCB)
;;;1662       {
;;;1663           User_IO_EnterDlpsCB();
;;;1664       }
;;;1665   #endif
;;;1666   
;;;1667   #if USE_I2C0_DLPS
;;;1668       I2C0_DLPS_Enter();
;;;1669   #endif
;;;1670   
;;;1671   #if USE_I2C1_DLPS
;;;1672       I2C1_DLPS_Enter();
;;;1673   #endif
;;;1674   
;;;1675   #if USE_TIM_DLPS
;;;1676       TIM_DLPS_Enter();
;;;1677   #endif
;;;1678   
;;;1679   #if USE_QDECODER_DLPS
;;;1680       QuadDecoder_DLPS_Enter();
;;;1681   #endif
;;;1682   
;;;1683   #if USE_IR_DLPS
;;;1684       IR_DLPS_Enter();
;;;1685   #endif
;;;1686   
;;;1687   #if USE_UART_DLPS
;;;1688       UART_DLPS_Enter();
;;;1689   #endif
;;;1690   
;;;1691   #if USE_UART1_DLPS
;;;1692       UART1_DLPS_Enter();
;;;1693   #endif
;;;1694   
;;;1695   #if USE_UART2_DLPS
;;;1696       UART2_DLPS_Enter();
;;;1697   #endif
;;;1698   
;;;1699   #if USE_SPI0_DLPS
;;;1700       SPI0_DLPS_Enter();
;;;1701   #endif
;;;1702   
;;;1703   #if USE_SPI1_DLPS
;;;1704       SPI1_DLPS_Enter();
;;;1705   #endif
;;;1706   
;;;1707   #if USE_SPI2W_DLPS
;;;1708       SPI2W_DLPS_Enter();
;;;1709   #endif
;;;1710   
;;;1711   #if USE_KEYSCAN_DLPS
;;;1712       KeyScan_DLPS_Enter();
;;;1713   #endif
;;;1714   
;;;1715   #if USE_GPIO_DLPS
;;;1716       GPIO_DLPS_Enter();
;;;1717   #endif
;;;1718   
;;;1719   #if USE_ADC_DLPS
;;;1720       ADC_DLPS_Enter();
;;;1721   #endif
;;;1722   
;;;1723   #if USE_LCD_DLPS
;;;1724       LCD_DLPS_Enter();
;;;1725   #endif
;;;1726   
;;;1727   #if USE_I2S0_DLPS
;;;1728       I2S0_DLPS_Enter();
;;;1729   #endif
;;;1730   
;;;1731   #if USE_I2S1_DLPS
;;;1732       I2S1_DLPS_Enter();
;;;1733   #endif
;;;1734   
;;;1735   #if USE_CODEC_DLPS
;;;1736       CODEC_DLPS_Enter();
;;;1737   #endif
;;;1738   
;;;1739   #if USE_CODEC_EQ1_DLPS
;;;1740       CODEC_EQ1_DLPS_Enter();
;;;1741   #endif
;;;1742   
;;;1743   #if USE_CODEC_EQ2_DLPS
;;;1744       CODEC_EQ2_DLPS_Enter();
;;;1745   #endif
;;;1746   
;;;1747   #if USE_CODEC_EQ3_DLPS
;;;1748       CODEC_EQ3_DLPS_Enter();
;;;1749   #endif
;;;1750   
;;;1751   #if USE_CODEC_EQ4_DLPS
;;;1752       CODEC_EQ4_DLPS_Enter();
;;;1753   #endif
;;;1754   
;;;1755   #if USE_CODEC_EQ5_DLPS
;;;1756       CODEC_EQ5_DLPS_Enter();
;;;1757   #endif
;;;1758   
;;;1759       Log_SWD_DLPS_Enter();
;;;1760   
;;;1761   }
        0x00207dd0:    bd7c        |.      POP      {r2-r6,pc}
    DLPS_IO_ExitDlpsCb
        0x00207dd2:    b530        0.      PUSH     {r4,r5,lr}
        0x00207dd4:    4931        1I      LDR      r1,[pc,#196] ; [0x207e9c] = 0x208160
;;; .\..\..\..\src\mcu\peripheral\rtl876x_io_dlps.c (135)
        0x00207dd6:    2000        .       MOVS     r0,#0
        0x00207dd8:    b085        ..      SUB      sp,sp,#0x14
        0x00207dda:    3184        .1      ADDS     r1,r1,#0x84
        0x00207ddc:    0082        ..      LSLS     r2,r0,#2
        0x00207dde:    f1024280    ...B    ADD      r2,r2,#0x40000000
        0x00207de2:    f8513020    Q. 0    LDR      r3,[r1,r0,LSL #2]
        0x00207de6:    f8c23280    ...2    STR      r3,[r2,#0x280]
        0x00207dea:    1c40        @.      ADDS     r0,r0,#1
        0x00207dec:    b2c0        ..      UXTB     r0,r0
        0x00207dee:    280a        .(      CMP      r0,#0xa
        0x00207df0:    d3f4        ..      BCC      0x207ddc ; DLPS_IO_ExitDlpsCb + 10
;;;136        {
;;;137            PINMUX->CFG[i] = Pinmux_StoreReg[i];
;;;138        }
;;;139    
;;;140        return;
;;;141    }
;;;142    #endif
;;;143    
;;;144    /********************************************** ********************************************************/
;;;145    /**************************************** [GPIO DLPS] **************************************************/
;;;146    /*******************************************************************************************************/
;;;147    /*******************************************************************************************************/
;;;148    #if USE_GPIO_DLPS
;;;149    
;;;150    __STATIC_INLINE void GPIO_DLPS_Enter(void);
;;;151    __STATIC_INLINE void GPIO_DLPS_Exit(void);
;;;152    
;;;153    uint32_t GPIO_StoreReg[9];         /*  This array should be placed in RAM ON/Buffer ON.    */
;;;154    
;;;155    /**
;;;156      * @brief  GPIO enter dlps callback function(Save GPIO register values when system enter DLPS)
;;;157      * @param  None
;;;158      * @retval None
;;;159      */
;;;160    DATA_RAM_FUNCTION __STATIC_INLINE void GPIO_DLPS_Enter(void)
;;;161    {
;;;162        PERIPH->PERI_FUNC1_EN |= BIT_PERI_GPIO_EN;
;;;163        PERIPH->PERI_CLK_CTRL |= (BIT_SOC_ACTCK_GPIO_EN | SYSBLK_SLPCK_GPIO_EN_Msk);
;;;164    
;;;165        GPIO_StoreReg[0] = GPIO->DATAOUT;
;;;166        GPIO_StoreReg[1] = GPIO->DATADIR;
;;;167        GPIO_StoreReg[2] = GPIO->DATASRC;
;;;168        GPIO_StoreReg[3] = GPIO->INTEN;
;;;169        GPIO_StoreReg[4] = GPIO->INTMASK;
;;;170        GPIO_StoreReg[5] = GPIO->INTTYPE;
;;;171        GPIO_StoreReg[6] = GPIO->INTPOLARITY;
;;;172        GPIO_StoreReg[7] = GPIO->DEBOUNCE;
;;;173        GPIO_StoreReg[8] = *(__IO uint32_t *)(0x40000344UL);
;;;174    
;;;175        return;
;;;176    }
;;;177    
;;;178    /**
;;;179      * @brief  GPIO exit dlps callback function(Resume GPIO register values when system exit DLPS)
;;;180      * @param  None
;;;181      * @retval None
;;;182      */
;;;183    DATA_RAM_FUNCTION __STATIC_INLINE void GPIO_DLPS_Exit(void)
;;;184    {
;;;185        PERIPH->PERI_FUNC1_EN |= BIT_PERI_GPIO_EN;
;;;186        PERIPH->PERI_CLK_CTRL |= (BIT_SOC_ACTCK_GPIO_EN | SYSBLK_SLPCK_GPIO_EN_Msk);
;;;187    
;;;188        GPIO->DATADIR       = GPIO_StoreReg[1];
;;;189        GPIO->DATASRC       = GPIO_StoreReg[2];
;;;190        GPIO->INTMASK       = GPIO_StoreReg[4];
;;;191        GPIO->INTTYPE       = GPIO_StoreReg[5];
;;;192        GPIO->INTPOLARITY   = GPIO_StoreReg[6];
;;;193        GPIO->DEBOUNCE      = GPIO_StoreReg[7];
;;;194        GPIO->DATAOUT       = GPIO_StoreReg[0];
;;;195        GPIO->INTCLR        = ~(GPIO_StoreReg[1]);
;;;196        GPIO->INTEN         = GPIO_StoreReg[3];
;;;197        *(__IO uint32_t *)(0x40000344UL) = GPIO_StoreReg[8];
;;;198    
;;;199        return;
;;;200    }
;;;201    #endif  /* USE_GPIO_DLPS */
;;;202    
;;;203    
;;;204    /********************************************** ********************************************************/
;;;205    /**************************************** [KEYSCAN DLPS] ***********************************************/
;;;206    /*******************************************************************************************************/
;;;207    /*******************************************************************************************************/
;;;208    #if USE_KEYSCAN_DLPS
;;;209    __STATIC_INLINE void KeyScan_DLPS_Enter(void);
;;;210    __STATIC_INLINE void KeyScan_DLPS_Exit(void);
;;;211    
;;;212    uint32_t KeyScan_StoreReg[7];      /*  This array should be placed in RAM ON/Buffer ON.    */
;;;213    
;;;214    /**
;;;215      * @brief  KEYSCAN enter dlps callback function(Save KEYSCAN register values when system enter DLPS)
;;;216      * @param  None
;;;217      * @retval None
;;;218      */
;;;219    DATA_RAM_FUNCTION __STATIC_INLINE void KeyScan_DLPS_Enter(void)
;;;220    {
;;;221        /*Open 5M clock source*/
;;;222        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;223        SYSBLKCTRL->u_20C.RSVD_20C |= BIT29;
;;;224    
;;;225        PERIPH->PERI_FUNC0_EN |= BIT_PERI_KEYSCAN_EN;
;;;226        PERIPH->PERI_CLK_CTRL1 |= (BIT_SOC_ACTCK_KEYSCAN_EN | SYSBLK_SLPCK_KEYSCAN_EN_Msk);
;;;227    
;;;228        KeyScan_StoreReg[0] = KEYSCAN->CLKDIV;               /* 0x00 */
;;;229        KeyScan_StoreReg[1] = KEYSCAN->TIMERCR;              /* 0x04 */
;;;230        KeyScan_StoreReg[2] = KEYSCAN->CR;                   /* 0x08 */
;;;231        KeyScan_StoreReg[3] = KEYSCAN->COLCR;                /* 0x0C */
;;;232        KeyScan_StoreReg[4] = KEYSCAN->ROWCR;                /* 0x10 */
;;;233        KeyScan_StoreReg[6] = KEYSCAN->INTMASK;              /* 0x18 */
;;;234    
;;;235        return;
;;;236    }
;;;237    
;;;238    /**
;;;239      * @brief  KEYSCAN exit dlps callback function(Resume KEYSCAN register values when system exit DLPS)
;;;240      * @param  None
;;;241      * @retval None
;;;242      */
;;;243    DATA_RAM_FUNCTION __STATIC_INLINE void KeyScan_DLPS_Exit(void)
;;;244    {
;;;245        /*Open 5M clock source*/
;;;246        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;247        SYSBLKCTRL->u_20C.RSVD_20C |= BIT29;
;;;248    
;;;249        PERIPH->PERI_FUNC0_EN |= BIT_PERI_KEYSCAN_EN;
;;;250        PERIPH->PERI_CLK_CTRL1 |= (BIT_SOC_ACTCK_KEYSCAN_EN | SYSBLK_SLPCK_KEYSCAN_EN_Msk);
;;;251    
;;;252        /* Set FSM to idle state */
;;;253        KEYSCAN->CR &= ~BIT31;
;;;254        KEYSCAN->CLKDIV = KeyScan_StoreReg[0];
;;;255        KEYSCAN->CR = (KeyScan_StoreReg[2] & (~(BIT31)));
;;;256        KEYSCAN->TIMERCR = KeyScan_StoreReg[1];
;;;257        KEYSCAN->COLCR = KeyScan_StoreReg[3];
;;;258        KEYSCAN->ROWCR = KeyScan_StoreReg[4];
;;;259        KEYSCAN->INTMASK = KeyScan_StoreReg[6];
;;;260        KEYSCAN->CR |= (KeyScan_StoreReg[2] & ((BIT31)));
;;;261    
;;;262        return;
;;;263    }
;;;264    #endif /* USE_KEYSCAN_DLPS */
;;;265    
;;;266    
;;;267    /********************************************** ********************************************************/
;;;268    /**************************************** [QDEC DLPS] **************************************************/
;;;269    /*******************************************************************************************************/
;;;270    /*******************************************************************************************************/
;;;271    #if USE_QDECODER_DLPS
;;;272    __STATIC_INLINE void QuadDecoder_DLPS_Enter(void);
;;;273    __STATIC_INLINE void QuadDecoder_DLPS_Exit(void);
;;;274    
;;;275    uint32_t QuadDecoder_StoreReg[5];  /*  This array should be placed in RAM ON/Buffer ON.    */
;;;276    
;;;277    /**
;;;278      * @brief  QDEC enter dlps callback function(Save QDEC register values when system enter DLPS)
;;;279      * @param  None
;;;280      * @retval None
;;;281      */
;;;282    DATA_RAM_FUNCTION __STATIC_INLINE void QuadDecoder_DLPS_Enter(void)
;;;283    {
;;;284        /*Open 20M clock source*/
;;;285        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;286        SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;287        SYSBLKCTRL->u_218.PERI_FUNC0_EN |= SYSBLK_QDECODE_EN_Msk;
;;;288        SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_QDECODE_EN_Msk | SYSBLK_SLPCK_QDECODE_EN_Msk);
;;;289    
;;;290        QuadDecoder_StoreReg[0] = QDEC->REG_DIV;
;;;291        QuadDecoder_StoreReg[1] = QDEC->REG_CR_X;
;;;292        QuadDecoder_StoreReg[2] = QDEC->REG_CR_Y;
;;;293        QuadDecoder_StoreReg[3] = QDEC->REG_CR_Z;
;;;294        QuadDecoder_StoreReg[4] = QDEC->INT_MASK;
;;;295    
;;;296        return;
;;;297    }
;;;298    
;;;299    /**
;;;300      * @brief  QDEC exit dlps callback function(Resume QDEC register values when system exit DLPS)
;;;301      * @param  None
;;;302      * @retval None
;;;303      */
;;;304    DATA_RAM_FUNCTION __STATIC_INLINE void QuadDecoder_DLPS_Exit(void)
;;;305    {
;;;306        /*Open 20M clock source*/
;;;307        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;308        SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;309        SYSBLKCTRL->u_218.PERI_FUNC0_EN |= SYSBLK_QDECODE_EN_Msk;
;;;310        SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_QDECODE_EN_Msk | SYSBLK_SLPCK_QDECODE_EN_Msk);
;;;311    
;;;312        //clear flags
;;;313        QDEC->REG_DIV  = QuadDecoder_StoreReg[0];
;;;314        QDEC->REG_CR_X = QuadDecoder_StoreReg[1];
;;;315        QDEC->REG_CR_Y = QuadDecoder_StoreReg[2];
;;;316        QDEC->REG_CR_Z = QuadDecoder_StoreReg[3];
;;;317        QDEC->INT_MASK = QuadDecoder_StoreReg[4];
;;;318    
;;;319        return;
;;;320    }
;;;321    #endif
;;;322    
;;;323    /********************************************** ********************************************************/
;;;324    /**************************************** [SPI0 DLPS] **************************************************/
;;;325    /*******************************************************************************************************/
;;;326    /*******************************************************************************************************/
;;;327    #if USE_SPI0_DLPS
;;;328    __STATIC_INLINE void SPI0_DLPS_Enter(void);
;;;329    __STATIC_INLINE void SPI0_DLPS_Exit(void);
;;;330    
;;;331    uint32_t SPI0_StoreReg[14];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;332    
;;;333    /**
;;;334      * @brief  SPI0 enter dlps callback function(Save SPI0 register values when system enter DLPS)
;;;335      * @param  None
;;;336      * @retval None
;;;337      */
;;;338    DATA_RAM_FUNCTION __STATIC_INLINE void SPI0_DLPS_Enter(void)
;;;339    {
;;;340        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI0_EN_Msk;
;;;341        SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_SPI0_EN_Msk | SYSBLK_SLPCK_SPI0_EN_Msk);
;;;342    
;;;343        SPI0_StoreReg[0] = SPI0->CTRLR0;
;;;344        SPI0_StoreReg[1] = SPI0->CTRLR1;
;;;345        SPI0_StoreReg[2] = SPI0->SSIENR;
;;;346        SPI0_StoreReg[3] = SPI0->SER;
;;;347        SPI0_StoreReg[4] = SPI0->BAUDR;
;;;348        SPI0_StoreReg[5] = SPI0->TXFTLR;
;;;349        SPI0_StoreReg[6] = SPI0->RXFTLR;
;;;350        SPI0_StoreReg[7] = SPI0->IMR;
;;;351        SPI0_StoreReg[8] = SPI0->DMACR;
;;;352        SPI0_StoreReg[9] = SPI0->DMATDLR;
;;;353        SPI0_StoreReg[10] = SPI0->DMARDLR;
;;;354        SPI0_StoreReg[11] = SPI0->RX_SAMPLE_DLY;
;;;355        SPI0_StoreReg[12] = *(volatile uint32_t *)0x40000308;
;;;356        SPI0_StoreReg[13] = *(volatile uint32_t *)0x4000035CUL;
;;;357    }
;;;358    
;;;359    /**
;;;360      * @brief  SPI0 exit dlps callback function(Resume SPI0 register values when system exit DLPS)
;;;361      * @param  None
;;;362      * @retval None
;;;363      */
;;;364    DATA_RAM_FUNCTION __STATIC_INLINE void SPI0_DLPS_Exit(void)
;;;365    {
;;;366        *(volatile uint32_t *)0x4000035CUL = SPI0_StoreReg[13];
;;;367        *(volatile uint32_t *)0x40000308 = SPI0_StoreReg[12];
;;;368        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI0_EN_Msk;
;;;369        SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_SPI0_EN_Msk | SYSBLK_SLPCK_SPI0_EN_Msk);
;;;370    
;;;371        SPI0->CTRLR0 = SPI0_StoreReg[0];
;;;372        SPI0->CTRLR1 = SPI0_StoreReg[1];
;;;373        SPI0->SER = SPI0_StoreReg[3];
;;;374        SPI0->BAUDR = SPI0_StoreReg[4];
;;;375        SPI0->TXFTLR = SPI0_StoreReg[5];
;;;376        SPI0->RXFTLR = SPI0_StoreReg[6];
;;;377        SPI0->IMR = SPI0_StoreReg[7];
;;;378        SPI0->DMACR = SPI0_StoreReg[8];
;;;379        SPI0->DMATDLR = SPI0_StoreReg[9];
;;;380        SPI0->DMARDLR = SPI0_StoreReg[10];
;;;381        SPI0->RX_SAMPLE_DLY = SPI0_StoreReg[11];
;;;382    
;;;383        /* Enable the selected SPI peripheral */
;;;384        SPI0->SSIENR = SPI0_StoreReg[2];
;;;385    }
;;;386    #endif
;;;387    
;;;388    
;;;389    /********************************************** ********************************************************/
;;;390    /**************************************** [SPI1 DLPS] **************************************************/
;;;391    /*******************************************************************************************************/
;;;392    /*******************************************************************************************************/
;;;393    #if USE_SPI1_DLPS
;;;394    __STATIC_INLINE void SPI1_DLPS_Enter(void);
;;;395    __STATIC_INLINE void SPI1_DLPS_Exit(void);
;;;396    
;;;397    uint32_t SPI1_StoreReg[14];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;398    
;;;399    /**
;;;400      * @brief  SPI1 enter dlps callback function(Save SPI1 register values when system enter DLPS)
;;;401      * @param  None
;;;402      * @retval None
;;;403      */
;;;404    DATA_RAM_FUNCTION __STATIC_INLINE void SPI1_DLPS_Enter(void)
;;;405    {
;;;406        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI1_EN_Msk;
;;;407        SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_SPI1_EN_Msk | SYSBLK_SLPCK_SPI1_EN_Msk);
;;;408    
;;;409        SPI1_StoreReg[0] = SPI1->CTRLR0;
;;;410        SPI1_StoreReg[1] = SPI1->CTRLR1;
;;;411        SPI1_StoreReg[2] = SPI1->SSIENR;
;;;412        SPI1_StoreReg[3] = SPI1->SER;
;;;413        SPI1_StoreReg[4] = SPI1->BAUDR;
;;;414        SPI1_StoreReg[5] = SPI1->TXFTLR;
;;;415        SPI1_StoreReg[6] = SPI1->RXFTLR;
;;;416        SPI1_StoreReg[7] = SPI1->IMR;
;;;417        SPI1_StoreReg[8] = SPI1->DMACR;
;;;418        SPI1_StoreReg[9] = SPI1->DMATDLR;
;;;419        SPI1_StoreReg[10] = SPI1->DMARDLR;
;;;420        SPI1_StoreReg[11] = SPI1->RX_SAMPLE_DLY;
;;;421        SPI1_StoreReg[12] = *(volatile uint32_t *)0x40000308;
;;;422        SPI1_StoreReg[13] = *(volatile uint32_t *)0x4000035CUL;
;;;423    }
;;;424    
;;;425    /**
;;;426      * @brief  SPI1 exit dlps callback function(Resume SPI1 register values when system exit DLPS)
;;;427      * @param  None
;;;428      * @retval None
;;;429      */
;;;430    DATA_RAM_FUNCTION __STATIC_INLINE void SPI1_DLPS_Exit(void)
;;;431    {
;;;432        *(volatile uint32_t *)0x4000035CUL = SPI1_StoreReg[13];
;;;433        *(volatile uint32_t *)0x40000308 = SPI1_StoreReg[12];
;;;434        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI1_EN_Msk;
;;;435        SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_SPI1_EN_Msk | SYSBLK_SLPCK_SPI1_EN_Msk);
;;;436    
;;;437        SPI1->CTRLR0 = SPI1_StoreReg[0];
;;;438        SPI1->CTRLR1 = SPI1_StoreReg[1];
;;;439        SPI1->SER = SPI1_StoreReg[3];
;;;440        SPI1->BAUDR = SPI1_StoreReg[4];
;;;441        SPI1->TXFTLR = SPI1_StoreReg[5];
;;;442        SPI1->RXFTLR = SPI1_StoreReg[6];
;;;443        SPI1->IMR = SPI1_StoreReg[7];
;;;444        SPI1->DMACR = SPI1_StoreReg[8];
;;;445        SPI1->DMATDLR = SPI1_StoreReg[9];
;;;446        SPI1->DMARDLR = SPI1_StoreReg[10];
;;;447        SPI1->RX_SAMPLE_DLY = SPI1_StoreReg[11];
;;;448    
;;;449        /* Enable the selected SPI peripheral */
;;;450        SPI1->SSIENR = SPI1_StoreReg[2];
;;;451    }
;;;452    #endif
;;;453    
;;;454    /********************************************** ********************************************************/
;;;455    /**************************************** [SPI2W DLPS] **************************************************/
;;;456    /*******************************************************************************************************/
;;;457    /*******************************************************************************************************/
;;;458    #if USE_SPI2W_DLPS
;;;459    __STATIC_INLINE void SPI2W_DLPS_Enter(void);
;;;460    __STATIC_INLINE void SPI2W_DLPS_Exit(void);
;;;461    
;;;462    uint32_t SPI2W_StoreReg[1];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;463    
;;;464    /**
;;;465      * @brief  SPI2W enter dlps callback function(Save SPI2W register values when system enter DLPS)
;;;466      * @param  None
;;;467      * @retval None
;;;468      */
;;;469    DATA_RAM_FUNCTION __STATIC_INLINE void SPI2W_DLPS_Enter(void)
;;;470    {
;;;471        /*Open 20M clock source*/
;;;472        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;473        SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;474    
;;;475        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI2W_EN_Msk;
;;;476        SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_SPI2WIRE_EN_Msk | SYSBLK_SLPCK_SPI2WIRE_EN_Msk);
;;;477    
;;;478        SPI2W_StoreReg[0] = SPI3WIRE->CFGR;
;;;479    }
;;;480    
;;;481    /**
;;;482      * @brief  SPI2W exit dlps callback function(Resume SPI2W register values when system exit DLPS)
;;;483      * @param  None
;;;484      * @retval None
;;;485      */
;;;486    DATA_RAM_FUNCTION __STATIC_INLINE void SPI2W_DLPS_Exit(void)
;;;487    {
;;;488        /*Open 20M clock source*/
;;;489        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;490        SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;491    
;;;492        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI2W_EN_Msk;
;;;493        SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_SPI2WIRE_EN_Msk | SYSBLK_SLPCK_SPI2WIRE_EN_Msk);
;;;494    
;;;495        SPI3WIRE->CFGR = SPI2W_StoreReg[0];
;;;496    }
;;;497    #endif
;;;498    
;;;499    /********************************************** ********************************************************/
;;;500    /**************************************** [I2C0 DLPS] **************************************************/
;;;501    /*******************************************************************************************************/
;;;502    /*******************************************************************************************************/
;;;503    #if USE_I2C0_DLPS
;;;504    __STATIC_INLINE void I2C0_DLPS_Enter(void);
;;;505    __STATIC_INLINE void I2C0_DLPS_Exit(void);
;;;506    
;;;507    uint32_t I2C0_StoreReg[20];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;508    
;;;509    /**
;;;510      * @brief  I2C0 enter dlps callback function(Save I2C0 register values when system enter DLPS)
;;;511      * @param  None
;;;512      * @retval None
;;;513      */
;;;514    DATA_RAM_FUNCTION __STATIC_INLINE void I2C0_DLPS_Enter(void)
;;;515    {
;;;516        PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_I2C0_EN_Msk | SYSBLK_SLPCK_I2C0_EN_Msk);
;;;517        PERIPH->PERI_FUNC0_EN |= SYSBLK_I2C0_EN_Msk;
;;;518    
;;;519        I2C0_StoreReg[0] = I2C0->IC_CON;
;;;520        I2C0_StoreReg[1] = I2C0->IC_TAR;
;;;521        I2C0_StoreReg[2] = I2C0->IC_SAR;
;;;522        I2C0_StoreReg[3] = I2C0->IC_HS_MADDR;
;;;523    
;;;524        I2C0_StoreReg[4] = I2C0->IC_SS_SCL_HCNT;
;;;525        I2C0_StoreReg[5] = I2C0->IC_SS_SCL_LCNT;
;;;526        I2C0_StoreReg[6] = I2C0->IC_FS_SCL_HCNT;
;;;527        I2C0_StoreReg[7] = I2C0->IC_FS_SCL_LCNT;
;;;528        I2C0_StoreReg[8] = I2C0->IC_HS_SCL_HCNT;
;;;529        I2C0_StoreReg[9] = I2C0->IC_HS_SCL_LCNT;
;;;530    
;;;531        I2C0_StoreReg[10] = I2C0->IC_INTR_MASK;
;;;532        I2C0_StoreReg[11] = I2C0->IC_RX_TL;
;;;533        I2C0_StoreReg[12] = I2C0->IC_TX_TL;
;;;534        I2C0_StoreReg[13] = I2C0->IC_ENABLE;
;;;535        I2C0_StoreReg[14] = I2C0->IC_SDA_HOLD;
;;;536        I2C0_StoreReg[15] = I2C0->IC_SLV_DATA_NACK_ONLY;
;;;537        I2C0_StoreReg[16] = I2C0->IC_DMA_CR;
;;;538        I2C0_StoreReg[17] = I2C0->IC_DMA_TDLR;
;;;539        I2C0_StoreReg[18] = I2C0->IC_DMA_RDLR;
;;;540    
;;;541        I2C0_StoreReg[19] = I2C0->IC_SDA_SETUP;
;;;542    }
;;;543    
;;;544    /**
;;;545      * @brief  I2C0 exit dlps callback function(Resume I2C0 register values when system exit DLPS)
;;;546      * @param  None
;;;547      * @retval None
;;;548      */
;;;549    DATA_RAM_FUNCTION __STATIC_INLINE void I2C0_DLPS_Exit(void)
;;;550    {
;;;551        PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_I2C0_EN_Msk | SYSBLK_SLPCK_I2C0_EN_Msk);
;;;552        PERIPH->PERI_FUNC0_EN |= SYSBLK_I2C0_EN_Msk;
;;;553    
;;;554        I2C0->IC_CON = I2C0_StoreReg[0];
;;;555        I2C0->IC_TAR = I2C0_StoreReg[1];
;;;556        I2C0->IC_SAR = I2C0_StoreReg[2];
;;;557        I2C0->IC_HS_MADDR = I2C0_StoreReg[3];
;;;558    
;;;559        I2C0->IC_SS_SCL_HCNT = I2C0_StoreReg[4];
;;;560        I2C0->IC_SS_SCL_LCNT = I2C0_StoreReg[5];
;;;561        I2C0->IC_FS_SCL_HCNT = I2C0_StoreReg[6];
;;;562        I2C0->IC_FS_SCL_LCNT = I2C0_StoreReg[7];
;;;563        I2C0->IC_HS_SCL_HCNT = I2C0_StoreReg[8];
;;;564        I2C0->IC_HS_SCL_LCNT = I2C0_StoreReg[9];
;;;565    
;;;566        I2C0->IC_INTR_MASK = I2C0_StoreReg[10];
;;;567        I2C0->IC_RX_TL = I2C0_StoreReg[11];
;;;568        I2C0->IC_TX_TL = I2C0_StoreReg[12];
;;;569        I2C0->IC_SDA_HOLD = I2C0_StoreReg[14];
;;;570        I2C0->IC_SLV_DATA_NACK_ONLY = I2C0_StoreReg[15];
;;;571        I2C0->IC_DMA_CR = I2C0_StoreReg[16];
;;;572        I2C0->IC_DMA_TDLR = I2C0_StoreReg[17];
;;;573        I2C0->IC_DMA_RDLR = I2C0_StoreReg[18];
;;;574        I2C0->IC_SDA_SETUP = I2C0_StoreReg[19];
;;;575    
;;;576        I2C0->IC_ENABLE = I2C0_StoreReg[13];
;;;577    }
;;;578    #endif
;;;579    
;;;580    /********************************************** ********************************************************/
;;;581    /**************************************** [I2C1 DLPS] **************************************************/
;;;582    /*******************************************************************************************************/
;;;583    /*******************************************************************************************************/
;;;584    #if USE_I2C1_DLPS
;;;585    __STATIC_INLINE void I2C1_DLPS_Enter(void);
;;;586    __STATIC_INLINE void I2C1_DLPS_Exit(void);
;;;587    
;;;588    uint32_t I2C1_StoreReg[20];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;589    
;;;590    /**
;;;591      * @brief  I2C1 enter dlps callback function(Save I2C1 register values when system enter DLPS)
;;;592      * @param  None
;;;593      * @retval None
;;;594      */
;;;595    DATA_RAM_FUNCTION __STATIC_INLINE void I2C1_DLPS_Enter(void)
;;;596    {
;;;597        PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_I2C1_EN_Msk | SYSBLK_SLPCK_I2C1_EN_Msk);
;;;598        PERIPH->PERI_FUNC0_EN |= SYSBLK_I2C1_EN_Msk;
;;;599    
;;;600        I2C1_StoreReg[0] = I2C1->IC_CON;
;;;601        I2C1_StoreReg[1] = I2C1->IC_TAR;
;;;602        I2C1_StoreReg[2] = I2C1->IC_SAR;
;;;603        I2C1_StoreReg[3] = I2C1->IC_HS_MADDR;
;;;604    
;;;605        I2C1_StoreReg[4] = I2C1->IC_SS_SCL_HCNT;
;;;606        I2C1_StoreReg[5] = I2C1->IC_SS_SCL_LCNT;
;;;607        I2C1_StoreReg[6] = I2C1->IC_FS_SCL_HCNT;
;;;608        I2C1_StoreReg[7] = I2C1->IC_FS_SCL_LCNT;
;;;609        I2C1_StoreReg[8] = I2C1->IC_HS_SCL_HCNT;
;;;610        I2C1_StoreReg[9] = I2C1->IC_HS_SCL_LCNT;
;;;611    
;;;612        I2C1_StoreReg[10] = I2C1->IC_INTR_MASK;
;;;613        I2C1_StoreReg[11] = I2C1->IC_RX_TL;
;;;614        I2C1_StoreReg[12] = I2C1->IC_TX_TL;
;;;615        I2C1_StoreReg[13] = I2C1->IC_ENABLE;
;;;616        I2C1_StoreReg[14] = I2C1->IC_SDA_HOLD;
;;;617        I2C1_StoreReg[15] = I2C1->IC_SLV_DATA_NACK_ONLY;
;;;618        I2C1_StoreReg[16] = I2C1->IC_DMA_CR;
;;;619        I2C1_StoreReg[17] = I2C1->IC_DMA_TDLR;
;;;620        I2C1_StoreReg[18] = I2C1->IC_DMA_RDLR;
;;;621    
;;;622        I2C1_StoreReg[19] = I2C1->IC_SDA_SETUP;
;;;623    }
;;;624    
;;;625    /**
;;;626      * @brief  I2C1 exit dlps callback function(Resume I2C1 register values when system exit DLPS)
;;;627      * @param  None
;;;628      * @retval None
;;;629      */
;;;630    DATA_RAM_FUNCTION __STATIC_INLINE void I2C1_DLPS_Exit(void)
;;;631    {
;;;632        PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_I2C1_EN_Msk | SYSBLK_SLPCK_I2C1_EN_Msk);
;;;633        PERIPH->PERI_FUNC0_EN |= SYSBLK_I2C1_EN_Msk;
;;;634    
;;;635        I2C1->IC_CON = I2C1_StoreReg[0];
;;;636        I2C1->IC_TAR = I2C1_StoreReg[1];
;;;637        I2C1->IC_SAR = I2C1_StoreReg[2];
;;;638        I2C0->IC_HS_MADDR = I2C1_StoreReg[3];
;;;639    
;;;640        I2C1->IC_SS_SCL_HCNT = I2C1_StoreReg[4];
;;;641        I2C1->IC_SS_SCL_LCNT = I2C1_StoreReg[5];
;;;642        I2C1->IC_FS_SCL_HCNT = I2C1_StoreReg[6];
;;;643        I2C1->IC_FS_SCL_LCNT = I2C1_StoreReg[7];
;;;644        I2C1->IC_HS_SCL_HCNT = I2C1_StoreReg[8];
;;;645        I2C1->IC_HS_SCL_LCNT = I2C1_StoreReg[9];
;;;646    
;;;647        I2C1->IC_INTR_MASK = I2C1_StoreReg[10];
;;;648        I2C1->IC_RX_TL = I2C1_StoreReg[11];
;;;649        I2C1->IC_TX_TL = I2C1_StoreReg[12];
;;;650        I2C1->IC_SDA_HOLD = I2C1_StoreReg[14];
;;;651        I2C1->IC_SLV_DATA_NACK_ONLY = I2C1_StoreReg[15];
;;;652        I2C1->IC_DMA_CR = I2C1_StoreReg[16];
;;;653        I2C1->IC_DMA_TDLR = I2C1_StoreReg[17];
;;;654        I2C1->IC_DMA_RDLR = I2C1_StoreReg[18];
;;;655        I2C1->IC_SDA_SETUP = I2C1_StoreReg[19];
;;;656    
;;;657        I2C1->IC_ENABLE = I2C1_StoreReg[13];
;;;658    }
;;;659    #endif
;;;660    
;;;661    /********************************************** ********************************************************/
;;;662    /**************************************** [Timer & PWM DLPS] *******************************************/
;;;663    /*******************************************************************************************************/
;;;664    /*******************************************************************************************************/
;;;665    #if USE_TIM_DLPS
;;;666    #include "rtl876x_tim.h"
;;;667    __STATIC_INLINE void TIM_DLPS_Enter(void);
;;;668    __STATIC_INLINE void TIM_DLPS_Exit(void);
;;;669    
;;;670    uint32_t TIM_StoreReg[26];      /*  This array should be placed in RAM ON/Buffer ON.    */
;;;671    
;;;672    /* PWM, use with timer */
;;;673    uint32_t PWM0_StoreReg;         /*  This array should be placed in RAM ON/Buffer ON.    */
;;;674    
;;;675    uint32_t PWM1_StoreReg;         /*  This array should be placed in RAM ON/Buffer ON.    */
;;;676    
;;;677    /**
;;;678      * @brief  TIMER enter dlps callback function(Save TIMER register values when system enter DLPS)
;;;679      * @param  None
;;;680      * @retval None
;;;681      */
;;;682    DATA_RAM_FUNCTION __STATIC_INLINE void TIM_DLPS_Enter(void)
;;;683    {
;;;684        SYSBLKCTRL->u_210.SOC_FUNC_EN |= BIT(16);
;;;685        SYSBLKCTRL->u_230.CLK_CTRL |= (SYSBLK_ACTCK_TIMER_EN_Msk | SYSBLK_SLPCK_TIMER_EN_Msk);
;;;686    
;;;687        TIM_StoreReg[0] = TIM0->LoadCount;
;;;688        TIM_StoreReg[1] = TIM0->ControlReg;
;;;689        TIM_StoreReg[2] = TIMER0_LOAD_COUNT2;
;;;690    
;;;691        TIM_StoreReg[3] = TIM1->LoadCount;
;;;692        TIM_StoreReg[4] = TIM1->ControlReg;
;;;693        TIM_StoreReg[5] = TIMER1_LOAD_COUNT2;
;;;694    
;;;695        TIM_StoreReg[6] = TIM2->LoadCount;
;;;696        TIM_StoreReg[7] = TIM2->ControlReg;
;;;697        TIM_StoreReg[8] = TIMER2_LOAD_COUNT2;
;;;698    
;;;699        TIM_StoreReg[9] = TIM3->LoadCount;
;;;700        TIM_StoreReg[10] = TIM3->ControlReg;
;;;701        TIM_StoreReg[11] = TIMER3_LOAD_COUNT2;
;;;702    
;;;703        TIM_StoreReg[12] = TIM4->LoadCount;
;;;704        TIM_StoreReg[13] = TIM4->ControlReg;
;;;705        TIM_StoreReg[14] = TIMER4_LOAD_COUNT2;
;;;706    
;;;707        TIM_StoreReg[15] = TIM5->LoadCount;
;;;708        TIM_StoreReg[16] = TIM5->ControlReg;
;;;709        TIM_StoreReg[17] = TIMER5_LOAD_COUNT2;
;;;710    
;;;711        TIM_StoreReg[18] = TIM6->LoadCount;
;;;712        TIM_StoreReg[19] = TIM6->ControlReg;
;;;713        TIM_StoreReg[20] = TIMER6_LOAD_COUNT2;
;;;714    
;;;715        TIM_StoreReg[21] = TIM7->LoadCount;
;;;716        TIM_StoreReg[22] = TIM7->ControlReg;
;;;717        TIM_StoreReg[23] = TIMER7_LOAD_COUNT2;
;;;718    
;;;719        TIM_StoreReg[24] = *((volatile uint32_t *)0x4000035CUL);
;;;720        TIM_StoreReg[25] = *((volatile uint32_t *)0x40000360UL);
;;;721    
;;;722        PWM0_StoreReg = TIMER_PWM0_CR;
;;;723    
;;;724        PWM1_StoreReg = TIMER_PWM1_CR;
;;;725    }
;;;726    
;;;727    /**
;;;728      * @brief  TIMER exit dlps callback function(Resume TIMER register values when system exit DLPS)
;;;729      * @param  None
;;;730      * @retval None
;;;731      */
;;;732    DATA_RAM_FUNCTION __STATIC_INLINE void TIM_DLPS_Exit(void)
;;;733    {
;;;734        /* Enable timer IP clock and function */
;;;735        SYSBLKCTRL->u_210.SOC_FUNC_EN |= BIT(16);
;;;736        SYSBLKCTRL->u_230.CLK_CTRL |= (SYSBLK_ACTCK_TIMER_EN_Msk | SYSBLK_SLPCK_TIMER_EN_Msk);
;;;737    
;;;738        *((volatile uint32_t *)0x4000035CUL) = TIM_StoreReg[24];
;;;739        *((volatile uint32_t *)0x40000360UL) = TIM_StoreReg[25];
;;;740    
;;;741        TIM0->LoadCount = TIM_StoreReg[0];
;;;742        TIM0->ControlReg = TIM_StoreReg[1];
;;;743        TIMER0_LOAD_COUNT2 = TIM_StoreReg[2];
;;;744    
;;;745        TIM1->LoadCount = TIM_StoreReg[3];
;;;746        TIM1->ControlReg = TIM_StoreReg[4];
;;;747        TIMER1_LOAD_COUNT2 = TIM_StoreReg[5];
;;;748    
;;;749        TIM2->LoadCount = TIM_StoreReg[6];
;;;750        TIM2->ControlReg = TIM_StoreReg[7];
;;;751        TIMER2_LOAD_COUNT2 = TIM_StoreReg[8];
;;;752    
;;;753        TIM3->LoadCount = TIM_StoreReg[9];
;;;754        TIM3->ControlReg = TIM_StoreReg[10];
;;;755        TIMER3_LOAD_COUNT2 = TIM_StoreReg[11];
;;;756    
;;;757        TIM4->LoadCount = TIM_StoreReg[12];
;;;758        TIM4->ControlReg = TIM_StoreReg[13];
;;;759        TIMER4_LOAD_COUNT2 = TIM_StoreReg[14];
;;;760    
;;;761        TIM5->LoadCount = TIM_StoreReg[15];
;;;762        TIM5->ControlReg = TIM_StoreReg[16];
;;;763        TIMER5_LOAD_COUNT2 = TIM_StoreReg[17];
;;;764    
;;;765        TIM6->LoadCount = TIM_StoreReg[18];
;;;766        TIM6->ControlReg = TIM_StoreReg[19];
;;;767        TIMER6_LOAD_COUNT2 = TIM_StoreReg[20];
;;;768    
;;;769        TIM7->LoadCount = TIM_StoreReg[21];
;;;770        TIM7->ControlReg = TIM_StoreReg[22];
;;;771        TIMER7_LOAD_COUNT2 = TIM_StoreReg[23];
;;;772    
;;;773        TIMER_PWM0_CR = PWM0_StoreReg;
;;;774    
;;;775        TIMER_PWM1_CR = PWM1_StoreReg;
;;;776    }
;;;777    #endif  /* USE_TIM_DLPS */
;;;778    
;;;779    
;;;780    /********************************************** ********************************************************/
;;;781    /**************************************** [UART DLPS] **************************************************/
;;;782    /*******************************************************************************************************/
;;;783    /*******************************************************************************************************/
;;;784    #if USE_UART_DLPS
;;;785    #include "rtl876x_uart.h"
;;;786    
;;;787    __STATIC_INLINE void UART_DLPS_Enter(void);
;;;788    __STATIC_INLINE void UART_DLPS_Exit(void);
;;;789    
;;;790    uint32_t UART_StoreReg[11];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;791    
;;;792    /**
;;;793      * @brief  UART enter dlps callback function(Save UART register values when system enter DLPS)
;;;794      * @param  None
;;;795      * @retval None
;;;796      */
;;;797    DATA_RAM_FUNCTION __STATIC_INLINE void UART_DLPS_Enter(void)
;;;798    {
;;;799        PERIPH->PERI_FUNC0_EN |= (1 << 0);
;;;800        PERIPH->PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_UART0DATA_EN_Msk | SYSBLK_SLPCK_UART0DATA_EN_Msk);
;;;801    
;;;802        //access DLH and DLL
;;;803        UART->LCR |= (1 << 7);
;;;804        UART_StoreReg[0] = UART->DLL;
;;;805        UART_StoreReg[1] = UART->DLH_INTCR;
;;;806        UART->LCR &= (~(1 << 7));
;;;807    
;;;808        //save other registers
;;;809        UART_StoreReg[2] = UART->DLH_INTCR;
;;;810        UART_StoreReg[4] = UART->LCR;
;;;811        UART_StoreReg[5] = UART->MCR;
;;;812        UART_StoreReg[6] = UART->SPR;
;;;813        UART_StoreReg[7] = UART->STSR;
;;;814        UART_StoreReg[8] = UART->RX_IDLE_INTTCR;
;;;815        UART_StoreReg[9] = UART->RXIDLE_INTCR;
;;;816        UART_StoreReg[10] = UART->MISCR;
;;;817    
;;;818        return;
;;;819    }
;;;820    
;;;821    /**
;;;822      * @brief  UART exit dlps callback function(Resume UART register values when system exit DLPS)
;;;823      * @param  None
;;;824      * @retval None
;;;825      */
;;;826    DATA_RAM_FUNCTION __STATIC_INLINE void UART_DLPS_Exit(void)
;;;827    {
;;;828        PERIPH->PERI_FUNC0_EN |= (1 << 0);
;;;829        PERIPH->PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_UART0DATA_EN_Msk | SYSBLK_SLPCK_UART0DATA_EN_Msk);
;;;830    
;;;831        //access DLH and DLL
;;;832        UART->LCR |= (1 << 7);
;;;833        UART->DLL = UART_StoreReg[0];
;;;834        UART->DLH_INTCR =  UART_StoreReg[1];
;;;835        UART->LCR &= (~(1 << 7));
;;;836    
;;;837        //access other registers
;;;838        UART->INTID_FCR = (((UART_StoreReg[7] & BIT24) >> 21) | ((UART_StoreReg[7] & 0x7C000000) >> 18) |
;;;839                           (1));
;;;840        UART->LCR = UART_StoreReg[4];
;;;841        UART->MCR = UART_StoreReg[5];
;;;842        UART->SPR = UART_StoreReg[6];
;;;843        UART->STSR = UART_StoreReg[7];
;;;844        UART->DLH_INTCR = UART_StoreReg[2];
;;;845        UART->RX_IDLE_INTTCR = UART_StoreReg[8];
;;;846        UART->RXIDLE_INTCR = UART_StoreReg[9];
;;;847        UART->MISCR = UART_StoreReg[10];
;;;848    
;;;849        return;
;;;850    }
;;;851    #endif
;;;852    
;;;853    
;;;854    #if USE_UART1_DLPS
;;;855    
;;;856    __STATIC_INLINE void UART1_DLPS_Enter(void);
;;;857    __STATIC_INLINE void UART1_DLPS_Exit(void);
;;;858    
;;;859    uint32_t UART1_StoreReg[11];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;860    
;;;861    /**
;;;862      * @brief  UART1 enter dlps callback function(Save UART1 register values when system enter DLPS)
;;;863      * @param  None
;;;864      * @retval None
;;;865      */
;;;866    DATA_RAM_FUNCTION __STATIC_INLINE void UART1_DLPS_Enter(void)
;;;867    {
;;;868        //enable log uart peripheral & clock
;;;869        SYSBLKCTRL->u_210.SOC_FUNC_EN |= (1 << 12);
;;;870        SYSBLKCTRL->u_230.CLK_CTRL |= ((1 << 12) | (1 << 13));
;;;871    
;;;872        //access DLH and DLL
;;;873        UART1->LCR |= (1 << 7);
;;;874        UART1_StoreReg[0] = UART1->DLL;
;;;875        UART1_StoreReg[1] = UART1->DLH_INTCR;
;;;876        UART1->LCR &= (~(1 << 7));
;;;877    
;;;878        //save other registers
;;;879        UART1_StoreReg[2] = UART1->DLH_INTCR;
;;;880        UART1_StoreReg[4] = UART1->LCR;
;;;881        UART1_StoreReg[5] = UART1->MCR;
;;;882        UART1_StoreReg[6] = UART1->SPR;
;;;883        UART1_StoreReg[7] = UART1->STSR;
;;;884        UART1_StoreReg[8] = UART1->RX_IDLE_INTTCR;
;;;885        UART1_StoreReg[9] = UART1->RXIDLE_INTCR;
;;;886        UART1_StoreReg[10] = UART1->MISCR;
;;;887    
;;;888        return;
;;;889    }
;;;890    
;;;891    /**
;;;892      * @brief  UART1 exit dlps callback function(Resume UART1 register values when system exit DLPS)
;;;893      * @param  None
;;;894      * @retval None
;;;895      */
;;;896    DATA_RAM_FUNCTION __STATIC_INLINE void UART1_DLPS_Exit(void)
;;;897    {
;;;898        //enable log uart peripheral & clock
;;;899        SYSBLKCTRL->u_210.SOC_FUNC_EN |= (1 << 12);
;;;900        SYSBLKCTRL->u_230.CLK_CTRL |= ((1 << 12) | (1 << 13));
;;;901    
;;;902        //access DLH and DLL
;;;903        UART1->LCR |= (1 << 7);
;;;904        UART1->DLL = UART1_StoreReg[0];
;;;905        UART1->DLH_INTCR =  UART1_StoreReg[1];
;;;906        UART1->LCR &= (~(1 << 7));
;;;907    
;;;908        //access other registers
;;;909        UART1->INTID_FCR = (((UART1_StoreReg[7] & BIT24) >> 21) | ((UART1_StoreReg[7] & 0x7C000000)
;;;910                                                                   >> 18) | (1));
;;;911        UART1->LCR = UART1_StoreReg[4];
;;;912        UART1->MCR = UART1_StoreReg[5];
;;;913        UART1->SPR = UART1_StoreReg[6];
;;;914        UART1->STSR = UART1_StoreReg[7];
;;;915        UART1->DLH_INTCR = UART1_StoreReg[2];
;;;916        UART1->RX_IDLE_INTTCR = UART1_StoreReg[8];
;;;917        UART1->RXIDLE_INTCR = UART1_StoreReg[9];
;;;918        UART1->MISCR = UART1_StoreReg[10];
;;;919    
;;;920        return;
;;;921    }
;;;922    #endif
;;;923    
;;;924    #if USE_UART2_DLPS
;;;925    
;;;926    __STATIC_INLINE void UART2_DLPS_Enter(void);
;;;927    __STATIC_INLINE void UART2_DLPS_Exit(void);
;;;928    
;;;929    uint32_t UART2_StoreReg[11];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;930    
;;;931    /**
;;;932      * @brief  UART2 enter dlps callback function(Save UART2 register values when system enter DLPS)
;;;933      * @param  None
;;;934      * @retval None
;;;935      */
;;;936    DATA_RAM_FUNCTION __STATIC_INLINE void UART2_DLPS_Enter(void)
;;;937    {
;;;938        //enable log uart peripheral & clock
;;;939        SYSBLKCTRL->u_210.SOC_FUNC_EN |= (1 << 12);
;;;940        SYSBLKCTRL->u_230.CLK_CTRL |= ((1 << 12) | (1 << 13));
;;;941    
;;;942        //access DLH and DLL
;;;943        UART2->LCR |= (1 << 7);
;;;944        UART2_StoreReg[0] = UART2->DLL;
;;;945        UART2_StoreReg[1] = UART2->DLH_INTCR;
;;;946        UART2->LCR &= (~(1 << 7));
;;;947    
;;;948        //save other registers
;;;949        UART2_StoreReg[2] = UART2->DLH_INTCR;
;;;950        UART2_StoreReg[4] = UART2->LCR;
;;;951        UART2_StoreReg[5] = UART2->MCR;
;;;952        UART2_StoreReg[6] = UART2->SPR;
;;;953        UART2_StoreReg[7] = UART2->STSR;
;;;954        UART2_StoreReg[8] = UART2->RX_IDLE_INTTCR;
;;;955        UART2_StoreReg[9] = UART2->RXIDLE_INTCR;
;;;956        UART2_StoreReg[10] = UART2->MISCR;
;;;957    
;;;958        return;
;;;959    }
;;;960    
;;;961    /**
;;;962      * @brief  UART2 exit dlps callback function(Resume UART2 register values when system exit DLPS)
;;;963      * @param  None
;;;964      * @retval None
;;;965      */
;;;966    DATA_RAM_FUNCTION __STATIC_INLINE void UART2_DLPS_Exit(void)
;;;967    {
;;;968        //enable log uart peripheral & clock
;;;969        SYSBLKCTRL->u_210.SOC_FUNC_EN |= (1 << 12);
;;;970        SYSBLKCTRL->u_230.CLK_CTRL |= ((1 << 12) | (1 << 13));
;;;971    
;;;972        //access DLH and DLL
;;;973        UART2->LCR |= (1 << 7);
;;;974        UART2->DLL = UART2_StoreReg[0];
;;;975        UART2->DLH_INTCR =  UART2_StoreReg[1];
;;;976        UART2->LCR &= (~(1 << 7));
;;;977    
;;;978        //access other registers
;;;979        UART2->INTID_FCR = (((UART2_StoreReg[7] & BIT24) >> 21) | ((UART2_StoreReg[7] & 0x7C000000)
;;;980                                                                   >> 18) | (1));
;;;981        UART2->LCR = UART2_StoreReg[4];
;;;982        UART2->MCR = UART2_StoreReg[5];
;;;983        UART2->SPR = UART2_StoreReg[6];
;;;984        UART2->STSR = UART2_StoreReg[7];
;;;985        UART2->DLH_INTCR = UART2_StoreReg[2];
;;;986        UART2->RX_IDLE_INTTCR = UART2_StoreReg[8];
;;;987        UART2->RXIDLE_INTCR = UART2_StoreReg[9];
;;;988        UART2->MISCR = UART2_StoreReg[10];
;;;989    
;;;990        return;
;;;991    }
;;;992    #endif
;;;993    
;;;994    
;;;995    /********************************************** ********************************************************/
;;;996    /**************************************** [ADC DLPS] **************************************************/
;;;997    /*******************************************************************************************************/
;;;998    /*******************************************************************************************************/
;;;999    
;;;1000   #if USE_ADC_DLPS
;;;1001   __STATIC_INLINE void ADC_DLPS_Enter(void);
;;;1002   __STATIC_INLINE void ADC_DLPS_Exit(void);
;;;1003   
;;;1004   uint32_t ADC_StoreReg[14];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1005   
;;;1006   /**
;;;1007     * @brief  ADC enter dlps callback function(Save ADC register values when system enter DLPS)
;;;1008     * @param  None
;;;1009     * @retval None
;;;1010     */
;;;1011   DATA_RAM_FUNCTION __STATIC_INLINE void ADC_DLPS_Enter(void)
;;;1012   {
;;;1013       /*Open 10M clock source*/
;;;1014       SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;1015       SYSBLKCTRL->u_20C.RSVD_20C |= BIT28;
;;;1016   
;;;1017       PERIPH->PERI_FUNC1_EN |= (1 << 0);
;;;1018       PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_ADC_EN_Msk | SYSBLK_SLPCK_ADC_EN_Msk);
;;;1019   
;;;1020       ADC_StoreReg[0] =  ADC->CR;          //0x04
;;;1021       ADC_StoreReg[1] =  ADC->SCHCR;       //0x08
;;;1022       ADC_StoreReg[2] =  ADC->INTCR;       //0x0C
;;;1023       ADC_StoreReg[3] =  ADC->SCHTAB0;     //0x10
;;;1024       ADC_StoreReg[4] =  ADC->SCHTAB1;     //0x14
;;;1025       ADC_StoreReg[5] =  ADC->SCHTAB2;     //0x18
;;;1026       ADC_StoreReg[6] =  ADC->SCHTAB3;     //0x1C
;;;1027       ADC_StoreReg[7] =  ADC->SCHTAB4;     //0x20
;;;1028       ADC_StoreReg[8] =  ADC->SCHTAB5;     //0x24
;;;1029       ADC_StoreReg[9] =  ADC->SCHTAB6;     //0x28
;;;1030       ADC_StoreReg[10] =  ADC->SCHTAB6;    //0x2C
;;;1031       ADC_StoreReg[11] =  ADC->PWRDLY;
;;;1032       ADC_StoreReg[12] =  ADC->DATCLK;
;;;1033       ADC_StoreReg[13] =  ADC->ANACTL;
;;;1034   
;;;1035       uint8_t reg_value = 0;
;;;1036       reg_value = btaon_fast_read_safe(0x110);
;;;1037       btaon_fast_write(0x110, reg_value & (~0x04));
;;;1038   
;;;1039       return;
;;;1040   }
;;;1041   
;;;1042   /**
;;;1043     * @brief  ADC exit dlps callback function(Resume ADC register values when system exit DLPS)
;;;1044     * @param  None
;;;1045     * @retval None
;;;1046     */
;;;1047   DATA_RAM_FUNCTION __STATIC_INLINE void ADC_DLPS_Exit(void)
;;;1048   {
;;;1049       /*Open 10M clock source*/
;;;1050       SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;1051       SYSBLKCTRL->u_20C.RSVD_20C |= BIT28;
;;;1052   
;;;1053       PERIPH->PERI_FUNC1_EN |= (1 << 0);
;;;1054       PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_ADC_EN_Msk | SYSBLK_SLPCK_ADC_EN_Msk);
;;;1055   
;;;1056   #if 0
;;;1057       //Todo
;;;1058       ADC->PWRDLY = ADC_StoreReg[10];
;;;1059       ADC->CR = (ADC_StoreReg[0] & (~((uint32_t)0x03)));
;;;1060       ADC->SCHTAB0 = ADC_StoreReg[3];
;;;1061       ADC->SCHTAB1 = ADC_StoreReg[4];
;;;1062       ADC->SCHTAB2 = ADC_StoreReg[5];
;;;1063       ADC->SCHTAB3 = ADC_StoreReg[6];
;;;1064       ADC->SCHTAB4 = ADC_StoreReg[7];
;;;1065       ADC->SCHTAB5 = ADC_StoreReg[8];
;;;1066       ADC->SCHTAB6 = ADC_StoreReg[9];
;;;1067       ADC->SCHCR = ADC_StoreReg[1];
;;;1068       ADC->INTCR = (ADC_StoreReg[2] & 0x1F);
;;;1069   #else
;;;1070       /*Disable all interrupt.*/
;;;1071       ADC->INTCR &= (~0x1f);
;;;1072   
;;;1073       /* Set power mode first */
;;;1074       ADC->PWRDLY = ADC_StoreReg[11];
;;;1075   
;;;1076       /* Disable schedule table */
;;;1077       ADC->SCHCR &= (~0xffff);
;;;1078   
;;;1079       ADC->SCHTAB0 = ADC_StoreReg[3];
;;;1080       ADC->SCHTAB1 = ADC_StoreReg[4];
;;;1081       ADC->SCHTAB2 = ADC_StoreReg[5];
;;;1082       ADC->SCHTAB3 = ADC_StoreReg[6];
;;;1083       ADC->SCHTAB4 = ADC_StoreReg[7];
;;;1084       ADC->SCHTAB5 = ADC_StoreReg[8];
;;;1085       ADC->SCHTAB6 = ADC_StoreReg[9];
;;;1086       ADC->SCHTAB7 = ADC_StoreReg[10];
;;;1087       ADC->SCHCR   = ADC_StoreReg[1];
;;;1088       ADC->CR = (ADC_StoreReg[0] & (~((uint32_t)0x03)));
;;;1089       ADC->DATCLK = ADC_StoreReg[12];
;;;1090       ADC->ANACTL = ADC_StoreReg[13];
;;;1091   
;;;1092       /*Clear ADC FIFO */
;;;1093       ADC->CR |= BIT26;
;;;1094       /* Clear all interrupt */
;;;1095       ADC->INTCR |= (0x1f << 8);
;;;1096   
;;;1097       /* Restore specify interrupt */
;;;1098       ADC->INTCR = ADC_StoreReg[2];
;;;1099   
;;;1100   #endif
;;;1101   
;;;1102       uint8_t reg_value = 0;
;;;1103       reg_value = btaon_fast_read_safe(0x110);
;;;1104       btaon_fast_write(0x110, reg_value | 0x04);
;;;1105   
;;;1106       return;
;;;1107   }
;;;1108   
;;;1109   #endif
;;;1110   
;;;1111   /********************************************** ********************************************************/
;;;1112   /**************************************** [IR DLPS] **************************************************/
;;;1113   /*******************************************************************************************************/
;;;1114   /*******************************************************************************************************/
;;;1115   
;;;1116   #if USE_IR_DLPS
;;;1117   __STATIC_INLINE void IR_DLPS_Enter(void);
;;;1118   __STATIC_INLINE void IR_DLPS_Exit(void);
;;;1119   
;;;1120   uint32_t IR_StoreReg[6];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1121   
;;;1122   /**
;;;1123     * @brief  IR enter dlps callback function(Save IR register values when system enter DLPS)
;;;1124     * @param  None
;;;1125     * @retval None
;;;1126     */
;;;1127   DATA_RAM_FUNCTION __STATIC_INLINE void IR_DLPS_Enter(void)
;;;1128   {
;;;1129       PERIPH->PERI_FUNC0_EN |= (1 << 10);
;;;1130       PERIPH->PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_IR_EN_Msk | SYSBLK_SLPCK_IR_EN_Msk);
;;;1131   
;;;1132       IR_StoreReg[0] = IR->CLK_DIV;
;;;1133       IR_StoreReg[1] = IR->TX_CONFIG;
;;;1134       IR_StoreReg[2] = IR->RX_CONFIG;
;;;1135       IR_StoreReg[3] = IR->RX_CNT_INT_SEL;
;;;1136   
;;;1137   
;;;1138       return;
;;;1139   }
;;;1140   
;;;1141   /**
;;;1142     * @brief  IR exit dlps callback function(Resume IR register values when system exit DLPS)
;;;1143     * @param  None
;;;1144     * @retval None
;;;1145     */
;;;1146   DATA_RAM_FUNCTION __STATIC_INLINE void IR_DLPS_Exit(void)
;;;1147   {
;;;1148       PERIPH->PERI_FUNC0_EN |= (1 << 10);
;;;1149       PERIPH->PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_IR_EN_Msk | SYSBLK_SLPCK_IR_EN_Msk);
;;;1150   
;;;1151       IR->CLK_DIV = IR_StoreReg[0];
;;;1152       if (IR_StoreReg[1] & BIT31)
;;;1153       {
;;;1154           /* RX MODE */
;;;1155           IR->TX_CONFIG  = IR_StoreReg[1];
;;;1156           IR->RX_CONFIG  = IR_StoreReg[2];
;;;1157           IR->RX_CNT_INT_SEL  = IR_StoreReg[3];
;;;1158       }
;;;1159       else
;;;1160       {
;;;1161           /* TX MODE */
;;;1162           IR->TX_CONFIG  = IR_StoreReg[1];
;;;1163           /* If IR TX mode is idle, must write one data firstly */
;;;1164           IR->TX_FIFO = 0;
;;;1165       }
;;;1166   
;;;1167       return;
;;;1168   }
;;;1169   
;;;1170   #endif
;;;1171   
;;;1172   /********************************************** ********************************************************/
;;;1173   /**************************************** [LCD DLPS] ************************************************/
;;;1174   /*******************************************************************************************************/
;;;1175   /*******************************************************************************************************/
;;;1176   #if USE_LCD_DLPS
;;;1177   
;;;1178   uint32_t LCD_StoreReg[5];
;;;1179   
;;;1180   /**
;;;1181     * @brief  LCD enter dlps callback function(Save LCD register values when system enter DLPS)
;;;1182     * @param  None
;;;1183     * @retval None
;;;1184     */
;;;1185   DATA_RAM_FUNCTION __STATIC_INLINE void LCD_DLPS_Enter(void)
;;;1186   {
;;;1187       /* Enable LCD 8080 interface controller function */
;;;1188       PERIPH->PERI_FUNC0_EN |= BIT(25);
;;;1189       /* Enable LCD 8080 interface controller clock */
;;;1190       PERIPH->PERI_CLK_CTRL1 |= BIT(28) | BIT(29);
;;;1191   
;;;1192       LCD_StoreReg[0] = *((volatile uint32_t *)0x400002A8UL) & (0x03 << 28);
;;;1193       LCD_StoreReg[1] = LCD->IMR;
;;;1194       LCD_StoreReg[2] = LCD->CTRL0;
;;;1195       LCD_StoreReg[3] = LCD->CTRL1;
;;;1196       LCD_StoreReg[4] = LCD->CFG;
;;;1197   
;;;1198   }
;;;1199   
;;;1200   /**
;;;1201     * @brief  LCD exit dlps callback function(Resume LCD register values when system exit DLPS)
;;;1202     * @param  None
;;;1203     * @retval None
;;;1204     */
;;;1205   DATA_RAM_FUNCTION __STATIC_INLINE void LCD_DLPS_Exit(void)
;;;1206   {
;;;1207       /* Enable LCD 8080 interface controller function */
;;;1208       PERIPH->PERI_FUNC0_EN |= BIT(25);
;;;1209       /* Enable LCD 8080 interface controller clock */
;;;1210       PERIPH->PERI_CLK_CTRL1 |= BIT(28) | BIT(29);
;;;1211   
;;;1212       /* Restore Dedicated SDIO pin option */
;;;1213       *((volatile uint32_t *)0x400002A8UL) &= ~(0x03 << 28);
;;;1214       *((volatile uint32_t *)0x400002A8UL) |= LCD_StoreReg[0];
;;;1215   
;;;1216       /* Initialize LCD */
;;;1217   
;;;1218       LCD->IMR    = LCD_StoreReg[1];
;;;1219       LCD->CTRL1  = LCD_StoreReg[3];
;;;1220       LCD->CFG    = LCD_StoreReg[4];
;;;1221       LCD->CTRL0  = LCD_StoreReg[2];
;;;1222   }
;;;1223   #endif
;;;1224   
;;;1225   /********************************************** ********************************************************/
;;;1226   /**************************************** [I2S0 DLPS] **************************************************/
;;;1227   /*******************************************************************************************************/
;;;1228   /*******************************************************************************************************/
;;;1229   #if USE_I2S0_DLPS
;;;1230   
;;;1231   uint32_t I2S0_StoreReg[4];
;;;1232   
;;;1233   /**
;;;1234     * @brief  I2S0 enter dlps callback function(Save I2S0 register values when system enter DLPS)
;;;1235     * @param  None
;;;1236     * @retval None
;;;1237     */
;;;1238   DATA_RAM_FUNCTION __STATIC_INLINE void I2S0_DLPS_Enter(void)
;;;1239   {
;;;1240       PERIPH->PERI_BD_FUNC0_EN |= BIT(1) | BIT(5) | BIT(8);
;;;1241   
;;;1242       I2S0_StoreReg[0] = I2S0->BCLK_DIV;
;;;1243       I2S0_StoreReg[1] = I2S0->CTRL0;
;;;1244       I2S0_StoreReg[2] = I2S0->CTRL1;
;;;1245       I2S0_StoreReg[3] = I2S0->DMA_TRDLR;
;;;1246   }
;;;1247   
;;;1248   /**
;;;1249     * @brief  I2S0 exit dlps callback function(Resume I2S0 register values when system exit DLPS)
;;;1250     * @param  None
;;;1251     * @retval None
;;;1252     */
;;;1253   DATA_RAM_FUNCTION __STATIC_INLINE void I2S0_DLPS_Exit(void)
;;;1254   {
;;;1255       PERIPH->PERI_BD_FUNC0_EN |= BIT(1) | BIT(5) | BIT(8);
;;;1256   
;;;1257       /* Reset I2S0 module */
;;;1258       I2S0->CTRL0 |= 1 << 0;
;;;1259       I2S0->CTRL0 &= ~(1 << 0);
;;;1260   
;;;1261       /* Initialize I2S0 */
;;;1262       I2S0->BCLK_DIV  = I2S0_StoreReg[0];
;;;1263       I2S0->CTRL1     = I2S0_StoreReg[2];
;;;1264       I2S0->DMA_TRDLR = I2S0_StoreReg[3];
;;;1265       I2S0->CTRL0     = I2S0_StoreReg[1];
;;;1266   }
;;;1267   #endif
;;;1268   
;;;1269   /********************************************** ********************************************************/
;;;1270   /**************************************** [I2S1 DLPS] **************************************************/
;;;1271   /*******************************************************************************************************/
;;;1272   /*******************************************************************************************************/
;;;1273   #if USE_I2S1_DLPS
;;;1274   
;;;1275   uint32_t I2S1_StoreReg[4];
;;;1276   
;;;1277   /**
;;;1278     * @brief  I2S1 enter dlps callback function(Save I2S1 register values when system enter DLPS)
;;;1279     * @param  None
;;;1280     * @retval None
;;;1281     */
;;;1282   DATA_RAM_FUNCTION __STATIC_INLINE void I2S1_DLPS_Enter(void)
;;;1283   {
;;;1284       PERIPH->PERI_BD_FUNC0_EN |= BIT(2) | BIT(6) | BIT(8);
;;;1285   
;;;1286       I2S1_StoreReg[0] = I2S1->BCLK_DIV;
;;;1287       I2S1_StoreReg[1] = I2S1->CTRL0;
;;;1288       I2S1_StoreReg[2] = I2S1->CTRL1;
;;;1289       I2S1_StoreReg[3] = I2S1->DMA_TRDLR;
;;;1290   }
;;;1291   
;;;1292   /**
;;;1293     * @brief  I2S1 exit dlps callback function(Resume I2S1 register values when system exit DLPS)
;;;1294     * @param  None
;;;1295     * @retval None
;;;1296     */
;;;1297   DATA_RAM_FUNCTION __STATIC_INLINE void I2S1_DLPS_Exit(void)
;;;1298   {
;;;1299       PERIPH->PERI_BD_FUNC0_EN |= BIT(2) | BIT(6) | BIT(8);
;;;1300   
;;;1301       /* Reset I2S1 module */
;;;1302       I2S1->CTRL0 |= 1 << 0;
;;;1303       I2S1->CTRL0 &= ~(1 << 0);
;;;1304   
;;;1305       /* Initialize I2S1 */
;;;1306       I2S1->BCLK_DIV  = I2S1_StoreReg[0];
;;;1307       I2S1->CTRL1     = I2S1_StoreReg[2];
;;;1308       I2S1->DMA_TRDLR = I2S1_StoreReg[3];
;;;1309       I2S1->CTRL0     = I2S1_StoreReg[1];
;;;1310   }
;;;1311   #endif
;;;1312   
;;;1313   /********************************************** ********************************************************/
;;;1314   /**************************************** [CODEC DLPS] ************************************************/
;;;1315   /*******************************************************************************************************/
;;;1316   /*******************************************************************************************************/
;;;1317   #if USE_CODEC_DLPS
;;;1318   
;;;1319   uint32_t CODEC_StoreReg[7];
;;;1320   
;;;1321   /**
;;;1322     * @brief  CODEC enter dlps callback function(Save CODEC register values when system enter DLPS)
;;;1323     * @param  None
;;;1324     * @retval None
;;;1325     */
;;;1326   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_DLPS_Enter(void)
;;;1327   {
;;;1328       /* Enable codec function and clock */
;;;1329       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1330   
;;;1331       CODEC_StoreReg[0] = CODEC->CR0;
;;;1332       CODEC_StoreReg[1] = CODEC->CR1;
;;;1333       CODEC_StoreReg[2] = CODEC->CR2;
;;;1334       CODEC_StoreReg[3] = CODEC->CLK_CTRL;
;;;1335       CODEC_StoreReg[4] = CODEC->I2S_CTRL;
;;;1336       CODEC_StoreReg[5] = CODEC->ADC_CTRL;
;;;1337       CODEC_StoreReg[6] = CODEC->DAC_CTRL;
;;;1338   }
;;;1339   
;;;1340   /**
;;;1341     * @brief  CODEC exit dlps callback function(Resume CODEC register values when system exit DLPS)
;;;1342     * @param  None
;;;1343     * @retval None
;;;1344     */
;;;1345   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_DLPS_Exit(void)
;;;1346   {
;;;1347       /* Enable codec function and clock */
;;;1348       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1349   
;;;1350       /* Initialize CODEC */
;;;1351       if ((CODEC_StoreReg[3] & 0x900) == 0x900)
;;;1352       {
;;;1353           /* Configure AMIC parameters */
;;;1354           CODEC->CR0 = CODEC_StoreReg[0];
;;;1355           CODEC->CR1 = CODEC_StoreReg[1];
;;;1356           CODEC->CR2 = CODEC_StoreReg[2];
;;;1357       }
;;;1358   
;;;1359       /*  Reset audio digital IP */
;;;1360       CODEC->AUDIO_CTRL = 0;
;;;1361       CODEC->AUDIO_CTRL = 1;
;;;1362   
;;;1363       CODEC->CLK_CTRL = CODEC_StoreReg[3];
;;;1364       CODEC->I2S_CTRL = CODEC_StoreReg[4];
;;;1365       CODEC->ADC_CTRL = CODEC_StoreReg[5];
;;;1366       CODEC->DAC_CTRL = CODEC_StoreReg[6];
;;;1367   }
;;;1368   #endif
;;;1369   
;;;1370   /********************************************** ********************************************************/
;;;1371   /**************************************** [CODEC_EQ1 DLPS] ************************************************/
;;;1372   /*******************************************************************************************************/
;;;1373   /*******************************************************************************************************/
;;;1374   #if USE_CODEC_EQ1_DLPS
;;;1375   
;;;1376   uint32_t CODEC_EQ1_StoreReg[5];
;;;1377   
;;;1378   /**
;;;1379     * @brief  CODEC_EQ1 enter dlps callback function(Save CODEC_EQ1 register values when system enter DLPS)
;;;1380     * @param  None
;;;1381     * @retval None
;;;1382     */
;;;1383   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ1_DLPS_Enter(void)
;;;1384   {
;;;1385       /* Enable codec function and clock */
;;;1386       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1387   
;;;1388       CODEC_EQ1_StoreReg[0] = CODEC_EQ1->EQ_H0;
;;;1389       CODEC_EQ1_StoreReg[1] = CODEC_EQ1->EQ_B1;
;;;1390       CODEC_EQ1_StoreReg[2] = CODEC_EQ1->EQ_B2;
;;;1391       CODEC_EQ1_StoreReg[3] = CODEC_EQ1->EQ_A1;
;;;1392       CODEC_EQ1_StoreReg[4] = CODEC_EQ1->EQ_A2;
;;;1393   }
;;;1394   
;;;1395   /**
;;;1396     * @brief  CODEC_EQ1 exit dlps callback function(Resume CODEC_EQ1 register values when system exit DLPS)
;;;1397     * @param  None
;;;1398     * @retval None
;;;1399     */
;;;1400   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ1_DLPS_Exit(void)
;;;1401   {
;;;1402       /* Enable codec function and clock */
;;;1403       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1404   
;;;1405       CODEC_EQ1->EQ_H0 = CODEC_EQ1_StoreReg[0];
;;;1406       CODEC_EQ1->EQ_B1 = CODEC_EQ1_StoreReg[1];
;;;1407       CODEC_EQ1->EQ_B2 = CODEC_EQ1_StoreReg[2];
;;;1408       CODEC_EQ1->EQ_A1 = CODEC_EQ1_StoreReg[3];
;;;1409       CODEC_EQ1->EQ_A2 = CODEC_EQ1_StoreReg[4];
;;;1410   }
;;;1411   #endif
;;;1412   
;;;1413   /********************************************** ********************************************************/
;;;1414   /**************************************** [CODEC_EQ2 DLPS] ************************************************/
;;;1415   /*******************************************************************************************************/
;;;1416   /*******************************************************************************************************/
;;;1417   #if USE_CODEC_EQ2_DLPS
;;;1418   
;;;1419   uint32_t CODEC_EQ2_StoreReg[5];
;;;1420   
;;;1421   /**
;;;1422     * @brief  CODEC_EQ2 enter dlps callback function(Save CODEC_EQ2 register values when system enter DLPS)
;;;1423     * @param  None
;;;1424     * @retval None
;;;1425     */
;;;1426   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ2_DLPS_Enter(void)
;;;1427   {
;;;1428       /* Enable codec function and clock */
;;;1429       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1430   
;;;1431       CODEC_EQ2_StoreReg[0] = CODEC_EQ2->EQ_H0;
;;;1432       CODEC_EQ2_StoreReg[1] = CODEC_EQ2->EQ_B1;
;;;1433       CODEC_EQ2_StoreReg[2] = CODEC_EQ2->EQ_B2;
;;;1434       CODEC_EQ2_StoreReg[3] = CODEC_EQ2->EQ_A1;
;;;1435       CODEC_EQ2_StoreReg[4] = CODEC_EQ2->EQ_A2;
;;;1436   }
;;;1437   
;;;1438   /**
;;;1439     * @brief  CODEC_EQ2 exit dlps callback function(Resume CODEC_EQ2 register values when system exit DLPS)
;;;1440     * @param  None
;;;1441     * @retval None
;;;1442     */
;;;1443   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ2_DLPS_Exit(void)
;;;1444   {
;;;1445       /* Enable codec function and clock */
;;;1446       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1447   
;;;1448       CODEC_EQ2->EQ_H0 = CODEC_EQ2_StoreReg[0];
;;;1449       CODEC_EQ2->EQ_B1 = CODEC_EQ2_StoreReg[1];
;;;1450       CODEC_EQ2->EQ_B2 = CODEC_EQ2_StoreReg[2];
;;;1451       CODEC_EQ2->EQ_A1 = CODEC_EQ2_StoreReg[3];
;;;1452       CODEC_EQ2->EQ_A2 = CODEC_EQ2_StoreReg[4];
;;;1453   }
;;;1454   #endif
;;;1455   
;;;1456   /********************************************** ********************************************************/
;;;1457   /**************************************** [CODEC_EQ3 DLPS] ************************************************/
;;;1458   /*******************************************************************************************************/
;;;1459   /*******************************************************************************************************/
;;;1460   #if USE_CODEC_EQ3_DLPS
;;;1461   
;;;1462   uint32_t CODEC_EQ3_StoreReg[5];
;;;1463   
;;;1464   /**
;;;1465     * @brief  CODEC_EQ3 enter dlps callback function(Save CODEC_EQ3 register values when system enter DLPS)
;;;1466     * @param  None
;;;1467     * @retval None
;;;1468     */
;;;1469   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ3_DLPS_Enter(void)
;;;1470   {
;;;1471       /* Enable codec function and clock */
;;;1472       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1473   
;;;1474       CODEC_EQ3_StoreReg[0] = CODEC_EQ3->EQ_H0;
;;;1475       CODEC_EQ3_StoreReg[1] = CODEC_EQ3->EQ_B1;
;;;1476       CODEC_EQ3_StoreReg[2] = CODEC_EQ3->EQ_B2;
;;;1477       CODEC_EQ3_StoreReg[3] = CODEC_EQ3->EQ_A1;
;;;1478       CODEC_EQ3_StoreReg[4] = CODEC_EQ3->EQ_A2;
;;;1479   }
;;;1480   
;;;1481   /**
;;;1482     * @brief  CODEC_EQ3 exit dlps callback function(Resume CODEC_EQ3 register values when system exit DLPS)
;;;1483     * @param  None
;;;1484     * @retval None
;;;1485     */
;;;1486   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ3_DLPS_Exit(void)
;;;1487   {
;;;1488       /* Enable codec function and clock */
;;;1489       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1490   
;;;1491       CODEC_EQ3->EQ_H0 = CODEC_EQ3_StoreReg[0];
;;;1492       CODEC_EQ3->EQ_B1 = CODEC_EQ3_StoreReg[1];
;;;1493       CODEC_EQ3->EQ_B2 = CODEC_EQ3_StoreReg[2];
;;;1494       CODEC_EQ3->EQ_A1 = CODEC_EQ3_StoreReg[3];
;;;1495       CODEC_EQ3->EQ_A2 = CODEC_EQ3_StoreReg[4];
;;;1496   }
;;;1497   #endif
;;;1498   
;;;1499   /********************************************** ********************************************************/
;;;1500   /**************************************** [CODEC_EQ4 DLPS] ************************************************/
;;;1501   /*******************************************************************************************************/
;;;1502   /*******************************************************************************************************/
;;;1503   #if USE_CODEC_EQ4_DLPS
;;;1504   
;;;1505   uint32_t CODEC_EQ4_StoreReg[5];
;;;1506   
;;;1507   /**
;;;1508     * @brief  CODEC_EQ4 enter dlps callback function(Save CODEC_EQ4 register values when system enter DLPS)
;;;1509     * @param  None
;;;1510     * @retval None
;;;1511     */
;;;1512   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ4_DLPS_Enter(void)
;;;1513   {
;;;1514       /* Enable codec function and clock */
;;;1515       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1516   
;;;1517       CODEC_EQ4_StoreReg[0] = CODEC_EQ4->EQ_H0;
;;;1518       CODEC_EQ4_StoreReg[1] = CODEC_EQ4->EQ_B1;
;;;1519       CODEC_EQ4_StoreReg[2] = CODEC_EQ4->EQ_B2;
;;;1520       CODEC_EQ4_StoreReg[3] = CODEC_EQ4->EQ_A1;
;;;1521       CODEC_EQ4_StoreReg[4] = CODEC_EQ4->EQ_A2;
;;;1522   }
;;;1523   
;;;1524   /**
;;;1525     * @brief  CODEC_EQ4 exit dlps callback function(Resume CODEC_EQ4 register values when system exit DLPS)
;;;1526     * @param  None
;;;1527     * @retval None
;;;1528     */
;;;1529   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ4_DLPS_Exit(void)
;;;1530   {
;;;1531       /* Enable codec function and clock */
;;;1532       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1533   
;;;1534       CODEC_EQ4->EQ_H0 = CODEC_EQ4_StoreReg[0];
;;;1535       CODEC_EQ4->EQ_B1 = CODEC_EQ4_StoreReg[1];
;;;1536       CODEC_EQ4->EQ_B2 = CODEC_EQ4_StoreReg[2];
;;;1537       CODEC_EQ4->EQ_A1 = CODEC_EQ4_StoreReg[3];
;;;1538       CODEC_EQ4->EQ_A2 = CODEC_EQ4_StoreReg[4];
;;;1539   }
;;;1540   #endif
;;;1541   
;;;1542   /********************************************** ********************************************************/
;;;1543   /**************************************** [CODEC_EQ5 DLPS] ************************************************/
;;;1544   /*******************************************************************************************************/
;;;1545   /*******************************************************************************************************/
;;;1546   #if USE_CODEC_EQ5_DLPS
;;;1547   
;;;1548   uint32_t CODEC_EQ5_StoreReg[5];
;;;1549   
;;;1550   /**
;;;1551     * @brief  CODEC_EQ5 enter dlps callback function(Save CODEC_EQ5 register values when system enter DLPS)
;;;1552     * @param  None
;;;1553     * @retval None
;;;1554     */
;;;1555   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ5_DLPS_Enter(void)
;;;1556   {
;;;1557       /* Enable codec function and clock */
;;;1558       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1559   
;;;1560       CODEC_EQ5_StoreReg[0] = CODEC_EQ5->EQ_H0;
;;;1561       CODEC_EQ5_StoreReg[1] = CODEC_EQ5->EQ_B1;
;;;1562       CODEC_EQ5_StoreReg[2] = CODEC_EQ5->EQ_B2;
;;;1563       CODEC_EQ5_StoreReg[3] = CODEC_EQ5->EQ_A1;
;;;1564       CODEC_EQ5_StoreReg[4] = CODEC_EQ5->EQ_A2;
;;;1565   }
;;;1566   
;;;1567   /**
;;;1568     * @brief  CODEC_EQ5 exit dlps callback function(Resume CODEC_EQ5 register values when system exit DLPS)
;;;1569     * @param  None
;;;1570     * @retval None
;;;1571     */
;;;1572   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ5_DLPS_Exit(void)
;;;1573   {
;;;1574       /* Enable codec function and clock */
;;;1575       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1576   
;;;1577       CODEC_EQ5->EQ_H0 = CODEC_EQ5_StoreReg[0];
;;;1578       CODEC_EQ5->EQ_B1 = CODEC_EQ5_StoreReg[1];
;;;1579       CODEC_EQ5->EQ_B2 = CODEC_EQ5_StoreReg[2];
;;;1580       CODEC_EQ5->EQ_A1 = CODEC_EQ5_StoreReg[3];
;;;1581       CODEC_EQ5->EQ_A2 = CODEC_EQ5_StoreReg[4];
;;;1582   }
;;;1583   #endif
;;;1584   
;;;1585   /**
;;;1586     * @brief  Set Log and SWD pins to SW mode.
;;;1587     * @param  void.
;;;1588     * @retval void.
;;;1589     */
;;;1590   DATA_RAM_FUNCTION __STATIC_INLINE void Log_SWD_DLPS_Enter(void)
;;;1591   {
;;;1592       if (OTP->SWD_ENABLE)
;;;1593       {
;;;1594           Pad_Config(P1_0, PAD_SW_MODE, PAD_IS_PWRON, PAD_PULL_DOWN, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;1595           Pad_Config(P1_1, PAD_SW_MODE, PAD_IS_PWRON, PAD_PULL_DOWN, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;1596       }
;;;1597   
;;;1598       Pad_Config(OTP->logPin, PAD_SW_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;1599   
;;;1600   }
;;;1601   
;;;1602   /**
;;;1603     * @brief  Set Log and SWD pins to PINMUX mode.
;;;1604     * @param  void.
;;;1605     * @retval void.
;;;1606     */
;;;1607   DATA_RAM_FUNCTION __STATIC_INLINE void Log_SWD_DLPS_Exit(void)
;;;1608   {
;;;1609       Pad_Config(OTP->logPin, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_NONE, PAD_OUT_DISABLE, PAD_OUT_LOW);
        0x00207df2:    2400        .$      MOVS     r4,#0
        0x00207df4:    f44f1500    O...    MOV      r5,#0x200000
        0x00207df8:    9400        ..      STR      r4,[sp,#0]
        0x00207dfa:    9401        ..      STR      r4,[sp,#4]
        0x00207dfc:    f8950398    ....    LDRB     r0,[r5,#0x398]
        0x00207e00:    2201        ."      MOVS     r2,#1
        0x00207e02:    f000003f    ..?.    AND      r0,r0,#0x3f
        0x00207e06:    4623        #F      MOV      r3,r4
        0x00207e08:    4611        .F      MOV      r1,r2
        0x00207e0a:    f5057566    ..fu    ADD      r5,r5,#0x398
        0x00207e0e:    f609fae5    ....    BL       Pad_Config ; 0x113dc
;;;1610   
;;;1611       if (OTP->SWD_ENABLE)
        0x00207e12:    f8150c64    ..d.    LDRB     r0,[r5,#-0x64]
        0x00207e16:    07c0        ..      LSLS     r0,r0,#31
        0x00207e18:    d00f        ..      BEQ      0x207e3a ; DLPS_IO_ExitDlpsCb + 104
;;;1612       {
;;;1613           Pad_Config(P1_0, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
        0x00207e1a:    2301        .#      MOVS     r3,#1
        0x00207e1c:    9400        ..      STR      r4,[sp,#0]
        0x00207e1e:    461a        .F      MOV      r2,r3
        0x00207e20:    4619        .F      MOV      r1,r3
        0x00207e22:    2008        .       MOVS     r0,#8
        0x00207e24:    9401        ..      STR      r4,[sp,#4]
        0x00207e26:    f609fad9    ....    BL       Pad_Config ; 0x113dc
;;;1614           Pad_Config(P1_1, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
        0x00207e2a:    2301        .#      MOVS     r3,#1
        0x00207e2c:    9400        ..      STR      r4,[sp,#0]
        0x00207e2e:    461a        .F      MOV      r2,r3
        0x00207e30:    4619        .F      MOV      r1,r3
        0x00207e32:    2009        .       MOVS     r0,#9
        0x00207e34:    9401        ..      STR      r4,[sp,#4]
        0x00207e36:    f609fad1    ....    BL       Pad_Config ; 0x113dc
;;;1615       }
;;;1616   }
;;;1617   
;;;1618   /********************************************** ********************************************************/
;;;1619   /*********************************** [USER Exit DLPS CALLBACK FUCN] *****************************************/
;;;1620   /*******************************************************************************************************/
;;;1621   /*******************************************************************************************************/
;;;1622   #if USE_USER_DEFINE_DLPS_EXIT_CB
;;;1623   
;;;1624   DLPS_IO_ExitDlpsCB User_IO_ExitDlpsCB = NULL;
;;;1625   
;;;1626   #endif /* USE_USER_DEFINE_DLPS_EXIT_CB */
;;;1627   
;;;1628   /********************************************** ********************************************************/
;;;1629   /*********************************** [USER Enter DLPS CALLBACK FUCN] *****************************************/
;;;1630   /*******************************************************************************************************/
;;;1631   /*******************************************************************************************************/
;;;1632   #if USE_USER_DEFINE_DLPS_ENTER_CB
;;;1633   
;;;1634   DLPS_IO_EnterDlpsCB User_IO_EnterDlpsCB = NULL;
;;;1635   
;;;1636   #endif /* USE_USER_DEFINE_DLPS_EXIT_CB */
;;;1637   
;;;1638   /********************************************** ********************************************************/
;;;1639   /*********************************** [Enter & Exit DLPS CALLBACK FUNC] *********************************/
;;;1640   /*******************************************************************************************************/
;;;1641   /*******************************************************************************************************/
;;;1642   #if USE_IO_DRIVER_DLPS
;;;1643   
;;;1644   /**
;;;1645     * @brief  IO enter dlps callback function
;;;1646     * @param  None
;;;1647     * @retval None
;;;1648     */
;;;1649   DATA_RAM_FUNCTION void DLPS_IO_EnterDlpsCb(void)
;;;1650   {
;;;1651       /* low stack do it instead */
;;;1652   //    Pad_ClearAllWakeupINT();
;;;1653   
;;;1654   //    DBG_DIRECT("DLPS_IO_EnterDlpsCb");
;;;1655       NVIC_DisableIRQ(System_IRQn);
;;;1656       CPU_DLPS_Enter();
;;;1657   
;;;1658       Pinmux_DLPS_Enter();
;;;1659   
;;;1660   #if USE_USER_DEFINE_DLPS_ENTER_CB
;;;1661       if (User_IO_EnterDlpsCB)
;;;1662       {
;;;1663           User_IO_EnterDlpsCB();
;;;1664       }
;;;1665   #endif
;;;1666   
;;;1667   #if USE_I2C0_DLPS
;;;1668       I2C0_DLPS_Enter();
;;;1669   #endif
;;;1670   
;;;1671   #if USE_I2C1_DLPS
;;;1672       I2C1_DLPS_Enter();
;;;1673   #endif
;;;1674   
;;;1675   #if USE_TIM_DLPS
;;;1676       TIM_DLPS_Enter();
;;;1677   #endif
;;;1678   
;;;1679   #if USE_QDECODER_DLPS
;;;1680       QuadDecoder_DLPS_Enter();
;;;1681   #endif
;;;1682   
;;;1683   #if USE_IR_DLPS
;;;1684       IR_DLPS_Enter();
;;;1685   #endif
;;;1686   
;;;1687   #if USE_UART_DLPS
;;;1688       UART_DLPS_Enter();
;;;1689   #endif
;;;1690   
;;;1691   #if USE_UART1_DLPS
;;;1692       UART1_DLPS_Enter();
;;;1693   #endif
;;;1694   
;;;1695   #if USE_UART2_DLPS
;;;1696       UART2_DLPS_Enter();
;;;1697   #endif
;;;1698   
;;;1699   #if USE_SPI0_DLPS
;;;1700       SPI0_DLPS_Enter();
;;;1701   #endif
;;;1702   
;;;1703   #if USE_SPI1_DLPS
;;;1704       SPI1_DLPS_Enter();
;;;1705   #endif
;;;1706   
;;;1707   #if USE_SPI2W_DLPS
;;;1708       SPI2W_DLPS_Enter();
;;;1709   #endif
;;;1710   
;;;1711   #if USE_KEYSCAN_DLPS
;;;1712       KeyScan_DLPS_Enter();
;;;1713   #endif
;;;1714   
;;;1715   #if USE_GPIO_DLPS
;;;1716       GPIO_DLPS_Enter();
;;;1717   #endif
;;;1718   
;;;1719   #if USE_ADC_DLPS
;;;1720       ADC_DLPS_Enter();
;;;1721   #endif
;;;1722   
;;;1723   #if USE_LCD_DLPS
;;;1724       LCD_DLPS_Enter();
;;;1725   #endif
;;;1726   
;;;1727   #if USE_I2S0_DLPS
;;;1728       I2S0_DLPS_Enter();
;;;1729   #endif
;;;1730   
;;;1731   #if USE_I2S1_DLPS
;;;1732       I2S1_DLPS_Enter();
;;;1733   #endif
;;;1734   
;;;1735   #if USE_CODEC_DLPS
;;;1736       CODEC_DLPS_Enter();
;;;1737   #endif
;;;1738   
;;;1739   #if USE_CODEC_EQ1_DLPS
;;;1740       CODEC_EQ1_DLPS_Enter();
;;;1741   #endif
;;;1742   
;;;1743   #if USE_CODEC_EQ2_DLPS
;;;1744       CODEC_EQ2_DLPS_Enter();
;;;1745   #endif
;;;1746   
;;;1747   #if USE_CODEC_EQ3_DLPS
;;;1748       CODEC_EQ3_DLPS_Enter();
;;;1749   #endif
;;;1750   
;;;1751   #if USE_CODEC_EQ4_DLPS
;;;1752       CODEC_EQ4_DLPS_Enter();
;;;1753   #endif
;;;1754   
;;;1755   #if USE_CODEC_EQ5_DLPS
;;;1756       CODEC_EQ5_DLPS_Enter();
;;;1757   #endif
;;;1758   
;;;1759       Log_SWD_DLPS_Enter();
;;;1760   
;;;1761   }
;;;1762   #endif  /* USE_IO_DRIVER_DLPS */
;;;1763   
;;;1764   #if USE_IO_DRIVER_DLPS
;;;1765   /**
;;;1766     * @brief  IO exit dlps callback function.
;;;1767     * @param  None
;;;1768     * @retval None
;;;1769     */
;;;1770   DATA_RAM_FUNCTION void DLPS_IO_ExitDlpsCb(void)
;;;1771   {
;;;1772   
;;;1773   //    DBG_BUFFER(TYPE_BUMBLEBEE3, SUBTYPE_FORMAT, MODULE_DLPS, LEVEL_INFO,
;;;1774   //               "DLPS_IO_ExitDlpsCb",0);
;;;1775   
;;;1776       Pinmux_DLPS_Exit();
;;;1777   
;;;1778       Log_SWD_DLPS_Exit();
;;;1779   
;;;1780   #if USE_I2C0_DLPS
;;;1781       I2C0_DLPS_Exit();
;;;1782   #endif
;;;1783   
;;;1784   #if USE_I2C1_DLPS
;;;1785       I2C1_DLPS_Exit();
;;;1786   #endif
;;;1787   
;;;1788   #if USE_TIM_DLPS
;;;1789       TIM_DLPS_Exit();
;;;1790   #endif
;;;1791   
;;;1792   #if USE_QDECODER_DLPS
;;;1793       QuadDecoder_DLPS_Exit();
;;;1794   #endif
;;;1795   
;;;1796   #if USE_IR_DLPS
;;;1797       IR_DLPS_Exit();
;;;1798   #endif
;;;1799   
;;;1800   #if USE_UART_DLPS
;;;1801       UART_DLPS_Exit();
;;;1802   #endif
;;;1803   
;;;1804   #if USE_UART1_DLPS
;;;1805       UART1_DLPS_Exit();
;;;1806   #endif
;;;1807   
;;;1808   #if USE_UART2_DLPS
;;;1809       UART2_DLPS_Exit();
;;;1810   #endif
;;;1811   
;;;1812   #if USE_SPI0_DLPS
;;;1813       SPI0_DLPS_Exit();
;;;1814   #endif
;;;1815   
;;;1816   #if USE_SPI1_DLPS
;;;1817       SPI1_DLPS_Exit();
;;;1818   #endif
;;;1819   
;;;1820   #if USE_SPI2W_DLPS
;;;1821       SPI2W_DLPS_Exit();
;;;1822   #endif
;;;1823   
;;;1824   #if USE_KEYSCAN_DLPS
;;;1825       KeyScan_DLPS_Exit();
;;;1826   #endif
;;;1827   
;;;1828   #if USE_GPIO_DLPS
;;;1829       GPIO_DLPS_Exit();
;;;1830   #endif
;;;1831   
;;;1832   #if USE_ADC_DLPS
;;;1833       ADC_DLPS_Exit();
;;;1834   #endif
;;;1835   
;;;1836   #if USE_LCD_DLPS
;;;1837       LCD_DLPS_Exit();
;;;1838   #endif
;;;1839   
;;;1840   #if USE_I2S0_DLPS
;;;1841       I2S0_DLPS_Exit();
;;;1842   #endif
;;;1843   
;;;1844   #if USE_I2S1_DLPS
;;;1845       I2S1_DLPS_Exit();
;;;1846   #endif
;;;1847   
;;;1848   #if USE_CODEC_DLPS
;;;1849       CODEC_DLPS_Exit();
;;;1850   #endif
;;;1851   
;;;1852   #if USE_CODEC_EQ1_DLPS
;;;1853       CODEC_EQ1_DLPS_Exit();
;;;1854   #endif
;;;1855   
;;;1856   #if USE_CODEC_EQ2_DLPS
;;;1857       CODEC_EQ2_DLPS_Exit();
;;;1858   #endif
;;;1859   
;;;1860   #if USE_CODEC_EQ3_DLPS
;;;1861       CODEC_EQ3_DLPS_Exit();
;;;1862   #endif
;;;1863   
;;;1864   #if USE_CODEC_EQ4_DLPS
;;;1865       CODEC_EQ4_DLPS_Exit();
;;;1866   #endif
;;;1867   
;;;1868   #if USE_CODEC_EQ5_DLPS
;;;1869       CODEC_EQ5_DLPS_Exit();
;;;1870   #endif
;;;1871   
;;;1872   #if USE_USER_DEFINE_DLPS_EXIT_CB
;;;1873       if (User_IO_ExitDlpsCB)
        0x00207e3a:    4d18        .M      LDR      r5,[pc,#96] ; [0x207e9c] = 0x208160
        0x00207e3c:    3d0c        .=      SUBS     r5,r5,#0xc
        0x00207e3e:    6868        hh      LDR      r0,[r5,#4]
        0x00207e40:    b100        ..      CBZ      r0,0x207e44 ; DLPS_IO_ExitDlpsCb + 114
;;;1874       {
;;;1875           User_IO_ExitDlpsCB();
        0x00207e42:    4780        .G      BLX      r0
;;;1876       }
;;;1877   #endif
;;;1878   
;;;1879       NVIC_InitTypeDef nvic_init_struct;
;;;1880       nvic_init_struct.NVIC_IRQChannel         = System_IRQn;
;;;1881       nvic_init_struct.NVIC_IRQChannelCmd      = (FunctionalState)ENABLE;
        0x00207e44:    2001        .       MOVS     r0,#1
        0x00207e46:    f88d0010    ....    STRB     r0,[sp,#0x10]
;;;1882       nvic_init_struct.NVIC_IRQChannelPriority = 3;
        0x00207e4a:    2003        .       MOVS     r0,#3
;;;1883       NVIC_Init(&nvic_init_struct); //Enable SYSTEM_ON Interrupt
        0x00207e4c:    9003        ..      STR      r0,[sp,#0xc]
        0x00207e4e:    f88d4008    ...@    STRB     r4,[sp,#8]
        0x00207e52:    a802        ..      ADD      r0,sp,#8
        0x00207e54:    f609fa34    ..4.    BL       NVIC_Init ; 0x112c0
        0x00207e58:    4c10        .L      LDR      r4,[pc,#64] ; [0x207e9c] = 0x208160
        0x00207e5a:    6863        ch      LDR      r3,[r4,#4]
        0x00207e5c:    0858        X.      LSRS     r0,r3,#1
        0x00207e5e:    d004        ..      BEQ      0x207e6a ; DLPS_IO_ExitDlpsCb + 152
        0x00207e60:    2201        ."      MOVS     r2,#1
        0x00207e62:    4911        .I      LDR      r1,[pc,#68] ; [0x207ea8] = 0x88000e8
        0x00207e64:    4811        .H      LDR      r0,[pc,#68] ; [0x207eac] = 0x21100401
        0x00207e66:    f5fffdfa    ....    BL       log_buffer ; 0x7a5e
        0x00207e6a:    2003        .       MOVS     r0,#3
        0x00207e6c:    f10022e0    ..."    ADD      r2,r0,#0xe000e000
        0x00207e70:    f8141020    .. .    LDRB     r1,[r4,r0,LSL #2]
        0x00207e74:    f8821400    ....    STRB     r1,[r2,#0x400]
        0x00207e78:    1c40        @.      ADDS     r0,r0,#1
        0x00207e7a:    2820         (      CMP      r0,#0x20
        0x00207e7c:    d3f6        ..      BCC      0x207e6c ; DLPS_IO_ExitDlpsCb + 154
        0x00207e7e:    4908        .I      LDR      r1,[pc,#32] ; [0x207ea0] = 0xe000ed08
        0x00207e80:    f8d40080    ....    LDR      r0,[r4,#0x80]
        0x00207e84:    6008        .`      STR      r0,[r1,#0]
        0x00207e86:    4907        .I      LDR      r1,[pc,#28] ; [0x207ea4] = 0x40006000
        0x00207e88:    6828        (h      LDR      r0,[r5,#0]
        0x00207e8a:    60c8        .`      STR      r0,[r1,#0xc]
        0x00207e8c:    f04f21e0    O..!    MOV      r1,#0xe000e000
        0x00207e90:    6820         h      LDR      r0,[r4,#0]
        0x00207e92:    f8c10100    ....    STR      r0,[r1,#0x100]
;;;1884   
;;;1885       CPU_DLPS_Exit();
;;;1886   }
        0x00207e96:    b005        ..      ADD      sp,sp,#0x14
        0x00207e98:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x00207e9a:    0000        ..      DCW    0
        0x00207e9c:    00208160    `. .    DCD    2130272
        0x00207ea0:    e000ed08    ....    DCD    3758157064
        0x00207ea4:    40006000    .`.@    DCD    1073766400
        0x00207ea8:    088000e8    ....    DCD    142606568
        0x00207eac:    21100401    ...!    DCD    554697729
    $t
    .ram.dataon.data
    UART0_Handler
;;; sample\uart.c
;;;271    {
        0x00207eb0:    e92d47f0    -..G    PUSH     {r4-r10,lr}
;;; ..\..\..\inc\peripheral\rtl876x_uart.h
;;;426        return (uint16_t)(UARTx->INTID_FCR & (0x0000000E));
        0x00207eb4:    4d2c        ,M      LDR      r5,[pc,#176] ; [0x207f68] = 0x40012000
        0x00207eb6:    68a8        .h      LDR      r0,[r5,#8]
;;; sample\uart.c
;;;278        UART_INTConfig(UART, UART_INT_RD_AVA | UART_INT_LINE_STS, DISABLE);
        0x00207eb8:    2200        ."      MOVS     r2,#0
        0x00207eba:    f000040e    ....    AND      r4,r0,#0xe
;;; sample\uart.c (278)
        0x00207ebe:    2105        .!      MOVS     r1,#5
        0x00207ec0:    4628        (F      MOV      r0,r5
        0x00207ec2:    f206f743    ..C.    BL       UART_INTConfig ; 0x80ed4c
;;;279    
;;;280        if (UART_GetFlagState(UART, UART_FLAG_RX_IDLE) == SET)
        0x00207ec6:    15a9        ..      ASRS     r1,r5,#22
        0x00207ec8:    4628        (F      MOV      r0,r5
        0x00207eca:    f206f76a    ..j.    BL       UART_GetFlagState ; 0x80eda2
        0x00207ece:    2600        .&      MOVS     r6,#0
;;; sample\uart.c (200)
        0x00207ed0:    4f26        &O      LDR      r7,[pc,#152] ; [0x207f6c] = 0x20823c
;;;201        {
;;;202            UART_RX_Count = 0;
;;;203            memset(UART_RX_Buffer, 0, sizeof(UART_RX_Buffer));
        0x00207ed2:    f44f7816    O..x    MOV      r8,#0x258
;;;204            return;
;;;205        }
;;;206        
;;;207        if(tuya_ble_common_uart_receive_data(UART_RX_Buffer,UART_RX_Count)==TUYA_BLE_SUCCESS)
;;;208        {
;;;209            io_uart_dlps_monitor_timer_start();
;;;210        }
;;;211      /*  
;;;212        for(i=0; i<(UART_RX_Count-2); i++)
;;;213        {
;;;214            if(((UART_RX_Buffer[i]==0x55)||(UART_RX_Buffer[i]==0x66))&&(UART_RX_Buffer[i+1]==0xAA)&&((UART_RX_Buffer[i+2]==0x01)||(UART_RX_Buffer[i+2]==0x00)))
;;;215            {
;;;216                if((i+5+1)>UART_RX_Count)
;;;217                {
;;;218                    break;
;;;219                }
;;;220                else
;;;221                {
;;;222                    data_len = (UART_RX_Buffer[i+4]<<8)|UART_RX_Buffer[i+5];
;;;223                }
;;;224    
;;;225                if((i+5+data_len+2)>UART_RX_Count)
;;;226                {
;;;227                    continue;
;;;228                }
;;;229                sum = check_sum(&UART_RX_Buffer[i],data_len+6);
;;;230                if(sum==UART_RX_Buffer[i+6+data_len])
;;;231                {
;;;232                    uart_evt_buffer=(uint8_t*)tuya_malloc(data_len+7);
;;;233                    
;;;234                    if(uart_evt_buffer==NULL)
;;;235                    {
;;;236                        APP_PRINT_INFO0("tuya_malloc uart evt buffer fail.");
;;;237                        break;
;;;238                    }
;;;239                    
;;;240                    uart_event.hdr.event_id = TUYA_UART_EVT;
;;;241                    uart_event.uart_event.cmd=0;
;;;242                    uart_event.uart_event.data=uart_evt_buffer;
;;;243                    uart_event.uart_event.len=data_len+7;
;;;244                    
;;;245                    memcpy(uart_evt_buffer,&UART_RX_Buffer[i],data_len+7);
;;;246                                    
;;;247                    if(tuya_event_send(&uart_event)!=0)
;;;248                    {
;;;249                       // tuya_MemPut(uart_evt_buffer);
;;;250                        tuya_free(uart_evt_buffer);
;;;251                        APP_PRINT_INFO0("send uart receive data to task fail.");
;;;252                        break;
;;;253                    }
;;;254                    APP_PRINT_INFO0("send uart receive data to task success.");              
;;;255                }
;;;256                else
;;;257                {
;;;258                    APP_PRINT_INFO2("uart receive data check_sum error , receive sum = 0x%02x ; cal sum = 0x%02x",UART_RX_Buffer[i+6+data_len],sum);
;;;259                }
;;;260    
;;;261            }
;;;262        }
;;;263        */
;;;264        UART_RX_Count = 0;
;;;265        memset(UART_RX_Buffer, 0, sizeof(UART_RX_Buffer));
;;;266    
;;;267    }
;;;268    
;;;269    
;;;270    DATA_RAM_FUNCTION void UART0_Handler(void)
;;;271    {
;;;272        uint16_t rx_len = 0;
;;;273    
;;;274        /* Read interrupt id */
;;;275        uint32_t int_status = UART_GetIID(UART);
;;;276        //APP_PRINT_INFO1("Read interrupt int_status = 0x%x",int_status); 
;;;277        /* Disable interrupt */
;;;278        UART_INTConfig(UART, UART_INT_RD_AVA | UART_INT_LINE_STS, DISABLE);
;;;279    
;;;280        if (UART_GetFlagState(UART, UART_FLAG_RX_IDLE) == SET)
        0x00207ed6:    2801        .(      CMP      r0,#1
        0x00207ed8:    d118        ..      BNE      0x207f0c ; UART0_Handler + 92
;;;281        {
;;;282            /* Clear flag */
;;;283            UART_INTConfig(UART, UART_INT_IDLE, DISABLE);
        0x00207eda:    2200        ."      MOVS     r2,#0
        0x00207edc:    2180        .!      MOVS     r1,#0x80
        0x00207ede:    4628        (F      MOV      r0,r5
        0x00207ee0:    f206f734    ..4.    BL       UART_INTConfig ; 0x80ed4c
;;; sample\uart.c (200)
        0x00207ee4:    8879        y.      LDRH     r1,[r7,#2]
        0x00207ee6:    2907        .)      CMP      r1,#7
        0x00207ee8:    d305        ..      BCC      0x207ef6 ; UART0_Handler + 70
;;;201        {
;;;202            UART_RX_Count = 0;
;;;203            memset(UART_RX_Buffer, 0, sizeof(UART_RX_Buffer));
;;;204            return;
;;;205        }
;;;206        
;;;207        if(tuya_ble_common_uart_receive_data(UART_RX_Buffer,UART_RX_Count)==TUYA_BLE_SUCCESS)
        0x00207eea:    1d38        8.      ADDS     r0,r7,#4
        0x00207eec:    f209f4e4    ....    BL       tuya_ble_common_uart_receive_data ; 0x8118b8
        0x00207ef0:    b908        ..      CBNZ     r0,0x207ef6 ; UART0_Handler + 70
;;;208        {
;;;209            io_uart_dlps_monitor_timer_start();
        0x00207ef2:    f207f347    ..G.    BL       io_uart_dlps_monitor_timer_start ; 0x80f584
;;;210        }
;;;211      /*  
;;;212        for(i=0; i<(UART_RX_Count-2); i++)
;;;213        {
;;;214            if(((UART_RX_Buffer[i]==0x55)||(UART_RX_Buffer[i]==0x66))&&(UART_RX_Buffer[i+1]==0xAA)&&((UART_RX_Buffer[i+2]==0x01)||(UART_RX_Buffer[i+2]==0x00)))
;;;215            {
;;;216                if((i+5+1)>UART_RX_Count)
;;;217                {
;;;218                    break;
;;;219                }
;;;220                else
;;;221                {
;;;222                    data_len = (UART_RX_Buffer[i+4]<<8)|UART_RX_Buffer[i+5];
;;;223                }
;;;224    
;;;225                if((i+5+data_len+2)>UART_RX_Count)
;;;226                {
;;;227                    continue;
;;;228                }
;;;229                sum = check_sum(&UART_RX_Buffer[i],data_len+6);
;;;230                if(sum==UART_RX_Buffer[i+6+data_len])
;;;231                {
;;;232                    uart_evt_buffer=(uint8_t*)tuya_malloc(data_len+7);
;;;233                    
;;;234                    if(uart_evt_buffer==NULL)
;;;235                    {
;;;236                        APP_PRINT_INFO0("tuya_malloc uart evt buffer fail.");
;;;237                        break;
;;;238                    }
;;;239                    
;;;240                    uart_event.hdr.event_id = TUYA_UART_EVT;
;;;241                    uart_event.uart_event.cmd=0;
;;;242                    uart_event.uart_event.data=uart_evt_buffer;
;;;243                    uart_event.uart_event.len=data_len+7;
;;;244                    
;;;245                    memcpy(uart_evt_buffer,&UART_RX_Buffer[i],data_len+7);
;;;246                                    
;;;247                    if(tuya_event_send(&uart_event)!=0)
;;;248                    {
;;;249                       // tuya_MemPut(uart_evt_buffer);
;;;250                        tuya_free(uart_evt_buffer);
;;;251                        APP_PRINT_INFO0("send uart receive data to task fail.");
;;;252                        break;
;;;253                    }
;;;254                    APP_PRINT_INFO0("send uart receive data to task success.");              
;;;255                }
;;;256                else
;;;257                {
;;;258                    APP_PRINT_INFO2("uart receive data check_sum error , receive sum = 0x%02x ; cal sum = 0x%02x",UART_RX_Buffer[i+6+data_len],sum);
;;;259                }
;;;260    
;;;261            }
;;;262        }
;;;263        */
;;;264        UART_RX_Count = 0;
;;;265        memset(UART_RX_Buffer, 0, sizeof(UART_RX_Buffer));
        0x00207ef6:    481d        .H      LDR      r0,[pc,#116] ; [0x207f6c] = 0x20823c
;;; sample\uart.c (264)
        0x00207ef8:    807e        ~.      STRH     r6,[r7,#2]
;;;265        memset(UART_RX_Buffer, 0, sizeof(UART_RX_Buffer));
        0x00207efa:    4641        AF      MOV      r1,r8
        0x00207efc:    1d00        ..      ADDS     r0,r0,#4
        0x00207efe:    f652f88d    R...    BL       __aeabi_memclr ; 0x5a01c
;;;266    
;;;267    }
;;;268    
;;;269    
;;;270    DATA_RAM_FUNCTION void UART0_Handler(void)
;;;271    {
;;;272        uint16_t rx_len = 0;
;;;273    
;;;274        /* Read interrupt id */
;;;275        uint32_t int_status = UART_GetIID(UART);
;;;276        //APP_PRINT_INFO1("Read interrupt int_status = 0x%x",int_status); 
;;;277        /* Disable interrupt */
;;;278        UART_INTConfig(UART, UART_INT_RD_AVA | UART_INT_LINE_STS, DISABLE);
;;;279    
;;;280        if (UART_GetFlagState(UART, UART_FLAG_RX_IDLE) == SET)
;;;281        {
;;;282            /* Clear flag */
;;;283            UART_INTConfig(UART, UART_INT_IDLE, DISABLE);
;;;284    
;;;285            uart_receive_process();
;;;286    
;;;287            UART_INTConfig(UART, UART_INT_IDLE, ENABLE);
        0x00207f02:    2201        ."      MOVS     r2,#1
        0x00207f04:    2180        .!      MOVS     r1,#0x80
        0x00207f06:    4628        (F      MOV      r0,r5
        0x00207f08:    f206f720    .. .    BL       UART_INTConfig ; 0x80ed4c
;;;288        }
;;;289    
;;;290        switch (int_status & 0x0E)
        0x00207f0c:    f004000e    ....    AND      r0,r4,#0xe
        0x00207f10:    2802        .(      CMP      r0,#2
        0x00207f12:    d013        ..      BEQ      0x207f3c ; UART0_Handler + 140
;;; sample\uart.c (203)
        0x00207f14:    f8df9054    ..T.    LDR      r9,[pc,#84] ; [0x207f6c] = 0x20823c
;;;204            return;
;;;205        }
;;;206        
;;;207        if(tuya_ble_common_uart_receive_data(UART_RX_Buffer,UART_RX_Count)==TUYA_BLE_SUCCESS)
;;;208        {
;;;209            io_uart_dlps_monitor_timer_start();
;;;210        }
;;;211      /*  
;;;212        for(i=0; i<(UART_RX_Count-2); i++)
;;;213        {
;;;214            if(((UART_RX_Buffer[i]==0x55)||(UART_RX_Buffer[i]==0x66))&&(UART_RX_Buffer[i+1]==0xAA)&&((UART_RX_Buffer[i+2]==0x01)||(UART_RX_Buffer[i+2]==0x00)))
;;;215            {
;;;216                if((i+5+1)>UART_RX_Count)
;;;217                {
;;;218                    break;
;;;219                }
;;;220                else
;;;221                {
;;;222                    data_len = (UART_RX_Buffer[i+4]<<8)|UART_RX_Buffer[i+5];
;;;223                }
;;;224    
;;;225                if((i+5+data_len+2)>UART_RX_Count)
;;;226                {
;;;227                    continue;
;;;228                }
;;;229                sum = check_sum(&UART_RX_Buffer[i],data_len+6);
;;;230                if(sum==UART_RX_Buffer[i+6+data_len])
;;;231                {
;;;232                    uart_evt_buffer=(uint8_t*)tuya_malloc(data_len+7);
;;;233                    
;;;234                    if(uart_evt_buffer==NULL)
;;;235                    {
;;;236                        APP_PRINT_INFO0("tuya_malloc uart evt buffer fail.");
;;;237                        break;
;;;238                    }
;;;239                    
;;;240                    uart_event.hdr.event_id = TUYA_UART_EVT;
;;;241                    uart_event.uart_event.cmd=0;
;;;242                    uart_event.uart_event.data=uart_evt_buffer;
;;;243                    uart_event.uart_event.len=data_len+7;
;;;244                    
;;;245                    memcpy(uart_evt_buffer,&UART_RX_Buffer[i],data_len+7);
;;;246                                    
;;;247                    if(tuya_event_send(&uart_event)!=0)
;;;248                    {
;;;249                       // tuya_MemPut(uart_evt_buffer);
;;;250                        tuya_free(uart_evt_buffer);
;;;251                        APP_PRINT_INFO0("send uart receive data to task fail.");
;;;252                        break;
;;;253                    }
;;;254                    APP_PRINT_INFO0("send uart receive data to task success.");              
;;;255                }
;;;256                else
;;;257                {
;;;258                    APP_PRINT_INFO2("uart receive data check_sum error , receive sum = 0x%02x ; cal sum = 0x%02x",UART_RX_Buffer[i+6+data_len],sum);
;;;259                }
;;;260    
;;;261            }
;;;262        }
;;;263        */
;;;264        UART_RX_Count = 0;
;;;265        memset(UART_RX_Buffer, 0, sizeof(UART_RX_Buffer));
;;;266    
;;;267    }
;;;268    
;;;269    
;;;270    DATA_RAM_FUNCTION void UART0_Handler(void)
;;;271    {
;;;272        uint16_t rx_len = 0;
;;;273    
;;;274        /* Read interrupt id */
;;;275        uint32_t int_status = UART_GetIID(UART);
;;;276        //APP_PRINT_INFO1("Read interrupt int_status = 0x%x",int_status); 
;;;277        /* Disable interrupt */
;;;278        UART_INTConfig(UART, UART_INT_RD_AVA | UART_INT_LINE_STS, DISABLE);
;;;279    
;;;280        if (UART_GetFlagState(UART, UART_FLAG_RX_IDLE) == SET)
;;;281        {
;;;282            /* Clear flag */
;;;283            UART_INTConfig(UART, UART_INT_IDLE, DISABLE);
;;;284    
;;;285            uart_receive_process();
;;;286    
;;;287            UART_INTConfig(UART, UART_INT_IDLE, ENABLE);
;;;288        }
;;;289    
;;;290        switch (int_status & 0x0E)
        0x00207f18:    2804        .(      CMP      r0,#4
;;; sample\uart.c (203)
        0x00207f1a:    f1090904    ....    ADD      r9,r9,#4
;;;204            return;
;;;205        }
;;;206        
;;;207        if(tuya_ble_common_uart_receive_data(UART_RX_Buffer,UART_RX_Count)==TUYA_BLE_SUCCESS)
;;;208        {
;;;209            io_uart_dlps_monitor_timer_start();
;;;210        }
;;;211      /*  
;;;212        for(i=0; i<(UART_RX_Count-2); i++)
;;;213        {
;;;214            if(((UART_RX_Buffer[i]==0x55)||(UART_RX_Buffer[i]==0x66))&&(UART_RX_Buffer[i+1]==0xAA)&&((UART_RX_Buffer[i+2]==0x01)||(UART_RX_Buffer[i+2]==0x00)))
;;;215            {
;;;216                if((i+5+1)>UART_RX_Count)
;;;217                {
;;;218                    break;
;;;219                }
;;;220                else
;;;221                {
;;;222                    data_len = (UART_RX_Buffer[i+4]<<8)|UART_RX_Buffer[i+5];
;;;223                }
;;;224    
;;;225                if((i+5+data_len+2)>UART_RX_Count)
;;;226                {
;;;227                    continue;
;;;228                }
;;;229                sum = check_sum(&UART_RX_Buffer[i],data_len+6);
;;;230                if(sum==UART_RX_Buffer[i+6+data_len])
;;;231                {
;;;232                    uart_evt_buffer=(uint8_t*)tuya_malloc(data_len+7);
;;;233                    
;;;234                    if(uart_evt_buffer==NULL)
;;;235                    {
;;;236                        APP_PRINT_INFO0("tuya_malloc uart evt buffer fail.");
;;;237                        break;
;;;238                    }
;;;239                    
;;;240                    uart_event.hdr.event_id = TUYA_UART_EVT;
;;;241                    uart_event.uart_event.cmd=0;
;;;242                    uart_event.uart_event.data=uart_evt_buffer;
;;;243                    uart_event.uart_event.len=data_len+7;
;;;244                    
;;;245                    memcpy(uart_evt_buffer,&UART_RX_Buffer[i],data_len+7);
;;;246                                    
;;;247                    if(tuya_event_send(&uart_event)!=0)
;;;248                    {
;;;249                       // tuya_MemPut(uart_evt_buffer);
;;;250                        tuya_free(uart_evt_buffer);
;;;251                        APP_PRINT_INFO0("send uart receive data to task fail.");
;;;252                        break;
;;;253                    }
;;;254                    APP_PRINT_INFO0("send uart receive data to task success.");              
;;;255                }
;;;256                else
;;;257                {
;;;258                    APP_PRINT_INFO2("uart receive data check_sum error , receive sum = 0x%02x ; cal sum = 0x%02x",UART_RX_Buffer[i+6+data_len],sum);
;;;259                }
;;;260    
;;;261            }
;;;262        }
;;;263        */
;;;264        UART_RX_Count = 0;
;;;265        memset(UART_RX_Buffer, 0, sizeof(UART_RX_Buffer));
;;;266    
;;;267    }
;;;268    
;;;269    
;;;270    DATA_RAM_FUNCTION void UART0_Handler(void)
;;;271    {
;;;272        uint16_t rx_len = 0;
;;;273    
;;;274        /* Read interrupt id */
;;;275        uint32_t int_status = UART_GetIID(UART);
;;;276        //APP_PRINT_INFO1("Read interrupt int_status = 0x%x",int_status); 
;;;277        /* Disable interrupt */
;;;278        UART_INTConfig(UART, UART_INT_RD_AVA | UART_INT_LINE_STS, DISABLE);
;;;279    
;;;280        if (UART_GetFlagState(UART, UART_FLAG_RX_IDLE) == SET)
;;;281        {
;;;282            /* Clear flag */
;;;283            UART_INTConfig(UART, UART_INT_IDLE, DISABLE);
;;;284    
;;;285            uart_receive_process();
;;;286    
;;;287            UART_INTConfig(UART, UART_INT_IDLE, ENABLE);
;;;288        }
;;;289    
;;;290        switch (int_status & 0x0E)
        0x00207f1e:    d014        ..      BEQ      0x207f4a ; UART0_Handler + 154
        0x00207f20:    2806        .(      CMP      r0,#6
        0x00207f22:    d00b        ..      BEQ      0x207f3c ; UART0_Handler + 140
        0x00207f24:    280c        .(      CMP      r0,#0xc
        0x00207f26:    d109        ..      BNE      0x207f3c ; UART0_Handler + 140
        0x00207f28:    e00f        ..      B        0x207f4a ; UART0_Handler + 154
;;;291        {
;;;292        /* Rx time out(0x0C). */
;;;293        case UART_INT_ID_RX_TMEOUT:
;;;294            rx_len = UART_GetRxFIFOLen(UART);
;;;295            if((UART_RX_Count+rx_len)>UART_RX_BUFFER_MAX)
;;;296            {
;;;297                UART_RX_Count = 0;
;;;298                memset(UART_RX_Buffer, 0, sizeof(UART_RX_Buffer));
;;;299            }
;;;300            UART_ReceiveData(UART, &UART_RX_Buffer[UART_RX_Count], rx_len);
        0x00207f2a:    8879        y.      LDRH     r1,[r7,#2]
        0x00207f2c:    4622        "F      MOV      r2,r4
        0x00207f2e:    4449        ID      ADD      r1,r1,r9
        0x00207f30:    4628        (F      MOV      r0,r5
        0x00207f32:    f206f6fb    ....    BL       UART_ReceiveData ; 0x80ed2c
;;;301            UART_RX_Count += rx_len;
        0x00207f36:    8878        x.      LDRH     r0,[r7,#2]
        0x00207f38:    4420         D      ADD      r0,r0,r4
        0x00207f3a:    8078        x.      STRH     r0,[r7,#2]
;;;302            break;
;;;303    
;;;304        /* Receive line status interrupt(0x06). */
;;;305        case UART_INT_ID_LINE_STATUS:
;;;306            break;
;;;307    
;;;308        /* Rx data valiable(0x04). */
;;;309        case UART_INT_ID_RX_LEVEL_REACH:
;;;310            rx_len = UART_GetRxFIFOLen(UART);
;;;311            if((UART_RX_Count+rx_len)>UART_RX_BUFFER_MAX)
;;;312            {
;;;313                UART_RX_Count = 0;
;;;314                memset(UART_RX_Buffer, 0, sizeof(UART_RX_Buffer));
;;;315            }
;;;316            UART_ReceiveData(UART, &UART_RX_Buffer[UART_RX_Count], rx_len);
;;;317            UART_RX_Count += rx_len;
;;;318            break;
;;;319    
;;;320        /* Tx fifo empty(0x02), not enable. */
;;;321        case UART_INT_ID_TX_EMPTY:
;;;322            /* Do nothing */
;;;323            break;
;;;324        default:
;;;325            break;
;;;326        }
;;;327    
;;;328        /* enable interrupt again */
;;;329        UART_INTConfig(UART, UART_INT_RD_AVA, ENABLE);
        0x00207f3c:    4628        (F      MOV      r0,r5
        0x00207f3e:    e8bd47f0    ...G    POP      {r4-r10,lr}
        0x00207f42:    2201        ."      MOVS     r2,#1
        0x00207f44:    4611        .F      MOV      r1,r2
        0x00207f46:    f206b701    ....    B.W      UART_INTConfig ; 0x80ed4c
;;; ..\..\..\inc\peripheral\rtl876x_uart.h
;;;486        return (uint8_t)((UARTx->FIFO_LEVEL >> 8) & 0x3F);
        0x00207f4a:    6ce8        .l      LDR      r0,[r5,#0x4c]
;;; sample\uart.c
;;;311            if((UART_RX_Count+rx_len)>UART_RX_BUFFER_MAX)
        0x00207f4c:    4641        AF      MOV      r1,r8
        0x00207f4e:    f3c02405    ...$    UBFX     r4,r0,#8,#6
;;; sample\uart.c (311)
        0x00207f52:    8878        x.      LDRH     r0,[r7,#2]
        0x00207f54:    4420         D      ADD      r0,r0,r4
        0x00207f56:    4288        .B      CMP      r0,r1
        0x00207f58:    d9e7        ..      BLS      0x207f2a ; UART0_Handler + 122
;;;312            {
;;;313                UART_RX_Count = 0;
;;;314                memset(UART_RX_Buffer, 0, sizeof(UART_RX_Buffer));
        0x00207f5a:    4804        .H      LDR      r0,[pc,#16] ; [0x207f6c] = 0x20823c
;;; sample\uart.c (313)
        0x00207f5c:    807e        ~.      STRH     r6,[r7,#2]
;;;314                memset(UART_RX_Buffer, 0, sizeof(UART_RX_Buffer));
        0x00207f5e:    1d00        ..      ADDS     r0,r0,#4
        0x00207f60:    f652f85c    R.\.    BL       __aeabi_memclr ; 0x5a01c
        0x00207f64:    e7e1        ..      B        0x207f2a ; UART0_Handler + 122
    $d
        0x00207f66:    0000        ..      DCW    0
        0x00207f68:    40012000    . .@    DCD    1073815552
        0x00207f6c:    0020823c    <. .    DCD    2130492
    $t
    .ram.dataon.data
    app_flash_wait_busy
;;; sample\tuya_ble_app\tuya_ble_app_ota.c
;;;847    {
        0x00207f70:    b538        8.      PUSH     {r3-r5,lr}
;;;848        uint8_t status = 0;
        0x00207f72:    2000        .       MOVS     r0,#0
        0x00207f74:    f88d0000    ....    STRB     r0,[sp,#0]
;;;849        uint32_t ctr = 0;
        0x00207f78:    4604        .F      MOV      r4,r0
;;;850        bool ret;
;;;851    
;;;852        while (ctr++ <= 0x100000)
        0x00207f7a:    f44f1580    O...    MOV      r5,#0x100000
        0x00207f7e:    e009        ..      B        0x207f94 ; app_flash_wait_busy + 36
;;;853        {
;;;854            ret = flash_cmd_rx(0x05, 1, &status);
        0x00207f80:    466a        jF      MOV      r2,sp
        0x00207f82:    2101        .!      MOVS     r1,#1
        0x00207f84:    2005        .       MOVS     r0,#5
        0x00207f86:    f601f989    ....    BL       flash_cmd_rx ; 0x929c
;;;855    
;;;856    //        DFU_PRINT_INFO2("ret is %x,status is %x", ret, status);
;;;857            if (!ret)
        0x00207f8a:    b138        8.      CBZ      r0,0x207f9c ; app_flash_wait_busy + 44
;;;858            {
;;;859                goto wait_busy_fail;
;;;860            }
;;;861    
;;;862            if (!(status & BIT_STATUS_WIP))
        0x00207f8c:    f89d0000    ....    LDRB     r0,[sp,#0]
        0x00207f90:    07c0        ..      LSLS     r0,r0,#31
        0x00207f92:    d005        ..      BEQ      0x207fa0 ; app_flash_wait_busy + 48
        0x00207f94:    4620         F      MOV      r0,r4
        0x00207f96:    1c64        d.      ADDS     r4,r4,#1
        0x00207f98:    42a8        .B      CMP      r0,r5
        0x00207f9a:    d9f1        ..      BLS      0x207f80 ; app_flash_wait_busy + 16
        0x00207f9c:    2000        .       MOVS     r0,#0
        0x00207f9e:    bd38        8.      POP      {r3-r5,pc}
;;;863            {
;;;864                return true;
        0x00207fa0:    2001        .       MOVS     r0,#1
;;;865            }
;;;866    //        DFU_PRINT_INFO1("CNT is %x", ctr);
;;;867        }
;;;868    
;;;869    wait_busy_fail:
;;;870        return false;
;;;871    }
        0x00207fa2:    bd38        8.      POP      {r3-r5,pc}
    app_flash_cmd_tx
;;;872    
;;;873    DATA_RAM_FUNCTION bool app_flash_cmd_tx(uint8_t cmd, uint8_t data_len, uint8_t *data_buf)
;;;874    {
        0x00207fa4:    e92d5ff0    -.._    PUSH     {r4-r12,lr}
        0x00207fa8:    f8dfb104    ....    LDR      r11,[pc,#260] ; [0x2080b0] = 0x21103102
;;; sample\tuya_ble_app\tuya_ble_app_ota.c (874)
        0x00207fac:    4617        .F      MOV      r7,r2
        0x00207fae:    460c        .F      MOV      r4,r1
        0x00207fb0:    4682        .F      MOV      r10,r0
;;;875        bool retval = true;
        0x00207fb2:    2501        .%      MOVS     r5,#1
;;;876        DFU_PRINT_INFO0("app_flash_cmd_tx");
        0x00207fb4:    2200        ."      MOVS     r2,#0
        0x00207fb6:    493d        =I      LDR      r1,[pc,#244] ; [0x2080ac] = 0x8801c18
        0x00207fb8:    4658        XF      MOV      r0,r11
        0x00207fba:    f5fffd50    ..P.    BL       log_buffer ; 0x7a5e
;;;877        uint32_t ctrlr0 = SPIC->ctrlr0;
        0x00207fbe:    f8df90f4    ....    LDR      r9,[pc,#244] ; [0x2080b4] = 0x40080000
        0x00207fc2:    f8d98000    ....    LDR      r8,[r9,#0]
;;;878        uint32_t addr_len = SPIC->addr_length;
        0x00207fc6:    f8d96118    ...a    LDR      r6,[r9,#0x118]
;;;879    
;;;880        spic_enable(DISABLE);
        0x00207fca:    2100        .!      MOVS     r1,#0
;;; .\sample\user_flash_driver.h
;;;167        SPIC->ssienr = enable;
        0x00207fcc:    f8c91008    ....    STR      r1,[r9,#8]
;;;168    }
;;;169    
;;;170    /**
;;;171     * @brief clr addr channel and data channel in ctrl0 register.
;;;172     *
;;;173     * @return
;;;174    */
;;;175    DATA_RAM_FUNCTION __STATIC_INLINE void spic_clr_multi_ch(void)
;;;176    {
;;;177        SPIC->ctrlr0 &= ~(BIT_CMD_CH(3) | BIT_ADDR_CH(3) | BIT_DATA_CH(3));
        0x00207fd0:    f8d91000    ....    LDR      r1,[r9,#0]
        0x00207fd4:    f421117c    !.|.    BIC      r1,r1,#0x3f0000
        0x00207fd8:    f8c91000    ....    STR      r1,[r9,#0]
;;;178    }
;;;179    
;;;180    /**
;;;181     * @brief set RX mode in ctrl0 register in user mode.
;;;182     *
;;;183     * @return
;;;184    */
;;;185    DATA_RAM_FUNCTION __STATIC_INLINE void spic_set_rx_mode(void)
;;;186    {
;;;187        SPIC->ctrlr0 |= BIT_TMOD(3);
;;;188    }
;;;189    
;;;190    /**
;;;191     * @brief set spic dr register to implement user mode programming
;;;192     *
;;;193     * @param byte_num    byte number for every tx.
;;;194     * @param data        data to be write into fifo
;;;195     * @return
;;;196     * @note: dr0 is used to do programming, and endian issue is considered as well.
;;;197    */
;;;198    DATA_RAM_FUNCTION __STATIC_INLINE void spic_set_dr(T_SPIC_BYTE_NUM byte_num, uint32_t data)
;;;199    {
;;;200        uint32_t wr_data;
;;;201        if (byte_num == DATA_HALF)
;;;202        {
;;;203            wr_data = rtk_cpu_to_le16(data);
;;;204            SPIC->dr[0].half = wr_data;
;;;205        }
;;;206        else if (byte_num == DATA_WORD)
;;;207        {
;;;208            wr_data = rtk_cpu_to_le32(data);
;;;209            SPIC->dr[0].word = wr_data;
;;;210        }
;;;211        else
;;;212        {
;;;213            SPIC->dr[0].byte = data;
;;;214        }
;;;215        return;
;;;216    }
;;;217    
;;;218    /**
;;;219     * @brief get spic dr register to implement user mode reading
;;;220     *
;;;221     * @param byte_num    byte number for every tx.
;;;222     * @return  data poping from FIFO
;;;223     * @note: dr0 is used to do reading, and endian issue is considered as well.
;;;224    */
;;;225    DATA_RAM_FUNCTION __STATIC_INLINE uint32_t spic_get_dr(T_SPIC_BYTE_NUM byte_num)
;;;226    {
;;;227        uint32_t rd_data = 0;
;;;228        if (byte_num == DATA_HALF)
;;;229        {
;;;230            rd_data = rtk_le16_to_cpu(SPIC->dr[0].half);
;;;231        }
;;;232        else if (byte_num == DATA_WORD)
;;;233        {
;;;234            rd_data = rtk_le32_to_cpu(SPIC->dr[0].word);
;;;235        }
;;;236        else
;;;237        {
;;;238            rd_data = SPIC->dr[0].byte;
;;;239        }
;;;240        return rd_data;
;;;241    }
;;;242    
;;;243    
;;;244    
;;;245    DATA_RAM_FUNCTION __STATIC_INLINE uint32_t flash_auto_read(uint32_t addr)
;;;246    {
;;;247        return *(uint32_t *)addr;
;;;248    }
;;;249    
;;;250    
;;;251    /**
;;;252     * @brief set addr channel and data channel in ctrl0 register.
;;;253     *
;;;254     * @return
;;;255    */
;;;256    DATA_RAM_FUNCTION __STATIC_INLINE void spic_set_multi_ch(uint32_t data_ch, uint32_t addr_ch)
;;;257    {
;;;258        SPIC->ctrlr0 &= ~(BIT_CMD_CH(3) | BIT_ADDR_CH(3) | BIT_DATA_CH(3));
;;;259    
;;;260        SPIC->ctrlr0 |= (BIT_ADDR_CH(addr_ch) | BIT_DATA_CH(data_ch));
;;;261    }
;;;262    
;;;263    
;;;264    /**
;;;265     * @brief set TX mode in ctrl0 register in user mode.
;;;266     *
;;;267     * @return
;;;268    */
;;;269    DATA_RAM_FUNCTION __STATIC_INLINE void spic_set_tx_mode(void)
;;;270    {
;;;271        SPIC->ctrlr0 &= ~(BIT_TMOD(3));
        0x00207fdc:    f8d91000    ....    LDR      r1,[r9,#0]
        0x00207fe0:    f4217140    !.@q    BIC      r1,r1,#0x300
        0x00207fe4:    f8c91000    ....    STR      r1,[r9,#0]
;;; sample\tuya_ble_app\tuya_ble_app_ota.c
;;;884        SPIC->addr_length = data_len;
        0x00207fe8:    f8c94118    ...A    STR      r4,[r9,#0x118]
;;;885    
;;;886        spic_set_dr(DATA_BYTE, cmd);
        0x00207fec:    4651        QF      MOV      r1,r10
        0x00207fee:    e001        ..      B        0x207ff4 ; app_flash_cmd_tx + 80
        0x00207ff0:    f8171b01    ....    LDRB     r1,[r7],#1
        0x00207ff4:    2000        .       MOVS     r0,#0
        0x00207ff6:    f000f84b    ..K.    BL       spic_set_dr ; 0x208090
;;;887    
;;;888        while (data_len--)
        0x00207ffa:    1e64        d.      SUBS     r4,r4,#1
        0x00207ffc:    b2e4        ..      UXTB     r4,r4
        0x00207ffe:    d2f7        ..      BCS      0x207ff0 ; app_flash_cmd_tx + 76
;;;889        {
;;;890            spic_set_dr(DATA_BYTE, *data_buf++);
;;;891        }
;;;892    
;;;893        spic_enable(ENABLE);
        0x00208000:    2001        .       MOVS     r0,#1
;;; .\sample\user_flash_driver.h
;;;167        SPIC->ssienr = enable;
        0x00208002:    464c        LF      MOV      r4,r9
        0x00208004:    f8c90008    ....    STR      r0,[r9,#8]
;;;168    }
;;;169    
;;;170    /**
;;;171     * @brief clr addr channel and data channel in ctrl0 register.
;;;172     *
;;;173     * @return
;;;174    */
;;;175    DATA_RAM_FUNCTION __STATIC_INLINE void spic_clr_multi_ch(void)
;;;176    {
;;;177        SPIC->ctrlr0 &= ~(BIT_CMD_CH(3) | BIT_ADDR_CH(3) | BIT_DATA_CH(3));
;;;178    }
;;;179    
;;;180    /**
;;;181     * @brief set RX mode in ctrl0 register in user mode.
;;;182     *
;;;183     * @return
;;;184    */
;;;185    DATA_RAM_FUNCTION __STATIC_INLINE void spic_set_rx_mode(void)
;;;186    {
;;;187        SPIC->ctrlr0 |= BIT_TMOD(3);
;;;188    }
;;;189    
;;;190    /**
;;;191     * @brief set spic dr register to implement user mode programming
;;;192     *
;;;193     * @param byte_num    byte number for every tx.
;;;194     * @param data        data to be write into fifo
;;;195     * @return
;;;196     * @note: dr0 is used to do programming, and endian issue is considered as well.
;;;197    */
;;;198    DATA_RAM_FUNCTION __STATIC_INLINE void spic_set_dr(T_SPIC_BYTE_NUM byte_num, uint32_t data)
;;;199    {
;;;200        uint32_t wr_data;
;;;201        if (byte_num == DATA_HALF)
;;;202        {
;;;203            wr_data = rtk_cpu_to_le16(data);
;;;204            SPIC->dr[0].half = wr_data;
;;;205        }
;;;206        else if (byte_num == DATA_WORD)
;;;207        {
;;;208            wr_data = rtk_cpu_to_le32(data);
;;;209            SPIC->dr[0].word = wr_data;
;;;210        }
;;;211        else
;;;212        {
;;;213            SPIC->dr[0].byte = data;
;;;214        }
;;;215        return;
;;;216    }
;;;217    
;;;218    /**
;;;219     * @brief get spic dr register to implement user mode reading
;;;220     *
;;;221     * @param byte_num    byte number for every tx.
;;;222     * @return  data poping from FIFO
;;;223     * @note: dr0 is used to do reading, and endian issue is considered as well.
;;;224    */
;;;225    DATA_RAM_FUNCTION __STATIC_INLINE uint32_t spic_get_dr(T_SPIC_BYTE_NUM byte_num)
;;;226    {
;;;227        uint32_t rd_data = 0;
;;;228        if (byte_num == DATA_HALF)
;;;229        {
;;;230            rd_data = rtk_le16_to_cpu(SPIC->dr[0].half);
;;;231        }
;;;232        else if (byte_num == DATA_WORD)
;;;233        {
;;;234            rd_data = rtk_le32_to_cpu(SPIC->dr[0].word);
;;;235        }
;;;236        else
;;;237        {
;;;238            rd_data = SPIC->dr[0].byte;
;;;239        }
;;;240        return rd_data;
;;;241    }
;;;242    
;;;243    
;;;244    
;;;245    DATA_RAM_FUNCTION __STATIC_INLINE uint32_t flash_auto_read(uint32_t addr)
;;;246    {
;;;247        return *(uint32_t *)addr;
;;;248    }
;;;249    
;;;250    
;;;251    /**
;;;252     * @brief set addr channel and data channel in ctrl0 register.
;;;253     *
;;;254     * @return
;;;255    */
;;;256    DATA_RAM_FUNCTION __STATIC_INLINE void spic_set_multi_ch(uint32_t data_ch, uint32_t addr_ch)
;;;257    {
;;;258        SPIC->ctrlr0 &= ~(BIT_CMD_CH(3) | BIT_ADDR_CH(3) | BIT_DATA_CH(3));
;;;259    
;;;260        SPIC->ctrlr0 |= (BIT_ADDR_CH(addr_ch) | BIT_DATA_CH(data_ch));
;;;261    }
;;;262    
;;;263    
;;;264    /**
;;;265     * @brief set TX mode in ctrl0 register in user mode.
;;;266     *
;;;267     * @return
;;;268    */
;;;269    DATA_RAM_FUNCTION __STATIC_INLINE void spic_set_tx_mode(void)
;;;270    {
;;;271        SPIC->ctrlr0 &= ~(BIT_TMOD(3));
;;;272    }
;;;273    
;;;274    /**
;;;275     * @brief wait until busy states of SR register is cleared.
;;;276     *
;;;277     * @return true if success
;;;278    */
;;;279    DATA_RAM_FUNCTION __STATIC_INLINE bool spic_wait_busy(void)
;;;280    {
;;;281        uint32_t ctr = 0;
        0x00208008:    2100        .!      MOVS     r1,#0
;;;282    
;;;283        //break only when tx error or busy state is cleared
;;;284        do
;;;285        {
;;;286            if (ctr++ >= 0x4000)
        0x0020800a:    0382        ..      LSLS     r2,r0,#14
        0x0020800c:    4608        .F      MOV      r0,r1
        0x0020800e:    1c49        I.      ADDS     r1,r1,#1
        0x00208010:    4290        .B      CMP      r0,r2
        0x00208012:    d301        ..      BCC      0x208018 ; app_flash_cmd_tx + 116
;;; sample\tuya_ble_app\tuya_ble_app_ota.c
;;;897            retval = false;
        0x00208014:    2500        .%      MOVS     r5,#0
;;; .\sample\user_flash_driver.h
;;;288                return false;
        0x00208016:    e005        ..      B        0x208024 ; app_flash_cmd_tx + 128
;;;289            }
;;;290        }
;;;291        while ((SPIC->sr & BIT_BUSY) && (!(SPIC->sr & BIT_TXE)));
        0x00208018:    6aa0        .j      LDR      r0,[r4,#0x28]
        0x0020801a:    07c0        ..      LSLS     r0,r0,#31
        0x0020801c:    d002        ..      BEQ      0x208024 ; app_flash_cmd_tx + 128
;;; .\sample\user_flash_driver.h (291)
        0x0020801e:    6aa0        .j      LDR      r0,[r4,#0x28]
        0x00208020:    0680        ..      LSLS     r0,r0,#26
        0x00208022:    d5f3        ..      BPL      0x20800c ; app_flash_cmd_tx + 104
;;; sample\tuya_ble_app\tuya_ble_app_ota.c
;;;900        spic_enable(DISABLE);
        0x00208024:    2000        .       MOVS     r0,#0
;;; .\sample\user_flash_driver.h
;;;167        SPIC->ssienr = enable;
        0x00208026:    60a0        .`      STR      r0,[r4,#8]
;;; sample\tuya_ble_app\tuya_ble_app_ota.c
;;;901        DFU_PRINT_INFO1("app_flash_wait_busy ..%x", retval);
        0x00208028:    4920         I      LDR      r1,[pc,#128] ; [0x2080ac] = 0x8801c18
        0x0020802a:    462b        +F      MOV      r3,r5
        0x0020802c:    2201        ."      MOVS     r2,#1
        0x0020802e:    3114        .1      ADDS     r1,r1,#0x14
        0x00208030:    4658        XF      MOV      r0,r11
        0x00208032:    f5fffd14    ....    BL       log_buffer ; 0x7a5e
;;;902        if (retval == true && !app_flash_wait_busy())
        0x00208036:    b11d        ..      CBZ      r5,0x208040 ; app_flash_cmd_tx + 156
        0x00208038:    f7ffff9a    ....    BL       app_flash_wait_busy ; 0x207f70
        0x0020803c:    b900        ..      CBNZ     r0,0x208040 ; app_flash_cmd_tx + 156
;;;903        {
;;;904            retval = false;
        0x0020803e:    2500        .%      MOVS     r5,#0
;;;905        }
;;;906    
;;;907    
;;;908        //restore ctrl0 and addr_len register
;;;909        SPIC->ctrlr0 = ctrlr0;
        0x00208040:    f8c48000    ....    STR      r8,[r4,#0]
;;;910        SPIC->addr_length = addr_len;
        0x00208044:    f8c46118    ...a    STR      r6,[r4,#0x118]
;;;911    
;;;912        return retval;
        0x00208048:    4628        (F      MOV      r0,r5
;;;913    }
        0x0020804a:    e8bd9ff0    ....    POP      {r4-r12,pc}
    flash_erase_sector
;;;914    /**
;;;915     * @brief erase a sector of the flash.
;;;916     *
;;;917     * @param  addr          flash addr in sector to be erase.
;;;918     * @return  0 if erase successfully, error line number otherwise
;;;919    */
;;;920    DATA_RAM_FUNCTION uint32_t flash_erase_sector(uint32_t addr)
;;;921    {
        0x0020804e:    b510        ..      PUSH     {r4,lr}
        0x00208050:    4916        .I      LDR      r1,[pc,#88] ; [0x2080ac] = 0x8801c18
        0x00208052:    4604        .F      MOV      r4,r0
;;;922    
;;;923        static uint8_t address[3];
;;;924        DFU_PRINT_INFO1("==> flash_erase_sector :%x \r\n", addr);
        0x00208054:    4603        .F      MOV      r3,r0
        0x00208056:    2201        ."      MOVS     r2,#1
        0x00208058:    3130        01      ADDS     r1,r1,#0x30
        0x0020805a:    4815        .H      LDR      r0,[pc,#84] ; [0x2080b0] = 0x21103102
        0x0020805c:    f5fffcff    ....    BL       log_buffer ; 0x7a5e
;;;925        address[0] = (addr >> 16) & 0xff;
        0x00208060:    4815        .H      LDR      r0,[pc,#84] ; [0x2080b8] = 0x208672
        0x00208062:    0c21        !.      LSRS     r1,r4,#16
        0x00208064:    7001        .p      STRB     r1,[r0,#0]
;;;926        address[1] = (addr >> 8) & 0xff;
        0x00208066:    0a21        !.      LSRS     r1,r4,#8
        0x00208068:    7041        Ap      STRB     r1,[r0,#1]
;;;927        address[2] = addr & 0xff;
        0x0020806a:    7084        .p      STRB     r4,[r0,#2]
;;;928    
;;;929        flstatus = flash_lock(FLASH_LOCK_USER_MODE_ERASE);//signal = os_lock();
        0x0020806c:    2003        .       MOVS     r0,#3
        0x0020806e:    f602f848    ..H.    BL       flash_lock ; 0xa102
        0x00208072:    4911        .I      LDR      r1,[pc,#68] ; [0x2080b8] = 0x208672
        0x00208074:    390a        .9      SUBS     r1,r1,#0xa
        0x00208076:    7048        Hp      STRB     r0,[r1,#1]
;;;930        flash_write_enable();
        0x00208078:    f601f9d2    ....    BL       flash_write_enable ; 0x9420
;;;931        app_flash_cmd_tx(0x20, 3, address);
        0x0020807c:    4a0e        .J      LDR      r2,[pc,#56] ; [0x2080b8] = 0x208672
        0x0020807e:    2103        .!      MOVS     r1,#3
        0x00208080:    2020                MOVS     r0,#0x20
        0x00208082:    f7ffff8f    ....    BL       app_flash_cmd_tx ; 0x207fa4
;;;932        flash_unlock(FLASH_LOCK_USER_MODE_ERASE);//os_unlock(signal);
        0x00208086:    2003        .       MOVS     r0,#3
        0x00208088:    f602f88f    ....    BL       flash_unlock ; 0xa1aa
;;;933        return 0;
        0x0020808c:    2000        .       MOVS     r0,#0
;;;934    }
        0x0020808e:    bd10        ..      POP      {r4,pc}
    spic_set_dr
;;; .\sample\user_flash_driver.h
;;;204            SPIC->dr[0].half = wr_data;
        0x00208090:    4a08        .J      LDR      r2,[pc,#32] ; [0x2080b4] = 0x40080000
        0x00208092:    2801        .(      CMP      r0,#1
;;; .\sample\user_flash_driver.h (199)
        0x00208094:    d004        ..      BEQ      0x2080a0 ; spic_set_dr + 16
;;;200        uint32_t wr_data;
;;;201        if (byte_num == DATA_HALF)
;;;202        {
;;;203            wr_data = rtk_cpu_to_le16(data);
;;;204            SPIC->dr[0].half = wr_data;
;;;205        }
;;;206        else if (byte_num == DATA_WORD)
        0x00208096:    2802        .(      CMP      r0,#2
        0x00208098:    d005        ..      BEQ      0x2080a6 ; spic_set_dr + 22
;;;207        {
;;;208            wr_data = rtk_cpu_to_le32(data);
;;;209            SPIC->dr[0].word = wr_data;
;;;210        }
;;;211        else
;;;212        {
;;;213            SPIC->dr[0].byte = data;
        0x0020809a:    f8821060    ..`.    STRB     r1,[r2,#0x60]
;;;214        }
;;;215        return;
;;;216    }
        0x0020809e:    4770        pG      BX       lr
        0x002080a0:    f8a21060    ..`.    STRH     r1,[r2,#0x60]
        0x002080a4:    4770        pG      BX       lr
        0x002080a6:    6611        .f      STR      r1,[r2,#0x60]
        0x002080a8:    4770        pG      BX       lr
    $d
        0x002080aa:    0000        ..      DCW    0
        0x002080ac:    08801c18    ....    DCD    142613528
        0x002080b0:    21103102    .1.!    DCD    554709250
        0x002080b4:    40080000    ...@    DCD    1074266112
        0x002080b8:    00208672    r. .    DCD    2131570

** Section #6 'RAM_DATA_ON' (SHT_PROGBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 136 bytes (alignment 4)
    Address: 0x002080bc

    0x2080bc:   74 65 72 01 54 c7 81 00 e8 e0 81 00 a8 e1 81 00    ter.T...........
    0x2080cc:   78 9c 20 00 38 9d 20 00 38 9d 20 00 c0 00 00 00    x. .8. .8. .....
    0x2080dc:   00 00 00 00 00 00 00 00 44 c7 81 00 a8 e1 81 00    ........D.......
    0x2080ec:   a8 e1 81 00 78 9c 20 00 78 9c 20 00 78 9c 20 00    ....x. .x. .x. .
    0x2080fc:   00 00 00 00 00 00 00 00 00 00 00 00 4c c7 81 00    ............L...
    0x20810c:   a8 e1 81 00 a8 e1 81 00 78 9c 20 00 78 9c 20 00    ........x. .x. .
    0x20811c:   78 9c 20 00 00 00 00 00 00 00 00 00 00 00 00 00    x. .............
    0x20812c:   fe 00 00 00 01 00 00 00 30 30 30 30 30 30 30 30    ........00000000
    0x20813c:   30 30 30 30 00 00 06 00                            0000....


** Section #7 'RAM_DATA_ON' (SHT_NOBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 6964 bytes (alignment 4)
    Address: 0x00208144


** Section #8 'OVERLAY_A' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 192 bytes (alignment 4)
    Address: 0x00209c78

    $t
    .app.overlay_a
    AppUpdateVectorTable
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c
;;;628    static void AppUpdateVectorTable(void)
;;;628    {
        0x00209c78:    e92d43f0    -..C    PUSH     {r4-r9,lr}
        0x00209c7c:    b0bd        ..      SUB      sp,sp,#0xf4
;;;629        extern uint32_t Load$$RAM_VECTOR_TABLE$$RO$$Base;
;;;630        extern uint32_t Image$$RAM_VECTOR_TABLE$$RO$$Length;
;;;631        extern void Default_Handler(void);
;;;632        const char *SysException[] =
        0x00209c7e:    2240        @"      MOVS     r2,#0x40
        0x00209c80:    4926        &I      LDR      r1,[pc,#152] ; [0x209d1c] = 0x81c040
        0x00209c82:    a82d        -.      ADD      r0,sp,#0xb4
        0x00209c84:    f650f990    P...    BL       __aeabi_memcpy4 ; 0x59fa8
;;;633        {
;;;634            "InitialSP", "Reset", "NMI", "HardFault", "MemManage", "BusFault", "UsageFault", "Rsvd",
;;;635            "Rsvd", "Rsvd", "Rsvd", "SVC", "DebugMon", "Rsvd", "PendSV", "SysTick"
;;;636        };
;;;637        const char *ExtIrq[] =
        0x00209c88:    4924        $I      LDR      r1,[pc,#144] ; [0x209d1c] = 0x81c040
        0x00209c8a:    22b4        ."      MOVS     r2,#0xb4
        0x00209c8c:    3140        @1      ADDS     r1,r1,#0x40
        0x00209c8e:    4668        hF      MOV      r0,sp
        0x00209c90:    f650f98a    P...    BL       __aeabi_memcpy4 ; 0x59fa8
        0x00209c94:    4924        $I      LDR      r1,[pc,#144] ; [0x209d28] = 0xe000ed08
;;;638        {
;;;639            "System", "WDG", "BTMAC", "TIM3", "TIM2", "Platform", "I2S0_TX", "I2S0_RX", "Timer4-7",
;;;640            "GPIO4", "GPIO5", "UART1", "UART0", "RTC", "SPI0", "SPI1", "I2C0", "I2C1", "ADC",
;;;641            "Peripheral", "GDMA0 Channel0", "GDMA0 Channel1", "GDMA0 Channel2", "GDMA0 Channel3",
;;;642            "GDMA0 Channel4", "GDMA0 Channel5", "GPIO_Group3", "GPIO_Group2", "IR", "GPIO_Group1",
;;;643            "GPIO_Group0", "UART2", "TIM4", "TIM5", "TIM6", "TIM7", "SPI_Flash", "Qdecode",
;;;644            "Keyscan", "SPI2W", "LPCOMP", "PTA_Mailbox", "SPORT1 TX", "SPORT1 RX", "LCD"
;;;645        };
;;;646    
;;;647        IRQ_Fun *pRamVector    = (IRQ_Fun *)VTOR_RAM_ADDR;
        0x00209c96:    f44f1000    O...    MOV      r0,#0x200000
        0x00209c9a:    4d21        !M      LDR      r5,[pc,#132] ; [0x209d20] = 0x81dab0
        0x00209c9c:    4f21        !O      LDR      r7,[pc,#132] ; [0x209d24] = 0xf4
        0x00209c9e:    6809        .h      LDR      r1,[r1,#0]
        0x00209ca0:    4606        .F      MOV      r6,r0
;;;648        IRQ_Fun *pAppVector    = (IRQ_Fun *)&Load$$RAM_VECTOR_TABLE$$RO$$Base;
;;;649        uint32_t AppVectorSize = (uint32_t)&Image$$RAM_VECTOR_TABLE$$RO$$Length;
;;;650        uint32_t i             = 0;
        0x00209ca2:    2400        .$      MOVS     r4,#0
;;;651    
;;;652        if (SCB->VTOR != VTOR_RAM_ADDR)
        0x00209ca4:    42b1        .B      CMP      r1,r6
        0x00209ca6:    d001        ..      BEQ      0x209cac ; AppUpdateVectorTable + 52
;;;653        {
;;;654            RamVectorTableInit(VTOR_RAM_ADDR);
        0x00209ca8:    f5fafffe    ....    BL       RamVectorTableInit ; 0x4ca8
        0x00209cac:    f04f5805    O..X    MOV      r8,#0x21400000
        0x00209cb0:    f8df9078    ..x.    LDR      r9,[pc,#120] ; [0x209d2c] = 0x21100101
;;;655        }
;;;656    
;;;657        /* Update APP defined handlers */
;;;658        for (i = 0; i < AppVectorSize / 4; ++i)
        0x00209cb4:    e027        '.      B        0x209d06 ; AppUpdateVectorTable + 142
;;;659        {
;;;660            if (i == 1) //skip reset_handler remap
        0x00209cb6:    2c01        .,      CMP      r4,#1
        0x00209cb8:    d024        $.      BEQ      0x209d04 ; AppUpdateVectorTable + 140
;;;661            {
;;;662                continue;
;;;663            }
;;;664    
;;;665            if ((pAppVector[i] != Default_Handler) && (pAppVector[i] != 0))
        0x00209cba:    f8550024    U.$.    LDR      r0,[r5,r4,LSL #2]
        0x00209cbe:    491c        .I      LDR      r1,[pc,#112] ; [0x209d30] = 0x80e705
        0x00209cc0:    4288        .B      CMP      r0,r1
        0x00209cc2:    d01f        ..      BEQ      0x209d04 ; AppUpdateVectorTable + 140
        0x00209cc4:    b1f0        ..      CBZ      r0,0x209d04 ; AppUpdateVectorTable + 140
;;;666            {
;;;667                if (i < System_VECTORn)
        0x00209cc6:    2c10        .,      CMP      r4,#0x10
        0x00209cc8:    d209        ..      BCS      0x209cde ; AppUpdateVectorTable + 102
;;;668                {
;;;669                    OS_PRINT_WARN1("Warning! %s is updated by APP!", TRACE_STRING(SysException[i]));
        0x00209cca:    a82d        -.      ADD      r0,sp,#0xb4
        0x00209ccc:    f8501024    P.$.    LDR      r1,[r0,r4,LSL #2]
        0x00209cd0:    4640        @F      MOV      r0,r8
        0x00209cd2:    f5fef8ca    ....    BL       trace_string ; 0x7e6a
        0x00209cd6:    4603        .F      MOV      r3,r0
        0x00209cd8:    2201        ."      MOVS     r2,#1
        0x00209cda:    4916        .I      LDR      r1,[pc,#88] ; [0x209d34] = 0x880009c
        0x00209cdc:    e00b        ..      B        0x209cf6 ; AppUpdateVectorTable + 126
;;;670                }
;;;671                else
;;;672                {
;;;673                    OS_PRINT_WARN1("Warning! ISR %s is updated by APP!",
        0x00209cde:    4668        hF      MOV      r0,sp
        0x00209ce0:    eb000084    ....    ADD      r0,r0,r4,LSL #2
        0x00209ce4:    f8501c40    P.@.    LDR      r1,[r0,#-0x40]
        0x00209ce8:    4640        @F      MOV      r0,r8
        0x00209cea:    f5fef8be    ....    BL       trace_string ; 0x7e6a
        0x00209cee:    4911        .I      LDR      r1,[pc,#68] ; [0x209d34] = 0x880009c
        0x00209cf0:    2201        ."      MOVS     r2,#1
        0x00209cf2:    4603        .F      MOV      r3,r0
        0x00209cf4:    3124        $1      ADDS     r1,r1,#0x24
        0x00209cf6:    4648        HF      MOV      r0,r9
        0x00209cf8:    f5fdfeb1    ....    BL       log_buffer ; 0x7a5e
;;;674                                   TRACE_STRING(ExtIrq[i - System_VECTORn]));
;;;675                }
;;;676    
;;;677                pRamVector[i] = pAppVector[i];
        0x00209cfc:    f8550024    U.$.    LDR      r0,[r5,r4,LSL #2]
        0x00209d00:    f8460024    F.$.    STR      r0,[r6,r4,LSL #2]
        0x00209d04:    1c64        d.      ADDS     r4,r4,#1
        0x00209d06:    ebb40f97    ....    CMP      r4,r7,LSR #2
        0x00209d0a:    d3d4        ..      BCC      0x209cb6 ; AppUpdateVectorTable + 62
;;;678            }
;;;679        }
;;;680    
;;;681        __DMB();
        0x00209d0c:    f3bf8f5f    .._.    DMB      
;;;682        __DSB();
        0x00209d10:    f3bf8f4f    ..O.    DSB      
;;;683    }
        0x00209d14:    b03d        =.      ADD      sp,sp,#0xf4
        0x00209d16:    e8bd83f0    ....    POP      {r4-r9,pc}
    $d
        0x00209d1a:    0000        ..      DCW    0
        0x00209d1c:    0081c040    @...    DCD    8503360
        0x00209d20:    0081dab0    ....    DCD    8510128
        0x00209d24:    000000f4    ....    DCD    244
        0x00209d28:    e000ed08    ....    DCD    3758157064
        0x00209d2c:    21100101    ...!    DCD    554696961
        0x00209d30:    0080e705    ....    DCD    8447749
        0x00209d34:    0880009c    ....    DCD    142606492

** Section #9 'App.trace' (SHT_PROGBITS) [SHF_ALLOC]
    Size   : 17760 bytes (alignment 4)
    Address: 0x08800000

    0x8800000:   21 2a 2a 52 45 53 45 54 20 52 65 61 73 6f 6e 3a    !**RESET Reason:
    0x8800010:   20 48 57 20 6f 72 20 4f 54 41 00 00 21 2a 2a 52     HW or OTA..!**R
    0x8800020:   45 53 45 54 20 52 65 61 73 6f 6e 3a 20 53 57 28    ESET Reason: SW(
    0x8800030:   72 65 73 65 74 20 65 78 63 65 70 74 20 61 6f 6e    reset except aon
    0x8800040:   29 2c 20 54 59 50 45 20 30 78 25 78 00 00 00 00    ), TYPE 0x%x....
    0x8800050:   21 2a 2a 52 45 53 45 54 20 52 65 61 73 6f 6e 3a    !**RESET Reason:
    0x8800060:   20 53 57 28 72 65 73 65 74 20 61 6c 6c 29 2c 20     SW(reset all), 
    0x8800070:   54 59 50 45 20 30 78 25 78 00 00 00 21 21 21 53    TYPE 0x%x...!!!S
    0x8800080:   44 4b 20 56 65 72 3a 20 25 73 2c 20 42 75 69 6c    DK Ver: %s, Buil
    0x8800090:   64 20 54 69 6d 65 3a 20 25 73 00 00 21 21 2a 57    d Time: %s..!!*W
    0x88000a0:   61 72 6e 69 6e 67 21 20 25 73 20 69 73 20 75 70    arning! %s is up
    0x88000b0:   64 61 74 65 64 20 62 79 20 41 50 50 21 00 00 00    dated by APP!...
    0x88000c0:   21 21 2a 57 61 72 6e 69 6e 67 21 20 49 53 52 20    !!*Warning! ISR 
    0x88000d0:   25 73 20 69 73 20 75 70 64 61 74 65 64 20 62 79    %s is updated by
    0x88000e0:   20 41 50 50 21 00 00 00 21 21 2a 6d 69 73 73 20     APP!...!!*miss 
    0x88000f0:   69 6e 74 65 72 72 75 70 74 3a 20 70 65 6e 64 69    interrupt: pendi
    0x8800100:   6e 67 20 72 65 67 69 73 74 65 72 3a 20 30 78 25    ng register: 0x%
    0x8800110:   78 00 00 00 21 21 21 45 72 72 6f 72 3a 20 64 6c    x...!!!Error: dl
    0x8800120:   70 73 5f 63 68 65 63 6b 5f 63 62 5f 72 65 67 28    ps_check_cb_reg(
    0x8800130:   61 70 70 5f 64 6c 70 73 5f 63 68 65 63 6b 5f 63    app_dlps_check_c
    0x8800140:   62 29 20 66 61 69 6c 65 64 21 00 00 21 2a 2a 78    b) failed!..!**x
    0x8800150:   54 69 6d 65 72 49 6f 55 61 72 74 44 6c 70 73 4d    TimerIoUartDlpsM
    0x8800160:   6f 6e 69 74 6f 72 20 63 72 65 61 74 20 72 65 74    onitor creat ret
    0x8800170:   76 61 6c 20 69 73 20 25 64 00 00 00 21 2a 2a 5b    val is %d...!**[
    0x8800180:   6d 61 69 6e 5d 20 53 79 73 74 65 6d 5f 48 61 6e    main] System_Han
    0x8800190:   64 6c 65 72 00 00 00 00 21 2a 2a 61 70 70 5f 68    dler....!**app_h
    0x88001a0:   61 6e 64 6c 65 5f 64 65 76 5f 73 74 61 74 65 5f    andle_dev_state_
    0x88001b0:   65 76 74 3a 20 69 6e 69 74 20 73 74 61 74 65 20    evt: init state 
    0x88001c0:   25 64 2c 20 61 64 76 20 73 74 61 74 65 20 25 64    %d, adv state %d
    0x88001d0:   2c 20 63 61 75 73 65 20 30 78 25 78 00 00 00 00    , cause 0x%x....
    0x88001e0:   21 2a 2a 47 41 50 20 73 74 61 63 6b 20 72 65 61    !**GAP stack rea
    0x88001f0:   64 79 00 00 21 2a 2a 47 41 50 20 61 64 76 20 73    dy..!**GAP adv s
    0x8800200:   74 6f 70 65 64 3a 20 62 65 63 61 75 73 65 20 63    toped: because c
    0x8800210:   6f 6e 6e 65 63 74 69 6f 6e 20 63 72 65 61 74 65    onnection create
    0x8800220:   64 00 00 00 21 2a 2a 47 41 50 20 61 64 76 20 73    d...!**GAP adv s
    0x8800230:   74 6f 70 65 64 00 00 00 21 2a 2a 47 41 50 20 61    toped...!**GAP a
    0x8800240:   64 76 20 73 74 61 72 74 00 00 00 00 21 2a 2a 61    dv start....!**a
    0x8800250:   70 70 5f 68 61 6e 64 6c 65 5f 63 6f 6e 6e 5f 73    pp_handle_conn_s
    0x8800260:   74 61 74 65 5f 65 76 74 3a 20 63 6f 6e 6e 5f 69    tate_evt: conn_i
    0x8800270:   64 20 25 64 20 6f 6c 64 5f 73 74 61 74 65 20 25    d %d old_state %
    0x8800280:   64 20 6e 65 77 5f 73 74 61 74 65 20 25 64 2c 20    d new_state %d, 
    0x8800290:   64 69 73 63 5f 63 61 75 73 65 20 30 78 25 78 00    disc_cause 0x%x.
    0x88002a0:   21 21 21 61 70 70 5f 68 61 6e 64 6c 65 5f 63 6f    !!!app_handle_co
    0x88002b0:   6e 6e 5f 73 74 61 74 65 5f 65 76 74 3a 20 63 6f    nn_state_evt: co
    0x88002c0:   6e 6e 65 63 74 69 6f 6e 20 6c 6f 73 74 20 63 61    nnection lost ca
    0x88002d0:   75 73 65 20 30 78 25 78 00 00 00 00 21 2a 2a 47    use 0x%x....!**G
    0x88002e0:   41 50 5f 43 4f 4e 4e 5f 53 54 41 54 45 5f 43 4f    AP_CONN_STATE_CO
    0x88002f0:   4e 4e 45 43 54 45 44 3a 72 65 6d 6f 74 65 5f 62    NNECTED:remote_b
    0x8800300:   64 20 25 73 2c 20 72 65 6d 6f 74 65 5f 61 64 64    d %s, remote_add
    0x8800310:   72 5f 74 79 70 65 20 25 64 2c 20 63 6f 6e 6e 5f    r_type %d, conn_
    0x8800320:   69 6e 74 65 72 76 61 6c 20 30 78 25 78 2c 20 63    interval 0x%x, c
    0x8800330:   6f 6e 6e 5f 6c 61 74 65 6e 63 79 20 30 78 25 78    onn_latency 0x%x
    0x8800340:   2c 20 63 6f 6e 6e 5f 73 75 70 65 72 76 69 73 69    , conn_supervisi
    0x8800350:   6f 6e 5f 74 69 6d 65 6f 75 74 20 30 78 25 78 00    on_timeout 0x%x.
    0x8800360:   21 2a 2a 61 70 70 5f 68 61 6e 64 6c 65 5f 61 75    !**app_handle_au
    0x8800370:   74 68 65 6e 5f 73 74 61 74 65 5f 65 76 74 3a 63    then_state_evt:c
    0x8800380:   6f 6e 6e 5f 69 64 20 25 64 2c 20 63 61 75 73 65    onn_id %d, cause
    0x8800390:   20 30 78 25 78 00 00 00 21 2a 2a 61 70 70 5f 68     0x%x...!**app_h
    0x88003a0:   61 6e 64 6c 65 5f 61 75 74 68 65 6e 5f 73 74 61    andle_authen_sta
    0x88003b0:   74 65 5f 65 76 74 3a 20 47 41 50 5f 41 55 54 48    te_evt: GAP_AUTH
    0x88003c0:   45 4e 5f 53 54 41 54 45 5f 53 54 41 52 54 45 44    EN_STATE_STARTED
    0x88003d0:   00 00 00 00 21 2a 2a 61 70 70 5f 68 61 6e 64 6c    ....!**app_handl
    0x88003e0:   65 5f 61 75 74 68 65 6e 5f 73 74 61 74 65 5f 65    e_authen_state_e
    0x88003f0:   76 74 3a 20 47 41 50 5f 41 55 54 48 45 4e 5f 53    vt: GAP_AUTHEN_S
    0x8800400:   54 41 54 45 5f 43 4f 4d 50 4c 45 54 45 20 70 61    TATE_COMPLETE pa
    0x8800410:   69 72 20 73 75 63 63 65 73 73 00 00 21 2a 2a 61    ir success..!**a
    0x8800420:   70 70 5f 68 61 6e 64 6c 65 5f 61 75 74 68 65 6e    pp_handle_authen
    0x8800430:   5f 73 74 61 74 65 5f 65 76 74 3a 20 47 41 50 5f    _state_evt: GAP_
    0x8800440:   41 55 54 48 45 4e 5f 53 54 41 54 45 5f 43 4f 4d    AUTHEN_STATE_COM
    0x8800450:   50 4c 45 54 45 20 70 61 69 72 20 66 61 69 6c 65    PLETE pair faile
    0x8800460:   64 00 00 00 21 21 21 61 70 70 5f 68 61 6e 64 6c    d...!!!app_handl
    0x8800470:   65 5f 61 75 74 68 65 6e 5f 73 74 61 74 65 5f 65    e_authen_state_e
    0x8800480:   76 74 3a 20 75 6e 6b 6e 6f 77 6e 20 6e 65 77 73    vt: unknown news
    0x8800490:   74 61 74 65 20 25 64 00 21 2a 2a 61 70 70 5f 68    tate %d.!**app_h
    0x88004a0:   61 6e 64 6c 65 5f 63 6f 6e 6e 5f 6d 74 75 5f 69    andle_conn_mtu_i
    0x88004b0:   6e 66 6f 5f 65 76 74 3a 20 63 6f 6e 6e 5f 69 64    nfo_evt: conn_id
    0x88004c0:   20 25 64 2c 20 6d 74 75 5f 73 69 7a 65 20 25 64     %d, mtu_size %d
    0x88004d0:   00 00 00 00 21 2a 2a 61 70 70 5f 68 61 6e 64 6c    ....!**app_handl
    0x88004e0:   65 5f 63 6f 6e 6e 5f 70 61 72 61 6d 5f 75 70 64    e_conn_param_upd
    0x88004f0:   61 74 65 5f 65 76 74 20 75 70 64 61 74 65 20 73    ate_evt update s
    0x8800500:   75 63 63 65 73 73 3a 63 6f 6e 6e 5f 69 6e 74 65    uccess:conn_inte
    0x8800510:   72 76 61 6c 20 30 78 25 78 2c 20 63 6f 6e 6e 5f    rval 0x%x, conn_
    0x8800520:   73 6c 61 76 65 5f 6c 61 74 65 6e 63 79 20 30 78    slave_latency 0x
    0x8800530:   25 78 2c 20 63 6f 6e 6e 5f 73 75 70 65 72 76 69    %x, conn_supervi
    0x8800540:   73 69 6f 6e 5f 74 69 6d 65 6f 75 74 20 30 78 25    sion_timeout 0x%
    0x8800550:   78 00 00 00 21 21 21 61 70 70 5f 68 61 6e 64 6c    x...!!!app_handl
    0x8800560:   65 5f 63 6f 6e 6e 5f 70 61 72 61 6d 5f 75 70 64    e_conn_param_upd
    0x8800570:   61 74 65 5f 65 76 74 20 75 70 64 61 74 65 20 66    ate_evt update f
    0x8800580:   61 69 6c 65 64 3a 20 63 61 75 73 65 20 30 78 25    ailed: cause 0x%
    0x8800590:   78 00 00 00 21 2a 2a 61 70 70 5f 68 61 6e 64 6c    x...!**app_handl
    0x88005a0:   65 5f 63 6f 6e 6e 5f 70 61 72 61 6d 5f 75 70 64    e_conn_param_upd
    0x88005b0:   61 74 65 5f 65 76 74 20 75 70 64 61 74 65 20 70    ate_evt update p
    0x88005c0:   65 6e 64 69 6e 67 2e 00 61 70 70 5f 68 61 6e 64    ending..app_hand
    0x88005d0:   6c 65 5f 67 61 70 5f 6d 73 67 3a 20 73 75 62 74    le_gap_msg: subt
    0x88005e0:   79 70 65 20 25 64 00 00 21 2a 2a 47 41 50 5f 4d    ype %d..!**GAP_M
    0x88005f0:   53 47 5f 4c 45 5f 42 4f 4e 44 5f 4a 55 53 54 5f    SG_LE_BOND_JUST_
    0x8800600:   57 4f 52 4b 00 00 00 00 21 2a 2a 47 41 50 5f 4d    WORK....!**GAP_M
    0x8800610:   53 47 5f 4c 45 5f 42 4f 4e 44 5f 50 41 53 53 4b    SG_LE_BOND_PASSK
    0x8800620:   45 59 5f 44 49 53 50 4c 41 59 3a 70 61 73 73 6b    EY_DISPLAY:passk
    0x8800630:   65 79 20 25 64 00 00 00 21 2a 2a 47 41 50 5f 4d    ey %d...!**GAP_M
    0x8800640:   53 47 5f 4c 45 5f 42 4f 4e 44 5f 55 53 45 52 5f    SG_LE_BOND_USER_
    0x8800650:   43 4f 4e 46 49 52 4d 41 54 49 4f 4e 3a 20 70 61    CONFIRMATION: pa
    0x8800660:   73 73 6b 65 79 20 25 64 00 00 00 00 21 2a 2a 47    sskey %d....!**G
    0x8800670:   41 50 5f 4d 53 47 5f 4c 45 5f 42 4f 4e 44 5f 50    AP_MSG_LE_BOND_P
    0x8800680:   41 53 53 4b 45 59 5f 49 4e 50 55 54 3a 20 63 6f    ASSKEY_INPUT: co
    0x8800690:   6e 6e 5f 69 64 20 25 64 00 00 00 00 21 2a 2a 47    nn_id %d....!**G
    0x88006a0:   41 50 5f 4d 53 47 5f 4c 45 5f 42 4f 4e 44 5f 4f    AP_MSG_LE_BOND_O
    0x88006b0:   4f 42 5f 49 4e 50 55 54 00 00 00 00 21 21 21 61    OB_INPUT....!!!a
    0x88006c0:   70 70 5f 68 61 6e 64 6c 65 5f 67 61 70 5f 6d 73    pp_handle_gap_ms
    0x88006d0:   67 3a 20 75 6e 6b 6e 6f 77 6e 20 73 75 62 74 79    g: unknown subty
    0x88006e0:   70 65 20 25 64 00 00 00 21 2a 2a 47 41 50 5f 4d    pe %d...!**GAP_M
    0x88006f0:   53 47 5f 4c 45 5f 44 41 54 41 5f 4c 45 4e 5f 43    SG_LE_DATA_LEN_C
    0x8800700:   48 41 4e 47 45 5f 49 4e 46 4f 3a 20 63 6f 6e 6e    HANGE_INFO: conn
    0x8800710:   5f 69 64 20 25 64 2c 20 74 78 20 6f 63 74 65 74    _id %d, tx octet
    0x8800720:   73 20 30 78 25 78 2c 20 6d 61 78 5f 74 78 5f 74    s 0x%x, max_tx_t
    0x8800730:   69 6d 65 20 30 78 25 78 00 00 00 00 21 2a 2a 47    ime 0x%x....!**G
    0x8800740:   41 50 5f 4d 53 47 5f 4c 45 5f 4d 4f 44 49 46 59    AP_MSG_LE_MODIFY
    0x8800750:   5f 57 48 49 54 45 5f 4c 49 53 54 3a 20 6f 70 65    _WHITE_LIST: ope
    0x8800760:   72 61 74 69 6f 6e 20 25 64 2c 20 63 61 75 73 65    ration %d, cause
    0x8800770:   20 30 78 25 78 00 00 00 21 21 21 61 70 70 5f 67     0x%x...!!!app_g
    0x8800780:   61 70 5f 63 61 6c 6c 62 61 63 6b 3a 20 75 6e 68    ap_callback: unh
    0x8800790:   61 6e 64 6c 65 64 20 63 62 5f 74 79 70 65 20 30    andled cb_type 0
    0x88007a0:   78 25 78 00 21 2a 2a 50 52 4f 46 49 4c 45 5f 45    x%x.!**PROFILE_E
    0x88007b0:   56 54 5f 53 52 56 5f 52 45 47 5f 43 4f 4d 50 4c    VT_SRV_REG_COMPL
    0x88007c0:   45 54 45 3a 20 72 65 73 75 6c 74 20 25 64 00 00    ETE: result %d..
    0x88007d0:   21 2a 2a 50 52 4f 46 49 4c 45 5f 45 56 54 5f 53    !**PROFILE_EVT_S
    0x88007e0:   45 4e 44 5f 44 41 54 41 5f 43 4f 4d 50 4c 45 54    END_DATA_COMPLET
    0x88007f0:   45 3a 20 63 6f 6e 6e 5f 69 64 20 25 64 2c 20 63    E: conn_id %d, c
    0x8800800:   61 75 73 65 20 30 78 25 78 2c 20 73 65 72 76 69    ause 0x%x, servi
    0x8800810:   63 65 5f 69 64 20 25 64 2c 20 61 74 74 72 69 62    ce_id %d, attrib
    0x8800820:   5f 69 64 78 20 30 78 25 78 2c 20 63 72 65 64 69    _idx 0x%x, credi
    0x8800830:   74 73 20 25 64 00 00 00 21 2a 2a 50 52 4f 46 49    ts %d...!**PROFI
    0x8800840:   4c 45 5f 45 56 54 5f 53 45 4e 44 5f 44 41 54 41    LE_EVT_SEND_DATA
    0x8800850:   5f 43 4f 4d 50 4c 45 54 45 20 73 75 63 63 65 73    _COMPLETE succes
    0x8800860:   73 00 00 00 21 21 21 50 52 4f 46 49 4c 45 5f 45    s...!!!PROFILE_E
    0x8800870:   56 54 5f 53 45 4e 44 5f 44 41 54 41 5f 43 4f 4d    VT_SEND_DATA_COM
    0x8800880:   50 4c 45 54 45 20 66 61 69 6c 65 64 00 00 00 00    PLETE failed....
    0x8800890:   21 2a 2a 4b 4e 53 5f 4e 4f 54 49 46 59 5f 45 4e    !**KNS_NOTIFY_EN
    0x88008a0:   41 42 4c 45 00 00 00 00 21 2a 2a 4b 4e 53 5f 4e    ABLE....!**KNS_N
    0x88008b0:   4f 54 49 46 59 5f 44 49 53 41 42 4c 45 00 00 00    OTIFY_DISABLE...
    0x88008c0:   21 21 21 62 6c 65 20 6e 6f 74 69 66 79 20 76 61    !!!ble notify va
    0x88008d0:   6c 75 65 20 6c 65 6e 20 65 78 63 65 65 64 20 74    lue len exceed t
    0x88008e0:   68 65 20 6c 69 6d 69 74 00 00 00 00 21 2a 2a 49    he limit....!**I
    0x88008f0:   4f 5f 55 41 52 54 5f 44 4c 50 53 5f 45 6e 74 65    O_UART_DLPS_Ente
    0x8800900:   72 5f 41 6c 6c 6f 77 65 64 20 3d 20 25 64 00 00    r_Allowed = %d..
    0x8800910:   21 21 21 62 61 73 5f 73 65 74 5f 70 61 72 61 6d    !!!bas_set_param
    0x8800920:   65 74 65 72 20 66 61 69 6c 65 64 00 21 21 21 6b    eter failed.!!!k
    0x8800930:   6e 73 5f 61 74 74 72 5f 72 65 61 64 5f 63 62 20    ns_attr_read_cb 
    0x8800940:   61 74 74 72 69 62 5f 69 6e 64 65 78 20 3d 20 25    attrib_index = %
    0x8800950:   64 20 6e 6f 74 20 66 6f 75 6e 64 00 21 2a 2a 3c    d not found.!**<
    0x8800960:   2d 2d 20 67 61 74 74 20 67 65 74 20 50 78 70 45    -- gatt get PxpE
    0x8800970:   78 74 65 6e 64 65 64 20 61 74 74 72 69 62 75 74    xtended attribut
    0x8800980:   65 20 76 61 6c 75 65 3a 20 41 74 74 72 69 62 49    e value: AttribI
    0x8800990:   6e 64 65 78 2d 2d 25 64 2c 20 6c 65 6e 67 74 68    ndex--%d, length
    0x88009a0:   2d 2d 25 64 00 00 00 00 21 21 21 6b 6e 73 5f 61    --%d....!!!kns_a
    0x88009b0:   74 74 72 5f 77 72 69 74 65 5f 63 62 3a 20 70 5f    ttr_write_cb: p_
    0x88009c0:   76 61 6c 75 65 20 25 70 2c 20 6c 65 6e 67 74 68    value %p, length
    0x88009d0:   20 30 78 25 78 00 00 00 21 21 21 6b 6e 73 5f 61     0x%x...!!!kns_a
    0x88009e0:   74 74 72 5f 77 72 69 74 65 5f 63 62 3a 20 70 5f    ttr_write_cb: p_
    0x88009f0:   76 61 6c 75 65 20 25 70 2c 20 6c 65 6e 67 74 68    value %p, length
    0x8800a00:   20 30 78 25 78 00 00 00 21 21 21 6b 6e 73 5f 61     0x%x...!!!kns_a
    0x8800a10:   74 74 72 5f 77 72 69 74 65 5f 63 62 3a 20 70 5f    ttr_write_cb: p_
    0x8800a20:   76 61 6c 75 65 20 25 70 2c 20 6c 65 6e 67 74 68    value %p, length
    0x8800a30:   20 30 78 25 78 00 00 00 21 2a 2a 6b 6e 73 5f 63     0x%x...!**kns_c
    0x8800a40:   63 63 64 5f 75 70 64 61 74 65 5f 63 62 20 69 6e    ccd_update_cb in
    0x8800a50:   64 65 78 20 3d 20 25 64 20 63 63 63 5f 62 69 74    dex = %d ccc_bit
    0x8800a60:   73 20 25 78 00 00 00 00 21 21 21 6b 6e 73 5f 61    s %x....!!!kns_a
    0x8800a70:   64 64 5f 73 65 72 76 69 63 65 3a 20 73 65 72 76    dd_service: serv
    0x8800a80:   69 63 65 5f 69 64 20 25 64 00 00 00 5b 44 5d 20    ice_id %d...[D] 
    0x8800a90:   54 55 59 41 5f 41 50 50 3a 20 63 75 73 74 6f 6d    TUYA_APP: custom
    0x8800aa0:   20 65 76 65 6e 74 20 69 64 20 3d 20 25 64 00 00     event id = %d..
    0x8800ab0:   5b 44 5d 20 54 55 59 41 5f 41 50 50 3a 20 72 65    [D] TUYA_APP: re
    0x8800ac0:   63 65 69 76 65 64 20 41 50 50 5f 43 55 53 54 4f    ceived APP_CUSTO
    0x8800ad0:   4d 5f 45 56 45 4e 54 5f 31 20 64 61 74 61 3a 20    M_EVENT_1 data: 
    0x8800ae0:   5b 6c 65 6e 3d 25 64 5d 20 3a 00 00 00 00 00 00    [len=%d] :......
    0x8800af0:   5b 49 5d 20 54 55 59 41 5f 41 50 50 3a 20 72 65    [I] TUYA_APP: re
    0x8800b00:   63 65 69 76 65 64 20 74 75 79 61 20 62 6c 65 20    ceived tuya ble 
    0x8800b10:   63 6f 6e 6e 63 65 74 20 73 74 61 74 75 73 20 75    conncet status u
    0x8800b20:   70 64 61 74 65 20 65 76 65 6e 74 2c 63 75 72 72    pdate event,curr
    0x8800b30:   65 6e 74 20 63 6f 6e 6e 65 63 74 20 73 74 61 74    ent connect stat
    0x8800b40:   75 73 20 3d 20 25 64 00 5b 44 5d 20 54 55 59 41    us = %d.[D] TUYA
    0x8800b50:   5f 41 50 50 3a 20 72 65 63 65 69 76 65 64 20 64    _APP: received d
    0x8800b60:   70 20 77 72 69 74 65 20 64 61 74 61 20 3a 20 5b    p write data : [
    0x8800b70:   6c 65 6e 3d 25 64 5d 20 3a 00 00 00 00 00 00 00    len=%d] :.......
    0x8800b80:   5b 49 5d 20 54 55 59 41 5f 41 50 50 3a 20 72 65    [I] TUYA_APP: re
    0x8800b90:   63 65 69 76 65 64 20 64 70 20 64 61 74 61 20 72    ceived dp data r
    0x8800ba0:   65 70 6f 72 74 20 72 65 73 70 6f 6e 73 65 20 72    eport response r
    0x8800bb0:   65 73 75 6c 74 20 63 6f 64 65 20 3d 25 64 00 00    esult code =%d..
    0x8800bc0:   5b 49 5d 20 54 55 59 41 5f 41 50 50 3a 20 72 65    [I] TUYA_APP: re
    0x8800bd0:   63 65 69 76 65 64 20 64 70 20 64 61 74 61 20 72    ceived dp data r
    0x8800be0:   65 70 6f 72 74 20 72 65 73 70 6f 6e 73 65 20 72    eport response r
    0x8800bf0:   65 73 75 6c 74 20 63 6f 64 65 20 3d 25 64 00 00    esult code =%d..
    0x8800c00:   5b 49 5d 20 54 55 59 41 5f 41 50 50 3a 20 72 65    [I] TUYA_APP: re
    0x8800c10:   63 65 69 76 65 64 20 64 70 20 64 61 74 61 20 77    ceived dp data w
    0x8800c20:   69 74 68 20 66 6c 61 67 20 72 65 70 6f 72 74 20    ith flag report 
    0x8800c30:   72 65 73 70 6f 6e 73 65 20 73 6e 20 3d 20 25 64    response sn = %d
    0x8800c40:   20 2c 20 66 6c 61 67 20 3d 20 25 64 20 2c 20 72     , flag = %d , r
    0x8800c50:   65 73 75 6c 74 20 63 6f 64 65 20 3d 25 64 00 00    esult code =%d..
    0x8800c60:   5b 49 5d 20 54 55 59 41 5f 41 50 50 3a 20 72 65    [I] TUYA_APP: re
    0x8800c70:   63 65 69 76 65 64 20 64 70 20 64 61 74 61 20 77    ceived dp data w
    0x8800c80:   69 74 68 20 66 6c 61 67 20 61 6e 64 20 74 69 6d    ith flag and tim
    0x8800c90:   65 20 72 65 70 6f 72 74 20 72 65 73 70 6f 6e 73    e report respons
    0x8800ca0:   65 20 73 6e 20 3d 20 25 64 20 2c 20 66 6c 61 67    e sn = %d , flag
    0x8800cb0:   20 3d 20 25 64 20 2c 20 72 65 73 75 6c 74 20 63     = %d , result c
    0x8800cc0:   6f 64 65 20 3d 25 64 00 5b 49 5d 20 54 55 59 41    ode =%d.[I] TUYA
    0x8800cd0:   5f 41 50 50 3a 20 72 65 63 65 69 76 65 64 20 75    _APP: received u
    0x8800ce0:   6e 62 6f 75 6e 64 20 72 65 71 00 00 5b 49 5d 20    nbound req..[I] 
    0x8800cf0:   54 55 59 41 5f 41 50 50 3a 20 72 65 63 65 69 76    TUYA_APP: receiv
    0x8800d00:   65 64 20 61 6e 6f 6d 61 6c 79 20 75 6e 62 6f 75    ed anomaly unbou
    0x8800d10:   6e 64 20 72 65 71 00 00 5b 49 5d 20 54 55 59 41    nd req..[I] TUYA
    0x8800d20:   5f 41 50 50 3a 20 72 65 63 65 69 76 65 64 20 64    _APP: received d
    0x8800d30:   65 76 69 63 65 20 72 65 73 65 74 20 72 65 71 00    evice reset req.
    0x8800d40:   5b 49 5d 20 54 55 59 41 5f 41 50 50 3a 20 72 65    [I] TUYA_APP: re
    0x8800d50:   63 65 69 76 65 64 20 54 55 59 41 5f 42 4c 45 5f    ceived TUYA_BLE_
    0x8800d60:   43 42 5f 45 56 54 5f 44 50 5f 51 55 45 52 59 20    CB_EVT_DP_QUERY 
    0x8800d70:   65 76 65 6e 74 00 00 00 5b 49 5d 20 54 55 59 41    event...[I] TUYA
    0x8800d80:   5f 41 50 50 3a 20 72 65 63 65 69 76 65 64 20 6e    _APP: received n
    0x8800d90:   65 74 20 69 6e 66 6f 20 3a 20 25 73 00 00 00 00    et info : %s....
    0x8800da0:   5b 49 5d 20 54 55 59 41 5f 41 50 50 3a 20 72 65    [I] TUYA_APP: re
    0x8800db0:   63 65 69 76 65 64 20 75 6e 69 78 20 74 69 6d 65    ceived unix time
    0x8800dc0:   73 74 61 6d 70 20 3a 20 25 73 20 2c 74 69 6d 65    stamp : %s ,time
    0x8800dd0:   5f 7a 6f 6e 65 20 3a 20 25 64 00 00 5b 44 5d 20    _zone : %d..[D] 
    0x8800de0:   54 55 59 41 5f 41 50 50 3a 20 72 65 63 65 69 76    TUYA_APP: receiv
    0x8800df0:   65 64 20 62 6c 65 20 70 61 73 73 74 68 72 6f 75    ed ble passthrou
    0x8800e00:   67 68 20 64 61 74 61 20 3a 20 5b 6c 65 6e 3d 25    gh data : [len=%
    0x8800e10:   64 5d 20 3a 00 00 00 00 00 00 00 00 5b 57 5d 20    d] :........[W] 
    0x8800e20:   54 55 59 41 5f 41 50 50 3a 20 61 70 70 5f 74 75    TUYA_APP: app_tu
    0x8800e30:   79 61 5f 63 62 5f 71 75 65 75 65 20 6d 73 67 3a    ya_cb_queue msg:
    0x8800e40:   20 75 6e 6b 6e 6f 77 6e 20 65 76 65 6e 74 20 74     unknown event t
    0x8800e50:   79 70 65 20 30 78 25 30 34 78 00 00 5b 49 5d 20    ype 0x%04x..[I] 
    0x8800e60:   54 55 59 41 5f 41 50 50 3a 20 74 75 79 61 20 62    TUYA_APP: tuya b
    0x8800e70:   6c 65 20 64 65 6d 6f 20 76 65 72 73 69 6f 6e 20    le demo version 
    0x8800e80:   3a 20 31 2e 30 2e 30 00 5b 49 5d 20 54 55 59 41    : 1.0.0.[I] TUYA
    0x8800e90:   5f 41 50 50 3a 20 61 70 70 20 76 65 72 73 69 6f    _APP: app versio
    0x8800ea0:   6e 20 3a 20 31 2e 30 00 5b 45 5d 20 54 55 59 41    n : 1.0.[E] TUYA
    0x8800eb0:   5f 42 4c 45 3a 20 64 66 75 5f 73 65 74 74 69 6e    _BLE: dfu_settin
    0x8800ec0:   67 73 5f 72 65 61 64 20 66 61 69 6c 65 64 20 21    gs_read failed !
    0x8800ed0:   00 00 00 00 5b 44 5d 20 54 55 59 41 5f 42 4c 45    ....[D] TUYA_BLE
    0x8800ee0:   3a 20 64 66 75 5f 73 65 74 74 69 6e 67 73 2e 63    : dfu_settings.c
    0x8800ef0:   72 63 20 3d 20 30 78 25 30 38 78 20 00 00 00 00    rc = 0x%08x ....
    0x8800f00:   5b 44 5d 20 54 55 59 41 5f 42 4c 45 3a 20 64 66    [D] TUYA_BLE: df
    0x8800f10:   75 5f 73 65 74 74 69 6e 67 73 2e 70 72 6f 67 72    u_settings.progr
    0x8800f20:   65 73 73 2e 66 69 72 6d 77 61 72 65 5f 69 6d 61    ess.firmware_ima
    0x8800f30:   67 65 5f 6f 66 66 73 65 74 5f 6c 61 73 74 20 3d    ge_offset_last =
    0x8800f40:   20 25 64 20 00 00 00 00 5b 44 5d 20 54 55 59 41     %d ....[D] TUYA
    0x8800f50:   5f 42 4c 45 3a 20 64 66 75 5f 73 65 74 74 69 6e    _BLE: dfu_settin
    0x8800f60:   67 73 2e 70 72 6f 67 72 65 73 73 2e 66 69 72 6d    gs.progress.firm
    0x8800f70:   77 61 72 65 5f 69 6d 61 67 65 5f 63 72 63 5f 6c    ware_image_crc_l
    0x8800f80:   61 73 74 20 3d 20 30 78 25 30 38 78 20 00 00 00    ast = 0x%08x ...
    0x8800f90:   5b 44 5d 20 54 55 59 41 5f 42 4c 45 3a 20 72 65    [D] TUYA_BLE: re
    0x8800fa0:   61 64 20 64 66 75 5f 73 65 74 74 69 6e 67 73 2e    ad dfu_settings.
    0x8800fb0:   2e 2e 63 72 63 20 65 72 72 6f 72 21 00 00 00 00    ..crc error!....
    0x8800fc0:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 64 66    [E] TUYA_BLE: df
    0x8800fd0:   75 5f 73 65 74 74 69 6e 67 73 5f 77 72 69 74 65    u_settings_write
    0x8800fe0:   20 66 61 69 6c 65 64 20 21 00 00 00 5b 45 5d 20     failed !...[E] 
    0x8800ff0:   54 55 59 41 5f 42 4c 45 3a 20 63 75 72 72 65 6e    TUYA_BLE: curren
    0x8801000:   74 20 6f 74 61 20 73 74 61 74 75 73 20 69 73 20    t ota status is 
    0x8801010:   6e 6f 74 20 54 55 59 41 5f 4f 54 41 5f 53 54 41    not TUYA_OTA_STA
    0x8801020:   54 55 53 5f 4e 4f 4e 45 20 20 61 6e 64 20 69 73    TUS_NONE  and is
    0x8801030:   20 3a 20 25 64 20 21 00 5b 45 5d 20 54 55 59 41     : %d !.[E] TUYA
    0x8801040:   5f 42 4c 45 3a 20 74 75 79 61 5f 6f 74 61 5f 73    _BLE: tuya_ota_s
    0x8801050:   74 61 72 74 5f 72 65 73 70 6f 6e 73 65 20 66 61    tart_response fa
    0x8801060:   69 6c 65 64 2e 00 00 00 5b 45 5d 20 54 55 59 41    iled....[E] TUYA
    0x8801070:   5f 42 4c 45 3a 20 66 6c 61 73 68 5f 61 75 74 6f    _BLE: flash_auto
    0x8801080:   5f 72 65 61 64 5f 62 75 66 66 65 72 20 64 61 74    _read_buffer dat
    0x8801090:   61 20 6c 65 6e 67 74 68 20 65 72 72 6f 72 2e 00    a length error..
    0x88010a0:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 66 69    [E] TUYA_BLE: fi
    0x88010b0:   6c 65 5f 63 72 63 5f 63 68 65 63 6b 5f 69 6e 5f    le_crc_check_in_
    0x88010c0:   66 6c 61 73 68 20 64 61 74 61 20 6c 65 6e 67 74    flash data lengt
    0x88010d0:   68 20 65 72 72 6f 72 2e 00 00 00 00 5b 44 5d 20    h error.....[D] 
    0x88010e0:   54 55 59 41 5f 42 4c 45 3a 20 72 65 61 64 5f 61    TUYA_BLE: read_a
    0x88010f0:   64 64 72 20 3d 20 30 78 25 30 38 78 00 00 00 00    ddr = 0x%08x....
    0x8801100:   5b 44 5d 20 54 55 59 41 5f 42 4c 45 3a 20 66 69    [D] TUYA_BLE: fi
    0x8801110:   6c 65 5f 63 72 63 5f 63 68 65 63 6b 5f 69 6e 5f    le_crc_check_in_
    0x8801120:   66 6c 61 73 68 3a 62 75 66 20 64 61 74 61 20 62    flash:buf data b
    0x8801130:   65 66 6f 72 65 3a 20 5b 6c 65 6e 3d 25 64 5d 20    efore: [len=%d] 
    0x8801140:   3a 00 00 00 00 00 00 00 5b 44 5d 20 54 55 59 41    :.......[D] TUYA
    0x8801150:   5f 42 4c 45 3a 20 66 69 6c 65 5f 63 72 63 5f 63    _BLE: file_crc_c
    0x8801160:   68 65 63 6b 5f 69 6e 5f 66 6c 61 73 68 3a 62 75    heck_in_flash:bu
    0x8801170:   66 20 64 61 74 61 20 61 66 74 65 72 3a 20 5b 6c    f data after: [l
    0x8801180:   65 6e 3d 25 64 5d 20 3a 00 00 00 00 00 00 00 00    en=%d] :........
    0x8801190:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 63 75    [E] TUYA_BLE: cu
    0x88011a0:   72 72 65 6e 74 20 6f 74 61 20 73 74 61 74 75 73    rrent ota status
    0x88011b0:   20 69 73 20 6e 6f 74 20 54 55 59 41 5f 4f 54 41     is not TUYA_OTA
    0x88011c0:   5f 53 54 41 54 55 53 5f 53 54 41 52 54 20 20 61    _STATUS_START  a
    0x88011d0:   6e 64 20 69 73 20 3a 20 25 64 20 21 00 00 00 00    nd is : %d !....
    0x88011e0:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 63 75    [E] TUYA_BLE: cu
    0x88011f0:   72 72 65 6e 74 20 6f 74 61 20 66 6d 20 74 79 70    rrent ota fm typ
    0x8801200:   65 20 69 73 20 6e 6f 74 20 30 21 00 5b 44 5d 20    e is not 0!.[D] 
    0x8801210:   54 55 59 41 5f 42 4c 45 3a 20 64 66 75 5f 73 65    TUYA_BLE: dfu_se
    0x8801220:   74 74 69 6e 67 73 2e 66 69 6c 65 5f 69 6e 66 6f    ttings.file_info
    0x8801230:   2e 66 69 72 6d 77 61 72 65 5f 66 69 6c 65 5f 76    .firmware_file_v
    0x8801240:   65 72 73 69 6f 6e 20 3d 20 30 78 25 30 34 78 20    ersion = 0x%04x 
    0x8801250:   2d 2d 2d 2d 20 66 69 6c 65 5f 76 65 72 73 69 6f    ---- file_versio
    0x8801260:   6e 20 3d 20 30 78 25 30 34 78 00 00 5b 44 5d 20    n = 0x%04x..[D] 
    0x8801270:   54 55 59 41 5f 42 4c 45 3a 20 64 66 75 5f 73 65    TUYA_BLE: dfu_se
    0x8801280:   74 74 69 6e 67 73 2e 66 69 6c 65 5f 69 6e 66 6f    ttings.file_info
    0x8801290:   2e 66 69 72 6d 77 61 72 65 5f 66 69 6c 65 5f 6c    .firmware_file_l
    0x88012a0:   65 6e 67 74 68 20 3d 20 25 64 20 2d 2d 2d 2d 20    ength = %d ---- 
    0x88012b0:   66 69 6c 65 5f 6c 65 6e 67 74 68 20 3d 20 25 64    file_length = %d
    0x88012c0:   00 00 00 00 5b 44 5d 20 54 55 59 41 5f 42 4c 45    ....[D] TUYA_BLE
    0x88012d0:   3a 20 64 66 75 5f 73 65 74 74 69 6e 67 73 2e 66    : dfu_settings.f
    0x88012e0:   69 6c 65 5f 69 6e 66 6f 2e 66 69 72 6d 77 61 72    ile_info.firmwar
    0x88012f0:   65 5f 66 69 6c 65 5f 63 72 63 20 3d 20 30 78 25    e_file_crc = 0x%
    0x8801300:   30 38 78 20 2d 2d 2d 2d 20 66 69 6c 65 5f 63 72    08x ---- file_cr
    0x8801310:   63 20 3d 20 30 78 25 30 38 78 00 00 5b 44 5d 20    c = 0x%08x..[D] 
    0x8801320:   54 55 59 41 5f 42 4c 45 3a 20 64 66 75 5f 73 65    TUYA_BLE: dfu_se
    0x8801330:   74 74 69 6e 67 73 2e 70 72 6f 67 72 65 73 73 2e    ttings.progress.
    0x8801340:   66 69 72 6d 77 61 72 65 5f 69 6d 61 67 65 5f 6f    firmware_image_o
    0x8801350:   66 66 73 65 74 5f 6c 61 73 74 20 3d 20 25 64 20    ffset_last = %d 
    0x8801360:   00 00 00 00 5b 44 5d 20 54 55 59 41 5f 42 4c 45    ....[D] TUYA_BLE
    0x8801370:   3a 20 64 66 75 5f 73 65 74 74 69 6e 67 73 2e 70    : dfu_settings.p
    0x8801380:   72 6f 67 72 65 73 73 2e 66 69 72 6d 77 61 72 65    rogress.firmware
    0x8801390:   5f 69 6d 61 67 65 5f 63 72 63 5f 6c 61 73 74 20    _image_crc_last 
    0x88013a0:   3d 20 30 78 25 30 38 78 20 00 00 00 5b 44 5d 20    = 0x%08x ...[D] 
    0x88013b0:   54 55 59 41 5f 42 4c 45 3a 20 66 69 6c 65 5f 6d    TUYA_BLE: file_m
    0x88013c0:   64 35 20 3d 20 25 64 00 5b 44 5d 20 54 55 59 41    d5 = %d.[D] TUYA
    0x88013d0:   5f 42 4c 45 3a 20 66 69 6c 65 20 69 6e 66 6f 20    _BLE: file info 
    0x88013e0:   63 68 65 63 6b 20 66 61 69 6c 65 64 2e 00 00 00    check failed....
    0x88013f0:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 6f 74    [E] TUYA_BLE: ot
    0x8801400:   61 20 66 69 6c 65 20 76 65 72 73 69 6f 6e 20 65    a file version e
    0x8801410:   72 72 6f 72 20 21 00 00 5b 45 5d 20 54 55 59 41    rror !..[E] TUYA
    0x8801420:   5f 42 4c 45 3a 20 6f 74 61 20 66 69 6c 65 20 6c    _BLE: ota file l
    0x8801430:   65 6e 67 74 68 20 69 73 20 62 69 67 67 65 72 20    ength is bigger 
    0x8801440:   74 68 61 6e 20 72 65 76 20 73 70 61 63 65 20 21    than rev space !
    0x8801450:   00 00 00 00 5b 44 5d 20 54 55 59 41 5f 42 4c 45    ....[D] TUYA_BLE
    0x8801460:   3a 20 66 69 6c 65 5f 63 72 63 5f 63 68 65 63 6b    : file_crc_check
    0x8801470:   5f 69 6e 5f 66 6c 61 73 68 2d 66 69 72 6d 77 61    _in_flash-firmwa
    0x8801480:   72 65 5f 69 6d 61 67 65 5f 63 72 63 5f 6c 61 73    re_image_crc_las
    0x8801490:   74 20 3d 20 30 78 25 30 38 78 20 2d 2d 2d 2d 20    t = 0x%08x ---- 
    0x88014a0:   63 72 63 5f 74 65 6d 70 20 3d 20 30 78 25 30 38    crc_temp = 0x%08
    0x88014b0:   78 00 00 00 5b 44 5d 20 54 55 59 41 5f 42 4c 45    x...[D] TUYA_BLE
    0x88014c0:   3a 20 6f 74 61 20 66 69 6c 65 20 6c 65 6e 67 74    : ota file lengt
    0x88014d0:   68 20 20 3a 20 25 64 00 5b 44 5d 20 54 55 59 41    h  : %d.[D] TUYA
    0x88014e0:   5f 42 4c 45 3a 20 6f 74 61 20 66 69 6c 65 20 20    _BLE: ota file  
    0x88014f0:   63 72 63 20 20 20 20 3a 20 30 78 25 30 34 78 00    crc    : 0x%04x.
    0x8801500:   5b 44 5d 20 54 55 59 41 5f 42 4c 45 3a 20 6f 74    [D] TUYA_BLE: ot
    0x8801510:   61 20 66 69 6c 65 20 76 65 72 73 69 6f 6e 20 3a    a file version :
    0x8801520:   20 30 78 25 30 34 78 00 5b 44 5d 20 54 55 59 41     0x%04x.[D] TUYA
    0x8801530:   5f 42 4c 45 3a 20 6f 74 61 20 66 69 72 6d 77 61    _BLE: ota firmwa
    0x8801540:   72 65 5f 69 6d 61 67 65 5f 6f 66 66 73 65 74 5f    re_image_offset_
    0x8801550:   6c 61 73 74 20 3a 20 30 78 25 30 34 78 00 00 00    last : 0x%04x...
    0x8801560:   5b 44 5d 20 54 55 59 41 5f 42 4c 45 3a 20 6f 74    [D] TUYA_BLE: ot
    0x8801570:   61 20 66 69 72 6d 77 61 72 65 5f 69 6d 61 67 65    a firmware_image
    0x8801580:   5f 63 72 63 5f 6c 61 73 74 20 20 20 20 3a 20 30    _crc_last    : 0
    0x8801590:   78 25 30 34 78 00 00 00 5b 44 5d 20 54 55 59 41    x%04x...[D] TUYA
    0x88015a0:   5f 42 4c 45 3a 20 6f 74 61 20 66 69 72 6d 77 61    _BLE: ota firmwa
    0x88015b0:   72 65 20 20 20 77 72 69 74 65 20 6f 66 66 73 65    re   write offse
    0x88015c0:   74 20 20 20 20 3a 20 30 78 25 30 34 78 00 00 00    t    : 0x%04x...
    0x88015d0:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 74 75    [E] TUYA_BLE: tu
    0x88015e0:   79 61 5f 6f 74 61 5f 66 69 6c 65 5f 69 6e 66 6f    ya_ota_file_info
    0x88015f0:   5f 72 65 73 70 6f 6e 73 65 20 66 61 69 6c 65 64    _response failed
    0x8801600:   2e 00 00 00 5b 45 5d 20 54 55 59 41 5f 42 4c 45    ....[E] TUYA_BLE
    0x8801610:   3a 20 63 75 72 72 65 6e 74 20 6f 74 61 20 73 74    : current ota st
    0x8801620:   61 74 75 73 20 69 73 20 6e 6f 74 20 54 55 59 41    atus is not TUYA
    0x8801630:   5f 4f 54 41 5f 53 54 41 54 55 53 5f 46 49 4c 45    _OTA_STATUS_FILE
    0x8801640:   5f 49 4e 46 4f 20 20 61 6e 64 20 69 73 20 3a 20    _INFO  and is : 
    0x8801650:   25 64 20 21 00 00 00 00 5b 44 5d 20 54 55 59 41    %d !....[D] TUYA
    0x8801660:   5f 42 4c 45 3a 20 74 75 79 61 5f 6f 74 61 5f 6f    _BLE: tuya_ota_o
    0x8801670:   66 66 73 65 74 5f 72 65 71 20 6e 65 77 20 66 69    ffset_req new fi
    0x8801680:   72 6d 77 61 72 65 5f 69 6d 61 67 65 5f 6f 66 66    rmware_image_off
    0x8801690:   73 65 74 5f 6c 61 73 74 20 3a 20 30 78 25 30 34    set_last : 0x%04
    0x88016a0:   78 00 00 00 5b 44 5d 20 54 55 59 41 5f 42 4c 45    x...[D] TUYA_BLE
    0x88016b0:   3a 20 74 75 79 61 5f 6f 74 61 5f 6f 66 66 73 65    : tuya_ota_offse
    0x88016c0:   74 5f 72 65 71 20 6e 65 77 20 66 69 72 6d 77 61    t_req new firmwa
    0x88016d0:   72 65 5f 69 6d 61 67 65 5f 63 72 63 5f 6c 61 73    re_image_crc_las
    0x88016e0:   74 20 20 20 20 3a 20 30 78 25 30 34 78 00 00 00    t    : 0x%04x...
    0x88016f0:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 74 75    [E] TUYA_BLE: tu
    0x8801700:   79 61 5f 6f 74 61 5f 6f 66 66 73 65 74 5f 72 65    ya_ota_offset_re
    0x8801710:   73 70 6f 6e 73 65 20 66 61 69 6c 65 64 2e 00 00    sponse failed...
    0x8801720:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 63 75    [E] TUYA_BLE: cu
    0x8801730:   72 72 65 6e 74 20 6f 74 61 20 73 74 61 74 75 73    rrent ota status
    0x8801740:   20 69 73 20 6e 6f 74 20 54 55 59 41 5f 4f 54 41     is not TUYA_OTA
    0x8801750:   5f 53 54 41 54 55 53 5f 46 49 4c 45 5f 4f 46 46    _STATUS_FILE_OFF
    0x8801760:   53 45 54 20 20 6f 72 20 54 55 59 41 5f 4f 54 41    SET  or TUYA_OTA
    0x8801770:   5f 53 54 41 54 55 53 5f 46 49 4c 45 5f 44 41 54    _STATUS_FILE_DAT
    0x8801780:   41 20 61 6e 64 20 69 73 20 3a 20 25 64 20 21 00    A and is : %d !.
    0x8801790:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 6f 74    [E] TUYA_BLE: ot
    0x88017a0:   61 20 72 65 63 65 69 76 65 64 20 70 61 63 6b 61    a received packa
    0x88017b0:   67 65 20 6e 75 6d 62 65 72 20 65 72 72 6f 72 2e    ge number error.
    0x88017c0:   72 65 63 65 69 76 65 64 20 70 61 63 6b 61 67 65    received package
    0x88017d0:   20 6e 75 6d 62 65 72 20 3a 20 25 64 00 00 00 00     number : %d....
    0x88017e0:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 6f 74    [E] TUYA_BLE: ot
    0x88017f0:   61 20 72 65 63 65 69 76 65 64 20 70 61 63 6b 61    a received packa
    0x8801800:   67 65 20 64 61 74 61 20 6c 65 6e 67 74 68 20 65    ge data length e
    0x8801810:   72 72 6f 72 20 3a 20 25 64 00 00 00 5b 44 5d 20    rror : %d...[D] 
    0x8801820:   54 55 59 41 5f 42 4c 45 3a 20 44 46 55 5f 4f 50    TUYA_BLE: DFU_OP
    0x8801830:   43 4f 44 45 5f 53 54 41 52 54 5f 44 46 55 3a 20    CODE_START_DFU: 
    0x8801840:   69 63 5f 74 79 70 65 3d 30 78 25 78 2c 20 73 65    ic_type=0x%x, se
    0x8801850:   63 75 72 65 5f 76 65 72 73 69 6f 6e 3d 30 78 25    cure_version=0x%
    0x8801860:   78 2c 20 63 74 72 6c 5f 66 6c 61 67 2e 76 61 6c    x, ctrl_flag.val
    0x8801870:   75 65 3d 30 78 25 78 2c 20 73 69 67 6e 61 74 75    ue=0x%x, signatu
    0x8801880:   72 65 3d 30 78 25 78 2c 63 72 63 31 36 3d 30 78    re=0x%x,crc16=0x
    0x8801890:   25 30 34 78 2c 20 69 6d 61 67 65 5f 6c 65 6e 67    %04x, image_leng
    0x88018a0:   74 68 3d 30 78 25 78 00 5b 45 5d 20 54 55 59 41    th=0x%x.[E] TUYA
    0x88018b0:   5f 42 4c 45 3a 20 74 75 79 61 5f 75 61 72 74 5f    _BLE: tuya_uart_
    0x88018c0:   6f 74 61 5f 73 74 61 72 74 5f 72 65 71 5f 70 72    ota_start_req_pr
    0x88018d0:   6f 63 65 73 73 20 65 72 72 6f 72 2c 73 74 61 74    ocess error,stat
    0x88018e0:   75 73 20 3d 20 25 64 20 00 00 00 00 5b 45 5d 20    us = %d ....[E] 
    0x88018f0:   54 55 59 41 5f 42 4c 45 3a 20 64 66 75 5f 73 65    TUYA_BLE: dfu_se
    0x8801900:   72 76 69 63 65 5f 68 61 6e 64 6c 65 5f 70 61 63    rvice_handle_pac
    0x8801910:   6b 65 74 5f 72 65 71 3a 20 70 5f 64 66 75 2d 3e    ket_req: p_dfu->
    0x8801920:   63 75 72 5f 6f 66 66 73 65 74 3d 25 64 2c 20 6f    cur_offset=%d, o
    0x8801930:   74 61 5f 74 65 6d 70 5f 62 75 66 5f 75 73 65 64    ta_temp_buf_used
    0x8801940:   5f 73 69 7a 65 20 3d 25 64 2c 20 6c 65 6e 67 74    _size =%d, lengt
    0x8801950:   68 3d 20 25 64 2c 20 69 6d 61 67 65 5f 74 6f 74    h= %d, image_tot
    0x8801960:   61 6c 5f 6c 65 6e 67 74 68 20 3d 20 25 64 20 00    al_length = %d .
    0x8801970:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 44 46    [E] TUYA_BLE: DF
    0x8801980:   55 5f 4c 45 4e 47 54 48 5f 45 52 52 4f 52 00 00    U_LENGTH_ERROR..
    0x8801990:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 74 75    [E] TUYA_BLE: tu
    0x88019a0:   79 61 5f 75 61 72 74 5f 6f 74 61 5f 64 61 74 61    ya_uart_ota_data
    0x88019b0:   5f 70 72 6f 63 65 73 73 20 65 72 72 6f 72 2c 73    _process error,s
    0x88019c0:   74 61 74 75 73 20 3d 20 25 64 20 00 5b 45 5d 20    tatus = %d .[E] 
    0x88019d0:   54 55 59 41 5f 42 4c 45 3a 20 74 75 79 61 5f 6f    TUYA_BLE: tuya_o
    0x88019e0:   74 61 5f 64 61 74 61 5f 72 65 73 70 6f 6e 73 65    ta_data_response
    0x88019f0:   20 66 61 69 6c 65 64 2e 00 00 00 00 5b 45 5d 20     failed.....[E] 
    0x8801a00:   54 55 59 41 5f 42 4c 45 3a 20 6f 74 61 20 65 72    TUYA_BLE: ota er
    0x8801a10:   72 6f 72 20 73 6f 20 66 72 65 65 21 00 00 00 00    ror so free!....
    0x8801a20:   5b 44 5d 20 54 55 59 41 5f 42 4c 45 3a 20 57 68    [D] TUYA_BLE: Wh
    0x8801a30:   6f 6c 65 20 66 69 72 6d 77 61 72 65 20 69 6d 61    ole firmware ima
    0x8801a40:   67 65 20 72 65 63 65 69 76 65 64 2e 20 50 6f 73    ge received. Pos
    0x8801a50:   74 76 61 6c 69 64 61 74 69 6e 67 2e 00 00 00 00    tvalidating.....
    0x8801a60:   5b 44 5d 20 54 55 59 41 5f 42 4c 45 3a 20 64 66    [D] TUYA_BLE: df
    0x8801a70:   75 5f 61 63 74 5f 6e 6f 74 69 66 79 5f 76 61 6c    u_act_notify_val
    0x8801a80:   69 64 2c 20 63 68 65 63 6b 5f 72 65 73 75 6c 74    id, check_result
    0x8801a90:   3a 25 64 20 28 31 3a 20 53 75 63 63 65 73 73 2c    :%d (1: Success,
    0x8801aa0:   20 30 3a 20 46 61 69 6c 29 00 00 00 5b 45 5d 20     0: Fail)...[E] 
    0x8801ab0:   54 55 59 41 5f 42 4c 45 3a 20 74 75 79 61 5f 6f    TUYA_BLE: tuya_o
    0x8801ac0:   74 61 5f 65 6e 64 5f 72 65 73 70 6f 6e 73 65 20    ta_end_response 
    0x8801ad0:   66 61 69 6c 65 64 2e 00 5b 49 5d 20 54 55 59 41    failed..[I] TUYA
    0x8801ae0:   5f 42 4c 45 3a 20 73 74 61 72 74 20 72 65 73 65    _BLE: start rese
    0x8801af0:   74 7e 7e 7e 2e 00 00 00 21 2a 2a 55 6e 6c 6f 63    t~~~....!**Unloc
    0x8801b00:   6b 20 73 75 63 63 65 73 73 21 20 6f 6c 64 5f 62    k success! old_b
    0x8801b10:   70 5f 6c 76 3d 25 64 00 5b 45 5d 20 54 55 59 41    p_lv=%d.[E] TUYA
    0x8801b20:   5f 42 4c 45 3a 20 6f 74 61 20 63 72 63 20 65 72    _BLE: ota crc er
    0x8801b30:   72 6f 72 21 00 00 00 00 5b 45 5d 20 54 55 59 41    ror!....[E] TUYA
    0x8801b40:   5f 42 4c 45 3a 20 63 75 72 72 65 6e 74 20 6f 74    _BLE: current ot
    0x8801b50:   61 20 73 74 61 74 75 73 20 69 73 20 54 55 59 41    a status is TUYA
    0x8801b60:   5f 4f 54 41 5f 53 54 41 54 55 53 5f 4e 4f 4e 45    _OTA_STATUS_NONE
    0x8801b70:   21 00 00 00 5b 44 5d 20 54 55 59 41 5f 42 4c 45    !...[D] TUYA_BLE
    0x8801b80:   3a 20 6f 74 61 20 63 6d 64 20 3a 20 30 78 25 30    : ota cmd : 0x%0
    0x8801b90:   34 78 20 2c 20 72 65 63 76 5f 6c 65 6e 20 3a 20    4x , recv_len : 
    0x8801ba0:   25 64 00 00 21 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a    %d..!***********
    0x8801bb0:   2a 5b 46 6c 61 73 68 20 53 65 74 5d 20 46 6c 61    *[Flash Set] Fla
    0x8801bc0:   73 68 20 75 6e 6c 6f 63 6b 20 2a 2a 2a 2a 2a 2a    sh unlock ******
    0x8801bd0:   2a 2a 2a 2a 2a 00 00 00 21 2a 2a 5b 46 6c 61 73    *****...!**[Flas
    0x8801be0:   68 20 53 65 74 5d 20 46 6c 61 73 68 20 75 6e 6c    h Set] Flash unl
    0x8801bf0:   6f 63 6b 20 61 64 64 72 65 73 73 20 3d 20 30 78    ock address = 0x
    0x8801c00:   38 30 30 30 30 30 2c 20 70 72 65 76 5f 62 70 5f    800000, prev_bp_
    0x8801c10:   6c 76 20 3d 20 25 64 00 21 2a 2a 61 70 70 5f 66    lv = %d.!**app_f
    0x8801c20:   6c 61 73 68 5f 63 6d 64 5f 74 78 00 21 2a 2a 61    lash_cmd_tx.!**a
    0x8801c30:   70 70 5f 66 6c 61 73 68 5f 77 61 69 74 5f 62 75    pp_flash_wait_bu
    0x8801c40:   73 79 20 2e 2e 25 78 00 21 2a 2a 3d 3d 3e 20 66    sy ..%x.!**==> f
    0x8801c50:   6c 61 73 68 5f 65 72 61 73 65 5f 73 65 63 74 6f    lash_erase_secto
    0x8801c60:   72 20 3a 25 78 20 0d 0a 00 00 00 00 21 2a 2a 3d    r :%x ......!**=
    0x8801c70:   3d 3e 20 64 66 75 5f 75 70 64 61 74 65 20 6c 65    => dfu_update le
    0x8801c80:   6e 67 74 68 3a 25 64 20 0d 0a 00 00 21 2a 2a 3d    ngth:%d ....!**=
    0x8801c90:   3d 3e 20 64 66 75 5f 75 70 64 61 74 65 20 64 66    => dfu_update df
    0x8801ca0:   75 5f 62 61 73 65 5f 61 64 64 72 3a 30 78 25 78    u_base_addr:0x%x
    0x8801cb0:   20 0d 0a 00 21 2a 2a 64 66 75 5f 75 70 64 61 74     ...!**dfu_updat
    0x8801cc0:   65 20 4e 65 77 20 49 6d 61 67 65 20 48 65 61 64    e New Image Head
    0x8801cd0:   65 72 3a 30 78 25 30 38 78 2c 20 53 69 67 6e 61    er:0x%08x, Signa
    0x8801ce0:   74 75 72 65 3a 30 78 25 30 38 78 2c 20 64 66 75    ture:0x%08x, dfu
    0x8801cf0:   5f 62 61 73 65 5f 61 64 64 72 3a 30 78 25 30 38    _base_addr:0x%08
    0x8801d00:   78 00 00 00 21 2a 2a 73 5f 76 61 6c 3a 30 78 25    x...!**s_val:0x%
    0x8801d10:   30 38 78 2c 20 2a 70 5f 76 6f 69 64 3a 30 78 25    08x, *p_void:0x%
    0x8801d20:   30 38 78 2c 20 69 3a 30 78 25 30 38 78 00 00 00    08x, i:0x%08x...
    0x8801d30:   21 2a 2a 3c 3d 3d 64 66 75 5f 75 70 64 61 74 65    !**<==dfu_update
    0x8801d40:   20 72 65 73 75 6c 74 3a 25 64 20 0d 0a 00 00 00     result:%d .....
    0x8801d50:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 74 75    [E] TUYA_BLE: tu
    0x8801d60:   79 61 5f 65 76 65 6e 74 5f 73 65 6e 64 20 62 6c    ya_event_send bl
    0x8801d70:   65 20 64 61 74 61 20 65 72 72 6f 72 2c 64 61 74    e data error,dat
    0x8801d80:   61 20 6c 65 6e 20 3d 20 25 64 20 00 5b 45 5d 20    a len = %d .[E] 
    0x8801d90:   54 55 59 41 5f 42 4c 45 3a 20 74 75 79 61 5f 4d    TUYA_BLE: tuya_M
    0x8801da0:   65 6d 47 65 74 20 75 61 72 74 20 65 76 74 20 62    emGet uart evt b
    0x8801db0:   75 66 66 65 72 20 66 61 69 6c 2e 00 5b 45 5d 20    uffer fail..[E] 
    0x8801dc0:   54 55 59 41 5f 42 4c 45 3a 20 74 75 79 61 5f 65    TUYA_BLE: tuya_e
    0x8801dd0:   76 65 6e 74 5f 73 65 6e 64 20 75 61 72 74 20 64    vent_send uart d
    0x8801de0:   61 74 61 20 65 72 72 6f 72 2e 00 00 5b 45 5d 20    ata error...[E] 
    0x8801df0:   54 55 59 41 5f 42 4c 45 3a 20 74 75 79 61 5f 4d    TUYA_BLE: tuya_M
    0x8801e00:   65 6d 47 65 74 20 75 61 72 74 20 65 76 74 20 62    emGet uart evt b
    0x8801e10:   75 66 66 65 72 20 66 61 69 6c 2e 00 5b 45 5d 20    uffer fail..[E] 
    0x8801e20:   54 55 59 41 5f 42 4c 45 3a 20 74 75 79 61 5f 65    TUYA_BLE: tuya_e
    0x8801e30:   76 65 6e 74 5f 73 65 6e 64 20 75 61 72 74 20 66    vent_send uart f
    0x8801e40:   75 6c 6c 20 63 6d 64 20 65 72 72 6f 72 2e 00 00    ull cmd error...
    0x8801e50:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 74 75    [E] TUYA_BLE: tu
    0x8801e60:   79 61 5f 65 76 65 6e 74 5f 73 65 6e 64 20 70 72    ya_event_send pr
    0x8801e70:   6f 64 75 63 74 20 69 64 20 75 70 64 61 74 65 20    oduct id update 
    0x8801e80:   65 72 72 6f 72 00 00 00 5b 45 5d 20 54 55 59 41    error...[E] TUYA
    0x8801e90:   5f 42 4c 45 3a 20 74 75 79 61 5f 65 76 65 6e 74    _BLE: tuya_event
    0x8801ea0:   5f 73 65 6e 64 20 4c 4f 47 49 4e 20 4b 45 59 20    _send LOGIN KEY 
    0x8801eb0:   75 70 64 61 74 65 20 65 72 72 6f 72 00 00 00 00    update error....
    0x8801ec0:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 74 75    [E] TUYA_BLE: tu
    0x8801ed0:   79 61 5f 65 76 65 6e 74 5f 73 65 6e 64 20 62 6f    ya_event_send bo
    0x8801ee0:   75 6e 64 20 73 74 61 74 65 20 75 70 64 61 74 65    und state update
    0x8801ef0:   20 65 72 72 6f 72 00 00 5b 45 5d 20 54 55 59 41     error..[E] TUYA
    0x8801f00:   5f 42 4c 45 3a 20 72 65 70 6f 72 74 20 64 70 20    _BLE: report dp 
    0x8801f10:   64 61 74 61 20 6c 65 6e 20 65 72 72 6f 72 2c 64    data len error,d
    0x8801f20:   61 74 61 20 6c 65 6e 20 3d 20 25 64 20 2c 20 6d    ata len = %d , m
    0x8801f30:   61 78 20 64 61 74 61 20 6c 65 6e 20 3d 20 25 64    ax data len = %d
    0x8801f40:   00 00 00 00 5b 45 5d 20 54 55 59 41 5f 42 4c 45    ....[E] TUYA_BLE
    0x8801f50:   3a 20 72 65 70 6f 72 74 20 66 6c 61 67 20 64 70    : report flag dp
    0x8801f60:   20 64 61 74 61 20 6c 65 6e 20 65 72 72 6f 72 2c     data len error,
    0x8801f70:   64 61 74 61 20 6c 65 6e 20 3d 20 25 64 20 2c 20    data len = %d , 
    0x8801f80:   6d 61 78 20 64 61 74 61 20 6c 65 6e 20 3d 20 25    max data len = %
    0x8801f90:   64 00 00 00 5b 45 5d 20 54 55 59 41 5f 42 4c 45    d...[E] TUYA_BLE
    0x8801fa0:   3a 20 74 75 79 61 5f 65 76 65 6e 74 5f 73 65 6e    : tuya_event_sen
    0x8801fb0:   64 20 66 61 63 74 6f 72 79 20 72 65 73 65 74 20    d factory reset 
    0x8801fc0:   65 72 72 6f 72 00 00 00 5b 45 5d 20 54 55 59 41    error...[E] TUYA
    0x8801fd0:   5f 42 4c 45 3a 20 74 75 79 61 5f 65 76 65 6e 74    _BLE: tuya_event
    0x8801fe0:   5f 73 65 6e 64 20 74 69 6d 65 20 72 65 71 20 65    _send time req e
    0x8801ff0:   72 72 6f 72 00 00 00 00 5b 44 5d 20 54 55 59 41    rror....[D] TUYA
    0x8802000:   5f 42 4c 45 3a 20 62 6c 65 20 64 69 73 63 6f 6e    _BLE: ble discon
    0x8802010:   6e 63 65 74 20 62 65 63 61 75 73 65 20 6d 6f 6e    ncet because mon
    0x8802020:   69 74 6f 72 20 74 69 6d 65 72 20 74 69 6d 65 6f    itor timer timeo
    0x8802030:   75 74 2e 00 5b 45 5d 20 54 55 59 41 5f 42 4c 45    ut..[E] TUYA_BLE
    0x8802040:   3a 20 74 75 79 61 5f 62 6c 65 5f 78 74 69 6d 65    : tuya_ble_xtime
    0x8802050:   72 5f 63 6f 6e 6e 65 63 74 5f 6d 6f 6e 69 74 6f    r_connect_monito
    0x8802060:   72 20 63 72 65 61 74 20 66 61 69 6c 65 64 00 00    r creat failed..
    0x8802070:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 74 75    [E] TUYA_BLE: tu
    0x8802080:   79 61 5f 62 6c 65 5f 78 74 69 6d 65 72 5f 63 6f    ya_ble_xtimer_co
    0x8802090:   6e 6e 65 63 74 5f 6d 6f 6e 69 74 6f 72 20 73 74    nnect_monitor st
    0x88020a0:   61 72 74 20 66 61 69 6c 65 64 00 00 5b 45 5d 20    art failed..[E] 
    0x88020b0:   54 55 59 41 5f 42 4c 45 3a 20 74 75 79 61 5f 62    TUYA_BLE: tuya_b
    0x88020c0:   6c 65 5f 78 74 69 6d 65 72 5f 63 6f 6e 6e 65 63    le_xtimer_connec
    0x88020d0:   74 5f 6d 6f 6e 69 74 6f 72 20 73 74 61 72 74 20    t_monitor start 
    0x88020e0:   66 61 69 6c 65 64 00 00 5b 45 5d 20 54 55 59 41    failed..[E] TUYA
    0x88020f0:   5f 42 4c 45 3a 20 74 75 79 61 5f 65 76 65 6e 74    _BLE: tuya_event
    0x8802100:   5f 73 65 6e 64 20 63 6f 6e 6e 65 63 74 20 68 61    _send connect ha
    0x8802110:   6e 64 6c 65 72 20 65 72 72 6f 72 00 5b 45 5d 20    ndler error.[E] 
    0x8802120:   54 55 59 41 5f 42 4c 45 3a 20 74 75 79 61 5f 65    TUYA_BLE: tuya_e
    0x8802130:   76 65 6e 74 5f 73 65 6e 64 20 64 69 73 63 6f 6e    vent_send discon
    0x8802140:   6e 65 63 74 20 68 61 6e 64 6c 65 72 20 65 72 72    nect handler err
    0x8802150:   6f 72 00 00 5b 44 5d 20 54 55 59 41 5f 42 4c 45    or..[D] TUYA_BLE
    0x8802160:   3a 20 64 65 76 69 63 65 5f 69 64 5f 32 30 20 20    : device_id_20  
    0x8802170:   5b 6c 65 6e 3d 25 64 5d 20 3a 00 00 00 00 00 00    [len=%d] :......
    0x8802180:   5b 44 5d 20 54 55 59 41 5f 42 4c 45 3a 20 64 65    [D] TUYA_BLE: de
    0x8802190:   76 69 63 65 5f 69 64 5f 31 36 20 20 5b 6c 65 6e    vice_id_16  [len
    0x88021a0:   3d 25 64 5d 20 3a 00 00 00 00 00 00 5b 44 5d 20    =%d] :......[D] 
    0x88021b0:   54 55 59 41 5f 42 4c 45 3a 20 64 65 76 69 63 65    TUYA_BLE: device
    0x88021c0:   5f 69 64 5f 32 30 20 20 5b 6c 65 6e 3d 25 64 5d    _id_20  [len=%d]
    0x88021d0:   20 3a 00 00 00 00 00 00 5b 49 5d 20 54 55 59 41     :......[I] TUYA
    0x88021e0:   5f 42 4c 45 3a 20 54 68 65 20 4d 41 43 20 61 64    _BLE: The MAC ad
    0x88021f0:   64 72 65 73 73 20 70 61 73 73 65 64 20 69 6e 20    dress passed in 
    0x8802200:   62 79 20 74 68 65 20 61 70 70 6c 69 63 61 74 69    by the applicati
    0x8802210:   6f 6e 20 5b 6c 65 6e 3d 25 64 5d 20 3a 00 00 00    on [len=%d] :...
    0x8802220:   00 00 00 00 5b 49 5d 20 54 55 59 41 5f 42 4c 45    ....[I] TUYA_BLE
    0x8802230:   3a 20 63 75 72 72 65 6e 74 20 64 65 76 69 63 65    : current device
    0x8802240:   20 4d 41 43 20 61 64 64 72 65 73 73 20 3a 20 20     MAC address :  
    0x8802250:   5b 6c 65 6e 3d 25 64 5d 20 3a 00 00 00 00 00 00    [len=%d] :......
    0x8802260:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 47 41    [E] TUYA_BLE: GA
    0x8802270:   50 20 41 44 44 52 20 53 45 54 20 66 61 69 6c 65    P ADDR SET faile
    0x8802280:   64 21 00 00 5b 49 5d 20 54 55 59 41 5f 42 4c 45    d!..[I] TUYA_BLE
    0x8802290:   3a 20 47 41 50 20 41 44 44 52 20 53 45 54 20 53    : GAP ADDR SET S
    0x88022a0:   55 43 43 45 53 53 45 44 21 00 00 00 5b 57 5d 20    UCCESSED!...[W] 
    0x88022b0:   54 55 59 41 5f 42 4c 45 3a 20 47 41 50 20 41 44    TUYA_BLE: GAP AD
    0x88022c0:   44 52 20 47 45 54 20 66 61 69 6c 65 64 21 00 00    DR GET failed!..
    0x88022d0:   5b 49 5d 20 54 55 59 41 5f 42 4c 45 3a 20 61 75    [I] TUYA_BLE: au
    0x88022e0:   74 68 20 73 65 74 74 69 6e 67 73 20 6d 61 63 20    th settings mac 
    0x88022f0:   5b 6c 65 6e 3d 25 64 5d 20 3a 00 00 00 00 00 00    [len=%d] :......
    0x8802300:   5b 49 5d 20 54 55 59 41 5f 42 4c 45 3a 20 70 72    [I] TUYA_BLE: pr
    0x8802310:   6f 64 75 63 74 5f 69 64 20 5b 6c 65 6e 3d 25 64    oduct_id [len=%d
    0x8802320:   5d 20 3a 00 00 00 00 00 5b 44 5d 20 54 55 59 41    ] :.....[D] TUYA
    0x8802330:   5f 42 4c 45 3a 20 64 65 76 69 63 65 5f 75 75 69    _BLE: device_uui
    0x8802340:   64 20 5b 6c 65 6e 3d 25 64 5d 20 3a 00 00 00 00    d [len=%d] :....
    0x8802350:   00 00 00 00 5b 44 5d 20 54 55 59 41 5f 42 4c 45    ....[D] TUYA_BLE
    0x8802360:   3a 20 64 65 76 69 63 65 5f 61 75 74 68 6b 65 79    : device_authkey
    0x8802370:   20 5b 6c 65 6e 3d 25 64 5d 20 3a 00 00 00 00 00     [len=%d] :.....
    0x8802380:   5b 49 5d 20 54 55 59 41 5f 42 4c 45 3a 20 62 6f    [I] TUYA_BLE: bo
    0x8802390:   6e 64 5f 66 6c 61 67 20 3d 20 25 64 00 00 00 00    nd_flag = %d....
    0x88023a0:   5b 49 5d 20 54 55 59 41 5f 42 4c 45 3a 20 74 75    [I] TUYA_BLE: tu
    0x88023b0:   79 61 20 62 6c 65 20 73 64 6b 20 76 65 72 73 69    ya ble sdk versi
    0x88023c0:   6f 6e 20 3a 20 31 2e 32 2e 34 00 00 5b 45 5d 20    on : 1.2.4..[E] 
    0x88023d0:   54 55 59 41 5f 42 4c 45 3a 20 62 6c 65 5f 64 61    TUYA_BLE: ble_da
    0x88023e0:   74 61 5f 75 6e 70 61 63 6b 20 74 6f 74 61 6c 20    ta_unpack total 
    0x88023f0:   73 69 7a 65 20 5b 25 64 20 5d 65 72 72 6f 72 2e    size [%d ]error.
    0x8802400:   00 00 00 00 5b 45 5d 20 54 55 59 41 5f 42 4c 45    ....[E] TUYA_BLE
    0x8802410:   3a 20 62 6c 65 5f 64 61 74 61 5f 75 6e 70 61 63    : ble_data_unpac
    0x8802420:   6b 20 6d 61 6c 6c 6f 63 20 66 61 69 6c 65 64 2e    k malloc failed.
    0x8802430:   00 00 00 00 5b 45 5d 20 54 55 59 41 5f 42 4c 45    ....[E] TUYA_BLE
    0x8802440:   3a 20 62 6c 65 5f 64 61 74 61 5f 75 6e 70 61 63    : ble_data_unpac
    0x8802450:   6b 20 65 72 72 6f 72 2e 00 00 00 00 5b 45 5d 20    k error.....[E] 
    0x8802460:   54 55 59 41 5f 42 4c 45 3a 20 62 6c 65 5f 64 61    TUYA_BLE: ble_da
    0x8802470:   74 61 5f 75 6e 70 61 63 6b 5b 25 64 5d 20 65 72    ta_unpack[%d] er
    0x8802480:   72 6f 72 3a 4d 54 50 5f 49 4e 56 41 4c 49 44 5f    ror:MTP_INVALID_
    0x8802490:   50 41 52 41 4d 00 00 00 5b 44 5d 20 54 55 59 41    PARAM...[D] TUYA
    0x88024a0:   5f 42 4c 45 3a 20 62 6c 65 5f 64 61 74 61 5f 75    _BLE: ble_data_u
    0x88024b0:   6e 70 61 63 6b 5b 25 64 5d 00 00 00 5b 44 5d 20    npack[%d]...[D] 
    0x88024c0:   54 55 59 41 5f 42 4c 45 3a 20 63 72 63 31 36 5f    TUYA_BLE: crc16_
    0x88024d0:   63 61 6c 5b 30 78 25 30 34 78 5d 00 5b 44 5d 20    cal[0x%04x].[D] 
    0x88024e0:   54 55 59 41 5f 42 4c 45 3a 20 63 72 63 31 36 5b    TUYA_BLE: crc16[
    0x88024f0:   30 78 25 30 34 78 5d 00 5b 45 5d 20 54 55 59 41    0x%04x].[E] TUYA
    0x8802500:   5f 42 4c 45 3a 20 61 69 72 5f 72 65 63 76 5f 70    _BLE: air_recv_p
    0x8802510:   61 63 6b 65 74 2e 72 65 63 76 5f 6c 65 6e 20 62    acket.recv_len b
    0x8802520:   69 67 67 65 72 20 74 68 61 6e 20 54 55 59 41 5f    igger than TUYA_
    0x8802530:   42 4c 45 5f 41 49 52 5f 46 52 41 4d 45 5f 4d 41    BLE_AIR_FRAME_MA
    0x8802540:   58 2e 00 00 5b 45 5d 20 54 55 59 41 5f 42 4c 45    X...[E] TUYA_BLE
    0x8802550:   3a 20 74 79 5f 62 6c 65 5f 72 78 5f 70 72 6f 63    : ty_ble_rx_proc
    0x8802560:   20 76 65 72 73 69 6f 6e 20 6e 6f 74 20 63 6f 6d     version not com
    0x8802570:   70 61 74 69 62 69 6c 69 74 79 21 00 5b 45 5d 20    patibility!.[E] 
    0x8802580:   54 55 59 41 5f 42 4c 45 3a 20 74 79 5f 62 6c 65    TUYA_BLE: ty_ble
    0x8802590:   5f 72 78 5f 70 72 6f 63 20 64 61 74 61 20 65 6e    _rx_proc data en
    0x88025a0:   63 72 79 70 74 69 6f 6e 20 6d 6f 64 65 20 65 72    cryption mode er
    0x88025b0:   72 6f 72 20 73 69 6e 63 65 20 62 6f 75 6e 64 5f    ror since bound_
    0x88025c0:   66 6c 61 67 20 3d 20 31 2e 00 00 00 5b 44 5d 20    flag = 1....[D] 
    0x88025d0:   54 55 59 41 5f 42 4c 45 3a 20 72 65 63 65 69 76    TUYA_BLE: receiv
    0x88025e0:   65 64 20 65 6e 63 72 79 20 64 61 74 61 20 5b 6c    ed encry data [l
    0x88025f0:   65 6e 3d 25 64 5d 20 3a 00 00 00 00 00 00 00 00    en=%d] :........
    0x8802600:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 61 69    [E] TUYA_BLE: ai
    0x8802610:   72 5f 72 65 63 76 5f 70 61 63 6b 65 74 2e 64 65    r_recv_packet.de
    0x8802620:   5f 65 6e 63 72 79 70 74 5f 62 75 66 20 6d 61 6c    _encrypt_buf mal
    0x8802630:   6c 6f 63 20 66 61 69 6c 65 64 2e 00 5b 45 5d 20    loc failed..[E] 
    0x8802640:   54 55 59 41 5f 42 4c 45 3a 20 62 6c 65 20 72 65    TUYA_BLE: ble re
    0x8802650:   63 65 69 76 65 20 64 61 74 61 20 64 65 63 72 79    ceive data decry
    0x8802660:   70 74 69 6f 6e 20 65 72 72 6f 72 20 63 6f 64 65    ption error code
    0x8802670:   20 3d 20 25 64 00 00 00 5b 44 5d 20 54 55 59 41     = %d...[D] TUYA
    0x8802680:   5f 42 4c 45 3a 20 64 65 63 72 79 70 65 64 20 64    _BLE: decryped d
    0x8802690:   61 74 61 20 5b 6c 65 6e 3d 25 64 5d 20 3a 00 00    ata [len=%d] :..
    0x88026a0:   00 00 00 00 5b 45 5d 20 54 55 59 41 5f 42 4c 45    ....[E] TUYA_BLE
    0x88026b0:   3a 20 62 6c 65 20 72 65 63 65 69 76 65 20 64 61    : ble receive da
    0x88026c0:   74 61 20 63 72 63 20 63 68 65 63 6b 20 65 72 72    ta crc check err
    0x88026d0:   6f 72 21 00 5b 45 5d 20 54 55 59 41 5f 42 4c 45    or!.[E] TUYA_BLE
    0x88026e0:   3a 20 62 6c 65 20 72 65 63 65 69 76 65 20 53 4e    : ble receive SN
    0x88026f0:   20 65 72 72 6f 72 21 00 5b 45 5d 20 54 55 59 41     error!.[E] TUYA
    0x8802700:   5f 42 4c 45 3a 20 62 6c 65 20 72 65 63 65 69 76    _BLE: ble receiv
    0x8802710:   65 20 63 6d 64 20 65 72 72 6f 72 20 6f 6e 20 63    e cmd error on c
    0x8802720:   75 72 72 65 6e 74 20 62 6f 6e 64 20 73 74 61 74    urrent bond stat
    0x8802730:   65 21 00 00 5b 45 5d 20 54 55 59 41 5f 42 4c 45    e!..[E] TUYA_BLE
    0x8802740:   3a 20 62 6c 65 20 72 65 63 65 69 76 65 20 63 6d    : ble receive cm
    0x8802750:   64 20 65 72 72 6f 72 20 6f 6e 20 6f 74 61 20 73    d error on ota s
    0x8802760:   74 61 74 65 21 00 00 00 5b 45 5d 20 54 55 59 41    tate!...[E] TUYA
    0x8802770:   5f 42 4c 45 3a 20 74 79 5f 62 6c 65 5f 72 78 5f    _BLE: ty_ble_rx_
    0x8802780:   70 72 6f 63 20 6e 6f 20 6d 65 6d 2e 00 00 00 00    proc no mem.....
    0x8802790:   5b 44 5d 20 54 55 59 41 5f 42 4c 45 3a 20 42 4c    [D] TUYA_BLE: BL
    0x88027a0:   45 20 45 56 45 4e 54 20 53 45 4e 44 2d 43 4d 44    E EVENT SEND-CMD
    0x88027b0:   3a 30 78 25 30 32 78 20 2d 20 4c 45 4e 3a 30 78    :0x%02x - LEN:0x
    0x88027c0:   25 30 32 78 00 00 00 00 5b 45 5d 20 54 55 59 41    %02x....[E] TUYA
    0x88027d0:   5f 42 4c 45 3a 20 62 6c 65 20 65 76 65 6e 74 20    _BLE: ble event 
    0x88027e0:   73 65 6e 64 20 66 61 69 6c 21 00 00 5b 44 5d 20    send fail!..[D] 
    0x88027f0:   54 55 59 41 5f 42 4c 45 3a 20 67 65 74 20 64 65    TUYA_BLE: get de
    0x8802800:   76 69 63 65 20 69 6e 66 6f 72 2d 25 64 00 00 00    vice infor-%d...
    0x8802810:   5b 49 5d 20 54 55 59 41 5f 42 4c 45 3a 20 62 6c    [I] TUYA_BLE: bl
    0x8802820:   65 20 61 64 76 20 64 61 74 61 20 75 70 64 61 74    e adv data updat
    0x8802830:   65 2c 62 65 63 61 75 73 65 20 74 68 65 20 6c 61    e,because the la
    0x8802840:   73 74 20 62 72 6f 61 64 63 61 73 74 20 64 61 74    st broadcast dat
    0x8802850:   61 20 63 6f 6e 6e 65 63 74 69 6f 6e 20 72 65 71    a connection req
    0x8802860:   75 65 73 74 20 66 6c 61 67 20 77 61 73 20 73 65    uest flag was se
    0x8802870:   74 21 00 00 5b 49 5d 20 54 55 59 41 5f 42 4c 45    t!..[I] TUYA_BLE
    0x8802880:   3a 20 50 41 49 52 5f 52 45 51 20 61 6c 72 65 61    : PAIR_REQ alrea
    0x8802890:   64 79 20 62 6f 75 6e 64 21 00 00 00 5b 49 5d 20    dy bound!...[I] 
    0x88028a0:   54 55 59 41 5f 42 4c 45 3a 20 50 41 49 52 5f 52    TUYA_BLE: PAIR_R
    0x88028b0:   45 51 20 6f 6b 2d 25 64 00 00 00 00 5b 45 5d 20    EQ ok-%d....[E] 
    0x88028c0:   54 55 59 41 5f 42 4c 45 3a 20 74 75 79 61 20 62    TUYA_BLE: tuya b
    0x88028d0:   6c 65 20 73 65 6e 64 20 63 62 20 65 76 65 6e 74    le send cb event
    0x88028e0:   20 66 61 69 6c 65 64 2e 00 00 00 00 5b 44 5d 20     failed.....[D] 
    0x88028f0:   54 55 59 41 5f 42 4c 45 3a 20 74 75 79 61 20 62    TUYA_BLE: tuya b
    0x8802900:   6c 65 20 73 65 6e 64 20 63 62 20 65 76 65 6e 74    le send cb event
    0x8802910:   20 73 75 63 63 65 65 64 2e 00 00 00 5b 45 5d 20     succeed....[E] 
    0x8802920:   54 55 59 41 5f 42 4c 45 3a 20 74 75 79 61 20 62    TUYA_BLE: tuya b
    0x8802930:   6c 65 20 73 65 6e 64 20 63 62 20 65 76 65 6e 74    le send cb event
    0x8802940:   20 66 61 69 6c 65 64 2e 00 00 00 00 5b 49 5d 20     failed.....[I] 
    0x8802950:   54 55 59 41 5f 42 4c 45 3a 20 74 75 79 61 20 62    TUYA_BLE: tuya b
    0x8802960:   6c 65 20 73 65 6e 64 20 63 62 20 65 76 65 6e 74    le send cb event
    0x8802970:   20 73 75 63 63 65 65 64 2e 00 00 00 5b 45 5d 20     succeed....[E] 
    0x8802980:   54 55 59 41 5f 42 4c 45 3a 20 50 41 49 52 5f 52    TUYA_BLE: PAIR_R
    0x8802990:   45 51 20 64 65 76 69 63 65 20 69 64 20 6e 6f 74    EQ device id not
    0x88029a0:   20 6d 61 74 63 68 21 00 5b 49 5d 20 54 55 59 41     match!.[I] TUYA
    0x88029b0:   5f 42 4c 45 3a 20 73 65 6e 64 20 46 52 4d 5f 47    _BLE: send FRM_G
    0x88029c0:   45 54 5f 55 4e 49 58 5f 54 49 4d 45 5f 43 48 41    ET_UNIX_TIME_CHA
    0x88029d0:   52 5f 4d 53 5f 52 45 51 20 63 6d 64 20 74 6f 20    R_MS_REQ cmd to 
    0x88029e0:   61 70 70 2e 0a 00 00 00 5b 45 5d 20 54 55 59 41    app.....[E] TUYA
    0x88029f0:   5f 42 4c 45 3a 20 62 6c 65 5f 63 62 5f 65 76 74    _BLE: ble_cb_evt
    0x8802a00:   5f 62 75 66 66 65 72 20 6d 61 6c 6c 6f 63 20 66    _buffer malloc f
    0x8802a10:   61 69 6c 65 64 2e 00 00 5b 45 5d 20 54 55 59 41    ailed...[E] TUYA
    0x8802a20:   5f 42 4c 45 3a 20 74 75 79 61 20 62 6c 65 20 73    _BLE: tuya ble s
    0x8802a30:   65 6e 64 20 63 62 20 65 76 65 6e 74 20 66 61 69    end cb event fai
    0x8802a40:   6c 65 64 2e 00 00 00 00 5b 45 5d 20 54 55 59 41    led.....[E] TUYA
    0x8802a50:   5f 42 4c 45 3a 20 62 6c 65 5f 63 62 5f 65 76 74    _BLE: ble_cb_evt
    0x8802a60:   5f 62 75 66 66 65 72 20 6d 61 6c 6c 6f 63 20 66    _buffer malloc f
    0x8802a70:   61 69 6c 65 64 2e 00 00 5b 45 5d 20 54 55 59 41    ailed...[E] TUYA
    0x8802a80:   5f 42 4c 45 3a 20 74 75 79 61 20 62 6c 65 20 73    _BLE: tuya ble s
    0x8802a90:   65 6e 64 20 63 62 20 65 76 65 6e 74 20 66 61 69    end cb event fai
    0x8802aa0:   6c 65 64 2e 00 00 00 00 5b 45 5d 20 54 55 59 41    led.....[E] TUYA
    0x8802ab0:   5f 42 4c 45 3a 20 62 6c 65 5f 63 62 5f 65 76 74    _BLE: ble_cb_evt
    0x8802ac0:   5f 62 75 66 66 65 72 20 6d 61 6c 6c 6f 63 20 66    _buffer malloc f
    0x8802ad0:   61 69 6c 65 64 2e 00 00 5b 45 5d 20 54 55 59 41    ailed...[E] TUYA
    0x8802ae0:   5f 42 4c 45 3a 20 74 75 79 61 5f 62 6c 65 5f 68    _BLE: tuya_ble_h
    0x8802af0:   61 6e 64 6c 65 5f 6f 74 61 5f 72 65 71 2d 74 75    andle_ota_req-tu
    0x8802b00:   79 61 20 62 6c 65 20 73 65 6e 64 20 63 62 20 65    ya ble send cb e
    0x8802b10:   76 65 6e 74 20 66 61 69 6c 65 64 2e 00 00 00 00    vent failed.....
    0x8802b20:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 72 65    [E] TUYA_BLE: re
    0x8802b30:   63 65 69 76 65 64 20 75 6e 69 78 20 74 69 6d 65    ceived unix time
    0x8802b40:   20 63 68 61 72 20 63 6d 64 20 64 61 74 61 20 6c     char cmd data l
    0x8802b50:   65 6e 67 74 68 20 65 72 72 6f 72 21 00 00 00 00    ength error!....
    0x8802b60:   5b 49 5d 20 54 55 59 41 5f 42 4c 45 3a 20 72 65    [I] TUYA_BLE: re
    0x8802b70:   63 65 69 76 65 64 20 75 6e 69 78 20 74 69 6d 65    ceived unix time
    0x8802b80:   5f 7a 6f 6e 65 20 3d 20 25 64 0a 00 5b 45 5d 20    _zone = %d..[E] 
    0x8802b90:   54 55 59 41 5f 42 4c 45 3a 20 74 75 79 61 5f 62    TUYA_BLE: tuya_b
    0x8802ba0:   6c 65 5f 68 61 6e 64 6c 65 5f 75 6e 69 78 5f 74    le_handle_unix_t
    0x8802bb0:   69 6d 65 5f 63 68 61 72 5f 6d 73 5f 72 65 73 70    ime_char_ms_resp
    0x8802bc0:   2d 74 75 79 61 20 62 6c 65 20 73 65 6e 64 20 63    -tuya ble send c
    0x8802bd0:   62 20 65 76 65 6e 74 20 66 61 69 6c 65 64 2e 00    b event failed..
    0x8802be0:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 72 65    [E] TUYA_BLE: re
    0x8802bf0:   63 65 69 76 65 64 20 75 6e 69 78 20 74 69 6d 65    ceived unix time
    0x8802c00:   20 64 61 74 65 20 63 6d 64 20 64 61 74 61 20 6c     date cmd data l
    0x8802c10:   65 6e 67 74 68 20 65 72 72 6f 72 21 00 00 00 00    ength error!....
    0x8802c20:   5b 49 5d 20 54 55 59 41 5f 42 4c 45 3a 20 72 65    [I] TUYA_BLE: re
    0x8802c30:   63 65 69 76 65 64 20 75 6e 69 78 20 74 69 6d 65    ceived unix time
    0x8802c40:   5f 7a 6f 6e 65 20 3d 20 25 64 00 00 5b 45 5d 20    _zone = %d..[E] 
    0x8802c50:   54 55 59 41 5f 42 4c 45 3a 20 74 75 79 61 5f 62    TUYA_BLE: tuya_b
    0x8802c60:   6c 65 5f 68 61 6e 64 6c 65 5f 75 6e 69 78 5f 74    le_handle_unix_t
    0x8802c70:   69 6d 65 5f 64 61 74 65 5f 72 65 73 70 2d 74 75    ime_date_resp-tu
    0x8802c80:   79 61 20 62 6c 65 20 73 65 6e 64 20 63 62 20 65    ya ble send cb e
    0x8802c90:   76 65 6e 74 20 66 61 69 6c 65 64 2e 00 00 00 00    vent failed.....
    0x8802ca0:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 63 6d    [E] TUYA_BLE: cm
    0x8802cb0:   64 20 64 70 20 77 72 69 74 65 20 72 65 63 65 69    d dp write recei
    0x8802cc0:   76 65 20 64 61 74 61 20 6c 65 6e 20 3d 3d 20 25    ve data len == %
    0x8802cd0:   64 00 00 00 5b 44 5d 20 54 55 59 41 5f 42 4c 45    d...[D] TUYA_BLE
    0x8802ce0:   3a 20 63 6d 64 5f 64 70 5f 77 72 69 74 65 20 64    : cmd_dp_write d
    0x8802cf0:   61 74 61 20 3a 20 20 5b 6c 65 6e 3d 25 64 5d 20    ata :  [len=%d] 
    0x8802d00:   3a 00 00 00 00 00 00 00 5b 45 5d 20 54 55 59 41    :.......[E] TUYA
    0x8802d10:   5f 42 4c 45 3a 20 63 6d 64 20 72 78 20 66 61 69    _BLE: cmd rx fai
    0x8802d20:   6c 2d 25 64 00 00 00 00 5b 45 5d 20 54 55 59 41    l-%d....[E] TUYA
    0x8802d30:   5f 42 4c 45 3a 20 62 6c 65 5f 63 62 5f 65 76 74    _BLE: ble_cb_evt
    0x8802d40:   5f 62 75 66 66 65 72 20 6d 61 6c 6c 6f 63 20 66    _buffer malloc f
    0x8802d50:   61 69 6c 65 64 2e 00 00 5b 45 5d 20 54 55 59 41    ailed...[E] TUYA
    0x8802d60:   5f 42 4c 45 3a 20 74 75 79 61 5f 62 6c 65 5f 68    _BLE: tuya_ble_h
    0x8802d70:   61 6e 64 6c 65 5f 64 70 5f 77 72 69 74 65 5f 72    andle_dp_write_r
    0x8802d80:   65 71 2d 74 75 79 61 20 62 6c 65 20 73 65 6e 64    eq-tuya ble send
    0x8802d90:   20 63 62 20 65 76 65 6e 74 20 66 61 69 6c 65 64     cb event failed
    0x8802da0:   2e 00 00 00 5b 45 5d 20 54 55 59 41 5f 42 4c 45    ....[E] TUYA_BLE
    0x8802db0:   3a 20 62 6c 65 5f 63 62 5f 65 76 74 5f 62 75 66    : ble_cb_evt_buf
    0x8802dc0:   66 65 72 20 6d 61 6c 6c 6f 63 20 66 61 69 6c 65    fer malloc faile
    0x8802dd0:   64 2e 00 00 5b 45 5d 20 54 55 59 41 5f 42 4c 45    d...[E] TUYA_BLE
    0x8802de0:   3a 20 74 75 79 61 5f 62 6c 65 5f 68 61 6e 64 6c    : tuya_ble_handl
    0x8802df0:   65 5f 64 70 5f 71 75 65 72 79 5f 72 65 71 2d 74    e_dp_query_req-t
    0x8802e00:   75 79 61 20 62 6c 65 20 73 65 6e 64 20 63 62 20    uya ble send cb 
    0x8802e10:   65 76 65 6e 74 20 66 61 69 6c 65 64 2e 00 00 00    event failed....
    0x8802e20:   5b 49 5d 20 54 55 59 41 5f 42 4c 45 3a 20 74 75    [I] TUYA_BLE: tu
    0x8802e30:   79 61 5f 62 6c 65 5f 64 65 76 69 63 65 5f 75 6e    ya_ble_device_un
    0x8802e40:   62 6f 6e 64 20 63 75 72 72 65 6e 74 20 62 6f 75    bond current bou
    0x8802e50:   6e 64 20 66 6c 61 67 20 3d 20 25 64 00 00 00 00    nd flag = %d....
    0x8802e60:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 74 75    [E] TUYA_BLE: tu
    0x8802e70:   79 61 5f 62 6c 65 5f 68 61 6e 64 6c 65 5f 75 6e    ya_ble_handle_un
    0x8802e80:   62 6f 6e 64 5f 72 65 71 2d 74 75 79 61 20 62 6c    bond_req-tuya bl
    0x8802e90:   65 20 73 65 6e 64 20 63 62 20 65 76 65 6e 74 20    e send cb event 
    0x8802ea0:   28 75 6e 62 6f 75 6e 64 20 72 65 71 29 20 66 61    (unbound req) fa
    0x8802eb0:   69 6c 65 64 2e 00 00 00 5b 45 5d 20 54 55 59 41    iled....[E] TUYA
    0x8802ec0:   5f 42 4c 45 3a 20 74 75 79 61 5f 62 6c 65 5f 68    _BLE: tuya_ble_h
    0x8802ed0:   61 6e 64 6c 65 5f 75 6e 62 6f 6e 64 5f 72 65 71    andle_unbond_req
    0x8802ee0:   2d 74 75 79 61 20 62 6c 65 20 73 65 6e 64 20 63    -tuya ble send c
    0x8802ef0:   62 20 65 76 65 6e 74 20 28 63 6f 6e 6e 65 63 74    b event (connect
    0x8802f00:   20 73 74 61 74 75 73 20 75 70 64 61 74 65 29 20     status update) 
    0x8802f10:   66 61 69 6c 65 64 2e 00 5b 45 5d 20 54 55 59 41    failed..[E] TUYA
    0x8802f20:   5f 42 4c 45 3a 20 74 75 79 61 5f 62 6c 65 5f 68    _BLE: tuya_ble_h
    0x8802f30:   61 6e 64 6c 65 5f 61 6e 6f 6d 61 6c 79 5f 75 6e    andle_anomaly_un
    0x8802f40:   62 6f 6e 64 5f 72 65 71 2d 74 75 79 61 20 62 6c    bond_req-tuya bl
    0x8802f50:   65 20 73 65 6e 64 20 63 62 20 65 76 65 6e 74 20    e send cb event 
    0x8802f60:   28 75 6e 62 6f 75 6e 64 20 72 65 71 29 20 66 61    (unbound req) fa
    0x8802f70:   69 6c 65 64 2e 00 00 00 5b 45 5d 20 54 55 59 41    iled....[E] TUYA
    0x8802f80:   5f 42 4c 45 3a 20 74 75 79 61 5f 62 6c 65 5f 68    _BLE: tuya_ble_h
    0x8802f90:   61 6e 64 6c 65 5f 61 6e 6f 6d 61 6c 79 5f 75 6e    andle_anomaly_un
    0x8802fa0:   62 6f 6e 64 5f 72 65 71 2d 74 75 79 61 20 62 6c    bond_req-tuya bl
    0x8802fb0:   65 20 73 65 6e 64 20 63 62 20 65 76 65 6e 74 20    e send cb event 
    0x8802fc0:   28 63 6f 6e 6e 65 63 74 20 73 74 61 74 75 73 20    (connect status 
    0x8802fd0:   75 70 64 61 74 65 29 20 66 61 69 6c 65 64 2e 00    update) failed..
    0x8802fe0:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 74 75    [E] TUYA_BLE: tu
    0x8802ff0:   79 61 5f 62 6c 65 5f 68 61 6e 64 6c 65 5f 64 65    ya_ble_handle_de
    0x8803000:   76 69 63 65 5f 72 65 73 65 74 5f 72 65 71 2d 74    vice_reset_req-t
    0x8803010:   75 79 61 20 62 6c 65 20 73 65 6e 64 20 63 62 20    uya ble send cb 
    0x8803020:   65 76 65 6e 74 20 64 65 76 69 63 65 20 72 65 73    event device res
    0x8803030:   65 74 20 72 65 71 20 66 61 69 6c 65 64 2e 00 00    et req failed...
    0x8803040:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 74 75    [E] TUYA_BLE: tu
    0x8803050:   79 61 5f 62 6c 65 5f 68 61 6e 64 6c 65 5f 64 65    ya_ble_handle_de
    0x8803060:   76 69 63 65 5f 72 65 73 65 74 5f 72 65 71 2d 74    vice_reset_req-t
    0x8803070:   75 79 61 20 62 6c 65 20 73 65 6e 64 20 63 62 20    uya ble send cb 
    0x8803080:   65 76 65 6e 74 20 28 63 6f 6e 6e 65 63 74 20 73    event (connect s
    0x8803090:   74 61 74 75 73 20 75 70 64 61 74 65 29 20 66 61    tatus update) fa
    0x88030a0:   69 6c 65 64 2e 00 00 00 5b 45 5d 20 54 55 59 41    iled....[E] TUYA
    0x88030b0:   5f 42 4c 45 3a 20 74 75 79 61 5f 62 6c 65 5f 68    _BLE: tuya_ble_h
    0x88030c0:   61 6e 64 6c 65 5f 64 70 5f 64 61 74 61 5f 72 65    andle_dp_data_re
    0x88030d0:   70 6f 72 74 5f 72 65 73 2d 74 75 79 61 20 62 6c    port_res-tuya bl
    0x88030e0:   65 20 73 65 6e 64 20 63 62 20 65 76 65 6e 74 20    e send cb event 
    0x88030f0:   66 61 69 6c 65 64 2e 00 5b 45 5d 20 54 55 59 41    failed..[E] TUYA
    0x8803100:   5f 42 4c 45 3a 20 74 75 79 61 5f 62 6c 65 5f 68    _BLE: tuya_ble_h
    0x8803110:   61 6e 64 6c 65 5f 64 70 5f 64 61 74 61 5f 72 65    andle_dp_data_re
    0x8803120:   70 6f 72 74 5f 72 65 73 2d 74 75 79 61 20 62 6c    port_res-tuya bl
    0x8803130:   65 20 73 65 6e 64 20 63 62 20 65 76 65 6e 74 20    e send cb event 
    0x8803140:   66 61 69 6c 65 64 2e 00 5b 45 5d 20 54 55 59 41    failed..[E] TUYA
    0x8803150:   5f 42 4c 45 3a 20 74 75 79 61 5f 62 6c 65 5f 68    _BLE: tuya_ble_h
    0x8803160:   61 6e 64 6c 65 5f 64 70 5f 64 61 74 61 5f 77 69    andle_dp_data_wi
    0x8803170:   74 68 5f 66 6c 61 67 5f 72 65 70 6f 72 74 5f 72    th_flag_report_r
    0x8803180:   65 73 2d 20 69 6e 76 61 6c 69 64 20 64 61 74 61    es- invalid data
    0x8803190:   20 6c 65 6e 20 72 65 63 65 69 76 65 64 2e 00 00     len received...
    0x88031a0:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 74 75    [E] TUYA_BLE: tu
    0x88031b0:   79 61 5f 62 6c 65 5f 68 61 6e 64 6c 65 5f 64 70    ya_ble_handle_dp
    0x88031c0:   5f 64 61 74 61 5f 77 69 74 68 5f 66 6c 61 67 5f    _data_with_flag_
    0x88031d0:   72 65 70 6f 72 74 5f 72 65 73 2d 74 75 79 61 20    report_res-tuya 
    0x88031e0:   62 6c 65 20 73 65 6e 64 20 63 62 20 65 76 65 6e    ble send cb even
    0x88031f0:   74 20 66 61 69 6c 65 64 2e 00 00 00 5b 45 5d 20    t failed....[E] 
    0x8803200:   54 55 59 41 5f 42 4c 45 3a 20 74 75 79 61 5f 62    TUYA_BLE: tuya_b
    0x8803210:   6c 65 5f 68 61 6e 64 6c 65 5f 64 70 5f 64 61 74    le_handle_dp_dat
    0x8803220:   61 5f 77 69 74 68 5f 66 6c 61 67 5f 61 6e 64 5f    a_with_flag_and_
    0x8803230:   74 69 6d 65 5f 72 65 70 6f 72 74 5f 72 65 73 2d    time_report_res-
    0x8803240:   20 69 6e 76 61 6c 69 64 20 64 61 74 61 20 6c 65     invalid data le
    0x8803250:   6e 20 72 65 63 65 69 76 65 64 2e 00 5b 45 5d 20    n received..[E] 
    0x8803260:   54 55 59 41 5f 42 4c 45 3a 20 74 75 79 61 5f 62    TUYA_BLE: tuya_b
    0x8803270:   6c 65 5f 68 61 6e 64 6c 65 5f 64 70 5f 64 61 74    le_handle_dp_dat
    0x8803280:   61 5f 77 69 74 68 5f 66 6c 61 67 5f 61 6e 64 5f    a_with_flag_and_
    0x8803290:   74 69 6d 65 5f 72 65 70 6f 72 74 5f 72 65 73 2d    time_report_res-
    0x88032a0:   74 75 79 61 20 62 6c 65 20 73 65 6e 64 20 63 62    tuya ble send cb
    0x88032b0:   20 65 76 65 6e 74 20 66 61 69 6c 65 64 2e 00 00     event failed...
    0x88032c0:   5b 49 5d 20 54 55 59 41 5f 42 4c 45 3a 20 52 45    [I] TUYA_BLE: RE
    0x88032d0:   43 45 49 56 45 44 20 4f 54 41 20 43 4d 44 3a 30    CEIVED OTA CMD:0
    0x88032e0:   78 25 30 32 78 20 44 41 54 41 20 4c 45 4e 3a 30    x%02x DATA LEN:0
    0x88032f0:   78 25 30 32 78 00 00 00 5b 49 5d 20 54 55 59 41    x%02x...[I] TUYA
    0x8803300:   5f 42 4c 45 3a 20 52 45 43 45 49 56 45 44 20 46    _BLE: RECEIVED F
    0x8803310:   52 4d 5f 55 4e 42 4f 4e 44 49 4e 47 5f 52 45 51    RM_UNBONDING_REQ
    0x8803320:   00 00 00 00 5b 49 5d 20 54 55 59 41 5f 42 4c 45    ....[I] TUYA_BLE
    0x8803330:   3a 20 52 45 43 45 49 56 45 44 20 46 52 4d 5f 41    : RECEIVED FRM_A
    0x8803340:   4e 4f 4d 41 4c 59 5f 55 4e 42 4f 4e 44 49 4e 47    NOMALY_UNBONDING
    0x8803350:   5f 52 45 51 00 00 00 00 5b 49 5d 20 54 55 59 41    _REQ....[I] TUYA
    0x8803360:   5f 42 4c 45 3a 20 52 45 43 45 49 56 45 44 20 46    _BLE: RECEIVED F
    0x8803370:   52 4d 5f 44 45 56 49 43 45 5f 52 45 53 45 54 5f    RM_DEVICE_RESET_
    0x8803380:   52 45 51 00 5b 57 5d 20 54 55 59 41 5f 42 4c 45    REQ.[W] TUYA_BLE
    0x8803390:   3a 20 52 45 43 45 49 56 45 44 20 55 4e 4b 4e 4f    : RECEIVED UNKNO
    0x88033a0:   57 4e 20 42 4c 45 20 45 56 54 20 43 4d 44 2d 30    WN BLE EVT CMD-0
    0x88033b0:   78 25 30 34 78 00 00 00 5b 45 5d 20 54 55 59 41    x%04x...[E] TUYA
    0x88033c0:   5f 42 4c 45 3a 20 74 75 79 61 20 62 6c 65 20 63    _BLE: tuya ble c
    0x88033d0:   6f 6d 6d 44 61 74 61 5f 73 65 6e 64 20 66 61 69    ommData_send fai
    0x88033e0:   6c 65 64 2c 62 65 63 61 75 73 65 20 62 6c 65 20    led,because ble 
    0x88033f0:   6e 6f 74 20 69 6e 20 63 6f 6e 6e 65 63 74 20 73    not in connect s
    0x8803400:   74 61 74 75 73 2e 00 00 5b 45 5d 20 54 55 59 41    tatus...[E] TUYA
    0x8803410:   5f 42 4c 45 3a 20 54 68 65 20 6c 65 6e 67 74 68    _BLE: The length
    0x8803420:   20 6f 66 20 74 68 65 20 73 65 6e 64 20 74 6f 20     of the send to 
    0x8803430:   62 6c 65 20 65 78 63 65 65 64 73 20 74 68 65 20    ble exceeds the 
    0x8803440:   6d 61 78 69 6d 75 6d 20 6c 65 6e 67 74 68 2e 00    maximum length..
    0x8803450:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 61 69    [E] TUYA_BLE: ai
    0x8803460:   72 5f 73 65 6e 64 5f 70 61 63 6b 65 74 2e 73 65    r_send_packet.se
    0x8803470:   6e 64 5f 64 61 74 61 20 6d 61 6c 6c 6f 63 20 66    nd_data malloc f
    0x8803480:   61 69 6c 65 64 20 72 65 74 75 72 6e 20 33 2e 00    ailed return 3..
    0x8803490:   5b 44 5d 20 54 55 59 41 5f 42 4c 45 3a 20 62 6c    [D] TUYA_BLE: bl
    0x88034a0:   65 5f 63 6f 6d 6d 44 61 74 61 5f 73 65 6e 64 20    e_commData_send 
    0x88034b0:   70 6c 61 69 6e 20 64 61 74 61 20 5b 6c 65 6e 3d    plain data [len=
    0x88034c0:   25 64 5d 20 3a 00 00 00 00 00 00 00 5b 45 5d 20    %d] :.......[E] 
    0x88034d0:   54 55 59 41 5f 42 4c 45 3a 20 61 69 72 5f 73 65    TUYA_BLE: air_se
    0x88034e0:   6e 64 5f 70 61 63 6b 65 74 2e 65 6e 63 72 79 70    nd_packet.encryp
    0x88034f0:   74 5f 64 61 74 61 5f 62 75 66 20 6d 61 6c 6c 6f    t_data_buf mallo
    0x8803500:   63 20 66 61 69 6c 65 64 2e 00 00 00 5b 45 5d 20    c failed....[E] 
    0x8803510:   54 55 59 41 5f 42 4c 45 3a 20 62 6c 65 5f 63 6f    TUYA_BLE: ble_co
    0x8803520:   6d 6d 44 61 74 61 5f 73 65 6e 64 20 65 6e 63 72    mmData_send encr
    0x8803530:   79 65 64 20 65 72 72 6f 72 2e 00 00 5b 44 5d 20    yed error...[D] 
    0x8803540:   54 55 59 41 5f 42 4c 45 3a 20 62 6c 65 5f 63 6f    TUYA_BLE: ble_co
    0x8803550:   6d 6d 44 61 74 61 5f 73 65 6e 64 20 65 6e 63 72    mmData_send encr
    0x8803560:   79 70 65 64 20 64 61 74 61 20 5b 6c 65 6e 3d 25    yped data [len=%
    0x8803570:   64 5d 20 3a 00 00 00 00 00 00 00 00 5b 45 5d 20    d] :........[E] 
    0x8803580:   54 55 59 41 5f 42 4c 45 3a 20 62 6c 65 5f 63 6f    TUYA_BLE: ble_co
    0x8803590:   6d 6d 44 61 74 61 5f 73 65 6e 64 20 65 6e 63 72    mmData_send encr
    0x88035a0:   79 65 64 20 66 61 69 6c 2e 00 00 00 5b 49 5d 20    yed fail....[I] 
    0x88035b0:   54 55 59 41 5f 42 4c 45 3a 20 62 6c 65 5f 63 6f    TUYA_BLE: ble_co
    0x88035c0:   6d 6d 44 61 74 61 5f 73 65 6e 64 20 6c 65 6e 20    mmData_send len 
    0x88035d0:   3d 20 25 64 20 2c 20 70 61 63 6b 61 67 65 5f 6e    = %d , package_n
    0x88035e0:   75 6d 62 65 72 20 3d 20 25 64 20 2c 20 70 72 6f    umber = %d , pro
    0x88035f0:   74 6f 63 6f 6c 20 76 65 72 73 69 6f 6e 20 3a 20    tocol version : 
    0x8803600:   30 78 25 30 32 78 20 2c 20 65 72 72 6f 72 20 63    0x%02x , error c
    0x8803610:   6f 64 65 20 3a 20 30 78 25 30 32 78 00 00 00 00    ode : 0x%02x....
    0x8803620:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 74 75    [E] TUYA_BLE: tu
    0x8803630:   79 61 5f 62 6c 65 5f 68 61 6e 64 6c 65 5f 64 70    ya_ble_handle_dp
    0x8803640:   5f 64 61 74 61 5f 77 69 74 68 5f 74 69 6d 65 5f    _data_with_time_
    0x8803650:   72 65 70 6f 72 74 65 64 5f 65 76 74 20 6d 61 6c    reported_evt mal
    0x8803660:   6c 6f 63 20 66 61 69 6c 65 64 2e 00 5b 45 5d 20    loc failed..[E] 
    0x8803670:   54 55 59 41 5f 42 4c 45 3a 20 74 75 79 61 5f 62    TUYA_BLE: tuya_b
    0x8803680:   6c 65 5f 68 61 6e 64 6c 65 5f 64 70 5f 64 61 74    le_handle_dp_dat
    0x8803690:   61 5f 77 69 74 68 5f 66 6c 61 67 5f 61 6e 64 5f    a_with_flag_and_
    0x88036a0:   74 69 6d 65 5f 72 65 70 6f 72 74 65 64 5f 65 76    time_reported_ev
    0x88036b0:   74 20 6d 61 6c 6c 6f 63 20 66 61 69 6c 65 64 2e    t malloc failed.
    0x88036c0:   00 00 00 00 5b 45 5d 20 54 55 59 41 5f 42 4c 45    ....[E] TUYA_BLE
    0x88036d0:   3a 20 74 75 79 61 5f 62 6c 65 5f 68 61 6e 64 6c    : tuya_ble_handl
    0x88036e0:   65 5f 64 70 5f 64 61 74 61 5f 77 69 74 68 5f 74    e_dp_data_with_t
    0x88036f0:   69 6d 65 5f 73 74 72 69 6e 67 5f 72 65 70 6f 72    ime_string_repor
    0x8803700:   74 65 64 5f 65 76 74 20 6d 61 6c 6c 6f 63 20 66    ted_evt malloc f
    0x8803710:   61 69 6c 65 64 2e 00 00 5b 45 5d 20 54 55 59 41    ailed...[E] TUYA
    0x8803720:   5f 42 4c 45 3a 20 74 75 79 61 5f 62 6c 65 5f 68    _BLE: tuya_ble_h
    0x8803730:   61 6e 64 6c 65 5f 64 70 5f 64 61 74 61 5f 77 69    andle_dp_data_wi
    0x8803740:   74 68 5f 66 6c 61 67 5f 61 6e 64 5f 74 69 6d 65    th_flag_and_time
    0x8803750:   5f 73 74 72 69 6e 67 5f 72 65 70 6f 72 74 65 64    _string_reported
    0x8803760:   5f 65 76 74 20 6d 61 6c 6c 6f 63 20 66 61 69 6c    _evt malloc fail
    0x8803770:   65 64 2e 00 5b 45 5d 20 54 55 59 41 5f 42 4c 45    ed..[E] TUYA_BLE
    0x8803780:   3a 20 74 75 79 61 5f 62 6c 65 5f 68 61 6e 64 6c    : tuya_ble_handl
    0x8803790:   65 5f 66 61 63 74 6f 72 79 5f 72 65 73 65 74 5f    e_factory_reset_
    0x88037a0:   65 76 74 2d 74 75 79 61 20 62 6c 65 20 73 65 6e    evt-tuya ble sen
    0x88037b0:   64 20 63 62 20 65 76 65 6e 74 20 28 63 6f 6e 6e    d cb event (conn
    0x88037c0:   65 63 74 20 73 74 61 74 75 73 20 75 70 64 61 74    ect status updat
    0x88037d0:   65 29 20 66 61 69 6c 65 64 2e 00 00 5b 44 5d 20    e) failed...[D] 
    0x88037e0:   54 55 59 41 5f 42 4c 45 3a 20 72 65 63 65 69 76    TUYA_BLE: receiv
    0x88037f0:   65 64 20 75 61 72 74 20 63 6d 64 20 64 61 74 61    ed uart cmd data
    0x8803800:   20 5b 6c 65 6e 3d 25 64 5d 20 3a 00 00 00 00 00     [len=%d] :.....
    0x8803810:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 75 61    [E] TUYA_BLE: ua
    0x8803820:   72 74 20 72 65 63 65 69 76 65 20 64 61 74 61 20    rt receive data 
    0x8803830:   63 68 65 63 6b 5f 73 75 6d 20 65 72 72 6f 72 20    check_sum error 
    0x8803840:   2c 20 72 65 63 65 69 76 65 20 73 75 6d 20 3d 20    , receive sum = 
    0x8803850:   30 78 25 30 32 78 20 3b 20 63 61 6c 20 73 75 6d    0x%02x ; cal sum
    0x8803860:   20 3d 20 30 78 25 30 32 78 00 00 00 5b 49 5d 20     = 0x%02x...[I] 
    0x8803870:   54 55 59 41 5f 42 4c 45 3a 20 43 6f 6e 6e 65 63    TUYA_BLE: Connec
    0x8803880:   74 65 64 21 00 00 00 00 5b 49 5d 20 54 55 59 41    ted!....[I] TUYA
    0x8803890:   5f 42 4c 45 3a 20 44 69 73 6f 6e 6e 65 63 74 65    _BLE: Disonnecte
    0x88038a0:   64 00 00 00 5b 57 5d 20 54 55 59 41 5f 42 4c 45    d...[W] TUYA_BLE
    0x88038b0:   3a 20 75 6e 6b 6e 6f 77 6e 20 63 6f 6e 6e 65 63    : unknown connec
    0x88038c0:   74 5f 63 68 61 6e 67 65 5f 65 76 74 21 00 00 00    t_change_evt!...
    0x88038d0:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 74 75    [E] TUYA_BLE: tu
    0x88038e0:   79 61 20 62 6c 65 20 73 65 6e 64 20 63 62 20 65    ya ble send cb e
    0x88038f0:   76 65 6e 74 20 66 61 69 6c 65 64 2e 00 00 00 00    vent failed.....
    0x8803900:   5b 44 5d 20 54 55 59 41 5f 42 4c 45 3a 20 74 75    [D] TUYA_BLE: tu
    0x8803910:   79 61 20 62 6c 65 20 73 65 6e 64 20 63 62 20 65    ya ble send cb e
    0x8803920:   76 65 6e 74 20 73 75 63 63 65 65 64 2e 00 00 00    vent succeed....
    0x8803930:   5b 49 5d 20 54 55 59 41 5f 42 4c 45 3a 20 61 64    [I] TUYA_BLE: ad
    0x8803940:   76 20 64 61 74 61 20 63 68 61 6e 67 65 64 20 2c    v data changed ,
    0x8803950:   63 75 72 72 65 6e 74 20 62 6f 75 6e 64 20 66 6c    current bound fl
    0x8803960:   61 67 20 3d 20 25 64 00 5b 49 5d 20 54 55 59 41    ag = %d.[I] TUYA
    0x8803970:   5f 42 4c 45 3a 20 61 64 76 20 64 61 74 61 20 63    _BLE: adv data c
    0x8803980:   68 61 6e 67 65 64 20 2c 63 75 72 72 65 6e 74 20    hanged ,current 
    0x8803990:   62 6f 75 6e 64 20 66 6c 61 67 20 3d 20 25 64 00    bound flag = %d.
    0x88039a0:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 70 5f    [E] TUYA_BLE: p_
    0x88039b0:   73 74 6f 72 61 67 65 5f 73 65 74 74 69 6e 67 73    storage_settings
    0x88039c0:   5f 61 75 74 68 20 6d 61 6c 6c 6f 63 20 66 61 69    _auth malloc fai
    0x88039d0:   6c 65 64 2e 00 00 00 00 5b 45 5d 20 54 55 59 41    led.....[E] TUYA
    0x88039e0:   5f 42 4c 45 3a 20 70 5f 73 74 6f 72 61 67 65 5f    _BLE: p_storage_
    0x88039f0:   73 65 74 74 69 6e 67 73 5f 73 79 73 20 6d 61 6c    settings_sys mal
    0x8803a00:   6c 6f 63 20 66 61 69 6c 65 64 2e 00 5b 44 5d 20    loc failed..[D] 
    0x8803a10:   54 55 59 41 5f 42 4c 45 3a 20 77 72 69 74 65 20    TUYA_BLE: write 
    0x8803a20:   66 6c 61 73 68 5f 73 65 74 74 69 6e 67 73 5f 61    flash_settings_a
    0x8803a30:   75 74 68 20 64 61 74 61 20 73 75 63 63 65 65 64    uth data succeed
    0x8803a40:   21 00 00 00 5b 45 5d 20 54 55 59 41 5f 42 4c 45    !...[E] TUYA_BLE
    0x8803a50:   3a 20 77 72 69 74 65 20 66 6c 61 73 68 5f 73 65    : write flash_se
    0x8803a60:   74 74 69 6e 67 73 5f 61 75 74 68 20 64 61 74 61    ttings_auth data
    0x8803a70:   20 62 61 63 6b 75 70 20 66 61 69 6c 65 64 21 00     backup failed!.
    0x8803a80:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 65 72    [E] TUYA_BLE: er
    0x8803a90:   61 73 65 20 66 6c 61 73 68 5f 73 65 74 74 69 6e    ase flash_settin
    0x8803aa0:   67 73 5f 61 75 74 68 20 64 61 74 61 20 62 61 63    gs_auth data bac
    0x8803ab0:   6b 75 70 20 66 61 69 6c 65 64 21 00 5b 45 5d 20    kup failed!.[E] 
    0x8803ac0:   54 55 59 41 5f 42 4c 45 3a 20 77 72 69 74 65 20    TUYA_BLE: write 
    0x8803ad0:   66 6c 61 73 68 5f 73 65 74 74 69 6e 67 73 5f 61    flash_settings_a
    0x8803ae0:   75 74 68 20 64 61 74 61 20 66 61 69 6c 65 64 21    uth data failed!
    0x8803af0:   00 00 00 00 5b 45 5d 20 54 55 59 41 5f 42 4c 45    ....[E] TUYA_BLE
    0x8803b00:   3a 20 65 72 61 73 65 20 66 6c 61 73 68 5f 73 65    : erase flash_se
    0x8803b10:   74 74 69 6e 67 73 5f 61 75 74 68 20 64 61 74 61    ttings_auth data
    0x8803b20:   20 66 61 69 6c 65 64 21 00 00 00 00 5b 49 5d 20     failed!....[I] 
    0x8803b30:   54 55 59 41 5f 42 4c 45 3a 20 77 72 69 74 65 20    TUYA_BLE: write 
    0x8803b40:   66 6c 61 73 68 5f 73 65 74 74 69 6e 67 73 5f 73    flash_settings_s
    0x8803b50:   79 73 20 64 61 74 61 20 73 75 63 63 65 65 64 21    ys data succeed!
    0x8803b60:   00 00 00 00 5b 45 5d 20 54 55 59 41 5f 42 4c 45    ....[E] TUYA_BLE
    0x8803b70:   3a 20 77 72 69 74 65 20 66 6c 61 73 68 5f 73 65    : write flash_se
    0x8803b80:   74 74 69 6e 67 73 5f 73 79 73 20 64 61 74 61 20    ttings_sys data 
    0x8803b90:   62 61 63 6b 75 70 20 66 61 69 6c 65 64 21 00 00    backup failed!..
    0x8803ba0:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 65 72    [E] TUYA_BLE: er
    0x8803bb0:   61 73 65 20 66 6c 61 73 68 5f 73 65 74 74 69 6e    ase flash_settin
    0x8803bc0:   67 73 5f 73 79 73 20 64 61 74 61 20 62 61 63 6b    gs_sys data back
    0x8803bd0:   75 70 20 66 61 69 6c 65 64 21 00 00 5b 45 5d 20    up failed!..[E] 
    0x8803be0:   54 55 59 41 5f 42 4c 45 3a 20 77 72 69 74 65 20    TUYA_BLE: write 
    0x8803bf0:   66 6c 61 73 68 5f 73 65 74 74 69 6e 67 73 5f 73    flash_settings_s
    0x8803c00:   79 73 20 64 61 74 61 20 66 61 69 6c 65 64 21 00    ys data failed!.
    0x8803c10:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 65 72    [E] TUYA_BLE: er
    0x8803c20:   61 73 65 20 66 6c 61 73 68 5f 73 65 74 74 69 6e    ase flash_settin
    0x8803c30:   67 73 5f 73 79 73 20 64 61 74 61 20 66 61 69 6c    gs_sys data fail
    0x8803c40:   65 64 21 00 5b 49 5d 20 54 55 59 41 5f 42 4c 45    ed!.[I] TUYA_BLE
    0x8803c50:   3a 20 54 68 65 20 73 74 61 74 65 20 68 61 73 20    : The state has 
    0x8803c60:   63 68 61 6e 67 65 64 2c 20 63 75 72 72 65 6e 74    changed, current
    0x8803c70:   20 62 6f 75 6e 64 20 66 6c 61 67 20 3d 20 25 64     bound flag = %d
    0x8803c80:   00 00 00 00 5b 45 5d 20 54 55 59 41 5f 42 4c 45    ....[E] TUYA_BLE
    0x8803c90:   3a 20 54 55 59 41 5f 42 4c 45 5f 45 56 54 5f 47    : TUYA_BLE_EVT_G
    0x8803ca0:   41 54 54 5f 53 45 4e 44 5f 44 41 54 41 20 20 65    ATT_SEND_DATA  e
    0x8803cb0:   72 72 6f 72 2e 00 00 00 5b 45 5d 20 54 55 59 41    rror....[E] TUYA
    0x8803cc0:   5f 42 4c 45 3a 20 74 75 79 61 5f 62 6c 65 5f 78    _BLE: tuya_ble_x
    0x8803cd0:   54 69 6d 65 72 5f 70 72 6f 64 5f 6d 6f 6e 69 74    Timer_prod_monit
    0x8803ce0:   6f 72 20 63 72 65 61 74 20 66 61 69 6c 65 64 00    or creat failed.
    0x8803cf0:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 74 75    [E] TUYA_BLE: tu
    0x8803d00:   79 61 5f 62 6c 65 5f 78 54 69 6d 65 72 5f 70 72    ya_ble_xTimer_pr
    0x8803d10:   6f 64 5f 6d 6f 6e 69 74 6f 72 20 73 74 61 72 74    od_monitor start
    0x8803d20:   20 66 61 69 6c 65 64 00 5b 45 5d 20 54 55 59 41     failed.[E] TUYA
    0x8803d30:   5f 42 4c 45 3a 20 75 61 72 74 20 70 72 6f 64 20    _BLE: uart prod 
    0x8803d40:   73 65 6e 64 20 62 75 66 66 65 72 20 6d 61 6c 6c    send buffer mall
    0x8803d50:   6f 63 20 66 61 69 6c 65 64 2e 00 00 5b 44 5d 20    oc failed...[D] 
    0x8803d60:   54 55 59 41 5f 42 4c 45 3a 20 41 55 43 20 45 4e    TUYA_BLE: AUC EN
    0x8803d70:   54 45 52 21 00 00 00 00 5b 44 5d 20 54 55 59 41    TER!....[D] TUYA
    0x8803d80:   5f 42 4c 45 3a 20 41 55 43 20 51 55 45 52 59 20    _BLE: AUC QUERY 
    0x8803d90:   48 49 44 21 00 00 00 00 5b 44 5d 20 54 55 59 41    HID!....[D] TUYA
    0x8803da0:   5f 42 4c 45 3a 20 41 55 43 20 51 55 45 52 59 20    _BLE: AUC QUERY 
    0x8803db0:   48 49 44 20 72 65 73 70 6f 6e 73 65 20 64 61 74    HID response dat
    0x8803dc0:   61 20 3a 20 20 5b 6c 65 6e 3d 25 64 5d 20 3a 00    a :  [len=%d] :.
    0x8803dd0:   00 00 00 00 5b 44 5d 20 54 55 59 41 5f 42 4c 45    ....[D] TUYA_BLE
    0x8803de0:   3a 20 41 55 43 20 47 50 49 4f 20 54 45 53 54 21    : AUC GPIO TEST!
    0x8803df0:   00 00 00 00 5b 44 5d 20 54 55 59 41 5f 42 4c 45    ....[D] TUYA_BLE
    0x8803e00:   3a 20 41 55 43 20 47 50 49 4f 20 54 45 53 54 20    : AUC GPIO TEST 
    0x8803e10:   73 75 63 63 65 73 73 65 64 21 00 00 5b 45 5d 20    successed!..[E] 
    0x8803e20:   54 55 59 41 5f 42 4c 45 3a 20 41 55 43 20 47 50    TUYA_BLE: AUC GP
    0x8803e30:   49 4f 20 54 45 53 54 20 66 61 69 6c 65 64 21 00    IO TEST failed!.
    0x8803e40:   5b 44 5d 20 54 55 59 41 5f 42 4c 45 3a 20 41 55    [D] TUYA_BLE: AU
    0x8803e50:   43 20 57 52 49 54 45 20 41 55 54 48 20 49 4e 46    C WRITE AUTH INF
    0x8803e60:   4f 21 00 00 5b 45 5d 20 54 55 59 41 5f 42 4c 45    O!..[E] TUYA_BLE
    0x8803e70:   3a 20 41 55 43 5f 43 4d 44 5f 57 52 49 54 45 5f    : AUC_CMD_WRITE_
    0x8803e80:   41 55 54 48 5f 49 4e 46 4f 20 65 72 72 6f 72 20    AUTH_INFO error 
    0x8803e90:   2c 73 69 6e 63 65 20 49 6e 76 61 6c 69 64 20 6c    ,since Invalid l
    0x8803ea0:   65 6e 67 74 68 21 00 00 5b 45 5d 20 54 55 59 41    ength!..[E] TUYA
    0x8803eb0:   5f 42 4c 45 3a 20 41 55 43 5f 43 4d 44 5f 57 52    _BLE: AUC_CMD_WR
    0x8803ec0:   49 54 45 5f 41 55 54 48 5f 49 4e 46 4f 20 65 72    ITE_AUTH_INFO er
    0x8803ed0:   72 6f 72 20 2c 73 69 6e 63 65 20 49 6e 76 61 6c    ror ,since Inval
    0x8803ee0:   69 64 20 70 61 72 61 73 00 00 00 00 5b 44 5d 20    id paras....[D] 
    0x8803ef0:   54 55 59 41 5f 42 4c 45 3a 20 41 55 43 20 57 52    TUYA_BLE: AUC WR
    0x8803f00:   49 54 45 20 41 55 54 48 20 49 4e 46 4f 20 73 75    ITE AUTH INFO su
    0x8803f10:   63 63 65 73 73 65 64 21 00 00 00 00 5b 45 5d 20    ccessed!....[E] 
    0x8803f20:   54 55 59 41 5f 42 4c 45 3a 20 41 55 43 5f 43 4d    TUYA_BLE: AUC_CM
    0x8803f30:   44 5f 57 52 49 54 45 5f 41 55 54 48 5f 49 4e 46    D_WRITE_AUTH_INF
    0x8803f40:   4f 20 66 61 69 6c 65 64 21 00 00 00 5b 44 5d 20    O failed!...[D] 
    0x8803f50:   54 55 59 41 5f 42 4c 45 3a 20 41 55 43 20 51 55    TUYA_BLE: AUC QU
    0x8803f60:   45 52 59 20 49 4e 46 4f 21 00 00 00 5b 45 5d 20    ERY INFO!...[E] 
    0x8803f70:   54 55 59 41 5f 42 4c 45 3a 20 41 55 43 20 51 55    TUYA_BLE: AUC QU
    0x8803f80:   45 52 59 20 49 4e 46 4f 20 61 6c 6c 6f 63 20 62    ERY INFO alloc b
    0x8803f90:   75 66 20 6d 61 6c 6c 6f 63 20 66 61 69 6c 65 64    uf malloc failed
    0x8803fa0:   2e 00 00 00 5b 44 5d 20 54 55 59 41 5f 42 4c 45    ....[D] TUYA_BLE
    0x8803fb0:   3a 20 41 55 43 5f 43 4d 44 5f 51 55 45 52 59 5f    : AUC_CMD_QUERY_
    0x8803fc0:   49 4e 46 4f 20 52 45 53 50 4f 4e 53 45 21 00 00    INFO RESPONSE!..
    0x8803fd0:   5b 44 5d 20 54 55 59 41 5f 42 4c 45 3a 20 61 75    [D] TUYA_BLE: au
    0x8803fe0:   63 20 52 45 53 45 54 21 00 00 00 00 5b 44 5d 20    c RESET!....[D] 
    0x8803ff0:   54 55 59 41 5f 42 4c 45 3a 20 41 55 43 20 57 52    TUYA_BLE: AUC WR
    0x8804000:   49 54 45 20 41 55 54 48 20 48 49 44 21 00 00 00    ITE AUTH HID!...
    0x8804010:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 57 52    [E] TUYA_BLE: WR
    0x8804020:   49 54 45 20 41 55 54 48 20 48 49 44 20 70 61 72    ITE AUTH HID par
    0x8804030:   61 20 6c 65 6e 67 74 68 20 65 72 72 6f 72 21 00    a length error!.
    0x8804040:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 57 52    [E] TUYA_BLE: WR
    0x8804050:   49 54 45 20 41 55 54 48 20 48 49 44 20 70 61 72    ITE AUTH HID par
    0x8804060:   61 20 65 72 72 6f 72 21 00 00 00 00 5b 44 5d 20    a error!....[D] 
    0x8804070:   54 55 59 41 5f 42 4c 45 3a 20 57 52 49 54 45 20    TUYA_BLE: WRITE 
    0x8804080:   41 55 54 48 20 48 49 44 20 73 75 63 63 65 73 73    AUTH HID success
    0x8804090:   65 64 2e 00 5b 45 5d 20 54 55 59 41 5f 42 4c 45    ed..[E] TUYA_BLE
    0x88040a0:   3a 20 57 52 49 54 45 20 41 55 54 48 20 48 49 44    : WRITE AUTH HID
    0x88040b0:   20 66 61 69 6c 65 64 2e 00 00 00 00 5b 44 5d 20     failed.....[D] 
    0x88040c0:   54 55 59 41 5f 42 4c 45 3a 20 41 55 43 20 51 55    TUYA_BLE: AUC QU
    0x88040d0:   45 52 59 20 46 49 4e 47 45 52 50 52 49 4e 54 21    ERY FINGERPRINT!
    0x88040e0:   00 00 00 00 5b 45 5d 20 54 55 59 41 5f 42 4c 45    ....[E] TUYA_BLE
    0x88040f0:   3a 20 41 55 43 20 51 55 45 52 59 20 49 4e 46 4f    : AUC QUERY INFO
    0x8804100:   20 61 6c 6c 6f 63 20 62 75 66 20 6d 61 6c 6c 6f     alloc buf mallo
    0x8804110:   63 20 66 61 69 6c 65 64 2e 00 00 00 5b 44 5d 20    c failed....[D] 
    0x8804120:   54 55 59 41 5f 42 4c 45 3a 20 41 55 43 5f 43 4d    TUYA_BLE: AUC_CM
    0x8804130:   44 5f 51 55 45 52 59 5f 46 49 4e 47 45 52 50 52    D_QUERY_FINGERPR
    0x8804140:   49 4e 54 20 72 65 73 70 6f 6e 73 65 64 2e 00 00    INT responsed...
    0x8804150:   5b 44 5d 20 54 55 59 41 5f 42 4c 45 3a 20 41 55    [D] TUYA_BLE: AU
    0x8804160:   43 20 52 53 53 49 20 54 45 53 54 21 00 00 00 00    C RSSI TEST!....
    0x8804170:   5b 45 5d 20 54 55 59 41 5f 42 4c 45 3a 20 61 75    [E] TUYA_BLE: au
    0x8804180:   63 20 67 65 74 20 72 73 73 69 20 66 61 69 6c 65    c get rssi faile
    0x8804190:   64 2e 00 00 5b 44 5d 20 54 55 59 41 5f 42 4c 45    d...[D] TUYA_BLE
    0x88041a0:   3a 20 61 75 63 20 67 65 74 20 72 73 73 69 20 3d    : auc get rssi =
    0x88041b0:   20 25 64 00 5b 45 5d 20 54 55 59 41 5f 42 4c 45     %d.[E] TUYA_BLE
    0x88041c0:   3a 20 54 68 65 20 61 75 74 68 6f 72 69 7a 61 74    : The authorizat
    0x88041d0:   69 6f 6e 20 69 6e 73 74 72 75 63 74 69 6f 6e 73    ion instructions
    0x88041e0:   20 61 72 65 20 6e 6f 74 20 73 75 70 70 6f 72 74     are not support
    0x88041f0:   65 64 20 69 6e 20 6e 6f 6e 2d 73 65 72 69 61 6c    ed in non-serial
    0x8804200:   20 63 68 61 6e 6e 65 6c 73 21 00 00 5b 45 5d 20     channels!..[E] 
    0x8804210:   54 55 59 41 5f 42 4c 45 3a 20 75 61 72 74 5f 64    TUYA_BLE: uart_d
    0x8804220:   61 74 61 5f 62 75 66 66 65 72 20 6d 61 6c 6c 6f    ata_buffer mallo
    0x8804230:   63 20 66 61 69 6c 65 64 2e 00 00 00 5b 44 5d 20    c failed....[D] 
    0x8804240:   54 55 59 41 5f 42 4c 45 3a 20 6d 63 75 20 6f 74    TUYA_BLE: mcu ot
    0x8804250:   61 20 75 61 72 74 20 73 65 6e 64 20 64 61 74 61    a uart send data
    0x8804260:   20 3a 20 20 5b 6c 65 6e 3d 25 64 5d 20 3a 00 00     :  [len=%d] :..
    0x8804270:   00 00 00 00 5b 45 5d 20 54 55 59 41 5f 42 4c 45    ....[E] TUYA_BLE
    0x8804280:   3a 20 74 75 79 61 5f 62 6c 65 5f 75 61 72 74 5f    : tuya_ble_uart_
    0x8804290:   63 6f 6d 6d 6f 6e 5f 6d 63 75 5f 6f 74 61 5f 70    common_mcu_ota_p
    0x88042a0:   72 6f 63 65 73 73 20 46 41 49 4c 45 44 2e 00 00    rocess FAILED...
    0x88042b0:   21 2a 2a 48 45 58 3a 25 73 0a 00 00 21 2a 2a 5b    !**HEX:%s...!**[
    0x88042c0:   25 64 2d 25 64 5d 3a 25 62 0a 00 00 21 2a 2a 5b    %d-%d]:%b...!**[
    0x88042d0:   25 64 2d 25 64 5d 3a 25 62 0a 00 00 21 21 21 67    %d-%d]:%b...!!!g
    0x88042e0:   61 70 5f 6c 69 62 5f 69 6e 69 74 3a 20 76 65 72    ap_lib_init: ver
    0x88042f0:   20 25 64 2c 20 46 5f 42 54 5f 4c 45 5f 35 5f 30     %d, F_BT_LE_5_0
    0x8804300:   5f 53 55 50 50 4f 52 54 20 25 64 2c 20 46 5f 42    _SUPPORT %d, F_B
    0x8804310:   54 5f 4c 45 5f 35 5f 30 5f 41 45 5f 41 44 56 5f    T_LE_5_0_AE_ADV_
    0x8804320:   53 55 50 50 4f 52 54 20 25 64 2c 20 46 5f 42 54    SUPPORT %d, F_BT
    0x8804330:   5f 4c 45 5f 35 5f 30 5f 41 45 5f 53 43 41 4e 5f    _LE_5_0_AE_SCAN_
    0x8804340:   53 55 50 50 4f 52 54 20 25 64 2c 20 46 5f 42 54    SUPPORT %d, F_BT
    0x8804350:   5f 4c 45 5f 34 5f 31 5f 43 42 43 5f 53 55 50 50    _LE_4_1_CBC_SUPP
    0x8804360:   4f 52 54 20 25 64 2c 20 46 5f 42 54 5f 56 45 4e    ORT %d, F_BT_VEN
    0x8804370:   44 4f 52 5f 46 45 41 54 55 52 45 5f 53 55 50 50    DOR_FEATURE_SUPP
    0x8804380:   4f 52 54 20 25 64 2c 20 46 5f 42 54 5f 4c 45 5f    ORT %d, F_BT_LE_
    0x8804390:   36 5f 30 5f 41 4f 41 5f 41 4f 44 5f 53 55 50 50    6_0_AOA_AOD_SUPP
    0x88043a0:   4f 52 54 20 25 64 2c 20 46 5f 42 54 5f 4c 45 5f    ORT %d, F_BT_LE_
    0x88043b0:   36 5f 30 5f 41 4f 58 5f 43 4f 4e 4e 4c 45 53 53    6_0_AOX_CONNLESS
    0x88043c0:   5f 53 55 50 50 4f 52 54 20 25 64 00 21 21 21 67    _SUPPORT %d.!!!g
    0x88043d0:   61 70 5f 6c 69 62 5f 69 6e 69 74 3a 20 46 5f 42    ap_lib_init: F_B
    0x88043e0:   54 5f 4c 45 5f 53 4d 50 5f 53 43 5f 4f 4f 42 5f    T_LE_SMP_SC_OOB_
    0x88043f0:   53 55 50 50 4f 52 54 20 25 64 2c 20 46 5f 42 54    SUPPORT %d, F_BT
    0x8804400:   5f 53 57 5f 52 45 53 45 54 5f 53 55 50 50 4f 52    _SW_RESET_SUPPOR
    0x8804410:   54 20 25 64 2c 20 46 5f 42 54 5f 50 41 54 43 48    T %d, F_BT_PATCH
    0x8804420:   5f 46 4f 52 5f 43 48 41 4e 47 45 5f 41 50 49 20    _FOR_CHANGE_API 
    0x8804430:   25 64 2c 20 46 5f 42 54 5f 44 4c 50 53 5f 41 50    %d, F_BT_DLPS_AP
    0x8804440:   49 20 25 64 2c 20 46 5f 42 54 5f 43 4f 4e 46 49    I %d, F_BT_CONFI
    0x8804450:   47 5f 41 50 49 20 25 64 2c 20 46 5f 42 54 5f 56    G_API %d, F_BT_V
    0x8804460:   45 4e 44 4f 52 5f 41 50 49 20 25 64 00 00 00 00    ENDOR_API %d....
    0x8804470:   21 2a 2a 6c 65 5f 63 68 65 63 6b 5f 70 72 69 76    !**le_check_priv
    0x8804480:   61 63 79 5f 62 6f 6e 64 3a 20 69 64 78 20 25 64    acy_bond: idx %d
    0x8804490:   20 70 72 69 76 61 63 79 20 64 65 76 69 63 65 00     privacy device.
    0x88044a0:   21 2a 2a 6c 65 5f 63 68 65 63 6b 5f 70 72 69 76    !**le_check_priv
    0x88044b0:   61 63 79 5f 62 6f 6e 64 3a 20 6e 6f 74 20 70 72    acy_bond: not pr
    0x88044c0:   69 76 61 63 79 20 64 65 76 69 63 65 2c 20 63 61    ivacy device, ca
    0x88044d0:   75 73 65 20 25 64 00 00 21 2a 2a 6c 65 5f 67 65    use %d..!**le_ge
    0x88044e0:   6e 5f 72 61 6e 64 5f 61 64 64 72 3a 20 67 61 70    n_rand_addr: gap
    0x88044f0:   5f 6c 69 62 2c 20 72 61 6e 64 6f 6d 20 61 64 64    _lib, random add
    0x8804500:   72 20 25 73 2c 20 61 64 64 72 20 74 79 70 65 20    r %s, addr type 
    0x8804510:   25 64 00 00 21 2a 2a 6c 65 5f 62 6f 6e 64 5f 67    %d..!**le_bond_g
    0x8804520:   65 74 5f 73 65 63 5f 6c 65 76 65 6c 3a 20 25 64    et_sec_level: %d
    0x8804530:   00 00 00 00 21 21 21 45 72 61 73 65 20 66 61 69    ....!!!Erase fai
    0x8804540:   6c 21 21 20 61 64 64 72 3d 30 78 25 30 38 78 2c    l!! addr=0x%08x,
    0x8804550:   20 72 65 74 72 79 20 25 64 2e 2e 2e 00 00 00 00     retry %d.......


** Section #10 '.debug_abbrev' (SHT_PROGBITS)
    Size   : 1476 bytes


** Section #11 '.debug_frame' (SHT_PROGBITS)
    Size   : 14248 bytes


** Section #12 '.debug_info' (SHT_PROGBITS)
    Size   : 294420 bytes


** Section #13 '.debug_line' (SHT_PROGBITS)
    Size   : 67792 bytes


** Section #14 '.debug_loc' (SHT_PROGBITS)
    Size   : 51392 bytes


** Section #15 '.debug_macinfo' (SHT_PROGBITS)
    Size   : 105668 bytes


** Section #16 '.debug_pubnames' (SHT_PROGBITS)
    Size   : 16199 bytes


** Section #17 '.symtab' (SHT_SYMTAB)
    Size   : 39472 bytes (alignment 4)
    String table #18 '.strtab'
    Last local symbol no. 1358


** Section #18 '.strtab' (SHT_STRTAB)
    Size   : 31060 bytes


** Section #19 '.note' (SHT_NOTE)
    Size   : 52 bytes (alignment 4)


** Section #20 '.comment' (SHT_PROGBITS)
    Size   : 67808 bytes


** Section #21 '.shstrtab' (SHT_STRTAB)
    Size   : 276 bytes


address     size       variable name                            type
0x00209aec  0x10       service_rand                             array[16] of uint8_t

address     size       variable name                            type
0x00209ae8  0x4        int_mask                                 uint32_t

address     size       variable name                            type
0x0081c368  0x100      K                                        array[64] of const uint32_t

address     size       variable name                            type
0x00209a94  0x1        tuya_ble_production_test_flag            uint8_t

address     size       variable name                            type
0x00209a95  0x1        tuya_ble_production_test_with_ble_flag   uint8_t

address     size       variable name                            type
0x00209a98  0x4        tuya_ble_xTimer_prod_monitor             tuya_ble_timer_t

address     size       variable name                            type
0x002099e4  0x1        gatt_queue_flag                          uint8_t

address     size       variable name                            type
0x002099e8  0xc        gatt_send_queue                          tuya_ble_queue_t
0x002099e8  0x4        gatt_send_queue.buf                      pointer to unknown Type 
0x002099ec  0x1        gatt_send_queue.size                     uint8_t
0x002099ed  0x1        gatt_send_queue.offset                   uint8_t
0x002099ee  0x1        gatt_send_queue.rd_ptr                   uint8_t
0x002099ef  0x1        gatt_send_queue.wr_ptr                   uint8_t
0x002099f0  0x1        gatt_send_queue.used                     uint8_t

address     size       variable name                            type
0x002099f4  0xa0       send_buf                                 array[20] of tuya_ble_gatt_send_data_t

address     size       variable name                            type
0x0081c304  0xc        g_day_per_mon                            array[12] of const uint8_t

address     size       variable name                            type
0x002099e2  0x1        frame_seq                                frame_seq_t

address     size       variable name                            type
0x002099a8  0x1c       adv_data                                 array[28] of uint8_t

address     size       variable name                            type
0x0081c2ca  0x1c       adv_data_const                           array[28] of const uint8_t

address     size       variable name                            type
0x002097a4  0x4        m_cb_queue_table                         array[1] of uint32_t

address     size       variable name                            type
0x002099c4  0x1e       scan_rsp_data                            array[30] of uint8_t

address     size       variable name                            type
0x0081c2e6  0x1e       scan_rsp_data_const                      array[30] of const uint8_t

address     size       variable name                            type
0x00208142  0x1        tuya_ble_connect_status                  volatile tuya_ble_connect_status_t

address     size       variable name                            type
0x002097d4  0x1d4      tuya_ble_current_para                    tuya_ble_parameters_settings_t
0x002097d4  0xe0       tuya_ble_current_para.auth_settings      tuya_ble_auth_settings_t
0x002097d4  0x4        tuya_ble_current_para.auth_settings.crc  uint32_t
0x002097d8  0x4        tuya_ble_current_para.auth_settings.settings_version uint32_t
0x002097dc  0x13       tuya_ble_current_para.auth_settings.h_id array[19] of uint8_t
0x002097ef  0x10       tuya_ble_current_para.auth_settings.device_id array[16] of uint8_t
0x002097ff  0x6        tuya_ble_current_para.auth_settings.mac  array[6] of uint8_t
0x00209805  0x20       tuya_ble_current_para.auth_settings.auth_key array[32] of uint8_t
0x00209825  0xc        tuya_ble_current_para.auth_settings.mac_string array[12] of uint8_t
0x00209831  0x80     * tuya_ble_current_para.auth_settings.res  array[128] of uint8_t
0x002098b4  0xe0       tuya_ble_current_para.sys_settings       tuya_ble_sys_settings_t
0x002098b4  0x4        tuya_ble_current_para.sys_settings.crc   uint32_t
0x002098b8  0x4        tuya_ble_current_para.sys_settings.settings_version uint32_t
0x002098bc  0x1        tuya_ble_current_para.sys_settings.pid_type tuya_ble_product_id_type_t
0x002098bd  0x1        tuya_ble_current_para.sys_settings.pid_len uint8_t
0x002098be  0x10       tuya_ble_current_para.sys_settings.common_pid array[16] of uint8_t
0x002098ce  0x6        tuya_ble_current_para.sys_settings.login_key array[6] of uint8_t
0x002098d4  0x20       tuya_ble_current_para.sys_settings.ecc_secret_key array[32] of uint8_t
0x002098f4  0x16       tuya_ble_current_para.sys_settings.device_virtual_id array[22] of uint8_t
0x0020990a  0x6        tuya_ble_current_para.sys_settings.user_rand array[6] of uint8_t
0x00209910  0x1        tuya_ble_current_para.sys_settings.bound_flag uint8_t
0x00209911  0x1        tuya_ble_current_para.sys_settings.factory_test_flag uint8_t
0x00209912  0x7f     * tuya_ble_current_para.sys_settings.res   array[127] of uint8_t
0x00209994  0x1        tuya_ble_current_para.pid_type           tuya_ble_product_id_type_t
0x00209995  0x1        tuya_ble_current_para.pid_len            uint8_t
0x00209996  0x10       tuya_ble_current_para.pid                array[16] of uint8_t

address     size       variable name                            type
0x0020918c  0x4        pxEnd                                    pointer to BlockLink_t

address     size       variable name                            type
0x002091a4  0x600      ucHeap                                   array[1536] of uint8_t

address     size       variable name                            type
0x00209198  0x4        xBlockAllocatedBit                       uint32_t

address     size       variable name                            type
0x00209190  0x4        xFreeBytesRemaining                      uint32_t

address     size       variable name                            type
0x00209194  0x4        xMinimumEverFreeBytesRemaining           uint32_t

address     size       variable name                            type
0x0020919c  0x8        xStart                                   BlockLink_t
0x0020919c  0x4        xStart.pxNextFreeBlock                   pointer to A_BLOCK_LINK
0x002091a0  0x4        xStart.xBlockSize                        uint32_t

address     size       variable name                            type
0x00209128  0x14       air_recv_packet                          tuya_ble_r_air_recv_packet
0x00209128  0x4        air_recv_packet.recv_len                 uint32_t
0x0020912c  0x4        air_recv_packet.recv_len_max             uint32_t
0x00209130  0x4        air_recv_packet.recv_data                pointer to uint8_t
0x00209134  0x4        air_recv_packet.decrypt_buf_len          uint32_t
0x00209138  0x4        air_recv_packet.de_encrypt_buf           pointer to uint8_t

address     size       variable name                            type
0x00208134  0xe        current_timems_string                    array[14] of char

address     size       variable name                            type
0x00209108  0x4        tuya_ble_firmware_version                uint32_t

address     size       variable name                            type
0x0020910c  0x4        tuya_ble_hardware_version                uint32_t

address     size       variable name                            type
0x00209110  0x4        tuya_ble_mcu_firmware_version            uint32_t

address     size       variable name                            type
0x00209114  0x4        tuya_ble_mcu_hardware_version            uint32_t

address     size       variable name                            type
0x00209105  0x1        tuya_ble_ota_status                      tuya_ble_ota_status_t

address     size       variable name                            type
0x00209120  0x6        tuya_ble_pair_rand                       array[6] of uint8_t

address     size       variable name                            type
0x00209104  0x1        tuya_ble_pair_rand_valid                 uint8_t

address     size       variable name                            type
0x00209118  0x4        tuya_ble_receive_sn                      uint32_t

address     size       variable name                            type
0x00208130  0x4        tuya_ble_send_sn                         uint32_t

address     size       variable name                            type
0x0020913c  0x28       ty_trsmitr_proc                          frm_trsmitr_proc_s
0x0020913c  0x4        ty_trsmitr_proc.total                    frame_total_t
0x00209140  0x1        ty_trsmitr_proc.version                  uint8_t
0x00209141  0x1        ty_trsmitr_proc.seq                      frame_seq_t
0x00209142  0x1      * ty_trsmitr_proc.pkg_desc                 frm_pkg_desc_t
0x00209144  0x4        ty_trsmitr_proc.subpkg_num               frame_subpkg_num_t
0x00209148  0x4        ty_trsmitr_proc.pkg_trsmitr_cnt          uint32_t
0x0020914c  0x1        ty_trsmitr_proc.subpkg_len               frame_subpkg_len_t
0x0020914d  0x14       ty_trsmitr_proc.subpkg                   array[20] of uint8_t

address     size       variable name                            type
0x00209164  0x28       ty_trsmitr_proc_send                     frm_trsmitr_proc_s
0x00209164  0x4        ty_trsmitr_proc_send.total               frame_total_t
0x00209168  0x1        ty_trsmitr_proc_send.version             uint8_t
0x00209169  0x1        ty_trsmitr_proc_send.seq                 frame_seq_t
0x0020916a  0x1      * ty_trsmitr_proc_send.pkg_desc            frm_pkg_desc_t
0x0020916c  0x4        ty_trsmitr_proc_send.subpkg_num          frame_subpkg_num_t
0x00209170  0x4        ty_trsmitr_proc_send.pkg_trsmitr_cnt     uint32_t
0x00209174  0x1        ty_trsmitr_proc_send.subpkg_len          frame_subpkg_len_t
0x00209175  0x14       ty_trsmitr_proc_send.subpkg              array[20] of uint8_t

address     size       variable name                            type
0x00208fd8  0x12c      UART_RX_Buffer                           array[300] of uint8_t

address     size       variable name                            type
0x00208fce  0x3        UART_RX_Buffer_temp                      array[3] of uint8_t

address     size       variable name                            type
0x00208fcc  0x2        UART_RX_Count                            volatile uint16_t

address     size       variable name                            type
0x00208fc9  0x1        current_uart_rev_state_type              volatile tuya_ble_uart_rev_state_type_t

address     size       variable name                            type
0x00208fc8  0x1        m_callback_numbers                       uint8_t

address     size       variable name                            type
0x00208fd4  0x4        tuya_ble_xtimer_connect_monitor          tuya_ble_timer_t

address     size       variable name                            type
0x00208fca  0x2        uart_data_len                            uint16_t

address     size       variable name                            type
0x002087c8  0x800      TempBufferHead                           array[2048] of uint8_t

address     size       variable name                            type
0x0020866e  0x2        current_package                          uint16_t

address     size       variable name                            type
0x00208778  0x50       dfu_settings                             dfu_settings_t
0x00208778  0x4        dfu_settings.crc                         uint32_t
0x0020877c  0x4        dfu_settings.settings_version            uint32_t
0x00208780  0x1c       dfu_settings.file_info                   dfu_firmware_file_info_t
0x00208780  0x4        dfu_settings.file_info.firmware_file_version uint32_t
0x00208784  0x4        dfu_settings.file_info.firmware_file_length uint32_t
0x00208788  0x4        dfu_settings.file_info.firmware_file_crc uint32_t
0x0020878c  0x10       dfu_settings.file_info.firmware_file_md5 array[16] of uint8_t
0x0020879c  0x4        dfu_settings.write_offset                uint32_t
0x002087a0  0x8        dfu_settings.progress                    dfu_firmware_progress_t
0x002087a0  0x4        dfu_settings.progress.firmware_image_offset_last uint32_t
0x002087a4  0x4        dfu_settings.progress.firmware_image_crc_last uint32_t
0x002087a8  0x20       dfu_settings.res                         array[8] of uint32_t

address     size       variable name                            type
0x00208668  0x1        erase_error                              uint8_t

address     size       variable name                            type
0x00208669  0x1        flstatus                                 _Bool

address     size       variable name                            type
0x00208670  0x2        last_package                             uint16_t

address     size       variable name                            type
0x0020866c  0x2        ota_tmp_buf_used_size                    uint16_t

address     size       variable name                            type
0x0020812c  0x1        prev_bp_lv                               uint8_t

address     size       variable name                            type
0x00000000  0x4        signal                                   uint32_t

address     size       variable name                            type
0x0020866a  0x1        tuya_ota_status                          volatile tuya_ota_status_t

address     size       variable name                            type
0x002084b4  0x4        app_custom_task_handle                   pointer to unknown Type 

address     size       variable name                            type
0x0081c276  0x21       auth_key_test                            array[33] of const char

address     size       variable name                            type
0x00208636  0x32       custom_data                              custom_data_type_t
0x00208636  0x32       custom_data.data                         array[50] of uint8_t

address     size       variable name                            type
0x0081c297  0x11       device_id_test                           array[17] of const char

address     size       variable name                            type
0x002084bc  0x78       device_param                             tuya_ble_device_param_t
0x002084bc  0x1        device_param.device_id_len               uint8_t
0x002084bd  0x14       device_param.device_id                   array[20] of uint8_t
0x002084d1  0x1        device_param.p_type                      tuya_ble_product_id_type_t
0x002084d2  0x1        device_param.product_id_len              uint8_t
0x002084d3  0x10       device_param.product_id                  array[16] of uint8_t
0x002084e3  0x16       device_param.device_vid                  array[22] of uint8_t
0x002084f9  0x20       device_param.auth_key                    array[32] of uint8_t
0x00208519  0x6        device_param.login_key                   array[6] of uint8_t
0x0020851f  0x7        device_param.mac_addr                    tuya_ble_gap_addr_t
0x0020851f  0x1        device_param.mac_addr.addr_type          tuya_ble_addr_type_t
0x00208520  0x6        device_param.mac_addr.addr               array[6] of uint8_t
0x00208526  0x1      * device_param.bound_flag                  uint8_t
0x00208528  0x4        device_param.firmware_version            uint32_t
0x0020852c  0x4        device_param.hardware_version            uint32_t
0x00208530  0x1        device_param.reserve_1                   uint8_t
0x00208531  0x1        device_param.reserve_2                   uint8_t

address     size       variable name                            type
0x00208534  0x102      dp_data_array                            array[258] of uint8_t

address     size       variable name                            type
0x002084b0  0x2        dp_data_len                              uint16_t

address     size       variable name                            type
0x0081c270  0x6        mac_test                                 array[6] of const uint8_t

address     size       variable name                            type
0x002084b8  0x4        tuya_custom_queue_handle                 pointer to unknown Type 

address     size       variable name                            type
0x0081c1b8  0x2        GATT_UUID16_KNS_SERVICE                  array[2] of const uint8_t

address     size       variable name                            type
0x0020849c  0x14       gParaValue_data                          array[20] of uint8_t

address     size       variable name                            type
0x0081c1bc  0xa8       kns_attr_tbl                             array[6] of const T_ATTRIB_APPL

address     size       variable name                            type
0x00000000  0x2        kns_attr_tbl_size                        const uint16_t

address     size       variable name                            type
0x0081c264  0xc        kns_cbs                                  const T_FUN_GATT_SERVICE_CBS
0x0081c264  0x4        kns_cbs.read_attr_cb                     P_FUN_GATT_READ_ATTR_CB
0x0081c268  0x4        kns_cbs.write_attr_cb                    P_FUN_GATT_WRITE_ATTR_CB
0x0081c26c  0x4        kns_cbs.cccd_update_cb                   P_FUN_GATT_CCCD_UPDATE_CB

address     size       variable name                            type
0x00208498  0x4        pfn_kns_cb                               P_FUN_SERVER_GENERAL_CB

address     size       variable name                            type
0x0020823c  0x1        IO_UART_DLPS_Enter_Allowed               _Bool

address     size       variable name                            type
0x00208240  0x258      UART_RX_Buffer                           array[600] of uint8_t

address     size       variable name                            type
0x0020823e  0x2        UART_RX_Count                            uint16_t

address     size       variable name                            type
0x002080c0  0x6c       overlay_sections                         array[3] of T_OVERLAY_SECTION

address     size       variable name                            type
0x00208234  0x8        scenario_name                            array[8] of char

address     size       variable name                            type
0x00208232  0x1        gap_conn_state                           T_GAP_CONN_STATE

address     size       variable name                            type
0x00208231  0x1        gap_dev_state                            T_GAP_DEV_STATE
0x00208231  0x1(7:1)   gap_dev_state.gap_init_state             uint8_t
0x00208231  0x1(6:1)   gap_dev_state.gap_adv_sub_state          uint8_t
0x00208231  0x1(4:2)   gap_dev_state.gap_adv_state              uint8_t
0x00208231  0x1(2:2)   gap_dev_state.gap_scan_state             uint8_t
0x00208231  0x1(0:2)   gap_dev_state.gap_conn_state             uint8_t

address     size       variable name                            type
0x00208230  0x1        m_conn_id                                uint8_t

address     size       variable name                            type
0x00208233  0x1        tuya_srv_id                              T_SERVER_ID

address     size       variable name                            type
0x0081c170  0x1f       adv_data                                 array[31] of const uint8_t

address     size       variable name                            type
0x0081c158  0x18       scan_rsp_data                            array[24] of const uint8_t

address     size       variable name                            type
0x0020822c  0x4        xTimer_io_uart_dlps_monitor              TimerHandle_t

address     size       variable name                            type
0x0020821c  0x4        app_task_handle                          pointer to unknown Type 

address     size       variable name                            type
0x00208220  0x4        evt_queue_handle                         pointer to unknown Type 

address     size       variable name                            type
0x00208224  0x4        io_queue_handle                          pointer to unknown Type 

address     size       variable name                            type
0x00208228  0x4        tuya_queue_handle                        pointer to unknown Type 

address     size       variable name                            type
0x0020820c  0x10       Iv                                       array[4] of uint32_t

address     size       variable name                            type
0x00208160  0x84       CPU_StoreReg                             array[33] of uint32_t

address     size       variable name                            type
0x00208154  0x4        PeriIntStoreReg                          uint32_t

address     size       variable name                            type
0x002081e4  0x28       Pinmux_StoreReg                          array[10] of uint32_t

address     size       variable name                            type
0x0020815c  0x4        User_IO_EnterDlpsCB                      DLPS_IO_EnterDlpsCB

address     size       variable name                            type
0x00208158  0x4        User_IO_ExitDlpsCB                       DLPS_IO_ExitDlpsCB

address     size       variable name                            type
0x0081c008  0x20       app_cb_table                             const T_APP_CB_TABLE
0x0081c008  0x4        app_cb_table.app_cb_signature            uint32_t
0x0081c00c  0x4        app_cb_table.app_cb_numbers              uint32_t
0x0081c010  0x18       app_cb_table.app_cb_addr                 array[6] of uint32_t

address     size       variable name                            type
0x0020814c  0x4        app_pre_main_cb                          USER_CALL_BACK

address     size       variable name                            type
0x0080e1e0  0x220      auth_header                              const T_AUTH_HEADER_FORMAT
0x0080e1e0  0x100      auth_header.payload_signature            array[256] of uint8_t
0x0080e2e0  0x10       auth_header.payload_mac                  array[16] of uint8_t
0x0080e2f0  0x100      auth_header.header_signature             array[256] of uint8_t
0x0080e3f0  0x10       auth_header.header_mac                   array[16] of uint8_t

address     size       variable name                            type
0x002080bc  0x4        check_reset_ram                          T_CHECK_RESET_RAM_RECORD
0x002080bc  0x4(8:24)  check_reset_ram.check_reset_ram_pattern  uint32_t
0x002080bc  0x4(0:8)   check_reset_ram.check_reset_ram_type     uint32_t

address     size       variable name                            type
0x0080e000  0x1e0      img_header                               const T_IMG_HEADER_FORMAT
0x0080e000  0xc        img_header.ctrl_header                   T_IMG_CTRL_HEADER_FORMAT
0x0080e000  0x1        img_header.ctrl_header.ic_type           uint8_t
0x0080e001  0x1        img_header.ctrl_header.secure_version    uint8_t
0x0080e002  0x2        img_header.ctrl_header.ctrl_flag         anonymous
0x0080e002  0x2        img_header.ctrl_header.ctrl_flag.value   uint16_t
0x0080e002  0x2        img_header.ctrl_header.ctrl_flag.flag_value anonymous
0x0080e002  0x2(15:1)  img_header.ctrl_header.ctrl_flag.flag_value.xip uint16_t
0x0080e002  0x2(14:1)  img_header.ctrl_header.ctrl_flag.flag_value.enc uint16_t
0x0080e002  0x2(13:1)  img_header.ctrl_header.ctrl_flag.flag_value.load_when_boot uint16_t
0x0080e002  0x2(12:1)  img_header.ctrl_header.ctrl_flag.flag_value.enc_load uint16_t
0x0080e002  0x2(9:3)   img_header.ctrl_header.ctrl_flag.flag_value.enc_key_select uint16_t
0x0080e002  0x2(8:1)   img_header.ctrl_header.ctrl_flag.flag_value.not_ready uint16_t
0x0080e002  0x2(7:1)   img_header.ctrl_header.ctrl_flag.flag_value.not_obsolete uint16_t
0x0080e002  0x2(6:1)   img_header.ctrl_header.ctrl_flag.flag_value.integrity_check_en_in_boot uint16_t
0x0080e002  0x2(0:6)   img_header.ctrl_header.ctrl_flag.flag_value.rsvd uint16_t
0x0080e004  0x2        img_header.ctrl_header.image_id          uint16_t
0x0080e006  0x2        img_header.ctrl_header.crc16             uint16_t
0x0080e008  0x4        img_header.ctrl_header.payload_len       uint32_t
0x0080e00c  0x10       img_header.uuid                          array[16] of uint8_t
0x0080e01c  0x4        img_header.exe_base                      uint32_t
0x0080e020  0x4        img_header.load_base                     uint32_t
0x0080e024  0x4        img_header.load_len                      uint32_t
0x0080e028  0x4        img_header.img_base                      uint32_t
0x0080e02c  0x4        img_header.rsvd0                         array[4] of uint8_t
0x0080e030  0x4        img_header.magic_pattern                 uint32_t
0x0080e034  0x10       img_header.dec_key                       array[16] of uint8_t
0x0080e044  0x1c       img_header.rsvd1                         array[28] of uint8_t
0x0080e060  0x10       img_header.git_ver                       T_VERSION_FORMAT
0x0080e060  0x4        img_header.git_ver.ver_info              anonymous
0x0080e060  0x4        img_header.git_ver.ver_info.version      uint32_t
0x0080e060  0x4        img_header.git_ver.ver_info.sub_version  anonymous
0x0080e060  0x4(28:4)  img_header.git_ver.ver_info.sub_version._version_major uint32_t
0x0080e060  0x4(20:8)  img_header.git_ver.ver_info.sub_version._version_minor uint32_t
0x0080e060  0x4(5:15)  img_header.git_ver.ver_info.sub_version._version_revision uint32_t
0x0080e060  0x4(0:5)   img_header.git_ver.ver_info.sub_version._version_reserve uint32_t
0x0080e064  0x4        img_header.git_ver._version_commitid     uint32_t
0x0080e068  0x8        img_header.git_ver._customer_name        array[8] of uint8_t
0x0080e070  0x104      img_header.rsaPubKey                     T_RSA_PUBLIC_KEY
0x0080e070  0x100      img_header.rsaPubKey.N                   array[256] of uint8_t
0x0080e170  0x4        img_header.rsaPubKey.E                   array[4] of uint8_t
0x0080e174  0x20       img_header.sha256                        array[32] of uint8_t
0x0080e194  0x44       img_header.rsvd2                         array[68] of uint8_t
0x0080e1d8  0x4        img_header.app_cb_signature              uint32_t
0x0080e1dc  0x4        img_header.app_cb_table_base_address     uint32_t

address     size       variable name                            type
0x00208150  0x4        random_seed_value                        uint32_t

address     size       variable name                            type
0x00208148  0x4        user_dfu_status_cb                       BOOL_DFU_STATUS_CB

address     size       variable name                            type
0x00208144  0x4        user_wdg_cb                              BOOL_WDG_CB

